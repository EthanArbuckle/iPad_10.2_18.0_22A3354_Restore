unint64_t sub_21501C570(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *a1;
  v2 = *(*a1)++;
  v3 = v2 >> 1;
  if ((v2 & 1) != 0)
  {
    v4 = v1[1];
    *a1 = v1 + 2;
    v3 = (v2 >> 2) | (v4 << 6);
    if ((v2 & 3) != 1)
    {
      v5 = v1[2];
      *a1 = v1 + 3;
      v3 = (v3 >> 1) | (v5 << 13);
      if ((v2 & 7) != 3)
      {
        v6 = v1[3];
        *a1 = v1 + 4;
        v3 = (v3 >> 1) | (v6 << 20);
        if ((v2 & 0xF) != 7)
        {
          v7 = v1[4];
          *a1 = v1 + 5;
          v3 = (v3 >> 1) | (v7 << 27);
          if ((v2 & 0x1F) != 0xF)
          {
            v8 = v1[5];
            *a1 = v1 + 6;
            v3 = (v3 >> 1) | (v8 << 34);
            if ((v2 & 0x3F) != 0x1F)
            {
              v9 = v1[6];
              *a1 = v1 + 7;
              v3 = (v3 >> 1) | (v9 << 41);
              if ((v2 & 0x7F) != 0x3F)
              {
                v10 = (v3 >> 1) | ((unint64_t)v1[7] << 48);
                *a1 = v1 + 9;
                return v10 | ((unint64_t)v1[8] << 56);
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

char *sub_21501C66C(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;

  v5 = a2;
  if (a2 >= 0)
    v7 = a2;
  else
    v7 = a2 + 7;
  v8 = a2 - (v7 & 0xFFFFFFFFFFFFFFF8);
  v9 = sub_21502DAB0(0, a2 & ~(a2 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v11 = v9;
  if ((uint64_t)v8 < 1)
    goto LABEL_25;
  v12 = *(unsigned __int8 *)(*a1)++;
  v3 = v12 >> (-(char)v8 & 7);
  v4 = *((_QWORD *)v9 + 2);
  v10 = *((_QWORD *)v9 + 3);
  v2 = v4 + 1;
  if (v4 >= v10 >> 1)
    goto LABEL_50;
  while (1)
  {
    v10 = v3 & 1;
    *((_QWORD *)v11 + 2) = v2;
    *(_QWORD *)&v11[8 * v4 + 32] = v10;
    if (v8 != 1)
    {
      v13 = *((_QWORD *)v11 + 3);
      v14 = v4 + 2;
      if (v2 >= v13 >> 1)
        v11 = sub_21502DAB0((char *)(v13 > 1), v4 + 2, 1, v11);
      v10 = (v3 >> 1) & 1;
      *((_QWORD *)v11 + 2) = v14;
      *(_QWORD *)&v11[8 * v2 + 32] = v10;
      if (v8 != 2)
      {
        v15 = *((_QWORD *)v11 + 3);
        v2 = v4 + 3;
        if (v14 >= v15 >> 1)
          v11 = sub_21502DAB0((char *)(v15 > 1), v4 + 3, 1, v11);
        v10 = (v3 >> 2) & 1;
        *((_QWORD *)v11 + 2) = v2;
        *(_QWORD *)&v11[8 * v14 + 32] = v10;
        if (v8 != 3)
        {
          v16 = *((_QWORD *)v11 + 3);
          v17 = v4 + 4;
          if (v2 >= v16 >> 1)
            v11 = sub_21502DAB0((char *)(v16 > 1), v4 + 4, 1, v11);
          v10 = (v3 >> 3) & 1;
          *((_QWORD *)v11 + 2) = v17;
          *(_QWORD *)&v11[8 * v2 + 32] = v10;
          if (v8 != 4)
          {
            v18 = *((_QWORD *)v11 + 3);
            v2 = v4 + 5;
            if (v17 >= v18 >> 1)
              v11 = sub_21502DAB0((char *)(v18 > 1), v4 + 5, 1, v11);
            v10 = (v3 >> 4) & 1;
            *((_QWORD *)v11 + 2) = v2;
            *(_QWORD *)&v11[8 * v17 + 32] = v10;
            if (v8 != 5)
            {
              v19 = *((_QWORD *)v11 + 3);
              v20 = v4 + 6;
              if (v2 >= v19 >> 1)
                v11 = sub_21502DAB0((char *)(v19 > 1), v4 + 6, 1, v11);
              v10 = (v3 >> 5) & 1;
              *((_QWORD *)v11 + 2) = v20;
              *(_QWORD *)&v11[8 * v2 + 32] = v10;
              if (v8 != 6)
              {
                v21 = *((_QWORD *)v11 + 3);
                v2 = v4 + 7;
                if (v20 >= v21 >> 1)
                  v11 = sub_21502DAB0((char *)(v21 > 1), v4 + 7, 1, v11);
                v10 = (v3 >> 6) & 1;
                *((_QWORD *)v11 + 2) = v2;
                *(_QWORD *)&v11[8 * v20 + 32] = v10;
              }
            }
          }
        }
      }
    }
LABEL_25:
    if (v5 >= -7)
      break;
LABEL_49:
    __break(1u);
LABEL_50:
    v11 = sub_21502DAB0((char *)(v10 > 1), v2, 1, v11);
  }
  v10 = v5 + 7;
  if ((unint64_t)(v5 + 7) >= 0xF)
  {
    v22 = v7 >> 3;
    v7 = *a1;
    while (v22)
    {
      v8 = *(unsigned __int8 *)v7;
      v24 = *((_QWORD *)v11 + 2);
      v23 = *((_QWORD *)v11 + 3);
      v25 = v23 >> 1;
      v26 = v24 + 1;
      if (v23 >> 1 <= v24)
      {
        v11 = sub_21502DAB0((char *)(v23 > 1), v24 + 1, 1, v11);
        v23 = *((_QWORD *)v11 + 3);
        v25 = v23 >> 1;
      }
      *((_QWORD *)v11 + 2) = v26;
      *(_QWORD *)&v11[8 * v24 + 32] = v8 & 1;
      v27 = v24 + 2;
      if (v25 < v27)
        v11 = sub_21502DAB0((char *)(v23 > 1), v27, 1, v11);
      *((_QWORD *)v11 + 2) = v27;
      *(_QWORD *)&v11[8 * v26 + 32] = (v8 >> 1) & 1;
      v29 = *((_QWORD *)v11 + 2);
      v28 = *((_QWORD *)v11 + 3);
      v30 = v28 >> 1;
      v31 = v29 + 1;
      if (v28 >> 1 <= v29)
      {
        v11 = sub_21502DAB0((char *)(v28 > 1), v29 + 1, 1, v11);
        v28 = *((_QWORD *)v11 + 3);
        v30 = v28 >> 1;
      }
      *((_QWORD *)v11 + 2) = v31;
      *(_QWORD *)&v11[8 * v29 + 32] = (v8 >> 2) & 1;
      v32 = v29 + 2;
      if (v30 < v32)
        v11 = sub_21502DAB0((char *)(v28 > 1), v32, 1, v11);
      *((_QWORD *)v11 + 2) = v32;
      *(_QWORD *)&v11[8 * v31 + 32] = (v8 >> 3) & 1;
      v34 = *((_QWORD *)v11 + 2);
      v33 = *((_QWORD *)v11 + 3);
      v35 = v33 >> 1;
      v36 = v34 + 1;
      if (v33 >> 1 <= v34)
      {
        v11 = sub_21502DAB0((char *)(v33 > 1), v34 + 1, 1, v11);
        v33 = *((_QWORD *)v11 + 3);
        v35 = v33 >> 1;
      }
      *((_QWORD *)v11 + 2) = v36;
      *(_QWORD *)&v11[8 * v34 + 32] = (v8 >> 4) & 1;
      v37 = v34 + 2;
      if (v35 < v37)
        v11 = sub_21502DAB0((char *)(v33 > 1), v37, 1, v11);
      *((_QWORD *)v11 + 2) = v37;
      *(_QWORD *)&v11[8 * v36 + 32] = (v8 >> 5) & 1;
      v39 = *((_QWORD *)v11 + 2);
      v38 = *((_QWORD *)v11 + 3);
      v40 = v38 >> 1;
      v5 = v39 + 1;
      if (v38 >> 1 <= v39)
      {
        v11 = sub_21502DAB0((char *)(v38 > 1), v39 + 1, 1, v11);
        v38 = *((_QWORD *)v11 + 3);
        v40 = v38 >> 1;
      }
      *((_QWORD *)v11 + 2) = v5;
      *(_QWORD *)&v11[8 * v39 + 32] = (v8 >> 6) & 1;
      v2 = v39 + 2;
      if (v40 < (uint64_t)v2)
        v11 = sub_21502DAB0((char *)(v38 > 1), v2, 1, v11);
      ++v7;
      v10 = v8 >> 7;
      *((_QWORD *)v11 + 2) = v2;
      *(_QWORD *)&v11[8 * v5 + 32] = v10;
      if (!--v22)
      {
        *a1 = v7;
        return v11;
      }
    }
    __break(1u);
    goto LABEL_49;
  }
  return v11;
}

char *sub_21501CB10(unsigned __int8 **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  if (a2 >= 0)
    v7 = a2;
  else
    v7 = a2 + 3;
  v8 = a2 - (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v9 = sub_21502DAB0(0, a2 & ~(a2 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v11 = v9;
  if (v8 < 1)
    goto LABEL_13;
  v12 = *(*a1)++;
  v3 = v12 >> (2 * ((3 * v8) & 3));
  v4 = *((_QWORD *)v9 + 2);
  v10 = *((_QWORD *)v9 + 3);
  v2 = v4 + 1;
  if (v4 >= v10 >> 1)
    goto LABEL_28;
  while (1)
  {
    v10 = v3 & 3;
    *((_QWORD *)v11 + 2) = v2;
    *(_QWORD *)&v11[8 * v4 + 32] = v10;
    if (v8 != 1)
    {
      v13 = *((_QWORD *)v11 + 3);
      v14 = v4 + 2;
      if (v2 >= v13 >> 1)
        v11 = sub_21502DAB0((char *)(v13 > 1), v4 + 2, 1, v11);
      v10 = (v3 >> 2) & 3;
      *((_QWORD *)v11 + 2) = v14;
      *(_QWORD *)&v11[8 * v2 + 32] = v10;
      if (v8 != 2)
      {
        v15 = *((_QWORD *)v11 + 3);
        v2 = v4 + 3;
        if (v14 >= v15 >> 1)
          v11 = sub_21502DAB0((char *)(v15 > 1), v4 + 3, 1, v11);
        v10 = (v3 >> 4) & 3;
        *((_QWORD *)v11 + 2) = v2;
        *(_QWORD *)&v11[8 * v14 + 32] = v10;
      }
    }
LABEL_13:
    if (a2 >= -3)
      break;
    __break(1u);
LABEL_28:
    v11 = sub_21502DAB0((char *)(v10 > 1), v2, 1, v11);
  }
  if ((unint64_t)(a2 + 3) >= 7)
  {
    v16 = v7 >> 2;
    v17 = *a1;
    do
    {
      v18 = *v17;
      v20 = *((_QWORD *)v11 + 2);
      v19 = *((_QWORD *)v11 + 3);
      v21 = v19 >> 1;
      v22 = v20 + 1;
      if (v19 >> 1 <= v20)
      {
        v11 = sub_21502DAB0((char *)(v19 > 1), v20 + 1, 1, v11);
        v19 = *((_QWORD *)v11 + 3);
        v21 = v19 >> 1;
      }
      *((_QWORD *)v11 + 2) = v22;
      *(_QWORD *)&v11[8 * v20 + 32] = v18 & 3;
      v23 = v20 + 2;
      if (v21 < v23)
        v11 = sub_21502DAB0((char *)(v19 > 1), v23, 1, v11);
      *((_QWORD *)v11 + 2) = v23;
      *(_QWORD *)&v11[8 * v22 + 32] = (v18 >> 2) & 3;
      v25 = *((_QWORD *)v11 + 2);
      v24 = *((_QWORD *)v11 + 3);
      v26 = v24 >> 1;
      v27 = v25 + 1;
      if (v24 >> 1 <= v25)
      {
        v11 = sub_21502DAB0((char *)(v24 > 1), v25 + 1, 1, v11);
        v24 = *((_QWORD *)v11 + 3);
        v26 = v24 >> 1;
      }
      *((_QWORD *)v11 + 2) = v27;
      *(_QWORD *)&v11[8 * v25 + 32] = (v18 >> 4) & 3;
      v28 = v25 + 2;
      if (v26 < v28)
        v11 = sub_21502DAB0((char *)(v24 > 1), v28, 1, v11);
      ++v17;
      *((_QWORD *)v11 + 2) = v28;
      *(_QWORD *)&v11[8 * v27 + 32] = v18 >> 6;
      --v16;
    }
    while (v16);
    *a1 = v17;
  }
  return v11;
}

char *sub_21501CD9C(unsigned __int8 **a1, uint64_t a2)
{
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (a2 >= 0)
    v7 = a2;
  else
    v7 = a2 + 1;
  v8 = sub_21502DAB0(0, a2 & ~(a2 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v10 = v8;
  if ((a2 & 1) == 0)
    goto LABEL_7;
  v3 = *(*a1)++;
  v4 = *((_QWORD *)v8 + 2);
  v9 = *((_QWORD *)v8 + 3);
  v2 = v4 + 1;
  if (v4 >= v9 >> 1)
    goto LABEL_18;
  while (1)
  {
    v9 = v3 >> 4;
    *((_QWORD *)v10 + 2) = v2;
    *(_QWORD *)&v10[8 * v4 + 32] = v3 >> 4;
LABEL_7:
    if (a2 >= -1)
      break;
    __break(1u);
LABEL_18:
    v10 = sub_21502DAB0((char *)(v9 > 1), v2, 1, v10);
  }
  if ((unint64_t)(a2 + 1) >= 3)
  {
    v11 = v7 >> 1;
    v12 = *a1;
    do
    {
      v13 = *v12;
      v15 = *((_QWORD *)v10 + 2);
      v14 = *((_QWORD *)v10 + 3);
      v16 = v14 >> 1;
      v17 = v15 + 1;
      if (v14 >> 1 <= v15)
      {
        v10 = sub_21502DAB0((char *)(v14 > 1), v15 + 1, 1, v10);
        v14 = *((_QWORD *)v10 + 3);
        v16 = v14 >> 1;
      }
      *((_QWORD *)v10 + 2) = v17;
      *(_QWORD *)&v10[8 * v15 + 32] = v13 & 0xF;
      v18 = v15 + 2;
      if (v16 < v18)
        v10 = sub_21502DAB0((char *)(v14 > 1), v18, 1, v10);
      ++v12;
      *((_QWORD *)v10 + 2) = v18;
      *(_QWORD *)&v10[8 * v17 + 32] = v13 >> 4;
      --v11;
    }
    while (v11);
    *a1 = v12;
  }
  return v10;
}

char *sub_21501CEFC(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  char *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = a2;
  result = sub_21502DAB0(0, a2 & ~(a2 >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (v2)
    {
      v6 = *a1;
      v7 = *((_QWORD *)result + 2);
      do
      {
        v8 = *v6;
        v9 = *((_QWORD *)v5 + 3);
        if (v7 >= v9 >> 1)
          v5 = sub_21502DAB0((char *)(v9 > 1), v7 + 1, 1, v5);
        ++v6;
        *((_QWORD *)v5 + 2) = v7 + 1;
        *(_QWORD *)&v5[8 * v7++ + 32] = v8;
        --v2;
      }
      while (v2);
      *a1 = v6;
    }
    return v5;
  }
  return result;
}

char *sub_21501CFB4(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  char *v5;
  unsigned __int16 *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = a2;
  result = sub_21502DAB0(0, a2 & ~(a2 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v5 = result;
  v6 = *a1;
  if ((*a1 & 1) != 0)
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
      if (v2)
      {
        v10 = *((_QWORD *)result + 2);
        do
        {
          v11 = *v6;
          v12 = *((_QWORD *)v5 + 3);
          if (v10 >= v12 >> 1)
            v5 = sub_21502DAB0((char *)(v12 > 1), v10 + 1, 1, v5);
          ++v6;
          *((_QWORD *)v5 + 2) = v10 + 1;
          *(_QWORD *)&v5[8 * v10++ + 32] = v11;
          --v2;
        }
        while (v2);
        goto LABEL_15;
      }
      return v5;
    }
  }
  else
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
      if (v2)
      {
        v7 = *((_QWORD *)result + 2);
        do
        {
          v8 = *v6;
          v9 = *((_QWORD *)v5 + 3);
          if (v7 >= v9 >> 1)
            v5 = sub_21502DAB0((char *)(v9 > 1), v7 + 1, 1, v5);
          ++v6;
          *((_QWORD *)v5 + 2) = v7 + 1;
          *(_QWORD *)&v5[8 * v7++ + 32] = v8;
          --v2;
        }
        while (v2);
LABEL_15:
        *a1 = v6;
        return v5;
      }
      return v5;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *sub_21501D0D0(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  char *v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = a2;
  result = sub_21502DAB0(0, a2 & ~(a2 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v5 = result;
  v6 = (unsigned int *)*a1;
  if ((*a1 & 3) != 0)
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
      if (v2)
      {
        v7 = *((_QWORD *)result + 2);
        do
        {
          v8 = *v6;
          v9 = *((_QWORD *)v5 + 3);
          if (v7 >= v9 >> 1)
            v5 = sub_21502DAB0((char *)(v9 > 1), v7 + 1, 1, v5);
          ++v6;
          *((_QWORD *)v5 + 2) = v7 + 1;
          *(_QWORD *)&v5[8 * v7++ + 32] = v8;
          --v2;
        }
        while (v2);
LABEL_15:
        *a1 = (unint64_t)v6;
        return v5;
      }
      return v5;
    }
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0)
  {
    if (v2)
    {
      v10 = *((_QWORD *)result + 2);
      do
      {
        v11 = *v6;
        v12 = *((_QWORD *)v5 + 3);
        if (v10 >= v12 >> 1)
          v5 = sub_21502DAB0((char *)(v12 > 1), v10 + 1, 1, v5);
        ++v6;
        *((_QWORD *)v5 + 2) = v10 + 1;
        *(_QWORD *)&v5[8 * v10++ + 32] = v11;
        --v2;
      }
      while (v2);
      goto LABEL_15;
    }
    return v5;
  }
  __break(1u);
  return result;
}

char *sub_21501D1F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = a2;
  result = sub_21502DAB0(0, a2 & ~(a2 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v5 = result;
  v6 = *a1;
  if (((unint64_t)*a1 & 7) != 0)
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
      if (v2)
      {
        v7 = *((_QWORD *)result + 2);
        do
        {
          v8 = *v6;
          v9 = *((_QWORD *)v5 + 3);
          if (v7 >= v9 >> 1)
            v5 = sub_21502DAB0((char *)(v9 > 1), v7 + 1, 1, v5);
          ++v6;
          *((_QWORD *)v5 + 2) = v7 + 1;
          *(_QWORD *)&v5[8 * v7++ + 32] = v8;
          --v2;
        }
        while (v2);
LABEL_15:
        *a1 = v6;
        return v5;
      }
      return v5;
    }
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0)
  {
    if (v2)
    {
      v10 = *((_QWORD *)result + 2);
      do
      {
        v11 = *v6;
        v12 = *((_QWORD *)v5 + 3);
        if (v10 >= v12 >> 1)
          v5 = sub_21502DAB0((char *)(v12 > 1), v10 + 1, 1, v5);
        ++v6;
        *((_QWORD *)v5 + 2) = v10 + 1;
        *(_QWORD *)&v5[8 * v10++ + 32] = v11;
        --v2;
      }
      while (v2);
      goto LABEL_15;
    }
    return v5;
  }
  __break(1u);
  return result;
}

char *sub_21501D310(unsigned __int8 **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  int64x2_t v19;
  int64x2_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char *v38;
  unint64_t v39;
  char *v40;
  int64x2_t v41;
  int64x2_t *v42;
  uint64_t v43;
  int64x2_t v44;
  unint64_t v45;
  uint64_t v46;

  v5 = (char *)MEMORY[0x24BEE4AF8];
  if (a2)
  {
    v6 = a2;
    if (a2 > 128)
    {
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v7 = 0xD000000000000029;
      *(_QWORD *)(v7 + 8) = 0x8000000215130A90;
      *(_BYTE *)(v7 + 16) = 0;
      swift_willThrow();
      return v5;
    }
    v10 = (unint64_t)(*a1 + 1);
    v9 = **a1;
    *a1 = (unsigned __int8 *)v10;
    v11 = v9 & 3;
    if (v11 == 3)
      goto LABEL_61;
    if (v9 > 3)
    {
      v4 = 1 << ((v9 >> 2) - 1);
      v46 = (uint64_t)v5;
      v3 = sub_21501C570(a1);
      if ((v11 - 1) > 1)
        goto LABEL_12;
      v5 = sub_21502DAB0(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v9 = *((_QWORD *)v5 + 2);
      v2 = *((_QWORD *)v5 + 3);
      v10 = v9 + 1;
      if (v9 < v2 >> 1)
        goto LABEL_11;
      goto LABEL_62;
    }
    v12 = sub_21501C570(a1);
    if ((v6 & 0x8000000000000000) != 0)
    {
      while (1)
      {
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        v45 = v10;
        v38 = v5;
        v39 = v9;
        v40 = sub_21502DAB0((char *)(v2 > 1), v10, 1, v38);
        v9 = v39;
        v10 = v45;
        v5 = v40;
LABEL_11:
        *((_QWORD *)v5 + 2) = v10;
        *(_QWORD *)&v5[8 * v9 + 32] = v3;
        v46 = (uint64_t)v5;
LABEL_12:
        switch(v4)
        {
          case 1:
            v17 = *((_QWORD *)v5 + 2);
            if (__OFSUB__(v6, v17))
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
              JUMPOUT(0x21501D814);
            }
            v18 = sub_21501C66C((uint64_t *)a1, v6 - v17);
            break;
          case 2:
            v24 = *((_QWORD *)v5 + 2);
            if (__OFSUB__(v6, v24))
              goto LABEL_72;
            v18 = sub_21501CB10(a1, v6 - v24);
            break;
          case 4:
            v26 = *((_QWORD *)v5 + 2);
            if (__OFSUB__(v6, v26))
              goto LABEL_73;
            v18 = sub_21501CD9C(a1, v6 - v26);
            break;
          case 8:
            v27 = *((_QWORD *)v5 + 2);
            if (__OFSUB__(v6, v27))
              goto LABEL_74;
            v18 = sub_21501CEFC(a1, v6 - v27);
            break;
          case 16:
            v28 = *((_QWORD *)v5 + 2);
            if (__OFSUB__(v6, v28))
              goto LABEL_75;
            v18 = sub_21501CFB4((unsigned __int16 **)a1, v6 - v28);
            break;
          case 32:
            v29 = *((_QWORD *)v5 + 2);
            if (__OFSUB__(v6, v29))
              goto LABEL_76;
            v18 = sub_21501D0D0((unint64_t *)a1, v6 - v29);
            break;
          case 64:
            v30 = *((_QWORD *)v5 + 2);
            if (__OFSUB__(v6, v30))
              goto LABEL_77;
            v18 = sub_21501D1F0((_QWORD **)a1, v6 - v30);
            break;
          default:
            sub_215130178();
            swift_bridgeObjectRelease();
            sub_2151303B8();
            sub_21512FB90();
            swift_bridgeObjectRelease();
            v5 = (char *)0xD00000000000001CLL;
            sub_21501D914();
            swift_allocError();
            *(_QWORD *)v25 = 0xD00000000000001CLL;
            *(_QWORD *)(v25 + 8) = 0x8000000215130A70;
            *(_BYTE *)(v25 + 16) = 4;
            swift_willThrow();
            swift_bridgeObjectRelease();
            return v5;
        }
        sub_215054E88((uint64_t)v18);
        if (!v11)
          break;
        if (v11 == 1)
        {
          v5 = (char *)v46;
          v31 = *(_QWORD *)(v46 + 16);
          v3 = v31 - 1;
          if (v31 == 1)
            return v5;
          if (!v31)
          {
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            v5 = sub_21501E524((uint64_t)v5);
            if (v6 >= 4)
              goto LABEL_66;
LABEL_47:
            v33 = 0;
            goto LABEL_69;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = sub_21501E524(v46);
          v9 = 0;
          while (1)
          {
            v10 = *((_QWORD *)v5 + 2);
            if (v9 >= v10)
              break;
            v32 = &v5[8 * v9];
            v2 = *((_QWORD *)v32 + 5) + *((_QWORD *)v32 + 4);
            *((_QWORD *)v32 + 5) = v2;
            if (v3 == ++v9)
              return v5;
          }
          __break(1u);
        }
        else
        {
          v5 = (char *)v46;
          v34 = *(_QWORD *)(v46 + 16);
          v3 = v34 - 1;
          if (v34 == 1)
            return v5;
          if (!v34)
            goto LABEL_64;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = sub_21501E524(v46);
          v9 = 0;
          while (1)
          {
            v10 = *((_QWORD *)v5 + 2);
            if (v9 >= v10)
              break;
            v10 = (unint64_t)&v5[8 * v9];
            v35 = *(_QWORD *)(v10 + 32);
            v36 = -(*(_QWORD *)(v10 + 40) & 1) ^ (*(_QWORD *)(v10 + 40) >> 1);
            v37 = __OFADD__(v36, v35);
            v2 = v36 + v35;
            if (v37)
              goto LABEL_59;
            *(_QWORD *)(v10 + 40) = v2;
            if (v3 == ++v9)
              return v5;
          }
        }
        __break(1u);
LABEL_59:
        __break(1u);
      }
      v5 = (char *)v46;
      v6 = *(_QWORD *)(v46 + 16);
      if (!v6)
        return v5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_65;
      if (v6 < 4)
        goto LABEL_47;
LABEL_66:
      v33 = v6 & 0x7FFFFFFFFFFFFFFCLL;
      v41 = vdupq_n_s64(v3);
      v42 = (int64x2_t *)(v5 + 48);
      v43 = v6 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = vaddq_s64(*v42, v41);
        v42[-1] = vaddq_s64(v42[-1], v41);
        *v42 = v44;
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
      for (; v6 != v33; *(_QWORD *)&v5[8 * v33++ + 32] += v3)
LABEL_69:
        ;
    }
    else
    {
      v13 = v12;
      v14 = sub_21512FCF8();
      v5 = (char *)v14;
      *(_QWORD *)(v14 + 16) = v6;
      v15 = (unint64_t *)(v14 + 32);
      if (v6 < 4)
      {
        v16 = 0;
LABEL_18:
        v22 = v6 - v16;
        do
        {
          *v15++ = v13;
          --v22;
        }
        while (v22);
        return v5;
      }
      v16 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v15 += v6 & 0xFFFFFFFFFFFFFFFCLL;
      v19 = vdupq_n_s64(v13);
      v20 = (int64x2_t *)(v14 + 48);
      v21 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20[-1] = v19;
        *v20 = v19;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v16 != v6)
        goto LABEL_18;
    }
  }
  return v5;
}

unint64_t sub_21501D914()
{
  unint64_t result;

  result = qword_254DA74B0;
  if (!qword_254DA74B0)
  {
    result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for SFrameReadingError, &type metadata for SFrameReadingError);
    atomic_store(result, (unint64_t *)&qword_254DA74B0);
  }
  return result;
}

uint64_t dispatch thunk of ColumnProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ColumnProtocol.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ColumnProtocol.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AnyColumnProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyColumnProtocol.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AnyColumnProtocol.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnyColumnProtocol.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnyColumnProtocol.wrappedElementType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AnyColumnProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of AnyColumnProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

Swift::Void __swiftcall DataFrame.renameColumn(_:to:)(Swift::String _, Swift::String to)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  Swift::String v8;
  Swift::Int value;
  char isUniquelyReferenced_nonNull_native;
  char *v11;
  char v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int_optional v19;

  v3 = v2;
  object = to._object;
  countAndFlagsBits = to._countAndFlagsBits;
  v6 = _._object;
  v7 = _._countAndFlagsBits;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_21501F2BC(v7, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = countAndFlagsBits;
  v8._countAndFlagsBits = countAndFlagsBits;
  v8._object = object;
  v19 = DataFrame.indexOfColumn(_:)(v8);
  value = v19.value;
  LOBYTE(countAndFlagsBits) = v19.is_nil;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((countAndFlagsBits & 1) == 0 && value != v16)
    goto LABEL_10;
  sub_21501DC78(v7, (uint64_t)v6, v17, (uint64_t)object);
  swift_bridgeObjectRetain();
  sub_21501E63C(v7, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  sub_21501E8EC(v16, v17, (uint64_t)object, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 16) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = *(char **)v3;
  swift_bridgeObjectRetain();
  v12 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v3 = v11;
  if ((v12 & 1) != 0)
  {
    if ((v16 & 0x8000000000000000) == 0)
      goto LABEL_5;
  }
  else
  {
    v11 = sub_21501E4D4((uint64_t)v11);
    *(_QWORD *)v3 = v11;
    if ((v16 & 0x8000000000000000) == 0)
    {
LABEL_5:
      if (v16 < *((_QWORD *)v11 + 2))
      {
        v13 = &v11[40 * v16];
        v14 = *((_QWORD *)v13 + 7);
        v15 = *((_QWORD *)v13 + 8);
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v13 + 32), v14);
        (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v15 + 8) + 16))(v17, object, v14);
        *(_QWORD *)v3 = v11;
        return;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  sub_215130178();
  sub_21512FB90();
  sub_21512FB90();
  sub_21512FB90();
  sub_2151302EC();
  __break(1u);
}

uint64_t sub_21501DC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = a1;
  v9 = *(_QWORD *)(v4 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = (_QWORD *)(v9 + 40);
    do
    {
      v13 = v11 + 1;
      v14 = *(v12 - 1) == a3 && *v12 == a4;
      if (v14 || (sub_21513043C() & 1) != 0)
        sub_21502C94C(v11, v11 + 1);
      v12 += 4;
      ++v11;
    }
    while (v10 != v13);
    swift_bridgeObjectRelease();
    v8 = a1;
  }
  sub_215022578(0, 0, 2);
  sub_21501EF2C(0, 0, 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  v16 = sub_21501EF40(v15, v8, a2, a3, a4);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 8) = v16;
  return result;
}

uint64_t DataFrame.replaceColumn(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_21501F2BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_21501DE8C(v6, a3);
}

uint64_t sub_21501DE8C(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v39;
  _QWORD v40[8];
  uint64_t v41[3];
  uint64_t v42;
  uint64_t v43;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = v3;
  v2 = a1;
  if (*(_QWORD *)(*v3 + 16) <= a1)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    result = (uint64_t)sub_21501E4D4((uint64_t)v3);
    v3 = (uint64_t *)result;
    *v4 = result;
    goto LABEL_13;
  }
  sub_21501EE90(*v3 + 40 * a1 + 32, (uint64_t)v41);
  v7 = v42;
  v6 = v43;
  __swift_project_boxed_opaque_existential_1(v41, v42);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
  v10 = v9;
  sub_21501EA34((uint64_t)v41);
  sub_21501EE90(a2, (uint64_t)v41);
  sub_21501F750(v41);
  v12 = v42;
  v11 = v43;
  __swift_project_boxed_opaque_existential_1(v41, v42);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 8))(v12) == v8 && v13 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v15 = sub_21513043C();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      v16 = swift_bridgeObjectRetain();
      v17 = sub_21501E1D4(v16);
      swift_bridgeObjectRelease();
      v18 = sub_215043714(v17);
      swift_bridgeObjectRelease();
      v40[7] = v18;
      sub_215049010(v8, v10);
      swift_bridgeObjectRelease();
      sub_21510223C(v18, 46, 0xE100000000000000, v40);
      v20 = v42;
      v19 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v19 + 8) + 8))(v20);
      v23 = sub_215102038(v21, v22);
      v25 = v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = v42;
      v27 = v43;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v41, v42);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 + 8) + 16))(v23, v25, v26);
      v29 = v42;
      v28 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v28 + 8) + 8))(v29);
      sub_21501DC78(v8, v10, v30, v31);
      swift_bridgeObjectRelease();
      sub_21501E63C(v8, v10);
      swift_bridgeObjectRelease();
      v33 = v42;
      v32 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v32 + 8) + 8))(v33);
      v36 = v35;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v39 = v4[2];
      v4[2] = 0x8000000000000000;
      sub_21501E8EC(v2, v34, v36, isUniquelyReferenced_nonNull_native);
      v4[2] = v39;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  v3 = (uint64_t *)*v4;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v4 = (uint64_t)v3;
  if ((result & 1) == 0)
    goto LABEL_17;
LABEL_13:
  if (v3[2] <= v2)
  {
    __break(1u);
  }
  else
  {
    sub_21501EEF0(v41, &v3[5 * v2 + 4]);
    return sub_21501EA34((uint64_t)v41);
  }
  return result;
}

uint64_t sub_21501E1D4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_215038BC8(0, v1, 0);
    v2 = v14;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      v6 = v4[3];
      v5 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v6);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v6);
      v9 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_215038BC8(0, *(_QWORD *)(v14 + 16) + 1, 1);
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_215038BC8((char *)(v10 > 1), v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t DataFrame.replaceColumn<A>(_:with:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_21501F2BC(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_21501DE8C(v5, a2);
}

uint64_t DataFrame.replaceColumn<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v11[40];

  v6 = type metadata accessor for Column(0, a4, a3, a4);
  Column.eraseToAnyColumn()(v6, v7, v8, (uint64_t)v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_21501F2BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501DE8C(v9, (uint64_t)v11);
  return sub_21501EA34((uint64_t)v11);
}

uint64_t DataFrame.replaceColumn<A, B>(_:with:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];
  uint64_t v10[2];

  v4 = a1[1];
  v10[0] = *a1;
  v10[1] = v4;
  v5 = type metadata accessor for Column(0, a4, a3, a4);
  Column.eraseToAnyColumn()(v5, v6, v7, (uint64_t)v9);
  DataFrame.replaceColumn<A>(_:with:)(v10, (uint64_t)v9);
  return sub_21501EA34((uint64_t)v9);
}

char *sub_21501E4D4(uint64_t a1)
{
  return sub_21502DCB4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21501E4E8(uint64_t a1)
{
  return sub_21502DCC8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_21501E4FC(_QWORD *a1)
{
  return sub_21502DEE0(0, a1[2], 0, a1);
}

char *sub_21501E510(uint64_t a1)
{
  return sub_21502DABC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21501E524(uint64_t a1)
{
  return sub_21502DAB0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_21501E538(_QWORD *a1)
{
  return sub_21502EE04(0, a1[2], 0, a1);
}

char *sub_21501E54C(uint64_t a1)
{
  return sub_21502EDF0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_21501E560(_QWORD *a1)
{
  return sub_21502EF30(0, a1[2], 0, a1);
}

char *sub_21501E574(uint64_t a1)
{
  return sub_21502EE18(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21501E588(uint64_t a1)
{
  return sub_21502F190(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_21501E59C(_QWORD *a1)
{
  return sub_21502F3E0(0, a1[2], 0, a1);
}

size_t sub_21501E5B0(_QWORD *a1)
{
  return sub_21502F3F4(0, a1[2], 0, a1);
}

_QWORD *sub_21501E5C4(_QWORD *a1)
{
  return sub_21502F570(0, a1[2], 0, a1);
}

_QWORD *sub_21501E5D8(_QWORD *a1)
{
  return sub_21502F584(0, a1[2], 0, a1);
}

_QWORD *sub_21501E5EC(_QWORD *a1)
{
  return sub_21502F598(0, a1[2], 0, a1);
}

_QWORD *sub_21501E600(_QWORD *a1)
{
  return sub_21502F5AC(0, a1[2], 0, a1);
}

_QWORD *sub_21501E614(_QWORD *a1)
{
  return sub_21502F6E4(0, a1[2], 0, a1);
}

_QWORD *sub_21501E628(_QWORD *a1)
{
  return sub_21502F6F8(0, a1[2], 0, a1);
}

uint64_t sub_21501E63C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_21502F840(a1, a2);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_21503671C();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_21501E718(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_21501E718(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_21513010C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2151305A4();
        swift_bridgeObjectRetain();
        sub_21512FB3C();
        v9 = sub_2151305EC();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_21501E8EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_21502F840(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v18[7] + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)sub_21503671C();
      goto LABEL_7;
    }
    sub_21502FFAC(result, a4 & 1);
    result = sub_21502F840(a2, a3);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2150342D8(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2151304B4();
  __break(1u);
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_21501EA34(uint64_t a1)
{
  destroy for AnyColumn(a1);
  return a1;
}

uint64_t sub_21501EA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_21502F840(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = swift_bridgeObjectRelease();
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_215037BD8();
      goto LABEL_7;
    }
    sub_215032310(v17, a5 & 1);
    v23 = sub_21502F840(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_215034378(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2151304B4();
  __break(1u);
  return result;
}

uint64_t sub_21501EBA8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_21502FAA4(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)sub_215037F8C();
      goto LABEL_7;
    }
    sub_21503296C(result, a3 & 1);
    result = sub_21502FAA4(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2150343C8(v10, a2, a1, v16);
      return swift_bridgeObjectRetain();
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA74B8);
  result = sub_2151304B4();
  __break(1u);
  return result;
}

uint64_t sub_21501ECBC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_21502FAFC(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v19[7] + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_21503812C();
    goto LABEL_7;
  }
  sub_215032CF8(result, a3 & 1);
  result = sub_21502FAFC(a2);
  if ((v17 & 1) != (v20 & 1))
  {
LABEL_14:
    result = sub_2151304B4();
    __break(1u);
    return result;
  }
  v13 = result;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_21501EE48(a2, (uint64_t)v10);
  return sub_215034410(v13, (uint64_t)v10, a1, v19);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2199DC4AC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_21501EE48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21501EE90(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyColumn(a2, a1);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t *sub_21501EEF0(uint64_t *a1, uint64_t *a2)
{
  assignWithCopy for AnyColumn(a2, a1);
  return a2;
}

uint64_t sub_21501EF2C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_21501EF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v22 = MEMORY[0x24BEE4AF8];
    sub_215038C00(0, v5, 0);
    v6 = v22;
    v8 = (uint64_t *)(a1 + 56);
    do
    {
      v9 = *(v8 - 3);
      v10 = *(v8 - 2);
      v11 = *(v8 - 1);
      v12 = *v8;
      v13 = v11 == a2 && v12 == a3;
      if (v13 || (sub_21513043C() & 1) != 0)
      {
        v11 = a4;
        v12 = a5;
      }
      swift_bridgeObjectRetain();
      v15 = *(_QWORD *)(v22 + 16);
      v14 = *(_QWORD *)(v22 + 24);
      swift_bridgeObjectRetain();
      if (v15 >= v14 >> 1)
        sub_215038C00((_QWORD *)(v14 > 1), v15 + 1, 1);
      v8 += 4;
      *(_QWORD *)(v22 + 16) = v15 + 1;
      v16 = (_QWORD *)(v22 + 32 * v15);
      v16[4] = v9;
      v16[5] = v10;
      v16[6] = v11;
      v16[7] = v12;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t sub_21501F068(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t destroy for SFrame(uint64_t a1)
{
  sub_21501F0D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t sub_21501F0D8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t *_s11TabularData6SFrameVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  sub_21501F068(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for SFrame(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_21501F068(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_21501F0D8(v6, v7);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for SFrame(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_21501F0D8(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SFrame(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFrame()
{
  return &type metadata for SFrame;
}

uint64_t sub_21501F2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;

  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v6 = sub_21502F898(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_2150439CC(v9, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (_QWORD *)sub_21501F98C(v10);
  swift_bridgeObjectRelease();
  v12 = v11[2];
  if (v12)
  {
    v13 = v11[5];
    if (v12 == 1)
    {
      v14 = v11[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v5 + 16))
      {
        swift_bridgeObjectRetain();
        v15 = sub_21502F898(v14, v13, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
        if ((v16 & 1) != 0)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
          swift_bridgeObjectRelease_n();
          return v8;
        }
        swift_bridgeObjectRelease();
      }
      sub_215130178();
      sub_21512FB90();
      sub_21512FB90();
      sub_21512FB90();
      sub_21512FB90();
      sub_21512FB90();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_215130178();
      sub_21512FB90();
      sub_21512FB90();
      sub_21512FB90();
      MEMORY[0x2199DB810](v11, MEMORY[0x24BEE0D00]);
      sub_21512FB90();
      swift_bridgeObjectRelease();
      sub_21512FB90();
    }
  }
  else
  {
    sub_215130178();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
  }
  result = sub_2151302EC();
  __break(1u);
  return result;
}

Swift::Int_optional __swiftcall DataFrame.indexOfColumn(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  Swift::Int v14;
  Swift::Bool v15;
  Swift::Int v16;
  Swift::Int_optional result;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = sub_21502F898(countAndFlagsBits, (uint64_t)object, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
    if ((v6 & 1) != 0)
      goto LABEL_8;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  v8 = sub_2150439CC(v7, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)sub_21501F98C(v8);
  swift_bridgeObjectRelease();
  v10 = v9[2];
  if (!v10
    || (v12 = v9[4], v11 = v9[5], swift_bridgeObjectRetain(), swift_bridgeObjectRelease(), v10 != 1)
    || !*(_QWORD *)(v4 + 16)
    || (v5 = sub_21502F898(v12, v11, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v14 = 0;
    v15 = 1;
    goto LABEL_10;
  }
LABEL_8:
  v14 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_bridgeObjectRelease();
  v15 = 0;
LABEL_10:
  v16 = v14;
  result.value = v16;
  result.is_nil = v15;
  return result;
}

uint64_t sub_21501F750(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v3 = v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    sub_21501EE90(*v1 + 32, (uint64_t)v25);
    v6 = v26;
    v5 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 48))(v6);
    sub_21501EA34((uint64_t)v25);
  }
  else
  {
    v7 = 0;
  }
  v9 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 48))(v9);
  v12 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 48))(v12);
  if (v10 >= v7)
  {
    if (v7 >= result)
      return result;
    v14 = *v3;
    v2 = *(_QWORD *)(*v3 + 16);
    if (!v2)
      return result;
    v24 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    v14 = v7 - result;
    if (__OFSUB__(v7, result))
    {
LABEL_30:
      __break(1u);
    }
    else if ((v14 & 0x8000000000000000) == 0)
    {
      for (; v14; --v14)
      {
        v15 = a1[3];
        v16 = a1[4];
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v15);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
      }
      return result;
    }
    __break(1u);
  }
  v14 = (uint64_t)sub_21501E4D4(v14);
LABEL_13:
  v17 = 0;
  *v24 = v14;
  do
  {
    if (v17 == v2)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v19 = a1[3];
    v18 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 48))(v19);
    v21 = v20 - v7;
    if (__OFSUB__(v20, v7))
      goto LABEL_27;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_21501E4D4(v14);
      v14 = result;
    }
    if (v17 >= *(_QWORD *)(v14 + 16))
      goto LABEL_28;
    if (v21 < 0)
      goto LABEL_29;
    for (; v21; --v21)
    {
      v22 = *(_QWORD *)(v14 + 40 * v17 + 56);
      v23 = *(_QWORD *)(v14 + 40 * v17 + 64);
      __swift_mutable_project_boxed_opaque_existential_1(v14 + 40 * v17 + 32, v22);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
    }
    ++v17;
  }
  while (v17 != v2);
  *v24 = v14;
  return result;
}

uint64_t sub_21501F98C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_215038BC8(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        sub_215038BC8((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21501FA60(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_215038BC8(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        sub_215038BC8((char *)(v7 > 1), v8 + 1, 1);
      v4 += 4;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21501FB34(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_21512FDB8();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_2150390D0(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Void __swiftcall DataFrame.removeAlias(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    object = a1._object;
    countAndFlagsBits = a1._countAndFlagsBits;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = (_QWORD *)(v2 + 40);
    do
    {
      v8 = v6 + 1;
      v9 = *(v7 - 1) == countAndFlagsBits && *v7 == (_QWORD)object;
      if (v9 || (sub_21513043C() & 1) != 0)
        sub_21502C94C(v6, v6 + 1);
      v7 += 4;
      ++v6;
    }
    while (v3 != v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_215022578(0, 0, 2);
  sub_21501EF2C(0, 0, 2);
}

uint64_t DataFrame.columns.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DataFrame.rows.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  char v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  if (!*(_QWORD *)(*v1 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  sub_21501EE90(v3 + 32, (uint64_t)v13);
  v6 = v14;
  v7 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = v9(v6, v8);
  result = sub_21501EA34((uint64_t)v13);
  if ((v10 & 0x8000000000000000) == 0)
  {
    if (v10)
    {
      v12 = 0;
LABEL_7:
      *(_QWORD *)a1 = v3;
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = v10;
      *(_BYTE *)(a1 + 40) = v12;
      return result;
    }
LABEL_6:
    v10 = 0;
    v12 = 2;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_21501FEC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_21508AE78();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 40) = v8;
  return result;
}

uint64_t sub_21501FF3C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = *((_BYTE *)a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_21501EF2C(v6, v7, v8);
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

__n128 DataFrame.rows.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = a1[1].n128_u64[0];
  sub_21501EF2C(a1[1].n128_i64[1], a1[2].n128_i64[0], a1[2].n128_i8[8]);
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  return result;
}

void (*DataFrame.rows.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  char v12;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  if (!*(_QWORD *)(*v1 + 16))
    goto LABEL_4;
  sub_21501EE90(v4 + 32, (uint64_t)(v3 + 6));
  v7 = v3[9];
  v8 = v3[10];
  __swift_project_boxed_opaque_existential_1(v3 + 6, v7);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v10(v7, v9);
  sub_21501EA34((uint64_t)(v3 + 6));
  if (v11 < 0)
  {
    __break(1u);
LABEL_4:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  if (v11)
  {
    v12 = 0;
    goto LABEL_6;
  }
LABEL_5:
  v11 = 0;
  v12 = 2;
LABEL_6:
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = 0;
  v3[4] = v11;
  *((_BYTE *)v3 + 40) = v12;
  return sub_215020150;
}

void sub_215020150(uint64_t **a1, char a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = *a1;
  v3 = (_QWORD *)(*a1)[11];
  v4 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = (*a1)[4];
  v8 = *((_BYTE *)*a1 + 40);
  v12 = **a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2150437A8(v6, v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v6, v7, v8);
    *v3 = v12;
    v3[1] = v4;
    v3[2] = v5;
    v9 = v2[3];
    v10 = v2[4];
    v11 = *((_BYTE *)v2 + 40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v9, v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v6, v7, v8);
    *v3 = v12;
    v3[1] = v4;
    v3[2] = v5;
  }
  free(v2);
}

uint64_t DataFrame.shape.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  sub_21501EE90(*(_QWORD *)v0 + 32, (uint64_t)v9);
  v1 = v10;
  v2 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4(v1, v3);
  result = sub_21501EA34((uint64_t)v9);
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (v5)
    {
      v7 = 0;
LABEL_7:
      v8 = sub_2150EBD1C(0, v5, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21501EF2C(0, v5, v7);
      return v8;
    }
LABEL_6:
    v5 = 0;
    v7 = 2;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

TabularData::DataFrame __swiftcall DataFrame.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  TabularData::DataFrame result;

  v1 = v0;
  v2 = MEMORY[0x24BEE4AF8];
  v3 = (void *)sub_2150203D0(MEMORY[0x24BEE4AF8]);
  *v1 = v2;
  v1[1] = v2;
  v1[2] = v3;
  result.columnIndicesByName._rawValue = v5;
  result.aliases._rawValue = v4;
  result.columns._rawValue = v3;
  return result;
}

unint64_t sub_2150203D0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_253F0D320);
  v2 = (_QWORD *)sub_215130340();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  v5 = MEMORY[0x24BEE0B20];
  while (1)
  {
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    result = sub_21502F898(v6, v7, (void (*)(_BYTE *, uint64_t, uint64_t))v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_215020508(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7600);
  v2 = (_QWORD *)sub_215130340();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21504670C(v4, (uint64_t)v13, &qword_254DA7608);
    result = sub_21502F854((uint64_t)v13);
    if ((v6 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v7 = v2[6] + 40 * result;
    v8 = v13[0];
    v9 = v13[1];
    *(_QWORD *)(v7 + 32) = v14;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v2[7] + 8 * result) = v15;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_215020630(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7778);
  v2 = (_QWORD *)sub_215130340();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_21502F898(v5, v6, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_215020774(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76D8);
  v2 = (_QWORD *)sub_215130340();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = swift_bridgeObjectRetain();
    result = sub_21502FAA4(v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v5;
    *(_QWORD *)(v2[7] + v10) = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_215020870(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76C0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76B8);
  v6 = sub_215130340();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_21504670C(v12, (uint64_t)v5, &qword_254DA76C0);
    result = sub_21502FAFC((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
    result = sub_21504626C((uint64_t)v5, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, qword_253F0D218);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_215020A08(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7690);
  v2 = (_QWORD *)sub_215130340();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    sub_215046224(v5, v6);
    result = sub_21502FC6C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_215020B1C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7630);
  v2 = (_QWORD *)sub_215130340();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_21502FE98(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_215020C2C@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v2 = a1;
  v3 = sub_215021704(a1);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_215045170(v4);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6 >= 2)
    goto LABEL_28;
  swift_bridgeObjectRelease();
  sub_21510223C(MEMORY[0x24BEE4B08], 46, 0xE100000000000000, &v55);
  v7 = (char *)MEMORY[0x24BEE4AF8];
  v8 = (char *)sub_2150203D0(MEMORY[0x24BEE4AF8]);
  v9 = v2 + 32;
  v45 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  v10 = 0;
  v44 = v2;
  while (1)
  {
    if (v45 == v10)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *a2 = v7;
      a2[1] = (char *)MEMORY[0x24BEE4AF8];
      a2[2] = v8;
      return result;
    }
    if (v10 >= *(_QWORD *)(v2 + 16))
      break;
    v51 = v10;
    sub_21501EE90(v9, (uint64_t)&v52);
    v48 = v52;
    v49 = v53;
    v50 = v54;
    v11 = v54;
    v12 = *((_QWORD *)&v53 + 1);
    __swift_project_boxed_opaque_existential_1(&v48, *((uint64_t *)&v53 + 1));
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 8))(v12);
    v15 = sub_215102038(v13, v14);
    v17 = v16;
    swift_bridgeObjectRelease();
    v18 = *((_QWORD *)&v49 + 1);
    v19 = v50;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v48, *((uint64_t *)&v49 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8) + 16))(v15, v17, v18);
    sub_21501EE90((uint64_t)&v48, (uint64_t)v46);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_21502E130(0, *((_QWORD *)v7 + 2) + 1, 1, v7, &qword_253F0D458);
    v21 = *((_QWORD *)v7 + 2);
    v20 = *((_QWORD *)v7 + 3);
    if (v21 >= v20 >> 1)
      v7 = sub_21502E130((char *)(v20 > 1), v21 + 1, 1, v7, &qword_253F0D458);
    *((_QWORD *)v7 + 2) = v21 + 1;
    v22 = &v7[40 * v21];
    v23 = v46[0];
    v24 = v46[1];
    *((_QWORD *)v22 + 8) = v47;
    *((_OWORD *)v22 + 2) = v23;
    *((_OWORD *)v22 + 3) = v24;
    v25 = *((_QWORD *)&v49 + 1);
    v26 = v50;
    __swift_project_boxed_opaque_existential_1(&v48, *((uint64_t *)&v49 + 1));
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 + 8) + 8))(v25);
    v28 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v46[0] = v8;
    v31 = sub_21502F898(v3, v28, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
    v32 = *((_QWORD *)v8 + 2);
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      goto LABEL_24;
    v35 = v30;
    if (*((_QWORD *)v8 + 3) >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v8 = *(char **)&v46[0];
        if ((v30 & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        sub_21503671C();
        v8 = *(char **)&v46[0];
        if ((v35 & 1) == 0)
          goto LABEL_18;
      }
    }
    else
    {
      sub_21502FFAC(v34, isUniquelyReferenced_nonNull_native);
      v36 = sub_21502F898(v3, v28, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_27;
      v31 = v36;
      v8 = *(char **)&v46[0];
      if ((v35 & 1) == 0)
      {
LABEL_18:
        *(_QWORD *)&v8[8 * (v31 >> 6) + 64] |= 1 << v31;
        v38 = (uint64_t *)(*((_QWORD *)v8 + 6) + 16 * v31);
        *v38 = v3;
        v38[1] = v28;
        *(_QWORD *)(*((_QWORD *)v8 + 7) + 8 * v31) = v10;
        v39 = *((_QWORD *)v8 + 2);
        v40 = __OFADD__(v39, 1);
        v41 = v39 + 1;
        if (v40)
          goto LABEL_26;
        *((_QWORD *)v8 + 2) = v41;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
    }
    *(_QWORD *)(*((_QWORD *)v8 + 7) + 8 * v31) = v10;
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EA34((uint64_t)&v48);
    v3 = ++v10;
    v9 += 40;
    v2 = v44;
    if (__OFADD__(v10, 1))
      goto LABEL_25;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  sub_2151304B4();
  __break(1u);
LABEL_28:
  v51 = 0;
  *(_QWORD *)&v52 = 0xE000000000000000;
  sub_215130178();
  sub_21512FB90();
  MEMORY[0x2199DB810](v3, MEMORY[0x24BEE1768]);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t DataFrame.init<A>(columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t result;
  char **v55;
  uint64_t v56;
  uint64_t v57;
  char **v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254DA74C0);
  v9 = sub_215043800();
  v60 = sub_2151301A8();
  MEMORY[0x24BDAC7A8](v60);
  v61 = v8;
  v68 = v8;
  *(_QWORD *)&v69 = a2;
  *((_QWORD *)&v69 + 1) = v9;
  *(_QWORD *)&v70 = a3;
  v10 = sub_21513019C();
  v57 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v56 - v11;
  v62 = a1;
  isUniquelyReferenced_nonNull_native = sub_215021834((void (*)(char *, char *))sub_2150216B4, 0, a2, MEMORY[0x24BEE1768], MEMORY[0x24BEE4078], a3, MEMORY[0x24BEE40A8], v13);
  v15 = swift_bridgeObjectRetain();
  v16 = sub_215045170(v15);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRelease();
  if (v17 >= 2)
  {
LABEL_24:
    v68 = 0;
    *(_QWORD *)&v69 = 0xE000000000000000;
    sub_215130178();
    sub_21512FB90();
    MEMORY[0x2199DB810](isUniquelyReferenced_nonNull_native, MEMORY[0x24BEE1768]);
    sub_21512FB90();
    swift_bridgeObjectRelease();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  v58 = a4;
  swift_bridgeObjectRelease();
  sub_21510223C(MEMORY[0x24BEE4B08], 46, 0xE100000000000000, &v72);
  v18 = (char *)MEMORY[0x24BEE4AF8];
  v19 = (char *)sub_2150203D0(MEMORY[0x24BEE4AF8]);
  v68 = 0;
  isUniquelyReferenced_nonNull_native = v62;
  sub_215130490();
  sub_215130184();
  v20 = v12;
  sub_215130190();
  if (*((_QWORD *)&v70 + 1))
  {
    v21 = (char *)MEMORY[0x24BEE4AF8];
    v61 = a2;
    v60 = v10;
    v59 = v12;
    while (1)
    {
      v22 = v68;
      v65 = v69;
      v66 = v70;
      v67 = v71;
      v23 = v71;
      v24 = *((_QWORD *)&v70 + 1);
      __swift_project_boxed_opaque_existential_1(&v65, *((uint64_t *)&v70 + 1));
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v23 + 8) + 8))(v24);
      v27 = sub_215102038(v25, v26);
      v29 = v28;
      swift_bridgeObjectRelease();
      v30 = *((_QWORD *)&v66 + 1);
      v31 = v67;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v65, *((uint64_t *)&v66 + 1));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 + 8) + 16))(v27, v29, v30);
      sub_21501EE90((uint64_t)&v65, (uint64_t)v63);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = sub_21502E130(0, *((_QWORD *)v21 + 2) + 1, 1, v21, &qword_253F0D458);
      v33 = *((_QWORD *)v21 + 2);
      v32 = *((_QWORD *)v21 + 3);
      if (v33 >= v32 >> 1)
        v21 = sub_21502E130((char *)(v32 > 1), v33 + 1, 1, v21, &qword_253F0D458);
      *((_QWORD *)v21 + 2) = v33 + 1;
      v34 = &v21[40 * v33];
      v35 = v63[0];
      v36 = v63[1];
      *((_QWORD *)v34 + 8) = v64;
      *((_OWORD *)v34 + 2) = v35;
      *((_OWORD *)v34 + 3) = v36;
      v37 = *((_QWORD *)&v66 + 1);
      v38 = v67;
      __swift_project_boxed_opaque_existential_1(&v65, *((uint64_t *)&v66 + 1));
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v38 + 8) + 8))(v37);
      v41 = v40;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v63[0] = v19;
      v43 = sub_21502F898(v39, v41, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
      v44 = *((_QWORD *)v19 + 2);
      v45 = (v42 & 1) == 0;
      v46 = v44 + v45;
      if (__OFADD__(v44, v45))
        break;
      v47 = v42;
      if (*((_QWORD *)v19 + 3) >= v46)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_21503671C();
      }
      else
      {
        sub_21502FFAC(v46, isUniquelyReferenced_nonNull_native);
        v48 = sub_21502F898(v39, v41, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
        if ((v47 & 1) != (v49 & 1))
          goto LABEL_23;
        v43 = v48;
      }
      isUniquelyReferenced_nonNull_native = v62;
      v19 = *(char **)&v63[0];
      if ((v47 & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v63[0] + 56) + 8 * v43) = v22;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&v63[0] + 8 * (v43 >> 6) + 64) |= 1 << v43;
        v50 = (uint64_t *)(*((_QWORD *)v19 + 6) + 16 * v43);
        *v50 = v39;
        v50[1] = v41;
        *(_QWORD *)(*((_QWORD *)v19 + 7) + 8 * v43) = v22;
        v51 = *((_QWORD *)v19 + 2);
        v52 = __OFADD__(v51, 1);
        v53 = v51 + 1;
        if (v52)
          goto LABEL_22;
        *((_QWORD *)v19 + 2) = v53;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21501EA34((uint64_t)&v65);
      v10 = v60;
      v20 = v59;
      sub_215130190();
      a2 = v61;
      if (!*((_QWORD *)&v70 + 1))
        goto LABEL_20;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    sub_2151304B4();
    __break(1u);
    goto LABEL_24;
  }
  v21 = v18;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(isUniquelyReferenced_nonNull_native, a2);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v20, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v55 = v58;
  *v58 = v21;
  v55[1] = (char *)MEMORY[0x24BEE4AF8];
  v55[2] = v19;
  return result;
}

uint64_t sub_2150216B4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 48))(v4);
  *a2 = result;
  return result;
}

uint64_t sub_215021704(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  sub_215038BE4(0, v2, 0);
  if (v2)
  {
    v3 = (_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      v5 = v3[3];
      v4 = v3[4];
      __swift_project_boxed_opaque_existential_1(v3, v5);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 48))(v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_215038BE4(0, *(_QWORD *)(v10 + 16) + 1, 1);
      v8 = *(_QWORD *)(v10 + 16);
      v7 = *(_QWORD *)(v10 + 24);
      if (v8 >= v7 >> 1)
        sub_215038BE4((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v10 + 16) = v8 + 1;
      *(_QWORD *)(v10 + 8 * v8 + 32) = v6;
      v3 += 5;
      --v2;
    }
    while (v2);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_215021834(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_215130064();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_21512FC2C();
  v57 = sub_21512F824();
  v53 = sub_215130274();
  sub_215130244();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_21512FC20();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_215130094();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_21513025C();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_215130094();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_21513025C();
      sub_215130094();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t DataFrame.init(_:)@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _OWORD v26[3];

  v3 = a1[1];
  v25 = *a1;
  v26[0] = v3;
  *(_OWORD *)((char *)v26 + 9) = *(__int128 *)((char *)a1 + 25);
  v4 = *((_QWORD *)&v25 + 1);
  v5 = v3;
  sub_2150451E0((uint64_t)&v25);
  v6 = swift_bridgeObjectRetain();
  v7 = sub_215043204(v6, (uint64_t)&v25);
  sub_215045244((uint64_t)&v25);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v24 = MEMORY[0x24BEE4AF8];
    sub_215038C1C(0, v8, 0);
    v9 = v7 + 32;
    v10 = v24;
    do
    {
      sub_2150452A8(v9, (uint64_t)v19);
      v11 = v20;
      v12 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v12 + 16))(v22, v11, v12);
      sub_2150452E4((uint64_t)v19);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_215038C1C(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v24;
      }
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_215038C1C((char *)(v13 > 1), v14 + 1, 1);
        v10 = v24;
      }
      *(_QWORD *)(v10 + 16) = v14 + 1;
      v15 = v10 + 40 * v14;
      v16 = v22[0];
      v17 = v22[1];
      *(_QWORD *)(v15 + 64) = v23;
      *(_OWORD *)(v15 + 32) = v16;
      *(_OWORD *)(v15 + 48) = v17;
      v9 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_215045244((uint64_t)&v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v10;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_215021F2C(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = sub_2150C059C(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_215045958(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t DataFrame.columnNames(forAlias:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_2150439CC(v4, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = sub_21501F98C(v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t DataFrame.containsColumn<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  unint64_t value;
  Swift::Bool is_nil;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  Swift::Int_optional v20;

  v5 = v4;
  type metadata accessor for ColumnID(0, a2, a3, a4);
  v7 = sub_215075E3C();
  v9 = v8;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  v20 = DataFrame.indexOfColumn(_:)(v10);
  value = v20.value;
  is_nil = v20.is_nil;
  result = swift_bridgeObjectRelease();
  if (is_nil)
    return 0;
  if ((value & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (value < *(_QWORD *)(*(_QWORD *)v5 + 16))
  {
    sub_21501EE90(*(_QWORD *)v5 + 40 * value + 32, (uint64_t)v17);
    v15 = v18;
    v14 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 80))(v15);
    sub_21501EA34((uint64_t)v17);
    return v16 == a2;
  }
  __break(1u);
  return result;
}

Swift::Int DataFrame.containsColumn<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  Swift::Int_optional v13;

  v13 = DataFrame.indexOfColumn(_:)(*(Swift::String *)&a1);
  if (v13.is_nil)
  {
    v13.value = 0;
    return v13.value;
  }
  if (v13.value < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v13.value >= *(_QWORD *)(*(_QWORD *)v4 + 16))
  {
LABEL_8:
    __break(1u);
    return v13.value;
  }
  sub_21501EE90(*(_QWORD *)v4 + 40 * v13.value + 32, (uint64_t)v10);
  v7 = v11;
  v6 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 80))(v7);
  sub_21501EA34((uint64_t)v10);
  v13.value = v8 == a4;
  return v13.value;
}

Swift::Bool __swiftcall DataFrame.containsColumn(_:)(Swift::String a1)
{
  Swift::Int_optional v2;

  v2 = DataFrame.indexOfColumn(_:)(a1);
  return !v2.is_nil;
}

Swift::Void __swiftcall DataFrame.addAlias(_:forColumn:)(Swift::String _, Swift::String forColumn)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v3 = v2;
  object = forColumn._object;
  countAndFlagsBits = forColumn._countAndFlagsBits;
  if (*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16)
    && (v6 = _._object,
        v7 = _._countAndFlagsBits,
        swift_bridgeObjectRetain(),
        sub_21502F898(countAndFlagsBits, (uint64_t)object, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC), v9 = v8, swift_bridgeObjectRelease(), (v9 & 1) != 0))
  {
    v10 = *(_QWORD **)(v3 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_21502DEE0(0, v10[2] + 1, 1, v10);
    v12 = v10[2];
    v11 = v10[3];
    if (v12 >= v11 >> 1)
      v10 = sub_21502DEE0((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
    v10[2] = v12 + 1;
    v13 = &v10[4 * v12];
    v13[4] = v7;
    v13[5] = v6;
    v13[6] = countAndFlagsBits;
    v13[7] = object;
    *(_QWORD *)(v3 + 8) = v10;
  }
  else
  {
    sub_215130178();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
    sub_2151302EC();
    __break(1u);
  }
}

uint64_t sub_21502238C(uint64_t (*a1)(_QWORD *), uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  Swift::Int v14;
  Swift::Int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;

  v32 = a2;
  v4 = v2[1];
  v30 = *v2;
  v31[0] = v4;
  *(_OWORD *)((char *)v31 + 9) = *(__int128 *)((char *)v2 + 25);
  v5 = *((_QWORD *)v2 + 3);
  v6 = *((_QWORD *)v2 + 4);
  v7 = *((unsigned __int8 *)v2 + 40);
  v8 = v5;
  if (*((_BYTE *)v2 + 40))
  {
    if (v7 == 1 && *(_QWORD *)(v5 + 16))
    {
      v8 = *(_QWORD *)(v5 + 32);
    }
    else
    {
      sub_21508C520(*((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), *((_BYTE *)v2 + 40));
      if ((v10 & 1) != 0)
        v8 = 0;
      else
        v8 = v9;
    }
  }
  sub_21508C520(v5, v6, v7);
  if ((v12 & 1) != 0)
  {
    if (!v8)
      return 0;
  }
  else if (v8 == v11)
  {
    return 0;
  }
  v27 = 0;
  v28 = 0;
  v29 = 2;
  v14 = v5;
  if (v7)
  {
    if (v7 == 1 && *(_QWORD *)(v5 + 16))
    {
      v14 = *(_QWORD *)(v5 + 32);
    }
    else
    {
      sub_21508C520(v5, v6, v7);
      if ((v16 & 1) != 0)
        v14 = 0;
      else
        v14 = v15;
    }
  }
  v24 = v5;
  v17 = *(_QWORD *)v2;
  v18 = *((_QWORD *)v2 + 1);
  v19 = *((_QWORD *)v2 + 2);
  while (1)
  {
    do
    {
      v20 = v14;
      sub_21508C520(v24, v6, v7);
      if ((v22 & 1) != 0)
      {
        if (!v14)
          return v27;
      }
      else if (v14 == v21)
      {
        return v27;
      }
      v14 = DataFrame.Rows.index(after:)(v14);
      v26[0] = v17;
      v26[1] = v18;
      v26[2] = v19;
      v26[3] = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = a1(v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v3)
        return sub_21501EF2C(v27, v28, v29);
    }
    while ((v23 & 1) == 0);
    if (v14 < v20)
      break;
    sub_21502C94C(v20, v14);
  }
  __break(1u);
  return result;
}

_QWORD *sub_215022578(_QWORD *result, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  int64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  int64_t v16;
  int v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  int v45;
  int64_t v46;
  __int128 v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  unsigned __int8 v59;

  v6 = (uint64_t)result;
  v7 = (unint64_t)result;
  v8 = a2;
  if (a3)
  {
    if (a3 != 1 || !result[2])
      return result;
    v7 = result[4];
    v8 = result[5];
  }
  v9 = (_QWORD *)v8;
  sub_21502CA84(1, (uint64_t)result, a2, a3, (uint64_t)&v56);
  v10 = v56;
  if (v56 != v57)
  {
    v46 = v57;
    v47 = v58;
    v45 = v59;
    v13 = (_QWORD *)*v44;
    sub_2150437A8(v6, a2, a3);
    v3 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v14 = v13;
LABEL_9:
      v12 = (int64_t)v9;
      v15 = v10;
      v16 = v46;
      v17 = v45;
      while (1)
      {
        if ((uint64_t)v15 >= v16)
          goto LABEL_57;
        if (v17)
        {
          if (v17 != 1)
          {
            result = (_QWORD *)sub_2151302EC();
            __break(1u);
            return result;
          }
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_64;
          v18 = *(_QWORD *)(v47 + 16);
          if (v15 >= v18)
            goto LABEL_65;
          v19 = *(_OWORD *)(v47 + 32 + 16 * v15);
        }
        else
        {
          if (v15)
            goto LABEL_63;
          v18 = 1;
          v19 = v47;
        }
        v49 = v19;
        if (v15 >= v18)
          goto LABEL_58;
        v20 = v19;
        if (v12 != (_QWORD)v19)
        {
          if (v12 >= (uint64_t)v19)
            goto LABEL_66;
          v48 = v15;
          v50 = 4 * v12;
          v52 = 4 * v7;
          v21 = v14;
          while (1)
          {
            if (v7 != v12)
            {
              if ((v7 & 0x8000000000000000) != 0)
                goto LABEL_51;
              v22 = v14[2];
              if (v7 >= v22)
                goto LABEL_52;
              if (v12 >= v22)
                goto LABEL_53;
              v10 = v7;
              v23 = &v21[v52];
              v24 = v21[v52 + 4];
              v7 = v21[v52 + 5];
              v25 = v21[v52 + 6];
              v3 = (_QWORD *)v21[v52 + 7];
              v26 = &v21[v50];
              v27 = v21[v50 + 5];
              v28 = v21[v50 + 6];
              v29 = v21[v50 + 7];
              v23[4] = v21[v50 + 4];
              v23[5] = v27;
              v23[6] = v28;
              v23[7] = v29;
              v9 = v14;
              v54 = v14[2];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v12 >= v54)
                goto LABEL_54;
              v26[4] = v24;
              v26[5] = v7;
              v26[6] = v25;
              v26[7] = v3;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v14 = v9;
              v7 = v10;
              v20 = v49;
            }
            v30 = v7 + 1;
            if (__OFADD__(v7, 1))
              break;
            ++v12;
            v21 += 4;
            ++v7;
            if (v20 == v12)
            {
              v7 = v30;
              v15 = v48;
              v16 = v46;
              v17 = v45;
              goto LABEL_10;
            }
          }
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
LABEL_10:
        ++v15;
        v12 = *((_QWORD *)&v49 + 1);
        if (v15 == v16)
        {
          v9 = v14;
          sub_215046484((uint64_t)&v56);
          v11 = v9;
          *v44 = v9;
          goto LABEL_33;
        }
      }
    }
LABEL_68:
    v14 = sub_21501E4FC(v3);
    goto LABEL_9;
  }
  sub_2150437A8(v6, a2, a3);
  sub_215046484((uint64_t)&v56);
  v11 = (_QWORD *)*v44;
  v12 = (int64_t)v9;
LABEL_33:
  if (v12 != v11[2])
  {
    v3 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v31 = v3;
    else
      v31 = sub_21501E4FC(v3);
    v32 = 4 * v12;
    v33 = v12;
    v34 = 4 * v7;
    while (1)
    {
      v55 = v33;
      if (v7 != v33)
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_59;
        v35 = v31[2];
        if (v7 >= v35)
          goto LABEL_60;
        v10 = v33;
        if (v33 >= v35)
          goto LABEL_61;
        v51 = v7;
        v36 = &v31[v34];
        v3 = (_QWORD *)v31[v34 + 4];
        v37 = v31[v34 + 5];
        v7 = v31[v34 + 6];
        v38 = v31[v34 + 7];
        v39 = &v31[v32];
        v40 = v31[v32 + 5];
        v41 = v31[v32 + 6];
        v42 = v31[v32 + 7];
        v36[4] = v31[v32 + 4];
        v36[5] = v40;
        v36[6] = v41;
        v36[7] = v42;
        v9 = v31;
        v53 = v31[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v55 >= v53)
          goto LABEL_62;
        v39[4] = v3;
        v39[5] = v37;
        v39[6] = v7;
        v39[7] = v38;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = v9;
        v7 = v51;
      }
      v43 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      if (__OFADD__(v55, 1))
        goto LABEL_56;
      v32 += 4;
      v33 = v55 + 1;
      v34 += 4;
      ++v7;
      if (v55 + 1 == v31[2])
      {
        *v44 = v31;
        v12 = v31[2];
        v7 = v43;
        goto LABEL_47;
      }
    }
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
LABEL_47:
  if (v12 < (uint64_t)v7)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  return (_QWORD *)sub_2150438B0(v7, v12);
}

uint64_t DataFrame.append<A>(column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[40];

  v4 = type metadata accessor for Column(0, a2, a3, a4);
  Column.eraseToAnyColumn()(v4, v5, v6, (uint64_t)v8);
  DataFrame.append(column:)((uint64_t)v8);
  return sub_21501EA34((uint64_t)v8);
}

uint64_t DataFrame.append(column:)(uint64_t a1)
{
  char **v1;
  char **v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::String v9;
  Swift::Bool is_nil;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  Swift::Int_optional v54;

  v2 = v1;
  sub_21501EE90(a1, (uint64_t)v51);
  sub_21501F750(v51);
  v3 = v1[1];
  v4 = v1[2];
  *(_QWORD *)&v48 = *v1;
  *((_QWORD *)&v48 + 1) = v3;
  *(_QWORD *)&v49 = v4;
  v5 = v52;
  v6 = v53;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v8(v5, v7);
  v54 = DataFrame.indexOfColumn(_:)(v9);
  is_nil = v54.is_nil;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!is_nil)
  {
    v11 = swift_bridgeObjectRetain();
    v12 = sub_21501E1D4(v11);
    swift_bridgeObjectRelease();
    v13 = sub_215043714(v12);
    swift_bridgeObjectRelease();
    sub_21510223C(v13, 46, 0xE100000000000000, &v48);
    v15 = v52;
    v14 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 8))(v15);
    v18 = sub_215102038(v16, v17);
    v20 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v52;
    v22 = v53;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v51, v52);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 8) + 16))(v18, v20, v21);
  }
  v24 = v52;
  v23 = v53;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v23 + 8) + 8))(v24);
  v27 = v26;
  v28 = swift_bridgeObjectRetain();
  v29 = (_QWORD *)sub_2150C27C8(v28, v25, v27);
  v31 = v30;
  v33 = v32;
  swift_bridgeObjectRelease();
  sub_215022578(v29, v31, v33);
  sub_21501EF2C((uint64_t)v29, v31, v33);
  swift_bridgeObjectRelease();
  v35 = v52;
  v34 = v53;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v34 + 8) + 8))(v35);
  v38 = v37;
  v39 = *((_QWORD *)*v2 + 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v48 = v2[2];
  v2[2] = (char *)0x8000000000000000;
  sub_21501E8EC(v39, v36, v38, isUniquelyReferenced_nonNull_native);
  v2[2] = (char *)v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EE90((uint64_t)v51, (uint64_t)&v48);
  v41 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v41 = sub_21502E130(0, *((_QWORD *)v41 + 2) + 1, 1, v41, &qword_253F0D458);
  v43 = *((_QWORD *)v41 + 2);
  v42 = *((_QWORD *)v41 + 3);
  if (v43 >= v42 >> 1)
    v41 = sub_21502E130((char *)(v42 > 1), v43 + 1, 1, v41, &qword_253F0D458);
  *((_QWORD *)v41 + 2) = v43 + 1;
  v44 = &v41[40 * v43];
  v45 = v48;
  v46 = v49;
  *((_QWORD *)v44 + 8) = v50;
  *((_OWORD *)v44 + 2) = v45;
  *((_OWORD *)v44 + 3) = v46;
  *v2 = v41;
  return sub_21501EA34((uint64_t)v51);
}

uint64_t DataFrame.insert<A>(column:at:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];

  v5 = type metadata accessor for Column(0, a3, a3, a4);
  Column.eraseToAnyColumn()(v5, v6, v7, (uint64_t)v9);
  DataFrame.insert(column:at:)((uint64_t)v9, a2);
  return sub_21501EA34((uint64_t)v9);
}

uint64_t DataFrame.insert(column:at:)(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  Swift::String v11;
  Swift::Bool is_nil;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t result;
  _QWORD v44[4];
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  Swift::Int_optional v48;

  v3 = v2;
  sub_21501EE90(a1, (uint64_t)v45);
  sub_21501F750(v45);
  v5 = v2[1];
  v6 = v2[2];
  v44[0] = *v2;
  v44[1] = v5;
  v44[2] = v6;
  v7 = v46;
  v8 = v47;
  __swift_project_boxed_opaque_existential_1(v45, v46);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v10(v7, v9);
  v48 = DataFrame.indexOfColumn(_:)(v11);
  is_nil = v48.is_nil;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!is_nil)
  {
    v13 = swift_bridgeObjectRetain();
    v14 = sub_21501E1D4(v13);
    swift_bridgeObjectRelease();
    v15 = sub_215043714(v14);
    swift_bridgeObjectRelease();
    sub_21510223C(v15, 46, 0xE100000000000000, v44);
    v17 = v46;
    v16 = v47;
    __swift_project_boxed_opaque_existential_1(v45, v46);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v16 + 8) + 8))(v17);
    v20 = sub_215102038(v18, v19);
    v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v46;
    v23 = v47;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v45, v46);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 + 8) + 16))(v20, v22, v24);
  }
  v26 = v46;
  v25 = v47;
  __swift_project_boxed_opaque_existential_1(v45, v46);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v25 + 8) + 8))(v26);
  v29 = v28;
  v30 = swift_bridgeObjectRetain();
  v31 = (_QWORD *)sub_2150C27C8(v30, v27, v29);
  v33 = v32;
  v35 = v34;
  swift_bridgeObjectRelease();
  sub_215022578(v31, v33, v35);
  sub_21501EF2C((uint64_t)v31, v33, v35);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(*v3 + 16) < a2)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a2 < 0)
  {
LABEL_13:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  sub_21501EE90((uint64_t)v45, (uint64_t)v44);
  sub_21502D8E8(a2, a2, (uint64_t)v44);
  v36 = swift_bridgeObjectRetain();
  v37 = sub_21501E1D4(v36);
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(*v3 + 16);
  if (v38 >= *(_QWORD *)(v37 + 16))
    v39 = *(_QWORD *)(v37 + 16);
  else
    v39 = *(_QWORD *)(*v3 + 16);
  if (v39)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_253F0D320);
    v40 = sub_215130340();
  }
  else
  {
    v40 = MEMORY[0x24BEE4B00];
  }
  v44[0] = v40;
  v41 = (_QWORD *)swift_bridgeObjectRetain();
  sub_21504223C(v41, 0, v38, 1, v44);
  swift_bridgeObjectRelease();
  v42 = v44[0];
  sub_21501EA34((uint64_t)v45);
  result = swift_bridgeObjectRelease();
  v3[2] = v42;
  return result;
}

uint64_t DataFrame.removeColumn<A>(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6[2];
  _BYTE v7[40];

  DataFrame.removeColumn(_:)(*a1, a1[1], (uint64_t)v6);
  sub_2150459B0(v6, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
  type metadata accessor for Column(0, a2, v3, v4);
  return swift_dynamicCast();
}

uint64_t DataFrame.removeColumn(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  _QWORD v24[3];

  v4 = v3;
  v8 = v3[1];
  v9 = v3[2];
  v24[0] = *v3;
  v24[1] = v8;
  v24[2] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_21501F2BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2150233A0(v10, a3);
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  v12 = (_QWORD *)sub_2150C2890(v11, a1, a2);
  v14 = v13;
  LOBYTE(v9) = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_215022578(v12, v14, v9);
  sub_21501EF2C((uint64_t)v12, v14, v9);
  v16 = swift_bridgeObjectRetain();
  v17 = sub_21501E1D4(v16);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(*v4 + 16);
  if (v18 >= *(_QWORD *)(v17 + 16))
    v19 = *(_QWORD *)(v17 + 16);
  else
    v19 = *(_QWORD *)(*v4 + 16);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_253F0D320);
    v20 = sub_215130340();
  }
  else
  {
    v20 = MEMORY[0x24BEE4B00];
  }
  v24[0] = v20;
  v21 = (_QWORD *)swift_bridgeObjectRetain();
  sub_21504223C(v21, 0, v18, 1, v24);
  swift_bridgeObjectRelease();
  v22 = v24[0];
  result = swift_bridgeObjectRelease();
  v4[2] = v22;
  return result;
}

uint64_t sub_2150233A0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_21501E4D4(v5);
    v5 = result;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = v5 + 40 * a1;
    v10 = *(_OWORD *)(v9 + 48);
    *(_OWORD *)a2 = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 + 64);
    result = (uint64_t)memmove((void *)(v9 + 32), (const void *)(v9 + 72), 40 * (v8 - a1));
    *(_QWORD *)(v5 + 16) = v8;
    *v2 = v5;
  }
  return result;
}

uint64_t DataFrame.transformColumn<A, B>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DataFrame.transformColumn<A, B>(_:_:)(*a1, a1[1], a2, a3, a4, a5);
}

{
  return DataFrame.transformColumn<A, B>(_:_:)(*a1, a1[1], a2, a3, a4, a5);
}

uint64_t DataFrame.transformColumn<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int128 v23[2];
  char v24[40];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29;

  v12 = v6[1];
  v13 = v6[2];
  *(_QWORD *)&v25 = *v6;
  *((_QWORD *)&v25 + 1) = v12;
  v26 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_21501F2BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v14 >= *(_QWORD *)(v25 + 16))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    result = (uint64_t)sub_21501E4D4(v12);
    v12 = result;
    *v6 = result;
    goto LABEL_6;
  }
  sub_21501EE90(v25 + 40 * v14 + 32, (uint64_t)v23);
  sub_2150459B0(v23, (uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
  v17 = type metadata accessor for Column(0, a5, v15, v16);
  swift_dynamicCast();
  v27 = type metadata accessor for Column(0, a6, v18, v19);
  v28 = &off_24D2A4440;
  v20 = v29;
  Column.map<A>(_:)(a3, a4, v17, a6, &v25);
  swift_release();
  swift_bridgeObjectRelease();
  if (v20)
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v25);
  v12 = *v6;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v12;
  if ((result & 1) == 0)
    goto LABEL_11;
LABEL_6:
  if (v14 >= *(_QWORD *)(v12 + 16))
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v12 + 40 * v14 + 32);
    return sub_2150459B0(&v25, v12 + 40 * v14 + 32);
  }
  return result;
}

{
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v23[7];
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29[2];
  char v30[40];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;
  uint64_t v35;

  v24 = a4;
  v12 = v6[1];
  v13 = v6[2];
  *(_QWORD *)&v31 = *v6;
  *((_QWORD *)&v31 + 1) = v12;
  v32 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_21501F2BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v14 >= *(_QWORD *)(v31 + 16))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    result = (uint64_t)sub_21501E4D4(v12);
    v12 = result;
    *v6 = result;
    goto LABEL_6;
  }
  sub_21501EE90(v31 + 40 * v14 + 32, (uint64_t)v29);
  sub_2150459B0(v29, (uint64_t)v30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
  v17 = type metadata accessor for Column(0, a5, v15, v16);
  v18 = swift_dynamicCast();
  v25 = v27;
  v26 = v28;
  MEMORY[0x24BDAC7A8](v18);
  v23[2] = a5;
  v23[3] = a6;
  v23[4] = a3;
  v23[5] = v24;
  v33 = type metadata accessor for Column(0, a6, v19, v20);
  v34 = &off_24D2A4440;
  v21 = v35;
  Column.map<A>(_:)((uint64_t)sub_2150459FC, (uint64_t)v23, v17, a6, &v31);
  swift_release();
  swift_bridgeObjectRelease();
  if (v21)
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v31);
  v12 = *v6;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v12;
  if ((result & 1) == 0)
    goto LABEL_11;
LABEL_6:
  if (v14 >= *(_QWORD *)(v12 + 16))
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v12 + 40 * v14 + 32);
    return sub_2150459B0(&v31, v12 + 40 * v14 + 32);
  }
  return result;
}

uint64_t sub_2150238A8@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;

  v18 = a3;
  v19 = a2;
  v20 = a6;
  v9 = sub_215130064();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v18 - v12;
  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v20, 1, 1, a5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, a4);
    v19(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a4);
  }
}

uint64_t *DataFrame.append(row:)(uint64_t *result)
{
  char **v1;
  char **v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[5];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v3 = *result;
  v4 = *(_QWORD *)(*result + 16);
  v5 = *v2;
  if (v4 == *((_QWORD *)*v2 + 2))
  {
    if (v4)
    {
      v15 = result[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_9;
      while (1)
      {
        v6 = 0;
        v7 = 0;
        v8 = v3 + 32;
        while (1)
        {
          sub_21501EE90(v8 + v6, (uint64_t)&v17);
          *v2 = v5;
          if (v7 >= *((_QWORD *)v5 + 2))
            break;
          ++v7;
          v9 = v18;
          v10 = v19;
          v11 = __swift_project_boxed_opaque_existential_1(&v17, v18);
          v16[3] = v9;
          v16[4] = *(_QWORD *)(v10 + 8);
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(boxed_opaque_existential_1, v11, v9);
          v13 = *(_QWORD *)&v5[v6 + 56];
          v14 = *(_QWORD *)&v5[v6 + 64];
          v3 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v5[v6 + 32], v13);
          (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v14 + 56))(v15, v16, v13, v14);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
          result = (uint64_t *)sub_21501EA34((uint64_t)&v17);
          v5 = *v2;
          v6 += 40;
          if (v4 == v7)
            return result;
        }
        __break(1u);
LABEL_9:
        v5 = sub_21501E4D4((uint64_t)v5);
      }
    }
  }
  else
  {
    sub_215130178();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = (uint64_t *)sub_2151302EC();
    __break(1u);
  }
  return result;
}

uint64_t DataFrame.append(row:)(uint64_t result)
{
  char **v1;
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v3 = *(_QWORD *)(result + 16);
  v4 = *v1;
  if (v3 == *((_QWORD *)*v1 + 2))
  {
    if (v3)
    {
      v5 = result;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_9;
      while (1)
      {
        v6 = 0;
        v7 = 0;
        for (i = v5 + 32; ; i += 32)
        {
          sub_21504670C(i, (uint64_t)&v13, qword_253F0D058);
          *v2 = v4;
          if (v7 >= *((_QWORD *)v4 + 2))
            break;
          ++v7;
          v9 = &v4[v6];
          v10 = (uint64_t)&v4[v6 + 32];
          v11 = *(_QWORD *)&v4[v6 + 56];
          v12 = *((_QWORD *)v9 + 8);
          v5 = __swift_mutable_project_boxed_opaque_existential_1(v10, v11);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 24))(&v13, v11, v12);
          result = sub_215046750((uint64_t)&v13, qword_253F0D058);
          v4 = *v2;
          v6 += 40;
          if (v3 == v7)
            return result;
        }
        __break(1u);
LABEL_9:
        v4 = sub_21501E4D4((uint64_t)v4);
      }
    }
  }
  else
  {
    sub_215130178();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall DataFrame.append(valuesByColumn:)(Swift::OpaquePointer valuesByColumn)
{
  unint64_t *v1;
  _QWORD *rawValue;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char isUniquelyReferenced_nonNull_native;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  char v49;
  char *v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;

  rawValue = valuesByColumn._rawValue;
  v3 = *v1;
  if (*((_QWORD *)valuesByColumn._rawValue + 2) != *(_QWORD *)(*v1 + 16))
  {
LABEL_60:
    v70 = 0;
    v71 = 0xE000000000000000;
    sub_215130178();
    sub_21512FB90();
    v74 = rawValue[2];
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    v74 = *(_QWORD *)(v3 + 16);
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    while (1)
    {
      sub_2151302EC();
      __break(1u);
LABEL_62:
      swift_bridgeObjectRelease();
      v70 = 0;
      v71 = 0xE000000000000000;
      sub_215130178();
      sub_21512FB90();
      sub_21512FB90();
      sub_21512FB90();
    }
  }
  v4 = swift_bridgeObjectRetain();
  v5 = sub_21501E1D4(v4);
  swift_bridgeObjectRelease();
  v3 = sub_215043714(v5);
  swift_bridgeObjectRelease();
  v78 = v3;
  v64 = (uint64_t)v1;
  v6 = swift_bridgeObjectRetain();
  v7 = sub_21501FA60(v6);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 40);
    do
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      swift_bridgeObjectRetain();
      sub_2150390D0(&v70, v10, v11);
      swift_bridgeObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v3 = v78;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v13 = sub_2150245F4(v12, v3);
  swift_bridgeObjectRelease();
  v14 = v64;
  if ((v13 & 1) == 0)
  {
LABEL_55:
    v55 = swift_bridgeObjectRetain();
    v56 = sub_21501FB34(v55);
    v57 = v56;
    if (*(_QWORD *)(v3 + 16) <= *(_QWORD *)(v56 + 16) >> 3)
    {
      v70 = v56;
      v60 = swift_bridgeObjectRetain();
      sub_215042698(v60);
      swift_bridgeObjectRelease();
      v59 = v70;
    }
    else
    {
      v58 = swift_bridgeObjectRetain();
      v59 = sub_21504282C(v58, v57);
      swift_bridgeObjectRelease();
    }
    sub_215021F2C(v59);
    v62 = v61;
    swift_bridgeObjectRelease();
    if (v62)
      goto LABEL_62;
    __break(1u);
    goto LABEL_60;
  }
  v15 = *(_QWORD *)(*(_QWORD *)v64 + 16);
  if (v15)
  {
    v3 = 0;
    v65 = *(_QWORD *)(*(_QWORD *)v64 + 16);
    v63 = rawValue;
    while (1)
    {
      if (v3 >= *(_QWORD *)(*(_QWORD *)v14 + 16))
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      sub_21501EE90(*(_QWORD *)v14 + 40 * v3 + 32, (uint64_t)&v70);
      v21 = v72;
      v20 = v73;
      __swift_project_boxed_opaque_existential_1(&v70, v72);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 + 8) + 8))(v21);
      v24 = v23;
      sub_21501EA34((uint64_t)&v70);
      if (!rawValue[2])
        break;
      v25 = sub_21502F898(v22, v24, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
      if ((v26 & 1) == 0)
      {
        v66 = 0;
        v67 = 0;
        v68 = 0;
        goto LABEL_19;
      }
      sub_21504670C(rawValue[7] + 32 * v25, (uint64_t)&v66, qword_253F0D058);
LABEL_20:
      swift_bridgeObjectRelease();
      if (v69 != 1)
      {
        sub_21504626C((uint64_t)&v66, (uint64_t)&v74, qword_253F0D058);
        v37 = *(char **)v14;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v14 = v37;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v37 = sub_21501E4D4((uint64_t)v37);
          *(_QWORD *)v14 = v37;
        }
        if (v3 < *((_QWORD *)v37 + 2))
        {
          v39 = &v37[40 * v3];
          v40 = *((_QWORD *)v39 + 7);
          v41 = *((_QWORD *)v39 + 8);
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v39 + 32), v40);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v41 + 24))(&v74, v40, v41);
          *(_QWORD *)v14 = v37;
          v19 = &v74;
          goto LABEL_11;
        }
        goto LABEL_52;
      }
      sub_215046750((uint64_t)&v66, &qword_254DA74D8);
      v27 = swift_bridgeObjectRetain();
      v28 = sub_215045718(v27, v14, v3);
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(v28 + 16);
      if (v29)
      {
        v70 = MEMORY[0x24BEE4AF8];
        sub_215038BC8(0, v29, 0);
        v30 = v70;
        v31 = (uint64_t *)(v28 + 40);
        do
        {
          v33 = *(v31 - 1);
          v32 = *v31;
          v70 = v30;
          v34 = *(_QWORD *)(v30 + 16);
          v35 = *(_QWORD *)(v30 + 24);
          swift_bridgeObjectRetain();
          if (v34 >= v35 >> 1)
          {
            sub_215038BC8((char *)(v35 > 1), v34 + 1, 1);
            v30 = v70;
          }
          v31 += 4;
          *(_QWORD *)(v30 + 16) = v34 + 1;
          v36 = v30 + 16 * v34;
          *(_QWORD *)(v36 + 32) = v33;
          *(_QWORD *)(v36 + 40) = v32;
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease();
        rawValue = v63;
        v14 = v64;
        v42 = *(_QWORD *)(v30 + 16);
        if (!v42)
        {
LABEL_46:
          swift_bridgeObjectRelease();
          v50 = *(char **)v14;
          v51 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v14 = v50;
          if ((v51 & 1) == 0)
          {
            v50 = sub_21501E4D4((uint64_t)v50);
            *(_QWORD *)v14 = v50;
          }
          v15 = v65;
          if (v3 < *((_QWORD *)v50 + 2))
          {
            v52 = &v50[40 * v3];
            v53 = *((_QWORD *)v52 + 7);
            v54 = *((_QWORD *)v52 + 8);
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v52 + 32), v53);
            (*(void (**)(uint64_t, uint64_t))(v54 + 16))(v53, v54);
            *(_QWORD *)v14 = v50;
            goto LABEL_12;
          }
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v30 = MEMORY[0x24BEE4AF8];
        v42 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
        if (!v42)
          goto LABEL_46;
      }
      v43 = (uint64_t *)(v30 + 40);
      while (!rawValue[2])
      {
        v74 = 0;
        v75 = 0;
        v76 = 0;
        v77 = 1;
LABEL_36:
        v43 += 2;
        sub_215046750((uint64_t)&v74, &qword_254DA74D8);
        if (!--v42)
          goto LABEL_46;
      }
      v44 = *(v43 - 1);
      v45 = *v43;
      swift_bridgeObjectRetain();
      v46 = sub_21502F898(v44, v45, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
      if ((v47 & 1) != 0)
      {
        sub_21504670C(rawValue[7] + 32 * v46, (uint64_t)&v74, qword_253F0D058);
      }
      else
      {
        v74 = 0;
        v75 = 0;
        v76 = 0;
        v77 = 1;
      }
      swift_bridgeObjectRelease();
      if (v77 == 1)
        goto LABEL_36;
      swift_bridgeObjectRelease();
      sub_21504626C((uint64_t)&v74, (uint64_t)&v70, qword_253F0D058);
      v48 = *(char **)v14;
      v49 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v14 = v48;
      if ((v49 & 1) == 0)
      {
        v48 = sub_21501E4D4((uint64_t)v48);
        *(_QWORD *)v14 = v48;
      }
      v15 = v65;
      if (v3 >= *((_QWORD *)v48 + 2))
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      v16 = &v48[40 * v3];
      v17 = *((_QWORD *)v16 + 7);
      v18 = *((_QWORD *)v16 + 8);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v16 + 32), v17);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 24))(&v70, v17, v18);
      *(_QWORD *)v14 = v48;
      v19 = &v70;
LABEL_11:
      sub_215046750((uint64_t)v19, qword_253F0D058);
LABEL_12:
      if (++v3 == v15)
        goto LABEL_50;
    }
    v66 = 0;
    v67 = 0;
    v68 = 0;
LABEL_19:
    v69 = 1;
    goto LABEL_20;
  }
LABEL_50:
  swift_bridgeObjectRelease();
}

uint64_t sub_2150245F4(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;

  v3 = 0;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(result - 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  v30 = result;
  v31 = (unint64_t)(v7 + 63) >> 6;
  v10 = a2 + 56;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v3 << 6);
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_40;
      goto LABEL_25;
    }
    v13 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v13 >= v31)
      goto LABEL_41;
    v14 = *(_QWORD *)(v30 + 8 * v13);
    ++v3;
    if (!v14)
    {
      v3 = v13 + 1;
      if (v13 + 1 >= v31)
        goto LABEL_41;
      v14 = *(_QWORD *)(v30 + 8 * v3);
      if (!v14)
      {
        v3 = v13 + 2;
        if (v13 + 2 >= v31)
          goto LABEL_41;
        v14 = *(_QWORD *)(v30 + 8 * v3);
        if (!v14)
        {
          v3 = v13 + 3;
          if (v13 + 3 >= v31)
            goto LABEL_41;
          v14 = *(_QWORD *)(v30 + 8 * v3);
          if (!v14)
            break;
        }
      }
    }
LABEL_24:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v3 << 6);
    if (!*(_QWORD *)(a2 + 16))
    {
LABEL_40:
      swift_release();
      return 0;
    }
LABEL_25:
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v18 = *v16;
    v17 = v16[1];
    sub_2151305A4();
    swift_bridgeObjectRetain();
    sub_21512FB3C();
    v19 = sub_2151305EC();
    v20 = -1 << *(_BYTE *)(a2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v10 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_39;
    v22 = *(_QWORD *)(a2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (!v24 && (sub_21513043C() & 1) == 0)
    {
      v25 = ~v20;
      for (i = v21 + 1; ; i = v27 + 1)
      {
        v27 = i & v25;
        if (((*(_QWORD *)(v10 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v22 + 16 * v27);
        v29 = *v28 == v18 && v28[1] == v17;
        if (v29 || (sub_21513043C() & 1) != 0)
          goto LABEL_5;
      }
LABEL_39:
      swift_release();
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_5:
    result = swift_bridgeObjectRelease();
  }
  v15 = v13 + 4;
  if (v15 >= v31)
  {
LABEL_41:
    swift_release();
    return 1;
  }
  v14 = *(_QWORD *)(v30 + 8 * v15);
  if (v14)
  {
    v3 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    v3 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v3 >= v31)
      goto LABEL_41;
    v14 = *(_QWORD *)(v30 + 8 * v3);
    ++v15;
    if (v14)
      goto LABEL_24;
  }
LABEL_44:
  __break(1u);
  return result;
}

Swift::Void __swiftcall DataFrame.appendEmptyRow()()
{
  char **v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = *((_QWORD *)*v0 + 2);
  if (v2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v1 = sub_21501E4D4((uint64_t)v1);
    v3 = 0;
    *v0 = v1;
    v4 = (uint64_t)(v1 + 32);
    do
    {
      if (v3 >= *((_QWORD *)v1 + 2))
      {
        __break(1u);
        goto LABEL_9;
      }
      ++v3;
      v5 = *(_QWORD *)(v4 + 24);
      v6 = *(_QWORD *)(v4 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v4, v5);
      (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
      v4 += 40;
    }
    while (v2 != v3);
    *v0 = v1;
  }
}

uint64_t *DataFrame.insert(row:at:)(uint64_t *result, uint64_t a2)
{
  char **v2;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20[5];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v4 = *result;
  v5 = *(_QWORD *)(*result + 16);
  v6 = *v3;
  if (v5 == *((_QWORD *)*v3 + 2))
  {
    if (v5)
    {
      v18 = result[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_9;
      while (1)
      {
        v7 = 0;
        v8 = 0;
        v9 = v4 + 32;
        while (1)
        {
          sub_21501EE90(v9 + v7, (uint64_t)&v21);
          *v3 = v6;
          if (v8 >= *((_QWORD *)v6 + 2))
            break;
          ++v8;
          v10 = &v6[v7];
          v11 = (uint64_t)&v6[v7 + 32];
          v12 = v22;
          v13 = v23;
          v14 = __swift_project_boxed_opaque_existential_1(&v21, v22);
          v20[3] = v12;
          v20[4] = *(_QWORD *)(v13 + 8);
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(boxed_opaque_existential_1, v14, v12);
          v16 = *((_QWORD *)v10 + 7);
          v17 = *((_QWORD *)v10 + 8);
          v4 = __swift_mutable_project_boxed_opaque_existential_1(v11, v16);
          (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(v17 + 64))(v18, v20, a2, v16, v17);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
          result = (uint64_t *)sub_21501EA34((uint64_t)&v21);
          v6 = *v3;
          v7 += 40;
          if (v5 == v8)
            return result;
        }
        __break(1u);
LABEL_9:
        v6 = sub_21501E4D4((uint64_t)v6);
      }
    }
  }
  else
  {
    sub_215130178();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = (uint64_t *)sub_2151302EC();
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall DataFrame.removeRow(at:)(Swift::Int at)
{
  char **v1;
  char *v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *v1;
  v3 = *((_QWORD *)*v1 + 2);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v2 = sub_21501E4D4((uint64_t)v2);
    v5 = 0;
    *v1 = v2;
    v6 = (uint64_t)(v2 + 32);
    do
    {
      if (v5 >= *((_QWORD *)v2 + 2))
      {
        __break(1u);
        goto LABEL_9;
      }
      ++v5;
      v7 = *(_QWORD *)(v6 + 24);
      v8 = *(_QWORD *)(v6 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v6, v7);
      (*(void (**)(Swift::Int, uint64_t, uint64_t))(v8 + 80))(at, v7, v8);
      v6 += 40;
    }
    while (v3 != v5);
    *v1 = v2;
  }
}

uint64_t DataFrame.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215024C74(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_2150EBB78, a2);
}

uint64_t DataFrame.suffix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215024C74(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_215024DEC, a2);
}

uint64_t sub_215024C74@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v7 = *v3;
  v8 = v3[1];
  v9 = v3[2];
  if (!*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    goto LABEL_6;
  }
  sub_21501EE90(v7 + 32, (uint64_t)v22);
  v10 = v23;
  v11 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v14 = v13(v10, v12);
  result = sub_21501EA34((uint64_t)v22);
  if ((v14 & 0x8000000000000000) == 0)
  {
    if (v14)
    {
      v16 = 0;
LABEL_7:
      sub_2150437A8(0, v14, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21501EF2C(0, v14, v16);
      v17 = a2(a1, 0, v14, v16);
      v19 = v18;
      v21 = v20;
      result = sub_21501EF2C(0, v14, v16);
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = v9;
      *(_QWORD *)(a3 + 24) = v17;
      *(_QWORD *)(a3 + 32) = v19;
      *(_BYTE *)(a3 + 40) = v21;
      return result;
    }
LABEL_6:
    v14 = 0;
    v16 = 2;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_215024DEC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;

  if (a4 != 2)
  {
    if (a4 != 1)
    {
      v7 = 1;
      goto LABEL_7;
    }
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain();
LABEL_7:
      v9 = 0;
      v10 = v7 - 1;
      v11 = (uint64_t *)(a2 + 16 * v7 + 24);
      v8 = (char *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (a4)
        {
          if (v10 >= *(_QWORD *)(a2 + 16))
            goto LABEL_37;
        }
        else if (v10 >= 1)
        {
          goto LABEL_37;
        }
        if (a4)
        {
          if (v10 >= *(_QWORD *)(a2 + 16))
            goto LABEL_40;
          v12 = *(v11 - 1);
          v13 = *v11;
        }
        else
        {
          v12 = a2;
          v13 = a3;
          if (v10)
            goto LABEL_41;
        }
        v14 = v13 - v12;
        if (__OFSUB__(v13, v12))
          goto LABEL_38;
        v15 = v9 + v14;
        if (__OFADD__(v9, v14))
          goto LABEL_39;
        if (v15 > a1)
          break;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_21502DABC(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        v4 = *((_QWORD *)v8 + 2);
        v16 = *((_QWORD *)v8 + 3);
        if (v4 >= v16 >> 1)
          v8 = sub_21502DABC((char *)(v16 > 1), v4 + 1, 1, v8);
        *((_QWORD *)v8 + 2) = v4 + 1;
        v17 = &v8[16 * v4];
        *((_QWORD *)v17 + 4) = v12;
        *((_QWORD *)v17 + 5) = v13;
        --v10;
        v11 -= 2;
        v9 = v15;
        if (v10 == -1)
          goto LABEL_30;
      }
      if (__OFSUB__(a1, v9))
      {
        __break(1u);
      }
      else
      {
        v4 = sub_21502DA4C(a1 - v9, v12, v13);
        v12 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_27:
          v20 = *((_QWORD *)v8 + 2);
          v19 = *((_QWORD *)v8 + 3);
          if (v20 >= v19 >> 1)
            v8 = sub_21502DABC((char *)(v19 > 1), v20 + 1, 1, v8);
          *((_QWORD *)v8 + 2) = v20 + 1;
          v21 = &v8[16 * v20];
          *((_QWORD *)v21 + 4) = v4;
          *((_QWORD *)v21 + 5) = v12;
LABEL_30:
          sub_21501EF2C(a2, a3, a4);
          goto LABEL_31;
        }
      }
      v8 = sub_21502DABC(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      goto LABEL_27;
    }
  }
  v8 = (char *)MEMORY[0x24BEE4AF8];
LABEL_31:
  v22 = *((_QWORD *)v8 + 2);
  if (v22)
  {
    v23 = (uint64_t *)&v8[16 * v22 + 24];
    while (v22 <= *((_QWORD *)v8 + 2))
    {
      --v22;
      sub_2150757D4(*(v23 - 1), *v23);
      v23 -= 2;
      if (!v22)
        goto LABEL_35;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
  }
LABEL_35:
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall DataFrame.append(rowsOf:)(TabularData::DataFrame rowsOf)
{
  char **v1;
  uint64_t v2;
  char **v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v1;
  v4 = *(_QWORD *)rowsOf.columns._rawValue;
  v5 = *v1;
  v6 = *((_QWORD *)v5 + 2);
  if (v6 != *(_QWORD *)(*(_QWORD *)rowsOf.columns._rawValue + 16))
  {
    while (1)
    {
LABEL_29:
      sub_2151302EC();
      __break(1u);
LABEL_30:
      sub_21501EE90((uint64_t)&v25[v2 + 32], (uint64_t)&v34);
      v27 = v36;
      v26 = v37;
      __swift_project_boxed_opaque_existential_1(&v34, v36);
      (*(void (**)(uint64_t))(*(_QWORD *)(v26 + 8) + 8))(v27);
      sub_21501EA34((uint64_t)&v34);
      sub_21512FB90();
      swift_bridgeObjectRelease();
      sub_21512FB90();
      sub_21501EE90(v30 + v2, (uint64_t)&v34);
      v28 = v36;
      v29 = v37;
      __swift_project_boxed_opaque_existential_1(&v34, v36);
      (*(void (**)(uint64_t))(*(_QWORD *)(v29 + 8) + 8))(v28);
      sub_21501EA34((uint64_t)&v34);
      sub_21512FB90();
      swift_bridgeObjectRelease();
      sub_21512FB90();
    }
  }
  if (v6)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_26;
    while (1)
    {
      v2 = 0;
      v7 = 0;
      *v3 = v5;
      v30 = v4 + 32;
      while (v6 != v7)
      {
        if (v7 >= *((_QWORD *)v5 + 2))
          goto LABEL_22;
        sub_21501EE90((uint64_t)&v5[v2 + 32], (uint64_t)&v34);
        v9 = v36;
        v8 = v37;
        v10 = (char *)__swift_project_boxed_opaque_existential_1(&v34, v36);
        v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8);
        v5 = v10;
        v12 = v11(v9);
        v14 = v13;
        sub_21501EA34((uint64_t)&v34);
        if (v7 >= *(_QWORD *)(v4 + 16))
          goto LABEL_23;
        sub_21501EE90(v30 + v2, (uint64_t)v31);
        v16 = v32;
        v15 = v33;
        __swift_project_boxed_opaque_existential_1(v31, v32);
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 8) + 8))(v16);
        v19 = v18;
        sub_21501EA34((uint64_t)v31);
        if (v12 == v17 && v14 == v19)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v21 = sub_21513043C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v21 & 1) == 0)
          {
            v34 = 0;
            v35 = 0xE000000000000000;
            sub_215130178();
            v31[0] = v34;
            v31[1] = v35;
            sub_21512FB90();
            v25 = *v3;
            if (v7 < *((_QWORD *)*v3 + 2))
              goto LABEL_30;
            __break(1u);
            goto LABEL_29;
          }
        }
        v5 = *v3;
        if (v7 >= *((_QWORD *)*v3 + 2))
          goto LABEL_24;
        sub_21501EE90(v30 + v2, (uint64_t)&v34);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v3 = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v5 = sub_21501E4D4((uint64_t)v5);
          *v3 = v5;
        }
        if (v7 >= *((_QWORD *)v5 + 2))
          goto LABEL_25;
        ++v7;
        v23 = *(_QWORD *)&v5[v2 + 56];
        v24 = *(_QWORD *)&v5[v2 + 64];
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v5[v2 + 32], v23);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v24 + 40))(&v34, v23, v24);
        sub_21501EA34((uint64_t)&v34);
        v5 = *v3;
        v2 += 40;
        if (v6 == v7)
          return;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      v5 = sub_21501E4D4((uint64_t)v5);
    }
  }
}

Swift::Void __swiftcall DataFrame.append(_:)(TabularData::DataFrame a1)
{
  char *v1;
  char **v2;
  uint64_t v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t (*v45)(char *, char *);
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[3];
  char *v77;
  uint64_t v78;
  uint64_t v79;

  v4 = v2;
  v5 = 0;
  v6 = *(_QWORD *)a1.columns._rawValue;
  v7 = MEMORY[0x24BEE4B08];
  v79 = MEMORY[0x24BEE4B08];
  v65 = v6;
  v68 = *(char **)(v6 + 16);
  if (!v68)
  {
LABEL_30:
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_55;
    if (*(_QWORD *)(v65 + 16))
    {
      sub_21501EE90(v65 + 32, (uint64_t)v76);
      v1 = v77;
      v43 = v78;
      __swift_project_boxed_opaque_existential_1(v76, (uint64_t)v77);
      v44 = *(char **)(v43 + 8);
      v45 = (uint64_t (*)(char *, char *))*((_QWORD *)v44 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46 = v45(v1, v44);
      sub_21501EA34((uint64_t)v76);
      if (v46 < 0)
      {
        __break(1u);
        goto LABEL_66;
      }
      if (v46)
      {
        v47 = 0;
        goto LABEL_37;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v46 = 0;
    v47 = 2;
LABEL_37:
    v5 = sub_2150EBD1C(0, v46, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(0, v46, v47);
    v44 = *v4;
    v3 = *((_QWORD *)*v4 + 2);
    if (v3)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_39:
        v48 = 0;
        *v66 = v44;
        v70 = v7 + 56;
        while (1)
        {
          if (v48 == v3)
            goto LABEL_59;
          if (*(_QWORD *)(v7 + 16))
          {
            v49 = sub_215130598();
            v50 = -1 << *(_BYTE *)(v7 + 32);
            v51 = v49 & ~v50;
            if (((*(_QWORD *)(v70 + ((v51 >> 3) & 0xFFFFFFFFFFFFF8)) >> v51) & 1) != 0)
            {
              v52 = *(_QWORD *)(v7 + 48);
              if (*(_QWORD *)(v52 + 8 * v51) == v48)
                goto LABEL_40;
              v53 = ~v50;
              while (1)
              {
                v51 = (v51 + 1) & v53;
                if (((*(_QWORD *)(v70 + ((v51 >> 3) & 0xFFFFFFFFFFFFF8)) >> v51) & 1) == 0)
                  break;
                if (*(_QWORD *)(v52 + 8 * v51) == v48)
                  goto LABEL_40;
              }
            }
          }
          if (v5 < 0)
            goto LABEL_63;
          if (v5)
          {
            v4 = (char **)&v44[40 * v48 + 32];
            v54 = v5;
            while (v48 < *((_QWORD *)v44 + 2))
            {
              v1 = v4[3];
              v55 = v4[4];
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, (uint64_t)v1);
              (*((void (**)(char *, char *))v55 + 2))(v1, v55);
              if (!--v54)
                goto LABEL_40;
            }
            __break(1u);
            goto LABEL_58;
          }
LABEL_40:
          if (++v48 == v3)
          {
            swift_bridgeObjectRelease();
            *v66 = v44;
            return;
          }
        }
      }
LABEL_66:
      v44 = sub_21501E4D4((uint64_t)v44);
      goto LABEL_39;
    }
LABEL_55:
    swift_bridgeObjectRelease();
    return;
  }
  v1 = *v2;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_64;
LABEL_3:
  v8 = 0;
  *v4 = v1;
  v3 = 40;
  while (1)
  {
    if (__OFADD__(v8, 1))
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      v1 = sub_21501E4D4((uint64_t)v1);
      goto LABEL_3;
    }
    v69 = v8 + 1;
    sub_21501EE90(v65 + 32 + 40 * (_QWORD)v8, (uint64_t)v76);
    v9 = v4[2];
    v1 = v77;
    v10 = v78;
    __swift_project_boxed_opaque_existential_1(v76, (uint64_t)v77);
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = v12(v1, v11);
    v15 = v13;
    v16 = v14;
    if (*((_QWORD *)v9 + 2))
    {
      v17 = sub_21502F898(v13, v14, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(*((_QWORD *)v9 + 7) + 8 * v17);
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRetain();
    v29 = swift_bridgeObjectRetain();
    v30 = sub_2150439CC(v29, v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
      break;
    swift_bridgeObjectRelease();
    v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v39 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v39)
      goto LABEL_23;
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = v69;
    sub_21501EA34((uint64_t)v76);
LABEL_5:
    v8 = v1;
    if (v1 == v68)
    {
      swift_bridgeObjectRelease();
      v7 = v79;
      goto LABEL_30;
    }
  }
  v67 = v5;
  v73[0] = MEMORY[0x24BEE4AF8];
  sub_215038BC8(0, v31, 0);
  v32 = (_QWORD *)v73[0];
  v33 = (uint64_t *)(v30 + 56);
  do
  {
    v34 = *(v33 - 1);
    v35 = *v33;
    v73[0] = v32;
    v36 = v32[2];
    v37 = v32[3];
    swift_bridgeObjectRetain();
    if (v36 >= v37 >> 1)
    {
      sub_215038BC8((char *)(v37 > 1), v36 + 1, 1);
      v32 = (_QWORD *)v73[0];
    }
    v32[2] = v36 + 1;
    v38 = &v32[2 * v36];
    v38[4] = v34;
    v38[5] = v35;
    v33 += 4;
    --v31;
  }
  while (v31);
  swift_bridgeObjectRelease();
  v4 = v66;
  v5 = v67;
  v3 = 40;
  v39 = v32[2];
  if (!v39)
    goto LABEL_4;
LABEL_23:
  v1 = (char *)v32[4];
  v40 = v32[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v39 != 1)
    goto LABEL_4;
  if (!*((_QWORD *)v9 + 2))
    goto LABEL_4;
  v41 = sub_21502F898((uint64_t)v1, v40, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
  if ((v42 & 1) == 0)
    goto LABEL_4;
  v19 = *(_QWORD *)(*((_QWORD *)v9 + 7) + 8 * v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 0x8000000000000000) != 0)
    goto LABEL_60;
  v20 = *v4;
  if (v19 >= *((_QWORD *)*v4 + 2))
    goto LABEL_61;
  sub_21501EE90((uint64_t)&v20[40 * v19 + 32], (uint64_t)v73);
  v21 = v74;
  v22 = v75;
  __swift_project_boxed_opaque_existential_1(v73, v74);
  v1 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v22 + 8) + 80))(v21);
  v24 = (uint64_t)v77;
  v23 = v78;
  __swift_project_boxed_opaque_existential_1(v76, (uint64_t)v77);
  if (v1 == (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v23 + 8) + 80))(v24))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v4 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v20 = sub_21501E4D4((uint64_t)v20);
      *v4 = v20;
    }
    if (v19 >= *((_QWORD *)v20 + 2))
      goto LABEL_62;
    v26 = &v20[40 * v19];
    v27 = *((_QWORD *)v26 + 7);
    v28 = *((_QWORD *)v26 + 8);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v26 + 32), v27);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v28 + 40))(v76, v27, v28);
    *v4 = v20;
    sub_21503927C(&v71, v19);
    sub_21501EA34((uint64_t)v73);
    sub_21501EA34((uint64_t)v76);
    v1 = v69;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v71 = 0;
  v72 = 0xE000000000000000;
  sub_215130178();
  swift_bridgeObjectRelease();
  v71 = 0xD00000000000001CLL;
  v72 = 0x8000000215130D60;
  v56 = v74;
  v57 = v75;
  __swift_project_boxed_opaque_existential_1(v73, v74);
  (*(void (**)(uint64_t))(*(_QWORD *)(v57 + 8) + 8))(v56);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  v71 = 0xD000000000000018;
  v72 = 0x8000000215130D40;
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v59 = v71;
  v58 = v72;
  v61 = v74;
  v60 = v75;
  __swift_project_boxed_opaque_existential_1(v73, v74);
  (*(void (**)(uint64_t))(*(_QWORD *)(v60 + 8) + 80))(v61);
  v71 = sub_215130664();
  v72 = v62;
  sub_21512FB90();
  v64 = (uint64_t)v77;
  v63 = v78;
  __swift_project_boxed_opaque_existential_1(v76, (uint64_t)v77);
  (*(void (**)(uint64_t))(*(_QWORD *)(v63 + 8) + 80))(v64);
  sub_215130664();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v71 = v59;
  v72 = v58;
  swift_bridgeObjectRetain();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2151302EC();
  __break(1u);
}

uint64_t sub_215025CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_2151305A4();
    sub_21512FB3C();
    v6 = sub_2151305EC();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_21513043C() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_21513043C() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_215025E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = sub_215130598();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_215025ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  _OWORD v10[2];
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  sub_2151305A4();
  sub_21504670C(a1, (uint64_t)&v19, &qword_254DA75E8);
  if (*((_QWORD *)&v20 + 1))
  {
    v17[0] = v19;
    v17[1] = v20;
    v18 = v21;
    sub_2151305BC();
    sub_215130148();
    sub_215046238((uint64_t)v17);
  }
  else
  {
    sub_2151305BC();
  }
  v4 = sub_2151305EC();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = ~v5;
  while (1)
  {
    sub_21504670C(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)&v19, &qword_254DA75E8);
    sub_21504670C((uint64_t)&v19, (uint64_t)v12, &qword_254DA75E8);
    sub_21504670C(a1, (uint64_t)&v14, &qword_254DA75E8);
    if (!v13)
      break;
    sub_21504670C((uint64_t)v12, (uint64_t)v17, &qword_254DA75E8);
    if (!*((_QWORD *)&v15 + 1))
    {
      sub_215046238((uint64_t)v17);
      goto LABEL_8;
    }
    v10[0] = v14;
    v10[1] = v15;
    v11 = v16;
    v8 = MEMORY[0x2199DBC90](v17, v10);
    sub_215046238((uint64_t)v10);
    sub_215046238((uint64_t)v17);
    sub_215046750((uint64_t)v12, &qword_254DA75E8);
    sub_215046750((uint64_t)&v19, &qword_254DA75E8);
    if ((v8 & 1) != 0)
      return 1;
LABEL_9:
    v6 = (v6 + 1) & v7;
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      return 0;
  }
  if (*((_QWORD *)&v15 + 1))
  {
LABEL_8:
    sub_215046750((uint64_t)v12, &qword_254DA75F0);
    sub_215046750((uint64_t)&v19, &qword_254DA75E8);
    goto LABEL_9;
  }
  sub_215046750((uint64_t)v12, &qword_254DA75E8);
  sub_215046750((uint64_t)&v19, &qword_254DA75E8);
  return 1;
}

uint64_t sub_2150260F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_2151305A4();
    sub_2151305BC();
    if (a2 >> 60 != 15)
    {
      sub_21501F068(a1, a2);
      sub_21512F68C();
      sub_215045ED8(a1, a2);
    }
    v6 = sub_2151305EC();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v9 = ~v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v8);
        v12 = *v10;
        v11 = v10[1];
        if (v11 >> 60 == 15)
        {
          if (a2 >> 60 == 15)
            return 1;
        }
        else if (a2 >> 60 != 15)
        {
          __asm { BR              X10 }
        }
        sub_215046224(a1, a2);
        sub_215046224(v12, v11);
        sub_215045ED8(v12, v11);
        sub_215045ED8(a1, a2);
        v8 = (v8 + 1) & v9;
      }
      while (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
    }
  }
  return 0;
}

uint64_t sub_215026C30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a1;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75C0);
  MEMORY[0x24BDAC7A8](v36);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_21512F740();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v35 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v33 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v33 - v16;
  if (*(_QWORD *)(a2 + 16))
  {
    sub_2151305A4();
    sub_21504670C(v41, (uint64_t)v17, qword_253F0D218);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    if (v18(v17, 1, v5) == 1)
    {
      sub_2151305BC();
    }
    else
    {
      v19 = v12;
      v20 = v35;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v35, v17, v5);
      sub_2151305BC();
      sub_2150461E4(&qword_254DA75C8, MEMORY[0x24BDCE930]);
      sub_21512F914();
      v21 = v20;
      v12 = v19;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v5);
    }
    v22 = sub_2151305EC();
    v23 = -1 << *(_BYTE *)(a2 + 32);
    v24 = v22 & ~v23;
    v40 = a2 + 56;
    if (((*(_QWORD *)(a2 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
    {
      v37 = v6;
      v38 = ~v23;
      v39 = *(_QWORD *)(v9 + 72);
      v25 = v36;
      v34 = v18;
      while (1)
      {
        sub_21504670C(*(_QWORD *)(a2 + 48) + v39 * v24, (uint64_t)v15, qword_253F0D218);
        v26 = (uint64_t)&v4[*(int *)(v25 + 48)];
        sub_21504670C((uint64_t)v15, (uint64_t)v4, qword_253F0D218);
        sub_21504670C(v41, v26, qword_253F0D218);
        if (v18(v4, 1, v5) == 1)
          break;
        sub_21504670C((uint64_t)v4, (uint64_t)v12, qword_253F0D218);
        if (v18((char *)v26, 1, v5) == 1)
        {
          (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v5);
LABEL_8:
          sub_215046750((uint64_t)v4, &qword_254DA75C0);
          sub_215046750((uint64_t)v15, qword_253F0D218);
          goto LABEL_9;
        }
        v27 = v12;
        v28 = v37;
        v29 = v35;
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v35, v26, v5);
        sub_2150461E4(&qword_254DA75D0, MEMORY[0x24BDCE958]);
        v30 = sub_21512FA58();
        v31 = *(void (**)(char *, uint64_t))(v28 + 8);
        v31(v29, v5);
        v31(v27, v5);
        v12 = v27;
        v18 = v34;
        v25 = v36;
        sub_215046750((uint64_t)v4, qword_253F0D218);
        sub_215046750((uint64_t)v15, qword_253F0D218);
        if ((v30 & 1) != 0)
          return 1;
LABEL_9:
        v24 = (v24 + 1) & v38;
        if (((*(_QWORD *)(v40 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
          return 0;
      }
      if (v18((char *)v26, 1, v5) == 1)
      {
        sub_215046750((uint64_t)v4, qword_253F0D218);
        sub_215046750((uint64_t)v15, qword_253F0D218);
        return 1;
      }
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t DataFrame.append(_:)(__int128 *a1)
{
  char **v1;
  char **v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD v78[3];
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[3];
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  _BYTE v86[25];

  v2 = v1;
  v3 = *a1;
  *(_OWORD *)v86 = a1[1];
  v85 = v3;
  *(_OWORD *)&v86[9] = *(__int128 *)((char *)a1 + 25);
  v84 = MEMORY[0x24BEE4B08];
  v4 = v3;
  sub_2150451E0((uint64_t)&v85);
  v5 = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = sub_215043204(v5, (uint64_t)&v85);
  sub_215045244((uint64_t)&v85);
  v69 = v4;
  swift_bridgeObjectRelease();
  v71 = v2;
  v74 = *(_QWORD *)(v7 + 16);
  if (!v74)
  {
    swift_bridgeObjectRelease();
    v46 = MEMORY[0x24BEE4B08];
    if (!*(_QWORD *)(MEMORY[0x24BEE4B08] + 16))
      return swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v70 = v7;
  v8 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_60;
LABEL_3:
  v9 = 0;
  *v2 = v8;
  while (1)
  {
    v10 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      v8 = sub_21501E4D4((uint64_t)v8);
      goto LABEL_3;
    }
    sub_2150452A8(v70 + 32 + 40 * v9, (uint64_t)v81);
    v11 = v2[1];
    v12 = v2[2];
    v8 = v82;
    v13 = v83;
    __swift_project_boxed_opaque_existential_1(v81, (uint64_t)v82);
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v15(v8, v14);
    v18 = v16;
    v19 = v17;
    if (*((_QWORD *)v12 + 2))
    {
      v20 = sub_21502F898(v16, v17, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
      if ((v21 & 1) != 0)
      {
        v22 = *(_QWORD *)(*((_QWORD *)v12 + 7) + 8 * v20);
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRetain();
    v8 = v11;
    v32 = swift_bridgeObjectRetain();
    v33 = sub_2150439CC(v32, v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v33 + 16);
    if (v34)
      break;
    swift_bridgeObjectRelease();
    v35 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v42 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v42)
      goto LABEL_23;
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2150452E4((uint64_t)v81);
LABEL_5:
    v9 = v10;
    if (v10 == v74)
    {
      swift_bridgeObjectRelease();
      v46 = v84;
      if (!*(_QWORD *)(v84 + 16))
        return swift_bridgeObjectRelease();
LABEL_32:
      v8 = *(char **)&v86[8];
      v47 = *(_QWORD *)&v86[16];
      v48 = v86[24];
      v75 = sub_2150EBD1C(*(uint64_t *)&v86[8], *(uint64_t *)&v86[16], v86[24]);
      v6 = v69;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2150437A8((uint64_t)v8, v47, v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21501EF2C((uint64_t)v8, v47, v48);
      v49 = *v2;
      v50 = *((_QWORD *)*v2 + 2);
      if (v50)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v49 = sub_21501E4D4((uint64_t)v49);
        v51 = 0;
        *v71 = v49;
        v52 = v46 + 56;
        while (1)
        {
          if (v51 == v50)
            goto LABEL_55;
          if (*(_QWORD *)(v46 + 16))
          {
            v53 = sub_215130598();
            v54 = -1 << *(_BYTE *)(v46 + 32);
            v55 = v53 & ~v54;
            if (((*(_QWORD *)(v52 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) != 0)
            {
              v56 = *(_QWORD *)(v46 + 48);
              if (*(_QWORD *)(v56 + 8 * v55) == v51)
                goto LABEL_36;
              v57 = ~v54;
              while (1)
              {
                v55 = (v55 + 1) & v57;
                if (((*(_QWORD *)(v52 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
                  break;
                if (*(_QWORD *)(v56 + 8 * v55) == v51)
                  goto LABEL_36;
              }
            }
          }
          v6 = v75;
          if (v75 < 0)
            goto LABEL_59;
          if (v75)
          {
            v58 = (uint64_t)&v49[40 * v51 + 32];
            while (v51 < *((_QWORD *)v49 + 2))
            {
              v8 = *(char **)(v58 + 24);
              v2 = *(char ***)(v58 + 32);
              __swift_mutable_project_boxed_opaque_existential_1(v58, (uint64_t)v8);
              ((void (*)(char *, char **))v2[2])(v8, v2);
              if (!--v6)
                goto LABEL_36;
            }
            __break(1u);
            goto LABEL_54;
          }
LABEL_36:
          if (++v51 == v50)
          {
            result = swift_bridgeObjectRelease();
            *v71 = v49;
            return result;
          }
        }
      }
      return swift_bridgeObjectRelease();
    }
  }
  v72 = v10;
  v73 = v6;
  v78[0] = MEMORY[0x24BEE4AF8];
  sub_215038BC8(0, v34, 0);
  v35 = (_QWORD *)v78[0];
  v36 = (uint64_t *)(v33 + 56);
  do
  {
    v37 = *(v36 - 1);
    v38 = *v36;
    v78[0] = v35;
    v39 = v35[2];
    v40 = v35[3];
    v8 = (char *)(v39 + 1);
    swift_bridgeObjectRetain();
    if (v39 >= v40 >> 1)
    {
      sub_215038BC8((char *)(v40 > 1), v39 + 1, 1);
      v35 = (_QWORD *)v78[0];
    }
    v35[2] = v8;
    v41 = &v35[2 * v39];
    v41[4] = v37;
    v41[5] = v38;
    v36 += 4;
    --v34;
  }
  while (v34);
  swift_bridgeObjectRelease();
  v2 = v71;
  v10 = v72;
  v6 = v73;
  v42 = v35[2];
  if (!v42)
    goto LABEL_4;
LABEL_23:
  v8 = (char *)v35[4];
  v43 = v35[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v42 != 1)
    goto LABEL_4;
  if (!*((_QWORD *)v12 + 2))
    goto LABEL_4;
  v44 = sub_21502F898((uint64_t)v8, v43, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
  if ((v45 & 1) == 0)
    goto LABEL_4;
  v22 = *(_QWORD *)(*((_QWORD *)v12 + 7) + 8 * v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 0x8000000000000000) != 0)
    goto LABEL_56;
  v23 = *v2;
  if (v22 >= *((_QWORD *)*v2 + 2))
    goto LABEL_57;
  v24 = v10;
  sub_21501EE90((uint64_t)&v23[40 * v22 + 32], (uint64_t)v78);
  v25 = v79;
  v26 = v80;
  __swift_project_boxed_opaque_existential_1(v78, v79);
  v8 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 + 8) + 80))(v25);
  v28 = (uint64_t)v82;
  v27 = v83;
  __swift_project_boxed_opaque_existential_1(v81, (uint64_t)v82);
  if (v8 == (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v27 + 8) + 80))(v28))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v23 = sub_21501E4D4((uint64_t)v23);
      *v2 = v23;
    }
    if (v22 >= *((_QWORD *)v23 + 2))
      goto LABEL_58;
    v30 = &v23[40 * v22];
    v8 = (char *)*((_QWORD *)v30 + 7);
    v31 = *((_QWORD *)v30 + 8);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v30 + 32), (uint64_t)v8);
    (*(void (**)(_QWORD *, char *, uint64_t))(v31 + 48))(v81, v8, v31);
    *v2 = v23;
    sub_21503927C(&v76, v22);
    sub_21501EA34((uint64_t)v78);
    sub_2150452E4((uint64_t)v81);
    v10 = v24;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v76 = 0;
  v77 = 0xE000000000000000;
  sub_215130178();
  swift_bridgeObjectRelease();
  v76 = 0xD00000000000001CLL;
  v77 = 0x8000000215130D60;
  v60 = v79;
  v61 = v80;
  __swift_project_boxed_opaque_existential_1(v78, v79);
  (*(void (**)(uint64_t))(*(_QWORD *)(v61 + 8) + 8))(v60);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  v76 = 0xD000000000000018;
  v77 = 0x8000000215130D40;
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v63 = v76;
  v62 = v77;
  v65 = v79;
  v64 = v80;
  __swift_project_boxed_opaque_existential_1(v78, v79);
  (*(void (**)(uint64_t))(*(_QWORD *)(v64 + 8) + 80))(v65);
  v76 = sub_215130664();
  v77 = v66;
  sub_21512FB90();
  v68 = (uint64_t)v82;
  v67 = v83;
  __swift_project_boxed_opaque_existential_1(v81, (uint64_t)v82);
  (*(void (**)(uint64_t))(*(_QWORD *)(v67 + 8) + 80))(v68);
  sub_215130664();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v76 = v63;
  v77 = v62;
  swift_bridgeObjectRetain();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t DataFrame.filter<A>(on:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  char **v6;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  char v35;
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v13 = *v6;
  v12 = (uint64_t)v6[1];
  v14 = v6[2];
  v41 = *v6;
  v42 = v12;
  v43 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DataFrame.subscript.getter(a1, a2, v15, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = type metadata accessor for Column(0, a5, v16, v17);
  v19 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v18);
  v20 = v44;
  sub_2150C1EF0(a3, a4, v18, v19, (uint64_t)&v41);
  if (v20)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v44 = v38[1];
  v22 = v42;
  v34 = v41;
  v35 = (char)v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!*((_QWORD *)v13 + 2))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
LABEL_8:
    v27 = 0;
    v28 = 2;
    goto LABEL_9;
  }
  sub_21501EE90((uint64_t)(v13 + 32), (uint64_t)v38);
  v23 = v39;
  v24 = v40;
  __swift_project_boxed_opaque_existential_1(v38, v39);
  v25 = *(_QWORD *)(v24 + 8);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 48);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v27 = v26(v23, v25);
  result = sub_21501EA34((uint64_t)v38);
  if (v27 < 0)
  {
    __break(1u);
    return result;
  }
  if (!v27)
    goto LABEL_8;
  v28 = 0;
LABEL_9:
  v29 = a6;
  sub_2150437A8(0, v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(0, v27, v28);
  v30 = sub_21502CB8C(v34, v22, v35, 0, v27, v28);
  v32 = v31;
  v37 = v33;
  swift_release();
  swift_bridgeObjectRelease();
  sub_21501EF2C((uint64_t)v34, v22, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v29 = v13;
  *(_QWORD *)(v29 + 8) = v12;
  *(_QWORD *)(v29 + 16) = v14;
  *(_QWORD *)(v29 + 24) = v30;
  *(_QWORD *)(v29 + 32) = v32;
  *(_BYTE *)(v29 + 40) = v37;
  return result;
}

unint64_t DataFrame.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11[2];
  __int128 v12;
  uint64_t v13;

  v6 = *((_QWORD *)v4 + 2);
  v10 = *v4;
  v12 = *v4;
  v13 = v6;
  result = sub_21501F2BC(a1, a2);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v10 + 16))
  {
    sub_21501EE90(v10 + 40 * result + 32, (uint64_t)v11);
    sub_2150459B0(v11, (uint64_t)&v12);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
    type metadata accessor for Column(0, a4, v8, v9);
    return swift_dynamicCast();
  }
  __break(1u);
  return result;
}

uint64_t DataFrame.filter<A>(on:_:)@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char **v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;

  v10 = *a1;
  v11 = a1[1];
  v13 = *v5;
  v12 = (uint64_t)v5[1];
  v14 = v5[2];
  v41 = *v5;
  v42 = v12;
  v44 = v14;
  v43 = v14;
  v40[0] = v10;
  v40[1] = v11;
  DataFrame.subscript.getter(v40, a4);
  v17 = type metadata accessor for Column(0, a4, v15, v16);
  v18 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v17);
  sub_2150C1EF0(a2, a3, v17, v18, (uint64_t)&v41);
  if (v6)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v35 = v41;
  v34 = v42;
  v33 = (char)v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!*((_QWORD *)v13 + 2))
  {
    swift_bridgeObjectRetain_n();
    v24 = v12;
    swift_bridgeObjectRetain_n();
    v27 = v44;
    swift_bridgeObjectRetain_n();
LABEL_8:
    v26 = 0;
    v28 = 2;
    goto LABEL_9;
  }
  sub_21501EE90((uint64_t)(v13 + 32), (uint64_t)&v37);
  v20 = v38;
  v21 = v39;
  __swift_project_boxed_opaque_existential_1(&v37, v38);
  v22 = *(_QWORD *)(v21 + 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 48);
  swift_bridgeObjectRetain_n();
  v24 = v12;
  swift_bridgeObjectRetain_n();
  v25 = v44;
  swift_bridgeObjectRetain_n();
  v26 = v23(v20, v22);
  result = sub_21501EA34((uint64_t)&v37);
  if (v26 < 0)
  {
    __break(1u);
    return result;
  }
  v27 = v25;
  if (!v26)
    goto LABEL_8;
  v28 = 0;
LABEL_9:
  sub_2150437A8(0, v26, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(0, v26, v28);
  v29 = sub_21502CB8C(v35, v34, v33, 0, v26, v28);
  v31 = v30;
  LODWORD(v44) = v32;
  swift_release();
  swift_bridgeObjectRelease();
  sub_21501EF2C((uint64_t)v35, v34, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v13;
  *(_QWORD *)(a5 + 8) = v24;
  *(_QWORD *)(a5 + 16) = v27;
  *(_QWORD *)(a5 + 24) = v29;
  *(_QWORD *)(a5 + 32) = v31;
  *(_BYTE *)(a5 + 40) = (_BYTE)v44;
  return result;
}

unint64_t DataFrame.subscript.getter(uint64_t *a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11[2];
  __int128 v12;
  uint64_t v13;

  v5 = *a1;
  v4 = a1[1];
  v6 = *((_QWORD *)v2 + 2);
  v10 = *v2;
  v12 = *v2;
  v13 = v6;
  result = sub_21501F2BC(v5, v4);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v10 + 16))
  {
    sub_21501EE90(v10 + 40 * result + 32, (uint64_t)v11);
    sub_2150459B0(v11, (uint64_t)&v12);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
    type metadata accessor for Column(0, a2, v8, v9);
    return swift_dynamicCast();
  }
  __break(1u);
  return result;
}

uint64_t DataFrame.filter(_:)@<X0>(uint64_t (*a1)(_QWORD *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v5 = v4;
  v46 = a3;
  v8 = *v3;
  v9 = v3[1];
  v10 = v3[2];
  if (*(_QWORD *)(*v3 + 16))
  {
    sub_21501EE90(v8 + 32, (uint64_t)v37);
    v11 = v38;
    v12 = v39;
    __swift_project_boxed_opaque_existential_1(v37, v38);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v14(v11, v13);
    result = sub_21501EA34((uint64_t)v37);
    if (v15 < 0)
    {
      __break(1u);
      goto LABEL_17;
    }
    if (v15)
    {
      v17 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v15 = 0;
  v17 = 2;
LABEL_7:
  v40 = v8;
  v41 = v9;
  v42 = v10;
  v43 = 0;
  v44 = v15;
  v45 = v17;
  v18 = sub_21502238C(a1, a2);
  v20 = v19;
  v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_21501EF2C(0, v15, v17);
  if (v5)
    return result;
  v36 = v22;
  v23 = v20;
  v24 = (char *)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    goto LABEL_13;
  }
  sub_21501EE90(v8 + 32, (uint64_t)v37);
  v25 = v38;
  v26 = v39;
  __swift_project_boxed_opaque_existential_1(v37, v38);
  v27 = *(_QWORD *)(v26 + 8);
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 48);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v29 = v28(v25, v27);
  result = sub_21501EA34((uint64_t)v37);
  if (v29 < 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (!v29)
  {
LABEL_13:
    v29 = 0;
    v30 = 2;
    goto LABEL_14;
  }
  v30 = 0;
LABEL_14:
  v31 = v46;
  sub_2150437A8(0, v29, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(0, v29, v30);
  v32 = sub_21502CB8C(v24, v23, v36, 0, v29, v30);
  v34 = v33;
  LODWORD(v46) = v35;
  sub_21501EF2C((uint64_t)v24, v23, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v31 = v8;
  *(_QWORD *)(v31 + 8) = v9;
  *(_QWORD *)(v31 + 16) = v10;
  *(_QWORD *)(v31 + 24) = v32;
  *(_QWORD *)(v31 + 32) = v34;
  *(_BYTE *)(v31 + 40) = v46;
  return result;
}

uint64_t DataFrame.selecting<A>(columnNames:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return DataFrame.subscript.getter(a1, a2, a3, a4);
}

uint64_t sub_215028274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  BOOL v51;
  char v52;
  char v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  BOOL v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v5 = (char *)MEMORY[0x24BEE4AF8];
  v69 = *(_QWORD *)(a1 + 16);
  if (v69)
  {
    v7 = a2;
    v67 = a2 + 32;
    v68 = a1 + 32;
    swift_bridgeObjectRetain();
    v8 = 0;
    v64 = v7;
    v65 = a4;
    while (1)
    {
      v9 = (uint64_t *)(v68 + 16 * v8);
      v10 = *v9;
      v11 = v9[1];
      v12 = *(_QWORD *)(a4 + 16);
      swift_bridgeObjectRetain();
      v72 = v10;
      if (!v12)
        goto LABEL_6;
      swift_bridgeObjectRetain();
      v13 = sub_21502F898(v10, v11, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
      if ((v14 & 1) == 0)
        break;
LABEL_17:
      v29 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v13);
      swift_bridgeObjectRelease();
      if ((v29 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        swift_bridgeObjectRelease();
        v74 = 0;
        v75 = 0xE000000000000000;
        sub_215130178();
        swift_bridgeObjectRelease();
        v74 = 0xD00000000000001ALL;
        v75 = 0x8000000215130BC0;
        sub_21512FB90();
        sub_21512FB90();
        goto LABEL_57;
      }
      if (v29 >= *(_QWORD *)(v7 + 16))
        goto LABEL_54;
      sub_21501EE90(v67 + 40 * v29, (uint64_t)&v74);
      v31 = v76;
      v30 = v77;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v74, v76);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 + 8) + 16))(v72, v11, v31);
      sub_21501EE90((uint64_t)&v74, (uint64_t)&v78);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_21502E130(0, *((_QWORD *)v5 + 2) + 1, 1, v5, &qword_253F0D458);
      v33 = *((_QWORD *)v5 + 2);
      v32 = *((_QWORD *)v5 + 3);
      if (v33 >= v32 >> 1)
        v5 = sub_21502E130((char *)(v32 > 1), v33 + 1, 1, v5, &qword_253F0D458);
      ++v8;
      *((_QWORD *)v5 + 2) = v33 + 1;
      v34 = &v5[40 * v33];
      v35 = v78;
      v36 = v79;
      *((_QWORD *)v34 + 8) = v80;
      *((_OWORD *)v34 + 2) = v35;
      *((_OWORD *)v34 + 3) = v36;
      sub_21501EA34((uint64_t)&v74);
      if (v8 == v69)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
LABEL_6:
    v70 = v5;
    v71 = v8;
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRetain();
    v16 = sub_2150439CC(v15, v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v74 = MEMORY[0x24BEE4AF8];
      sub_215038BC8(0, v17, 0);
      v18 = (_QWORD *)v74;
      v19 = (uint64_t *)(v16 + 56);
      do
      {
        v20 = *(v19 - 1);
        v21 = *v19;
        v74 = (unint64_t)v18;
        v23 = v18[2];
        v22 = v18[3];
        swift_bridgeObjectRetain();
        if (v23 >= v22 >> 1)
        {
          sub_215038BC8((char *)(v22 > 1), v23 + 1, 1);
          v18 = (_QWORD *)v74;
        }
        v18[2] = v23 + 1;
        v24 = &v18[2 * v23];
        v24[4] = v20;
        v24[5] = v21;
        v19 += 4;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      a4 = v65;
      v7 = v64;
    }
    else
    {
      swift_bridgeObjectRelease();
      v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v25 = v18[2];
    v5 = v70;
    v8 = v71;
    if (!v25)
      goto LABEL_55;
    v26 = v18[4];
    v27 = v18[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v25 != 1)
      goto LABEL_55;
    if (!*(_QWORD *)(a4 + 16))
      goto LABEL_55;
    v13 = sub_21502F898(v26, v27, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
    if ((v28 & 1) == 0)
      goto LABEL_55;
    goto LABEL_17;
  }
LABEL_25:
  sub_215020C2C((uint64_t)v5, (char **)&v78);
  v37 = swift_bridgeObjectRetain();
  v38 = sub_215043714(v37);
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(a3 + 16);
  if (!v39)
  {
LABEL_52:
    result = swift_bridgeObjectRelease();
    v62 = v79;
    *(_OWORD *)a5 = v78;
    *(_QWORD *)(a5 + 16) = v62;
    return result;
  }
  v73 = v38 + 56;
  swift_bridgeObjectRetain();
  v40 = 0;
  while (1)
  {
    if (!*(_QWORD *)(v38 + 16))
      goto LABEL_28;
    v41 = (uint64_t *)(a3 + 32 + 32 * v40);
    v42 = *v41;
    v43 = v41[1];
    v45 = v41[2];
    v44 = v41[3];
    sub_2151305A4();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_21512FB3C();
    v46 = sub_2151305EC();
    v47 = -1 << *(_BYTE *)(v38 + 32);
    v48 = v46 & ~v47;
    if (((*(_QWORD *)(v73 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8)) >> v48) & 1) != 0)
      break;
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    if (++v40 == v39)
    {
      swift_bridgeObjectRelease();
      goto LABEL_52;
    }
  }
  v49 = *(_QWORD *)(v38 + 48);
  v50 = (_QWORD *)(v49 + 16 * v48);
  v51 = *v50 == v45 && v50[1] == v44;
  if (!v51 && (sub_21513043C() & 1) == 0)
  {
    v58 = ~v47;
    do
    {
      v48 = (v48 + 1) & v58;
      if (((*(_QWORD *)(v73 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8)) >> v48) & 1) == 0)
        goto LABEL_27;
      v59 = (_QWORD *)(v49 + 16 * v48);
      v60 = *v59 == v45 && v59[1] == v44;
    }
    while (!v60 && (sub_21513043C() & 1) == 0);
  }
  if (*(_QWORD *)(v79 + 16))
  {
    swift_bridgeObjectRetain();
    sub_21502F898(v45, v44, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
    v53 = v52;
    swift_bridgeObjectRelease();
    if ((v53 & 1) != 0)
    {
      v54 = (_QWORD *)*((_QWORD *)&v78 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v54 = sub_21502DEE0(0, v54[2] + 1, 1, v54);
      v56 = v54[2];
      v55 = v54[3];
      if (v56 >= v55 >> 1)
        v54 = sub_21502DEE0((_QWORD *)(v55 > 1), v56 + 1, 1, v54);
      v54[2] = v56 + 1;
      v57 = &v54[4 * v56];
      v57[4] = v42;
      v57[5] = v43;
      v57[6] = v45;
      v57[7] = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *((_QWORD *)&v78 + 1) = v54;
      goto LABEL_28;
    }
  }
  v74 = 0;
  v75 = 0xE000000000000000;
  sub_215130178();
  swift_bridgeObjectRelease();
  v74 = 0xD00000000000001ALL;
  v75 = 0x8000000215130BC0;
  sub_21512FB90();
  sub_21512FB90();
LABEL_57:
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t DataFrame.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  BOOL v65;
  char v66;
  char v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  BOOL v74;
  uint64_t result;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  _OWORD *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t AssociatedConformanceWitness;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v79 = a4;
  v8 = 0;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v81 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v78 - v13;
  v15 = *v4;
  v16 = v4[1];
  v89 = v4[2];
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v83 = a1;
  v18 = a1;
  v19 = v14;
  v80 = v17;
  v17(v11, v18, a2);
  v82 = v11;
  sub_21512FC20();
  v85 = a3;
  v84 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_215130094();
  v20 = v100;
  v93 = v16;
  if (!v100)
  {
    v95 = (char *)MEMORY[0x24BEE4AF8];
LABEL_28:
    v90 = v8;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v19, AssociatedTypeWitness);
    sub_215020C2C((uint64_t)v95, (char **)&v96);
    v80(v82, v83, v84);
    v51 = sub_21512FDE8();
    v52 = v51;
    v53 = *(_QWORD *)(v16 + 16);
    if (!v53)
    {
LABEL_57:
      result = swift_bridgeObjectRelease();
      v76 = v97;
      v77 = v79;
      *v79 = v96;
      *((_QWORD *)v77 + 2) = v76;
      return result;
    }
    v94 = v16 + 32;
    v95 = (char *)(v51 + 56);
    swift_bridgeObjectRetain();
    v54 = 0;
    while (1)
    {
      if (v54 >= *(_QWORD *)(v16 + 16))
        goto LABEL_60;
      if (*(_QWORD *)(v52 + 16))
        break;
LABEL_32:
      if (++v54 == v53)
      {
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }
    }
    v55 = (uint64_t *)(v94 + 32 * v54);
    v56 = *v55;
    v57 = v55[1];
    v59 = v55[2];
    v58 = v55[3];
    sub_2151305A4();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_21512FB3C();
    v60 = sub_2151305EC();
    v61 = -1 << *(_BYTE *)(v52 + 32);
    v62 = v60 & ~v61;
    if (((*(_QWORD *)&v95[(v62 >> 3) & 0xFFFFFFFFFFFFF8] >> v62) & 1) != 0)
    {
      v63 = *(_QWORD *)(v52 + 48);
      v64 = (_QWORD *)(v63 + 16 * v62);
      v65 = *v64 == v59 && v64[1] == v58;
      if (v65 || (sub_21513043C() & 1) != 0)
      {
LABEL_41:
        if (!*(_QWORD *)(v97 + 16)
          || (swift_bridgeObjectRetain(),
              sub_21502F898(v59, v58, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC), v67 = v66, swift_bridgeObjectRelease(), (v67 & 1) == 0))
        {
          v99 = 0;
          v100 = 0xE000000000000000;
          sub_215130178();
          swift_bridgeObjectRelease();
          v99 = 0xD00000000000001ALL;
          v100 = 0x8000000215130BC0;
          sub_21512FB90();
          sub_21512FB90();
          goto LABEL_63;
        }
        v68 = (_QWORD *)*((_QWORD *)&v96 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v68 = sub_21502DEE0(0, v68[2] + 1, 1, v68);
        v70 = v68[2];
        v69 = v68[3];
        if (v70 >= v69 >> 1)
          v68 = sub_21502DEE0((_QWORD *)(v69 > 1), v70 + 1, 1, v68);
        v68[2] = v70 + 1;
        v71 = &v68[4 * v70];
        v71[4] = v56;
        v71[5] = v57;
        v71[6] = v59;
        v71[7] = v58;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *((_QWORD *)&v96 + 1) = v68;
        goto LABEL_31;
      }
      v72 = ~v61;
      while (1)
      {
        v62 = (v62 + 1) & v72;
        if (((*(_QWORD *)&v95[(v62 >> 3) & 0xFFFFFFFFFFFFF8] >> v62) & 1) == 0)
          break;
        v73 = (_QWORD *)(v63 + 16 * v62);
        v74 = *v73 == v59 && v73[1] == v58;
        if (v74 || (sub_21513043C() & 1) != 0)
          goto LABEL_41;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_31:
    v16 = v93;
    goto LABEL_32;
  }
  v21 = v99;
  v91 = v15 + 32;
  v95 = (char *)MEMORY[0x24BEE4AF8];
  v22 = v15;
  v23 = v89;
  v87 = AssociatedTypeWitness;
  v86 = v19;
  v88 = v15;
  while (1)
  {
    v24 = *(_QWORD *)(v23 + 16);
    v94 = v21;
    if (v24)
    {
      swift_bridgeObjectRetain();
      v25 = sub_21502F898(v21, v20, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
      if ((v26 & 1) != 0)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    v28 = swift_bridgeObjectRetain();
    v29 = sub_2150439CC(v28, v21, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v29 + 16);
    if (v30)
    {
      v90 = v8;
      v99 = MEMORY[0x24BEE4AF8];
      sub_215038BC8(0, v30, 0);
      v31 = (_QWORD *)v99;
      v32 = (uint64_t *)(v29 + 56);
      do
      {
        v33 = *(v32 - 1);
        v34 = *v32;
        v99 = (unint64_t)v31;
        v35 = v31[2];
        v36 = v31[3];
        swift_bridgeObjectRetain();
        if (v35 >= v36 >> 1)
        {
          sub_215038BC8((char *)(v36 > 1), v35 + 1, 1);
          v31 = (_QWORD *)v99;
        }
        v31[2] = v35 + 1;
        v37 = &v31[2 * v35];
        v37[4] = v33;
        v37[5] = v34;
        v32 += 4;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
      v8 = v90;
      v16 = v93;
      AssociatedTypeWitness = v87;
      v19 = v86;
    }
    else
    {
      swift_bridgeObjectRelease();
      v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v38 = v31[2];
    v23 = v89;
    if (!v38)
      goto LABEL_61;
    v39 = v31[4];
    v40 = v31[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v38 != 1)
      goto LABEL_61;
    if (!*(_QWORD *)(v23 + 16))
      goto LABEL_61;
    v41 = sub_21502F898(v39, v40, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
    if ((v42 & 1) == 0)
      goto LABEL_61;
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v41);
    swift_bridgeObjectRelease();
    v22 = v88;
LABEL_19:
    if ((v27 & 0x8000000000000000) != 0)
      break;
    if (v27 >= *(_QWORD *)(v22 + 16))
      goto LABEL_59;
    sub_21501EE90(v91 + 40 * v27, (uint64_t)&v99);
    v44 = v101;
    v43 = v102;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v99, v101);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 + 8) + 16))(v94, v20, v44);
    sub_21501EE90((uint64_t)&v99, (uint64_t)&v96);
    v45 = v95;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v45 = sub_21502E130(0, *((_QWORD *)v45 + 2) + 1, 1, v45, &qword_253F0D458);
    v47 = *((_QWORD *)v45 + 2);
    v46 = *((_QWORD *)v45 + 3);
    if (v47 >= v46 >> 1)
      v45 = sub_21502E130((char *)(v46 > 1), v47 + 1, 1, v45, &qword_253F0D458);
    *((_QWORD *)v45 + 2) = v47 + 1;
    v95 = v45;
    v48 = &v45[40 * v47];
    v49 = v96;
    v50 = v97;
    *((_QWORD *)v48 + 8) = v98;
    *((_OWORD *)v48 + 2) = v49;
    *((_OWORD *)v48 + 3) = v50;
    sub_21501EA34((uint64_t)&v99);
    sub_215130094();
    v21 = v99;
    v20 = v100;
    if (!v100)
      goto LABEL_28;
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  swift_bridgeObjectRelease();
  v99 = 0;
  v100 = 0xE000000000000000;
  sub_215130178();
  swift_bridgeObjectRelease();
  v99 = 0xD00000000000001ALL;
  v100 = 0x8000000215130BC0;
  sub_21512FB90();
  sub_21512FB90();
LABEL_63:
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t DataFrame.selecting(columnNames:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_215028274(a1, v5, v6, v7, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21502927C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_21508AE78();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return result;
}

__n128 sub_2150292F0(__n128 *a1)
{
  __n128 *v1;
  unint64_t v3;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = a1[1].n128_u64[0];
  sub_21501EF2C(a1[1].n128_i64[1], a1[2].n128_i64[0], a1[2].n128_i8[8]);
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v3;
  return result;
}

void (*sub_21502934C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = DataFrame.rows.modify(v2);
  return sub_215029390;
}

void sub_215029390(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_2150293BC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2150293C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = sub_21508AE78();
  v2 = v1;
  v4 = v3;
  v5 = sub_2150EBD1C(v0, v1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v0, v2, v4);
  return v5;
}

unint64_t DataFrame.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  _QWORD *v7;
  unint64_t result;
  __int128 v9;

  v7 = malloc(0x68uLL);
  *a1 = v7;
  v7[11] = a3;
  v7[12] = v3;
  v7[10] = a2;
  v9 = *v3;
  result = sub_21501F2BC(a2, a3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v9 + 16))
  {
    sub_21501EE90(v9 + 40 * result + 32, (uint64_t)v7);
    return (unint64_t)sub_21502952C;
  }
  __break(1u);
  return result;
}

{
  __int128 *v3;
  _QWORD *v7;
  unint64_t result;
  __int128 v9;

  v7 = malloc(0x68uLL);
  *a1 = v7;
  v7[11] = a3;
  v7[12] = v3;
  v7[10] = a2;
  v9 = *v3;
  result = sub_21501F2BC(a2, a3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v9 + 16))
  {
    sub_21501EE90(v9 + 40 * result + 32, (uint64_t)v7);
    return (unint64_t)sub_21502952C;
  }
  __break(1u);
  return result;
}

unint64_t _s11TabularData0B5FrameV13dynamicMemberAA9AnyColumnVSS_tcig_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  unint64_t result;
  __int128 v6;

  v6 = *v3;
  result = sub_21501F2BC(a1, a2);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v6 + 16))
  {
    return sub_21501EE90(v6 + 40 * result + 32, a3);
  }
  __break(1u);
  return result;
}

unint64_t sub_2150295A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;

  v4 = *a1;
  v5 = *a2;
  v6 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_21501F2BC(v5, v6);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v4 + 16))
  {
    sub_21501EE90(v4 + 40 * result + 32, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_215029658(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[40];

  v3 = *a3;
  v4 = a3[1];
  sub_21501EE90(a1, (uint64_t)v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_21501F2BC(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501DE8C(v5, (uint64_t)v7);
  swift_bridgeObjectRelease();
  return sub_21501EA34((uint64_t)v7);
}

uint64_t _s11TabularData0B5FrameV13dynamicMemberAA9AnyColumnVSS_tcis_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_21501F2BC(a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501DE8C(v6, a1);
  swift_bridgeObjectRelease();
  return sub_21501EA34(a1);
}

void sub_21502988C(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2[11];
    v4 = v2[10];
    sub_21501EE90(*a1, (uint64_t)(v2 + 5));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = sub_21501F2BC(v4, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501DE8C(v5, (uint64_t)(v2 + 5));
    swift_bridgeObjectRelease();
    sub_21501EA34((uint64_t)(v2 + 5));
  }
  else
  {
    v6 = v2[11];
    v7 = v2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = sub_21501F2BC(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501DE8C(v8, (uint64_t)v2);
    swift_bridgeObjectRelease();
  }
  sub_21501EA34((uint64_t)v2);
  free(v2);
}

uint64_t DataFrame.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_21501F2BC(a1, a2);
  DataFrame.subscript.getter(v5, v6, a4);
  sub_215130064();
  v9 = type metadata accessor for Column(0, a4, v7, v8);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v9);
  return sub_21512FD64();
}

unint64_t DataFrame.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  _BYTE v8[40];

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v3 + 16) > result)
  {
    sub_21501EE90(*(_QWORD *)v3 + 40 * result + 32, (uint64_t)v7);
    sub_2150459B0(v7, (uint64_t)v8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
    type metadata accessor for Column(0, a3, v5, v6);
    return swift_dynamicCast();
  }
  __break(1u);
  return result;
}

uint64_t DataFrame.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_215045A54(a1, a2, a3, a4, a5);
  return swift_bridgeObjectRelease();
}

{
  sub_215045B98(a1, a2, a3, a4, a5);
  return swift_bridgeObjectRelease();
}

void (*DataFrame.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;

  v11 = malloc(0x30uLL);
  *a1 = v11;
  v11[4] = a5;
  v11[5] = v5;
  v11[2] = a3;
  v11[3] = a4;
  v11[1] = a2;
  *v11 = DataFrame.subscript.getter(a2, a3, v12, a5);
  return sub_215029C0C;
}

void sub_215029C0C(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  swift_bridgeObjectRetain();
  v6 = v3[4];
  v7 = v3[3];
  v8 = v3[1];
  if ((a2 & 1) != 0)
  {
    v9 = swift_bridgeObjectRetain();
    sub_215045A54(v9, v8, v4, v7, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_215045A54(v5, v3[1], v4, v3[3], v3[4]);
  }
  swift_bridgeObjectRelease();
  free(v3);
}

void (*DataFrame.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;

  v11 = malloc(0x40uLL);
  *a1 = v11;
  v11[6] = a5;
  v11[7] = v5;
  v11[4] = a3;
  v11[5] = a4;
  v11[3] = a2;
  DataFrame.subscript.getter(a2, a3, v12, a5);
  return sub_215029D74;
}

void sub_215029D74(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[6];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v8 = (*a1)[2];
  v7 = (*a1)[3];
  v9[0] = **a1;
  v9[1] = v3;
  v9[2] = v8;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_215045B98((uint64_t)v9, v7, v5, v6, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_215045B98((uint64_t)v9, v7, v5, v6, v4);
    swift_bridgeObjectRelease();
  }
  free(v2);
}

double sub_215029E4C@<D0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10[2];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v5 = *(uint64_t *)((char *)a2 + a3 - 8);
  v6 = *((_QWORD *)a1 + 2);
  v7 = *a2;
  v8 = a2[1];
  v11 = *a1;
  v12 = v6;
  v10[0] = v7;
  v10[1] = v8;
  DataFrame.subscript.getter(v10, v5);
  *(_QWORD *)a4 = v13;
  result = *(double *)&v14;
  *(_OWORD *)(a4 + 8) = v14;
  return result;
}

uint64_t sub_215029EB4(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];
  _QWORD v12[3];

  v4 = *(uint64_t *)((char *)a3 + a4 - 8);
  v6 = *a3;
  v5 = a3[1];
  v7 = a1[1];
  v8 = a1[2];
  v12[0] = *a1;
  v12[1] = v7;
  v12[2] = v8;
  v11[0] = v6;
  v11[1] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return DataFrame.subscript.setter((uint64_t)v12, v11, v4, v9);
}

uint64_t DataFrame.subscript.setter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v11[40];

  v5 = *a2;
  v4 = a2[1];
  v6 = type metadata accessor for Column(0, a3, a3, a4);
  Column.eraseToAnyColumn()(v6, v7, v8, (uint64_t)v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_21501F2BC(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501DE8C(v9, (uint64_t)v11);
  swift_bridgeObjectRelease();
  return sub_21501EA34((uint64_t)v11);
}

void (*DataFrame.subscript.modify(_QWORD *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  __int128 *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v9 = *a2;
  v8 = a2[1];
  v7[5] = *a2;
  v7[6] = v8;
  v10 = *((_QWORD *)v3 + 2);
  v13 = *v3;
  v14 = v10;
  v12[0] = v9;
  v12[1] = v8;
  swift_bridgeObjectRetain();
  DataFrame.subscript.getter(v12, a3);
  return sub_21502A0A4;
}

void sub_21502A0A4(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13[2];

  v4 = *a1;
  v6 = **a1;
  v5 = (*a1)[1];
  v8 = v4[5];
  v7 = v4[6];
  v9 = v4[3];
  v10 = v4[2];
  v12[0] = v6;
  v12[1] = v5;
  v12[2] = v10;
  v13[0] = v8;
  v13[1] = v7;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    DataFrame.subscript.setter((uint64_t)v12, v13, v9, v11);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    DataFrame.subscript.setter((uint64_t)v12, v13, v9, a4);
  }
  free(v4);
}

unint64_t DataFrame.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    return sub_21501EE90(*(_QWORD *)v2 + 40 * result + 32, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_21502A170@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    return sub_21501EE90(*(_QWORD *)result + 40 * v3 + 32, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_21502A1A4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  _BYTE v5[40];

  v3 = *a3;
  sub_21501EE90(a1, (uint64_t)v5);
  sub_21501DE8C(v3, (uint64_t)v5);
  return sub_21501EA34((uint64_t)v5);
}

uint64_t DataFrame.subscript.setter(uint64_t a1, unint64_t a2)
{
  sub_21501DE8C(a2, a1);
  return sub_21501EA34(a1);
}

void (*DataFrame.subscript.modify(void (**a1)(uint64_t *a1, char a2), unint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  void (*result)(uint64_t *, char);

  result = (void (*)(uint64_t *, char))malloc(0x60uLL);
  *a1 = result;
  *((_QWORD *)result + 10) = a2;
  *((_QWORD *)result + 11) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    sub_21501EE90(*(_QWORD *)v2 + 40 * a2 + 32, (uint64_t)result);
    return sub_21502A28C;
  }
  __break(1u);
  return result;
}

void sub_21502A28C(uint64_t *a1, char a2)
{
  unint64_t *v2;
  unint64_t v3;

  v2 = (unint64_t *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2[10];
    sub_21501EE90(*a1, (uint64_t)(v2 + 5));
    sub_21501DE8C(v3, (uint64_t)(v2 + 5));
    sub_21501EA34((uint64_t)(v2 + 5));
  }
  else
  {
    sub_21501DE8C(v2[10], (uint64_t)v2);
  }
  sub_21501EA34((uint64_t)v2);
  free(v2);
}

uint64_t DataFrame.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];

  v5 = type metadata accessor for Column(0, a4, a3, a4);
  Column.eraseToAnyColumn()(v5, v6, v7, (uint64_t)v9);
  swift_release();
  swift_bridgeObjectRelease();
  sub_21501DE8C(a2, (uint64_t)v9);
  return sub_21501EA34((uint64_t)v9);
}

void (*DataFrame.subscript.modify(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;

  v9 = malloc(0x38uLL);
  *a1 = v9;
  v9[5] = a4;
  v9[6] = v4;
  v9[3] = a2;
  v9[4] = a3;
  DataFrame.subscript.getter(a2, v10, a4);
  return sub_21502A408;
}

void sub_21502A408(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];

  v3 = *a1;
  v5 = **a1;
  v4 = (*a1)[1];
  v6 = v3[5];
  v8 = v3[2];
  v7 = v3[3];
  v10[0] = v5;
  v10[1] = v4;
  v10[2] = v8;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    DataFrame.subscript.setter((uint64_t)v10, v7, v9, v6);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    DataFrame.subscript.setter((uint64_t)v10, v7, a3, v6);
  }
  free(v3);
}

uint64_t DataFrame.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  char v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  if (!*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  sub_21501EE90(v5 + 32, (uint64_t)v15);
  v8 = v16;
  v9 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = v11(v8, v10);
  result = sub_21501EA34((uint64_t)v15);
  if ((v12 & 0x8000000000000000) == 0)
  {
    if (v12)
    {
      v14 = 0;
LABEL_7:
      *a2 = v5;
      a2[1] = v6;
      a2[2] = v7;
      a2[3] = a1;
      return sub_21501EF2C(0, v12, v14);
    }
LABEL_6:
    v12 = 0;
    v14 = 2;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_21502A598@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *a2;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v8 = sub_21508AE78();
  v10 = v9;
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_21501EF2C(v8, v10, v12);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

uint64_t sub_21502A650(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v3 = *a3;
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v8[0] = *a1;
  v8[1] = v4;
  v8[2] = v6;
  v8[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return DataFrame.subscript.setter(v8, v3);
}

uint64_t DataFrame.subscript.setter(_QWORD *a1, uint64_t a2)
{
  char **v2;
  char **v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v30[5];
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v4 = (_QWORD *)*a1;
  v5 = a1[1];
  v6 = *v3;
  v7 = v3[1];
  v27 = v3[2];
  if (*((_QWORD *)*v3 + 2))
  {
    v8 = (_QWORD *)*a1;
    v28 = a1[3];
    sub_21501EE90((uint64_t)(v6 + 32), (uint64_t)v31);
    v10 = v32;
    v9 = v33;
    v11 = __swift_project_boxed_opaque_existential_1(v31, v32);
    v12 = *(_QWORD *)(v9 + 8);
    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = v13(v10, v12);
    sub_21501EA34((uint64_t)v31);
    if (v14 < 0)
    {
LABEL_15:
      __break(1u);
LABEL_16:
      v6 = sub_21501E4D4((uint64_t)v6);
LABEL_6:
      v15 = 0;
      v16 = 0;
      do
      {
        sub_21501EE90((uint64_t)&v11[v15 / 8 + 4], (uint64_t)v31);
        if (v16 >= *((_QWORD *)v6 + 2))
        {
          __break(1u);
          goto LABEL_15;
        }
        ++v16;
        v17 = v32;
        v18 = v33;
        v19 = __swift_project_boxed_opaque_existential_1(v31, v32);
        v30[3] = v17;
        v30[4] = *(_QWORD *)(v18 + 8);
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(boxed_opaque_existential_1, v19, v17);
        v21 = *(_QWORD *)&v6[v15 + 56];
        v22 = *(_QWORD *)&v6[v15 + 64];
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v6[v15 + 32], v21);
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v22 + 72))(a2, v28, v30, v21, v22);
        v11 = v8;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
        sub_21501EA34((uint64_t)v31);
        v15 += 40;
      }
      while (v5 != v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v25;
      v3 = v26;
      v14 = v24;
      goto LABEL_13;
    }
    v5 = *((_QWORD *)v6 + 2);
    if (v8[2] == v5)
    {
      v11 = v8;
      if (v5)
      {
        v26 = v3;
        v24 = v14;
        v25 = v7;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_6;
        goto LABEL_16;
      }
LABEL_12:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = sub_21501EF2C(0, v14, 2 * (v14 == 0));
      *v3 = v6;
      v3[1] = v7;
      v3[2] = v27;
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v4[2])
    {
      v14 = 0;
      goto LABEL_12;
    }
  }
  result = sub_2151302EC();
  __break(1u);
  return result;
}

void (*DataFrame.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  char v14;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v5[9] = a2;
  v5[10] = v2;
  v6 = *v2;
  v7 = v2[1];
  v8 = v2[2];
  if (!*(_QWORD *)(*v2 + 16))
    goto LABEL_4;
  sub_21501EE90(v6 + 32, (uint64_t)v5);
  v9 = v5[3];
  v10 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v9);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = v12(v9, v11);
  sub_21501EA34((uint64_t)v5);
  if (v13 < 0)
  {
    __break(1u);
LABEL_4:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  if (v13)
  {
    v14 = 0;
    goto LABEL_6;
  }
LABEL_5:
  v13 = 0;
  v14 = 2;
LABEL_6:
  v5[5] = v6;
  v5[6] = v7;
  v5[7] = v8;
  v5[8] = a2;
  sub_21501EF2C(0, v13, v14);
  return sub_21502AA80;
}

void sub_21502AA80(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v7[0] = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7[1] = v4;
  v7[2] = v3;
  v7[3] = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DataFrame.subscript.setter(v7, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    DataFrame.subscript.setter(v7, v5);
  }
  free(v2);
}

uint64_t DataFrame.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;

  v8 = *v4;
  v9 = v4[1];
  v10 = v4[2];
  if (*(_QWORD *)(*v4 + 16))
  {
    sub_21501EE90(v8 + 32, (uint64_t)v51);
    v12 = v52;
    v11 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v14(v12, v13);
    result = sub_21501EA34((uint64_t)v51);
    if (v15 < 0)
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = v15;
      v18 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = 0;
  v18 = 2;
LABEL_7:
  sub_21501EF2C(0, v17, v18);
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  sub_21501EE90(v8 + 32, (uint64_t)v51);
  v20 = v52;
  v19 = v53;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = v22(v20, v21);
  result = sub_21501EA34((uint64_t)v51);
  if (v23 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v23)
  {
    v24 = 0;
    goto LABEL_13;
  }
LABEL_12:
  v23 = 0;
  v24 = 2;
LABEL_13:
  sub_21508C520(0, v23, v24);
  v26 = v25;
  v28 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_21501EF2C(0, v23, v24);
  if ((v28 & 1) != 0)
    v29 = 0;
  else
    v29 = v26;
  if (v29 < 0)
    goto LABEL_26;
  v30 = (char *)sub_215071060(a1, 0, v29, a2, a3);
  v32 = v31;
  v34 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    goto LABEL_22;
  }
  v50 = v34;
  v35 = v32;
  v36 = v30;
  v37 = a4;
  sub_21501EE90(v8 + 32, (uint64_t)v51);
  v38 = v52;
  v39 = v53;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  v40 = *(_QWORD *)(v39 + 8);
  v41 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v42 = v41(v38, v40);
  result = sub_21501EA34((uint64_t)v51);
  if ((v42 & 0x8000000000000000) == 0)
  {
    a4 = v37;
    v30 = v36;
    v32 = v35;
    v34 = v50;
    if (v42)
    {
      v43 = 0;
LABEL_23:
      sub_2150437A8(0, v42, v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21501EF2C(0, v42, v43);
      v44 = sub_21502CB8C(v30, v32, v34, 0, v42, v43);
      v46 = v45;
      v48 = v47;
      sub_21501EF2C((uint64_t)v30, v32, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a4 = v8;
      *(_QWORD *)(a4 + 8) = v9;
      *(_QWORD *)(a4 + 16) = v10;
      *(_QWORD *)(a4 + 24) = v44;
      *(_QWORD *)(a4 + 32) = v46;
      *(_BYTE *)(a4 + 40) = v48;
      return result;
    }
LABEL_22:
    v42 = 0;
    v43 = 2;
    goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t static DataFrame.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_21502B0A4(*a1, *a2, (void (*)(uint64_t, _BYTE *))sub_21501EE90, (uint64_t (*)(_BYTE *, _BYTE *))_s11TabularData9AnyColumnV2eeoiySbAC_ACtFZ_0, (void (*)(_BYTE *))sub_21501EA34) & 1;
}

uint64_t sub_21502AF10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  char v5;
  _OWORD v7[2];
  uint64_t v8;
  _BYTE v9[40];
  _BYTE v10[24];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[40];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = a1 + 32;
  for (i = a2 + 32; ; i += 40)
  {
    sub_21504670C(i, (uint64_t)v15, &qword_254DA75E8);
    sub_21504670C(v3, (uint64_t)v10, &qword_254DA75E8);
    sub_21504670C((uint64_t)v15, (uint64_t)&v12, &qword_254DA75E8);
    if (v11)
      break;
    if (*((_QWORD *)&v13 + 1))
      goto LABEL_14;
    sub_215046750((uint64_t)v10, &qword_254DA75E8);
    sub_215046750((uint64_t)v15, &qword_254DA75E8);
LABEL_5:
    v3 += 40;
    if (!--v2)
      return 1;
  }
  sub_21504670C((uint64_t)v10, (uint64_t)v9, &qword_254DA75E8);
  if (*((_QWORD *)&v13 + 1))
  {
    v7[0] = v12;
    v7[1] = v13;
    v8 = v14;
    v5 = MEMORY[0x2199DBC90](v9, v7);
    sub_215046238((uint64_t)v7);
    sub_215046238((uint64_t)v9);
    sub_215046750((uint64_t)v10, &qword_254DA75E8);
    sub_215046750((uint64_t)v15, &qword_254DA75E8);
    if ((v5 & 1) == 0)
      return 0;
    goto LABEL_5;
  }
  sub_215046238((uint64_t)v9);
LABEL_14:
  sub_215046750((uint64_t)v10, &qword_254DA75F0);
  sub_215046750((uint64_t)v15, &qword_254DA75E8);
  return 0;
}

uint64_t sub_21502B088(uint64_t a1, uint64_t a2)
{
  return sub_21502B0A4(a1, a2, (void (*)(uint64_t, _BYTE *))sub_2150452A8, (uint64_t (*)(_BYTE *, _BYTE *))_s11TabularData14AnyColumnSliceV2eeoiySbAC_ACtFZ_0, (void (*)(_BYTE *))sub_2150452E4);
}

uint64_t sub_21502B0A4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *), uint64_t (*a4)(_BYTE *, _BYTE *), void (*a5)(_BYTE *))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v14;
  _BYTE v16[40];
  _BYTE v17[40];

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 == *(_QWORD *)(a2 + 16))
  {
    if (!v5 || a1 == a2)
    {
      v12 = 1;
    }
    else
    {
      v9 = a1 + 32;
      v10 = a2 + 32;
      v11 = v5 - 1;
      do
      {
        a3(v9, v17);
        a3(v10, v16);
        v12 = a4(v17, v16);
        a5(v16);
        a5(v17);
        v14 = v11-- != 0;
        if ((v12 & 1) == 0)
          break;
        v9 += 40;
        v10 += 40;
      }
      while (v14);
    }
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

BOOL sub_21502B174(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t DataFrame.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[40];

  v3 = *v1;
  result = sub_2151305B0();
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_21501EE90(v6, (uint64_t)v7);
      AnyColumn.hash(into:)(a1);
      sub_21501EA34((uint64_t)v7);
      v6 += 40;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t DataFrame.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[40];
  _BYTE v6[72];

  v1 = *v0;
  sub_2151305A4();
  sub_2151305B0();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_21501EE90(v3, (uint64_t)v5);
      AnyColumn.hash(into:)((uint64_t)v6);
      sub_21501EA34((uint64_t)v5);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return sub_2151305EC();
}

uint64_t sub_21502B310()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  sub_2151305A4();
  v2 = *(_QWORD *)(v1 + 16);
  sub_2151305B0();
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      AnyColumn.hash(into:)((uint64_t)v5);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return sub_2151305EC();
}

uint64_t sub_21502B388(uint64_t *a1, uint64_t *a2)
{
  return sub_21502B0A4(*a1, *a2, (void (*)(uint64_t, _BYTE *))sub_21501EE90, (uint64_t (*)(_BYTE *, _BYTE *))_s11TabularData9AnyColumnV2eeoiySbAC_ACtFZ_0, (void (*)(_BYTE *))sub_21501EA34) & 1;
}

unint64_t DataFrame.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  char v54;
  char v55;
  int v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int64_t v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int64x2_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  int64x2_t *v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[4];
  _UNKNOWN **v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122[4];
  _BYTE v123[24];
  uint64_t v124;
  int64x2_t v125;
  unint64_t v126;

  v109 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v107 = *(_QWORD *)(v109 - 8);
  v4 = MEMORY[0x24BDAC7A8](v109);
  v110 = (uint64_t)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v108 = (char *)&v102 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v103 = (char *)&v102 - v8;
  v9 = MEMORY[0x24BEE4AF8];
  result = sub_2150203D0(MEMORY[0x24BEE4AF8]);
  v125.i64[0] = v9;
  v125.i64[1] = v9;
  v126 = result;
  v114 = *(_QWORD *)(a1 + 16);
  if (!v114)
  {
    v101 = result;
    result = swift_bridgeObjectRelease();
    v100 = vdupq_n_s64(v9);
    goto LABEL_175;
  }
  v105 = a2;
  v11 = 0;
  v113 = a1 + 32;
  v104 = MEMORY[0x24BEE4AD8] + 8;
  v106 = xmmword_215135DD0;
  v112 = a1;
  while (v11 < *(_QWORD *)(a1 + 16))
  {
    v16 = (uint64_t *)(v113 + 24 * v11);
    v17 = v16[1];
    v115 = *v16;
    v18 = v16[2];
    v19 = *(_QWORD *)(v18 + 16);
    v117 = v17;
    if (!v19)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
    v20 = v18 + 32;
    swift_bridgeObjectRetain();
    v116 = v18;
    swift_bridgeObjectRetain();
    v21 = v18 + 32;
    v22 = v19;
    while (1)
    {
      sub_21504670C(v21, (uint64_t)v118, qword_253F0D058);
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
      if (!v124)
        break;
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_15;
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
LABEL_10:
      sub_215046750((uint64_t)v123, qword_253F0D058);
      sub_215046750((uint64_t)v118, qword_253F0D058);
      v21 += 32;
      if (!--v22)
      {
        v29 = *(_QWORD *)(v116 + 16);
        if (v29)
        {
          v120 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          sub_215038CE0(0, v29, 0);
          do
          {
            sub_21504670C(v20, (uint64_t)v118, qword_253F0D058);
            sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
            if (v124)
            {
              v30 = swift_dynamicCast();
              if ((v30 & 1) == 0)
                v122[0] = 0;
              v31 = v30 ^ 1;
            }
            else
            {
              sub_215046750((uint64_t)v123, qword_253F0D058);
              v122[0] = 0;
              v31 = 1;
            }
            LOBYTE(v122[1]) = v31;
            sub_215046750((uint64_t)v118, qword_253F0D058);
            v32 = v122[0];
            v33 = v122[1];
            v34 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_215038CE0(0, *(_QWORD *)(v34 + 16) + 1, 1);
              v34 = v120;
            }
            v36 = *(_QWORD *)(v34 + 16);
            v35 = *(_QWORD *)(v34 + 24);
            if (v36 >= v35 >> 1)
            {
              sub_215038CE0((char *)(v35 > 1), v36 + 1, 1);
              v34 = v120;
            }
            *(_QWORD *)(v34 + 16) = v36 + 1;
            v37 = v34 + 16 * v36;
            *(_QWORD *)(v37 + 32) = v32;
            *(_BYTE *)(v37 + 40) = v33;
            v20 += 32;
            --v29;
          }
          while (v29);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_57:
          sub_215043454(v34);
          v13 = v39;
          swift_bridgeObjectRelease();
          v40 = (uint64_t *)&unk_253F0D450;
LABEL_58:
          v15 = __swift_instantiateConcreteTypeFromMangledName(v40);
          v119 = &off_24D2A4440;
          v118[0] = v115;
          v41 = v117;
          goto LABEL_5;
        }
LABEL_47:
        swift_bridgeObjectRelease();
        v34 = MEMORY[0x24BEE4AF8];
        goto LABEL_57;
      }
    }
    sub_215046750((uint64_t)v123, qword_253F0D058);
LABEL_15:
    sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
    sub_21504670C((uint64_t)v123, (uint64_t)v122, qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D040);
    if (swift_dynamicCast())
      goto LABEL_10;
    sub_215046750((uint64_t)v123, qword_253F0D058);
    sub_215046750((uint64_t)v118, qword_253F0D058);
    swift_bridgeObjectRetain();
    v23 = v20;
    v24 = v19;
    while (1)
    {
      sub_21504670C(v23, (uint64_t)v118, qword_253F0D058);
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
      if (!v124)
        break;
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_23;
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
LABEL_18:
      sub_215046750((uint64_t)v123, qword_253F0D058);
      sub_215046750((uint64_t)v118, qword_253F0D058);
      v23 += 32;
      if (!--v24)
      {
        v42 = v116;
        swift_bridgeObjectRelease();
        v43 = *(_QWORD *)(v42 + 16);
        if (v43)
        {
          v120 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          sub_215038CC4(0, v43, 0);
          do
          {
            sub_21504670C(v20, (uint64_t)v118, qword_253F0D058);
            sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
            if (v124)
            {
              v44 = swift_dynamicCast();
              if ((v44 & 1) == 0)
                v122[0] = 0;
              v45 = v44 ^ 1;
            }
            else
            {
              sub_215046750((uint64_t)v123, qword_253F0D058);
              v122[0] = 0;
              v45 = 1;
            }
            LOBYTE(v122[1]) = v45;
            sub_215046750((uint64_t)v118, qword_253F0D058);
            v46 = v122[0];
            v47 = v122[1];
            v48 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_215038CC4(0, *(_QWORD *)(v48 + 16) + 1, 1);
              v48 = v120;
            }
            v50 = *(_QWORD *)(v48 + 16);
            v49 = *(_QWORD *)(v48 + 24);
            if (v50 >= v49 >> 1)
            {
              sub_215038CC4((char *)(v49 > 1), v50 + 1, 1);
              v48 = v120;
            }
            *(_QWORD *)(v48 + 16) = v50 + 1;
            v51 = v48 + 16 * v50;
            *(_QWORD *)(v51 + 32) = v46;
            *(_BYTE *)(v51 + 40) = v47;
            v20 += 32;
            --v43;
          }
          while (v43);
          swift_bridgeObjectRelease();
          v41 = v117;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v48 = MEMORY[0x24BEE4AF8];
          v41 = v117;
        }
        sub_215043D68(v48);
        v13 = v12;
        swift_bridgeObjectRelease();
        v14 = (uint64_t *)&unk_253F0D448;
        goto LABEL_4;
      }
    }
    sub_215046750((uint64_t)v123, qword_253F0D058);
LABEL_23:
    sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
    sub_21504670C((uint64_t)v123, (uint64_t)v122, qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D030);
    if (swift_dynamicCast())
      goto LABEL_18;
    sub_215046750((uint64_t)v123, qword_253F0D058);
    sub_215046750((uint64_t)v118, qword_253F0D058);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v25 = v20;
    v26 = v19;
    while (1)
    {
      sub_21504670C(v25, (uint64_t)v118, qword_253F0D058);
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
      if (!v124)
        break;
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_31;
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
LABEL_26:
      sub_215046750((uint64_t)v123, qword_253F0D058);
      sub_215046750((uint64_t)v118, qword_253F0D058);
      v25 += 32;
      if (!--v26)
      {
        v52 = v116;
        swift_bridgeObjectRelease();
        v53 = *(_QWORD *)(v52 + 16);
        if (v53)
        {
          v122[0] = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          sub_215038CA8(0, v53, 0);
          do
          {
            sub_21504670C(v20, (uint64_t)v118, qword_253F0D058);
            sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
            if (v124)
            {
              v54 = swift_dynamicCast();
              if ((v54 & 1) == 0)
                LODWORD(v120) = 0;
              v55 = v54 ^ 1;
            }
            else
            {
              sub_215046750((uint64_t)v123, qword_253F0D058);
              LODWORD(v120) = 0;
              v55 = 1;
            }
            BYTE4(v120) = v55;
            sub_215046750((uint64_t)v118, qword_253F0D058);
            v56 = v120;
            v57 = BYTE4(v120);
            v58 = v122[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_215038CA8(0, *(_QWORD *)(v58 + 16) + 1, 1);
              v58 = v122[0];
            }
            v60 = *(_QWORD *)(v58 + 16);
            v59 = *(_QWORD *)(v58 + 24);
            if (v60 >= v59 >> 1)
            {
              sub_215038CA8((char *)(v59 > 1), v60 + 1, 1);
              v58 = v122[0];
            }
            *(_QWORD *)(v58 + 16) = v60 + 1;
            v61 = v58 + 8 * v60;
            *(_DWORD *)(v61 + 32) = v56;
            *(_BYTE *)(v61 + 36) = v57;
            v20 += 32;
            --v53;
          }
          while (v53);
          swift_bridgeObjectRelease();
          v41 = v117;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v58 = MEMORY[0x24BEE4AF8];
          v41 = v117;
        }
        sub_2150442E4(v58);
        v13 = v67;
        swift_bridgeObjectRelease();
        v14 = (uint64_t *)&unk_254DA7500;
        goto LABEL_4;
      }
    }
    sub_215046750((uint64_t)v123, qword_253F0D058);
LABEL_31:
    sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
    sub_21504670C((uint64_t)v123, (uint64_t)v122, qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D038);
    if (swift_dynamicCast())
      goto LABEL_26;
    sub_215046750((uint64_t)v123, qword_253F0D058);
    sub_215046750((uint64_t)v118, qword_253F0D058);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v27 = v20;
    v28 = v19;
    while (1)
    {
      sub_21504670C(v27, (uint64_t)v118, qword_253F0D058);
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
      if (!v124)
        break;
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_54;
      v38 = v122[1];
      swift_bridgeObjectRelease();
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
      if (!v38)
        goto LABEL_55;
LABEL_49:
      sub_215046750((uint64_t)v123, qword_253F0D058);
      sub_215046750((uint64_t)v118, qword_253F0D058);
      v27 += 32;
      if (!--v28)
      {
        v62 = v116;
        swift_bridgeObjectRelease();
        v63 = *(_QWORD *)(v62 + 16);
        if (v63)
        {
          v120 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          sub_215038C8C(0, v63, 0);
          while (1)
          {
            sub_21504670C(v20, (uint64_t)v118, qword_253F0D058);
            sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
            if (v124)
            {
              if ((swift_dynamicCast() & 1) != 0)
                goto LABEL_93;
            }
            else
            {
              sub_215046750((uint64_t)v123, qword_253F0D058);
            }
            *(_OWORD *)v122 = 0uLL;
LABEL_93:
            sub_215046750((uint64_t)v118, qword_253F0D058);
            v111 = *(_OWORD *)v122;
            v64 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_215038C8C(0, *(_QWORD *)(v64 + 16) + 1, 1);
              v64 = v120;
            }
            v66 = *(_QWORD *)(v64 + 16);
            v65 = *(_QWORD *)(v64 + 24);
            if (v66 >= v65 >> 1)
            {
              sub_215038C8C((_QWORD *)(v65 > 1), v66 + 1, 1);
              v64 = v120;
            }
            *(_QWORD *)(v64 + 16) = v66 + 1;
            *(_OWORD *)(v64 + 16 * v66 + 32) = v111;
            v20 += 32;
            if (!--v63)
            {
              swift_bridgeObjectRelease();
              v41 = v117;
              swift_bridgeObjectRelease();
              goto LABEL_133;
            }
          }
        }
        swift_bridgeObjectRelease();
        v64 = MEMORY[0x24BEE4AF8];
        v41 = v117;
LABEL_133:
        v13 = sub_215043B48(v64);
        swift_bridgeObjectRelease();
        v14 = (uint64_t *)&unk_253F0D440;
        goto LABEL_4;
      }
    }
    sub_215046750((uint64_t)v123, qword_253F0D058);
LABEL_54:
    sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
LABEL_55:
    sub_21504670C((uint64_t)v123, (uint64_t)v122, qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D020);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    sub_215046750((uint64_t)v123, qword_253F0D058);
    sub_215046750((uint64_t)v118, qword_253F0D058);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v68 = v20;
    v69 = v19;
    while (2)
    {
      sub_21504670C(v68, (uint64_t)v118, qword_253F0D058);
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
      if (!v124)
      {
        sub_215046750((uint64_t)v123, qword_253F0D058);
        break;
      }
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
LABEL_103:
        sub_215046750((uint64_t)v123, qword_253F0D058);
        sub_215046750((uint64_t)v118, qword_253F0D058);
        v68 += 32;
        if (--v69)
          continue;
        v73 = v116;
        swift_bridgeObjectRelease();
        v74 = *(_QWORD *)(v73 + 16);
        if (!v74)
        {
          swift_bridgeObjectRelease();
          v76 = MEMORY[0x24BEE4AF8];
          v41 = v117;
LABEL_148:
          sub_215044030(v76);
          v13 = v84;
          swift_bridgeObjectRelease();
          v14 = (uint64_t *)&unk_253F0D1A8;
          goto LABEL_4;
        }
        v122[0] = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_215038C70(0, v74, 0);
        while (2)
        {
          sub_21504670C(v20, (uint64_t)v118, qword_253F0D058);
          sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
          if (v124)
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
LABEL_126:
              sub_215046750((uint64_t)v118, qword_253F0D058);
              v75 = v120;
              v76 = v122[0];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_215038C70(0, *(_QWORD *)(v76 + 16) + 1, 1);
                v76 = v122[0];
              }
              v78 = *(_QWORD *)(v76 + 16);
              v77 = *(_QWORD *)(v76 + 24);
              if (v78 >= v77 >> 1)
              {
                sub_215038C70((char *)(v77 > 1), v78 + 1, 1);
                v76 = v122[0];
              }
              *(_QWORD *)(v76 + 16) = v78 + 1;
              *(_BYTE *)(v76 + v78 + 32) = v75;
              v20 += 32;
              if (!--v74)
              {
                swift_bridgeObjectRelease();
                v41 = v117;
                swift_bridgeObjectRelease();
                goto LABEL_148;
              }
              continue;
            }
          }
          else
          {
            sub_215046750((uint64_t)v123, qword_253F0D058);
          }
          break;
        }
        LOBYTE(v120) = 2;
        goto LABEL_126;
      }
      break;
    }
    sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
    sub_21504670C((uint64_t)v123, (uint64_t)v122, qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA74E0);
    if (swift_dynamicCast())
      goto LABEL_103;
    sub_215046750((uint64_t)v123, qword_253F0D058);
    sub_215046750((uint64_t)v118, qword_253F0D058);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v70 = v20;
    v71 = v19;
    while (2)
    {
      sub_21504670C(v70, (uint64_t)v118, qword_253F0D058);
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
      if (v124)
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v72 = v122[1];
          sub_21501F0D8(v122[0], v122[1]);
          sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
          if (v72 >> 60 != 15)
            goto LABEL_114;
          goto LABEL_112;
        }
      }
      else
      {
        sub_215046750((uint64_t)v123, qword_253F0D058);
      }
      sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
LABEL_112:
      sub_21504670C((uint64_t)v123, (uint64_t)v122, qword_253F0D058);
      __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA74E8);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_215046750((uint64_t)v123, qword_253F0D058);
        sub_215046750((uint64_t)v118, qword_253F0D058);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v85 = v20;
        v86 = (uint64_t)v103;
        do
        {
          sub_21504670C(v85, (uint64_t)v118, qword_253F0D058);
          sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
          if (v124)
          {
            v88 = sub_21512F740();
            v89 = swift_dynamicCast();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v86, v89 ^ 1u, 1, v88);
          }
          else
          {
            sub_215046750((uint64_t)v123, qword_253F0D058);
            v88 = sub_21512F740();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v86, 1, 1, v88);
          }
          sub_21512F740();
          v90 = *(_QWORD *)(v88 - 8);
          v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v86, 1, v88);
          sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
          if (v91)
          {
            sub_21504670C((uint64_t)v123, (uint64_t)v122, qword_253F0D058);
            __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
            v92 = (uint64_t)v108;
            if ((swift_dynamicCast() & 1) == 0)
            {
              sub_215046750((uint64_t)v123, qword_253F0D058);
              sub_215046750(v86, qword_253F0D218);
              sub_215046750((uint64_t)v118, qword_253F0D058);
              v93 = v116;
              swift_bridgeObjectRelease();
              v13 = sub_215045C80(v93);
              swift_bridgeObjectRelease();
              v40 = (uint64_t *)&unk_254DA74F0;
              goto LABEL_58;
            }
            sub_215046750(v92, qword_253F0D218);
          }
          sub_215046750((uint64_t)v123, qword_253F0D058);
          sub_215046750(v86, qword_253F0D218);
          sub_215046750((uint64_t)v118, qword_253F0D058);
          v85 += 32;
          --v19;
          v87 = v116;
        }
        while (v19);
        swift_bridgeObjectRelease();
        v94 = *(_QWORD *)(v87 + 16);
        if (v94)
        {
          v122[0] = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          sub_215038C38(0, v94, 0);
          do
          {
            sub_21504670C(v20, (uint64_t)v118, qword_253F0D058);
            sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
            if (v124)
            {
              v95 = v110;
              v96 = swift_dynamicCast();
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v90 + 56))(v95, v96 ^ 1u, 1, v88);
            }
            else
            {
              sub_215046750((uint64_t)v123, qword_253F0D058);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v110, 1, 1, v88);
            }
            sub_215046750((uint64_t)v118, qword_253F0D058);
            v97 = v122[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_215038C38(0, *(_QWORD *)(v97 + 16) + 1, 1);
              v97 = v122[0];
            }
            v99 = *(_QWORD *)(v97 + 16);
            v98 = *(_QWORD *)(v97 + 24);
            if (v99 >= v98 >> 1)
            {
              sub_215038C38(v98 > 1, v99 + 1, 1);
              v97 = v122[0];
            }
            *(_QWORD *)(v97 + 16) = v99 + 1;
            sub_21504626C(v110, v97+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v99, qword_253F0D218);
            v20 += 32;
            --v94;
          }
          while (v94);
          swift_bridgeObjectRelease();
          v41 = v117;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v97 = MEMORY[0x24BEE4AF8];
          v41 = v117;
        }
        v13 = sub_215044588(v97);
        swift_bridgeObjectRelease();
        v14 = (uint64_t *)&unk_253F0D1A0;
        goto LABEL_4;
      }
      sub_215045ED8(v120, v121);
LABEL_114:
      sub_215046750((uint64_t)v123, qword_253F0D058);
      sub_215046750((uint64_t)v118, qword_253F0D058);
      v70 += 32;
      if (--v71)
        continue;
      break;
    }
    v79 = v116;
    swift_bridgeObjectRelease();
    v80 = *(_QWORD *)(v79 + 16);
    if (v80)
    {
      v120 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_215038C54(0, v80, 0);
      while (1)
      {
        sub_21504670C(v20, (uint64_t)v118, qword_253F0D058);
        sub_21504670C((uint64_t)v118, (uint64_t)v123, qword_253F0D058);
        if (v124)
        {
          if ((swift_dynamicCast() & 1) != 0)
            goto LABEL_141;
        }
        else
        {
          sub_215046750((uint64_t)v123, qword_253F0D058);
        }
        *(_OWORD *)v122 = v106;
LABEL_141:
        sub_215046750((uint64_t)v118, qword_253F0D058);
        v111 = *(_OWORD *)v122;
        v81 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_215038C54(0, *(_QWORD *)(v81 + 16) + 1, 1);
          v81 = v120;
        }
        v83 = *(_QWORD *)(v81 + 16);
        v82 = *(_QWORD *)(v81 + 24);
        if (v83 >= v82 >> 1)
        {
          sub_215038C54((_QWORD *)(v82 > 1), v83 + 1, 1);
          v81 = v120;
        }
        *(_QWORD *)(v81 + 16) = v83 + 1;
        *(_OWORD *)(v81 + 16 * v83 + 32) = v111;
        v20 += 32;
        if (!--v80)
        {
          swift_bridgeObjectRelease();
          v41 = v117;
          swift_bridgeObjectRelease();
          goto LABEL_170;
        }
      }
    }
    swift_bridgeObjectRelease();
    v81 = MEMORY[0x24BEE4AF8];
    v41 = v117;
LABEL_170:
    v13 = sub_21504490C(v81);
    swift_bridgeObjectRelease();
    v14 = (uint64_t *)&unk_254DA74F8;
LABEL_4:
    v15 = __swift_instantiateConcreteTypeFromMangledName(v14);
    v119 = &off_24D2A4440;
    v118[0] = v115;
LABEL_5:
    v118[1] = v41;
    v118[2] = v13;
    v118[3] = v15;
    swift_bridgeObjectRetain();
    swift_retain();
    DataFrame.append(column:)((uint64_t)v118);
    sub_21501EA34((uint64_t)v118);
    swift_release();
    result = swift_bridgeObjectRelease();
    a1 = v112;
    if (++v11 == v114)
    {
      result = swift_bridgeObjectRelease();
      v100 = v125;
      v101 = v126;
      a2 = v105;
LABEL_175:
      *a2 = v100;
      a2[1].i64[0] = v101;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_21502C94C(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = result;
  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(unsigned __int8 *)(v2 + 16);
  if (*(_BYTE *)(v2 + 16))
  {
    if (v7 == 1)
    {
      if (*(_QWORD *)(v5 + 16))
        goto LABEL_4;
    }
    else
    {
      if (result != a2)
        goto LABEL_19;
      __break(1u);
    }
    if (result == a2)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    goto LABEL_12;
  }
LABEL_4:
  result = sub_21508C520(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  if ((v9 & 1) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v4 == a2 || v8 > v4)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7)
  {
LABEL_12:
    if (*(_QWORD *)(v5 + 16))
      goto LABEL_13;
LABEL_19:
    v14 = 0;
    v15 = 0;
    return sub_215075CDC(v14, v15, v4, a2);
  }
LABEL_13:
  result = sub_21508C520(v5, v6, v7);
  if ((v11 & 1) == 0)
  {
    if (v10 != v4)
    {
      if (v7)
      {
        v14 = *(_QWORD *)(v5 + 16);
LABEL_25:
        v15 = v14;
        return sub_215075CDC(v14, v15, v4, a2);
      }
LABEL_24:
      v14 = 1;
      goto LABEL_25;
    }
    if (!v7)
    {
      v13 = 0;
      if (v5 <= a2)
        return sub_21502D5B0(v5, a2, v13);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v12 = *(_QWORD *)(v5 + 16);
    if (v12)
    {
      v13 = v12 - 1;
      v5 = *(_QWORD *)(v5 + 16 * (v12 - 1) + 32);
      if (v5 <= a2)
        return sub_21502D5B0(v5, a2, v13);
      goto LABEL_23;
    }
    goto LABEL_28;
  }
LABEL_31:
  __break(1u);
  return result;
}

int64_t sub_21502CA84@<X0>(int64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  char v10;
  uint64_t v11;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (a4)
  {
    if (a4 == 1)
      v9 = *(_QWORD *)(a2 + 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  result = sub_21511DD30(0, result, v9, a2, a3, a4);
  if ((v10 & 1) != 0)
  {
    if (a4 == 2)
    {
      result = 0;
      v11 = 0;
      goto LABEL_24;
    }
    if (a4 != 1)
    {
      result = 1;
      v11 = 1;
      goto LABEL_24;
    }
    result = *(_QWORD *)(a2 + 16);
    goto LABEL_16;
  }
  if (!a4)
    goto LABEL_19;
  if (a4 != 2)
  {
LABEL_16:
    v11 = *(_QWORD *)(a2 + 16);
    if (v11 >= result)
    {
      if (result < 0)
      {
LABEL_18:
        do
        {
          __break(1u);
LABEL_19:
          if (result > 1)
            goto LABEL_27;
          v11 = 1;
        }
        while (result < 0);
      }
LABEL_24:
      *(_QWORD *)a5 = result;
      *(_QWORD *)(a5 + 8) = v11;
      *(_QWORD *)(a5 + 16) = a2;
      *(_QWORD *)(a5 + 24) = a3;
      *(_BYTE *)(a5 + 32) = a4;
      return result;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (result <= 0)
  {
    v11 = 0;
    if (result < 0)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_21502CB8C(char *result, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int i;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v37;
  uint64_t v38;
  char *v39;

  v7 = 0;
  v8 = 0;
  v31 = a4 + 32;
  v9 = result + 40;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v39 = result;
  v34 = result + 40;
  while (1)
  {
    if (a6)
    {
      if (a6 == 1)
      {
        v11 = *(_QWORD *)(a4 + 16);
        if (v8 != v11)
        {
          if (v8 >= v11)
            goto LABEL_66;
          v12 = (uint64_t *)(v31 + 16 * v8);
          v14 = *v12;
          v13 = v12[1];
          goto LABEL_11;
        }
        sub_21501EF2C(a4, a5, 1);
      }
      else
      {
        v10 = (char *)MEMORY[0x24BEE4AF8];
      }
LABEL_57:
      sub_21502D3C0((uint64_t)v10, 0, 1);
      return v10;
    }
    if (v8 == 1)
      goto LABEL_57;
    if (v8)
      goto LABEL_67;
    v14 = a4;
    v13 = a5;
LABEL_11:
    v15 = (uint64_t *)&v9[16 * v7];
    v16 = v7;
    v37 = v8 + 1;
    v17 = a3;
    if (!a3)
    {
      while (v16 < 1)
      {
        v18 = a2;
        if (v16)
          goto LABEL_60;
LABEL_18:
        if (v14 < v18)
          break;
        ++v16;
        v15 += 2;
        v17 = a3;
        if (a3)
          goto LABEL_12;
      }
      goto LABEL_21;
    }
LABEL_12:
    if (v17 != 1)
      goto LABEL_22;
    if (v16 < *((_QWORD *)result + 2))
      break;
LABEL_21:
    v7 = v16;
LABEL_22:
    if (v14 <= (uint64_t)result)
      v19 = (uint64_t)result;
    else
      v19 = v14;
    v38 = v19;
    v20 = (uint64_t *)&v9[16 * v7];
    v32 = v7;
    v33 = v10;
    for (i = a3; !a3; i = a3)
    {
      v22 = result;
      if (v7)
        goto LABEL_2;
LABEL_31:
      if ((uint64_t)v22 >= v13)
        goto LABEL_2;
      if (a3)
      {
        if (v7 >= *((_QWORD *)result + 2))
          goto LABEL_61;
        if (v14 <= *(v20 - 1))
          v23 = *(v20 - 1);
        else
          v23 = v14;
        v24 = *v20;
      }
      else
      {
        v23 = v38;
        v24 = a2;
        if (v7)
          goto LABEL_64;
      }
      if (v13 >= v24)
        v25 = v24;
      else
        v25 = v13;
      if (v25 < v23)
      {
        __break(1u);
        goto LABEL_59;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = sub_21502DABC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v27 = *((_QWORD *)v10 + 2);
      v26 = *((_QWORD *)v10 + 3);
      if (v27 >= v26 >> 1)
        v10 = sub_21502DABC((char *)(v26 > 1), v27 + 1, 1, v10);
      *((_QWORD *)v10 + 2) = v27 + 1;
      v28 = &v10[16 * v27];
      *((_QWORD *)v28 + 4) = v23;
      *((_QWORD *)v28 + 5) = v25;
      if (a3)
      {
        result = v39;
        if (v7 >= *((_QWORD *)v39 + 2))
          goto LABEL_62;
        v29 = *v20;
      }
      else
      {
        result = v39;
        v29 = a2;
        if (v7)
          goto LABEL_65;
      }
      if (v29 >= v13)
        goto LABEL_2;
      ++v7;
      v20 += 2;
    }
    if (i == 1)
    {
      if ((int64_t)v7 < *((_QWORD *)result + 2))
      {
        if ((v7 & 0x8000000000000000) == 0)
        {
          v22 = (char *)*(v20 - 1);
          goto LABEL_31;
        }
        goto LABEL_63;
      }
LABEL_2:
      v8 = v37;
      v9 = v34;
    }
    else
    {
      v10 = v33;
      v9 = v34;
      v8 = v37;
      v7 = v32;
    }
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = *v15;
    goto LABEL_18;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

void sub_21502CE84(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = a1 + 7;
  if (__OFADD__(a1, 7))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v5 = a1 + 14;
  if (v2 >= 0)
    v5 = a1 + 7;
  v6 = v5 >> 3;
  v8 = v6 - 1;
  v7 = v6 < 1;
  v9 = v6 + 62;
  if (v7)
    v10 = v9;
  else
    v10 = v8;
  v11 = *(_QWORD *)(*(_QWORD *)(sub_21512F740() - 8) + 72);
  v12 = v11 * a1;
  if ((unsigned __int128)(v11 * (__int128)a1) >> 64 != (v11 * a1) >> 63)
    goto LABEL_14;
  v13 = v10 & 0xFFFFFFFFFFFFFFC0;
  v14 = (v10 & 0xFFFFFFFFFFFFFFC0) + 128;
  v15 = v14 + v12;
  if (__OFADD__(v14, v12))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v16 = (_QWORD *)swift_slowAlloc();
  v16[1] = 0;
  v16[2] = 0;
  *v16 = a1;
  if (v2 < -1015)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v17 = v16;
  if (v13 != -64)
    bzero(v16 + 8, v13 + 64);
  *a2 = v17;
  a2[1] = (char *)v17 + v15;
}

void sub_21502CF50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v2 = a1 + 7;
  if (__OFADD__(a1, 7))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = a1 + 14;
  if (v2 >= 0)
    v5 = a1 + 7;
  v6 = v5 >> 3;
  v8 = v6 - 1;
  v7 = v6 < 1;
  v9 = v6 + 62;
  if (!v7)
    v9 = v8;
  if ((unint64_t)(a1 - 0x800000000000000) >> 60 != 15)
    goto LABEL_13;
  v10 = v9 & 0xFFFFFFFFFFFFFFC0;
  v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 128;
  v12 = v11 + 16 * a1;
  if (__OFADD__(v11, 16 * a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = (_QWORD *)swift_slowAlloc();
  v13[1] = 0;
  v13[2] = 0;
  *v13 = a1;
  if (v2 < -1015)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v14 = v13;
  if (v10 != -64)
    bzero(v13 + 8, v10 + 64);
  *a2 = v14;
  a2[1] = (char *)v14 + v12;
}

void sub_21502D010(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v2 = a1 + 7;
  if (__OFADD__(a1, 7))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = a1 + 14;
  if (v2 >= 0)
    v5 = a1 + 7;
  v6 = v5 >> 3;
  v8 = v6 - 1;
  v7 = v6 < 1;
  v9 = v6 + 62;
  if (!v7)
    v9 = v8;
  if ((unint64_t)(a1 - 0x2000000000000000) >> 62 != 3)
    goto LABEL_13;
  v10 = v9 & 0xFFFFFFFFFFFFFFC0;
  v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 128;
  v12 = v11 + 4 * a1;
  if (__OFADD__(v11, 4 * a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = (_QWORD *)swift_slowAlloc();
  v13[1] = 0;
  v13[2] = 0;
  *v13 = a1;
  if (v2 < -1015)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v14 = v13;
  if (v10 != -64)
    bzero(v13 + 8, v10 + 64);
  *a2 = v14;
  a2[1] = (char *)v14 + v12;
}

void sub_21502D0D4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v2 = a1 + 7;
  if (__OFADD__(a1, 7))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = a1 + 14;
  if (v2 >= 0)
    v5 = a1 + 7;
  v6 = v5 >> 3;
  v8 = v6 - 1;
  v7 = v6 < 1;
  v9 = v6 + 62;
  if (!v7)
    v9 = v8;
  v10 = v9 & 0xFFFFFFFFFFFFFFC0;
  v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 128;
  v12 = v11 + a1;
  if (__OFADD__(v11, a1))
    goto LABEL_12;
  v13 = (_QWORD *)swift_slowAlloc();
  v13[1] = 0;
  v13[2] = 0;
  *v13 = a1;
  if (v2 < -1015)
  {
LABEL_13:
    __break(1u);
    return;
  }
  v14 = v13;
  if (v10 != -64)
    bzero(v13 + 8, v10 + 64);
  *a2 = v14;
  a2[1] = (char *)v14 + v12;
}

void sub_21502D17C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v2 = a1 + 7;
  if (__OFADD__(a1, 7))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = a1 + 14;
  if (v2 >= 0)
    v5 = a1 + 7;
  v6 = v5 >> 3;
  v8 = v6 - 1;
  v7 = v6 < 1;
  v9 = v6 + 62;
  if (!v7)
    v9 = v8;
  v10 = 24 * a1;
  if ((unsigned __int128)(a1 * (__int128)24) >> 64 != (24 * a1) >> 63)
    goto LABEL_13;
  v11 = v9 & 0xFFFFFFFFFFFFFFC0;
  v12 = (v9 & 0xFFFFFFFFFFFFFFC0) + 128;
  v13 = v12 + v10;
  if (__OFADD__(v12, v10))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = (_QWORD *)swift_slowAlloc();
  v14[1] = 0;
  v14[2] = 0;
  *v14 = a1;
  if (v2 < -1015)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v15 = v14;
  if (v11 != -64)
    bzero(v14 + 8, v11 + 64);
  *a2 = v15;
  a2[1] = (char *)v15 + v13;
}

void sub_21502D240(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v2 = a1 + 7;
  if (__OFADD__(a1, 7))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = a1 + 14;
  if (v2 >= 0)
    v5 = a1 + 7;
  v6 = v5 >> 3;
  v8 = v6 - 1;
  v7 = v6 < 1;
  v9 = v6 + 62;
  if (!v7)
    v9 = v8;
  if ((unint64_t)(a1 - 0x1000000000000000) >> 61 != 7)
    goto LABEL_13;
  v10 = v9 & 0xFFFFFFFFFFFFFFC0;
  v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 128;
  v12 = v11 + 8 * a1;
  if (__OFADD__(v11, 8 * a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = (_QWORD *)swift_slowAlloc();
  v13[1] = 0;
  v13[2] = 0;
  *v13 = a1;
  if (v2 < -1015)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v14 = v13;
  if (v10 != -64)
    bzero(v13 + 8, v10 + 64);
  *a2 = v14;
  a2[1] = (char *)v14 + v12;
}

void sub_21502D300(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v2 = a1 + 7;
  if (__OFADD__(a1, 7))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = a1 + 14;
  if (v2 >= 0)
    v5 = a1 + 7;
  v6 = v5 >> 3;
  v8 = v6 - 1;
  v7 = v6 < 1;
  v9 = v6 + 62;
  if (!v7)
    v9 = v8;
  if ((unint64_t)(a1 - 0x400000000000000) >> 59 != 31)
    goto LABEL_13;
  v10 = v9 & 0xFFFFFFFFFFFFFFC0;
  v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 128;
  v12 = v11 + 32 * a1;
  if (__OFADD__(v11, 32 * a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = (_QWORD *)swift_slowAlloc();
  v13[1] = 0;
  v13[2] = 0;
  *v13 = a1;
  if (v2 < -1015)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v14 = v13;
  if (v10 != -64)
    bzero(v13 + 8, v10 + 64);
  *a2 = v14;
  a2[1] = (char *)v14 + v12;
}

uint64_t sub_21502D3C0(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  sub_21502CA84(1, a1, a2, a3, (uint64_t)&v22);
  v6 = 0;
  v7 = v24;
  v8 = v25;
  v9 = v26;
  if (v23 <= v22)
    v10 = v22;
  else
    v10 = v23;
  v11 = (uint64_t *)(a1 + 40);
  v12 = (uint64_t *)(v24 + 16 * v22 + 40);
  v13 = v22 - v10;
  while (1)
  {
    if (a3)
    {
      if (a3 != 1)
        goto LABEL_27;
      v14 = *(_QWORD *)(a1 + 16);
      if (v6 == v14)
        goto LABEL_27;
      if (v6 >= v14)
        goto LABEL_30;
      v15 = *(v11 - 1);
      v16 = *v11;
    }
    else
    {
      if (v6 == 1)
        goto LABEL_27;
      if (v6)
        goto LABEL_34;
      v15 = a1;
      v16 = a2;
    }
    if (!(v22 - v23 + v6))
      goto LABEL_27;
    if (!(v13 + v6))
      break;
    v17 = v22 + v6;
    if (v26)
    {
      if (v26 != 1)
        goto LABEL_35;
      if ((v17 & 0x8000000000000000) != 0)
        goto LABEL_32;
      v18 = *(_QWORD *)(v24 + 16);
      if (v17 >= v18)
        goto LABEL_33;
      v19 = *(v12 - 1);
      v20 = *v12;
    }
    else
    {
      if (v17)
        goto LABEL_31;
      v18 = 1;
      v19 = v24;
      v20 = v25;
    }
    if (v17 >= v18)
      goto LABEL_29;
    if (v16 < v19 && v15 != v16)
    {
      v11 += 2;
      v12 += 2;
      ++v6;
      if (v19 != v20)
        continue;
    }
    __break(1u);
LABEL_27:
    sub_2150437A8(a1, a2, a3);
    sub_2150437A8(a1, a2, a3);
    sub_21501EF2C(a1, a2, a3);
    return sub_21501EF2C(v7, v8, v9);
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t sub_21502D5B0(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = result;
  v7 = *(unsigned __int8 *)(v3 + 16);
  if (!*(_BYTE *)(v3 + 16))
  {
    if (!a3)
    {
LABEL_9:
      *(_QWORD *)v3 = v6;
      *(_QWORD *)(v3 + 8) = a2;
      *(_BYTE *)(v3 + 16) = v7;
      return result;
    }
    __break(1u);
  }
  if (v7 == 1)
  {
    v8 = *(_QWORD *)v3;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if ((a3 & 0x8000000000000000) == 0)
        goto LABEL_7;
    }
    else
    {
      result = (uint64_t)sub_21501E510(v8);
      v8 = result;
      if ((a3 & 0x8000000000000000) == 0)
      {
LABEL_7:
        if (*(_QWORD *)(v8 + 16) > a3)
        {
          v9 = v8 + 16 * a3;
          *(_QWORD *)(v9 + 32) = v6;
          *(_QWORD *)(v9 + 40) = a2;
          v6 = v8;
          a2 = 0;
          goto LABEL_9;
        }
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  result = sub_2151302EC();
  __break(1u);
  return result;
}

unint64_t sub_21502D6A0(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = result;
  v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v11 > *(_QWORD *)(v6 + 24) >> 1)
  {
    if (v7 <= v11)
      v14 = v7 + v10;
    else
      v14 = v7;
    result = (unint64_t)sub_21502DABC((char *)result, v14, 1, (char *)v6);
    v6 = result;
  }
  v15 = (_QWORD *)(v6 + 32 + 16 * v8);
  if (!v10)
    goto LABEL_19;
  v16 = *(_QWORD *)(v6 + 16);
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_25;
  result = (unint64_t)(v15 + 2);
  v19 = (_QWORD *)(v6 + 32 + 16 * a2);
  if (v15 + 2 != v19 || result >= (unint64_t)&v19[2 * v18])
    result = (unint64_t)memmove((void *)result, v19, 16 * v18);
  v20 = *(_QWORD *)(v6 + 16);
  v17 = __OFADD__(v20, v10);
  v21 = v20 + v10;
  if (!v17)
  {
    *(_QWORD *)(v6 + 16) = v21;
LABEL_19:
    *v15 = a3;
    v15[1] = a4;
    *v4 = v6;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_21502D7B8(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t *v6;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v8 = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v10 = result;
  v11 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = 2 - v11;
  if (__OFSUB__(2, v11))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v13 > *(_QWORD *)(v8 + 24) >> 1)
  {
    if (v9 <= v13)
      v17 = v9 + v12;
    else
      v17 = v9;
    result = (unint64_t)sub_21502DABC((char *)result, v17, 1, (char *)v8);
    v8 = result;
  }
  v18 = (_QWORD *)(v8 + 32 + 16 * v10);
  if (!v12)
    goto LABEL_19;
  v19 = *(_QWORD *)(v8 + 16);
  v20 = __OFSUB__(v19, a2);
  v21 = v19 - a2;
  if (v20)
    goto LABEL_25;
  result = (unint64_t)(v18 + 4);
  v22 = (_QWORD *)(v8 + 32 + 16 * a2);
  if (v18 + 4 != v22 || result >= (unint64_t)&v22[2 * v21])
    result = (unint64_t)memmove((void *)result, v22, 16 * v21);
  v23 = *(_QWORD *)(v8 + 16);
  v20 = __OFADD__(v23, v12);
  v24 = v23 + v12;
  if (!v20)
  {
    *(_QWORD *)(v8 + 16) = v24;
LABEL_19:
    *v18 = a3;
    v18[1] = a4;
    v18[2] = a5;
    v18[3] = a6;
    *v6 = v8;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_21502D8E8(unint64_t result, int64_t a2, uint64_t a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_21502E130(isUniquelyReferenced_nonNull_native, v13, 1, v5, &qword_253F0D458);
    *v3 = v5;
  }
  v14 = (uint64_t)&v5[40 * v7 + 32];
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_19;
  v15 = *((_QWORD *)v5 + 2);
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_25;
  result = v14 + 40;
  v18 = &v5[40 * a2 + 32];
  if ((char *)(v14 + 40) != v18 || result >= (unint64_t)&v18[40 * v17])
    result = (unint64_t)memmove((void *)result, v18, 40 * v17);
  v19 = *((_QWORD *)v5 + 2);
  v16 = __OFADD__(v19, v9);
  v20 = v19 + v9;
  if (!v16)
  {
    *((_QWORD *)v5 + 2) = v20;
LABEL_19:
    sub_21501EE90(a3, (uint64_t)&v5[40 * v7 + 32]);
    return sub_215046750(a3, &qword_254DA7848);
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_21502DA4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v3 = a2 - a3;
  if (__OFSUB__(a2, a3))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = -result;
  if (v3 <= 0 && v3 > v4)
  {
LABEL_8:
    if (a2 <= a3)
      return a2;
    goto LABEL_12;
  }
  v5 = a3 - result;
  if (!__OFADD__(a3, v4))
  {
    if (v5 < a2)
      goto LABEL_14;
    a2 = a3 - result;
    if (v5 > a3)
      goto LABEL_14;
    goto LABEL_8;
  }
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

char *sub_21502DAB0(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21502DBC0(a1, a2, a3, a4, &qword_254DA7578);
}

char *sub_21502DABC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D208);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21502DBB4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21502DBC0(a1, a2, a3, a4, &qword_253F0D200);
}

char *sub_21502DBC0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_21502DCB4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21502E130(a1, a2, a3, a4, &qword_253F0D458);
}

char *sub_21502DCC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21502DDE0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_21502DEE0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7850);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7858);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21502E000(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7750);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 48 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_21502E108(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F2BC(a1, a2, a3, a4, &qword_254DA7758, &qword_254DA7760);
}

char *sub_21502E11C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21502E130(a1, a2, a3, a4, &qword_254DA7820);
}

char *sub_21502E130(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9])
      memmove(v13, v14, 40 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_21502E248(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7808);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_21502E348(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77F8);
  v10 = *(_QWORD *)(sub_21512F740() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(sub_21512F740() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_21502E4BC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21502E5A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7580);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21502E69C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77B0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21502E794(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77C8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8])
      memmove(v13, v14, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 2 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_21502E888(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7710);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7718);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_21502E9C0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F2BC(a1, a2, a3, a4, &qword_254DA76F8, &qword_254DA7700);
}

char *sub_21502E9D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D048);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_21502EAC8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7730);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21502EBE8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D210);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_21502ECD0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D168);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7810);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21502EDF0(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21502EE2C(a1, a2, a3, a4, &qword_253F0D1E8);
}

_QWORD *sub_21502EE04(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502EF44(a1, a2, a3, a4, &qword_253F0D1E0, &qword_253F0D170);
}

char *sub_21502EE18(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21502EE2C(a1, a2, a3, a4, &qword_254DA7780);
}

char *sub_21502EE2C(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_21502EF30(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502EF44(a1, a2, a3, a4, &qword_254DA7788, &qword_254DA7790);
}

_QWORD *sub_21502EF44(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[5 * v11 + 4])
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_21502F07C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7768);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21502F190(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7770);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_21502F2A8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F2BC(a1, a2, a3, a4, &qword_254DA76E8, &qword_254DA76F0);
}

_QWORD *sub_21502F2BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4])
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

_QWORD *sub_21502F3E0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F5C0(a1, a2, a3, a4, &qword_254DA76C8, &qword_254DA76D0);
}

size_t sub_21502F3F4(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76A8);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_254DA76B0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_254DA76B0) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

_QWORD *sub_21502F570(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F70C(a1, a2, a3, a4, &qword_254DA7698, &qword_254DA76A0);
}

_QWORD *sub_21502F584(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F5C0(a1, a2, a3, a4, &qword_254DA7680, &qword_254DA7688);
}

_QWORD *sub_21502F598(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F70C(a1, a2, a3, a4, &qword_254DA7668, &qword_254DA7670);
}

_QWORD *sub_21502F5AC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F5C0(a1, a2, a3, a4, &qword_254DA7650, &qword_254DA7658);
}

_QWORD *sub_21502F5C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 1;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[4 * v11 + 4])
      memmove(v13 + 4, a4 + 4, 32 * v11);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

_QWORD *sub_21502F6E4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F70C(a1, a2, a3, a4, &qword_254DA7638, &qword_254DA7640);
}

_QWORD *sub_21502F6F8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21502F70C(a1, a2, a3, a4, &qword_254DA7620, &qword_254DA7628);
}

_QWORD *sub_21502F70C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[5 * v11 + 4])
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_21502F840(uint64_t a1, uint64_t a2)
{
  return sub_21502F898(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
}

unint64_t sub_21502F854(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_215130124();
  return sub_21503458C(a1, v2);
}

uint64_t sub_21502F884(uint64_t a1, uint64_t a2)
{
  return sub_21502F898(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BDCDCF8], sub_215034650);
}

uint64_t sub_21502F898(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  _BYTE v10[72];

  sub_2151305A4();
  a3(v10, a1, a2);
  v7 = sub_2151305EC();
  return a4(a1, a2, v7);
}

unint64_t sub_21502F910(uint64_t a1)
{
  uint64_t v2;

  sub_21512F740();
  sub_2150461E4(&qword_254DA75C8, MEMORY[0x24BDCE930]);
  v2 = sub_21512F908();
  return sub_215034FD8(a1, v2);
}

unint64_t sub_21502F974(int a1)
{
  uint64_t v2;

  sub_2151305A4();
  sub_2151305BC();
  v2 = sub_2151305EC();
  return sub_215035110(a1, v2);
}

unint64_t sub_21502F9CC(double a1)
{
  uint64_t v2;

  v2 = sub_215130598();
  return sub_2150351BC(v2, a1);
}

unint64_t sub_21502FA00(float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if ((LODWORD(a1) & 0x7FFFFFFF) != 0)
    v3 = LODWORD(a1);
  else
    v3 = 0;
  v4 = MEMORY[0x2199DC0EC](*(_QWORD *)(v1 + 40), v3, 4);
  return sub_215035254(v4, a1);
}

unint64_t sub_21502FA38(float a1)
{
  uint64_t v1;
  unsigned __int16 v3;
  uint64_t v4;
  __n128 v5;

  if ((LOWORD(a1) & 0x7FFF) != 0)
    v3 = LOWORD(a1);
  else
    v3 = 0;
  v4 = MEMORY[0x2199DC0EC](*(_QWORD *)(v1 + 40), v3, 2);
  v5.n128_f32[0] = a1;
  return sub_2150352EC(v4, v5);
}

unint64_t sub_21502FA74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_215130598();
  return sub_215035390(a1, v2);
}

unint64_t sub_21502FAA4(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_2151305A4();
  sub_2150E19D8((uint64_t)v4, a1);
  v2 = sub_2151305EC();
  return sub_21503542C(a1, v2);
}

unint64_t sub_21502FAFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = sub_21512F740();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2151305A4();
  sub_21504670C(a1, (uint64_t)v8, qword_253F0D218);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_2151305BC();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_2151305BC();
    sub_2150461E4(&qword_254DA75C8, MEMORY[0x24BDCE930]);
    sub_21512F914();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v9 = sub_2151305EC();
  return sub_215035628(a1, v9);
}

unint64_t sub_21502FC6C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_2151305A4();
  sub_2151305BC();
  if (a2 >> 60 != 15)
  {
    sub_21501F068(a1, a2);
    sub_21512F68C();
    sub_215045ED8(a1, a2);
  }
  v4 = sub_2151305EC();
  return sub_21503594C(a1, a2, v4);
}

unint64_t sub_21502FD0C(unsigned __int8 a1)
{
  int v2;
  uint64_t v3;

  v2 = a1;
  sub_2151305A4();
  if (v2 != 2)
    sub_2151305BC();
  sub_2151305BC();
  v3 = sub_2151305EC();
  return sub_215036428(a1, v3);
}

unint64_t sub_21502FD88(uint64_t a1, char a2)
{
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  sub_2151305A4();
  sub_2151305BC();
  if ((a2 & 1) == 0)
    sub_2151305E0();
  v5 = sub_2151305EC();
  return sub_2150364C0(a1, v4, v5);
}

unint64_t sub_21502FE10(unint64_t a1)
{
  uint64_t v2;

  sub_2151305A4();
  sub_2151305BC();
  if ((a1 & 0x100000000) == 0)
    sub_2151305D4();
  v2 = sub_2151305EC();
  return sub_215036548(a1 | ((HIDWORD(a1) & 1) << 32), v2);
}

unint64_t sub_21502FE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2151305A4();
  sub_2151305BC();
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_21512FB3C();
    swift_bridgeObjectRelease();
  }
  v4 = sub_2151305EC();
  return sub_2150365D0(a1, a2, v4);
}

unint64_t sub_21502FF28(uint64_t a1, char a2)
{
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  sub_2151305A4();
  sub_2151305BC();
  if ((a2 & 1) == 0)
    sub_2151305B0();
  v5 = sub_2151305EC();
  return sub_215036698(a1, v4, v5);
}

uint64_t sub_21502FFAC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(qword_253F0D320);
  v37 = a2;
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_2151305A4();
    sub_21512FB3C();
    result = sub_2151305EC();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2150302B4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7818);
  v38 = a2;
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((v38 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((v38 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
    }
    else
    {
      sub_2150462B0(v25, (uint64_t)&v39);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    result = sub_215130124();
    v29 = -1 << *(_BYTE *)(v7 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v28;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2150305B8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7800);
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
      sub_21501F068(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
    sub_2151305A4();
    sub_21512F68C();
    result = sub_2151305EC();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2150308B8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v5 = sub_21512F740();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77F0);
  v10 = sub_215130334();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v43 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v41 = v2;
  v42 = (unint64_t)(v12 + 63) >> 6;
  v16 = a2;
  v17 = v10 + 64;
  v45 = v9;
  result = swift_retain();
  v19 = 0;
  HIDWORD(v40) = v16;
  v20 = 16;
  if ((v16 & 1) != 0)
    v20 = 32;
  v44 = v20;
  while (1)
  {
    if (v15)
    {
      v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v42)
      break;
    v25 = v43;
    v26 = v43[v24];
    ++v19;
    if (!v26)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v42)
        goto LABEL_34;
      v26 = v43[v19];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v42)
        {
LABEL_34:
          v38 = v45;
          swift_release();
          v3 = v41;
          if ((v40 & 0x100000000) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v43[v27];
        if (!v26)
        {
          while (1)
          {
            v19 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v19 >= v42)
              goto LABEL_34;
            v26 = v43[v19];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v19 = v27;
      }
    }
LABEL_23:
    v15 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    v28 = v45;
    v29 = *(_QWORD *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + v44))(v8, *(_QWORD *)(v45 + 48) + v29 * v23, v5);
    v30 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v23);
    sub_2150461E4(&qword_254DA75C8, MEMORY[0x24BDCE930]);
    result = sub_21512F908();
    v31 = -1 << *(_BYTE *)(v11 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v17 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v29 * v21, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  v38 = v45;
  swift_release();
  v3 = v41;
  v25 = v43;
  if ((v40 & 0x100000000) == 0)
    goto LABEL_41;
LABEL_37:
  v39 = 1 << *(_BYTE *)(v38 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v38 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_215030C48(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77E0);
  result = sub_215130334();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_31;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_31;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      sub_2151305A4();
      sub_2151305BC();
      result = sub_2151305EC();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_215030F0C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77D8);
  result = sub_215130334();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = sub_215130598();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_2150311B4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77D0);
  result = sub_215130334();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v33;
                goto LABEL_41;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v8 >= v13)
                  goto LABEL_34;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      if ((v21 & 0x7FFFFFFF) != 0)
        v23 = v21;
      else
        v23 = 0;
      result = MEMORY[0x2199DC0EC](*(_QWORD *)(v7 + 40), v23, 4);
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_215031458(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77C0);
  result = sub_215130334();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v33;
                goto LABEL_41;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v8 >= v13)
                  goto LABEL_34;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_WORD *)(*(_QWORD *)(v5 + 48) + 2 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      if ((v21 & 0x7FFF) != 0)
        v23 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 48) + 2 * v17);
      else
        v23 = 0;
      result = MEMORY[0x2199DC0EC](*(_QWORD *)(v7 + 40), v23, 2);
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_WORD *)(*(_QWORD *)(v7 + 48) + 2 * v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_2150316FC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77B8);
  result = sub_215130334();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = sub_215130598();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_2150319A0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  _BYTE v38[32];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7728);
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v36)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v37 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v36)
        goto LABEL_34;
      v22 = *(_QWORD *)(v37 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v36)
        {
LABEL_34:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v22 = *(_QWORD *)(v37 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_43;
            if (v13 >= v36)
              goto LABEL_34;
            v22 = *(_QWORD *)(v37 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v13 = v23;
      }
    }
LABEL_21:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    v24 = *(_QWORD *)(v5 + 48) + 40 * v19;
    if ((a2 & 1) != 0)
    {
      v25 = *(_OWORD *)v24;
      v26 = *(_OWORD *)(v24 + 16);
      v41 = *(_QWORD *)(v24 + 32);
      v39 = v25;
      v40 = v26;
      sub_21504626C(*(_QWORD *)(v5 + 56) + 32 * v19, (uint64_t)v38, qword_253F0D058);
    }
    else
    {
      sub_2150462B0(v24, (uint64_t)&v39);
      sub_21504670C(*(_QWORD *)(v5 + 56) + 32 * v19, (uint64_t)v38, qword_253F0D058);
    }
    result = sub_215130124();
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 40 * v14;
    v16 = v39;
    v17 = v40;
    *(_QWORD *)(v15 + 32) = v41;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    result = sub_21504626C((uint64_t)v38, *(_QWORD *)(v7 + 56) + 32 * v14, qword_253F0D058);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v21 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v21, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_215031CD4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7600);
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_34;
      v22 = *(_QWORD *)(v38 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_43;
            if (v13 >= v37)
              goto LABEL_34;
            v22 = *(_QWORD *)(v38 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v13 = v23;
      }
    }
LABEL_21:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    v24 = *(_QWORD *)(v5 + 48) + 40 * v19;
    if ((a2 & 1) != 0)
    {
      v25 = *(_OWORD *)v24;
      v26 = *(_OWORD *)(v24 + 16);
      v41 = *(_QWORD *)(v24 + 32);
      v39 = v25;
      v40 = v26;
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    }
    else
    {
      sub_2150462B0(v24, (uint64_t)&v39);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      swift_bridgeObjectRetain();
    }
    result = sub_215130124();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 40 * v14;
    v16 = v39;
    v17 = v40;
    *(_QWORD *)(v15 + 32) = v41;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v21 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_215031FE4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7748);
  v40 = a2;
  v6 = sub_215130334();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *v29;
      v31 = v29[1];
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 24 * v21);
      v34 = *v32;
      v33 = v32[1];
      v35 = v32[2];
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_21501F068(v34, v33);
        swift_bridgeObjectRetain();
      }
      sub_2151305A4();
      sub_21512FB3C();
      result = sub_2151305EC();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      v19 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 24 * v17);
      *v19 = v34;
      v19[1] = v33;
      v19[2] = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_215032310(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7778);
  v42 = a2;
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_2151305A4();
    sub_21512FB3C();
    result = sub_2151305EC();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_215032634(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  _BYTE v37[32];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76E0);
  v36 = a2;
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v35 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v34)
        goto LABEL_34;
      v20 = *(_QWORD *)(v35 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v34)
              goto LABEL_34;
            v20 = *(_QWORD *)(v35 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v5 + 56) + 32 * v17;
    if ((v36 & 1) != 0)
    {
      sub_21504626C(v25, (uint64_t)v37, qword_253F0D058);
    }
    else
    {
      sub_21504670C(v25, (uint64_t)v37, qword_253F0D058);
      swift_bridgeObjectRetain();
    }
    sub_2151305A4();
    sub_21512FB3C();
    result = sub_2151305EC();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = sub_21504626C((uint64_t)v37, *(_QWORD *)(v7 + 56) + 32 * v14, qword_253F0D058);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21503296C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t i;
  char v39;
  _OWORD v40[2];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76D8);
  v39 = a2;
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_46;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = v37;
    v23 = v37[v21];
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_39;
      v23 = v37[v13];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_39:
          swift_release();
          v3 = v35;
          if ((v39 & 1) == 0)
            goto LABEL_46;
          goto LABEL_42;
        }
        v23 = v37[v24];
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_48;
            if (v13 >= v36)
              goto LABEL_39;
            v23 = v37[v13];
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = 8 * v20;
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v29);
    v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v29);
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_2151305A4();
    sub_2151305B0();
    v32 = *(_QWORD *)(v30 + 16);
    if (v32)
    {
      v33 = v30 + 32;
      do
      {
        sub_21504670C(v33, (uint64_t)&v42, &qword_254DA75E8);
        if (*((_QWORD *)&v43 + 1))
        {
          v40[0] = v42;
          v40[1] = v43;
          v41 = v44;
          sub_2151305BC();
          sub_215130148();
          sub_215046238((uint64_t)v40);
        }
        else
        {
          sub_2151305BC();
        }
        v33 += 40;
        --v32;
      }
      while (v32);
    }
    result = sub_2151305EC();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 8 * v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = v37;
  if ((v39 & 1) == 0)
    goto LABEL_46;
LABEL_42:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_46:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_215032CF8(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76B8);
  v10 = (_QWORD *)sub_215130334();
  if (*(_QWORD *)(v9 + 16))
  {
    v26 = v3;
    v11 = 1 << *(_BYTE *)(v9 + 32);
    v12 = (_QWORD *)(v9 + 64);
    v13 = -1;
    if (v11 < 64)
      v13 = ~(-1 << v11);
    v14 = v13 & *(_QWORD *)(v9 + 64);
    v15 = (unint64_t)(v11 + 63) >> 6;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v19 = v18 | (v17 << 6);
      }
      else
      {
        v20 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v20 >= v15)
          goto LABEL_23;
        v21 = v12[v20];
        ++v17;
        if (!v21)
        {
          v17 = v20 + 1;
          if (v20 + 1 >= v15)
            goto LABEL_23;
          v21 = v12[v17];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v15)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v26;
                goto LABEL_30;
              }
              v24 = 1 << *(_BYTE *)(v9 + 32);
              if (v24 >= 64)
                bzero((void *)(v9 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v12 = -1 << v24;
              v3 = v26;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v21 = v12[v22];
            if (!v21)
            {
              while (1)
              {
                v17 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_32;
                if (v17 >= v15)
                  goto LABEL_23;
                v21 = v12[v17];
                ++v22;
                if (v21)
                  goto LABEL_20;
              }
            }
            v17 = v22;
          }
        }
LABEL_20:
        v14 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v17 << 6);
      }
      v23 = *(_QWORD *)(v9 + 48) + *(_QWORD *)(v6 + 72) * v19;
      if ((a2 & 1) != 0)
        sub_21504626C(v23, (uint64_t)v8, qword_253F0D218);
      else
        sub_21504670C(v23, (uint64_t)v8, qword_253F0D218);
      result = sub_215033F38((uint64_t)v8, *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19), v10);
    }
  }
  result = swift_release();
LABEL_30:
  *v3 = v10;
  return result;
}

uint64_t sub_215032F44(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7690);
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = v2;
  v32 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    if (v17 >= v32)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v33 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_35;
      v19 = *(_QWORD *)(v33 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v32)
        {
LABEL_35:
          swift_release();
          v3 = v31;
          if ((a2 & 1) == 0)
            goto LABEL_42;
          goto LABEL_38;
        }
        v19 = *(_QWORD *)(v33 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_44;
            if (v13 >= v32)
              goto LABEL_35;
            v19 = *(_QWORD *)(v33 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v16 + 8);
    if ((a2 & 1) == 0)
      sub_215046224(v34, v22);
    sub_2151305A4();
    sub_2151305BC();
    if (v22 >> 60 != 15)
    {
      sub_21501F068(v34, v22);
      sub_21512F68C();
      sub_215045ED8(v34, v22);
    }
    result = sub_2151305EC();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14) = v34;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v18 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_42;
LABEL_38:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_42:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_215033288(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int64_t v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7678);
  result = sub_215130334();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v29 = a2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v30 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v8 << 6);
      }
      else
      {
        v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v16 >= v30)
          goto LABEL_33;
        v17 = v31[v16];
        ++v8;
        if (!v17)
        {
          v8 = v16 + 1;
          if (v16 + 1 >= v30)
            goto LABEL_33;
          v17 = v31[v8];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v30)
            {
LABEL_33:
              if ((v29 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v17 = v31[v18];
            if (!v17)
            {
              while (1)
              {
                v8 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v8 >= v30)
                  goto LABEL_33;
                v17 = v31[v8];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v8 = v18;
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      v19 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v15);
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
      sub_2151305A4();
      if (v19 != 2)
        sub_2151305BC();
      sub_2151305BC();
      result = sub_2151305EC();
      v21 = -1 << *(_BYTE *)(v7 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v13) = v19;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v20;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

unint64_t sub_215033570(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7660);
  v6 = (_QWORD *)sub_215130334();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v16 >= v11)
          goto LABEL_20;
        v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_20;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_20:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v19 = 1 << *(_BYTE *)(v5 + 32);
                if (v19 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v19 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v19;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_27;
                if (v13 >= v11)
                  goto LABEL_20;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_19;
              }
            }
            v13 = v18;
          }
        }
LABEL_19:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      result = sub_215034110(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v15), *(_BYTE *)(*(_QWORD *)(v5 + 48) + 16 * v15 + 8), *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15), v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

unint64_t sub_215033738(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7648);
  v6 = (_QWORD *)sub_215130334();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v16 >= v11)
          goto LABEL_20;
        v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_20;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_20:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v19 = 1 << *(_BYTE *)(v5 + 32);
                if (v19 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v19 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v19;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_27;
                if (v13 >= v11)
                  goto LABEL_20;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_19;
              }
            }
            v13 = v18;
          }
        }
LABEL_19:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      result = sub_2150341F4(*(unsigned int *)(*(_QWORD *)(v5 + 48) + 8 * v15) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + 8 * v15 + 4) << 32), *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15), v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_215033918(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7630);
  v6 = sub_215130334();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = v2;
  v32 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    if (v17 >= v32)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v33 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_35;
      v19 = *(_QWORD *)(v33 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v32)
        {
LABEL_35:
          swift_release();
          v3 = v31;
          if ((a2 & 1) == 0)
            goto LABEL_42;
          goto LABEL_38;
        }
        v19 = *(_QWORD *)(v33 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_44;
            if (v13 >= v32)
              goto LABEL_35;
            v19 = *(_QWORD *)(v33 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v16 + 8);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_2151305A4();
    sub_2151305BC();
    if (v22)
    {
      swift_bridgeObjectRetain();
      sub_21512FB3C();
      swift_bridgeObjectRelease();
    }
    result = sub_2151305EC();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14) = v34;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v18 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_42;
LABEL_38:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_42:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_215033C40(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int64_t v33;
  _QWORD *v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7618);
  result = sub_215130334();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v33)
          goto LABEL_33;
        v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v33)
            goto LABEL_33;
          v18 = v34[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_33:
              if ((v32 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_42;
                if (v8 >= v33)
                  goto LABEL_33;
                v18 = v34[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 48) + 16 * v16;
      v21 = *(unsigned __int8 *)(v20 + 8);
      v22 = *(_QWORD *)v20;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      sub_2151305A4();
      sub_2151305BC();
      if (v21 != 1)
        sub_2151305B0();
      result = sub_2151305EC();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 16 * v13;
      *(_QWORD *)v14 = v22;
      *(_BYTE *)(v14 + 8) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v23;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_215033F38(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;

  v6 = sub_21512F740();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2151305A4();
  sub_21504670C(a1, (uint64_t)v13, qword_253F0D218);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    sub_2151305BC();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    sub_2151305BC();
    sub_2150461E4(&qword_254DA75C8, MEMORY[0x24BDCE930]);
    sub_21512F914();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  sub_2151305EC();
  v14 = sub_215130118();
  *(_QWORD *)((char *)a3 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
  result = sub_21504626C(a1, a3[6] + *(_QWORD *)(v11 + 72) * v14, qword_253F0D218);
  *(_QWORD *)(a3[7] + 8 * v14) = a2;
  ++a3[2];
  return result;
}

unint64_t sub_215034110(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  unint64_t result;
  uint64_t v9;

  sub_2151305A4();
  sub_2151305BC();
  if ((a2 & 1) == 0)
    sub_2151305E0();
  sub_2151305EC();
  result = sub_215130118();
  *(_QWORD *)((char *)a4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  v9 = a4[6] + 16 * result;
  *(_QWORD *)v9 = a1;
  *(_BYTE *)(v9 + 8) = a2 & 1;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  ++a4[2];
  return result;
}

unint64_t sub_2150341F4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t result;
  uint64_t v7;

  sub_2151305A4();
  sub_2151305BC();
  if ((a1 & 0x100000000) == 0)
    sub_2151305D4();
  sub_2151305EC();
  result = sub_215130118();
  *(_QWORD *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  v7 = a3[6] + 8 * result;
  *(_DWORD *)v7 = a1;
  *(_BYTE *)(v7 + 4) = BYTE4(a1) & 1;
  *(_QWORD *)(a3[7] + 8 * result) = a2;
  ++a3[2];
  return result;
}

unint64_t sub_2150342D8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_215034320(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 40 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_215034378(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t sub_2150343C8(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

uint64_t sub_215034410(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  result = sub_21504626C(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, qword_253F0D218);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_2150344AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_21513043C() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_21513043C() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_21503458C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_2150462B0(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x2199DBC90](v9, a1);
      sub_215046238((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_215034650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_215034FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_21512F740();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_2150461E4(&qword_254DA75D0, MEMORY[0x24BDCE958]);
      v14 = sub_21512FA58();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_215035110(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_BYTE *)(v7 + result) != (a1 & 1))
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((*(unsigned __int8 *)(v7 + result) ^ a1) & 1) == 0)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_2150351BC(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_215035254(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(float *)(v6 + 4 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(float *)(v6 + 4 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_2150352EC(uint64_t a1, __n128 _Q0)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v14;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    _H1 = *(_WORD *)(v6 + 2 * result);
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    if (_S1 != _S0)
    {
      v14 = ~v4;
      for (result = (result + 1) & v14;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v14)
      {
        _H1 = *(_WORD *)(v6 + 2 * result);
        __asm { FCVT            S1, H1 }
        if (_S1 == _S0)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_215035390(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_21503542C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _BYTE v17[40];
  _BYTE v18[24];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[48];

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = ~v4;
    v8 = *(_QWORD *)(a1 + 16);
    v14 = ~v4;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5);
      if (*(_QWORD *)(v9 + 16) == v8)
        break;
LABEL_6:
      v5 = (v5 + 1) & v7;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
        return v5;
    }
    if (v8 && v9 != a1)
    {
      swift_bridgeObjectRetain();
      v10 = 32;
      v11 = v8;
      do
      {
        sub_21504670C(a1 + v10, (uint64_t)v23, &qword_254DA75E8);
        sub_21504670C(v9 + v10, (uint64_t)v18, &qword_254DA75E8);
        sub_21504670C((uint64_t)v23, (uint64_t)&v20, &qword_254DA75E8);
        if (v19)
        {
          sub_21504670C((uint64_t)v18, (uint64_t)v17, &qword_254DA75E8);
          if (!*((_QWORD *)&v21 + 1))
          {
            sub_215046238((uint64_t)v17);
LABEL_4:
            sub_215046750((uint64_t)v18, &qword_254DA75F0);
            sub_215046750((uint64_t)v23, &qword_254DA75E8);
LABEL_5:
            swift_bridgeObjectRelease();
            v7 = v14;
            v3 = v2 + 64;
            goto LABEL_6;
          }
          v15[0] = v20;
          v15[1] = v21;
          v16 = v22;
          v12 = MEMORY[0x2199DBC90](v17, v15);
          sub_215046238((uint64_t)v15);
          sub_215046238((uint64_t)v17);
          sub_215046750((uint64_t)v18, &qword_254DA75E8);
          sub_215046750((uint64_t)v23, &qword_254DA75E8);
          if ((v12 & 1) == 0)
            goto LABEL_5;
        }
        else
        {
          if (*((_QWORD *)&v21 + 1))
            goto LABEL_4;
          sub_215046750((uint64_t)v18, &qword_254DA75E8);
          sub_215046750((uint64_t)v23, &qword_254DA75E8);
        }
        v10 += 40;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
  }
  return v5;
}

unint64_t sub_215035628(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  char v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v34 = a1;
  v5 = sub_21512F740();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v29 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75C0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v12 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v28 - v15;
  v17 = v3 + 64;
  v35 = v3;
  v18 = -1 << *(_BYTE *)(v3 + 32);
  v19 = a2 & ~v18;
  if (((*(_QWORD *)(v3 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v31 = v14;
    v32 = ~v18;
    v33 = *(_QWORD *)(v13 + 72);
    v28 = v8;
    v30 = v3 + 64;
    while (1)
    {
      sub_21504670C(*(_QWORD *)(v35 + 48) + v33 * v19, (uint64_t)v16, qword_253F0D218);
      v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_21504670C((uint64_t)v16, (uint64_t)v10, qword_253F0D218);
      sub_21504670C(v34, v20, qword_253F0D218);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
      if (v21(v10, 1, v5) == 1)
        break;
      v22 = v31;
      sub_21504670C((uint64_t)v10, v31, qword_253F0D218);
      if (v21((char *)v20, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v22, v5);
        v17 = v30;
LABEL_4:
        sub_215046750((uint64_t)v10, &qword_254DA75C0);
        sub_215046750((uint64_t)v16, qword_253F0D218);
        goto LABEL_5;
      }
      v23 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v29, v20, v5);
      sub_2150461E4(&qword_254DA75D0, MEMORY[0x24BDCE958]);
      v24 = sub_21512FA58();
      v25 = *(void (**)(char *, uint64_t))(v6 + 8);
      v26 = v23;
      v8 = v28;
      v25(v26, v5);
      v25((char *)v22, v5);
      sub_215046750((uint64_t)v10, qword_253F0D218);
      sub_215046750((uint64_t)v16, qword_253F0D218);
      v17 = v30;
      if ((v24 & 1) != 0)
        return v19;
LABEL_5:
      v19 = (v19 + 1) & v32;
      if (((*(_QWORD *)(v17 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        return v19;
    }
    if (v21((char *)v20, 1, v5) == 1)
    {
      sub_215046750((uint64_t)v10, qword_253F0D218);
      sub_215046750((uint64_t)v16, qword_253F0D218);
      return v19;
    }
    goto LABEL_4;
  }
  return v19;
}

unint64_t sub_21503594C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v8 = ~v4;
    v13 = a2 >> 60;
    do
    {
      v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v5);
      v11 = *v9;
      v10 = v9[1];
      if (v10 >> 60 == 15)
      {
        if (v13 > 0xE)
          return v5;
      }
      else if (v13 <= 0xE)
      {
        __asm { BR              X10 }
      }
      sub_215046224(v11, v10);
      sub_215046224(a1, a2);
      sub_215045ED8(v11, v10);
      sub_215045ED8(a1, a2);
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_215036428(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  int v7;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + result);
      if (v7 == 2)
      {
        if (a1 == 2)
          return result;
      }
      else if (a1 != 2 && ((((a1 & 1) == 0) ^ v7) & 1) != 0)
      {
        return result;
      }
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_2150364C0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    v8 = *(double *)&a1;
    do
    {
      v9 = *(_QWORD *)(v3 + 48) + 16 * result;
      if ((*(_BYTE *)(v9 + 8) & 1) != 0)
      {
        if ((a2 & 1) != 0)
          return result;
      }
      else if ((a2 & 1) == 0 && *(double *)v9 == v8)
      {
        return result;
      }
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_215036548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = *(_QWORD *)(v2 + 48) + 8 * result;
      if ((*(_BYTE *)(v7 + 4) & 1) != 0)
      {
        if ((a1 & 0x100000000) != 0)
          return result;
      }
      else if ((a1 & 0x100000000) == 0 && *(float *)v7 == *(float *)&a1)
      {
        return result;
      }
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_2150365D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = ~v5;
    v10 = *(_QWORD *)(v3 + 48);
    do
    {
      v11 = (_QWORD *)(v10 + 16 * v6);
      v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          v13 = *v11 == a1 && v12 == a2;
          if (v13 || (sub_21513043C() & 1) != 0)
            return v6;
        }
      }
      else if (!a2)
      {
        return v6;
      }
      v6 = (v6 + 1) & v9;
    }
    while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_215036698(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = *(_QWORD *)(v3 + 48) + 16 * result;
      if ((*(_BYTE *)(v8 + 8) & 1) != 0)
      {
        if ((a2 & 1) != 0)
          return result;
      }
      else if ((a2 & 1) == 0 && *(_QWORD *)v8 == a1)
      {
        return result;
      }
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

void *sub_21503671C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(qword_253F0D320);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2150368C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7818);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    result = (void *)sub_2150462B0(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215036A9C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7800);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)sub_21501F068(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215036C48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_21512F740();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77F0);
  v24 = v0;
  v5 = *v0;
  v6 = sub_215130328();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215036E6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77E0);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215036FF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77D8);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215037184()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77D0);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215037314()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77C0);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 2 * v15;
    v17 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_WORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2150374A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77B8);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215037630()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _BYTE v24[32];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7728);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_2150462B0(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_21504670C(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24, qword_253F0D058);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = (void *)sub_21504626C((uint64_t)v24, *(_QWORD *)(v4 + 56) + v17, qword_253F0D058);
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215037824()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7600);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    sub_2150462B0(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2150379FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7748);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 56);
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = v18[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v17 + v20);
    v22 = *(_QWORD *)(v17 + v20 + 8);
    v23 = *(_QWORD *)(v17 + v20 + 16);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v24 = *v18;
    v24[1] = v19;
    v25 = (uint64_t *)(*(_QWORD *)(v4 + 56) + v20);
    *v25 = v21;
    v25[1] = v22;
    v25[2] = v23;
    swift_bridgeObjectRetain();
    sub_21501F068(v21, v22);
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215037BD8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7778);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215037D90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE v26[32];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76E0);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v24 = v1;
  result = (void *)(v3 + 64);
  v6 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  v25 = v2 + 64;
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v12)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v8;
    if (!v22)
    {
      v8 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v8);
      if (!v22)
        break;
    }
LABEL_25:
    v11 = (v22 - 1) & v22;
    v14 = __clz(__rbit64(v22)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v17 = *v16;
    v18 = v16[1];
    v19 = 32 * v14;
    sub_21504670C(*(_QWORD *)(v2 + 56) + 32 * v14, (uint64_t)v26, qword_253F0D058);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v15);
    *v20 = v17;
    v20[1] = v18;
    sub_21504626C((uint64_t)v26, *(_QWORD *)(v4 + 56) + v19, qword_253F0D058);
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v12)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v8 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v8);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_215037F8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76D8);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21503812C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA76B8);
  v5 = *v0;
  v6 = sub_215130328();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v7;
    return result;
  }
  v24 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v14)
      goto LABEL_23;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_23;
      v21 = *(_QWORD *)(v25 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_22:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_9:
    v17 = *(_QWORD *)(v26 + 72) * v16;
    sub_21504670C(*(_QWORD *)(v5 + 48) + v17, (uint64_t)v4, qword_253F0D218);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
    result = (void *)sub_21504626C((uint64_t)v4, *(_QWORD *)(v7 + 48) + v17, qword_253F0D218);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v14)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_25;
  }
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_23;
    v21 = *(_QWORD *)(v25 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_215038364()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7690);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)sub_215046224(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215038510()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7678);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21503869C()
{
  return sub_2150389F8(&qword_254DA7660);
}

void *sub_2150386A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7648);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v24 = __clz(__rbit64(v22));
    v12 = (v22 - 1) & v22;
    v15 = v24 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_DWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 4);
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    *(_DWORD *)v20 = v18;
    *(_BYTE *)(v20 + 4) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_215038844()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7630);
  v2 = *v0;
  v3 = sub_215130328();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2150389EC()
{
  return sub_2150389F8(&qword_254DA7618);
}

void *sub_2150389F8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_215130328();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v13 = (v24 - 1) & v24;
    v16 = v26 + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = *(_QWORD *)(v3 + 48) + 16 * v16;
    v19 = *(_QWORD *)v18;
    LOBYTE(v18) = *(_BYTE *)(v18 + 8);
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = *(_QWORD *)(v5 + 48) + v17;
    *(_QWORD *)v22 = v19;
    *(_BYTE *)(v22 + 8) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_215038B90(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A1ED8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038BAC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A200C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038BC8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A2020(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038BE4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A2120(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038C00(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A2218(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038C1C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A2338(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_215038C38(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2150A2464(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038C54(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A2478(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038C70(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A248C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038C8C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A2574(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038CA8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A26AC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038CC4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A27A0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038CE0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A27AC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038CFC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A28A8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038D18(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A28BC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038D34(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A29D4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038D50(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A29E8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038D6C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A29FC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038D88(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A2B34(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038DA4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A2C38(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_215038DC0(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2150A2D38(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

char *sub_215038DDC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A2EAC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038DF8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A2F94(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038E14(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A308C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038E30(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A3184(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038E4C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3278(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038E68(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A328C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038E84(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A33AC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038EA0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A34C4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038EBC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A34D8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038ED8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A34EC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038EF4(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3604(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_215038F10(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2150A3750(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_215038F2C(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2150A3864(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

size_t sub_215038F48(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2150A3878(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038F64(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3A00(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038F80(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3A14(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038F9C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3A28(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038FB8(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3A3C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038FD4(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3A50(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215038FF0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3A64(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_21503900C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3A78(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215039028(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3BC8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215039044(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3D00(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215039060(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3D14(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_21503907C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3D28(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_215039098(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3E60(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_2150390B4(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2150A3FA8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_2150390D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_2151305A4();
  swift_bridgeObjectRetain();
  sub_21512FB3C();
  v8 = sub_2151305EC();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_21513043C() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_21513043C() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_2150402DC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_21503927C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_215130598();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_215040474(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_215039374(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _OWORD v14[2];
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = *v2;
  sub_2151305A4();
  sub_21504670C(a2, (uint64_t)&v23, &qword_254DA75E8);
  if (*((_QWORD *)&v24 + 1))
  {
    v21[0] = v23;
    v21[1] = v24;
    v22 = v25;
    sub_2151305BC();
    swift_bridgeObjectRetain();
    sub_215130148();
    sub_215046238((uint64_t)v21);
  }
  else
  {
    sub_2151305BC();
    swift_bridgeObjectRetain();
  }
  v5 = sub_2151305EC();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_21504670C(a2, (uint64_t)v16, &qword_254DA75E8);
    *(_QWORD *)&v23 = *(_QWORD *)v12;
    *(_QWORD *)v12 = 0x8000000000000000;
    sub_215040594((uint64_t)v16, v7, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v12 = v23;
    swift_bridgeObjectRelease();
    sub_21504626C(a2, a1, &qword_254DA75E8);
    return 1;
  }
  v8 = ~v6;
  while (1)
  {
    sub_21504670C(*(_QWORD *)(v4 + 48) + 40 * v7, (uint64_t)&v23, &qword_254DA75E8);
    sub_21504670C((uint64_t)&v23, (uint64_t)v16, &qword_254DA75E8);
    sub_21504670C(a2, (uint64_t)&v18, &qword_254DA75E8);
    if (!v17)
      break;
    sub_21504670C((uint64_t)v16, (uint64_t)v21, &qword_254DA75E8);
    if (!*((_QWORD *)&v19 + 1))
    {
      sub_215046238((uint64_t)v21);
      goto LABEL_7;
    }
    v14[0] = v18;
    v14[1] = v19;
    v15 = v20;
    v9 = MEMORY[0x2199DBC90](v21, v14);
    sub_215046238((uint64_t)v14);
    sub_215046238((uint64_t)v21);
    sub_215046750((uint64_t)v16, &qword_254DA75E8);
    sub_215046750((uint64_t)&v23, &qword_254DA75E8);
    if ((v9 & 1) != 0)
      goto LABEL_16;
LABEL_8:
    v7 = (v7 + 1) & v8;
    if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      goto LABEL_14;
  }
  if (*((_QWORD *)&v19 + 1))
  {
LABEL_7:
    sub_215046750((uint64_t)v16, &qword_254DA75F0);
    sub_215046750((uint64_t)&v23, &qword_254DA75E8);
    goto LABEL_8;
  }
  sub_215046750((uint64_t)v16, &qword_254DA75E8);
  sub_215046750((uint64_t)&v23, &qword_254DA75E8);
LABEL_16:
  swift_bridgeObjectRelease();
  sub_215046750(a2, &qword_254DA75E8);
  sub_21504670C(*(_QWORD *)(*(_QWORD *)v12 + 48) + 40 * v7, a1, &qword_254DA75E8);
  return 0;
}

uint64_t sub_215039654(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t __s1;

  v6 = *v3;
  sub_2151305A4();
  sub_2151305BC();
  swift_bridgeObjectRetain();
  if (a3 >> 60 != 15)
  {
    sub_215046224(a2, a3);
    sub_21512F68C();
    sub_215045ED8(a2, a3);
  }
  v7 = sub_2151305EC();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    __s1 = *v19;
    *v19 = 0x8000000000000000;
    sub_215046224(a2, a3);
    sub_215040850(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *v19 = __s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  v10 = ~v8;
  while (1)
  {
    v11 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v9);
    v12 = *v11;
    v13 = v11[1];
    if (v13 >> 60 != 15)
    {
      if (a3 >> 60 != 15)
        __asm { BR              X10 }
      goto LABEL_6;
    }
    if (a3 >> 60 == 15)
      break;
LABEL_6:
    sub_215046224(a2, a3);
    sub_215046224(v12, v13);
    sub_215045ED8(v12, v13);
    sub_215045ED8(a2, a3);
    v9 = (v9 + 1) & v10;
    if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  v16 = (uint64_t *)(*(_QWORD *)(*v19 + 48) + 16 * v9);
  v17 = *v16;
  v18 = v16[1];
  *a1 = *v16;
  a1[1] = v18;
  sub_215046224(v17, v18);
  return 0;
}

uint64_t sub_21503A224(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t *v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v47 = a1;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75C0);
  MEMORY[0x24BDAC7A8](v49);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_21512F740();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v54 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v44 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v45 = (uint64_t)&v44 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v44 - v18;
  v46 = v2;
  v20 = *v2;
  sub_2151305A4();
  v57 = a2;
  v21 = v7;
  sub_21504670C(a2, (uint64_t)v19, qword_253F0D218);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v23 = v22(v19, 1, v6);
  v50 = v21;
  if (v23 == 1)
  {
    sub_2151305BC();
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v9, v19, v6);
    sub_2151305BC();
    sub_2150461E4(&qword_254DA75C8, MEMORY[0x24BDCE930]);
    swift_bridgeObjectRetain();
    sub_21512F914();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v6);
  }
  v24 = sub_2151305EC();
  v25 = -1 << *(_BYTE *)(v20 + 32);
  v26 = v24 & ~v25;
  v56 = v20 + 56;
  v27 = (uint64_t)v51;
  v28 = v20;
  if (((*(_QWORD *)(v20 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    v39 = v46;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v41 = v57;
    v42 = v45;
    sub_21504670C(v57, v45, qword_253F0D218);
    v58 = *v39;
    *v39 = 0x8000000000000000;
    sub_2150413F8(v42, v26, isUniquelyReferenced_nonNull_native);
    *v39 = v58;
    swift_bridgeObjectRelease();
    sub_21504626C(v41, v47, qword_253F0D218);
    return 1;
  }
  v48 = v9;
  v52 = ~v25;
  v53 = v20;
  v54 = *(_QWORD *)(v54 + 72);
  v55 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v22;
  v29 = v49;
  while (1)
  {
    v31 = v54 * v26;
    sub_21504670C(*(_QWORD *)(v28 + 48) + v54 * v26, (uint64_t)v15, qword_253F0D218);
    v32 = (uint64_t)&v5[*(int *)(v29 + 48)];
    v33 = (uint64_t)v15;
    sub_21504670C((uint64_t)v15, (uint64_t)v5, qword_253F0D218);
    sub_21504670C(v57, v32, qword_253F0D218);
    v34 = v55;
    if (v55((uint64_t)v5, 1, v6) == 1)
      break;
    sub_21504670C((uint64_t)v5, v27, qword_253F0D218);
    if (v34(v32, 1, v6) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v27, v6);
      v15 = (char *)v33;
      goto LABEL_7;
    }
    v35 = v50;
    v36 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v48, v32, v6);
    sub_2150461E4(&qword_254DA75D0, MEMORY[0x24BDCE958]);
    v37 = sub_21512FA58();
    v38 = *(void (**)(char *, uint64_t))(v35 + 8);
    v38(v36, v6);
    v38(v51, v6);
    v27 = (uint64_t)v51;
    v29 = v49;
    sub_215046750((uint64_t)v5, qword_253F0D218);
    v15 = (char *)v33;
    sub_215046750(v33, qword_253F0D218);
    if ((v37 & 1) != 0)
      goto LABEL_16;
LABEL_8:
    v28 = v53;
    v26 = (v26 + 1) & v52;
    if (((*(_QWORD *)(v56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
      goto LABEL_14;
  }
  v30 = v34(v32, 1, v6);
  v15 = (char *)v33;
  if (v30 != 1)
  {
LABEL_7:
    sub_215046750((uint64_t)v5, &qword_254DA75C0);
    sub_215046750((uint64_t)v15, qword_253F0D218);
    goto LABEL_8;
  }
  sub_215046750((uint64_t)v5, qword_253F0D218);
  sub_215046750(v33, qword_253F0D218);
LABEL_16:
  swift_bridgeObjectRelease();
  sub_215046750(v57, qword_253F0D218);
  sub_21504670C(*(_QWORD *)(*v46 + 48) + v31, v47, qword_253F0D218);
  return 0;
}

uint64_t sub_21503A724(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;

  v7 = *v3;
  sub_2151305A4();
  sub_2151305BC();
  swift_bridgeObjectRetain();
  if (a3)
  {
    swift_bridgeObjectRetain();
    sub_21512FB3C();
    swift_bridgeObjectRelease();
  }
  v8 = sub_2151305EC();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v3;
    *v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_215041894(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v20;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  v11 = ~v9;
  v12 = *(_QWORD *)(v7 + 48);
  while (1)
  {
    v13 = (_QWORD *)(v12 + 16 * v10);
    v14 = v13[1];
    if (v14)
      break;
    if (!a3)
      goto LABEL_15;
LABEL_6:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_16;
  }
  if (!a3)
    goto LABEL_6;
  v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (sub_21513043C() & 1) == 0)
    goto LABEL_6;
  swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
  v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
  v17 = v16[1];
  *a1 = *v16;
  a1[1] = v17;
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t sub_21503A8EC(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v3 = v2;
  v4 = a2;
  v6 = a2;
  v7 = *v3;
  sub_2151305A4();
  if (v6 != 2)
    sub_2151305BC();
  sub_2151305BC();
  v8 = sub_2151305EC();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_11:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_215041A48(v4, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_12;
  }
  v11 = ~v9;
  while (1)
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 48) + v10);
    if (v12 != 2)
      break;
    if (v4 == 2)
      goto LABEL_10;
LABEL_6:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_11;
  }
  if (v4 == 2 || ((((v4 & 1) == 0) ^ v12) & 1) == 0)
    goto LABEL_6;
LABEL_10:
  result = 0;
  LOBYTE(v4) = *(_BYTE *)(*(_QWORD *)(*v3 + 48) + v10);
LABEL_12:
  *a1 = v4;
  return result;
}

uint64_t sub_21503AA4C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v4 = v3;
  v8 = a3 & 1;
  v9 = *v4;
  sub_2151305A4();
  sub_2151305BC();
  if ((a3 & 1) == 0)
    sub_2151305E0();
  v10 = sub_2151305EC();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_215041BDC(a2, v8, v12, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_12;
  }
  v13 = ~v11;
  while (1)
  {
    v14 = *(_QWORD *)(v9 + 48) + 16 * v12;
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      break;
    if (v8)
      goto LABEL_10;
LABEL_6:
    v12 = (v12 + 1) & v13;
    if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_11;
  }
  if (v8 || *(double *)v14 != *(double *)&a2)
    goto LABEL_6;
LABEL_10:
  result = 0;
  v16 = *(_QWORD *)(*v4 + 48) + 16 * v12;
  a2 = *(uint64_t *)v16;
  LOBYTE(v8) = *(_BYTE *)(v16 + 8);
LABEL_12:
  *(double *)a1 = *(double *)&a2;
  *(_BYTE *)(a1 + 8) = v8;
  return result;
}

uint64_t sub_21503ABC0(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v5 = *v2;
  sub_2151305A4();
  sub_2151305BC();
  if ((a2 & 0x100000000) == 0)
    sub_2151305D4();
  v6 = sub_2151305EC();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_11:
    v13 = HIDWORD(a2) & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v2;
    *v2 = 0x8000000000000000;
    sub_215041D7C(a2 | (unint64_t)(v13 << 32), v8, isUniquelyReferenced_nonNull_native);
    *v2 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_12;
  }
  v9 = ~v7;
  while (1)
  {
    v10 = *(_QWORD *)(v5 + 48) + 8 * v8;
    if ((*(_BYTE *)(v10 + 4) & 1) == 0)
      break;
    if ((a2 & 0x100000000) != 0)
      goto LABEL_10;
LABEL_6:
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_11;
  }
  if ((a2 & 0x100000000) != 0 || *(float *)v10 != *(float *)&a2)
    goto LABEL_6;
LABEL_10:
  result = 0;
  v12 = *(_QWORD *)(*v2 + 48) + 8 * v8;
  LODWORD(a2) = *(_DWORD *)v12;
  LOBYTE(v13) = *(_BYTE *)(v12 + 4);
LABEL_12:
  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = v13;
  return result;
}

uint64_t sub_21503AD30(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v16;
  uint64_t result;
  uint64_t v20;
  int v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;

  v5 = *v2;
  sub_2151305A4();
  sub_2151305BC();
  if ((a2 & 0x10000) == 0)
    sub_2151305C8();
  v6 = sub_2151305EC();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_11:
    v21 = HIWORD(a2) & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v2;
    *v2 = 0x8000000000000000;
    sub_215041F10(a2 & 0x1FFFF, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v23;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_12;
  }
  v9 = ~v7;
  _H0 = a2;
  __asm { FCVT            S0, H0 }
  while (1)
  {
    v16 = *(_QWORD *)(v5 + 48) + 4 * v8;
    if ((*(_BYTE *)(v16 + 2) & 1) == 0)
      break;
    if ((a2 & 0x10000) != 0)
      goto LABEL_10;
LABEL_6:
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_11;
  }
  if ((a2 & 0x10000) != 0)
    goto LABEL_6;
  _H1 = *(_WORD *)v16;
  __asm { FCVT            S1, H1 }
  if (_S1 != _S0)
    goto LABEL_6;
LABEL_10:
  result = 0;
  v20 = *(_QWORD *)(*v2 + 48) + 4 * v8;
  LOWORD(a2) = *(_WORD *)v20;
  LOBYTE(v21) = *(_BYTE *)(v20 + 2);
LABEL_12:
  *(_WORD *)a1 = a2;
  *(_BYTE *)(a1 + 2) = v21;
  return result;
}

uint64_t sub_21503AE98(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v4 = v3;
  v8 = a3 & 1;
  v9 = *v4;
  sub_2151305A4();
  sub_2151305BC();
  if ((a3 & 1) == 0)
    sub_2151305B0();
  v10 = sub_2151305EC();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_2150420A4(a2, v8, v12, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_12;
  }
  v13 = ~v11;
  while (1)
  {
    v14 = *(_QWORD *)(v9 + 48) + 16 * v12;
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      break;
    if (v8)
      goto LABEL_10;
LABEL_6:
    v12 = (v12 + 1) & v13;
    if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_11;
  }
  if (v8 || *(_QWORD *)v14 != a2)
    goto LABEL_6;
LABEL_10:
  result = 0;
  v16 = *(_QWORD *)(*v4 + 48) + 16 * v12;
  a2 = *(_QWORD *)v16;
  LOBYTE(v8) = *(_BYTE *)(v16 + 8);
LABEL_12:
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = v8;
  return result;
}

void *sub_21503B004()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1D8);
  v2 = *v0;
  v3 = sub_215130154();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21503B1B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7610);
  v2 = *v0;
  v3 = sub_215130154();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21503B348()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[40];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75F8);
  v2 = *v0;
  v3 = sub_215130154();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v13)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_21504670C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v20, &qword_254DA75E8);
    result = (void *)sub_21504626C((uint64_t)v20, *(_QWORD *)(v4 + 48) + v16, &qword_254DA75E8);
  }
  v19 = v17 + 3;
  if (v19 >= v13)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21503B520()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75E0);
  v2 = *v0;
  v3 = sub_215130154();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_215046224(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21503B6D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75D8);
  v6 = *v0;
  v7 = sub_215130154();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_27:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v16)
      goto LABEL_25;
    v21 = *(_QWORD *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v16)
        goto LABEL_25;
      v21 = *(_QWORD *)(v10 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v16)
          goto LABEL_25;
        v21 = *(_QWORD *)(v10 + 8 * v12);
        if (!v21)
          break;
      }
    }
LABEL_24:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    sub_21504670C(*(_QWORD *)(v6 + 48) + v19, (uint64_t)v5, qword_253F0D218);
    result = (void *)sub_21504626C((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19, qword_253F0D218);
  }
  v22 = v20 + 3;
  if (v22 >= v16)
  {
LABEL_25:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(v10 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v16)
      goto LABEL_25;
    v21 = *(_QWORD *)(v10 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_21503B8F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75B8);
  v2 = *v0;
  v3 = sub_215130154();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21503BAA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75B0);
  v2 = *v0;
  v3 = sub_215130154();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21503BC34()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75A0);
  v2 = *v0;
  v3 = sub_215130154();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_DWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 4);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    *(_DWORD *)v19 = v18;
    *(_BYTE *)(v19 + 4) = v17;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21503BDD8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7598);
  v2 = *v0;
  v3 = sub_215130154();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_WORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 2);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    *(_WORD *)v19 = v18;
    *(_BYTE *)(v19 + 2) = v17;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21503BF7C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_215130154();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v14)
      goto LABEL_28;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_28;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
      {
        v10 = v21 + 2;
        if (v21 + 2 >= v14)
          goto LABEL_28;
        v22 = *(_QWORD *)(v7 + 8 * v10);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = *(_QWORD *)(v3 + 48) + v17;
    v19 = *(_QWORD *)v18;
    LOBYTE(v18) = *(_BYTE *)(v18 + 8);
    v20 = *(_QWORD *)(v5 + 48) + v17;
    *(_QWORD *)v20 = v19;
    *(_BYTE *)(v20 + 8) = v18;
  }
  v23 = v21 + 3;
  if (v23 >= v14)
    goto LABEL_28;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_21503C118()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1D8);
  v3 = sub_215130160();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_2151305A4();
    swift_bridgeObjectRetain();
    sub_21512FB3C();
    result = sub_2151305EC();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_21503C3C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7610);
  result = sub_215130160();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_215130598();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_21503C624()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[48];

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75F8);
  v2 = sub_215130160();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_38:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v5 = v1 + 56;
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v1 + 56);
  v24 = (unint64_t)(v4 + 63) >> 6;
  v8 = v2 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v14 >= v24)
      goto LABEL_36;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v24)
        goto LABEL_36;
      v15 = *(_QWORD *)(v5 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v24)
          goto LABEL_36;
        v15 = *(_QWORD *)(v5 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    sub_21504670C(*(_QWORD *)(v1 + 48) + 40 * v13, (uint64_t)v30, &qword_254DA75E8);
    sub_2151305A4();
    sub_21504670C((uint64_t)v30, (uint64_t)&v27, &qword_254DA75E8);
    if (*((_QWORD *)&v28 + 1))
    {
      v25[0] = v27;
      v25[1] = v28;
      v26 = v29;
      sub_2151305BC();
      sub_215130148();
      sub_215046238((uint64_t)v25);
    }
    else
    {
      sub_2151305BC();
    }
    result = sub_2151305EC();
    v17 = -1 << *(_BYTE *)(v3 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v8 + 8 * (v18 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v8 + 8 * v19);
      }
      while (v23 == -1);
      v11 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    result = sub_21504626C((uint64_t)v30, *(_QWORD *)(v3 + 48) + 40 * v11, &qword_254DA75E8);
    ++*(_QWORD *)(v3 + 16);
  }
  v16 = v14 + 3;
  if (v16 >= v24)
  {
LABEL_36:
    result = swift_release_n();
    goto LABEL_38;
  }
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v24)
      goto LABEL_36;
    v15 = *(_QWORD *)(v5 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_21503C92C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75E0);
  v3 = sub_215130160();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v29)
      goto LABEL_35;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_35;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_35;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v21 = *v19;
    v20 = v19[1];
    sub_2151305A4();
    sub_2151305BC();
    if (v20 >> 60 != 15)
    {
      sub_21501F068(v21, v20);
      sub_21501F068(v21, v20);
      sub_21512F68C();
      sub_215045ED8(v21, v20);
    }
    result = sub_2151305EC();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v21;
    v13[1] = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_35:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_35;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_21503CC18()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  int64_t i;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v1 = v0;
  v2 = sub_21512F740();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v47 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v46 - v10;
  v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75D8);
  v13 = sub_215130160();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v14;
    return result;
  }
  v46 = v0;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v48 = v12 + 56;
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain();
  v21 = v18;
  for (i = 0; ; i = v52)
  {
    if (v21)
    {
      v51 = (v21 - 1) & v21;
      v52 = i;
      v24 = __clz(__rbit64(v21)) | (i << 6);
      goto LABEL_24;
    }
    v25 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v49)
      goto LABEL_36;
    v26 = *(_QWORD *)(v48 + 8 * v25);
    v27 = i + 1;
    if (!v26)
    {
      v27 = i + 2;
      if (i + 2 >= v49)
        goto LABEL_36;
      v26 = *(_QWORD *)(v48 + 8 * v27);
      if (!v26)
      {
        v27 = i + 3;
        if (i + 3 >= v49)
          goto LABEL_36;
        v26 = *(_QWORD *)(v48 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v51 = (v26 - 1) & v26;
    v52 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v12 + 48);
    v50 = *(_QWORD *)(v6 + 72);
    sub_21504670C(v29 + v50 * v24, (uint64_t)v11, qword_253F0D218);
    sub_2151305A4();
    sub_21504670C((uint64_t)v11, (uint64_t)v9, qword_253F0D218);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
    {
      sub_2151305BC();
    }
    else
    {
      v30 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v31 = v11;
      v32 = v14;
      v33 = v12;
      v34 = v6;
      v35 = v3;
      v36 = v47;
      v30(v47, v9, v2);
      sub_2151305BC();
      sub_2150461E4(&qword_254DA75C8, MEMORY[0x24BDCE930]);
      sub_21512F914();
      v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      v38 = v36;
      v3 = v35;
      v6 = v34;
      v12 = v33;
      v14 = v32;
      v11 = v31;
      v37(v38, v2);
    }
    result = sub_2151305EC();
    v39 = -1 << *(_BYTE *)(v14 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v19 + 8 * (v40 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v19 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v19 + 8 * v41);
      }
      while (v45 == -1);
      v23 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = sub_21504626C((uint64_t)v11, *(_QWORD *)(v14 + 48) + v23 * v50, qword_253F0D218);
    ++*(_QWORD *)(v14 + 16);
    v21 = v51;
  }
  v28 = i + 4;
  if (i + 4 >= v49)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v46;
    goto LABEL_38;
  }
  v26 = *(_QWORD *)(v48 + 8 * v28);
  if (v26)
  {
    v27 = i + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v49)
      goto LABEL_36;
    v26 = *(_QWORD *)(v48 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_21503D060()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75B8);
  v3 = sub_215130160();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v29)
      goto LABEL_35;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_35;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_35;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v21 = *v19;
    v20 = v19[1];
    sub_2151305A4();
    sub_2151305BC();
    if (v20)
    {
      swift_bridgeObjectRetain_n();
      sub_21512FB3C();
      swift_bridgeObjectRelease();
    }
    result = sub_2151305EC();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v21;
    v13[1] = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_35:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_35;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_21503D334()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75B0);
  result = sub_215130160();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v25 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v5 << 6);
      goto LABEL_24;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v25)
      goto LABEL_35;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v25)
        goto LABEL_35;
      v15 = *(_QWORD *)(v6 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v25)
          goto LABEL_35;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_24:
    v17 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v13);
    sub_2151305A4();
    if (v17 != 2)
      sub_2151305BC();
    sub_2151305BC();
    result = sub_2151305EC();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v10 + 8 * v20);
      }
      while (v24 == -1);
      v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v11) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  v16 = v14 + 3;
  if (v16 >= v25)
  {
LABEL_35:
    result = swift_release();
    v1 = v0;
    goto LABEL_37;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v25)
      goto LABEL_35;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_21503D5E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75A8);
  result = sub_215130160();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v28 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v15 >= v28)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v28)
        goto LABEL_35;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v28)
          goto LABEL_35;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 16 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(unsigned __int8 *)(v18 + 8);
    sub_2151305A4();
    sub_2151305BC();
    if (v20 != 1)
      sub_2151305E0();
    result = sub_2151305EC();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 16 * v11;
    *(_QWORD *)v12 = v19;
    *(_BYTE *)(v12 + 8) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_35:
    result = swift_release();
    v1 = v0;
    goto LABEL_37;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v28)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_21503D8A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75A0);
  result = sub_215130160();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v28 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v15 >= v28)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v28)
        goto LABEL_35;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v28)
          goto LABEL_35;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 8 * v14;
    v19 = *(_DWORD *)v18;
    v20 = *(unsigned __int8 *)(v18 + 4);
    sub_2151305A4();
    sub_2151305BC();
    if (v20 != 1)
      sub_2151305D4();
    result = sub_2151305EC();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 8 * v11;
    *(_DWORD *)v12 = v19;
    *(_BYTE *)(v12 + 4) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_35:
    result = swift_release();
    v1 = v0;
    goto LABEL_37;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v28)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_21503DB6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7598);
  result = sub_215130160();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v28 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v15 >= v28)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v28)
        goto LABEL_35;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v28)
          goto LABEL_35;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 4 * v14;
    v19 = *(_WORD *)v18;
    v20 = *(unsigned __int8 *)(v18 + 2);
    sub_2151305A4();
    sub_2151305BC();
    if (v20 != 1)
      sub_2151305C8();
    result = sub_2151305EC();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 4 * v11;
    *(_WORD *)v12 = v19;
    *(_BYTE *)(v12 + 2) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_35:
    result = swift_release();
    v1 = v0;
    goto LABEL_37;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v28)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_21503DE30()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7588);
  result = sub_215130160();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v28 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v15 >= v28)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v28)
        goto LABEL_35;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v28)
          goto LABEL_35;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 16 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(unsigned __int8 *)(v18 + 8);
    sub_2151305A4();
    sub_2151305BC();
    if (v20 != 1)
      sub_2151305B0();
    result = sub_2151305EC();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 16 * v11;
    *(_QWORD *)v12 = v19;
    *(_BYTE *)(v12 + 8) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_35:
    result = swift_release();
    v1 = v0;
    goto LABEL_37;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v28)
      goto LABEL_35;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_21503E0F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1D8);
  v3 = sub_215130160();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_2151305A4();
      sub_21512FB3C();
      result = sub_2151305EC();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21503E3CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7610);
  result = sub_215130160();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_215130598();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21503E64C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[48];

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75F8);
  v2 = sub_215130160();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v25 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v7 = (unint64_t)(v4 + 63) >> 6;
    v8 = v2 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v6)
      {
        v12 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v13 = v12 | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v14 >= v7)
          goto LABEL_36;
        v15 = v25[v14];
        ++v10;
        if (!v15)
        {
          v10 = v14 + 1;
          if (v14 + 1 >= v7)
            goto LABEL_36;
          v15 = v25[v10];
          if (!v15)
          {
            v10 = v14 + 2;
            if (v14 + 2 >= v7)
              goto LABEL_36;
            v15 = v25[v10];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v7)
              {
LABEL_36:
                swift_release();
                v24 = 1 << *(_BYTE *)(v1 + 32);
                if (v24 > 63)
                  bzero(v25, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v25 = -1 << v24;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v15 = v25[v16];
              if (!v15)
              {
                while (1)
                {
                  v10 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_42;
                  if (v10 >= v7)
                    goto LABEL_36;
                  v15 = v25[v10];
                  ++v16;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v10 = v16;
            }
          }
        }
LABEL_23:
        v6 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      sub_21504626C(*(_QWORD *)(v1 + 48) + 40 * v13, (uint64_t)v31, &qword_254DA75E8);
      sub_2151305A4();
      sub_21504670C((uint64_t)v31, (uint64_t)&v28, &qword_254DA75E8);
      if (*((_QWORD *)&v29 + 1))
      {
        v26[0] = v28;
        v26[1] = v29;
        v27 = v30;
        sub_2151305BC();
        sub_215130148();
        sub_215046238((uint64_t)v26);
      }
      else
      {
        sub_2151305BC();
      }
      result = sub_2151305EC();
      v17 = -1 << *(_BYTE *)(v3 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v8 + 8 * (v18 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v22 = v19 == v21;
          if (v19 == v21)
            v19 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v8 + 8 * v19);
        }
        while (v23 == -1);
        v11 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      result = sub_21504626C((uint64_t)v31, *(_QWORD *)(v3 + 48) + 40 * v11, &qword_254DA75E8);
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

uint64_t sub_21503E98C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75E0);
  v3 = sub_215130160();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_35;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_35;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_35;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_35:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_41;
                  if (v11 >= v8)
                    goto LABEL_35;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v21 = *v19;
      v20 = v19[1];
      sub_2151305A4();
      sub_2151305BC();
      if (v20 >> 60 != 15)
      {
        sub_21501F068(v21, v20);
        sub_21512F68C();
        sub_215045ED8(v21, v20);
      }
      result = sub_2151305EC();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v21;
      v13[1] = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21503ECA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v1 = v0;
  v2 = sub_21512F740();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v45 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)&v44 - v10;
  v11 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75D8);
  v12 = sub_215130160();
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v50 = v2;
    v51 = v3;
    v44 = v0;
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 56);
    v48 = (_QWORD *)(v11 + 56);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v47 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 56;
    result = swift_retain();
    v20 = 0;
    v21 = (uint64_t)v46;
    v49 = v11;
    v23 = v50;
    v22 = v51;
    while (1)
    {
      if (v17)
      {
        v25 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v52 = v20;
        v26 = v25 | (v20 << 6);
      }
      else
      {
        v27 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v27 >= v47)
          goto LABEL_36;
        v28 = v48[v27];
        v29 = v20 + 1;
        if (!v28)
        {
          v29 = v20 + 2;
          if (v20 + 2 >= v47)
            goto LABEL_36;
          v28 = v48[v29];
          if (!v28)
          {
            v29 = v20 + 3;
            if (v20 + 3 >= v47)
              goto LABEL_36;
            v28 = v48[v29];
            if (!v28)
            {
              v30 = v20 + 4;
              if (v20 + 4 >= v47)
              {
LABEL_36:
                swift_release();
                v1 = v44;
                v43 = 1 << *(_BYTE *)(v11 + 32);
                if (v43 > 63)
                  bzero(v48, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v48 = -1 << v43;
                *(_QWORD *)(v11 + 16) = 0;
                break;
              }
              v28 = v48[v30];
              if (!v28)
              {
                while (1)
                {
                  v29 = v30 + 1;
                  if (__OFADD__(v30, 1))
                    goto LABEL_42;
                  if (v29 >= v47)
                    goto LABEL_36;
                  v28 = v48[v29];
                  ++v30;
                  if (v28)
                    goto LABEL_23;
                }
              }
              v29 = v20 + 4;
            }
          }
        }
LABEL_23:
        v17 = (v28 - 1) & v28;
        v52 = v29;
        v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }
      v31 = *(_QWORD *)(v11 + 48);
      v32 = *(_QWORD *)(v6 + 72);
      sub_21504626C(v31 + v32 * v26, v21, qword_253F0D218);
      sub_2151305A4();
      sub_21504670C(v21, (uint64_t)v9, qword_253F0D218);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v9, 1, v23) == 1)
      {
        sub_2151305BC();
      }
      else
      {
        v33 = v6;
        v34 = v45;
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v45, v9, v23);
        sub_2151305BC();
        sub_2150461E4(&qword_254DA75C8, MEMORY[0x24BDCE930]);
        sub_21512F914();
        v35 = v34;
        v6 = v33;
        v21 = (uint64_t)v46;
        (*(void (**)(char *, uint64_t))(v22 + 8))(v35, v23);
      }
      result = sub_2151305EC();
      v36 = -1 << *(_BYTE *)(v13 + 32);
      v37 = result & ~v36;
      v38 = v37 >> 6;
      if (((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6))) != 0)
      {
        v24 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v39 = 0;
        v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v41 = v38 == v40;
          if (v38 == v40)
            v38 = 0;
          v39 |= v41;
          v42 = *(_QWORD *)(v18 + 8 * v38);
        }
        while (v42 == -1);
        v24 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(_QWORD *)(v18 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      result = sub_21504626C(v21, *(_QWORD *)(v13 + 48) + v24 * v32, qword_253F0D218);
      ++*(_QWORD *)(v13 + 16);
      v11 = v49;
      v20 = v52;
    }
  }
  result = swift_release();
  *v1 = v13;
  return result;
}

uint64_t sub_21503F114()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75B8);
  v3 = sub_215130160();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_35;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_35;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_35;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_35:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_41;
                  if (v11 >= v8)
                    goto LABEL_35;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v21 = *v19;
      v20 = v19[1];
      sub_2151305A4();
      sub_2151305BC();
      if (v20)
      {
        swift_bridgeObjectRetain();
        sub_21512FB3C();
        swift_bridgeObjectRelease();
      }
      result = sub_2151305EC();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v21;
      v13[1] = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21503F41C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75B0);
  result = sub_215130160();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v26 = (_QWORD *)(v2 + 56);
    v6 = 1 << *(_BYTE *)(v2 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v6 + 63) >> 6;
    v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v13 = v12 | (v5 << 6);
      }
      else
      {
        v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v14 >= v9)
          goto LABEL_35;
        v15 = v26[v14];
        ++v5;
        if (!v15)
        {
          v5 = v14 + 1;
          if (v14 + 1 >= v9)
            goto LABEL_35;
          v15 = v26[v5];
          if (!v15)
          {
            v5 = v14 + 2;
            if (v14 + 2 >= v9)
              goto LABEL_35;
            v15 = v26[v5];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v9)
              {
LABEL_35:
                v25 = 1 << *(_BYTE *)(v2 + 32);
                if (v25 > 63)
                  bzero(v26, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v25;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v15 = v26[v16];
              if (!v15)
              {
                while (1)
                {
                  v5 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_41;
                  if (v5 >= v9)
                    goto LABEL_35;
                  v15 = v26[v5];
                  ++v16;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v5 = v16;
            }
          }
        }
LABEL_23:
        v8 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v5 << 6);
      }
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v13);
      sub_2151305A4();
      if (v17 != 2)
        sub_2151305BC();
      sub_2151305BC();
      result = sub_2151305EC();
      v18 = -1 << *(_BYTE *)(v4 + 32);
      v19 = result & ~v18;
      v20 = v19 >> 6;
      if (((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v21 = 0;
        v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v23 = v20 == v22;
          if (v20 == v22)
            v20 = 0;
          v21 |= v23;
          v24 = *(_QWORD *)(v10 + 8 * v20);
        }
        while (v24 == -1);
        v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v11) = v17;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21503F700()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75A8);
  result = sub_215130160();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v29 = (_QWORD *)(v2 + 56);
    v6 = 1 << *(_BYTE *)(v2 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v6 + 63) >> 6;
    v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v15 >= v9)
          goto LABEL_35;
        v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v9)
            goto LABEL_35;
          v16 = v29[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v9)
              goto LABEL_35;
            v16 = v29[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_35:
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v28;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_41;
                  if (v5 >= v9)
                    goto LABEL_35;
                  v16 = v29[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v8 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 16 * v14;
      v19 = *(_QWORD *)v18;
      v20 = *(unsigned __int8 *)(v18 + 8);
      sub_2151305A4();
      sub_2151305BC();
      if (v20 != 1)
        sub_2151305E0();
      result = sub_2151305EC();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 16 * v11;
      *(_QWORD *)v12 = v19;
      *(_BYTE *)(v12 + 8) = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21503F9F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75A0);
  result = sub_215130160();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v29 = (_QWORD *)(v2 + 56);
    v6 = 1 << *(_BYTE *)(v2 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v6 + 63) >> 6;
    v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v15 >= v9)
          goto LABEL_35;
        v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v9)
            goto LABEL_35;
          v16 = v29[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v9)
              goto LABEL_35;
            v16 = v29[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_35:
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v28;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_41;
                  if (v5 >= v9)
                    goto LABEL_35;
                  v16 = v29[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v8 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 8 * v14;
      v19 = *(_DWORD *)v18;
      v20 = *(unsigned __int8 *)(v18 + 4);
      sub_2151305A4();
      sub_2151305BC();
      if (v20 != 1)
        sub_2151305D4();
      result = sub_2151305EC();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 8 * v11;
      *(_DWORD *)v12 = v19;
      *(_BYTE *)(v12 + 4) = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21503FCF0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7598);
  result = sub_215130160();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v29 = (_QWORD *)(v2 + 56);
    v6 = 1 << *(_BYTE *)(v2 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v6 + 63) >> 6;
    v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v15 >= v9)
          goto LABEL_35;
        v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v9)
            goto LABEL_35;
          v16 = v29[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v9)
              goto LABEL_35;
            v16 = v29[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_35:
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v28;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_41;
                  if (v5 >= v9)
                    goto LABEL_35;
                  v16 = v29[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v8 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 4 * v14;
      v19 = *(_WORD *)v18;
      v20 = *(unsigned __int8 *)(v18 + 2);
      sub_2151305A4();
      sub_2151305BC();
      if (v20 != 1)
        sub_2151305C8();
      result = sub_2151305EC();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 4 * v11;
      *(_WORD *)v12 = v19;
      *(_BYTE *)(v12 + 2) = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21503FFE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7588);
  result = sub_215130160();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v29 = (_QWORD *)(v2 + 56);
    v6 = 1 << *(_BYTE *)(v2 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v6 + 63) >> 6;
    v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v15 >= v9)
          goto LABEL_35;
        v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v9)
            goto LABEL_35;
          v16 = v29[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v9)
              goto LABEL_35;
            v16 = v29[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_35:
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v28;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_41;
                  if (v5 >= v9)
                    goto LABEL_35;
                  v16 = v29[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v8 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 16 * v14;
      v19 = *(_QWORD *)v18;
      v20 = *(unsigned __int8 *)(v18 + 8);
      sub_2151305A4();
      sub_2151305BC();
      if (v20 != 1)
        sub_2151305B0();
      result = sub_2151305EC();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 16 * v11;
      *(_QWORD *)v12 = v19;
      *(_BYTE *)(v12 + 8) = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_2150402DC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_21503E0F0();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_21503B004();
      goto LABEL_22;
    }
    sub_21503C118();
  }
  v11 = *v4;
  sub_2151305A4();
  sub_21512FB3C();
  result = sub_2151305EC();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_21513043C(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_2151304A8();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_21513043C();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_215040474(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_21503E3CC();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_21503B1B4();
      goto LABEL_14;
    }
    sub_21503C3C4();
  }
  v8 = *v3;
  result = sub_215130598();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_2151304A8();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_215040594(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  _OWORD v19[2];
  uint64_t v20;
  _BYTE v21[24];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_21503E64C();
    }
    else
    {
      if (v7 > v6)
      {
        sub_21503B348();
        goto LABEL_20;
      }
      sub_21503C624();
    }
    v8 = *v3;
    sub_2151305A4();
    sub_21504670C(a1, (uint64_t)&v28, &qword_254DA75E8);
    if (*((_QWORD *)&v29 + 1))
    {
      v26[0] = v28;
      v26[1] = v29;
      v27 = v30;
      sub_2151305BC();
      sub_215130148();
      sub_215046238((uint64_t)v26);
    }
    else
    {
      sub_2151305BC();
    }
    v9 = sub_2151305EC();
    v10 = -1 << *(_BYTE *)(v8 + 32);
    a2 = v9 & ~v10;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v11 = ~v10;
      do
      {
        sub_21504670C(*(_QWORD *)(v8 + 48) + 40 * a2, (uint64_t)&v28, &qword_254DA75E8);
        sub_21504670C((uint64_t)&v28, (uint64_t)v21, &qword_254DA75E8);
        sub_21504670C(a1, (uint64_t)&v23, &qword_254DA75E8);
        if (v22)
        {
          sub_21504670C((uint64_t)v21, (uint64_t)v26, &qword_254DA75E8);
          if (*((_QWORD *)&v24 + 1))
          {
            v19[0] = v23;
            v19[1] = v24;
            v20 = v25;
            v12 = MEMORY[0x2199DBC90](v26, v19);
            sub_215046238((uint64_t)v19);
            sub_215046238((uint64_t)v26);
            sub_215046750((uint64_t)v21, &qword_254DA75E8);
            sub_215046750((uint64_t)&v28, &qword_254DA75E8);
            if ((v12 & 1) != 0)
              goto LABEL_24;
            goto LABEL_14;
          }
          sub_215046238((uint64_t)v26);
        }
        else if (!*((_QWORD *)&v24 + 1))
        {
          goto LABEL_23;
        }
        sub_215046750((uint64_t)v21, &qword_254DA75F0);
        sub_215046750((uint64_t)&v28, &qword_254DA75E8);
LABEL_14:
        a2 = (a2 + 1) & v11;
      }
      while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_20:
  v13 = *v18;
  *(_QWORD *)(*v18 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_21504626C(a1, *(_QWORD *)(v13 + 48) + 40 * a2, &qword_254DA75E8);
  v15 = *(_QWORD *)(v13 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
LABEL_23:
    sub_215046750((uint64_t)v21, &qword_254DA75E8);
    sub_215046750((uint64_t)&v28, &qword_254DA75E8);
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75E8);
    result = sub_2151304A8();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 16) = v17;
  }
  return result;
}

uint64_t sub_215040850(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_21503E98C();
    }
    else
    {
      if (v9 > v8)
      {
        result = (uint64_t)sub_21503B520();
        goto LABEL_18;
      }
      sub_21503C92C();
    }
    v10 = *v4;
    sub_2151305A4();
    sub_2151305BC();
    if (a2 >> 60 != 15)
    {
      sub_21501F068(v7, a2);
      sub_21512F68C();
      sub_215045ED8(v7, a2);
    }
    result = sub_2151305EC();
    v11 = -1 << *(_BYTE *)(v10 + 32);
    a3 = result & ~v11;
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v20 = ~v11;
      do
      {
        v12 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * a3);
        v14 = *v12;
        v13 = v12[1];
        if (v13 >> 60 == 15)
        {
          if (a2 >> 60 == 15)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_254DA74E8);
            result = sub_2151304A8();
            __break(1u);
            break;
          }
        }
        else if (a2 >> 60 != 15)
        {
          __asm { BR              X10 }
        }
        sub_215046224(v7, a2);
        sub_215046224(v14, v13);
        sub_215045ED8(v14, v13);
        result = sub_215045ED8(v7, a2);
        a3 = (a3 + 1) & v20;
      }
      while (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_18:
  v15 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v16 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * a3);
  *v16 = v7;
  v16[1] = a2;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
    JUMPOUT(0x215041328);
  }
  *(_QWORD *)(v15 + 16) = v19;
  return result;
}

uint64_t sub_2150413F8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;

  v49 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75C0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21512F740();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v42 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v41 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v43 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v38 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v38 - v19;
  v21 = *(_QWORD *)(*v3 + 16);
  v22 = *(_QWORD *)(*v3 + 24);
  v39 = v3;
  if (v22 <= v21 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      v38 = v18;
      sub_21503ECA4();
    }
    else
    {
      if (v22 > v21)
      {
        sub_21503B6D0();
        goto LABEL_21;
      }
      v38 = v18;
      sub_21503CC18();
    }
    v48 = *v3;
    sub_2151305A4();
    sub_21504670C(v49, (uint64_t)v20, qword_253F0D218);
    v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    if (v47(v20, 1, v9) == 1)
    {
      sub_2151305BC();
    }
    else
    {
      v23 = v42;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v42, v20, v9);
      sub_2151305BC();
      sub_2150461E4(&qword_254DA75C8, MEMORY[0x24BDCE930]);
      sub_21512F914();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
    }
    v24 = (uint64_t)v43;
    v25 = sub_2151305EC();
    v26 = -1 << *(_BYTE *)(v48 + 32);
    a2 = v25 & ~v26;
    v46 = v48 + 56;
    if (((*(_QWORD *)(v48 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v45 = ~v26;
      v44 = *(_QWORD *)(v41 + 72);
      v40 = v17;
      do
      {
        sub_21504670C(*(_QWORD *)(v48 + 48) + v44 * a2, (uint64_t)v17, qword_253F0D218);
        v31 = (uint64_t)&v8[*(int *)(v6 + 48)];
        sub_21504670C((uint64_t)v17, (uint64_t)v8, qword_253F0D218);
        sub_21504670C(v49, v31, qword_253F0D218);
        v32 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v47;
        if (v47(v8, 1, v9) == 1)
        {
          if (v32(v31, 1, v9) == 1)
            goto LABEL_24;
        }
        else
        {
          sub_21504670C((uint64_t)v8, v24, qword_253F0D218);
          if (v32(v31, 1, v9) != 1)
          {
            v27 = v42;
            (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v42, v31, v9);
            sub_2150461E4(&qword_254DA75D0, MEMORY[0x24BDCE958]);
            v28 = sub_21512FA58();
            v29 = *(void (**)(char *, uint64_t))(v10 + 8);
            v30 = v27;
            v17 = v40;
            v29(v30, v9);
            v29(v43, v9);
            v24 = (uint64_t)v43;
            sub_215046750((uint64_t)v8, qword_253F0D218);
            sub_215046750((uint64_t)v17, qword_253F0D218);
            if ((v28 & 1) != 0)
              goto LABEL_25;
            goto LABEL_14;
          }
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v24, v9);
        }
        sub_215046750((uint64_t)v8, &qword_254DA75C0);
        sub_215046750((uint64_t)v17, qword_253F0D218);
LABEL_14:
        a2 = (a2 + 1) & v45;
      }
      while (((*(_QWORD *)(v46 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_21:
  v33 = *v39;
  *(_QWORD *)(*v39 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_21504626C(v49, *(_QWORD *)(v33 + 48) + *(_QWORD *)(v41 + 72) * a2, qword_253F0D218);
  v35 = *(_QWORD *)(v33 + 16);
  v36 = __OFADD__(v35, 1);
  v37 = v35 + 1;
  if (v36)
  {
    __break(1u);
LABEL_24:
    sub_215046750((uint64_t)v8, qword_253F0D218);
    sub_215046750((uint64_t)v17, qword_253F0D218);
LABEL_25:
    result = sub_2151304A8();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v33 + 16) = v37;
  }
  return result;
}

uint64_t sub_215041894(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_21503F114();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_21503B8F8();
      goto LABEL_22;
    }
    sub_21503D060();
  }
  v11 = *v4;
  sub_2151305A4();
  sub_2151305BC();
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_21512FB3C();
    swift_bridgeObjectRelease();
  }
  result = sub_2151305EC();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v11 + 48);
    do
    {
      v16 = (_QWORD *)(v15 + 16 * a3);
      v17 = v16[1];
      if (v17)
      {
        if (a2)
        {
          v18 = *v16 == v8 && v17 == a2;
          if (v18 || (result = sub_21513043C(), (result & 1) != 0))
          {
LABEL_21:
            __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D020);
            result = sub_2151304A8();
            __break(1u);
            break;
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_21;
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_22:
  v19 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v20 = (uint64_t *)(*(_QWORD *)(v19 + 48) + 16 * a3);
  *v20 = v8;
  v20[1] = a2;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v23;
  return result;
}

uint64_t sub_215041A48(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_18;
  if ((a3 & 1) != 0)
  {
    sub_21503F41C();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_21503BAA4();
      goto LABEL_18;
    }
    sub_21503D334();
  }
  v8 = *v3;
  sub_2151305A4();
  if (v5 != 2)
    sub_2151305BC();
  sub_2151305BC();
  result = sub_2151305EC();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    do
    {
      v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 48) + a2);
      if (v11 == 2)
      {
        if (v5 == 2)
          goto LABEL_17;
      }
      else if (v5 != 2 && ((((v5 & 1) == 0) ^ v11) & 1) != 0)
      {
LABEL_17:
        __swift_instantiateConcreteTypeFromMangledName(&qword_254DA74E0);
        result = sub_2151304A8();
        __break(1u);
        break;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_18:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_215041BDC(uint64_t result, char a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  double v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v7 = *(double *)&result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_18;
  if ((a4 & 1) != 0)
  {
    sub_21503F700();
  }
  else
  {
    if (v9 > v8)
    {
      result = (uint64_t)sub_21503BF7C(&qword_254DA75A8);
      goto LABEL_18;
    }
    sub_21503D5E4();
  }
  v10 = *v4;
  sub_2151305A4();
  sub_2151305BC();
  if ((a2 & 1) == 0)
    sub_2151305E0();
  result = sub_2151305EC();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a3 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      v13 = *(_QWORD *)(v10 + 48) + 16 * a3;
      if ((*(_BYTE *)(v13 + 8) & 1) != 0)
      {
        if ((a2 & 1) != 0)
          goto LABEL_17;
      }
      else if ((a2 & 1) == 0 && *(double *)v13 == v7)
      {
LABEL_17:
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D030);
        result = sub_2151304A8();
        __break(1u);
        break;
      }
      a3 = (a3 + 1) & v12;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_18:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v15 = *(_QWORD *)(v14 + 48) + 16 * a3;
  *(double *)v15 = v7;
  *(_BYTE *)(v15 + 8) = a2 & 1;
  v16 = *(_QWORD *)(v14 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v18;
  return result;
}

uint64_t sub_215041D7C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_18;
  if ((a3 & 1) != 0)
  {
    sub_21503F9F8();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_21503BC34();
      goto LABEL_18;
    }
    sub_21503D8A8();
  }
  v8 = *v3;
  sub_2151305A4();
  sub_2151305BC();
  if ((v5 & 0x100000000) == 0)
    sub_2151305D4();
  result = sub_2151305EC();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    do
    {
      v11 = *(_QWORD *)(v8 + 48) + 8 * a2;
      if ((*(_BYTE *)(v11 + 4) & 1) != 0)
      {
        if ((v5 & 0x100000000) != 0)
          goto LABEL_17;
      }
      else if ((v5 & 0x100000000) == 0 && *(float *)v11 == *(float *)&v5)
      {
LABEL_17:
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D038);
        result = sub_2151304A8();
        __break(1u);
        break;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_18:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v13 = *(_QWORD *)(v12 + 48) + 8 * a2;
  *(_DWORD *)v13 = v5;
  *(_BYTE *)(v13 + 4) = BYTE4(v5) & 1;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v16;
  return result;
}

uint64_t sub_215041F10(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_18;
  if ((a3 & 1) != 0)
  {
    sub_21503FCF0();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_21503BDD8();
      goto LABEL_18;
    }
    sub_21503DB6C();
  }
  v8 = *v3;
  sub_2151305A4();
  sub_2151305BC();
  if ((v5 & 0x10000) == 0)
    sub_2151305C8();
  result = sub_2151305EC();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    _H0 = v5;
    __asm { FCVT            S0, H0 }
    do
    {
      v17 = *(_QWORD *)(v8 + 48) + 4 * a2;
      if ((*(_BYTE *)(v17 + 2) & 1) != 0)
      {
        if ((v5 & 0x10000) != 0)
          goto LABEL_17;
      }
      else if ((v5 & 0x10000) == 0)
      {
        _H1 = *(_WORD *)v17;
        __asm { FCVT            S1, H1 }
        if (_S1 == _S0)
        {
LABEL_17:
          __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7590);
          result = sub_2151304A8();
          __break(1u);
          break;
        }
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_18:
  v20 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v21 = *(_QWORD *)(v20 + 48) + 4 * a2;
  *(_WORD *)v21 = v5;
  *(_BYTE *)(v21 + 2) = BYTE2(v5) & 1;
  v22 = *(_QWORD *)(v20 + 16);
  _VF = __OFADD__(v22, 1);
  v23 = v22 + 1;
  if (_VF)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v23;
  return result;
}

uint64_t sub_2150420A4(uint64_t result, char a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_18;
  if ((a4 & 1) != 0)
  {
    sub_21503FFE8();
  }
  else
  {
    if (v9 > v8)
    {
      result = (uint64_t)sub_21503BF7C(&qword_254DA7588);
      goto LABEL_18;
    }
    sub_21503DE30();
  }
  v10 = *v4;
  sub_2151305A4();
  sub_2151305BC();
  if ((a2 & 1) == 0)
    sub_2151305B0();
  result = sub_2151305EC();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a3 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      v13 = *(_QWORD *)(v10 + 48) + 16 * a3;
      if ((*(_BYTE *)(v13 + 8) & 1) != 0)
      {
        if ((a2 & 1) != 0)
          goto LABEL_17;
      }
      else if ((a2 & 1) == 0 && *(_QWORD *)v13 == v7)
      {
LABEL_17:
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D040);
        result = sub_2151304A8();
        __break(1u);
        break;
      }
      a3 = (a3 + 1) & v12;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_18:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v15 = *(_QWORD *)(v14 + 48) + 16 * a3;
  *(_QWORD *)v15 = v7;
  *(_BYTE *)(v15 + 8) = a2 & 1;
  v16 = *(_QWORD *)(v14 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v18;
  return result;
}

uint64_t sub_21504223C(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v10 = v5;
  if (!a1[2] || a2 == a3)
    return swift_bridgeObjectRelease();
  if (a3 < a2)
  {
    __break(1u);
LABEL_16:
    sub_21503671C();
    if ((v10 & 1) == 0)
      goto LABEL_17;
    goto LABEL_13;
  }
  v6 = a5;
  v48 = a1[2];
  v9 = a1[4];
  v8 = a1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = a2 - a3;
  v47 = a3;
  if (a2 >= a3)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v16 = (_QWORD *)*v6;
  v7 = sub_21502F898(v9, v8, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
  v18 = v16[2];
  v19 = (v17 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v10 = v17;
  if (v16[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      if ((v17 & 1) == 0)
        goto LABEL_17;
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  sub_21502FFAC(v20, a4 & 1);
  v21 = sub_21502F898(v9, v8, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
  if ((v10 & 1) == (v22 & 1))
  {
    v7 = v21;
    if ((v10 & 1) == 0)
    {
LABEL_17:
      v24 = (_QWORD *)*v6;
      *(_QWORD *)(*v6 + 8 * (v7 >> 6) + 64) |= 1 << v7;
      v25 = (uint64_t *)(v24[6] + 16 * v7);
      *v25 = v9;
      v25[1] = v8;
      *(_QWORD *)(v24[7] + 8 * v7) = a2;
      v26 = v24[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      v24[2] = v28;
      if (v48 == 1)
        return swift_bridgeObjectRelease_n();
      if (a1[2] < 2uLL)
        goto LABEL_37;
      if (a2 + 1 == v47)
        return swift_bridgeObjectRelease_n();
      v30 = a1[6];
      v29 = a1[7];
      swift_bridgeObjectRetain();
      if (a2 + 1 < v47)
      {
        v31 = a1 + 9;
        v32 = 2;
        while (1)
        {
          v33 = (_QWORD *)*v6;
          v34 = sub_21502F898(v30, v29, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
          v36 = v33[2];
          v37 = (v35 & 1) == 0;
          v27 = __OFADD__(v36, v37);
          v38 = v36 + v37;
          if (v27)
            goto LABEL_35;
          v39 = v35;
          if (v33[3] < v38)
          {
            sub_21502FFAC(v38, 1);
            v34 = sub_21502F898(v30, v29, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2150344AC);
            if ((v39 & 1) != (v40 & 1))
              goto LABEL_38;
          }
          if ((v39 & 1) != 0)
            goto LABEL_13;
          v41 = a2 + v32;
          v42 = (_QWORD *)*v6;
          *(_QWORD *)(*v6 + 8 * (v34 >> 6) + 64) |= 1 << v34;
          v43 = (uint64_t *)(v42[6] + 16 * v34);
          *v43 = v30;
          v43[1] = v29;
          *(_QWORD *)(v42[7] + 8 * v34) = a2 + v32 - 1;
          v44 = v42[2];
          v27 = __OFADD__(v44, 1);
          v45 = v44 + 1;
          if (v27)
            goto LABEL_36;
          v42[2] = v45;
          if (v48 == v32)
            return swift_bridgeObjectRelease_n();
          if (v32 >= a1[2])
            goto LABEL_37;
          if (!(v46 + v32))
            return swift_bridgeObjectRelease_n();
          v30 = *(v31 - 1);
          v29 = *v31;
          swift_bridgeObjectRetain();
          if (v41 >= a2)
          {
            ++v32;
            v31 += 2;
            if (v41 < v47)
              continue;
          }
          goto LABEL_34;
        }
      }
      goto LABEL_34;
    }
LABEL_13:
    v23 = swift_allocError();
    swift_willThrow();
    MEMORY[0x2199DC41C](v23);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7840);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return MEMORY[0x2199DC410](v23);
    }
    goto LABEL_39;
  }
LABEL_38:
  sub_2151304B4();
  __break(1u);
LABEL_39:
  sub_215130178();
  sub_21512FB90();
  sub_2151302A4();
  sub_21512FB90();
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t sub_215042698(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v7)
        return swift_release();
      v15 = *(_QWORD *)(v3 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v7)
          return swift_release();
        v15 = *(_QWORD *)(v3 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v7)
            return swift_release();
          v15 = *(_QWORD *)(v3 + 8 * v8);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_215049010(v12, v13);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v7)
    return swift_release();
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_21504282C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t isStackAllocationSafe;
  char v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;

  v2 = a2;
  v43 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v37 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v35 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v36 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain();
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36)
          goto LABEL_47;
        v13 = *(_QWORD *)(v37 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v36)
            goto LABEL_47;
          v13 = *(_QWORD *)(v37 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v36)
              goto LABEL_47;
            v13 = *(_QWORD *)(v37 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v36)
                goto LABEL_47;
              v13 = *(_QWORD *)(v37 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_21504647C();
                  return v2;
                }
                v13 = *(_QWORD *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v36)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v37 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      sub_2151305A4();
      swift_bridgeObjectRetain();
      sub_21512FB3C();
      v19 = sub_2151305EC();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease();
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (sub_21513043C() & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      v38 = a1;
      v39 = v37;
      v40 = v35;
      v41 = v9;
      v42 = v7;
    }
    else
    {
      v25 = ~v20;
      do
      {
        v21 = (v21 + 1) & v25;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v26 = (_QWORD *)(v22 + 16 * v21);
        v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (sub_21513043C() & 1) == 0);
      v38 = a1;
      v39 = v37;
      v40 = v35;
      v41 = v9;
      v42 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    v29 = *(_BYTE *)(v2 + 32);
    v30 = (unint64_t)((1 << v29) + 63) >> 6;
    v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      v32 = sub_215042C94((uint64_t)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), v30, v2, v21, &v38);
      swift_release();
      sub_21504647C();
    }
    else
    {
      v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      v32 = sub_215042C94((uint64_t)v33, v30, v2, v21, &v38);
      swift_release();
      sub_21504647C();
      MEMORY[0x2199DC578](v33, -1, -1);
    }
    return v32;
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t sub_215042C94(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;

  v7 = *(_QWORD *)(a3 + 16);
  v38 = (unint64_t *)result;
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v39 = a3 + 56;
  while (2)
  {
    v37 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_45;
          }
          v14 = (unint64_t)(a5[2] + 64) >> 6;
          v15 = a5[3];
          if (v13 >= v14)
            goto LABEL_43;
          v16 = a5[1];
          v17 = *(_QWORD *)(v16 + 8 * v13);
          if (!v17)
          {
            v15 = v9 + 1;
            if (v9 + 2 >= v14)
              goto LABEL_43;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              v13 = v9 + 2;
            }
            else
            {
              v15 = v9 + 2;
              if (v9 + 3 >= v14)
                goto LABEL_43;
              v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                v13 = v9 + 3;
              }
              else
              {
                v13 = v9 + 4;
                v15 = v9 + 3;
                if (v9 + 4 >= v14)
                  goto LABEL_43;
                v17 = *(_QWORD *)(v16 + 8 * v13);
                if (!v17)
                {
                  v15 = v14 - 1;
                  v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    v17 = *(_QWORD *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain();
                  return sub_215042F70(v38, a2, v37, a3);
                }
              }
            }
          }
LABEL_21:
          v11 = (v17 - 1) & v17;
          v12 = __clz(__rbit64(v17)) + (v13 << 6);
          v9 = v13;
        }
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        sub_2151305A4();
        swift_bridgeObjectRetain();
        sub_21512FB3C();
        v22 = sub_2151305EC();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v39 + 8 * (v24 >> 6))) != 0)
          break;
LABEL_3:
        result = swift_bridgeObjectRelease();
      }
      v27 = *(_QWORD *)(a3 + 48);
      v28 = (_QWORD *)(v27 + 16 * v24);
      v29 = *v28 == v21 && v28[1] == v20;
      if (!v29 && (sub_21513043C() & 1) == 0)
      {
        v31 = ~v23;
        for (i = v24 + 1; ; i = v33 + 1)
        {
          v33 = i & v31;
          if (((*(_QWORD *)(v39 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0)
            break;
          v34 = (_QWORD *)(v27 + 16 * v33);
          v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (sub_21513043C() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v25 = v33 >> 6;
            v26 = 1 << v33;
            goto LABEL_29;
          }
        }
        goto LABEL_3;
      }
      result = swift_bridgeObjectRelease();
LABEL_29:
      v30 = v38[v25];
      v38[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    v8 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_45:
      __break(1u);
      return result;
    }
    if (v37 != 1)
      continue;
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t sub_215042F70(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1D8);
  result = sub_21513016C();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_2151305A4();
    swift_bridgeObjectRetain();
    sub_21512FB3C();
    result = sub_2151305EC();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_215043204(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_215038BAC(0, v2, 0);
    v3 = v21;
    v6 = (_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(unsigned __int8 *)(a2 + 40);
    do
    {
      v11 = v6[3];
      v10 = v6[4];
      __swift_project_boxed_opaque_existential_1(v6, v11);
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 160))(v19, v7, v8, v9, v11);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v21 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_215038BAC(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v21;
      }
      v14 = *(_QWORD *)(v3 + 16);
      v13 = *(_QWORD *)(v3 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_215038BAC((char *)(v13 > 1), v14 + 1, 1);
        v3 = v21;
      }
      *(_QWORD *)(v3 + 16) = v14 + 1;
      v15 = v3 + 40 * v14;
      v16 = v19[0];
      v17 = v19[1];
      *(_QWORD *)(v15 + 64) = v20;
      *(_OWORD *)(v15 + 32) = v16;
      *(_OWORD *)(v15 + 48) = v17;
      v6 += 5;
      --v2;
    }
    while (v2);
  }
  return v3;
}

unint64_t sub_215043350(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_21502DABC((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 16 * v6;
  v14 = (const void *)(v4 + 32 + 16 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 16 * v13)
    result = (unint64_t)memmove((void *)result, v14, 16 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_215043454(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40[2];
  _QWORD v41[3];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D438);
  v3 = swift_allocObject();
  sub_21502D240(v2, v41);
  v4 = (uint64_t *)v41[0];
  v5 = v41[1];
  *(_QWORD *)(v3 + 16) = v41[0];
  *(_QWORD *)(v3 + 24) = v5;
  if (v2)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v6 = (_BYTE *)(a1 + 40);
    while (v4)
    {
      v20 = *((_QWORD *)v6 - 1);
      v21 = *v6;
      v22 = *v4;
      v23 = v4[1];
      if (v23 >= *v4)
      {
        v18 = __OFADD__(v23, 1);
        v26 = v23 + 1;
        if (v18)
        {
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
          break;
        }
        if (v22 < v26)
        {
          if (v22 + 0x4000000000000000 < 0)
            goto LABEL_56;
          if (2 * v22 <= v26)
            v22 = v26;
          else
            v22 *= 2;
        }
        sub_2150975F0((uint64_t)v4, v22, v40);
        if (v4[1] < 0)
          goto LABEL_52;
        MEMORY[0x2199DC578](v4, -1, -1);
        v4 = (uint64_t *)v40[0];
        v27 = v40[1];
        *(_QWORD *)(v3 + 16) = v40[0];
        *(_QWORD *)(v3 + 24) = v27;
        if ((v21 & 1) != 0)
        {
          if (!v4)
            goto LABEL_60;
          v28 = v4[2];
          v18 = __OFADD__(v28, 1);
          v29 = v28 + 1;
          if (v18)
            goto LABEL_57;
          v4[2] = v29;
        }
        else
        {
          if (!v4)
            goto LABEL_61;
          v30 = *v4 + 7;
          if (__OFADD__(*v4, 7))
            goto LABEL_58;
          v31 = v4 + 8;
          if (v30 < 0)
            v30 = *v4 + 14;
          v32 = v30 >> 3;
          v33 = v32 - 1;
          v10 = v32 < 1;
          v34 = v32 + 62;
          if (!v10)
            v34 = v33;
          *(_QWORD *)((char *)&v31[v4[1] + 8] + (v34 & 0xFFFFFFFFFFFFC0)) = v20;
          v35 = v4[1];
          v36 = v35 + 7;
          if (v35 >= 0)
            v36 = v4[1];
          v37 = v35 - (v36 & 0xFFFFFFFFFFFFFFF8);
          if (v37 >= 0)
            v38 = 1 << v37;
          else
            v38 = 0;
          *((_BYTE *)v31 + (v36 >> 3)) |= v38;
        }
        v39 = v4[1];
        v18 = __OFADD__(v39, 1);
        v19 = v39 + 1;
        if (v18)
          goto LABEL_53;
      }
      else if ((*v6 & 1) != 0)
      {
        v24 = v4[2];
        v18 = __OFADD__(v24, 1);
        v25 = v24 + 1;
        if (v18)
          goto LABEL_55;
        v4[2] = v25;
        v18 = __OFADD__(v23, 1);
        v19 = v23 + 1;
        if (v18)
          goto LABEL_51;
      }
      else
      {
        v7 = v22 + 7;
        if (__OFADD__(v22, 7))
          goto LABEL_54;
        v8 = v4 + 8;
        if (v7 < 0)
          v7 = v22 + 14;
        v9 = v7 >> 3;
        v11 = v9 - 1;
        v10 = v9 < 1;
        v12 = v9 + 62;
        if (!v10)
          v12 = v11;
        *(_QWORD *)((char *)&v8[v23 + 8] + (v12 & 0xFFFFFFFFFFFFC0)) = v20;
        v13 = v4[1];
        v14 = v13 + 7;
        if (v13 >= 0)
          v14 = v4[1];
        v15 = v13 - (v14 & 0xFFFFFFFFFFFFFFF8);
        if (v15 >= 0)
          v16 = 1 << v15;
        else
          v16 = 0;
        *((_BYTE *)v8 + (v14 >> 3)) |= v16;
        v17 = v4[1];
        v18 = __OFADD__(v17, 1);
        v19 = v17 + 1;
        if (v18)
          goto LABEL_51;
      }
      v4[1] = v19;
      v6 += 16;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
  }
}

uint64_t sub_215043700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2150439CC(a1, a2, a3);
}

uint64_t sub_215043714(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_21512FDB8();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_2150390D0(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_2150437A8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2199DC4B8](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_215043800()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_254DA74C8;
  if (!qword_254DA74C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254DA74C0);
    v2 = sub_21504386C();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BEE2C48], v1, v3);
    atomic_store(result, (unint64_t *)&qword_254DA74C8);
  }
  return result;
}

unint64_t sub_21504386C()
{
  unint64_t result;

  result = qword_254DA74D0;
  if (!qword_254DA74D0)
  {
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_254DA74D0);
  }
  return result;
}

uint64_t sub_2150438B0(uint64_t result, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_21502DEE0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7858);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_19;
  v12 = v4[2];
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_25;
  v15 = (char *)&v4[4 * a2 + 4];
  if (v6 != a2 || &v4[4 * v6 + 4] >= (_QWORD *)&v15[32 * v14])
    result = (uint64_t)memmove(&v4[4 * v6 + 4], v15, 32 * v14);
  v16 = v4[2];
  v13 = __OFADD__(v16, v8);
  v17 = v16 - v7;
  if (!v13)
  {
    v4[2] = v17;
LABEL_19:
    *(_QWORD *)v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_2150439CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = 0;
  v5 = *(_QWORD *)(result + 16);
  v6 = result + 56;
  v20 = v5;
  v21 = MEMORY[0x24BEE4AF8];
  v19 = result + 56;
LABEL_2:
  if (v4 > v5)
    v5 = v4;
  v7 = -(uint64_t)v5;
  v8 = v4 + 1;
  v9 = (uint64_t *)(v6 + 32 * v4);
  while (1)
  {
    if (v23 + v8 == 1)
      return v21;
    v4 = v8++;
    if (v7 + v8 == 2)
      break;
    v10 = *(v9 - 3);
    v11 = *(v9 - 2);
    v13 = *(v9 - 1);
    v12 = *v9;
    if (v10 == a2 && v11 == a3)
    {
      v10 = a2;
      v11 = a3;
LABEL_14:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = v21;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_215038C00(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v15 = v21;
      }
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_215038C00((_QWORD *)(v16 > 1), v17 + 1, 1);
        v15 = v21;
      }
      *(_QWORD *)(v15 + 16) = v17 + 1;
      v21 = v15;
      v18 = (_QWORD *)(v15 + 32 * v17);
      v18[4] = v10;
      v18[5] = v11;
      v18[6] = v13;
      v18[7] = v12;
      v6 = v19;
      v5 = v20;
      goto LABEL_2;
    }
    v9 += 4;
    result = sub_21513043C();
    if ((result & 1) != 0)
      goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_215043B48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];
  _QWORD v31[3];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D428);
  v3 = swift_allocObject();
  sub_21502CF50(v2, v31);
  v4 = (uint64_t *)v31[0];
  v5 = v31[1];
  *(_QWORD *)(v3 + 16) = v31[0];
  *(_QWORD *)(v3 + 24) = v5;
  if (!v2)
    return v3;
  swift_bridgeObjectRetain();
  swift_retain();
  result = swift_beginAccess();
  v7 = (uint64_t *)(a1 + 40);
  while (v4)
  {
    v11 = *(v7 - 1);
    v10 = *v7;
    v8 = *v4;
    v12 = v4[1];
    if (v12 >= *v4)
    {
      v25 = __OFADD__(v12, 1);
      v27 = v12 + 1;
      if (v25)
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        break;
      }
      if (v8 < v27)
      {
        if (v8 + 0x4000000000000000 < 0)
          goto LABEL_36;
        if (2 * v8 <= v27)
          v8 = v27;
        else
          v8 *= 2;
      }
      swift_bridgeObjectRetain();
      sub_2150977DC((uint64_t)v4, v8, v30);
      sub_2150983B8(v4);
      v4 = (uint64_t *)v30[0];
      v9 = v30[1];
      *(_QWORD *)(v3 + 16) = v30[0];
      *(_QWORD *)(v3 + 24) = v9;
      sub_215098B5C(v11, v10, v4);
      result = swift_bridgeObjectRelease();
    }
    else
    {
      if (v10)
      {
        v13 = v8 + 7;
        if (__OFADD__(v8, 7))
          goto LABEL_35;
        v14 = v4 + 8;
        if (v13 < 0)
          v13 = v8 + 14;
        v15 = v13 >> 3;
        v17 = v15 - 1;
        v16 = v15 < 1;
        v18 = v15 + 62;
        if (!v16)
          v18 = v17;
        v19 = (unint64_t)&v14[2 * v12] + (v18 & 0xFFFFFFFFFFFFFFC0);
        *(_QWORD *)(v19 + 64) = v11;
        *(_QWORD *)(v19 + 72) = v10;
        v20 = v4[1];
        v21 = v20 + 7;
        if (v20 >= 0)
          v21 = v4[1];
        v22 = v20 - (v21 & 0xFFFFFFFFFFFFFFF8);
        if (v22 >= 0)
          v23 = 1 << v22;
        else
          v23 = 0;
        *((_BYTE *)v14 + (v21 >> 3)) |= v23;
        v24 = v4[1];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_34;
      }
      else
      {
        v28 = v4[2];
        v25 = __OFADD__(v28, 1);
        v29 = v28 + 1;
        if (v25)
          goto LABEL_37;
        v4[2] = v29;
        v25 = __OFADD__(v12, 1);
        v26 = v12 + 1;
        if (v25)
          goto LABEL_34;
      }
      v4[1] = v26;
      result = swift_bridgeObjectRetain();
    }
    v7 += 2;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v3;
    }
  }
  __break(1u);
  return result;
}

void sub_215043D68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38[2];
  _QWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D430);
  v3 = swift_allocObject();
  sub_21502D240(v2, v39);
  v4 = (uint64_t *)v39[0];
  v5 = v39[1];
  *(_QWORD *)(v3 + 16) = v39[0];
  *(_QWORD *)(v3 + 24) = v5;
  if (v2)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v6 = (_BYTE *)(a1 + 40);
    while (v4)
    {
      v19 = *((_QWORD *)v6 - 1);
      v20 = *v6;
      v21 = *v4;
      v22 = v4[1];
      if (v22 >= *v4)
      {
        v17 = __OFADD__(v22, 1);
        v25 = v22 + 1;
        if (v17)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          break;
        }
        if (v21 < v25)
        {
          if (v21 + 0x4000000000000000 < 0)
            goto LABEL_52;
          if (2 * v21 <= v25)
            v21 = v25;
          else
            v21 *= 2;
        }
        sub_2150975F0((uint64_t)v4, v21, v38);
        if (v4[1] < 0)
          goto LABEL_48;
        MEMORY[0x2199DC578](v4, -1, -1);
        v4 = (uint64_t *)v38[0];
        v26 = v38[1];
        *(_QWORD *)(v3 + 16) = v38[0];
        *(_QWORD *)(v3 + 24) = v26;
        if ((v20 & 1) != 0)
        {
          if (!v4)
            goto LABEL_56;
          v27 = v4[2];
          v17 = __OFADD__(v27, 1);
          v28 = v27 + 1;
          if (v17)
            goto LABEL_53;
          v4[2] = v28;
        }
        else
        {
          if (!v4)
            goto LABEL_57;
          v29 = *v4 + 7;
          if (__OFADD__(*v4, 7))
            goto LABEL_54;
          v30 = v4 + 8;
          if (v29 < 0)
            v29 = *v4 + 14;
          v31 = v29 >> 3;
          v32 = v31 - 1;
          v10 = v31 < 1;
          v33 = v31 + 62;
          if (!v10)
            v33 = v32;
          v34 = v4[1];
          *(_QWORD *)((char *)&v30[v34 + 8] + (v33 & 0xFFFFFFFFFFFFC0)) = v19;
          v35 = v34 - (v33 & 0xFFFFFFFFFFFFFFF8);
          if (v35 >= 0)
            v36 = 1 << v35;
          else
            v36 = 0;
          *((_BYTE *)v30 + v34 / 8) |= v36;
        }
        v37 = v4[1];
        v17 = __OFADD__(v37, 1);
        v18 = v37 + 1;
        if (v17)
          goto LABEL_49;
      }
      else if ((*v6 & 1) != 0)
      {
        v23 = v4[2];
        v17 = __OFADD__(v23, 1);
        v24 = v23 + 1;
        if (v17)
          goto LABEL_51;
        v4[2] = v24;
        v17 = __OFADD__(v22, 1);
        v18 = v22 + 1;
        if (v17)
          goto LABEL_47;
      }
      else
      {
        v7 = v21 + 7;
        if (__OFADD__(v21, 7))
          goto LABEL_50;
        v8 = v4 + 8;
        if (v7 < 0)
          v7 = v21 + 14;
        v9 = v7 >> 3;
        v11 = v9 - 1;
        v10 = v9 < 1;
        v12 = v9 + 62;
        if (!v10)
          v12 = v11;
        *(_QWORD *)((char *)&v8[v22 + 8] + (v12 & 0xFFFFFFFFFFFFC0)) = v19;
        v13 = v22 / 8;
        v14 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
        if (v14 >= 0)
          v15 = 1 << v14;
        else
          v15 = 0;
        *((_BYTE *)v8 + v13) |= v15;
        v16 = v4[1];
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
          goto LABEL_47;
      }
      v4[1] = v18;
      v6 += 16;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
  }
}

uint64_t sub_21504400C(uint64_t a1)
{
  return sub_215044B64(a1, &qword_254DA7570, (void (*)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_2150977D8, sub_2150983AC, (void (*)(uint64_t, uint64_t *, uint64_t))sub_215098A9C);
}

void sub_215044030(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37[2];
  _QWORD v38[3];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D188);
  v3 = swift_allocObject();
  sub_21502D0D4(v2, v38);
  v4 = (uint64_t *)v38[0];
  v5 = v38[1];
  *(_QWORD *)(v3 + 16) = v38[0];
  *(_QWORD *)(v3 + 24) = v5;
  if (v2)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v6 = 0;
    while (v4)
    {
      v19 = *(unsigned __int8 *)(a1 + v6 + 32);
      v20 = *v4;
      v21 = v4[1];
      if (v21 >= *v4)
      {
        v17 = __OFADD__(v21, 1);
        v24 = v21 + 1;
        if (v17)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          break;
        }
        if (v20 < v24)
        {
          if (v20 + 0x4000000000000000 < 0)
            goto LABEL_52;
          if (2 * v20 <= v24)
            v20 = v24;
          else
            v20 *= 2;
        }
        sub_215097C2C((uint64_t)v4, v20, v37);
        if (v4[1] < 0)
          goto LABEL_48;
        MEMORY[0x2199DC578](v4, -1, -1);
        v4 = (uint64_t *)v37[0];
        v25 = v37[1];
        *(_QWORD *)(v3 + 16) = v37[0];
        *(_QWORD *)(v3 + 24) = v25;
        if (v19 == 2)
        {
          if (!v4)
            goto LABEL_56;
          v26 = v4[2];
          v17 = __OFADD__(v26, 1);
          v27 = v26 + 1;
          if (v17)
            goto LABEL_53;
          v4[2] = v27;
        }
        else
        {
          if (!v4)
            goto LABEL_57;
          v28 = *v4 + 7;
          if (__OFADD__(*v4, 7))
            goto LABEL_54;
          v29 = v4 + 8;
          if (v28 < 0)
            v28 = *v4 + 14;
          v30 = v28 >> 3;
          v31 = v30 - 1;
          v10 = v30 < 1;
          v32 = v30 + 62;
          if (!v10)
            v32 = v31;
          v33 = v4[1];
          *((_BYTE *)v29 + v33 + (v32 & 0xFFFFFFFFFFFFC0) + 64) = v19 & 1;
          v34 = v33 - (v32 & 0xFFFFFFFFFFFFFFF8);
          if (v34 >= 0)
            v35 = 1 << v34;
          else
            v35 = 0;
          *((_BYTE *)v29 + v33 / 8) |= v35;
        }
        v36 = v4[1];
        v17 = __OFADD__(v36, 1);
        v18 = v36 + 1;
        if (v17)
          goto LABEL_49;
      }
      else if (v19 == 2)
      {
        v22 = v4[2];
        v17 = __OFADD__(v22, 1);
        v23 = v22 + 1;
        if (v17)
          goto LABEL_51;
        v4[2] = v23;
        v17 = __OFADD__(v21, 1);
        v18 = v21 + 1;
        if (v17)
          goto LABEL_47;
      }
      else
      {
        v7 = v20 + 7;
        if (__OFADD__(v20, 7))
          goto LABEL_50;
        v8 = v4 + 8;
        if (v7 < 0)
          v7 = v20 + 14;
        v9 = v7 >> 3;
        v11 = v9 - 1;
        v10 = v9 < 1;
        v12 = v9 + 62;
        if (!v10)
          v12 = v11;
        *((_BYTE *)v8 + v21 + (v12 & 0xFFFFFFFFFFFFC0) + 64) = v19 & 1;
        v13 = v21 / 8;
        v14 = v21 - (v12 & 0xFFFFFFFFFFFFFFF8);
        if (v14 >= 0)
          v15 = 1 << v14;
        else
          v15 = 0;
        *((_BYTE *)v8 + v13) |= v15;
        v16 = v4[1];
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
          goto LABEL_47;
      }
      v4[1] = v18;
      if (v2 == ++v6)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
  }
}

void sub_2150442E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38[2];
  _QWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7828);
  v3 = swift_allocObject();
  sub_21502D010(v2, v39);
  v4 = (uint64_t *)v39[0];
  v5 = v39[1];
  *(_QWORD *)(v3 + 16) = v39[0];
  *(_QWORD *)(v3 + 24) = v5;
  if (v2)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v6 = (_BYTE *)(a1 + 36);
    while (v4)
    {
      v19 = *((_DWORD *)v6 - 1);
      v20 = *v6;
      v21 = *v4;
      v22 = v4[1];
      if (v22 >= *v4)
      {
        v17 = __OFADD__(v22, 1);
        v25 = v22 + 1;
        if (v17)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          break;
        }
        if (v21 < v25)
        {
          if (v21 + 0x4000000000000000 < 0)
            goto LABEL_52;
          if (2 * v21 <= v25)
            v21 = v25;
          else
            v21 *= 2;
        }
        sub_215097DF0((uint64_t)v4, v21, v38);
        if (v4[1] < 0)
          goto LABEL_48;
        MEMORY[0x2199DC578](v4, -1, -1);
        v4 = (uint64_t *)v38[0];
        v26 = v38[1];
        *(_QWORD *)(v3 + 16) = v38[0];
        *(_QWORD *)(v3 + 24) = v26;
        if ((v20 & 1) != 0)
        {
          if (!v4)
            goto LABEL_56;
          v27 = v4[2];
          v17 = __OFADD__(v27, 1);
          v28 = v27 + 1;
          if (v17)
            goto LABEL_53;
          v4[2] = v28;
        }
        else
        {
          if (!v4)
            goto LABEL_57;
          v29 = *v4 + 7;
          if (__OFADD__(*v4, 7))
            goto LABEL_54;
          v30 = v4 + 8;
          if (v29 < 0)
            v29 = *v4 + 14;
          v31 = v29 >> 3;
          v32 = v31 - 1;
          v10 = v31 < 1;
          v33 = v31 + 62;
          if (!v10)
            v33 = v32;
          v34 = v4[1];
          *(_DWORD *)((char *)v30 + 4 * v34 + (v33 & 0xFFFFFFFFFFFFC0) + 64) = v19;
          v35 = v34 - (v33 & 0xFFFFFFFFFFFFFFF8);
          if (v35 >= 0)
            v36 = 1 << v35;
          else
            v36 = 0;
          *((_BYTE *)v30 + v34 / 8) |= v36;
        }
        v37 = v4[1];
        v17 = __OFADD__(v37, 1);
        v18 = v37 + 1;
        if (v17)
          goto LABEL_49;
      }
      else if ((*v6 & 1) != 0)
      {
        v23 = v4[2];
        v17 = __OFADD__(v23, 1);
        v24 = v23 + 1;
        if (v17)
          goto LABEL_51;
        v4[2] = v24;
        v17 = __OFADD__(v22, 1);
        v18 = v22 + 1;
        if (v17)
          goto LABEL_47;
      }
      else
      {
        v7 = v21 + 7;
        if (__OFADD__(v21, 7))
          goto LABEL_50;
        v8 = v4 + 8;
        if (v7 < 0)
          v7 = v21 + 14;
        v9 = v7 >> 3;
        v11 = v9 - 1;
        v10 = v9 < 1;
        v12 = v9 + 62;
        if (!v10)
          v12 = v11;
        *(_DWORD *)((char *)v8 + 4 * v22 + (v12 & 0xFFFFFFFFFFFFC0) + 64) = v19;
        v13 = v22 / 8;
        v14 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
        if (v14 >= 0)
          v15 = 1 << v14;
        else
          v15 = 0;
        *((_BYTE *)v8 + v13) |= v15;
        v16 = v4[1];
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
          goto LABEL_47;
      }
      v4[1] = v18;
      v6 += 8;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
  }
}

uint64_t sub_215044588(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  __int128 v52;

  v50 = sub_21512F740();
  v47 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v3 = (char *)v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v49 = (uint64_t)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v44 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D180);
  v11 = swift_allocObject();
  sub_21502CE84(v10, &v52);
  *(_OWORD *)(v11 + 16) = v52;
  if (!v10)
    return v11;
  v46 = v3;
  v12 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v44[1] = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_beginAccess();
  v48 = *(_QWORD *)(v5 + 72);
  v13 = v50;
  v14 = (uint64_t **)(v11 + 16);
  v15 = qword_253F0D218;
  v45 = v9;
  while (1)
  {
    v19 = v15;
    result = sub_21504670C(v12, (uint64_t)v9, v15);
    v21 = *v14;
    if (!*v14)
      break;
    v16 = *v21;
    v22 = v21[1];
    if (v22 >= *v21)
    {
      v25 = __OFADD__(v22, 1);
      v27 = v22 + 1;
      if (v25)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        break;
      }
      if (v16 < v27)
      {
        if (v16 + 0x4000000000000000 < 0)
          goto LABEL_36;
        if (2 * v16 <= v27)
          v16 = v27;
        else
          v16 *= 2;
      }
      sub_2150979C4(*v14, v16, v51);
      v13 = v50;
      sub_215098564(v21);
      v17 = (_QWORD *)v51[0];
      v18 = v51[1];
      *(_QWORD *)(v11 + 16) = v51[0];
      *(_QWORD *)(v11 + 24) = v18;
      sub_215098C3C((uint64_t)v9, v17);
    }
    else
    {
      v23 = v49;
      sub_21504670C((uint64_t)v9, v49, v19);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v23, 1, v13) == 1)
      {
        result = sub_215046750(v49, v19);
        v24 = v21[2];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_34;
        v21[2] = v26;
      }
      else
      {
        v28 = v11;
        v29 = v47;
        v30 = v14;
        v31 = v46;
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 32))(v46, v49, v13);
        v32 = *v21 + 7;
        if (__OFADD__(*v21, 7))
          goto LABEL_35;
        v33 = v21 + 8;
        if (v32 < 0)
          v32 = *v21 + 14;
        v34 = v32 >> 3;
        v36 = v34 - 1;
        v35 = v34 < 1;
        v37 = v34 + 62;
        if (!v35)
          v37 = v36;
        (*(void (**)(unint64_t, char *, uint64_t))(v29 + 16))((unint64_t)v33 + (v37 & 0xFFFFFFFFFFFFFFC0) + *(_QWORD *)(v29 + 72) * v21[1] + 64, v31, v50);
        v38 = v21[1];
        v39 = v38 + 7;
        if (v38 >= 0)
          v39 = v21[1];
        v40 = v38 - (v39 & 0xFFFFFFFFFFFFFFF8);
        if (v40 >= 0)
          v41 = 1 << v40;
        else
          v41 = 0;
        *((_BYTE *)v33 + (v39 >> 3)) |= v41;
        v13 = v50;
        result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v50);
        v14 = v30;
        v11 = v28;
        v9 = v45;
      }
      v42 = v21[1];
      v25 = __OFADD__(v42, 1);
      v43 = v42 + 1;
      if (v25)
        goto LABEL_33;
      v21[1] = v43;
    }
    v15 = v19;
    sub_215046750((uint64_t)v9, v19);
    v12 += v48;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v11;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_21504490C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27[2];
  _QWORD v28[3];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7830);
  v3 = swift_allocObject();
  sub_21502CF50(v2, v28);
  v4 = (uint64_t *)v28[0];
  v5 = v28[1];
  *(_QWORD *)(v3 + 16) = v28[0];
  *(_QWORD *)(v3 + 24) = v5;
  if (!v2)
    return v3;
  swift_bridgeObjectRetain();
  swift_retain();
  result = swift_beginAccess();
  v7 = 0;
  while (v4)
  {
    v11 = *(_OWORD *)(a1 + 16 * v7 + 32);
    v8 = *v4;
    v12 = v4[1];
    if (v12 >= *v4)
    {
      v14 = __OFADD__(v12, 1);
      v16 = v12 + 1;
      if (v14)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        break;
      }
      if (v8 < v16)
      {
        if (v8 + 0x4000000000000000 < 0)
          goto LABEL_34;
        if (2 * v8 <= v16)
          v8 = v16;
        else
          v8 *= 2;
      }
      v9 = *(_OWORD *)(a1 + 16 * v7 + 32);
      sub_215046224(v11, *((unint64_t *)&v11 + 1));
      sub_2150977DC((uint64_t)v4, v8, v27);
      sub_21509863C(v4);
      v4 = (uint64_t *)v27[0];
      v10 = v27[1];
      *(_QWORD *)(v3 + 16) = v27[0];
      *(_QWORD *)(v3 + 24) = v10;
      sub_215098E18(v9, *((unint64_t *)&v9 + 1), v4);
      result = sub_215045ED8(v9, *((unint64_t *)&v9 + 1));
    }
    else
    {
      if (*((_QWORD *)&v11 + 1) >> 60 == 15)
      {
        v13 = v4[2];
        v14 = __OFADD__(v13, 1);
        v15 = v13 + 1;
        if (v14)
          goto LABEL_32;
        v4[2] = v15;
      }
      else
      {
        v17 = v8 + 7;
        if (__OFADD__(v8, 7))
          goto LABEL_33;
        v18 = v4 + 8;
        if (v17 < 0)
          v17 = v8 + 14;
        v19 = v17 >> 3;
        v21 = v19 - 1;
        v20 = v19 < 1;
        v22 = v19 + 62;
        if (!v20)
          v22 = v21;
        *(_OWORD *)((char *)&v18[2 * v12 + 8] + (v22 & 0xFFFFFFFFFFFFC0)) = v11;
        v23 = v12 / 8;
        v24 = v12 - (v22 & 0xFFFFFFFFFFFFFFF8);
        if (v24 >= 0)
          v25 = 1 << v24;
        else
          v25 = 0;
        *((_BYTE *)v18 + v23) |= v25;
        v12 = v4[1];
      }
      v14 = __OFADD__(v12, 1);
      v26 = v12 + 1;
      if (v14)
        goto LABEL_31;
      v4[1] = v26;
      result = sub_215046224(v11, *((unint64_t *)&v11 + 1));
    }
    if (v2 == ++v7)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_215044B40(uint64_t a1)
{
  return sub_215044B64(a1, &qword_254DA7798, (void (*)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_2150977D8, sub_215098710, (void (*)(uint64_t, uint64_t *, uint64_t))sub_215098A9C);
}

uint64_t sub_215044B64(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t), void (*a4)(uint64_t *, uint64_t), void (*a5)(uint64_t, uint64_t *, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  _QWORD v34[3];

  v8 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = swift_allocObject();
  sub_21502D240(v8, v34);
  v10 = (uint64_t *)v34[0];
  v11 = v34[1];
  *(_QWORD *)(v9 + 16) = v34[0];
  *(_QWORD *)(v9 + 24) = v11;
  if (!v8)
    return v9;
  swift_bridgeObjectRetain();
  swift_retain();
  result = swift_beginAccess();
  v13 = 0;
  while (v10)
  {
    v15 = *(_QWORD *)(a1 + 8 * v13 + 32);
    v14 = *v10;
    v16 = v10[1];
    if (v16 >= *v10)
    {
      v27 = __OFADD__(v16, 1);
      v29 = v16 + 1;
      if (v27)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        break;
      }
      if (v14 < v29)
      {
        if (v14 + 0x4000000000000000 < 0)
          goto LABEL_34;
        if (2 * v14 <= v29)
          v14 = v29;
        else
          v14 *= 2;
      }
      swift_bridgeObjectRetain();
      a3(v33, v10, v11, v14);
      a4(v10, v11);
      v10 = (uint64_t *)v33[0];
      v11 = v33[1];
      *(_QWORD *)(v9 + 16) = v33[0];
      *(_QWORD *)(v9 + 24) = v11;
      a5(v15, v10, v11);
      result = swift_bridgeObjectRelease();
    }
    else
    {
      if (v15)
      {
        v17 = v14 + 7;
        if (__OFADD__(v14, 7))
          goto LABEL_33;
        v18 = v10 + 8;
        if (v17 < 0)
          v17 = v14 + 14;
        v19 = v17 >> 3;
        v21 = v19 - 1;
        v20 = v19 < 1;
        v22 = v19 + 62;
        if (!v20)
          v22 = v21;
        *(_QWORD *)((char *)&v18[v16 + 8] + (v22 & 0xFFFFFFFFFFFFC0)) = v15;
        v23 = v16 / 8;
        v24 = v16 - (v22 & 0xFFFFFFFFFFFFFFF8);
        if (v24 >= 0)
          v25 = 1 << v24;
        else
          v25 = 0;
        *((_BYTE *)v18 + v23) |= v25;
        v26 = v10[1];
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (v27)
          goto LABEL_32;
      }
      else
      {
        v30 = v10[2];
        v27 = __OFADD__(v30, 1);
        v31 = v30 + 1;
        if (v27)
          goto LABEL_35;
        v10[2] = v31;
        v27 = __OFADD__(v16, 1);
        v28 = v16 + 1;
        if (v27)
          goto LABEL_32;
      }
      v10[1] = v28;
      result = swift_bridgeObjectRetain();
    }
    if (v8 == ++v13)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_215044D8C(uint64_t a1)
{
  return sub_215044B64(a1, &qword_254DA77A0, (void (*)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_2150977D8, sub_21509871C, (void (*)(uint64_t, uint64_t *, uint64_t))sub_215098A9C);
}

uint64_t sub_215044DB0(uint64_t a1)
{
  return sub_215044B64(a1, &qword_254DA7708, (void (*)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_2150977D8, sub_21509881C, (void (*)(uint64_t, uint64_t *, uint64_t))sub_215098A9C);
}

uint64_t sub_215044DD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];
  _QWORD v31[3];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7720);
  v3 = swift_allocObject();
  sub_21502D17C(v2, v31);
  v4 = (uint64_t *)v31[0];
  v5 = v31[1];
  *(_QWORD *)(v3 + 16) = v31[0];
  *(_QWORD *)(v3 + 24) = v5;
  if (!v2)
    return v3;
  swift_bridgeObjectRetain();
  swift_retain();
  result = swift_beginAccess();
  v7 = (uint64_t *)(a1 + 48);
  while (v4)
  {
    v11 = *(v7 - 2);
    v10 = *(v7 - 1);
    v12 = *v7;
    v8 = *v4;
    v13 = v4[1];
    if (v13 >= *v4)
    {
      v25 = __OFADD__(v13, 1);
      v27 = v13 + 1;
      if (v25)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        break;
      }
      if (v8 < v27)
      {
        if (v8 + 0x4000000000000000 < 0)
          goto LABEL_34;
        if (2 * v8 <= v27)
          v8 = v27;
        else
          v8 *= 2;
      }
      sub_2150462EC(*(v7 - 2));
      sub_215097FD8((uint64_t)v4, v8, v30);
      sub_215098740(v4);
      v4 = (uint64_t *)v30[0];
      v9 = v30[1];
      *(_QWORD *)(v3 + 16) = v30[0];
      *(_QWORD *)(v3 + 24) = v9;
      sub_215099060(v11, v10, v12, v4);
      result = sub_215046324(v11);
    }
    else
    {
      if (v11)
      {
        v14 = v8 + 7;
        if (__OFADD__(v8, 7))
          goto LABEL_33;
        v15 = v4 + 8;
        if (v14 < 0)
          v14 = v8 + 14;
        v16 = v14 >> 3;
        v18 = v16 - 1;
        v17 = v16 < 1;
        v19 = v16 + 62;
        if (!v17)
          v19 = v18;
        v20 = (unint64_t)&v15[3 * v13] + (v19 & 0xFFFFFFFFFFFFFFC0);
        *(_QWORD *)(v20 + 64) = v11;
        *(_QWORD *)(v20 + 72) = v10;
        *(_QWORD *)(v20 + 80) = v12;
        v21 = v13 / 8;
        v22 = v13 - (v20 & 0xFFFFFFFFFFFFFFF8);
        if (v22 >= 0)
          v23 = 1 << v22;
        else
          v23 = 0;
        *((_BYTE *)v15 + v21) |= v23;
        v24 = v4[1];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_32;
      }
      else
      {
        v28 = v4[2];
        v25 = __OFADD__(v28, 1);
        v29 = v28 + 1;
        if (v25)
          goto LABEL_35;
        v4[2] = v29;
        v25 = __OFADD__(v13, 1);
        v26 = v13 + 1;
        if (v25)
          goto LABEL_32;
      }
      v4[1] = v26;
      result = sub_2150462EC(v11);
    }
    v7 += 3;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v3;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_21504501C(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_21502DBC0((char *)result, v10, 1, (char *)v4, &qword_253F0D200);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 8 * v6;
  v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13)
    result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_215045128(uint64_t a1)
{
  return sub_215044B64(a1, &qword_254DA7738, (void (*)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_2150977D8, sub_215098734, (void (*)(uint64_t, uint64_t *, uint64_t))sub_215098A9C);
}

uint64_t sub_21504514C(uint64_t a1)
{
  return sub_215044B64(a1, &qword_254DA7740, (void (*)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_2150977D8, sub_215098728, (void (*)(uint64_t, uint64_t *, uint64_t))sub_215098A9C);
}

uint64_t sub_215045170(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_21512FDB8();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_21503927C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_2150451E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v2, v3, v4);
  return a1;
}

uint64_t sub_215045244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v2, v3, v4);
  return a1;
}

uint64_t sub_2150452A8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyColumn(a2, a1);
  return a2;
}

uint64_t sub_2150452E4(uint64_t a1)
{
  destroy for AnyColumn(a1);
  return a1;
}

Swift::Int sub_215045318(__int128 *a1)
{
  Swift::Int v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  __int128 v12;
  _OWORD v13[2];
  Swift::Int v14;

  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  if (v2 < v3)
  {
    v4 = 0;
    result = *((_QWORD *)a1 + 6);
    while (!__OFADD__(v4, 1))
    {
      v6 = a1[1];
      v12 = *a1;
      v13[0] = v6;
      *(_OWORD *)((char *)v13 + 9) = *(__int128 *)((char *)a1 + 25);
      result = DataFrame.Rows.index(after:)(result);
      ++v4;
      if (result == v3)
        goto LABEL_10;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  if (v3 < v2)
  {
    v7 = 0;
    result = *((_QWORD *)a1 + 6);
    while (!__OFSUB__(v7--, 1))
    {
      v9 = a1[1];
      v12 = *a1;
      v13[0] = v9;
      *(_OWORD *)((char *)v13 + 9) = *(__int128 *)((char *)a1 + 25);
      result = DataFrame.Rows.index(before:)(result);
      if (result == v3)
        goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_10:
  result = sub_21512FDB8();
  v14 = result;
  if (v2 != v3)
  {
    do
    {
      v10 = a1[1];
      v12 = *a1;
      v13[0] = v10;
      *(_OWORD *)((char *)v13 + 9) = *(__int128 *)((char *)a1 + 25);
      v11 = DataFrame.Rows.index(after:)(v2);
      sub_21503927C((uint64_t *)&v12, v2);
      v2 = v11;
    }
    while (v11 != v3);
    return v14;
  }
  return result;
}

unint64_t sub_21504543C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7678);
    v3 = (_QWORD *)sub_215130340();
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_BYTE *)i - 8);
      v6 = *i;
      result = sub_21502FD0C(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_215045510(uint64_t a1)
{
  return sub_21504562C(a1, &qword_254DA7660, (uint64_t (*)(uint64_t, _QWORD))sub_21502FD88);
}

unint64_t sub_215045524(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7648);
    v3 = (_QWORD *)sub_215130340();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *((unsigned int *)i - 2);
      v7 = *i;
      v6 = *((unsigned __int8 *)i - 4);
      result = sub_21502FE10(v5 | (v6 << 32));
      if ((v9 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v10 = v3[6] + 8 * result;
      *(_DWORD *)v10 = v5;
      *(_BYTE *)(v10 + 4) = v6;
      *(_QWORD *)(v3[7] + 8 * result) = v7;
      v11 = v3[2];
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
        goto LABEL_10;
      v3[2] = v13;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_215045618(uint64_t a1)
{
  return sub_21504562C(a1, &qword_254DA7618, (uint64_t (*)(uint64_t, _QWORD))sub_21502FF28);
}

unint64_t sub_21504562C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  _QWORD *i;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    v6 = (_QWORD *)sub_215130340();
    for (i = (_QWORD *)(a1 + 48); ; i += 3)
    {
      v8 = *(i - 2);
      v9 = *((_BYTE *)i - 8);
      v10 = *i;
      result = a3(v8, v9);
      if ((v12 & 1) != 0)
        break;
      *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v13 = v6[6] + 16 * result;
      *(_QWORD *)v13 = v8;
      *(_BYTE *)(v13 + 8) = v9;
      *(_QWORD *)(v6[7] + 8 * result) = v10;
      v14 = v6[2];
      v15 = __OFADD__(v14, 1);
      v16 = v14 + 1;
      if (v15)
        goto LABEL_10;
      v6[2] = v16;
      if (!--v3)
        return (unint64_t)v6;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

uint64_t sub_215045718(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  v5 = 0;
  v6 = result + 56;
  v29 = -(uint64_t)v3;
  v7 = MEMORY[0x24BEE4AF8];
  v26 = result + 56;
  v27 = *(_QWORD *)(result + 16);
  do
  {
    v28 = v7;
    if (v5 <= v3)
      v8 = v3;
    else
      v8 = v5;
    v32 = -(uint64_t)v8;
    for (i = (uint64_t *)(v6 + 32 * v5++); ; i += 4)
    {
      if (v32 + v5 == 1)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        return result;
      }
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_27;
      if (*(_QWORD *)(*(_QWORD *)a2 + 16) <= a3)
        goto LABEL_28;
      v10 = *(i - 2);
      v31 = *(i - 3);
      v12 = *(i - 1);
      v11 = *i;
      v13 = a3;
      sub_21501EE90(*(_QWORD *)a2 + 40 * a3 + 32, (uint64_t)v33);
      v15 = v34;
      v14 = v35;
      __swift_project_boxed_opaque_existential_1(v33, v34);
      v16 = *(_QWORD *)(v14 + 8);
      v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = v17(v15, v16);
      v20 = v19;
      sub_21501EA34((uint64_t)v33);
      if (v12 == v18 && v11 == v20)
        break;
      v22 = sub_21513043C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
        goto LABEL_18;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      ++v5;
      a3 = v13;
      if (v29 + v5 == 1)
        return v28;
    }
    swift_bridgeObjectRelease();
LABEL_18:
    result = swift_isUniquelyReferenced_nonNull_native();
    v7 = v28;
    v36 = v28;
    a3 = v13;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_215038C00(0, *(_QWORD *)(v28 + 16) + 1, 1);
      v7 = v36;
    }
    v24 = *(_QWORD *)(v7 + 16);
    v23 = *(_QWORD *)(v7 + 24);
    if (v24 >= v23 >> 1)
    {
      result = (uint64_t)sub_215038C00((_QWORD *)(v23 > 1), v24 + 1, 1);
      v7 = v36;
    }
    *(_QWORD *)(v7 + 16) = v24 + 1;
    v25 = (_QWORD *)(v7 + 32 * v24);
    v25[4] = v31;
    v25[5] = v10;
    v25[6] = v12;
    v25[7] = v11;
    v6 = v26;
    v3 = v27;
  }
  while (v29 + v5);
  return v7;
}

uint64_t sub_215045958(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_2150459B0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x2199DC578);
  return result;
}

uint64_t sub_2150459FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2150238A8(a1, *(void (**)(char *))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_215045A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v21[3];
  _QWORD v22[5];

  v6 = v5;
  v22[0] = a1;
  sub_215130064();
  v10 = sub_21512FD40();
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v10);
  Column.init<A>(name:contents:)(a2, a3, (uint64_t)v22, a5, v10, v11, v21);
  v14 = type metadata accessor for Column(0, a5, v12, v13);
  Column.eraseToAnyColumn()(v14, v15, v16, (uint64_t)v22);
  swift_release();
  swift_bridgeObjectRelease();
  v17 = v6[1];
  v18 = v6[2];
  v21[0] = *v6;
  v21[1] = v17;
  v21[2] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = sub_21501F2BC(a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501DE8C(v19, (uint64_t)v22);
  return sub_21501EA34((uint64_t)v22);
}

uint64_t sub_215045B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[40];

  v7 = type metadata accessor for Column(0, a5, a3, a4);
  Column.eraseToAnyColumn()(v7, v8, v9, (uint64_t)v12);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_21501F2BC(a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501DE8C(v10, (uint64_t)v12);
  return sub_21501EA34((uint64_t)v12);
}

uint64_t sub_215045C80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[2];
  _OWORD v30[2];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7838);
  v3 = swift_allocObject();
  sub_21502D300(v2, v30);
  *(_OWORD *)(v3 + 16) = v30[0];
  v4 = (uint64_t **)(v3 + 16);
  if (!v2)
    return v3;
  v5 = a1 + 32;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_beginAccess();
  while (1)
  {
    result = sub_21504670C(v5, (uint64_t)v30, qword_253F0D058);
    v9 = *v4;
    if (!*v4)
      break;
    v6 = *v9;
    v10 = v9[1];
    if (v10 >= *v9)
    {
      v21 = __OFADD__(v10, 1);
      v22 = v10 + 1;
      if (v21)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        break;
      }
      if (v6 < v22)
      {
        if (v6 + 0x4000000000000000 < 0)
          goto LABEL_35;
        if (2 * v6 <= v22)
          v6 = v22;
        else
          v6 *= 2;
      }
      sub_2150979C0(v29, *v4, *(_QWORD *)(v3 + 24), v6);
      sub_21509848C(v9);
      v7 = v29[0];
      *(_OWORD *)(v3 + 16) = v29[0];
      sub_215098C20((uint64_t)v30, (_QWORD *)v7, *((uint64_t *)&v7 + 1));
    }
    else
    {
      sub_21504670C((uint64_t)v30, (uint64_t)&v27, qword_253F0D058);
      if (v28)
      {
        result = (uint64_t)sub_21504678C(&v27, v29);
        v11 = *v9 + 7;
        if (__OFADD__(*v9, 7))
          goto LABEL_34;
        v12 = v9 + 8;
        if (v11 < 0)
          v11 = *v9 + 14;
        v13 = v11 >> 3;
        v15 = v13 - 1;
        v14 = v13 < 1;
        v16 = v13 + 62;
        if (!v14)
          v16 = v15;
        sub_21504679C((uint64_t)v29, (uint64_t)&v12[4 * v9[1] + 8] + (v16 & 0xFFFFFFFFFFFFFFC0));
        v17 = v9[1];
        v18 = v17 + 7;
        if (v17 >= 0)
          v18 = v9[1];
        v19 = v17 - (v18 & 0xFFFFFFFFFFFFFFF8);
        if (v19 >= 0)
          v20 = 1 << v19;
        else
          v20 = 0;
        *((_BYTE *)v12 + (v18 >> 3)) |= v20;
        result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
      }
      else
      {
        result = sub_215046750((uint64_t)&v27, qword_253F0D058);
        v23 = v9[2];
        v21 = __OFADD__(v23, 1);
        v24 = v23 + 1;
        if (v21)
          goto LABEL_36;
        v9[2] = v24;
      }
      v25 = v9[1];
      v21 = __OFADD__(v25, 1);
      v26 = v25 + 1;
      if (v21)
        goto LABEL_33;
      v9[1] = v26;
    }
    sub_215046750((uint64_t)v30, qword_253F0D058);
    v5 += 32;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_215045ED8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_21501F0D8(a1, a2);
  return a1;
}

_UNKNOWN **sub_215045EEC()
{
  return &protocol witness table for AnyColumn;
}

unint64_t sub_215045EFC()
{
  unint64_t result;

  result = qword_254DA7568;
  if (!qword_254DA7568)
  {
    result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for DataFrame, &type metadata for DataFrame);
    atomic_store(result, (unint64_t *)&qword_254DA7568);
  }
  return result;
}

unint64_t sub_215045F48@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2150295A0(a1, a2, a3);
}

uint64_t sub_215045F5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_215029658(a1, a2, a3);
}

uint64_t sub_215045F70()
{
  return 0;
}

unint64_t sub_215045F80@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2150295A0(a1, a2, a3);
}

uint64_t sub_215045F94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_215029658(a1, a2, a3);
}

uint64_t sub_215045FA8()
{
  return 0;
}

uint64_t sub_215045FC0()
{
  return 8;
}

_QWORD *sub_215045FCC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_215045FE0()
{
  return 0;
}

uint64_t sub_215045FF8()
{
  return 0;
}

uint64_t destroy for DataFrame()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s11TabularData9DataFrameVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DataFrame(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DataFrame(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DataFrame(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataFrame()
{
  return &type metadata for DataFrame;
}

uint64_t sub_2150461E4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_21512F740();
    result = MEMORY[0x2199DC4C4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_215046224(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_21501F068(a1, a2);
  return a1;
}

uint64_t sub_215046238(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_21504626C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2150462B0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_2150462EC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_215046324(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_21504635C(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_21502EBE8((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = v11 - a2;
  if (__OFSUB__(v11, a2))
    goto LABEL_26;
  result = v4 + 32 + v6;
  v13 = (const void *)(v4 + 32 + a2);
  if (v6 != a2 || result >= (unint64_t)v13 + v12)
    result = (unint64_t)memmove((void *)result, v13, v12);
  v14 = *(_QWORD *)(v4 + 16);
  v15 = __OFADD__(v14, v8);
  v16 = v14 + v8;
  if (!v15)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_21504647C()
{
  return swift_release();
}

uint64_t sub_215046484(uint64_t a1)
{
  sub_21501EF2C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t sub_2150464B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[2];
  _OWORD v30[2];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7860);
  v3 = swift_allocObject();
  sub_21502D300(v2, v30);
  *(_OWORD *)(v3 + 16) = v30[0];
  v4 = (uint64_t **)(v3 + 16);
  if (!v2)
    return v3;
  v5 = a1 + 32;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_beginAccess();
  while (1)
  {
    result = sub_21504670C(v5, (uint64_t)v30, &qword_254DA7868);
    v9 = *v4;
    if (!*v4)
      break;
    v6 = *v9;
    v10 = v9[1];
    if (v10 >= *v9)
    {
      v21 = __OFADD__(v10, 1);
      v22 = v10 + 1;
      if (v21)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        break;
      }
      if (v6 < v22)
      {
        if (v6 + 0x4000000000000000 < 0)
          goto LABEL_35;
        if (2 * v6 <= v22)
          v6 = v22;
        else
          v6 *= 2;
      }
      sub_2150979C0(v29, *v4, *(_QWORD *)(v3 + 24), v6);
      sub_215098900(v9);
      v7 = v29[0];
      *(_OWORD *)(v3 + 16) = v29[0];
      sub_2150991E0((uint64_t)v30, (_QWORD *)v7, *((uint64_t *)&v7 + 1));
    }
    else
    {
      sub_21504670C((uint64_t)v30, (uint64_t)&v27, &qword_254DA7868);
      if (v28)
      {
        result = (uint64_t)sub_21504678C(&v27, v29);
        v11 = *v9 + 7;
        if (__OFADD__(*v9, 7))
          goto LABEL_34;
        v12 = v9 + 8;
        if (v11 < 0)
          v11 = *v9 + 14;
        v13 = v11 >> 3;
        v15 = v13 - 1;
        v14 = v13 < 1;
        v16 = v13 + 62;
        if (!v14)
          v16 = v15;
        sub_21504679C((uint64_t)v29, (uint64_t)&v12[4 * v9[1] + 8] + (v16 & 0xFFFFFFFFFFFFFFC0));
        v17 = v9[1];
        v18 = v17 + 7;
        if (v17 >= 0)
          v18 = v9[1];
        v19 = v17 - (v18 & 0xFFFFFFFFFFFFFFF8);
        if (v19 >= 0)
          v20 = 1 << v19;
        else
          v20 = 0;
        *((_BYTE *)v12 + (v18 >> 3)) |= v20;
        result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
      }
      else
      {
        result = sub_215046750((uint64_t)&v27, &qword_254DA7868);
        v23 = v9[2];
        v21 = __OFADD__(v23, 1);
        v24 = v23 + 1;
        if (v21)
          goto LABEL_36;
        v9[2] = v24;
      }
      v25 = v9[1];
      v21 = __OFADD__(v25, 1);
      v26 = v25 + 1;
      if (v21)
        goto LABEL_33;
      v9[1] = v26;
    }
    sub_215046750((uint64_t)v30, &qword_254DA7868);
    v5 += 32;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_21504670C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_215046750(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *sub_21504678C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_21504679C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t dispatch thunk of AnyColumnPrototype.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyColumnPrototype.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AnyColumnPrototype.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnyColumnPrototype.makeColumn(capacity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_2150467F8()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for SFrameIndex(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CSVColumnDescriptor()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SFrameIndex(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for SFrameIndex(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SFrameIndex(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SFrameIndex(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ColumnPrototype(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ColumnPrototype);
}

uint64_t sub_215046940@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(a2, a3, a1, a4, &v16);
  v12 = type metadata accessor for Column(0, a4, v10, v11);
  Column.eraseToAnyColumn()(v12, v13, v14, a5);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2150469D8()
{
  swift_bridgeObjectRetain();
  sub_21512FB3C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_215046A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return sub_21513043C();
}

uint64_t sub_215046A40()
{
  sub_2151305A4();
  swift_bridgeObjectRetain();
  sub_21512FB3C();
  swift_bridgeObjectRelease();
  return sub_2151305EC();
}

uint64_t sub_215046AA0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_215046ACC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_215046B00())()
{
  return nullsub_5;
}

uint64_t sub_215046B10@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_215046940(a1, *v3, v3[1], *(_QWORD *)(a2 + 16), a3);
}

uint64_t sub_215046B20()
{
  return sub_215046A40();
}

uint64_t sub_215046B28()
{
  return sub_2150469D8();
}

uint64_t sub_215046B30()
{
  sub_2151305A4();
  sub_2150469D8();
  return sub_2151305EC();
}

uint64_t sub_215046B6C(uint64_t *a1, uint64_t *a2)
{
  return sub_215046A20(*a1, a1[1], *a2, a2[1]);
}

void sub_215046B80()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2199DC470](a1, v6, a5);
}

uint64_t sub_215046BC0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_215038D34(0, v1, 0);
    v2 = v19;
    v4 = (char *)(a1 + 80);
    do
    {
      v18 = v1;
      v5 = *((_QWORD *)v4 - 6);
      v6 = *((_QWORD *)v4 - 5);
      v7 = *((_QWORD *)v4 - 4);
      v8 = *((_QWORD *)v4 - 3);
      v9 = *((_QWORD *)v4 - 2);
      v10 = *((_QWORD *)v4 - 1);
      v11 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2150437A8(v9, v10, v11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2150437A8(v9, v10, v11);
      v17 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21501EF2C(v9, v10, v11);
      v13 = *(_QWORD *)(v19 + 16);
      v12 = *(_QWORD *)(v19 + 24);
      v14 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        sub_215038D34((_QWORD *)(v12 > 1), v13 + 1, 1);
        v14 = v13 + 1;
      }
      v4 += 56;
      *(_QWORD *)(v19 + 16) = v14;
      v15 = v19 + 56 * v13;
      *(_QWORD *)(v15 + 32) = v17;
      *(_QWORD *)(v15 + 40) = v6;
      *(_QWORD *)(v15 + 48) = v7;
      *(_QWORD *)(v15 + 56) = v8;
      *(_QWORD *)(v15 + 64) = v9;
      *(_QWORD *)(v15 + 72) = v10;
      *(_BYTE *)(v15 + 80) = v11;
      v1 = v18 - 1;
    }
    while (v18 != 1);
  }
  return v2;
}

_QWORD *DataFrameProtocol.randomSplit(by:seed:)(_QWORD *result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v11;
  uint64_t v13;

  v11 = (uint64_t)result;
  if ((a4 & 1) != 0)
    return DataFrameProtocol.randomSplit<A>(by:using:)((uint64_t)result, a2, a7, a3, a5, MEMORY[0x24BEE3A00], a6);
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject();
    v13 = sub_215047BF8(a3);
    sub_215047D54();
    DataFrameProtocol.randomSplit<A>(by:using:)(v11, a2, a7, (uint64_t)&v13, a5, (uint64_t)&type metadata for SeededRandomNumberGenerator, a6);
    return (_QWORD *)swift_release();
  }
  return result;
}

_QWORD *DataFrameProtocol.randomSplit<A>(by:using:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  Swift::Int v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t *v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  void (*v41)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *result;
  uint64_t v44;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;

  if (a3 <= 0.0 || a3 >= 1.0)
    goto LABEL_47;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a7 + 32))(&v51, a5, a7);
  v9 = v51;
  v11 = v52;
  v10 = v53;
  v12 = v54;
  v13 = v55;
  v14 = v53;
  if (v55)
  {
    if (v55 == 1 && *(_QWORD *)(v53 + 16))
    {
      v14 = *(_QWORD *)(v53 + 32);
    }
    else
    {
      sub_21508C520(v53, v54, v55);
      if ((v16 & 1) != 0)
        v14 = 0;
      else
        v14 = v15;
    }
  }
  sub_21508C520(v10, v12, v13);
  v56 = v9;
  if ((v18 & 1) != 0)
    v19 = 0;
  else
    v19 = v17;
  v57 = v11;
  v58 = v10;
  v59 = v12;
  v60 = v13;
  v61 = v14;
  v62 = v19;
  v20 = sub_215048CD4((uint64_t)&v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v10, v12, v13);
  v21 = (double)*(uint64_t *)(v20 + 16) * a3;
  if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
    goto LABEL_44;
  if (v21 <= -9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_46:
    __break(1u);
    swift_release();
    __break(1u);
LABEL_47:
    result = (_QWORD *)sub_2151302EC();
    __break(1u);
    return result;
  }
  v22 = (uint64_t)v21;
  v50 = MEMORY[0x24BEE4B08];
  v23 = swift_retain();
  sub_215045170(v23);
  swift_release();
  v49 = v22;
  if (v22 > 0)
  {
    v24 = v20 + 32;
    sub_215049CE8();
    v25 = MEMORY[0x24BEE4B08];
    sub_215049D2C();
    while (1)
    {
      sub_21512F8FC();
      v26 = v51;
      if ((v51 & 0x8000000000000000) != 0)
        break;
      if ((unint64_t)v51 >= *(_QWORD *)(v20 + 16))
        goto LABEL_39;
      if (!sub_215025E08(*(_QWORD *)(v24 + 8 * v51), v25))
      {
        sub_21503927C((uint64_t *)&v51, *(_QWORD *)(v24 + 8 * v26));
        sub_21504919C(*(_QWORD *)(v24 + 8 * v26));
        v25 = v50;
        if (*(_QWORD *)(v50 + 16) >= v49)
          goto LABEL_25;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
LABEL_25:
  swift_release();
  v27 = swift_bridgeObjectRetain();
  v28 = sub_215048BF0(v27);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v51 = v28;
  sub_2150492A4((char **)&v51);
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v51 + 16);
  if (v29)
  {
    v30 = (int64_t *)(v51 + 32);
    while (1)
    {
      v32 = *v30++;
      v31 = v32;
      v33 = v32 + 1;
      if (__OFADD__(v32, 1))
        break;
      if (v33 < v31)
        goto LABEL_41;
      sub_21502C94C(v31, v33);
      if (!--v29)
        goto LABEL_30;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_30:
  swift_release();
  v34 = swift_bridgeObjectRetain();
  v35 = sub_215048BF0(v34);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v51 = v35;
  sub_2150492A4((char **)&v51);
  swift_bridgeObjectRelease();
  v36 = v51;
  v37 = *(_QWORD *)(v51 + 16);
  if (v37)
  {
    v38 = 0;
    while (1)
    {
      v39 = *(_QWORD *)(v36 + 8 * v38 + 32);
      v40 = v39 + 1;
      if (__OFADD__(v39, 1))
        break;
      if (v40 < v39)
        goto LABEL_43;
      ++v38;
      sub_21502C94C(v39, v40);
      if (v37 == v38)
      {
        swift_release();
        v37 = 0;
        goto LABEL_37;
      }
    }
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  swift_release();
LABEL_37:
  v41 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a7 + 24);
  v41(&v51, a5, a7);
  v42 = v52;
  *(_OWORD *)a1 = v51;
  *(_QWORD *)(a1 + 16) = v42;
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(_BYTE *)(a1 + 40) = 2;
  result = ((_QWORD *(*)(__int128 *__return_ptr, uint64_t, uint64_t))v41)(&v51, a5, a7);
  v44 = v52;
  *(_OWORD *)a2 = v51;
  *(_QWORD *)(a2 + 16) = v44;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v37;
  *(_BYTE *)(a2 + 40) = 2;
  return result;
}

uint64_t type metadata accessor for MersenneTwisterGenerator()
{
  return objc_opt_self();
}

void __swiftcall DataFrameProtocol.stratifiedSplit(on:by:randomSeed:)(Swift::tuple_TabularData_DataFrame_TabularData_DataFrame *__return_ptr retstr, Swift::String on, Swift::Double by, Swift::Int_optional randomSeed)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  Swift::Int value;
  _QWORD *countAndFlagsBits;
  char v15;
  uint64_t inited;
  _QWORD *object;
  _OWORD v18[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v8 = v7;
  v9 = v6;
  v10 = v4;
  v12 = *(_QWORD *)&randomSeed.is_nil;
  value = randomSeed.value;
  object = on._object;
  countAndFlagsBits = (_QWORD *)on._countAndFlagsBits;
  v15 = v5 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_215135F80;
  *(_QWORD *)(inited + 32) = value;
  *(_QWORD *)(inited + 40) = v12;
  swift_bridgeObjectRetain();
  DataFrameProtocol.grouped(by:)(v18, inited, v9, v8);
  swift_setDeallocating();
  swift_arrayDestroy();
  v26 = v18[0];
  v27 = v18[1];
  v28 = v19;
  sub_2150483BC(v10, v15, (uint64_t *)v18, by);
  v23 = v20;
  v24 = v21;
  v25 = v22;
  sub_215047F80(countAndFlagsBits);
  sub_215047F80(object);
  v29 = v26;
  sub_215049D70((uint64_t)&v29);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t DataFrameProtocol.stratifiedSplit(on:by:randomSeed:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, double a8)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v12 = a5 & 1;
  sub_215102AEC(a3, a6, a7, (uint64_t)v26);
  v31 = v26[0];
  v32 = v26[1];
  v33 = v27;
  sub_2150483BC(a4, v12, (uint64_t *)&v20, a8);
  v13 = v22;
  v14 = v25;
  v18 = v21;
  v19 = v20;
  v16 = v24;
  v17 = v23;
  v34 = v31;
  sub_215049D70((uint64_t)&v34);
  swift_release();
  swift_release();
  v20 = v19;
  v21 = v18;
  v22 = v13;
  v28 = v17;
  v29 = v16;
  v30 = v14;
  sub_215047F80(a1);
  sub_215047F80(a2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t DataFrameProtocol.stratifiedSplit<A>(on:by:randomSeed:)(double a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v13 = a4[1];
  v14 = a6 & 1;
  v23 = *a4;
  v24 = v13;
  DataFrameProtocol.grouped<A>(by:)((uint64_t)&v23, a7, a8, a9, a10, &v21);
  v16 = type metadata accessor for RowGrouping(0, a8, a10, v15);
  RowGrouping.randomSplit(by:seed:)(&v23, v22, a5, v14, v16, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v22[0];
  v18 = v22[1];
  v19 = v22[2];
  RowGrouping.ungrouped()();
  v23 = v17;
  v24 = v18;
  v25 = v19;
  RowGrouping.ungrouped()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void DataFrameProtocol.stratifiedSplit<A, B>(on:_:by:randomSeed:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[11];
  _OWORD v16[5];
  uint64_t v17;
  uint64_t v18;

  v12 = a3[1];
  v13 = *a4;
  v14 = a4[1];
  v15[0] = *a3;
  v15[1] = v12;
  v17 = v13;
  v18 = v14;
  DataFrameProtocol.grouped<A, B>(by:_:)((uint64_t)v15, a7, a8, a9, a10, a11, a12, (uint64_t)v16);
}

void sub_215047774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,__int128 a30,__int128 a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_OWORD *)(v32 - 160) = a30;
  *(_OWORD *)(v32 - 144) = a31;
  *(_QWORD *)(v32 - 128) = a32;
  v33 = sub_215130064();
  v34 = sub_215130064();
  v35 = MEMORY[0x24BEE4AB0];
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE4AB0], v33, v32 + 32);
  MEMORY[0x2199DC4C4](v35, v34, v32 + 40);
  type metadata accessor for Tuple2();
}

void sub_2150477E8()
{
  type metadata accessor for ColumnBuilder2();
}

void sub_215047800(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x2199DC4C4](&unk_2151397D8, v1);
  MEMORY[0x2199DC4C4](&unk_215136230, a1);
  type metadata accessor for CustomGrouping();
}

uint64_t sub_21504783C(_QWORD *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  double v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  sub_21512CB5C(v1, v2, a1, (uint64_t)&v15, v4);
  v6 = v17;
  v7 = v20;
  v13 = v16;
  v14 = v15;
  v11 = v19;
  v12 = v18;
  *(_QWORD *)(v3 - 112) = *(_QWORD *)(v3 - 160);
  sub_215049D70(v3 - 112);
  swift_release();
  swift_release();
  v15 = v14;
  v16 = v13;
  v17 = v6;
  v21 = v12;
  v22 = v11;
  v23 = v7;
  sub_21512BF78(a1, v9);
  sub_21512BF78(a1, v10);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void DataFrameProtocol.stratifiedSplit<A, B, C>(on:_:_:by:randomSeed:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[11];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v15 = a3[1];
  v16 = *a4;
  v17 = a4[1];
  v18 = *a5;
  v19 = a5[1];
  v20[0] = *a3;
  v20[1] = v15;
  v24 = v16;
  v25 = v17;
  v22 = v18;
  v23 = v19;
  DataFrameProtocol.grouped<A, B, C>(by:_:_:)((uint64_t)v20, a8, a9, a10, a11, a12, (uint64_t)&v21, a13, a14, a15);
}

void sub_2150479D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,__int128 a34,__int128 a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_OWORD *)(v36 - 160) = a34;
  *(_OWORD *)(v36 - 144) = a35;
  *(_QWORD *)(v36 - 128) = a36;
  v37 = sub_215130064();
  v38 = sub_215130064();
  v39 = sub_215130064();
  v40 = MEMORY[0x24BEE4AB0];
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE4AB0], v37, v36 + 48);
  MEMORY[0x2199DC4C4](v40, v38, v36 + 56);
  MEMORY[0x2199DC4C4](v40, v39, v36 + 64);
  type metadata accessor for Tuple3();
}

void sub_215047A74()
{
  type metadata accessor for ColumnBuilder3();
}

void sub_215047A98(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x2199DC4C4](&unk_215139798, v1);
  MEMORY[0x2199DC4C4](&unk_215136214, a1);
  type metadata accessor for CustomGrouping();
}

uint64_t sub_215047AD4(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  sub_21512CB5C(v13, v11, a1, (uint64_t)&v15, v2);
  v4 = v17;
  v5 = v20;
  v12 = v16;
  v14 = v15;
  v9 = v19;
  v10 = v18;
  *(_QWORD *)(v1 - 112) = *(_QWORD *)(v1 - 160);
  sub_215049D70(v1 - 112);
  swift_release();
  swift_release();
  v15 = v14;
  v16 = v12;
  v17 = v4;
  *(_OWORD *)(v1 - 208) = v10;
  *(_OWORD *)(v1 - 192) = v9;
  *(_QWORD *)(v1 - 176) = v5;
  sub_21512BF78(a1, v7);
  sub_21512BF78(a1, v8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_215047BD8()
{
  sub_215047D98();
}

uint64_t sub_215047BF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *(_OWORD *)(v1 + 16) = xmmword_215135F90;
  *(_OWORD *)(v1 + 32) = xmmword_215135FA0;
  *(_OWORD *)(v1 + 48) = xmmword_215135FB0;
  *(_OWORD *)(v1 + 64) = xmmword_215135FC0;
  *(_OWORD *)(v1 + 80) = xmmword_215135FD0;
  *(_OWORD *)(v1 + 96) = xmmword_215135FE0;
  *(_QWORD *)(v1 + 112) = 0x5851F42D4C957F2DLL;
  *(_QWORD *)(v1 + 128) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7578);
  result = swift_allocObject();
  v4 = result;
  v5 = 0;
  *(_OWORD *)(result + 16) = xmmword_215135F80;
  *(_QWORD *)(result + 32) = a1;
  while (1)
  {
    v6 = v5 + 1;
    if (v5 >= v5 + 1)
      break;
    v7 = *(_QWORD *)(v4 + 8 * v5 + 32) ^ (*(_QWORD *)(v4 + 8 * v5 + 32) >> 30);
    v8 = 0x5851F42D00000000 * v7
       + 0x4C957F2D00000000 * HIDWORD(v7)
       + 1284865837 * (*(_DWORD *)(v4 + 8 * v5 + 32) ^ (*(_QWORD *)(v4 + 8 * v5 + 32) >> 30));
    v9 = v8 + v6;
    if (__CFADD__(v8, v6))
      goto LABEL_9;
    v10 = *(_QWORD *)(v4 + 24);
    if (v6 >= v10 >> 1)
    {
      result = (uint64_t)sub_21502DAB0((char *)(v10 > 1), v5 + 2, 1, (char *)v4);
      v4 = result;
    }
    *(_QWORD *)(v4 + 16) = v5 + 2;
    *(_QWORD *)(v4 + 8 * v5++ + 40) = v9;
    if (v5 == 623)
    {
      *(_QWORD *)(v1 + 120) = v4;
      return v1;
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

unint64_t sub_215047D54()
{
  unint64_t result;

  result = qword_254DA7870;
  if (!qword_254DA7870)
  {
    result = MEMORY[0x2199DC4C4](&unk_2151360AC, &type metadata for SeededRandomNumberGenerator);
    atomic_store(result, (unint64_t *)&qword_254DA7870);
  }
  return result;
}

void sub_215047D98()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;

  v1 = *(_QWORD *)(v0 + 128);
  if (v1 == 624)
  {
    v2 = 0;
    v3 = 156;
    while (1)
    {
      v4 = *(char **)(v0 + 120);
      v5 = *((_QWORD *)v4 + 2);
      if (v2 >= v5)
        break;
      v6 = v2 + 1;
      if (v2 == 623)
        v7 = 0;
      else
        v7 = v2 + 1;
      if (v7 >= v5)
        goto LABEL_23;
      v8 = *(_QWORD *)&v4[8 * v7 + 32] % 0x270uLL;
      if ((v8 & 1) != 0)
        v9 = ((v8 | ((unint64_t)*(unsigned int *)&v4[8 * v2 + 36] << 32)) >> 1) ^ 0xB5026F5AA96619E9;
      else
        v9 = (v8 | ((unint64_t)*(unsigned int *)&v4[8 * v2 + 36] << 32)) >> 1;
      if (v2 + 156 - 624 * (v3 / 0x270) >= v5)
        goto LABEL_24;
      v10 = *(_QWORD *)&v4[8 * v2 + 1280 - 4992 * (v3 / 0x270)];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v0 + 120) = v4;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v4 = sub_21501E524((uint64_t)v4);
        *(_QWORD *)(v0 + 120) = v4;
      }
      if (v2 >= *((_QWORD *)v4 + 2))
        goto LABEL_25;
      *(_QWORD *)&v4[8 * v2 + 32] = v10 ^ v9;
      *(_QWORD *)(v0 + 128) = 0;
      ++v3;
      ++v2;
      if (v6 == 624)
        goto LABEL_19;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  else
  {
    if ((v1 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_19:
      v1 = 0;
    }
    if (v1 < *(_QWORD *)(*(_QWORD *)(v0 + 120) + 16))
    {
      *(_QWORD *)(v0 + 128) = v1 + 1;
      return;
    }
  }
  __break(1u);
}

uint64_t sub_215047F5C()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t sub_215047F80@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  TabularData::DataFrame v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = swift_bridgeObjectRetain();
  v3 = (_QWORD *)sub_215049B50(v2, (void (*)(__int128 *__return_ptr, uint64_t *, _QWORD *))sub_215049DA8);
  swift_bridgeObjectRelease();
  v4 = v3[2];
  if (v4)
  {
    v6 = v3[4];
    v5 = v3[5];
    v7 = v3[6];
    v16 = v6;
    v17 = v5;
    v18 = v7;
    v8 = v4 - 1;
    if (v4 == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = v3 + 9;
      do
      {
        v13 = *v12;
        v14 = *((_OWORD *)v12 - 1);
        v15 = v13;
        v11.columns._rawValue = &v14;
        DataFrame.append(rowsOf:)(v11);
        v12 += 3;
        --v8;
      }
      while (v8);
      result = swift_bridgeObjectRelease_n();
      v6 = v16;
      v5 = v17;
      v7 = v18;
    }
    *a1 = v6;
    a1[1] = v5;
    a1[2] = v7;
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    result = sub_2150203D0(MEMORY[0x24BEE4AF8]);
    *a1 = v10;
    a1[1] = v10;
    a1[2] = result;
  }
  return result;
}

uint64_t sub_2150480B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 *v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _BYTE v34[25];
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;

  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  v10 = sub_2150EBD1C(v7, v8, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v7, v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = sub_21501EF2C(v7, v8, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a3 + 8))(&v36, v11);
  result = sub_21504AF7C(v10);
  if ((v10 & 0x8000000000000000) == 0)
  {
    v28 = (__int128 *)a2;
    if (!v10)
    {
LABEL_28:
      v27 = v28[1];
      v33 = *v28;
      *(_OWORD *)v34 = v27;
      *(_OWORD *)&v34[9] = *(__int128 *)((char *)v28 + 25);
      sub_2150451E0((uint64_t)v28);
      DataFrame.init(_:)(&v33, a4);
      sub_21504B2B8((uint64_t)a4, 1);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v13 = 0;
    v14 = a1 + 32;
    v15 = *(_QWORD *)(a1 + 16);
    v31 = 40 * v15 + 32;
    v32 = v10;
    v30 = v15;
    while (v13 != v10)
    {
      v16 = (char *)v37;
      v17 = *(_QWORD *)(v37 + 16);
      if (v15 >= v17)
        v18 = *(_QWORD *)(v37 + 16);
      else
        v18 = v15;
      if (v18)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = sub_21501E4D4((uint64_t)v16);
        v19 = 0;
        v20 = 0;
        v37 = (uint64_t)v16;
        while (1)
        {
          sub_215049DE0(v14 + v19, (uint64_t)&v33);
          if (*(_QWORD *)&v34[8])
          {
            sub_21513013C();
            sub_215046238((uint64_t)&v33);
          }
          else
          {
            sub_215046750((uint64_t)&v33, &qword_254DA75E8);
            memset(v35, 0, sizeof(v35));
          }
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_21501E4D4((uint64_t)v16);
            v16 = (char *)result;
            v37 = result;
          }
          if (v20 >= *((_QWORD *)v16 + 2))
            break;
          ++v20;
          v21 = (uint64_t)&v16[v19 + 32];
          v22 = *(_QWORD *)&v16[v19 + 56];
          v23 = *(_QWORD *)&v16[v19 + 64];
          __swift_mutable_project_boxed_opaque_existential_1(v21, v22);
          (*(void (**)(_OWORD *, uint64_t, uint64_t))(v23 + 24))(v35, v22, v23);
          result = sub_215046750((uint64_t)v35, qword_253F0D058);
          v16 = (char *)v37;
          v19 += 40;
          if (v18 == v20)
          {
            v17 = *(_QWORD *)(v37 + 16);
            goto LABEL_21;
          }
        }
        __break(1u);
        goto LABEL_30;
      }
LABEL_21:
      if (v15 < v17)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21501E4D4((uint64_t)v16);
          v16 = (char *)result;
        }
        v37 = (uint64_t)v16;
        v24 = (uint64_t)&v16[v31];
        while (v15 < *((_QWORD *)v16 + 2))
        {
          ++v15;
          v25 = *(_QWORD *)(v24 + 24);
          v26 = *(_QWORD *)(v24 + 32);
          __swift_mutable_project_boxed_opaque_existential_1(v24, v25);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
          v24 += 40;
          if (v17 == v15)
          {
            v37 = (uint64_t)v16;
            v15 = v30;
            goto LABEL_4;
          }
        }
LABEL_30:
        __break(1u);
        break;
      }
LABEL_4:
      ++v13;
      v10 = v32;
      if (v13 == v32)
        goto LABEL_28;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2150483BC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD *v64;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  char v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  _OWORD v87[3];

  v85 = *v4;
  v5 = v85;
  v6 = *(_QWORD *)(v85 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    sub_215049E28((uint64_t)&v85);
    v84 = v7;
    result = (uint64_t)sub_215038D6C(0, v6, 0);
    v10 = v7;
    v11 = (_OWORD *)(v5 + 40);
    do
    {
      v12 = *((_QWORD *)v11 - 1);
      v13 = v11[1];
      v86 = *v11;
      v87[0] = v13;
      *(_OWORD *)((char *)v87 + 9) = *(_OWORD *)((char *)v11 + 25);
      if ((a2 & 1) != 0)
      {
        v14 = v10;
        swift_bridgeObjectRetain();
        result = sub_215129BA8((uint64_t)&v76, (uint64_t)&v80, a4);
      }
      else
      {
        if (a1 < 0)
        {
          __break(1u);
          return result;
        }
        v14 = v10;
        type metadata accessor for MersenneTwisterGenerator();
        swift_initStackObject();
        swift_bridgeObjectRetain();
        v74 = sub_215047BF8(a1);
        sub_215129368((uint64_t)&v76, (uint64_t)&v80, &v74, a4);
        result = swift_release();
      }
      v15 = v76;
      v16 = v77;
      v17 = v78;
      v18 = v79;
      v19 = v80;
      v20 = v81;
      v21 = v82;
      v22 = v83;
      v10 = v14;
      v23 = *(_QWORD *)(v14 + 16);
      v24 = *(_QWORD *)(v10 + 24);
      v84 = v10;
      if (v23 >= v24 >> 1)
      {
        v62 = v78;
        v63 = v76;
        v60 = v82;
        v61 = v80;
        result = (uint64_t)sub_215038D6C((_QWORD *)(v24 > 1), v23 + 1, 1);
        v21 = v60;
        v19 = v61;
        v17 = v62;
        v15 = v63;
        v10 = v84;
      }
      *(_QWORD *)(v10 + 16) = v23 + 1;
      v25 = v10 + 104 * v23;
      *(_QWORD *)(v25 + 32) = v12;
      *(_OWORD *)(v25 + 40) = v15;
      *(_QWORD *)(v25 + 56) = v16;
      *(_OWORD *)(v25 + 64) = v17;
      *(_BYTE *)(v25 + 80) = v18;
      *(_OWORD *)(v25 + 88) = v19;
      *(_QWORD *)(v25 + 104) = v20;
      *(_OWORD *)(v25 + 112) = v21;
      *(_BYTE *)(v25 + 128) = v22;
      v11 = (_OWORD *)((char *)v11 + 56);
      --v6;
    }
    while (v6);
    sub_215049D70((uint64_t)&v85);
    v7 = MEMORY[0x24BEE4AF8];
    v26 = *(_QWORD *)(v10 + 16);
    if (!v26)
      goto LABEL_21;
    goto LABEL_11;
  }
  v10 = MEMORY[0x24BEE4AF8];
  v26 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (v26)
  {
LABEL_11:
    v75 = v7;
    v27 = v10;
    sub_215038D50(0, v26, 0);
    v28 = v75;
    v67 = v27;
    v29 = (char *)(v27 + 80);
    v72 = v26;
    v30 = v26;
    do
    {
      v31 = *((_QWORD *)v29 - 6);
      v32 = *((_QWORD *)v29 - 5);
      v33 = *((_QWORD *)v29 - 4);
      v34 = *((_QWORD *)v29 - 3);
      v35 = *((_QWORD *)v29 - 2);
      v36 = *((_QWORD *)v29 - 1);
      v37 = *v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v69 = v35;
      sub_2150437A8(v35, v36, v37);
      v75 = v28;
      v39 = *(_QWORD *)(v28 + 16);
      v38 = *(_QWORD *)(v28 + 24);
      if (v39 >= v38 >> 1)
      {
        sub_215038D50((_QWORD *)(v38 > 1), v39 + 1, 1);
        v28 = v75;
      }
      v29 += 104;
      *(_QWORD *)(v28 + 16) = v39 + 1;
      v40 = v28 + 56 * v39;
      *(_QWORD *)(v40 + 32) = v31;
      *(_QWORD *)(v40 + 40) = v32;
      *(_QWORD *)(v40 + 48) = v33;
      *(_QWORD *)(v40 + 56) = v34;
      *(_QWORD *)(v40 + 64) = v69;
      *(_QWORD *)(v40 + 72) = v36;
      *(_BYTE *)(v40 + 80) = v37;
      --v30;
    }
    while (v30);
    v68 = v28;
    v75 = MEMORY[0x24BEE4AF8];
    v41 = v72;
    sub_215038D50(0, v72, 0);
    v42 = v75;
    v43 = (char *)(v67 + 128);
    do
    {
      v44 = *((_QWORD *)v43 - 5);
      v45 = *((_QWORD *)v43 - 4);
      v46 = *((_QWORD *)v43 - 3);
      v47 = *((_QWORD *)v43 - 2);
      v48 = *((_QWORD *)v43 - 1);
      v49 = *v43;
      v70 = *((_QWORD *)v43 - 12);
      v73 = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2150437A8(v47, v48, v49);
      v75 = v42;
      v51 = *(_QWORD *)(v42 + 16);
      v50 = *(_QWORD *)(v42 + 24);
      if (v51 >= v50 >> 1)
      {
        sub_215038D50((_QWORD *)(v50 > 1), v51 + 1, 1);
        v42 = v75;
      }
      v43 += 104;
      *(_QWORD *)(v42 + 16) = v51 + 1;
      v52 = v42 + 56 * v51;
      *(_QWORD *)(v52 + 32) = v70;
      *(_QWORD *)(v52 + 40) = v44;
      *(_QWORD *)(v52 + 48) = v45;
      *(_QWORD *)(v52 + 56) = v46;
      *(_QWORD *)(v52 + 64) = v47;
      *(_QWORD *)(v52 + 72) = v48;
      *(_BYTE *)(v52 + 80) = v49;
      v41 = v73 - 1;
    }
    while (v73 != 1);
    swift_bridgeObjectRelease();
    v53 = v68;
    goto LABEL_22;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  v42 = MEMORY[0x24BEE4AF8];
  v53 = MEMORY[0x24BEE4AF8];
LABEL_22:
  v55 = v64[1];
  v54 = v64[2];
  v57 = v64[3];
  v56 = v64[4];
  swift_retain();
  swift_retain();
  v58 = sub_215046BC0(v53);
  swift_bridgeObjectRelease();
  swift_retain();
  swift_retain();
  v59 = sub_215046BC0(v42);
  result = swift_bridgeObjectRelease();
  *a3 = v58;
  a3[1] = v55;
  a3[2] = v54;
  a3[3] = v57;
  a3[4] = v56;
  a3[5] = v59;
  a3[6] = v55;
  a3[7] = v54;
  a3[8] = v57;
  a3[9] = v56;
  return result;
}

_QWORD *sub_215048820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7730);
  v9 = (_QWORD *)swift_allocObject();
  v10 = _swift_stdlib_malloc_size(v9);
  v11 = v10 - 32;
  if (v10 < 32)
    v11 = v10 - 1;
  v9[2] = v4;
  v9[3] = 2 * (v11 >> 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = sub_21512078C((uint64_t)&v14, (uint64_t)(v9 + 4), v4, a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12 != v4)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v9;
}

uint64_t sub_215048920(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  _QWORD v12[5];
  char v13;

  v2 = sub_2150EBD1C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = v2;
  if (v2 <= 0)
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA79E0);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 1;
    v4[2] = v3;
    v4[3] = 2 * (v6 >> 5);
  }
  v7 = sub_2151208E8((uint64_t)v12, v4 + 4, v3);
  v8 = v12[3];
  v9 = v12[4];
  v10 = v13;
  sub_2150451E0(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_21501EF2C(v8, v9, v10);
  if (v7 == v3)
    return (uint64_t)v4;
  __break(1u);
  return result;
}

uint64_t sub_215048A3C(_QWORD *a1)
{
  return sub_215048A74(a1, (void (*)(_QWORD *, _BYTE *))sub_2150452A8, (uint64_t (*)(_BYTE *, _QWORD *, uint64_t))sub_215120A64, qword_254DA79E8);
}

uint64_t sub_215048A58(_QWORD *a1)
{
  return sub_215048A74(a1, (void (*)(_QWORD *, _BYTE *))sub_21501EE90, (uint64_t (*)(_BYTE *, _QWORD *, uint64_t))sub_215120A78, &qword_254DA79D8);
}

uint64_t sub_215048A74(_QWORD *a1, void (*a2)(_QWORD *, _BYTE *), uint64_t (*a3)(_BYTE *, _QWORD *, uint64_t), uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[40];
  _BYTE v18[48];

  v9 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 48))(v9);
  if (!v10)
    return MEMORY[0x24BEE4AF8];
  v11 = v10;
  if (v10 <= 0)
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7730);
    v12 = (_QWORD *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 1;
    v12[2] = v11;
    v12[3] = 2 * (v14 >> 5);
  }
  a2(a1, v17);
  v15 = a3(v18, v12 + 4, v11);
  result = sub_215046750((uint64_t)v18, a4);
  if (v15 == v11)
    return (uint64_t)v12;
  __break(1u);
  return result;
}

_QWORD *sub_215048B84(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D208);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = 1;
  v4[3] = 2 * (v6 >> 4);
  v4[4] = a1;
  v4[5] = a2;
  return v4;
}

_QWORD *sub_215048BF0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D200);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = sub_215120DBC(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_21504647C();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

Swift::Int sub_215048CD4(uint64_t a1)
{
  Swift::Int result;
  Swift::Int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _BYTE v16[25];
  __int128 v17;
  _OWORD v18[2];

  result = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 16);
  v17 = *(_OWORD *)a1;
  v18[0] = v4;
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)(a1 + 25);
  if (result < v3)
  {
    v5 = 0;
    while (1)
    {
      v6 = v5 + 1;
      if (__OFADD__(v5, 1))
        break;
      v15 = v17;
      *(_OWORD *)v16 = v18[0];
      *(_OWORD *)&v16[9] = *(_OWORD *)((char *)v18 + 9);
      result = DataFrame.Rows.index(after:)(result);
      ++v5;
      if (result == v3)
        goto LABEL_10;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (v3 < result)
  {
    v6 = 0;
    while (!__OFSUB__(v6--, 1))
    {
      v15 = v17;
      *(_OWORD *)v16 = v18[0];
      *(_OWORD *)&v16[9] = *(_OWORD *)((char *)v18 + 9);
      result = DataFrame.Rows.index(before:)(result);
      if (result == v3)
      {
LABEL_10:
        if (!v6)
          return MEMORY[0x24BEE4AF8];
        if (v6 <= 0)
        {
          v8 = (Swift::Int *)MEMORY[0x24BEE4AF8];
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D200);
          v8 = (Swift::Int *)swift_allocObject();
          v9 = _swift_stdlib_malloc_size(v8);
          v10 = v9 - 32;
          if (v9 < 32)
            v10 = v9 - 25;
          v8[2] = v6;
          v8[3] = 2 * (v10 >> 3);
        }
        sub_2150451E0(a1);
        v11 = sub_215120F50((uint64_t)&v15, v8 + 4, v6);
        v12 = *(_QWORD *)&v16[8];
        v13 = *(_QWORD *)&v16[16];
        v14 = v16[24];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = sub_21501EF2C(v12, v13, v14);
        if (v11 != v6)
          goto LABEL_21;
        return (Swift::Int)v8;
      }
    }
    goto LABEL_20;
  }
  return MEMORY[0x24BEE4AF8];
}

_QWORD *sub_215048E68(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1F0);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_21512108C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_21504647C();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

int64_t *sub_215048F4C(int64_t *result, int64_t a2)
{
  int64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)MEMORY[0x24BEE4AF8];
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D200);
      v5 = (int64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = sub_215120C8C(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_215049010(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = *v2;
  sub_2151305A4();
  swift_bridgeObjectRetain();
  sub_21512FB3C();
  v6 = sub_2151305EC();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (sub_21513043C() & 1) == 0)
  {
    v15 = ~v7;
    do
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v16 = (_QWORD *)(v9 + 16 * v8);
      v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (sub_21513043C() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_21503B004();
    v13 = v19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8);
  sub_2150D92B0(v8);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_21504919C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = sub_215130598();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_21503B1B4();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_2150D9474(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_2150492A4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2150A4F1C((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_21504930C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_21504930C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;

  v2 = a1;
  v3 = a1[1];
  result = sub_215130394();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v76 = 0;
      v77 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v79 = *(_QWORD *)(v77 + 8 * i);
        v80 = v76;
        do
        {
          v81 = *(_QWORD *)(v77 + v80);
          if (v79 >= v81)
            break;
          if (!v77)
            goto LABEL_142;
          *(_QWORD *)(v77 + v80 + 8) = v81;
          *(_QWORD *)(v77 + v80) = v79;
          v80 -= 8;
        }
        while (v80 != -8);
        v76 += 8;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v93 = result;
    v94 = v3;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      result = sub_21512FCF8();
      *(_QWORD *)(result + 16) = v6;
      v3 = v94;
      v92 = result;
      v96 = (char *)(result + 32);
LABEL_13:
      v8 = 0;
      v9 = *v2;
      v90 = v2;
      v91 = *v2 - 8;
      v10 = MEMORY[0x24BEE4AF8];
      v95 = *v2;
      while (1)
      {
        v12 = v8++;
        if (v8 < v3)
        {
          v13 = *(_QWORD *)(v9 + 8 * v8);
          v14 = *(_QWORD *)(v9 + 8 * v12);
          v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v15 = v13;
            while (1)
            {
              v16 = *(_QWORD *)(v9 + 8 * v8);
              if (v13 < v14 == v16 >= v15)
                break;
              ++v8;
              v15 = v16;
              if (v3 == v8)
              {
                v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12)
              goto LABEL_139;
            if (v12 < v8)
            {
              v17 = v8 - 1;
              v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9)
                    goto LABEL_145;
                  v19 = *(_QWORD *)(v9 + 8 * v18);
                  *(_QWORD *)(v9 + 8 * v18) = *(_QWORD *)(v9 + 8 * v17);
                  *(_QWORD *)(v9 + 8 * v17) = v19;
                }
                v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12))
            goto LABEL_136;
          if (v8 - v12 < v93)
          {
            v20 = v12 + v93;
            if (__OFADD__(v12, v93))
              goto LABEL_140;
            if (v20 >= v3)
              v20 = v3;
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              v21 = (uint64_t *)(v91 + 8 * v8);
              do
              {
                v22 = *(_QWORD *)(v9 + 8 * v8);
                v23 = v12;
                v24 = v21;
                do
                {
                  v25 = *v24;
                  if (v22 >= *v24)
                    break;
                  if (!v9)
                    goto LABEL_143;
                  *v24 = v22;
                  v24[1] = v25;
                  --v24;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              v8 = v20;
            }
          }
        }
        if (v8 < v12)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21502DABC(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
          v10 = result;
        }
        v27 = *(_QWORD *)(v10 + 16);
        v26 = *(_QWORD *)(v10 + 24);
        v11 = v27 + 1;
        v9 = v95;
        if (v27 >= v26 >> 1)
        {
          result = (uint64_t)sub_21502DABC((char *)(v26 > 1), v27 + 1, 1, (char *)v10);
          v9 = v95;
          v10 = result;
        }
        *(_QWORD *)(v10 + 16) = v11;
        v28 = v10 + 32;
        v29 = (uint64_t *)(v10 + 32 + 16 * v27);
        *v29 = v12;
        v29[1] = v8;
        if (v27)
        {
          while (1)
          {
            v30 = v11 - 1;
            if (v11 >= 4)
            {
              v35 = v28 + 16 * v11;
              v36 = *(_QWORD *)(v35 - 64);
              v37 = *(_QWORD *)(v35 - 56);
              v41 = __OFSUB__(v37, v36);
              v38 = v37 - v36;
              if (v41)
                goto LABEL_120;
              v40 = *(_QWORD *)(v35 - 48);
              v39 = *(_QWORD *)(v35 - 40);
              v41 = __OFSUB__(v39, v40);
              v33 = v39 - v40;
              v34 = v41;
              if (v41)
                goto LABEL_121;
              v42 = v11 - 2;
              v43 = (uint64_t *)(v28 + 16 * (v11 - 2));
              v45 = *v43;
              v44 = v43[1];
              v41 = __OFSUB__(v44, v45);
              v46 = v44 - v45;
              if (v41)
                goto LABEL_122;
              v41 = __OFADD__(v33, v46);
              v47 = v33 + v46;
              if (v41)
                goto LABEL_124;
              if (v47 >= v38)
              {
                v65 = (uint64_t *)(v28 + 16 * v30);
                v67 = *v65;
                v66 = v65[1];
                v41 = __OFSUB__(v66, v67);
                v68 = v66 - v67;
                if (v41)
                  goto LABEL_130;
                v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v59 = *(_QWORD *)(v10 + 32);
                v60 = *(_QWORD *)(v10 + 40);
                v41 = __OFSUB__(v60, v59);
                v52 = v60 - v59;
                v53 = v41;
                goto LABEL_78;
              }
              v32 = *(_QWORD *)(v10 + 32);
              v31 = *(_QWORD *)(v10 + 40);
              v41 = __OFSUB__(v31, v32);
              v33 = v31 - v32;
              v34 = v41;
            }
            if ((v34 & 1) != 0)
              goto LABEL_123;
            v42 = v11 - 2;
            v48 = (uint64_t *)(v28 + 16 * (v11 - 2));
            v50 = *v48;
            v49 = v48[1];
            v51 = __OFSUB__(v49, v50);
            v52 = v49 - v50;
            v53 = v51;
            if (v51)
              goto LABEL_125;
            v54 = (uint64_t *)(v28 + 16 * v30);
            v56 = *v54;
            v55 = v54[1];
            v41 = __OFSUB__(v55, v56);
            v57 = v55 - v56;
            if (v41)
              goto LABEL_127;
            if (__OFADD__(v52, v57))
              goto LABEL_129;
            if (v52 + v57 >= v33)
            {
              v58 = v33 < v57;
LABEL_84:
              if (v58)
                v30 = v42;
              goto LABEL_86;
            }
LABEL_78:
            if ((v53 & 1) != 0)
              goto LABEL_126;
            v61 = (uint64_t *)(v28 + 16 * v30);
            v63 = *v61;
            v62 = v61[1];
            v41 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v41)
              goto LABEL_128;
            if (v64 < v52)
              goto LABEL_15;
LABEL_86:
            v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9)
              goto LABEL_144;
            v70 = (uint64_t *)(v28 + 16 * v69);
            v71 = *v70;
            v72 = v28;
            v73 = (_QWORD *)(v28 + 16 * v30);
            v74 = v73[1];
            result = sub_215049950((char *)(v9 + 8 * *v70), (char *)(v9 + 8 * *v73), v9 + 8 * v74, v96);
            if (v1)
              goto LABEL_114;
            if (v74 < v71)
              goto LABEL_117;
            if (v30 > *(_QWORD *)(v10 + 16))
              goto LABEL_118;
            *v70 = v71;
            *(_QWORD *)(v72 + 16 * v69 + 8) = v74;
            v75 = *(_QWORD *)(v10 + 16);
            if (v30 >= v75)
              goto LABEL_119;
            v11 = v75 - 1;
            result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
            v28 = v72;
            *(_QWORD *)(v10 + 16) = v75 - 1;
            v9 = v95;
            if (v75 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v94;
        if (v8 >= v94)
        {
          v7 = v92;
          v2 = v90;
          goto LABEL_103;
        }
      }
    }
    v7 = MEMORY[0x24BEE4AF8];
    v96 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v92 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v10 = MEMORY[0x24BEE4AF8];
LABEL_103:
    v92 = v7;
    if (v11 >= 2)
    {
      v82 = *v2;
      do
      {
        v83 = v11 - 2;
        if (v11 < 2)
          goto LABEL_132;
        if (!v82)
          goto LABEL_146;
        v84 = v10;
        v85 = v10 + 32;
        v86 = *(_QWORD *)(v10 + 32 + 16 * v83);
        v87 = *(_QWORD *)(v10 + 32 + 16 * (v11 - 1) + 8);
        result = sub_215049950((char *)(v82 + 8 * v86), (char *)(v82 + 8 * *(_QWORD *)(v85 + 16 * (v11 - 1))), v82 + 8 * v87, v96);
        if (v1)
          break;
        if (v87 < v86)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21501E510(v84);
          v84 = result;
        }
        if (v83 >= *(_QWORD *)(v84 + 16))
          goto LABEL_134;
        v88 = (_QWORD *)(v84 + 32 + 16 * v83);
        *v88 = v86;
        v88[1] = v87;
        v89 = *(_QWORD *)(v84 + 16);
        if (v11 > v89)
          goto LABEL_135;
        result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        v10 = v84;
        *(_QWORD *)(v84 + 16) = v89 - 1;
        v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v92 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_215049950(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 7;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __src || &__src[8 * v13] <= a4)
      memmove(a4, __src, 8 * v13);
    v14 = &v4[8 * v13];
    if (v7 >= v6 || v11 < 8)
      goto LABEL_39;
    v17 = (char *)(a3 - 8);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 8;
      v21 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      v20 = v21;
      if (*((_QWORD *)v14 - 1) < v21)
        break;
      v20 = *((_QWORD *)v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        v14 -= 8;
LABEL_35:
        *(_QWORD *)v17 = v20;
        goto LABEL_36;
      }
      v22 = v17 >= v14;
      v14 -= 8;
      if (v22)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        v17 -= 8;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[8 * v10] <= a4)
    memmove(a4, __dst, 8 * v10);
  v14 = &v4[8 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v15 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        break;
      v16 = v7 == v6;
      v6 += 8;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      v7 += 8;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = *(_QWORD *)v4;
    v16 = v7 == v4;
    v4 += 8;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *(_QWORD *)v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = v14 - v4 + (v14 - v4 < 0 ? 7uLL : 0);
  if (v6 != v4 || v6 >= &v4[v23 & 0xFFFFFFFFFFFFFFF8])
    memmove(v6, v4, 8 * (v23 >> 3));
  return 1;
}

uint64_t sub_215049B50(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t *, _QWORD *))
{
  int64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v26 = MEMORY[0x24BEE4AF8];
    sub_215038D18(0, v3, 0);
    result = v26;
    v5 = (char *)(a1 + 80);
    do
    {
      v18 = result;
      v20 = v3;
      v6 = *((_QWORD *)v5 - 5);
      v7 = *((_QWORD *)v5 - 4);
      v8 = *((_QWORD *)v5 - 3);
      v9 = *((_QWORD *)v5 - 2);
      v10 = *((_QWORD *)v5 - 1);
      v11 = *v5;
      v21 = *((_QWORD *)v5 - 6);
      v22[0] = v6;
      v22[1] = v7;
      v22[2] = v8;
      v22[3] = v9;
      v22[4] = v10;
      v23 = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2150437A8(v9, v10, v11);
      a2(&v24, &v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21501EF2C(v9, v10, v11);
      result = v18;
      v12 = v24;
      v13 = v25;
      v26 = v18;
      v15 = *(_QWORD *)(v18 + 16);
      v14 = *(_QWORD *)(v18 + 24);
      if (v15 >= v14 >> 1)
      {
        v19 = v24;
        sub_215038D18((char *)(v14 > 1), v15 + 1, 1);
        v12 = v19;
        result = v26;
      }
      v5 += 56;
      *(_QWORD *)(result + 16) = v15 + 1;
      v16 = result + 24 * v15;
      *(_OWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 48) = v13;
      v3 = v20 - 1;
    }
    while (v20 != 1);
  }
  return result;
}

unint64_t sub_215049CE8()
{
  unint64_t result;

  result = qword_254DA7878;
  if (!qword_254DA7878)
  {
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&qword_254DA7878);
  }
  return result;
}

unint64_t sub_215049D2C()
{
  unint64_t result;

  result = qword_254DA7880;
  if (!qword_254DA7880)
  {
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BEE4590], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&qword_254DA7880);
  }
  return result;
}

uint64_t sub_215049D70(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SeededRandomNumberGenerator()
{
  return &type metadata for SeededRandomNumberGenerator;
}

uint64_t sub_215049DA8@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;
  _OWORD v9[2];

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *a1;
  v6 = a2[1];
  v8 = *a2;
  v9[0] = v6;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)a2 + 25);
  return sub_2150480B8(v5, (uint64_t)&v8, v4, a3);
}

uint64_t sub_215049DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA75E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_215049E28(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AnyHashableBuilder()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s11TabularData18AnyHashableBuilderVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AnyHashableBuilder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AnyHashableBuilder(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyHashableBuilder(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyHashableBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyHashableBuilder()
{
  return &type metadata for AnyHashableBuilder;
}

uint64_t _s11TabularData26IntegerJSONColumnProcessorVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *_s11TabularData26IntegerJSONColumnProcessorVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *_s11TabularData26IntegerJSONColumnProcessorVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s11TabularData26IntegerJSONColumnProcessorVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SFrameIndex.Column(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SFrameIndex.Column(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SingleColumnBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SingleColumnBuilder);
}

uint64_t sub_21504A1E8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_21504A1F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *sub_21504A250(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_21504A314(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t sub_21504A474(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  return a1;
}

uint64_t sub_21504A528(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_21504A570(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ColumnBuilder3()
{
  JUMPOUT(0x2199DC470);
}

uint64_t sub_21504A5D8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for BlockInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_21504A610()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *sub_21504A658(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_21504A6DC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_21504A7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t sub_21504A858(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_21504A8A0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ColumnBuilder2()
{
  JUMPOUT(0x2199DC470);
}

uint64_t sub_21504A900(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_215038BC8(0, v1, 0);
    v2 = v14;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      v9 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_215038BC8(0, *(_QWORD *)(v14 + 16) + 1, 1);
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_215038BC8((char *)(v10 > 1), v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21504AA1C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  v1 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1F0);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_215135F80;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  swift_bridgeObjectRetain();
  return v3;
}

__n128 sub_21504AA78@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  __n128 v11;

  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(a1, a2, 0, a3, &v10);
  v8 = v10;
  result = v11;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = v8;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

double sub_21504AAE4(Swift::Int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(v4, v5, a1, v6, &v9);
  v7 = v9;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = v7;
  result = *(double *)&v10;
  *(_OWORD *)(v2 + 24) = v10;
  return result;
}

uint64_t sub_21504AB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for Column(0, *(_QWORD *)(a2 + 16), a3, a4);
  return Column.append(_:)(a1, v5, v6, v7);
}

uint64_t sub_21504AB98(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::Bool is_nil;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  __int128 v19;
  Swift::Int_optional v20;

  v4 = v3;
  v8 = *v3;
  v7 = (void *)v3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[2] = v8;
  v3[3] = (uint64_t)v7;
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v18 = *a1;
  *(_QWORD *)&v19 = v10;
  *((_QWORD *)&v19 + 1) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v8;
  v12._object = v7;
  v20 = DataFrame.indexOfColumn(_:)(v12);
  is_nil = v20.is_nil;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!is_nil)
  {
    if ((a2 & 1) != 0)
    {
      DataFrame.removeColumn(_:)(v8, (uint64_t)v7, (uint64_t)&v18);
      sub_21501EA34((uint64_t)&v18);
    }
    else
    {
      v18 = v9;
      *(_QWORD *)&v19 = v10;
      *((_QWORD *)&v19 + 1) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21504AD10(v4 + 2, v8, (uint64_t)v7, (uint64_t)&v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v18 = v4[2];
  v19 = *(_OWORD *)(v4 + 3);
  return DataFrame.append<A>(column:)((uint64_t)&v18, *(_QWORD *)(a3 + 16), v14, v15);
}

uint64_t sub_21504AD10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v4 = a3;
  v5 = a2;
  v6 = *(_QWORD *)(a4 + 16);
  v32 = v6;
  v7 = 1;
  do
  {
    swift_bridgeObjectRetain();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v4;
    if (*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRetain();
      sub_21502F840(v5, v4);
      v11 = v10;
      result = swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        continue;
    }
    swift_bridgeObjectRetain();
    v13 = swift_bridgeObjectRetain();
    v14 = sub_215043700(v13, v5, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v14 + 16);
    v31 = v5;
    if (v15)
    {
      v33 = v4;
      v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
      sub_215038BC8(0, v15, 0);
      v16 = v34;
      v17 = (uint64_t *)(v14 + 56);
      do
      {
        v19 = *(v17 - 1);
        v18 = *v17;
        v20 = v34[2];
        v21 = v34[3];
        swift_bridgeObjectRetain();
        if (v20 >= v21 >> 1)
          sub_215038BC8((char *)(v21 > 1), v20 + 1, 1);
        v34[2] = v20 + 1;
        v22 = &v34[2 * v20];
        v22[4] = v19;
        v22[5] = v18;
        v17 += 4;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      v9 = v33;
      v5 = a2;
      v4 = a3;
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v6 = v32;
    v23 = v16[2];
    if (!v23
      || (v24 = v16[4], v25 = v16[5], swift_bridgeObjectRetain(), swift_bridgeObjectRelease(), v23 != 1)
      || !*(_QWORD *)(v32 + 16))
    {
      result = swift_bridgeObjectRelease();
LABEL_18:
      *a1 = v31;
      a1[1] = v9;
      return result;
    }
    sub_21502F840(v24, v25);
    v27 = v26;
    result = swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
      goto LABEL_18;
  }
  while (!__OFADD__(v7++, 1));
  __break(1u);
  return result;
}

uint64_t sub_21504AF7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t result;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v20 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_215038C1C(0, v3, 0);
    v6 = v2 + 32;
    v4 = v20;
    do
    {
      sub_21504C608(v6, (uint64_t)v15);
      v7 = v16;
      v8 = v17;
      __swift_project_boxed_opaque_existential_1(v15, v16);
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v8 + 32))(v18, a1, v7, v8);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_215038C1C(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v4 = v20;
      }
      v10 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_215038C1C((char *)(v9 > 1), v10 + 1, 1);
        v4 = v20;
      }
      *(_QWORD *)(v4 + 16) = v10 + 1;
      v11 = v4 + 40 * v10;
      v12 = v18[0];
      v13 = v18[1];
      *(_QWORD *)(v11 + 64) = v19;
      *(_OWORD *)(v11 + 32) = v12;
      *(_OWORD *)(v11 + 48) = v13;
      v6 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  v1[1] = v4;
  return result;
}

uint64_t sub_21504B0D8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;
  _OWORD v17[2];

  v2 = v1;
  v3 = *(char **)(v1 + 8);
  v4 = *((_QWORD *)v3 + 2);
  v5 = *(_QWORD *)(result + 16);
  if (v5 >= v4)
    v6 = *((_QWORD *)v3 + 2);
  else
    v6 = *(_QWORD *)(result + 16);
  if (!v6)
    goto LABEL_15;
  v1 = result;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_25;
  while (1)
  {
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(v2 + 8) = v3;
    v3 = (char *)(v1 + 32);
    do
    {
      sub_215049DE0((uint64_t)&v3[v7], (uint64_t)v15);
      if (v16)
      {
        sub_21513013C();
        sub_215046238((uint64_t)v15);
      }
      else
      {
        sub_215046750((uint64_t)v15, &qword_254DA75E8);
        memset(v17, 0, sizeof(v17));
      }
      v1 = *(_QWORD *)(v2 + 8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v2 + 8) = v1;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v1 = (uint64_t)sub_21501E4D4(v1);
        *(_QWORD *)(v2 + 8) = v1;
      }
      if (v8 >= *(_QWORD *)(v1 + 16))
      {
        __break(1u);
        goto LABEL_24;
      }
      ++v8;
      v10 = *(_QWORD *)(v1 + v7 + 56);
      v11 = *(_QWORD *)(v1 + v7 + 64);
      v1 = __swift_mutable_project_boxed_opaque_existential_1(v1 + v7 + 32, v10);
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(v11 + 24))(v17, v10, v11);
      result = sub_215046750((uint64_t)v17, qword_253F0D058);
      v7 += 40;
    }
    while (v6 != v8);
    v3 = *(char **)(v2 + 8);
    v4 = *((_QWORD *)v3 + 2);
LABEL_15:
    if (v5 >= v4)
      return result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = sub_21501E4D4((uint64_t)v3);
    *(_QWORD *)(v2 + 8) = v3;
    v12 = (uint64_t)&v3[40 * v5 + 32];
    while (v5 < *((_QWORD *)v3 + 2))
    {
      ++v5;
      v13 = *(_QWORD *)(v12 + 24);
      v14 = *(_QWORD *)(v12 + 32);
      v1 = __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
      v12 += 40;
      if (v4 == v5)
      {
        *(_QWORD *)(v2 + 8) = v3;
        return result;
      }
    }
LABEL_24:
    __break(1u);
LABEL_25:
    v3 = sub_21501E4D4((uint64_t)v3);
  }
}

uint64_t sub_21504B2B8(uint64_t result, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v4 = v2[1];
  v23 = *(_QWORD *)(v4 + 16);
  v24 = (uint64_t *)result;
  if (v23)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_22;
    while (1)
    {
      v5 = 0;
      v6 = 0;
      v3[1] = v4;
      v22 = v3;
      while (v6 < *(_QWORD *)(*v3 + 16))
      {
        sub_21504C608(*v3 + v5 + 32, (uint64_t)&v25);
        v7 = v28;
        v8 = v29;
        v4 = (unint64_t)__swift_project_boxed_opaque_existential_1(&v25, v28);
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
        v11 = v10;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v25);
        v12 = (char *)v3[1];
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v3[1] = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_21501E4D4((uint64_t)v12);
          v3[1] = v12;
        }
        if (v6 >= *((_QWORD *)v12 + 2))
          goto LABEL_19;
        v14 = *(_QWORD *)&v12[v5 + 56];
        v15 = *(_QWORD *)&v12[v5 + 64];
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v12[v5 + 32], v14);
        (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v15 + 8) + 16))(v9, v11, v14);
        v3[1] = v12;
        v16 = *v24;
        v3 = (_QWORD *)v24[1];
        v17 = v24[2];
        v25 = *v24;
        v26 = v3;
        v27 = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18._countAndFlagsBits = v9;
        v18._object = v11;
        *(Swift::Int_optional *)&v19 = DataFrame.indexOfColumn(_:)(v18);
        v4 = *((_QWORD *)&v19 + 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v4 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        if ((a2 & 1) != 0)
        {
          v4 = (unint64_t)v24;
          DataFrame.removeColumn(_:)(v9, (uint64_t)v11, (uint64_t)&v25);
          swift_bridgeObjectRelease();
          sub_21501EA34((uint64_t)&v25);
LABEL_12:
          v3 = v22;
          goto LABEL_15;
        }
        v25 = v16;
        v26 = v3;
        v27 = v17;
        v4 = *((_QWORD *)v12 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v6 >= v4)
          goto LABEL_21;
        sub_21504B564(&v12[v5 + 32], v9, (uint64_t)v11, (uint64_t)&v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = v22;
        v22[1] = v12;
LABEL_15:
        v20 = v3[1];
        if (v6 >= *(_QWORD *)(v20 + 16))
          goto LABEL_20;
        ++v6;
        sub_21501EE90(v20 + v5 + 32, (uint64_t)&v25);
        v4 = (unint64_t)v24;
        DataFrame.append(column:)((uint64_t)&v25);
        result = sub_21501EA34((uint64_t)&v25);
        v5 += 40;
        if (v23 == v6)
          return result;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      v4 = (unint64_t)sub_21501E4D4(v4);
    }
  }
  return result;
}

uint64_t sub_21504B564(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;

  v4 = a3;
  v5 = a2;
  v6 = *(_QWORD *)(a4 + 16);
  v35 = v6;
  v7 = 1;
  do
  {
    swift_bridgeObjectRetain();
    sub_21512FB90();
    v37 = v7;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    v9 = a1[3];
    v10 = a1[4];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 16))(v5, v4, v9);
    v11 = a1[3];
    v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 8))(v11);
    v15 = v13;
    v16 = v14;
    if (!*(_QWORD *)(v6 + 16) || (sub_21502F840(v13, v14), (v17 & 1) == 0))
    {
      swift_bridgeObjectRetain();
      v18 = swift_bridgeObjectRetain();
      v19 = sub_215043700(v18, v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        v38 = (_QWORD *)MEMORY[0x24BEE4AF8];
        sub_215038BC8(0, v20, 0);
        v21 = v38;
        v22 = (uint64_t *)(v19 + 56);
        do
        {
          v24 = *(v22 - 1);
          v23 = *v22;
          v25 = v38[2];
          v26 = v38[3];
          swift_bridgeObjectRetain();
          if (v25 >= v26 >> 1)
            sub_215038BC8((char *)(v26 > 1), v25 + 1, 1);
          v38[2] = v25 + 1;
          v27 = &v38[2 * v25];
          v27[4] = v24;
          v27[5] = v23;
          v22 += 4;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        v4 = a3;
        v5 = a2;
      }
      else
      {
        swift_bridgeObjectRelease();
        v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v6 = v35;
      v28 = v21[2];
      if (!v28)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v29 = v21[4];
      v30 = v21[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v28 != 1 || !*(_QWORD *)(v35 + 16))
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      sub_21502F840(v29, v30);
      v32 = v31;
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
        return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    v7 = v37 + 1;
  }
  while (!__OFADD__(v37, 1));
  __break(1u);
  return result;
}

uint64_t sub_21504B80C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_21504A900(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_21504B860(uint64_t *a1)
{
  return sub_21504B0D8(*a1);
}

uint64_t sub_21504B86C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v0;
  v1 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1F0);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2151360E0;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v1;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

__n128 sub_21504B8E0@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __n128 v15;
  uint64_t v16;
  __n128 v17;

  v8 = *a1;
  v9 = a1[1];
  v10 = *a2;
  v11 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(v8, v9, 0, a3, &v16);
  v12 = v16;
  v15 = v17;
  Column.init(name:capacity:)(v10, v11, 0, a4, &v16);
  v13 = v16;
  result = v17;
  *(_QWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v10;
  *(_QWORD *)(a5 + 24) = v11;
  *(_QWORD *)(a5 + 32) = v12;
  *(__n128 *)(a5 + 40) = v15;
  *(_QWORD *)(a5 + 56) = v13;
  *(__n128 *)(a5 + 64) = result;
  return result;
}

double sub_21504B99C(Swift::Int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(v5, v6, a1, v7, &v14);
  v8 = v14;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = v8;
  *(_OWORD *)(v2 + 40) = v15;
  v9 = *(_QWORD *)(v2 + 16);
  v10 = *(_QWORD *)(v2 + 24);
  v11 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(v9, v10, a1, v11, &v14);
  v12 = v14;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = v12;
  result = *(double *)&v15;
  *(_OWORD *)(v2 + 64) = v15;
  return result;
}

void sub_21504BA64(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Column(0, a2[2], a3, a4);
  Column.append(_:)(a1, v6, v7, v8);
  v9 = sub_215130064();
  v10 = sub_215130064();
  v13 = a2[4];
  v11 = MEMORY[0x24BEE4AB0];
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE4AB0], v9, &v13);
  v12 = a2[5];
  MEMORY[0x2199DC4C4](v11, v10, &v12);
  type metadata accessor for Tuple2();
}

uint64_t sub_21504BB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = v4 + *(int *)(a1 + 52);
  v7 = type metadata accessor for Column(0, v5, a3, a4);
  return Column.append(_:)(v6, v7, v8, v9);
}

uint64_t sub_21504BB60(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::Bool is_nil;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v28;
  __int128 v29;
  Swift::Int_optional v30;
  Swift::Int_optional v31;

  v4 = v3;
  v7 = *v3;
  v6 = (void *)v3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[4] = v7;
  v3[5] = (uint64_t)v6;
  v9 = v3[2];
  v8 = v3[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4[7] = v9;
  v4[8] = v8;
  v11 = *a1;
  v10 = a1[1];
  v12 = a1[2];
  v28 = *a1;
  *(_QWORD *)&v29 = v10;
  *((_QWORD *)&v29 + 1) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v7;
  v13._object = v6;
  v30 = DataFrame.indexOfColumn(_:)(v13);
  LOBYTE(v8) = v30.is_nil;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    if ((a2 & 1) != 0)
    {
      DataFrame.removeColumn(_:)(v7, (uint64_t)v6, (uint64_t)&v28);
      sub_21501EA34((uint64_t)&v28);
    }
    else
    {
      v28 = v11;
      *(_QWORD *)&v29 = v10;
      *((_QWORD *)&v29 + 1) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21504AD10(v4 + 4, v7, (uint64_t)v6, (uint64_t)&v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v14 = *a1;
  v15 = a1[1];
  v16 = a1[2];
  v28 = *a1;
  *(_QWORD *)&v29 = v15;
  *((_QWORD *)&v29 + 1) = v16;
  v17 = v4[2];
  v18 = (void *)v4[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  v31 = DataFrame.indexOfColumn(_:)(v19);
  is_nil = v31.is_nil;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!is_nil)
  {
    if ((a2 & 1) != 0)
    {
      DataFrame.removeColumn(_:)(v17, (uint64_t)v18, (uint64_t)&v28);
      sub_21501EA34((uint64_t)&v28);
    }
    else
    {
      v28 = v14;
      *(_QWORD *)&v29 = v15;
      *((_QWORD *)&v29 + 1) = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21504AD10(v4 + 7, v17, (uint64_t)v18, (uint64_t)&v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v28 = v4[4];
  v29 = *(_OWORD *)(v4 + 5);
  DataFrame.append<A>(column:)((uint64_t)&v28, *(_QWORD *)(a3 + 16), v21, v22);
  v28 = v4[7];
  v29 = *((_OWORD *)v4 + 4);
  return DataFrame.append<A>(column:)((uint64_t)&v28, *(_QWORD *)(a3 + 24), v23, v24);
}

uint64_t sub_21504BE1C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v0;
  v1 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1F0);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2151360F0;
  *(_QWORD *)(v7 + 32) = v2;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v6;
  *(_QWORD *)(v7 + 72) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v7;
}

__n128 sub_21504BEA8@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;

  v11 = *a1;
  v12 = a1[1];
  v13 = *a2;
  v14 = a2[1];
  v15 = *a3;
  v16 = a3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(v11, v12, 0, a4, &v23);
  v17 = v23;
  v22 = v24;
  Column.init(name:capacity:)(v13, v14, 0, a5, &v23);
  v18 = v23;
  v21 = v24;
  Column.init(name:capacity:)(v15, v16, 0, a6, &v23);
  v19 = v23;
  result = v24;
  *(_QWORD *)a7 = v11;
  *(_QWORD *)(a7 + 8) = v12;
  *(_QWORD *)(a7 + 16) = v13;
  *(_QWORD *)(a7 + 24) = v14;
  *(_QWORD *)(a7 + 32) = v15;
  *(_QWORD *)(a7 + 40) = v16;
  *(_QWORD *)(a7 + 48) = v17;
  *(__n128 *)(a7 + 56) = v22;
  *(_QWORD *)(a7 + 72) = v18;
  *(__n128 *)(a7 + 80) = v21;
  *(_QWORD *)(a7 + 96) = v19;
  *(__n128 *)(a7 + 104) = result;
  return result;
}

double sub_21504BFB0(Swift::Int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  __int128 v19;

  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = a2[2];
  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(v5, v6, a1, v7, &v18);
  v8 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = v8;
  *(_OWORD *)(v2 + 56) = v19;
  v9 = *(_QWORD *)(v2 + 16);
  v10 = *(_QWORD *)(v2 + 24);
  v11 = a2[3];
  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(v9, v10, a1, v11, &v18);
  v12 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 72) = v12;
  *(_OWORD *)(v2 + 80) = v19;
  v13 = *(_QWORD *)(v2 + 32);
  v14 = *(_QWORD *)(v2 + 40);
  v15 = a2[4];
  swift_bridgeObjectRetain();
  Column.init(name:capacity:)(v13, v14, a1, v15, &v18);
  v16 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 96) = v16;
  result = *(double *)&v19;
  *(_OWORD *)(v2 + 104) = v19;
  return result;
}

void sub_21504C0C0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for Column(0, a2[2], a3, a4);
  Column.append(_:)(a1, v6, v7, v8);
  v9 = sub_215130064();
  v10 = sub_215130064();
  v11 = sub_215130064();
  v15 = a2[5];
  v12 = MEMORY[0x24BEE4AB0];
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE4AB0], v9, &v15);
  v14 = a2[6];
  MEMORY[0x2199DC4C4](v12, v10, &v14);
  v13 = a2[7];
  MEMORY[0x2199DC4C4](v12, v11, &v13);
  type metadata accessor for Tuple3();
}

uint64_t sub_21504C1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = v5 + *(int *)(a1 + 68);
  v8 = type metadata accessor for Column(0, v4, a3, a4);
  Column.append(_:)(v7, v8, v9, v10);
  v11 = v5 + *(int *)(a1 + 72);
  v14 = type metadata accessor for Column(0, v18, v12, v13);
  return Column.append(_:)(v11, v14, v15, v16);
}

uint64_t sub_21504C224(uint64_t *a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::Bool is_nil;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::Bool v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v39;
  __int128 v40;
  Swift::Int_optional v41;
  Swift::Int_optional v42;
  Swift::Int_optional v43;

  v4 = v3;
  v7 = *v3;
  v6 = (void *)v3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[6] = v7;
  v3[7] = (uint64_t)v6;
  v9 = v3[2];
  v8 = v3[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4[9] = v9;
  v4[10] = v8;
  v11 = v4[4];
  v10 = v4[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4[12] = v11;
  v4[13] = v10;
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v39 = *a1;
  *(_QWORD *)&v40 = v13;
  *((_QWORD *)&v40 + 1) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v7;
  v15._object = v6;
  v41 = DataFrame.indexOfColumn(_:)(v15);
  LOBYTE(v10) = v41.is_nil;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    if ((a2 & 1) != 0)
    {
      DataFrame.removeColumn(_:)(v7, (uint64_t)v6, (uint64_t)&v39);
      sub_21501EA34((uint64_t)&v39);
    }
    else
    {
      v39 = v12;
      *(_QWORD *)&v40 = v13;
      *((_QWORD *)&v40 + 1) = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21504AD10(v4 + 6, v7, (uint64_t)v6, (uint64_t)&v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v17 = *a1;
  v16 = a1[1];
  v18 = a1[2];
  v39 = *a1;
  *(_QWORD *)&v40 = v16;
  *((_QWORD *)&v40 + 1) = v18;
  v19 = v4[2];
  v20 = (void *)v4[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  v42 = DataFrame.indexOfColumn(_:)(v21);
  is_nil = v42.is_nil;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!is_nil)
  {
    if ((a2 & 1) != 0)
    {
      DataFrame.removeColumn(_:)(v19, (uint64_t)v20, (uint64_t)&v39);
      sub_21501EA34((uint64_t)&v39);
    }
    else
    {
      v39 = v17;
      *(_QWORD *)&v40 = v16;
      *((_QWORD *)&v40 + 1) = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21504AD10(v4 + 9, v19, (uint64_t)v20, (uint64_t)&v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v24 = *a1;
  v23 = a1[1];
  v25 = a1[2];
  v39 = *a1;
  *(_QWORD *)&v40 = v23;
  *((_QWORD *)&v40 + 1) = v25;
  v26 = v4[4];
  v27 = (void *)v4[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28._countAndFlagsBits = v26;
  v28._object = v27;
  v43 = DataFrame.indexOfColumn(_:)(v28);
  v29 = v43.is_nil;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v29)
  {
    if ((a2 & 1) != 0)
    {
      DataFrame.removeColumn(_:)(v26, (uint64_t)v27, (uint64_t)&v39);
      sub_21501EA34((uint64_t)&v39);
    }
    else
    {
      v39 = v24;
      *(_QWORD *)&v40 = v23;
      *((_QWORD *)&v40 + 1) = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21504AD10(v4 + 12, v26, (uint64_t)v27, (uint64_t)&v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v39 = v4[6];
  v40 = *(_OWORD *)(v4 + 7);
  DataFrame.append<A>(column:)((uint64_t)&v39, a3[2], v30, v31);
  v39 = v4[9];
  v40 = *((_OWORD *)v4 + 5);
  DataFrame.append<A>(column:)((uint64_t)&v39, a3[3], v32, v33);
  v39 = v4[12];
  v40 = *(_OWORD *)(v4 + 13);
  return DataFrame.append<A>(column:)((uint64_t)&v39, a3[4], v34, v35);
}

uint64_t sub_21504C608(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_21504C64C(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_215038C1C(0, v2, 0);
    v3 = a1 + 32;
    v4 = v18;
    do
    {
      sub_21504C608(v3, (uint64_t)v13);
      v5 = v14;
      v6 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      (*(void (**)(_OWORD *__return_ptr, _QWORD, uint64_t, uint64_t))(v6 + 32))(v16, 0, v5, v6);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_215038C1C(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v4 = v18;
      }
      v8 = *(_QWORD *)(v4 + 16);
      v7 = *(_QWORD *)(v4 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_215038C1C((char *)(v7 > 1), v8 + 1, 1);
        v4 = v18;
      }
      *(_QWORD *)(v4 + 16) = v8 + 1;
      v9 = v4 + 40 * v8;
      v10 = v16[0];
      v11 = v16[1];
      *(_QWORD *)(v9 + 64) = v17;
      *(_OWORD *)(v9 + 32) = v10;
      *(_OWORD *)(v9 + 48) = v11;
      v3 += 40;
      --v2;
    }
    while (v2);
  }
  return a1;
}

uint64_t Column<A>.summary()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *v4;
  v6 = v4[1];
  v7 = v4[2];
  v10 = *(_QWORD *)(a1 + 16);
  v11 = a2;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  type metadata accessor for CategoricalSummary(0, v10, a2, a4);
  return sub_215113F18((uint64_t (*)(uint64_t))sub_21504DBD0, (uint64_t)&v9, v7, v10);
}

uint64_t sub_21504C800@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = result;
  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = (_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v6 = 0;
    v7 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v6 <= a2)
      v8 = a2;
    else
      v8 = v6;
    v9 = v6;
    while (a2 != v9)
    {
      if (v8 == v9)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v5)
        goto LABEL_26;
      v6 = v9 + 1;
      v10 = *(unsigned __int8 *)(*v5 + (v9 >> 3) + 64) >> (v9 & 7);
      ++v9;
      if ((v10 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v12 = *(_QWORD *)(v7 + 16);
        v11 = *(_QWORD *)(v7 + 24);
        if (v12 >= v11 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v11 > 1), v12 + 1, 1);
        *(_QWORD *)(v7 + 16) = v12 + 1;
        *(_QWORD *)(v7 + 8 * v12 + 32) = v6 - 1;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v7 + 16);
    if (v13)
    {
      v24 = MEMORY[0x24BEE4AF8];
      sub_215038DA4(0, v13, 0);
      v14 = 0;
      v15 = v24;
      do
      {
        v16 = (uint64_t *)(v23 + 16 * *(_QWORD *)(v7 + 8 * v14 + 32));
        v17 = *v16;
        v18 = v16[1];
        sub_21501F068(*v16, v18);
        v20 = *(_QWORD *)(v24 + 16);
        v19 = *(_QWORD *)(v24 + 24);
        if (v20 >= v19 >> 1)
          sub_215038DA4((char *)(v19 > 1), v20 + 1, 1);
        ++v14;
        *(_QWORD *)(v24 + 16) = v20 + 1;
        v21 = v24 + 16 * v20;
        *(_QWORD *)(v21 + 32) = v17;
        *(_QWORD *)(v21 + 40) = v18;
      }
      while (v13 != v14);
      swift_release();
    }
    else
    {
      swift_release();
      v15 = MEMORY[0x24BEE4AF8];
    }
    sub_21504DF28(v15, a2 - v13, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21504CA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v35 = a1;
  v10 = sub_21512F740();
  v36 = *(_QWORD *)(v10 - 8);
  result = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v33 = result;
    v34 = a3;
    v14 = (_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v15 = 0;
    v37 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v15 <= a2)
      v16 = a2;
    else
      v16 = v15;
    v17 = v15;
    while (a2 != v17)
    {
      if (v16 == v17)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v14)
        goto LABEL_26;
      v15 = v17 + 1;
      v18 = *(unsigned __int8 *)(*v14 + (v17 >> 3) + 64) >> (v17 & 7);
      ++v17;
      if ((v18 & 1) != 0)
      {
        v19 = v37;
        result = swift_isUniquelyReferenced_nonNull_native();
        v38 = v19;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v19 + 16) + 1, 1);
          v19 = v38;
        }
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        v22 = v21 + 1;
        if (v21 >= v20 >> 1)
        {
          v37 = v21 + 1;
          result = (uint64_t)sub_215038BE4((char *)(v20 > 1), v21 + 1, 1);
          v22 = v37;
          v19 = v38;
        }
        *(_QWORD *)(v19 + 16) = v22;
        v37 = v19;
        *(_QWORD *)(v19 + 8 * v21 + 32) = v15 - 1;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(v37 + 16);
    if (v23)
    {
      v31 = a2;
      v32 = a5;
      v34 = v5;
      v38 = MEMORY[0x24BEE4AF8];
      sub_215038DC0(0, v23, 0);
      v24 = 0;
      v25 = v38;
      v26 = *(_QWORD *)(v36 + 72);
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
      v28 = v33;
      do
      {
        v27(v13, v35 + v26 * *(_QWORD *)(v37 + 8 * v24 + 32), v28);
        v38 = v25;
        v30 = *(_QWORD *)(v25 + 16);
        v29 = *(_QWORD *)(v25 + 24);
        if (v30 >= v29 >> 1)
        {
          sub_215038DC0(v29 > 1, v30 + 1, 1);
          v25 = v38;
        }
        ++v24;
        *(_QWORD *)(v25 + 16) = v30 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v36 + 32))(v25+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ v30 * v26, v13, v28);
      }
      while (v23 != v24);
      swift_release();
      a2 = v31;
      a5 = v32;
    }
    else
    {
      swift_release();
      v25 = MEMORY[0x24BEE4AF8];
    }
    sub_21504E274(v25, a2 - v23, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21504CCF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = result;
  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = (_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v6 = 0;
    v7 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v6 <= a2)
      v8 = a2;
    else
      v8 = v6;
    v9 = v6;
    while (a2 != v9)
    {
      if (v8 == v9)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v5)
        goto LABEL_26;
      v6 = v9 + 1;
      v10 = *(unsigned __int8 *)(*v5 + (v9 >> 3) + 64) >> (v9 & 7);
      ++v9;
      if ((v10 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v12 = *(_QWORD *)(v7 + 16);
        v11 = *(_QWORD *)(v7 + 24);
        if (v12 >= v11 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v11 > 1), v12 + 1, 1);
        *(_QWORD *)(v7 + 16) = v12 + 1;
        *(_QWORD *)(v7 + 8 * v12 + 32) = v6 - 1;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v7 + 16);
    if (v13)
    {
      v24 = MEMORY[0x24BEE4AF8];
      sub_215038BC8(0, v13, 0);
      v14 = 0;
      v15 = v24;
      do
      {
        v16 = (uint64_t *)(v23 + 16 * *(_QWORD *)(v7 + 8 * v14 + 32));
        v17 = *v16;
        v18 = v16[1];
        v20 = *(_QWORD *)(v24 + 16);
        v19 = *(_QWORD *)(v24 + 24);
        swift_bridgeObjectRetain();
        if (v20 >= v19 >> 1)
          sub_215038BC8((char *)(v19 > 1), v20 + 1, 1);
        ++v14;
        *(_QWORD *)(v24 + 16) = v20 + 1;
        v21 = v24 + 16 * v20;
        *(_QWORD *)(v21 + 32) = v17;
        *(_QWORD *)(v21 + 40) = v18;
      }
      while (v13 != v14);
      swift_release();
    }
    else
    {
      swift_release();
      v15 = MEMORY[0x24BEE4AF8];
    }
    sub_21504E7D4(v15, a2 - v13, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21504CF24@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = a4;
    v8 = result;
    v9 = (_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v10 <= a2)
      v12 = a2;
    else
      v12 = v10;
    v13 = v10;
    while (a2 != v13)
    {
      if (v12 == v13)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v9)
        goto LABEL_26;
      v10 = v13 + 1;
      v14 = *(unsigned __int8 *)(*v9 + (v13 >> 3) + 64) >> (v13 & 7);
      ++v13;
      if ((v14 & 1) != 0)
      {
        v24 = v5;
        result = swift_isUniquelyReferenced_nonNull_native();
        v15 = a3;
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        if (v17 >= v16 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        *(_QWORD *)(v11 + 16) = v17 + 1;
        *(_QWORD *)(v11 + 8 * v17 + 32) = v10 - 1;
        a3 = v15;
        v5 = v24;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      v26 = MEMORY[0x24BEE4AF8];
      sub_215038DDC(0, v18, 0);
      v19 = 0;
      v20 = v26;
      v21 = *(_QWORD *)(v26 + 16);
      do
      {
        v22 = *(_BYTE *)(v8 + *(_QWORD *)(v11 + 8 * v19 + 32));
        v23 = *(_QWORD *)(v26 + 24);
        if (v21 + v19 >= v23 >> 1)
          sub_215038DDC((char *)(v23 > 1), v21 + v19 + 1, 1);
        *(_QWORD *)(v26 + 16) = v21 + v19 + 1;
        *(_BYTE *)(v26 + v21 + v19++ + 32) = v22;
      }
      while (v18 != v19);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = MEMORY[0x24BEE4AF8];
    }
    sub_21504EB04(v20, a2 - v18, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21504D160@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = a4;
    v8 = result;
    v9 = (_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v10 <= a2)
      v12 = a2;
    else
      v12 = v10;
    v13 = v10;
    while (a2 != v13)
    {
      if (v12 == v13)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v9)
        goto LABEL_26;
      v10 = v13 + 1;
      v14 = *(unsigned __int8 *)(*v9 + (v13 >> 3) + 64) >> (v13 & 7);
      ++v13;
      if ((v14 & 1) != 0)
      {
        v24 = v5;
        result = swift_isUniquelyReferenced_nonNull_native();
        v15 = a3;
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        if (v17 >= v16 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        *(_QWORD *)(v11 + 16) = v17 + 1;
        *(_QWORD *)(v11 + 8 * v17 + 32) = v10 - 1;
        a3 = v15;
        v5 = v24;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      v26 = MEMORY[0x24BEE4AF8];
      sub_215038DF8(0, v18, 0);
      v19 = 0;
      v20 = v26;
      v21 = *(_QWORD *)(v26 + 16);
      do
      {
        v22 = *(_QWORD *)(v8 + 8 * *(_QWORD *)(v11 + 8 * v19 + 32));
        v23 = *(_QWORD *)(v26 + 24);
        if (v21 >= v23 >> 1)
          sub_215038DF8((char *)(v23 > 1), v21 + 1, 1);
        ++v19;
        *(_QWORD *)(v26 + 16) = v21 + 1;
        *(_QWORD *)(v26 + 8 * v21++ + 32) = v22;
      }
      while (v18 != v19);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = MEMORY[0x24BEE4AF8];
    }
    sub_21504EDDC(v20, a2 - v18, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21504D39C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = a4;
    v8 = result;
    v9 = (_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v10 <= a2)
      v12 = a2;
    else
      v12 = v10;
    v13 = v10;
    while (a2 != v13)
    {
      if (v12 == v13)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v9)
        goto LABEL_26;
      v10 = v13 + 1;
      v14 = *(unsigned __int8 *)(*v9 + (v13 >> 3) + 64) >> (v13 & 7);
      ++v13;
      if ((v14 & 1) != 0)
      {
        v24 = v5;
        result = swift_isUniquelyReferenced_nonNull_native();
        v15 = a3;
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        if (v17 >= v16 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        *(_QWORD *)(v11 + 16) = v17 + 1;
        *(_QWORD *)(v11 + 8 * v17 + 32) = v10 - 1;
        a3 = v15;
        v5 = v24;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      v26 = MEMORY[0x24BEE4AF8];
      sub_215038E14(0, v18, 0);
      v19 = 0;
      v20 = v26;
      v21 = *(_QWORD *)(v26 + 16);
      do
      {
        v22 = *(_DWORD *)(v8 + 4 * *(_QWORD *)(v11 + 8 * v19 + 32));
        v23 = *(_QWORD *)(v26 + 24);
        if (v21 >= v23 >> 1)
          sub_215038E14((char *)(v23 > 1), v21 + 1, 1);
        ++v19;
        *(_QWORD *)(v26 + 16) = v21 + 1;
        *(_DWORD *)(v26 + 4 * v21++ + 32) = v22;
      }
      while (v18 != v19);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = MEMORY[0x24BEE4AF8];
    }
    sub_21504F0B4(v20, a2 - v18, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21504D5D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = a4;
    v8 = result;
    v9 = (_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v10 <= a2)
      v12 = a2;
    else
      v12 = v10;
    v13 = v10;
    while (a2 != v13)
    {
      if (v12 == v13)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v9)
        goto LABEL_26;
      v10 = v13 + 1;
      v14 = *(unsigned __int8 *)(*v9 + (v13 >> 3) + 64) >> (v13 & 7);
      ++v13;
      if ((v14 & 1) != 0)
      {
        v24 = v5;
        result = swift_isUniquelyReferenced_nonNull_native();
        v15 = a3;
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        if (v17 >= v16 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        *(_QWORD *)(v11 + 16) = v17 + 1;
        *(_QWORD *)(v11 + 8 * v17 + 32) = v10 - 1;
        a3 = v15;
        v5 = v24;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      v26 = MEMORY[0x24BEE4AF8];
      sub_215038E30(0, v18, 0);
      v19 = 0;
      v20 = v26;
      v21 = *(_QWORD *)(v26 + 16);
      do
      {
        v22 = *(_WORD *)(v8 + 2 * *(_QWORD *)(v11 + 8 * v19 + 32));
        v23 = *(_QWORD *)(v26 + 24);
        if (v21 >= v23 >> 1)
          sub_215038E30((char *)(v23 > 1), v21 + 1, 1);
        ++v19;
        *(_QWORD *)(v26 + 16) = v21 + 1;
        *(_WORD *)(v26 + 2 * v21++ + 32) = v22;
      }
      while (v18 != v19);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = MEMORY[0x24BEE4AF8];
    }
    sub_21504F388(v20, a2 - v18, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21504D814@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = a4;
    v8 = result;
    v9 = (_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v10 <= a2)
      v12 = a2;
    else
      v12 = v10;
    v13 = v10;
    while (a2 != v13)
    {
      if (v12 == v13)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v9)
        goto LABEL_26;
      v10 = v13 + 1;
      v14 = *(unsigned __int8 *)(*v9 + (v13 >> 3) + 64) >> (v13 & 7);
      ++v13;
      if ((v14 & 1) != 0)
      {
        v24 = v5;
        result = swift_isUniquelyReferenced_nonNull_native();
        v15 = a3;
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        if (v17 >= v16 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        *(_QWORD *)(v11 + 16) = v17 + 1;
        *(_QWORD *)(v11 + 8 * v17 + 32) = v10 - 1;
        a3 = v15;
        v5 = v24;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      v26 = MEMORY[0x24BEE4AF8];
      sub_215038BE4(0, v18, 0);
      v19 = 0;
      v20 = v26;
      v21 = *(_QWORD *)(v26 + 16);
      do
      {
        v22 = *(_QWORD *)(v8 + 8 * *(_QWORD *)(v11 + 8 * v19 + 32));
        v23 = *(_QWORD *)(v26 + 24);
        if (v21 >= v23 >> 1)
          sub_215038BE4((char *)(v23 > 1), v21 + 1, 1);
        ++v19;
        *(_QWORD *)(v26 + 16) = v21 + 1;
        *(_QWORD *)(v26 + 8 * v21++ + 32) = v22;
      }
      while (v18 != v19);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = MEMORY[0x24BEE4AF8];
    }
    sub_21504F65C(v20, a2 - v18, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21504DA48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    MEMORY[0x24BDAC7A8](result);
    v30 = v11;
    v25[0] = v12;
    v25[1] = v13;
    v26 = v14;
    v27 = v15;
    v28 = v16;
    v17 = sub_2150C0EBC((uint64_t)sub_215053D38, (uint64_t)&v24, 0, a2);
    v18 = a2 - *(_QWORD *)(v17 + 16);
    v31 = v17;
    MEMORY[0x24BDAC7A8](v17);
    v26 = a6;
    v27 = a7;
    v28 = v10;
    v29 = a2;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CB8);
    v20 = sub_215053C80();
    v22 = sub_2150ED6A0((void (*)(char *, char *))sub_215053C6C, (uint64_t)v25, v19, a6, MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v21);
    swift_bridgeObjectRelease();
    v31 = v22;
    v23 = sub_21512FD40();
    MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v23);
    sub_2150B57D4((char *)&v31, v18, (uint64_t)a6, v23, a7, v30);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21504DBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21504DA48(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(char **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_21504DBF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[40];

  v3 = a2;
  v4 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v36 = v5;
  if (v5)
  {
    v6 = a1 + 32;
    swift_bridgeObjectRetain();
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (1)
    {
      sub_2150462B0(v6, (uint64_t)v39);
      sub_2150462B0((uint64_t)v39, (uint64_t)v37);
      if (v9[2] && (v10 = sub_21502F854((uint64_t)v37), (v11 & 1) != 0))
        v12 = *(_QWORD *)(v9[7] + 8 * v10);
      else
        v12 = 0;
      sub_215046238((uint64_t)v37);
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        result = sub_2151304B4();
        __break(1u);
        return result;
      }
      sub_2150462B0((uint64_t)v39, (uint64_t)v37);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = sub_21502F854((uint64_t)v37);
      v18 = v9[2];
      v19 = (v16 & 1) == 0;
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
        goto LABEL_35;
      v21 = v16;
      if (v9[3] >= v20)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v16 & 1) == 0)
            goto LABEL_19;
        }
        else
        {
          sub_2150368C8();
          if ((v21 & 1) == 0)
            goto LABEL_19;
        }
      }
      else
      {
        sub_2150302B4(v20, isUniquelyReferenced_nonNull_native);
        v22 = sub_21502F854((uint64_t)v37);
        if ((v21 & 1) != (v23 & 1))
          goto LABEL_37;
        v17 = v22;
        if ((v21 & 1) == 0)
        {
LABEL_19:
          v9[(v17 >> 6) + 8] |= 1 << v17;
          sub_2150462B0((uint64_t)v37, v9[6] + 40 * v17);
          *(_QWORD *)(v9[7] + 8 * v17) = v14;
          v24 = v9[2];
          v13 = __OFADD__(v24, 1);
          v25 = v24 + 1;
          if (v13)
            goto LABEL_36;
          v9[2] = v25;
          goto LABEL_21;
        }
      }
      *(_QWORD *)(v9[7] + 8 * v17) = v14;
LABEL_21:
      swift_bridgeObjectRelease();
      sub_215046238((uint64_t)v37);
      if (v7 < v14)
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7820);
        v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_215135F80;
        sub_2150462B0((uint64_t)v39, v8 + 32);
        sub_215046238((uint64_t)v39);
        v7 = v14;
      }
      else
      {
        if (v14 == v7)
        {
          sub_2150462B0((uint64_t)v39, (uint64_t)v37);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v8 = (uint64_t)sub_21502E11C(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
          v27 = *(_QWORD *)(v8 + 16);
          v26 = *(_QWORD *)(v8 + 24);
          if (v27 >= v26 >> 1)
            v8 = (uint64_t)sub_21502E11C((char *)(v26 > 1), v27 + 1, 1, (char *)v8);
          *(_QWORD *)(v8 + 16) = v27 + 1;
          v28 = v8 + 40 * v27;
          v29 = v37[0];
          v30 = v37[1];
          *(_QWORD *)(v28 + 64) = v38;
          *(_OWORD *)(v28 + 32) = v29;
          *(_OWORD *)(v28 + 48) = v30;
        }
        sub_215046238((uint64_t)v39);
      }
      v6 += 40;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        v3 = a2;
        v4 = a3;
        if (a2 <= 0)
          goto LABEL_32;
LABEL_30:
        v31 = v9[2];
        result = swift_bridgeObjectRelease();
        v33 = v31 + 1;
        goto LABEL_33;
      }
    }
  }
  v8 = MEMORY[0x24BEE4AF8];
  v9 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (a2 > 0)
    goto LABEL_30;
LABEL_32:
  v33 = v9[2];
  result = swift_bridgeObjectRelease();
LABEL_33:
  *v4 = v36;
  v4[1] = v3;
  v4[2] = v33;
  v4[3] = v8;
  return result;
}

uint64_t sub_21504DF28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  char *v39;

  v3 = a2;
  v4 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    v39 = (char *)MEMORY[0x24BEE4AF8];
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    v36 = v5;
    v9 = v5;
    while (1)
    {
      v12 = *(v7 - 1);
      v11 = *v7;
      v13 = v8[2];
      sub_21501F068(v12, *v7);
      if (v13)
      {
        sub_21501F068(v12, v11);
        v14 = sub_21502F884(v12, v11);
        if ((v15 & 1) != 0)
          v13 = *(_QWORD *)(v8[7] + 8 * v14);
        else
          v13 = 0;
        sub_21501F0D8(v12, v11);
      }
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        result = sub_2151304B4();
        __break(1u);
        return result;
      }
      sub_21501F068(v12, v11);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = sub_21502F884(v12, v11);
      v20 = v8[2];
      v21 = (v18 & 1) == 0;
      v22 = v20 + v21;
      if (__OFADD__(v20, v21))
        goto LABEL_36;
      v23 = v18;
      if (v8[3] >= v22)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v18 & 1) == 0)
            goto LABEL_20;
        }
        else
        {
          sub_215036A9C();
          if ((v23 & 1) == 0)
            goto LABEL_20;
        }
      }
      else
      {
        sub_2150305B8(v22, isUniquelyReferenced_nonNull_native);
        v24 = sub_21502F884(v12, v11);
        if ((v23 & 1) != (v25 & 1))
          goto LABEL_38;
        v19 = v24;
        if ((v23 & 1) == 0)
        {
LABEL_20:
          v8[(v19 >> 6) + 8] |= 1 << v19;
          v26 = (uint64_t *)(v8[6] + 16 * v19);
          *v26 = v12;
          v26[1] = v11;
          *(_QWORD *)(v8[7] + 8 * v19) = v16;
          v27 = v8[2];
          v28 = __OFADD__(v27, 1);
          v29 = v27 + 1;
          if (v28)
            goto LABEL_37;
          v8[2] = v29;
          sub_21501F068(v12, v11);
          goto LABEL_22;
        }
      }
      *(_QWORD *)(v8[7] + 8 * v19) = v16;
LABEL_22:
      swift_bridgeObjectRelease();
      sub_21501F0D8(v12, v11);
      if (v6 < v16)
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7808);
        v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_215135F80;
        *(_QWORD *)(v10 + 32) = v12;
        *(_QWORD *)(v10 + 40) = v11;
        v39 = (char *)v10;
        v6 = v16;
      }
      else if (v16 == v6)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v39 = sub_21502E248(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
        v31 = *((_QWORD *)v39 + 2);
        v30 = *((_QWORD *)v39 + 3);
        if (v31 >= v30 >> 1)
          v39 = sub_21502E248((char *)(v30 > 1), v31 + 1, 1, v39);
        *((_QWORD *)v39 + 2) = v31 + 1;
        v32 = &v39[16 * v31];
        *((_QWORD *)v32 + 4) = v12;
        *((_QWORD *)v32 + 5) = v11;
      }
      else
      {
        sub_21501F0D8(v12, v11);
      }
      v7 += 2;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        v3 = a2;
        v4 = a3;
        v5 = v36;
        if (a2 <= 0)
          goto LABEL_33;
LABEL_31:
        v33 = v8[2];
        result = swift_bridgeObjectRelease();
        v35 = v33 + 1;
        goto LABEL_34;
      }
    }
  }
  v39 = (char *)MEMORY[0x24BEE4AF8];
  v8 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (a2 > 0)
    goto LABEL_31;
LABEL_33:
  v35 = v8[2];
  result = swift_bridgeObjectRelease();
LABEL_34:
  *v4 = v5;
  v4[1] = v3;
  v4[2] = v35;
  v4[3] = v39;
  return result;
}

uint64_t sub_21504E274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(unint64_t, uint64_t, uint64_t);
  int isUniquelyReferenced_nonNull_native;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  _QWORD *v82;

  v6 = sub_21512F740();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v68 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v81 = (char *)&v61 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v61 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v61 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = *(_QWORD *)(a1 + 16);
  v64 = a1;
  if (!v72)
  {
    v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    v77 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v27 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_33:
    v56(v19, 1, 1, v6);
    v25 = v72;
LABEL_34:
    swift_bridgeObjectRelease();
    v57 = v27[2];
    result = swift_bridgeObjectRelease();
    if (a2 <= 0)
      v59 = v57;
    else
      v59 = v57 + 1;
    *a3 = v25;
    a3[1] = a2;
    v60 = v77;
    a3[2] = v59;
    a3[3] = v60;
    return result;
  }
  v62 = a2;
  v63 = a3;
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = a1 + v21;
  v23 = *(_QWORD *)(v7 + 72);
  v24 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16);
  v69 = v21;
  v76 = v23;
  v66 = v20 | 7;
  v67 = v23 + v21;
  swift_bridgeObjectRetain();
  v75 = 0;
  v25 = 0;
  v77 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v26 = v7;
  v27 = (_QWORD *)MEMORY[0x24BEE4B00];
  v65 = xmmword_215135F80;
  v74 = v16;
  v71 = v26;
  while (1)
  {
    v24((unint64_t)v19, v22, v6);
    v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    v70(v19, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v19, 1, v6) == 1)
    {
      a3 = v63;
      a2 = v62;
      goto LABEL_34;
    }
    v73 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v73(v16, v19, v6);
    v24((unint64_t)v14, (uint64_t)v16, v6);
    v30 = v27[2];
    v79 = v25;
    if (v30 && (v31 = sub_21502F910((uint64_t)v14), (v32 & 1) != 0))
      v33 = *(_QWORD *)(v27[7] + 8 * v31);
    else
      v33 = 0;
    v80 = *(void (**)(char *, uint64_t))(v26 + 8);
    v80(v14, v6);
    v34 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    v78 = v22;
    v35 = (uint64_t)v81;
    v36 = v6;
    v37 = v6;
    v38 = v24;
    v24((unint64_t)v81, (uint64_t)v16, v37);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v82 = v27;
    v41 = sub_21502F910(v35);
    v42 = v27[2];
    v43 = (v40 & 1) == 0;
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
      goto LABEL_39;
    v45 = v40;
    if (v27[3] >= v44)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_215036C48();
    }
    else
    {
      sub_2150308B8(v44, isUniquelyReferenced_nonNull_native);
      v46 = sub_21502F910((uint64_t)v81);
      if ((v45 & 1) != (v47 & 1))
        goto LABEL_41;
      v41 = v46;
    }
    v27 = v82;
    if ((v45 & 1) != 0)
    {
      *(_QWORD *)(v82[7] + 8 * v41) = v34;
    }
    else
    {
      v82[(v41 >> 6) + 8] |= 1 << v41;
      v38(v27[6] + v41 * v76, (uint64_t)v81, v36);
      *(_QWORD *)(v27[7] + 8 * v41) = v34;
      v48 = v27[2];
      v49 = __OFADD__(v48, 1);
      v50 = v48 + 1;
      if (v49)
        goto LABEL_40;
      v27[2] = v50;
    }
    swift_bridgeObjectRelease();
    v80(v81, v36);
    v16 = v74;
    v51 = v78;
    if (v75 < v34)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77F8);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = v65;
      v77 = (_QWORD *)v28;
      v24 = v38;
      v38(v28 + v69, (uint64_t)v16, v36);
      v75 = v34;
      v29 = v79;
      v6 = v36;
    }
    else
    {
      v24 = v38;
      if (v34 == v75)
      {
        v6 = v36;
        v24((unint64_t)v68, (uint64_t)v74, v36);
        v52 = swift_isUniquelyReferenced_nonNull_native();
        v29 = v79;
        if ((v52 & 1) == 0)
          v77 = (_QWORD *)sub_21502E348(0, v77[2] + 1, 1, v77);
        v26 = v71;
        v54 = v77[2];
        v53 = v77[3];
        if (v54 >= v53 >> 1)
          v77 = (_QWORD *)sub_21502E348(v53 > 1, v54 + 1, 1, v77);
        v55 = (char *)v77;
        v77[2] = v54 + 1;
        v73(&v55[v69 + v54 * v76], v68, v6);
        v16 = v74;
        goto LABEL_5;
      }
      v29 = v79;
      v6 = v36;
    }
    v26 = v71;
LABEL_5:
    v25 = v29 + 1;
    v80(v16, v6);
    v22 = v51 + v76;
    if (v72 == v25)
    {
      a3 = v63;
      a2 = v62;
      v56 = v70;
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = sub_2151304B4();
  __break(1u);
  return result;
}

uint64_t sub_21504E7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  char *v39;

  v3 = a2;
  v4 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    v39 = (char *)MEMORY[0x24BEE4AF8];
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    v36 = v5;
    v9 = v5;
    while (1)
    {
      v12 = *(v7 - 1);
      v11 = *v7;
      v13 = v8[2];
      swift_bridgeObjectRetain();
      if (v13)
      {
        swift_bridgeObjectRetain();
        v14 = sub_21502F840(v12, v11);
        if ((v15 & 1) != 0)
          v13 = *(_QWORD *)(v8[7] + 8 * v14);
        else
          v13 = 0;
        swift_bridgeObjectRelease();
      }
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        result = sub_2151304B4();
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = sub_21502F840(v12, v11);
      v20 = v8[2];
      v21 = (v18 & 1) == 0;
      v22 = v20 + v21;
      if (__OFADD__(v20, v21))
        goto LABEL_36;
      v23 = v18;
      if (v8[3] >= v22)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v18 & 1) == 0)
            goto LABEL_20;
        }
        else
        {
          sub_21503671C();
          if ((v23 & 1) == 0)
            goto LABEL_20;
        }
      }
      else
      {
        sub_21502FFAC(v22, isUniquelyReferenced_nonNull_native);
        v24 = sub_21502F840(v12, v11);
        if ((v23 & 1) != (v25 & 1))
          goto LABEL_38;
        v19 = v24;
        if ((v23 & 1) == 0)
        {
LABEL_20:
          v8[(v19 >> 6) + 8] |= 1 << v19;
          v26 = (uint64_t *)(v8[6] + 16 * v19);
          *v26 = v12;
          v26[1] = v11;
          *(_QWORD *)(v8[7] + 8 * v19) = v16;
          v27 = v8[2];
          v28 = __OFADD__(v27, 1);
          v29 = v27 + 1;
          if (v28)
            goto LABEL_37;
          v8[2] = v29;
          swift_bridgeObjectRetain();
          goto LABEL_22;
        }
      }
      *(_QWORD *)(v8[7] + 8 * v19) = v16;
LABEL_22:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v6 < v16)
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1F0);
        v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_215135F80;
        *(_QWORD *)(v10 + 32) = v12;
        *(_QWORD *)(v10 + 40) = v11;
        v39 = (char *)v10;
        v6 = v16;
      }
      else if (v16 == v6)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v39 = sub_21502DDE0(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
        v31 = *((_QWORD *)v39 + 2);
        v30 = *((_QWORD *)v39 + 3);
        if (v31 >= v30 >> 1)
          v39 = sub_21502DDE0((char *)(v30 > 1), v31 + 1, 1, v39);
        *((_QWORD *)v39 + 2) = v31 + 1;
        v32 = &v39[16 * v31];
        *((_QWORD *)v32 + 4) = v12;
        *((_QWORD *)v32 + 5) = v11;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v7 += 2;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        v3 = a2;
        v4 = a3;
        v5 = v36;
        if (a2 <= 0)
          goto LABEL_33;
LABEL_31:
        v33 = v8[2];
        result = swift_bridgeObjectRelease();
        v35 = v33 + 1;
        goto LABEL_34;
      }
    }
  }
  v39 = (char *)MEMORY[0x24BEE4AF8];
  v8 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (a2 > 0)
    goto LABEL_31;
LABEL_33:
  v35 = v8[2];
  result = swift_bridgeObjectRelease();
LABEL_34:
  *v4 = v5;
  v4[1] = v3;
  v4[2] = v35;
  v4[3] = v39;
  return result;
}

uint64_t sub_21504EB04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v35;

  v3 = a2;
  v4 = a3;
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (1)
    {
      v11 = *(unsigned __int8 *)(a1 + v7 + 32);
      v12 = v9[2];
      if (v12)
      {
        v13 = sub_21502F974(*(unsigned __int8 *)(a1 + v7 + 32));
        if ((v14 & 1) != 0)
          v12 = *(_QWORD *)(v9[7] + 8 * v13);
        else
          v12 = 0;
      }
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        result = sub_2151304B4();
        __break(1u);
        return result;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = sub_21502F974(v11);
      v19 = v9[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
        goto LABEL_35;
      v22 = v17;
      if (v9[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v17 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          sub_215036E6C();
          if ((v22 & 1) != 0)
            goto LABEL_18;
        }
      }
      else
      {
        sub_215030C48(v21, isUniquelyReferenced_nonNull_native);
        v23 = sub_21502F974(v11);
        if ((v22 & 1) != (v24 & 1))
          goto LABEL_37;
        v18 = v23;
        if ((v22 & 1) != 0)
        {
LABEL_18:
          *(_QWORD *)(v9[7] + 8 * v18) = v15;
          goto LABEL_22;
        }
      }
      v9[(v18 >> 6) + 8] |= 1 << v18;
      *(_BYTE *)(v9[6] + v18) = v11;
      *(_QWORD *)(v9[7] + 8 * v18) = v15;
      v25 = v9[2];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        goto LABEL_36;
      v9[2] = v27;
LABEL_22:
      swift_bridgeObjectRelease();
      if (v6 < v15)
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77E8);
        v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_215135F80;
        v10 = (_BYTE *)(v8 + 32);
        v6 = v15;
      }
      else
      {
        if (v15 != v6)
          goto LABEL_5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = (uint64_t)sub_21502E4BC(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v29 = *(_QWORD *)(v8 + 16);
        v28 = *(_QWORD *)(v8 + 24);
        if (v29 >= v28 >> 1)
          v8 = (uint64_t)sub_21502E4BC((char *)(v28 > 1), v29 + 1, 1, (char *)v8);
        *(_QWORD *)(v8 + 16) = v29 + 1;
        v10 = (_BYTE *)(v8 + v29 + 32);
      }
      *v10 = v11;
LABEL_5:
      if (v35 == ++v7)
      {
        swift_bridgeObjectRelease();
        v3 = a2;
        v4 = a3;
        if (a2 <= 0)
          goto LABEL_32;
LABEL_30:
        v30 = v9[2];
        result = swift_bridgeObjectRelease();
        v32 = v30 + 1;
        goto LABEL_33;
      }
    }
  }
  v8 = MEMORY[0x24BEE4AF8];
  v9 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (a2 > 0)
    goto LABEL_30;
LABEL_32:
  v32 = v9[2];
  result = swift_bridgeObjectRelease();
LABEL_33:
  *v4 = v35;
  v4[1] = v3;
  v4[2] = v32;
  v4[3] = v8;
  return result;
}

uint64_t sub_21504EDDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double *v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;

  v3 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (1)
    {
      v11 = *(double *)(a1 + 8 * v7 + 32);
      v12 = v9[2];
      if (v12)
      {
        v13 = sub_21502F9CC(*(double *)(a1 + 8 * v7 + 32));
        if ((v14 & 1) != 0)
          v12 = *(_QWORD *)(v9[7] + 8 * v13);
        else
          v12 = 0;
      }
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        result = sub_2151304B4();
        __break(1u);
        return result;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = sub_21502F9CC(v11);
      v19 = v9[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
        goto LABEL_35;
      v22 = v17;
      if (v9[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v17 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          sub_215036FF8();
          if ((v22 & 1) != 0)
            goto LABEL_18;
        }
      }
      else
      {
        sub_215030F0C(v21, isUniquelyReferenced_nonNull_native);
        v23 = sub_21502F9CC(v11);
        if ((v22 & 1) != (v24 & 1))
          goto LABEL_37;
        v18 = v23;
        if ((v22 & 1) != 0)
        {
LABEL_18:
          *(_QWORD *)(v9[7] + 8 * v18) = v15;
          goto LABEL_22;
        }
      }
      v9[(v18 >> 6) + 8] |= 1 << v18;
      v25 = 8 * v18;
      *(double *)(v9[6] + v25) = v11;
      *(_QWORD *)(v9[7] + v25) = v15;
      v26 = v9[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_36;
      v9[2] = v28;
LABEL_22:
      swift_bridgeObjectRelease();
      if (v6 < v15)
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7580);
        v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_215135F80;
        v10 = (double *)(v8 + 32);
        v6 = v15;
      }
      else
      {
        if (v15 != v6)
          goto LABEL_5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = (uint64_t)sub_21502E5A4(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v30 = *(_QWORD *)(v8 + 16);
        v29 = *(_QWORD *)(v8 + 24);
        if (v30 >= v29 >> 1)
          v8 = (uint64_t)sub_21502E5A4((char *)(v29 > 1), v30 + 1, 1, (char *)v8);
        *(_QWORD *)(v8 + 16) = v30 + 1;
        v10 = (double *)(v8 + 8 * v30 + 32);
      }
      *v10 = v11;
LABEL_5:
      if (v4 == ++v7)
      {
        swift_bridgeObjectRelease();
        v31 = a2;
        v3 = a3;
        if (a2 <= 0)
          goto LABEL_32;
LABEL_30:
        v32 = v9[2];
        result = swift_bridgeObjectRelease();
        v34 = v32 + 1;
        goto LABEL_33;
      }
    }
  }
  v8 = MEMORY[0x24BEE4AF8];
  v9 = (_QWORD *)MEMORY[0x24BEE4B00];
  v31 = a2;
  if (a2 > 0)
    goto LABEL_30;
LABEL_32:
  v34 = v9[2];
  result = swift_bridgeObjectRelease();
LABEL_33:
  *v3 = v4;
  v3[1] = v31;
  v3[2] = v34;
  v3[3] = v8;
  return result;
}

uint64_t sub_21504F0B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  float *v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;

  v3 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (1)
    {
      v11 = *(float *)(a1 + 4 * v7 + 32);
      v12 = v9[2];
      if (v12)
      {
        v13 = sub_21502FA00(*(float *)(a1 + 4 * v7 + 32));
        if ((v14 & 1) != 0)
          v12 = *(_QWORD *)(v9[7] + 8 * v13);
        else
          v12 = 0;
      }
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        result = sub_2151304B4();
        __break(1u);
        return result;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = sub_21502FA00(v11);
      v19 = v9[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
        goto LABEL_35;
      v22 = v17;
      if (v9[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v17 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          sub_215037184();
          if ((v22 & 1) != 0)
            goto LABEL_18;
        }
      }
      else
      {
        sub_2150311B4(v21, isUniquelyReferenced_nonNull_native);
        v23 = sub_21502FA00(v11);
        if ((v22 & 1) != (v24 & 1))
          goto LABEL_37;
        v18 = v23;
        if ((v22 & 1) != 0)
        {
LABEL_18:
          *(_QWORD *)(v9[7] + 8 * v18) = v15;
          goto LABEL_22;
        }
      }
      v9[(v18 >> 6) + 8] |= 1 << v18;
      *(float *)(v9[6] + 4 * v18) = v11;
      *(_QWORD *)(v9[7] + 8 * v18) = v15;
      v25 = v9[2];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        goto LABEL_36;
      v9[2] = v27;
LABEL_22:
      swift_bridgeObjectRelease();
      if (v6 < v15)
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77B0);
        v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_215135F80;
        v10 = (float *)(v8 + 32);
        v6 = v15;
      }
      else
      {
        if (v15 != v6)
          goto LABEL_5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = (uint64_t)sub_21502E69C(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v29 = *(_QWORD *)(v8 + 16);
        v28 = *(_QWORD *)(v8 + 24);
        if (v29 >= v28 >> 1)
          v8 = (uint64_t)sub_21502E69C((char *)(v28 > 1), v29 + 1, 1, (char *)v8);
        *(_QWORD *)(v8 + 16) = v29 + 1;
        v10 = (float *)(v8 + 4 * v29 + 32);
      }
      *v10 = v11;
LABEL_5:
      if (v4 == ++v7)
      {
        swift_bridgeObjectRelease();
        v30 = a2;
        v3 = a3;
        if (a2 <= 0)
          goto LABEL_32;
LABEL_30:
        v31 = v9[2];
        result = swift_bridgeObjectRelease();
        v33 = v31 + 1;
        goto LABEL_33;
      }
    }
  }
  v8 = MEMORY[0x24BEE4AF8];
  v9 = (_QWORD *)MEMORY[0x24BEE4B00];
  v30 = a2;
  if (a2 > 0)
    goto LABEL_30;
LABEL_32:
  v33 = v9[2];
  result = swift_bridgeObjectRelease();
LABEL_33:
  *v3 = v4;
  v3[1] = v30;
  v3[2] = v33;
  v3[3] = v8;
  return result;
}

uint64_t sub_21504F388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  float v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _WORD *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;

  v4 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = 0;
    v8 = 0;
    v9 = MEMORY[0x24BEE4AF8];
    v10 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (1)
    {
      LOWORD(v3) = *(_WORD *)(a1 + 2 * v8 + 32);
      v12 = v10[2];
      if (v12)
      {
        v13 = sub_21502FA38(v3);
        if ((v14 & 1) != 0)
          v12 = *(_QWORD *)(v10[7] + 8 * v13);
        else
          v12 = 0;
      }
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        result = sub_2151304B4();
        __break(1u);
        return result;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = sub_21502FA38(v3);
      v19 = v10[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
        goto LABEL_35;
      v22 = v17;
      if (v10[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v17 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          sub_215037314();
          if ((v22 & 1) != 0)
            goto LABEL_18;
        }
      }
      else
      {
        sub_215031458(v21, isUniquelyReferenced_nonNull_native);
        v23 = sub_21502FA38(v3);
        if ((v22 & 1) != (v24 & 1))
          goto LABEL_37;
        v18 = v23;
        if ((v22 & 1) != 0)
        {
LABEL_18:
          *(_QWORD *)(v10[7] + 8 * v18) = v15;
          goto LABEL_22;
        }
      }
      v10[(v18 >> 6) + 8] |= 1 << v18;
      *(_WORD *)(v10[6] + 2 * v18) = LOWORD(v3);
      *(_QWORD *)(v10[7] + 8 * v18) = v15;
      v25 = v10[2];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        goto LABEL_36;
      v10[2] = v27;
LABEL_22:
      swift_bridgeObjectRelease();
      if (v7 < v15)
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77C8);
        v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_215135F80;
        v11 = (_WORD *)(v9 + 32);
        v7 = v15;
      }
      else
      {
        if (v15 != v7)
          goto LABEL_5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = (uint64_t)sub_21502E794(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
        v29 = *(_QWORD *)(v9 + 16);
        v28 = *(_QWORD *)(v9 + 24);
        if (v29 >= v28 >> 1)
          v9 = (uint64_t)sub_21502E794((char *)(v28 > 1), v29 + 1, 1, (char *)v9);
        *(_QWORD *)(v9 + 16) = v29 + 1;
        v11 = (_WORD *)(v9 + 2 * v29 + 32);
      }
      *v11 = LOWORD(v3);
LABEL_5:
      if (v5 == ++v8)
      {
        swift_bridgeObjectRelease();
        v30 = a2;
        v4 = a3;
        if (a2 <= 0)
          goto LABEL_32;
LABEL_30:
        v31 = v10[2];
        result = swift_bridgeObjectRelease();
        v33 = v31 + 1;
        goto LABEL_33;
      }
    }
  }
  v9 = MEMORY[0x24BEE4AF8];
  v10 = (_QWORD *)MEMORY[0x24BEE4B00];
  v30 = a2;
  if (a2 > 0)
    goto LABEL_30;
LABEL_32:
  v33 = v10[2];
  result = swift_bridgeObjectRelease();
LABEL_33:
  *v4 = v5;
  v4[1] = v30;
  v4[2] = v33;
  v4[3] = v9;
  return result;
}

uint64_t sub_21504F65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v36;

  v3 = a2;
  v4 = a3;
  v36 = *(_QWORD *)(a1 + 16);
  if (v36)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (1)
    {
      v11 = *(_QWORD *)(a1 + 8 * v7 + 32);
      v12 = v9[2];
      if (v12)
      {
        v13 = sub_21502FA74(*(_QWORD *)(a1 + 8 * v7 + 32));
        if ((v14 & 1) != 0)
          v12 = *(_QWORD *)(v9[7] + 8 * v13);
        else
          v12 = 0;
      }
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        result = sub_2151304B4();
        __break(1u);
        return result;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = sub_21502FA74(v11);
      v19 = v9[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
        goto LABEL_35;
      v22 = v17;
      if (v9[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v17 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          sub_2150374A4();
          if ((v22 & 1) != 0)
            goto LABEL_18;
        }
      }
      else
      {
        sub_2150316FC(v21, isUniquelyReferenced_nonNull_native);
        v23 = sub_21502FA74(v11);
        if ((v22 & 1) != (v24 & 1))
          goto LABEL_37;
        v18 = v23;
        if ((v22 & 1) != 0)
        {
LABEL_18:
          *(_QWORD *)(v9[7] + 8 * v18) = v15;
          goto LABEL_22;
        }
      }
      v9[(v18 >> 6) + 8] |= 1 << v18;
      v25 = 8 * v18;
      *(_QWORD *)(v9[6] + v25) = v11;
      *(_QWORD *)(v9[7] + v25) = v15;
      v26 = v9[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_36;
      v9[2] = v28;
LABEL_22:
      swift_bridgeObjectRelease();
      if (v6 < v15)
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D200);
        v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_215135F80;
        v10 = (uint64_t *)(v8 + 32);
        v6 = v15;
      }
      else
      {
        if (v15 != v6)
          goto LABEL_5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = (uint64_t)sub_21502DBB4(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v30 = *(_QWORD *)(v8 + 16);
        v29 = *(_QWORD *)(v8 + 24);
        if (v30 >= v29 >> 1)
          v8 = (uint64_t)sub_21502DBB4((char *)(v29 > 1), v30 + 1, 1, (char *)v8);
        *(_QWORD *)(v8 + 16) = v30 + 1;
        v10 = (uint64_t *)(v8 + 8 * v30 + 32);
      }
      *v10 = v11;
LABEL_5:
      if (v36 == ++v7)
      {
        swift_bridgeObjectRelease();
        v3 = a2;
        v4 = a3;
        if (a2 <= 0)
          goto LABEL_32;
LABEL_30:
        v31 = v9[2];
        result = swift_bridgeObjectRelease();
        v33 = v31 + 1;
        goto LABEL_33;
      }
    }
  }
  v8 = MEMORY[0x24BEE4AF8];
  v9 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (a2 > 0)
    goto LABEL_30;
LABEL_32:
  v33 = v9[2];
  result = swift_bridgeObjectRelease();
LABEL_33:
  *v4 = v36;
  v4[1] = v3;
  v4[2] = v33;
  v4[3] = v8;
  return result;
}

uint64_t DiscontiguousColumnSlice<A>.summary()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  _OWORD v13[2];

  v5 = v4[1];
  v12 = *v4;
  v13[0] = v5;
  *(_OWORD *)((char *)v13 + 9) = *(__int128 *)((char *)v4 + 25);
  v6 = v5;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = a2;
  v11 = &v12;
  type metadata accessor for CategoricalSummary(0, v9, a2, a4);
  return sub_215113F18((uint64_t (*)(uint64_t))sub_215050F8C, (uint64_t)&v8, v6, v9);
}

uint64_t sub_21504F9BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_QWORD *)(a2 + 16);
  v34 = *(_QWORD *)(a2 + 32);
  v35 = *(_QWORD *)(a2 + 24);
  v33 = *(_BYTE *)(a2 + 40);
  v6 = sub_2150EBC3C(v35, v34, v33);
  v7 = *(_QWORD *)(v6 + 16);
  v32 = a2;
  result = sub_215053BA4(a2);
  v9 = 0;
  v10 = (_QWORD *)(v5 + 16);
  v11 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v9 <= v7)
    v12 = v7;
  else
    v12 = v9;
  while (v7 != v9)
  {
    if (v12 == v9)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v6 + 8 * v9 + 32);
    result = swift_beginAccess();
    if (!*v10)
      goto LABEL_25;
    v15 = v13 - (v14 & 0xFFFFFFFFFFFFFFF8);
    ++v9;
    v16 = 1 << v15;
    if (v15 < 0)
      LOBYTE(v16) = 0;
    if ((v16 & *(_BYTE *)(*v10 + v13 / 8 + 64)) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v38 = v11;
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v18 = *(_QWORD *)(v11 + 16);
      v17 = *(_QWORD *)(v11 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v20 = v18 + 1;
        v31 = v18;
        result = (uint64_t)sub_215038BE4((char *)(v17 > 1), v18 + 1, 1);
        v19 = v20;
        v18 = v31;
        v11 = v38;
      }
      *(_QWORD *)(v11 + 16) = v19;
      *(_QWORD *)(v11 + 8 * v18 + 32) = v13;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v32);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(sub_2150EBC3C(v35, v34, v33) + 16);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v11 + 16);
  if (v22)
  {
    v36 = v21;
    v39 = MEMORY[0x24BEE4AF8];
    sub_215038DA4(0, v22, 0);
    v23 = 0;
    v24 = v39;
    do
    {
      v25 = (uint64_t *)(a1 + 16 * *(_QWORD *)(v11 + 8 * v23 + 32));
      v26 = *v25;
      v27 = v25[1];
      sub_21501F068(*v25, v27);
      v29 = *(_QWORD *)(v39 + 16);
      v28 = *(_QWORD *)(v39 + 24);
      if (v29 >= v28 >> 1)
        sub_215038DA4((char *)(v28 > 1), v29 + 1, 1);
      ++v23;
      *(_QWORD *)(v39 + 16) = v29 + 1;
      v30 = v39 + 16 * v29;
      *(_QWORD *)(v30 + 32) = v26;
      *(_QWORD *)(v30 + 40) = v27;
    }
    while (v22 != v23);
    swift_release();
    v21 = v36;
  }
  else
  {
    swift_release();
    v24 = MEMORY[0x24BEE4AF8];
  }
  sub_21504DF28(v24, v21 - v22, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21504FC3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v39 = a3;
  v41 = a1;
  v37 = sub_21512F740();
  v42 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a2 + 40);
  v8 = v5;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(a2 + 32);
  LODWORD(v38) = v7;
  v9 = sub_2150EBC3C(v5, (uint64_t)v40, v7);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = a2;
  result = sub_215053BA4(a2);
  v13 = 0;
  v14 = (_QWORD *)(v6 + 16);
  v15 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v13 <= v10)
    v16 = v10;
  else
    v16 = v13;
  while (v10 != v13)
  {
    if (v16 == v13)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    v17 = *(_QWORD *)(v9 + 8 * v13 + 32);
    result = swift_beginAccess();
    if (!*v14)
      goto LABEL_25;
    v19 = v17 - (v18 & 0xFFFFFFFFFFFFFFF8);
    ++v13;
    v20 = 1 << v19;
    if (v19 < 0)
      LOBYTE(v20) = 0;
    if ((v20 & *(_BYTE *)(*v14 + v17 / 8 + 64)) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v43 = v15;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v43;
      }
      v21 = v15;
      v22 = *(_QWORD *)(v15 + 16);
      v23 = *(_QWORD *)(v21 + 24);
      v24 = v22 + 1;
      if (v22 >= v23 >> 1)
      {
        v35 = v22 + 1;
        result = (uint64_t)sub_215038BE4((char *)(v23 > 1), v22 + 1, 1);
        v24 = v35;
        v21 = v43;
      }
      *(_QWORD *)(v21 + 16) = v24;
      *(_QWORD *)(v21 + 8 * v22 + 32) = v17;
      v15 = v21;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v11);
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(sub_2150EBC3C(v8, (uint64_t)v40, v38) + 16);
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v15 + 16);
  if (v26)
  {
    v38 = v25;
    v43 = MEMORY[0x24BEE4AF8];
    sub_215038DC0(0, v26, 0);
    v27 = 0;
    v28 = v43;
    v29 = *(_QWORD *)(v42 + 72);
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
    v30 = v36;
    v31 = v37;
    do
    {
      v32 = v15;
      v40(v30, v41 + v29 * *(_QWORD *)(v15 + 8 * v27 + 32), v31);
      v43 = v28;
      v34 = *(_QWORD *)(v28 + 16);
      v33 = *(_QWORD *)(v28 + 24);
      if (v34 >= v33 >> 1)
      {
        sub_215038DC0(v33 > 1, v34 + 1, 1);
        v28 = v43;
      }
      ++v27;
      *(_QWORD *)(v28 + 16) = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v28 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80)) + v34 * v29, v30, v31);
      v15 = v32;
    }
    while (v26 != v27);
    swift_release();
    v25 = v38;
  }
  else
  {
    swift_release();
    v28 = MEMORY[0x24BEE4AF8];
  }
  sub_21504E274(v28, v25 - v26, v39);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21504FF48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_QWORD *)(a2 + 16);
  v34 = *(_QWORD *)(a2 + 32);
  v35 = *(_QWORD *)(a2 + 24);
  v33 = *(_BYTE *)(a2 + 40);
  v6 = sub_2150EBC3C(v35, v34, v33);
  v7 = *(_QWORD *)(v6 + 16);
  v32 = a2;
  result = sub_215053BA4(a2);
  v9 = 0;
  v10 = (_QWORD *)(v5 + 16);
  v11 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v9 <= v7)
    v12 = v7;
  else
    v12 = v9;
  while (v7 != v9)
  {
    if (v12 == v9)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v6 + 8 * v9 + 32);
    result = swift_beginAccess();
    if (!*v10)
      goto LABEL_25;
    v15 = v13 - (v14 & 0xFFFFFFFFFFFFFFF8);
    ++v9;
    v16 = 1 << v15;
    if (v15 < 0)
      LOBYTE(v16) = 0;
    if ((v16 & *(_BYTE *)(*v10 + v13 / 8 + 64)) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v38 = v11;
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v18 = *(_QWORD *)(v11 + 16);
      v17 = *(_QWORD *)(v11 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v20 = v18 + 1;
        v31 = v18;
        result = (uint64_t)sub_215038BE4((char *)(v17 > 1), v18 + 1, 1);
        v19 = v20;
        v18 = v31;
        v11 = v38;
      }
      *(_QWORD *)(v11 + 16) = v19;
      *(_QWORD *)(v11 + 8 * v18 + 32) = v13;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v32);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(sub_2150EBC3C(v35, v34, v33) + 16);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v11 + 16);
  if (v22)
  {
    v36 = v21;
    v39 = MEMORY[0x24BEE4AF8];
    sub_215038BC8(0, v22, 0);
    v23 = 0;
    v24 = v39;
    do
    {
      v25 = (uint64_t *)(a1 + 16 * *(_QWORD *)(v11 + 8 * v23 + 32));
      v27 = *v25;
      v26 = v25[1];
      v29 = *(_QWORD *)(v39 + 16);
      v28 = *(_QWORD *)(v39 + 24);
      swift_bridgeObjectRetain();
      if (v29 >= v28 >> 1)
        sub_215038BC8((char *)(v28 > 1), v29 + 1, 1);
      ++v23;
      *(_QWORD *)(v39 + 16) = v29 + 1;
      v30 = v39 + 16 * v29;
      *(_QWORD *)(v30 + 32) = v27;
      *(_QWORD *)(v30 + 40) = v26;
    }
    while (v22 != v23);
    swift_release();
    v21 = v36;
  }
  else
  {
    swift_release();
    v24 = MEMORY[0x24BEE4AF8];
  }
  sub_21504E7D4(v24, v21 - v22, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2150501C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_QWORD *)(a2 + 16);
  v31 = *(_QWORD *)(a2 + 32);
  v32 = *(_QWORD *)(a2 + 24);
  v30 = *(_BYTE *)(a2 + 40);
  v6 = sub_2150EBC3C(v32, v31, v30);
  v7 = *(_QWORD *)(v6 + 16);
  v29 = a2;
  result = sub_215053BA4(a2);
  v9 = 0;
  v10 = (_QWORD *)(v5 + 16);
  v11 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v9 <= v7)
    v12 = v7;
  else
    v12 = v9;
  while (v7 != v9)
  {
    if (v12 == v9)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v6 + 8 * v9 + 32);
    result = swift_beginAccess();
    if (!*v10)
      goto LABEL_25;
    v15 = v13 - (v14 & 0xFFFFFFFFFFFFFFF8);
    ++v9;
    v16 = 1 << v15;
    if (v15 < 0)
      LOBYTE(v16) = 0;
    if ((v16 & *(_BYTE *)(*v10 + v13 / 8 + 64)) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v34 = v11;
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v18 = *(_QWORD *)(v11 + 16);
      v17 = *(_QWORD *)(v11 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v20 = v18 + 1;
        v28 = v18;
        result = (uint64_t)sub_215038BE4((char *)(v17 > 1), v18 + 1, 1);
        v19 = v20;
        v18 = v28;
        v11 = v34;
      }
      *(_QWORD *)(v11 + 16) = v19;
      *(_QWORD *)(v11 + 8 * v18 + 32) = v13;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v29);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(sub_2150EBC3C(v32, v31, v30) + 16);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v11 + 16);
  if (v22)
  {
    v35 = MEMORY[0x24BEE4AF8];
    sub_215038DDC(0, v22, 0);
    v23 = 0;
    v24 = v35;
    v25 = *(_QWORD *)(v35 + 16);
    do
    {
      v26 = *(_BYTE *)(a1 + *(_QWORD *)(v11 + 8 * v23 + 32));
      v27 = *(_QWORD *)(v35 + 24);
      if (v25 + v23 >= v27 >> 1)
        sub_215038DDC((char *)(v27 > 1), v25 + v23 + 1, 1);
      *(_QWORD *)(v35 + 16) = v25 + v23 + 1;
      *(_BYTE *)(v35 + v25 + v23++ + 32) = v26;
    }
    while (v22 != v23);
    swift_release();
  }
  else
  {
    swift_release();
    v24 = MEMORY[0x24BEE4AF8];
  }
  sub_21504EB04(v24, v21 - v22, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21505043C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_QWORD *)(a2 + 16);
  v31 = *(_QWORD *)(a2 + 32);
  v32 = *(_QWORD *)(a2 + 24);
  v30 = *(_BYTE *)(a2 + 40);
  v6 = sub_2150EBC3C(v32, v31, v30);
  v7 = *(_QWORD *)(v6 + 16);
  v29 = a2;
  result = sub_215053BA4(a2);
  v9 = 0;
  v10 = (_QWORD *)(v5 + 16);
  v11 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v9 <= v7)
    v12 = v7;
  else
    v12 = v9;
  while (v7 != v9)
  {
    if (v12 == v9)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v6 + 8 * v9 + 32);
    result = swift_beginAccess();
    if (!*v10)
      goto LABEL_25;
    v15 = v13 - (v14 & 0xFFFFFFFFFFFFFFF8);
    ++v9;
    v16 = 1 << v15;
    if (v15 < 0)
      LOBYTE(v16) = 0;
    if ((v16 & *(_BYTE *)(*v10 + v13 / 8 + 64)) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v34 = v11;
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v18 = *(_QWORD *)(v11 + 16);
      v17 = *(_QWORD *)(v11 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v20 = v18 + 1;
        v28 = v18;
        result = (uint64_t)sub_215038BE4((char *)(v17 > 1), v18 + 1, 1);
        v19 = v20;
        v18 = v28;
        v11 = v34;
      }
      *(_QWORD *)(v11 + 16) = v19;
      *(_QWORD *)(v11 + 8 * v18 + 32) = v13;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v29);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(sub_2150EBC3C(v32, v31, v30) + 16);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v11 + 16);
  if (v22)
  {
    v35 = MEMORY[0x24BEE4AF8];
    sub_215038DF8(0, v22, 0);
    v23 = 0;
    v24 = v35;
    v25 = *(_QWORD *)(v35 + 16);
    do
    {
      v26 = *(_QWORD *)(a1 + 8 * *(_QWORD *)(v11 + 8 * v23 + 32));
      v27 = *(_QWORD *)(v35 + 24);
      if (v25 >= v27 >> 1)
        sub_215038DF8((char *)(v27 > 1), v25 + 1, 1);
      ++v23;
      *(_QWORD *)(v35 + 16) = v25 + 1;
      *(_QWORD *)(v35 + 8 * v25++ + 32) = v26;
    }
    while (v22 != v23);
    swift_release();
  }
  else
  {
    swift_release();
    v24 = MEMORY[0x24BEE4AF8];
  }
  sub_21504EDDC(v24, v21 - v22, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2150506B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_QWORD *)(a2 + 16);
  v31 = *(_QWORD *)(a2 + 32);
  v32 = *(_QWORD *)(a2 + 24);
  v30 = *(_BYTE *)(a2 + 40);
  v6 = sub_2150EBC3C(v32, v31, v30);
  v7 = *(_QWORD *)(v6 + 16);
  v29 = a2;
  result = sub_215053BA4(a2);
  v9 = 0;
  v10 = (_QWORD *)(v5 + 16);
  v11 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v9 <= v7)
    v12 = v7;
  else
    v12 = v9;
  while (v7 != v9)
  {
    if (v12 == v9)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v6 + 8 * v9 + 32);
    result = swift_beginAccess();
    if (!*v10)
      goto LABEL_25;
    v15 = v13 - (v14 & 0xFFFFFFFFFFFFFFF8);
    ++v9;
    v16 = 1 << v15;
    if (v15 < 0)
      LOBYTE(v16) = 0;
    if ((v16 & *(_BYTE *)(*v10 + v13 / 8 + 64)) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v34 = v11;
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v18 = *(_QWORD *)(v11 + 16);
      v17 = *(_QWORD *)(v11 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v20 = v18 + 1;
        v28 = v18;
        result = (uint64_t)sub_215038BE4((char *)(v17 > 1), v18 + 1, 1);
        v19 = v20;
        v18 = v28;
        v11 = v34;
      }
      *(_QWORD *)(v11 + 16) = v19;
      *(_QWORD *)(v11 + 8 * v18 + 32) = v13;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v29);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(sub_2150EBC3C(v32, v31, v30) + 16);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v11 + 16);
  if (v22)
  {
    v35 = MEMORY[0x24BEE4AF8];
    sub_215038E14(0, v22, 0);
    v23 = 0;
    v24 = v35;
    v25 = *(_QWORD *)(v35 + 16);
    do
    {
      v26 = *(_DWORD *)(a1 + 4 * *(_QWORD *)(v11 + 8 * v23 + 32));
      v27 = *(_QWORD *)(v35 + 24);
      if (v25 >= v27 >> 1)
        sub_215038E14((char *)(v27 > 1), v25 + 1, 1);
      ++v23;
      *(_QWORD *)(v35 + 16) = v25 + 1;
      *(_DWORD *)(v35 + 4 * v25++ + 32) = v26;
    }
    while (v22 != v23);
    swift_release();
  }
  else
  {
    swift_release();
    v24 = MEMORY[0x24BEE4AF8];
  }
  sub_21504F0B4(v24, v21 - v22, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21505092C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_QWORD *)(a2 + 16);
  v31 = *(_QWORD *)(a2 + 32);
  v32 = *(_QWORD *)(a2 + 24);
  v30 = *(_BYTE *)(a2 + 40);
  v6 = sub_2150EBC3C(v32, v31, v30);
  v7 = *(_QWORD *)(v6 + 16);
  v29 = a2;
  result = sub_215053BA4(a2);
  v9 = 0;
  v10 = (_QWORD *)(v5 + 16);
  v11 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v9 <= v7)
    v12 = v7;
  else
    v12 = v9;
  while (v7 != v9)
  {
    if (v12 == v9)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v6 + 8 * v9 + 32);
    result = swift_beginAccess();
    if (!*v10)
      goto LABEL_25;
    v15 = v13 - (v14 & 0xFFFFFFFFFFFFFFF8);
    ++v9;
    v16 = 1 << v15;
    if (v15 < 0)
      LOBYTE(v16) = 0;
    if ((v16 & *(_BYTE *)(*v10 + v13 / 8 + 64)) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v34 = v11;
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v18 = *(_QWORD *)(v11 + 16);
      v17 = *(_QWORD *)(v11 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v20 = v18 + 1;
        v28 = v18;
        result = (uint64_t)sub_215038BE4((char *)(v17 > 1), v18 + 1, 1);
        v19 = v20;
        v18 = v28;
        v11 = v34;
      }
      *(_QWORD *)(v11 + 16) = v19;
      *(_QWORD *)(v11 + 8 * v18 + 32) = v13;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v29);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(sub_2150EBC3C(v32, v31, v30) + 16);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v11 + 16);
  if (v22)
  {
    v35 = MEMORY[0x24BEE4AF8];
    sub_215038E30(0, v22, 0);
    v23 = 0;
    v24 = v35;
    v25 = *(_QWORD *)(v35 + 16);
    do
    {
      v26 = *(_WORD *)(a1 + 2 * *(_QWORD *)(v11 + 8 * v23 + 32));
      v27 = *(_QWORD *)(v35 + 24);
      if (v25 >= v27 >> 1)
        sub_215038E30((char *)(v27 > 1), v25 + 1, 1);
      ++v23;
      *(_QWORD *)(v35 + 16) = v25 + 1;
      *(_WORD *)(v35 + 2 * v25++ + 32) = v26;
    }
    while (v22 != v23);
    swift_release();
  }
  else
  {
    swift_release();
    v24 = MEMORY[0x24BEE4AF8];
  }
  sub_21504F388(v24, v21 - v22, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215050BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_QWORD *)(a2 + 16);
  v31 = *(_QWORD *)(a2 + 32);
  v32 = *(_QWORD *)(a2 + 24);
  v30 = *(_BYTE *)(a2 + 40);
  v6 = sub_2150EBC3C(v32, v31, v30);
  v7 = *(_QWORD *)(v6 + 16);
  v29 = a2;
  result = sub_215053BA4(a2);
  v9 = 0;
  v10 = (_QWORD *)(v5 + 16);
  v11 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v9 <= v7)
    v12 = v7;
  else
    v12 = v9;
  while (v7 != v9)
  {
    if (v12 == v9)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v6 + 8 * v9 + 32);
    result = swift_beginAccess();
    if (!*v10)
      goto LABEL_25;
    v15 = v13 - (v14 & 0xFFFFFFFFFFFFFFF8);
    ++v9;
    v16 = 1 << v15;
    if (v15 < 0)
      LOBYTE(v16) = 0;
    if ((v16 & *(_BYTE *)(*v10 + v13 / 8 + 64)) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v34 = v11;
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v18 = *(_QWORD *)(v11 + 16);
      v17 = *(_QWORD *)(v11 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v20 = v18 + 1;
        v28 = v18;
        result = (uint64_t)sub_215038BE4((char *)(v17 > 1), v18 + 1, 1);
        v19 = v20;
        v18 = v28;
        v11 = v34;
      }
      *(_QWORD *)(v11 + 16) = v19;
      *(_QWORD *)(v11 + 8 * v18 + 32) = v13;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v29);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(sub_2150EBC3C(v32, v31, v30) + 16);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v11 + 16);
  if (v22)
  {
    v35 = MEMORY[0x24BEE4AF8];
    sub_215038BE4(0, v22, 0);
    v23 = 0;
    v24 = v35;
    v25 = *(_QWORD *)(v35 + 16);
    do
    {
      v26 = *(_QWORD *)(a1 + 8 * *(_QWORD *)(v11 + 8 * v23 + 32));
      v27 = *(_QWORD *)(v35 + 24);
      if (v25 >= v27 >> 1)
        sub_215038BE4((char *)(v27 > 1), v25 + 1, 1);
      ++v23;
      *(_QWORD *)(v35 + 16) = v25 + 1;
      *(_QWORD *)(v35 + 8 * v25++ + 32) = v26;
    }
    while (v22 != v23);
    swift_release();
  }
  else
  {
    swift_release();
    v24 = MEMORY[0x24BEE4AF8];
  }
  sub_21504F65C(v24, v21 - v22, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215050E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v25[16];
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 32);
  v13 = *(_BYTE *)(a3 + 40);
  v14 = sub_2150EBC3C(v11, v12, v13);
  v31 = a4;
  v32 = a5;
  v33 = a3;
  v15 = sub_2151120BC((uint64_t)sub_215053CCC, (uint64_t)v30, v14);
  v16 = *(_QWORD *)(sub_2150EBC3C(v11, v12, v13) + 16);
  swift_bridgeObjectRelease();
  v17 = v16 - *(_QWORD *)(v15 + 16);
  v34 = v15;
  v26 = a4;
  v27 = a5;
  v28 = a1;
  v29 = a2;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CB8);
  v19 = sub_215053C80();
  v21 = sub_2150ED6A0((void (*)(char *, char *))sub_215053C6C, (uint64_t)v25, v18, a4, MEMORY[0x24BEE4078], v19, MEMORY[0x24BEE40A8], v20);
  swift_bridgeObjectRelease();
  v34 = v21;
  v22 = sub_21512FD40();
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v22);
  sub_2150B57D4((char *)&v34, v17, (uint64_t)a4, v22, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215050F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_215050E14(a1, a2, *(_QWORD *)(v3 + 32), *(char **)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t ColumnSlice<A>.summary()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;

  v6 = v4[1];
  v17[0] = *v4;
  v17[1] = v6;
  v18 = *((_QWORD *)v4 + 4);
  v7 = v4[1];
  v13 = *v4;
  v14 = v7;
  v15 = *((_QWORD *)v4 + 4);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = type metadata accessor for Column(255, v8, a3, a4);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v9);
  sub_215130544();
  sub_215130508();
  swift_bridgeObjectRelease();
  v12[2] = v8;
  v12[3] = a2;
  v12[4] = v17;
  type metadata accessor for CategoricalSummary(0, v8, a2, v10);
  sub_215113F18((uint64_t (*)(uint64_t))sub_2150512D8, (uint64_t)v12, v16, v8);
  return swift_release();
}

_QWORD *sub_215051088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v31 = a2;
  v11 = *(_OWORD *)(a3 + 16);
  v36 = *(_OWORD *)a3;
  v37 = v11;
  v38 = *(_QWORD *)(a3 + 32);
  v12 = type metadata accessor for Column(255, (uint64_t)a4, a3, (uint64_t)a4);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v12);
  v13 = sub_215130544();
  sub_2151304F0();
  v14 = v39;
  v33 = v36;
  v34 = v37;
  v35 = v38;
  result = MEMORY[0x2199DC08C](&v32, v13);
  if (v32 < v14)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](result);
    v26 = a4;
    v27 = a5;
    v28 = a3;
    v17 = sub_2150C0EBC((uint64_t)sub_215053C00, (uint64_t)v25, v14, v16);
    v33 = v36;
    v34 = v37;
    v35 = v38;
    MEMORY[0x2199DC4C4](MEMORY[0x24BEE4238], v13);
    result = (_QWORD *)sub_21512FED8();
    v18 = *(_QWORD *)(v17 + 16);
    v19 = (uint64_t)result - v18;
    if (!__OFSUB__(result, v18))
    {
      v30 = a6;
      *(_QWORD *)&v33 = v17;
      MEMORY[0x24BDAC7A8](result);
      v26 = a4;
      v27 = a5;
      v28 = a1;
      v29 = v31;
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CB8);
      v21 = sub_215053C80();
      v23 = sub_2150ED6A0((void (*)(char *, char *))sub_215053C6C, (uint64_t)v25, v20, a4, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v33 = v23;
      v24 = sub_21512FD40();
      MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v24);
      sub_2150B57D4((char *)&v33, v19, (uint64_t)a4, v24, a5, v30);
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_2150512D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_215051088(a1, a2, *(_QWORD *)(v3 + 32), *(char **)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t FilledColumn<>.summary()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v18 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v17 - v9;
  sub_21512FE84();
  v20 = v6;
  v21 = v5;
  v22 = a2;
  v23 = v3;
  v11 = (char *)swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = sub_2150ED6A0((void (*)(char *, char *))sub_215051488, (uint64_t)v19, AssociatedTypeWitness, v11, MEMORY[0x24BEE4078], AssociatedConformanceWitness, MEMORY[0x24BEE40A8], v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  v24 = v14;
  v15 = sub_21512FD40();
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v15);
  sub_2150B57D4((char *)&v24, 0, (uint64_t)v11, v15, a2, v18);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215051488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = type metadata accessor for FilledColumn(0, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2);
  return FilledColumn.subscript.getter(a1, v6, a3);
}

uint64_t sub_2150514D8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  __int128 *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  _QWORD v83[6];
  _BYTE v84[32];
  _QWORD v85[4];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;

  v4 = v1;
  v7 = v1[3];
  v6 = v1[4];
  __swift_project_boxed_opaque_existential_1(v4, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 80))(v7);
  if (swift_dynamicCastMetatype())
  {
    sub_21511C91C();
    v4 = (_QWORD *)v86;
    v8 = (char *)v87;
    result = swift_beginAccess();
    v10 = *(uint64_t **)(v87 + 16);
    if (v10)
    {
      v11 = *v10 + 7;
      if (!__OFADD__(*v10, 7))
      {
        if (v11 < 0)
          v11 = *v10 + 14;
        v12 = v11 >> 3;
        v14 = v12 - 1;
        v13 = v12 < 1;
        v15 = v12 + 62;
        if (!v13)
          v15 = v14;
        sub_21504D814((uint64_t)v10 + (v15 & 0xFFFFFFFFFFFFFFC0) + 128, *v10, *((uint64_t *)&v86 + 1), v87, &v92);
        swift_release();
        swift_bridgeObjectRelease();
        v17 = *((_QWORD *)&v92 + 1);
        v16 = v92;
        v18 = v93;
        v19 = sub_21508EE04(*((uint64_t *)&v93 + 1));
        v20 = MEMORY[0x24BEE1768];
        goto LABEL_69;
      }
      __break(1u);
      do
      {
LABEL_74:
        v75 = *((_QWORD *)&v93 + 1);
        v74 = v94;
        __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)(v74 + 8) + 128))(v85, v3, v75);
        sub_21501EE90((uint64_t)&v92, (uint64_t)&v86);
        v77 = *((_QWORD *)&v87 + 1);
        v76 = v88;
        __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
        *((_QWORD *)&v94 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 + 8) + 64))(v3, v77);
        sub_21501EA34((uint64_t)&v86);
        sub_215053A5C((uint64_t)v85, (uint64_t)v84);
        sub_215053AA4((uint64_t)v84, (uint64_t)&v89);
        if (v90)
        {
          if ((swift_dynamicCast() & 1) == 0)
          {
            *(_QWORD *)&v88 = 0;
            v86 = 0u;
            v87 = 0u;
          }
        }
        else
        {
          sub_215046750((uint64_t)&v89, qword_253F0D058);
          v86 = 0u;
          v87 = 0u;
          *(_QWORD *)&v88 = 0;
        }
        sub_215046750((uint64_t)v84, qword_253F0D058);
        if (*((_QWORD *)&v87 + 1))
        {
          v89 = v86;
          v2[1] = v87;
          v91 = v88;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v8 = sub_21502E11C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
          v79 = *((_QWORD *)v8 + 2);
          v78 = *((_QWORD *)v8 + 3);
          if (v79 >= v78 >> 1)
            v8 = sub_21502E11C((char *)(v78 > 1), v79 + 1, 1, v8);
          *((_QWORD *)v8 + 2) = v79 + 1;
          v80 = &v8[40 * v79];
          v81 = v89;
          v82 = v2[1];
          *((_QWORD *)v80 + 8) = v91;
          *((_OWORD *)v80 + 2) = v81;
          *((_OWORD *)v80 + 3) = v82;
        }
        else
        {
          sub_215046750((uint64_t)&v86, &qword_254DA75E8);
        }
        v3 = *((_QWORD *)&v94 + 1);
        v72 = v94;
        v73 = *((_QWORD *)&v93 + 1);
        __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
      }
      while (v3 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v72 + 8) + 40))(v73));
LABEL_66:
      sub_215046750((uint64_t)&v92, &qword_254DA79D8);
      v63 = v4[3];
      v62 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v63);
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v62 + 8) + 48))(v63);
      v66 = v4[3];
      v65 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v66);
      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v65 + 8) + 32))(v66);
      v69 = v4[3];
      v68 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v69);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v68 + 8) + 40))(v69);
      if (result >= v67)
      {
        MEMORY[0x24BDAC7A8](result);
        v83[2] = v4;
        v71 = *(_QWORD *)(sub_2150C0EBC((uint64_t)sub_215053B44, (uint64_t)v83, v67, v70) + 16);
        result = swift_bridgeObjectRelease();
        if (!__OFSUB__(v64, v71))
        {
          sub_21504DBF0((uint64_t)v8, v64 - v71, &v92);
          swift_bridgeObjectRelease();
          v17 = *((_QWORD *)&v92 + 1);
          v16 = v92;
          v18 = v93;
          v19 = sub_21508E4A4(*((uint64_t *)&v93 + 1));
          v20 = MEMORY[0x24BEE23D0];
LABEL_69:
          result = swift_bridgeObjectRelease();
          *a1 = v16;
          a1[1] = v17;
          a1[2] = v18;
          a1[3] = v19;
          a1[4] = v20;
          return result;
        }
        goto LABEL_94;
      }
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    goto LABEL_90;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_21511CAB0();
    result = swift_beginAccess();
    v21 = *(uint64_t **)(v87 + 16);
    if (!v21)
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    v22 = *v21 + 7;
    if (!__OFADD__(*v21, 7))
    {
      if (v22 < 0)
        v22 = *v21 + 14;
      v23 = v22 >> 3;
      v24 = v23 - 1;
      v13 = v23 < 1;
      v25 = v23 + 62;
      if (!v13)
        v25 = v24;
      sub_21504D5D8((uint64_t)v21 + (v25 & 0xFFFFFFFFFFFFFFC0) + 128, *v21, *((uint64_t *)&v86 + 1), v87, &v92);
      swift_release();
      swift_bridgeObjectRelease();
      v17 = *((_QWORD *)&v92 + 1);
      v16 = v92;
      v18 = v93;
      v19 = sub_21508ECE4(*((uint64_t *)&v93 + 1));
      v20 = MEMORY[0x24BEE4678];
      goto LABEL_69;
    }
    __break(1u);
    goto LABEL_85;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_21511CC4C();
    result = swift_beginAccess();
    v26 = *(uint64_t **)(v87 + 16);
    if (!v26)
    {
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    v27 = *v26 + 7;
    if (!__OFADD__(*v26, 7))
    {
      if (v27 < 0)
        v27 = *v26 + 14;
      v28 = v27 >> 3;
      v29 = v28 - 1;
      v13 = v28 < 1;
      v30 = v28 + 62;
      if (!v13)
        v30 = v29;
      sub_21504D39C((uint64_t)v26 + (v30 & 0xFFFFFFFFFFFFFFC0) + 128, *v26, *((uint64_t *)&v86 + 1), v87, &v92);
      swift_release();
      swift_bridgeObjectRelease();
      v17 = *((_QWORD *)&v92 + 1);
      v16 = v92;
      v18 = v93;
      v19 = sub_21508EBC4(*((uint64_t *)&v93 + 1));
      v20 = MEMORY[0x24BEE14E8];
      goto LABEL_69;
    }
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_21511CDE4();
    result = swift_beginAccess();
    v31 = *(uint64_t **)(v87 + 16);
    if (!v31)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    v32 = *v31 + 7;
    if (!__OFADD__(*v31, 7))
    {
      if (v32 < 0)
        v32 = *v31 + 14;
      v33 = v32 >> 3;
      v34 = v33 - 1;
      v13 = v33 < 1;
      v35 = v33 + 62;
      if (!v13)
        v35 = v34;
      sub_21504D160((uint64_t)v31 + (v35 & 0xFFFFFFFFFFFFFFC0) + 128, *v31, *((uint64_t *)&v86 + 1), v87, &v92);
      swift_release();
      swift_bridgeObjectRelease();
      v17 = *((_QWORD *)&v92 + 1);
      v16 = v92;
      v18 = v93;
      v19 = sub_21508EAA4(*((uint64_t *)&v93 + 1));
      v20 = MEMORY[0x24BEE13C8];
      goto LABEL_69;
    }
    goto LABEL_86;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_21511CF7C();
    result = swift_beginAccess();
    v36 = *(uint64_t **)(v87 + 16);
    if (!v36)
    {
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
    v37 = *v36 + 7;
    if (!__OFADD__(*v36, 7))
    {
      if (v37 < 0)
        v37 = *v36 + 14;
      v38 = v37 >> 3;
      v39 = v38 - 1;
      v13 = v38 < 1;
      v40 = v38 + 62;
      if (!v13)
        v40 = v39;
      sub_21504CF24((uint64_t)v36 + (v40 & 0xFFFFFFFFFFFFFFC0) + 128, *v36, *((uint64_t *)&v86 + 1), v87, &v92);
      swift_release();
      swift_bridgeObjectRelease();
      v17 = *((_QWORD *)&v92 + 1);
      v16 = v92;
      v18 = v93;
      v19 = sub_21508E984(*((uint64_t *)&v93 + 1));
      v20 = MEMORY[0x24BEE1328];
      goto LABEL_69;
    }
    goto LABEL_87;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_21511D110();
    result = swift_beginAccess();
    v41 = *(uint64_t **)(v87 + 16);
    if (!v41)
    {
LABEL_98:
      __break(1u);
      goto LABEL_99;
    }
    v42 = *v41 + 7;
    if (!__OFADD__(*v41, 7))
    {
      if (v42 < 0)
        v42 = *v41 + 14;
      v43 = v42 >> 3;
      v44 = v43 - 1;
      v13 = v43 < 1;
      v45 = v43 + 62;
      if (!v13)
        v45 = v44;
      sub_21504CCF8((uint64_t)v41 + (v45 & 0xFFFFFFFFFFFFFFC0) + 128, *v41, v87, &v92);
      swift_release();
      swift_bridgeObjectRelease();
      v17 = *((_QWORD *)&v92 + 1);
      v16 = v92;
      v18 = v93;
      v19 = sub_21508E860(*((uint64_t *)&v93 + 1));
      v20 = MEMORY[0x24BEE0D00];
      goto LABEL_69;
    }
    goto LABEL_88;
  }
  v20 = sub_21512F740();
  if (swift_dynamicCastMetatype())
  {
    sub_21511D2A8();
    result = swift_beginAccess();
    v46 = *(uint64_t **)(v87 + 16);
    if (!v46)
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    v47 = *v46 + 7;
    if (!__OFADD__(*v46, 7))
    {
      if (v47 < 0)
        v47 = *v46 + 14;
      v48 = v47 >> 3;
      v49 = v48 - 1;
      v13 = v48 < 1;
      v50 = v48 + 62;
      if (!v13)
        v50 = v49;
      sub_21504CA30((uint64_t)v46 + (v50 & 0xFFFFFFFFFFFFFFC0) + 128, *v46, *((uint64_t *)&v86 + 1), v87, &v92);
      swift_release();
      swift_bridgeObjectRelease();
      v17 = *((_QWORD *)&v92 + 1);
      v16 = v92;
      v18 = v93;
      v19 = sub_21508E6EC(*((uint64_t *)&v93 + 1));
      goto LABEL_69;
    }
    goto LABEL_89;
  }
  if (!swift_dynamicCastMetatype())
  {
    v2 = &v89;
    sub_21501EE90((uint64_t)v4, (uint64_t)&v89);
    sub_21501EE90((uint64_t)&v89, (uint64_t)&v86);
    v57 = v90;
    v56 = v91;
    __swift_project_boxed_opaque_existential_1(&v89, v90);
    v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v56 + 8) + 32))(v57);
    sub_21501EA34((uint64_t)&v89);
    *((_QWORD *)&v88 + 1) = v58;
    v92 = v86;
    v93 = v87;
    v94 = v88;
    v3 = v58;
    v59 = v88;
    v60 = *((_QWORD *)&v87 + 1);
    __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v87 + 1));
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v59 + 8) + 40))(v60);
    v8 = (char *)MEMORY[0x24BEE4AF8];
    if (v3 == v61)
      goto LABEL_66;
    goto LABEL_74;
  }
  sub_21511D448();
  result = swift_beginAccess();
  v51 = *(uint64_t **)(v87 + 16);
  if (v51)
  {
    v52 = *v51 + 7;
    if (!__OFADD__(*v51, 7))
    {
      if (v52 < 0)
        v52 = *v51 + 14;
      v53 = v52 >> 3;
      v54 = v53 - 1;
      v13 = v53 < 1;
      v55 = v53 + 62;
      if (!v13)
        v55 = v54;
      sub_21504C800((uint64_t)v51 + (v55 & 0xFFFFFFFFFFFFFFC0) + 128, *v51, v87, &v92);
      swift_release();
      swift_bridgeObjectRelease();
      v17 = *((_QWORD *)&v92 + 1);
      v16 = v92;
      v18 = v93;
      v19 = sub_21508E5C8(*((uint64_t *)&v93 + 1));
      v20 = MEMORY[0x24BDCDDE8];
      goto LABEL_69;
    }
    goto LABEL_91;
  }
LABEL_100:
  __break(1u);
  return result;
}

uint64_t AnyColumnSlice.summary()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[32];
  _QWORD v84[4];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;

  v4 = (_QWORD *)v1;
  v7 = *(char **)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(v4, (uint64_t)v7);
  (*(void (**)(char *))(*(_QWORD *)(v6 + 8) + 80))(v7);
  if (swift_dynamicCastMetatype())
  {
    sub_215052804((uint64_t)&v91);
    v8 = v92;
    result = swift_beginAccess();
    v10 = *(_QWORD **)(v8 + 16);
    if (v10)
    {
      v11 = *v10 + 7;
      if (!__OFADD__(*v10, 7))
      {
        if (v11 < 0)
          v11 = *v10 + 14;
        v12 = v11 >> 3;
        v14 = v12 - 1;
        v13 = v12 < 1;
        v15 = v12 + 62;
        if (!v13)
          v15 = v14;
        sub_215050BA4((uint64_t)v10 + (v15 & 0xFFFFFFFFFFFFFFC0) + 128, (uint64_t)&v91, &v85);
        sub_215053AEC((uint64_t)&v91);
        v17 = *((_QWORD *)&v85 + 1);
        v16 = v85;
        v18 = v86;
        v19 = sub_21508EE04(*((uint64_t *)&v86 + 1));
        v20 = MEMORY[0x24BEE1768];
        goto LABEL_67;
      }
      __break(1u);
      goto LABEL_72;
    }
    goto LABEL_88;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_215052A4C((uint64_t)&v91);
    v21 = v92;
    result = swift_beginAccess();
    v22 = *(_QWORD **)(v21 + 16);
    if (!v22)
    {
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    v23 = *v22 + 7;
    if (!__OFADD__(*v22, 7))
    {
      if (v23 < 0)
        v23 = *v22 + 14;
      v24 = v23 >> 3;
      v25 = v24 - 1;
      v13 = v24 < 1;
      v26 = v24 + 62;
      if (!v13)
        v26 = v25;
      sub_21505092C((uint64_t)v22 + (v26 & 0xFFFFFFFFFFFFFFC0) + 128, (uint64_t)&v91, &v85);
      sub_215053AEC((uint64_t)&v91);
      v17 = *((_QWORD *)&v85 + 1);
      v16 = v85;
      v18 = v86;
      v19 = sub_21508ECE4(*((uint64_t *)&v86 + 1));
      v20 = MEMORY[0x24BEE4678];
      goto LABEL_67;
    }
    __break(1u);
    goto LABEL_83;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_215052C9C((uint64_t)&v91);
    v27 = v92;
    result = swift_beginAccess();
    v28 = *(_QWORD **)(v27 + 16);
    if (!v28)
    {
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    v29 = *v28 + 7;
    if (!__OFADD__(*v28, 7))
    {
      if (v29 < 0)
        v29 = *v28 + 14;
      v30 = v29 >> 3;
      v31 = v30 - 1;
      v13 = v30 < 1;
      v32 = v30 + 62;
      if (!v13)
        v32 = v31;
      sub_2150506B4((uint64_t)v28 + (v32 & 0xFFFFFFFFFFFFFFC0) + 128, (uint64_t)&v91, &v85);
      sub_215053AEC((uint64_t)&v91);
      v17 = *((_QWORD *)&v85 + 1);
      v16 = v85;
      v18 = v86;
      v19 = sub_21508EBC4(*((uint64_t *)&v86 + 1));
      v20 = MEMORY[0x24BEE14E8];
      goto LABEL_67;
    }
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_215052EE8((uint64_t)&v91);
    v33 = v92;
    result = swift_beginAccess();
    v34 = *(_QWORD **)(v33 + 16);
    if (!v34)
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    v35 = *v34 + 7;
    if (!__OFADD__(*v34, 7))
    {
      if (v35 < 0)
        v35 = *v34 + 14;
      v36 = v35 >> 3;
      v37 = v36 - 1;
      v13 = v36 < 1;
      v38 = v36 + 62;
      if (!v13)
        v38 = v37;
      sub_21505043C((uint64_t)v34 + (v38 & 0xFFFFFFFFFFFFFFC0) + 128, (uint64_t)&v91, &v85);
      sub_215053AEC((uint64_t)&v91);
      v17 = *((_QWORD *)&v85 + 1);
      v16 = v85;
      v18 = v86;
      v19 = sub_21508EAA4(*((uint64_t *)&v86 + 1));
      v20 = MEMORY[0x24BEE13C8];
      goto LABEL_67;
    }
    goto LABEL_84;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_215053134((uint64_t)&v91);
    v39 = v92;
    result = swift_beginAccess();
    v40 = *(_QWORD **)(v39 + 16);
    if (!v40)
    {
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    v41 = *v40 + 7;
    if (!__OFADD__(*v40, 7))
    {
      if (v41 < 0)
        v41 = *v40 + 14;
      v42 = v41 >> 3;
      v43 = v42 - 1;
      v13 = v42 < 1;
      v44 = v42 + 62;
      if (!v13)
        v44 = v43;
      sub_2150501C4((uint64_t)v40 + (v44 & 0xFFFFFFFFFFFFFFC0) + 128, (uint64_t)&v91, &v85);
      sub_215053AEC((uint64_t)&v91);
      v17 = *((_QWORD *)&v85 + 1);
      v16 = v85;
      v18 = v86;
      v19 = sub_21508E984(*((uint64_t *)&v86 + 1));
      v20 = MEMORY[0x24BEE1328];
      goto LABEL_67;
    }
    goto LABEL_85;
  }
  if (swift_dynamicCastMetatype())
  {
    sub_21505337C((uint64_t)&v91);
    v45 = v92;
    result = swift_beginAccess();
    v46 = *(_QWORD **)(v45 + 16);
    if (!v46)
    {
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    v47 = *v46 + 7;
    if (!__OFADD__(*v46, 7))
    {
      if (v47 < 0)
        v47 = *v46 + 14;
      v48 = v47 >> 3;
      v49 = v48 - 1;
      v13 = v48 < 1;
      v50 = v48 + 62;
      if (!v13)
        v50 = v49;
      sub_21504FF48((uint64_t)v46 + (v50 & 0xFFFFFFFFFFFFFFC0) + 128, (uint64_t)&v91, &v85);
      sub_215053AEC((uint64_t)&v91);
      v17 = *((_QWORD *)&v85 + 1);
      v16 = v85;
      v18 = v86;
      v19 = sub_21508E860(*((uint64_t *)&v86 + 1));
      v20 = MEMORY[0x24BEE0D00];
      goto LABEL_67;
    }
    goto LABEL_86;
  }
  v20 = sub_21512F740();
  if (swift_dynamicCastMetatype())
  {
    sub_2150535C8((uint64_t)&v91);
    v51 = v92;
    result = swift_beginAccess();
    v52 = *(_QWORD **)(v51 + 16);
    if (!v52)
    {
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    v53 = *v52 + 7;
    if (!__OFADD__(*v52, 7))
    {
      if (v53 < 0)
        v53 = *v52 + 14;
      v54 = v53 >> 3;
      v55 = v54 - 1;
      v13 = v54 < 1;
      v56 = v54 + 62;
      if (!v13)
        v56 = v55;
      sub_21504FC3C((uint64_t)v52 + (v56 & 0xFFFFFFFFFFFFFFC0) + 128, (uint64_t)&v91, &v85);
      sub_215053AEC((uint64_t)&v91);
      v17 = *((_QWORD *)&v85 + 1);
      v16 = v85;
      v18 = v86;
      v19 = sub_21508E6EC(*((uint64_t *)&v86 + 1));
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (!swift_dynamicCastMetatype())
  {
    v2 = &v88;
    sub_2150452A8((uint64_t)v4, (uint64_t)&v88);
    sub_2150452A8((uint64_t)&v88, (uint64_t)&v85);
    v64 = v89;
    v63 = v90;
    __swift_project_boxed_opaque_existential_1(&v88, v89);
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v63 + 8) + 32))(v64);
    sub_2150452E4((uint64_t)&v88);
    *((_QWORD *)&v87 + 1) = v65;
    v91 = v85;
    v92 = v86;
    v93 = v87;
    v3 = v65;
    v66 = v87;
    v67 = *((_QWORD *)&v86 + 1);
    __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v86 + 1));
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v66 + 8) + 40))(v67);
    v7 = (char *)MEMORY[0x24BEE4AF8];
    if (v3 == v68)
    {
LABEL_66:
      sub_215046750((uint64_t)&v91, qword_254DA79E8);
      v70 = v4[3];
      v69 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v70);
      v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v69 + 8) + 56))(v70);
      sub_21504DBF0((uint64_t)v7, v71, &v91);
      swift_bridgeObjectRelease();
      v17 = *((_QWORD *)&v91 + 1);
      v16 = v91;
      v18 = v92;
      v19 = sub_21508E4A4(*((uint64_t *)&v92 + 1));
      v20 = MEMORY[0x24BEE23D0];
LABEL_67:
      result = swift_bridgeObjectRelease();
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v18;
      a1[3] = v19;
      a1[4] = v20;
      return result;
    }
    do
    {
LABEL_72:
      v75 = *((_QWORD *)&v92 + 1);
      v74 = v93;
      __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)(v74 + 8) + 128))(v84, v3, v75);
      sub_2150452A8((uint64_t)&v91, (uint64_t)&v85);
      v77 = *((_QWORD *)&v86 + 1);
      v76 = v87;
      __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
      *((_QWORD *)&v93 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 + 8) + 64))(v3, v77);
      sub_2150452E4((uint64_t)&v85);
      sub_215053A5C((uint64_t)v84, (uint64_t)v83);
      sub_215053AA4((uint64_t)v83, (uint64_t)&v88);
      if (v89)
      {
        if ((swift_dynamicCast() & 1) == 0)
        {
          *(_QWORD *)&v87 = 0;
          v85 = 0u;
          v86 = 0u;
        }
      }
      else
      {
        sub_215046750((uint64_t)&v88, qword_253F0D058);
        v85 = 0u;
        v86 = 0u;
        *(_QWORD *)&v87 = 0;
      }
      sub_215046750((uint64_t)v83, qword_253F0D058);
      if (*((_QWORD *)&v86 + 1))
      {
        v88 = v85;
        v2[1] = v86;
        v90 = v87;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_21502E11C(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v79 = *((_QWORD *)v7 + 2);
        v78 = *((_QWORD *)v7 + 3);
        if (v79 >= v78 >> 1)
          v7 = sub_21502E11C((char *)(v78 > 1), v79 + 1, 1, v7);
        *((_QWORD *)v7 + 2) = v79 + 1;
        v80 = &v7[40 * v79];
        v81 = v88;
        v82 = v2[1];
        *((_QWORD *)v80 + 8) = v90;
        *((_OWORD *)v80 + 2) = v81;
        *((_OWORD *)v80 + 3) = v82;
      }
      else
      {
        sub_215046750((uint64_t)&v85, &qword_254DA75E8);
      }
      v3 = *((_QWORD *)&v93 + 1);
      v72 = v93;
      v73 = *((_QWORD *)&v92 + 1);
      __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
    }
    while (v3 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v72 + 8) + 40))(v73));
    goto LABEL_66;
  }
  sub_215053814((uint64_t)&v91);
  v57 = v92;
  result = swift_beginAccess();
  v58 = *(_QWORD **)(v57 + 16);
  if (v58)
  {
    v59 = *v58 + 7;
    if (!__OFADD__(*v58, 7))
    {
      if (v59 < 0)
        v59 = *v58 + 14;
      v60 = v59 >> 3;
      v61 = v60 - 1;
      v13 = v60 < 1;
      v62 = v60 + 62;
      if (!v13)
        v62 = v61;
      sub_21504F9BC((uint64_t)v58 + (v62 & 0xFFFFFFFFFFFFFFC0) + 128, (uint64_t)&v91, &v85);
      sub_215053AEC((uint64_t)&v91);
      v17 = *((_QWORD *)&v85 + 1);
      v16 = v85;
      v18 = v86;
      v19 = sub_21508E5C8(*((uint64_t *)&v86 + 1));
      v20 = MEMORY[0x24BDCDDE8];
      goto LABEL_67;
    }
    goto LABEL_89;
  }
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_215052804@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v5 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 80))(v5);
  v7 = v17;
  if (v6 != MEMORY[0x24BEE1768])
    goto LABEL_10;
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C38);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_21504C608((uint64_t)v2, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C40);
    return swift_dynamicCast();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  result = swift_dynamicCast();
  v9 = v13;
  v10 = v14;
  if (v14 < v13)
  {
    __break(1u);
LABEL_10:
    sub_2150452A8((uint64_t)v2, (uint64_t)v7);
    sub_215130178();
    swift_bridgeObjectRelease();
    v11 = v18;
    v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 80))(v11);
    sub_215130664();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (v13 == v14)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a1 = v15;
  *(_OWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = 2 * (v13 == v14);
  return result;
}

uint64_t sub_215052A4C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v5 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 80))(v5);
  v7 = v17;
  if (v6 != MEMORY[0x24BEE4678])
    goto LABEL_10;
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C48);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_21504C608((uint64_t)v2, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C50);
    return swift_dynamicCast();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  result = swift_dynamicCast();
  v9 = v13;
  v10 = v14;
  if (v14 < v13)
  {
    __break(1u);
LABEL_10:
    sub_2150452A8((uint64_t)v2, (uint64_t)v7);
    sub_215130178();
    swift_bridgeObjectRelease();
    v11 = v18;
    v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 80))(v11);
    sub_215130664();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (v13 == v14)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a1 = v15;
  *(_OWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = 2 * (v13 == v14);
  return result;
}

uint64_t sub_215052C9C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v5 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 80))(v5);
  v7 = v17;
  if (v6 != MEMORY[0x24BEE14E8])
    goto LABEL_10;
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C58);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_21504C608((uint64_t)v2, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C60);
    return swift_dynamicCast();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  result = swift_dynamicCast();
  v9 = v13;
  v10 = v14;
  if (v14 < v13)
  {
    __break(1u);
LABEL_10:
    sub_2150452A8((uint64_t)v2, (uint64_t)v7);
    sub_215130178();
    swift_bridgeObjectRelease();
    v11 = v18;
    v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 80))(v11);
    sub_215130664();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (v13 == v14)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a1 = v15;
  *(_OWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = 2 * (v13 == v14);
  return result;
}

uint64_t sub_215052EE8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v5 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 80))(v5);
  v7 = v17;
  if (v6 != MEMORY[0x24BEE13C8])
    goto LABEL_10;
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C68);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_21504C608((uint64_t)v2, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C70);
    return swift_dynamicCast();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  result = swift_dynamicCast();
  v9 = v13;
  v10 = v14;
  if (v14 < v13)
  {
    __break(1u);
LABEL_10:
    sub_2150452A8((uint64_t)v2, (uint64_t)v7);
    sub_215130178();
    swift_bridgeObjectRelease();
    v11 = v18;
    v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 80))(v11);
    sub_215130664();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (v13 == v14)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a1 = v15;
  *(_OWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = 2 * (v13 == v14);
  return result;
}

uint64_t sub_215053134@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v5 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 80))(v5);
  v7 = v17;
  if (v6 != MEMORY[0x24BEE1328])
    goto LABEL_10;
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C78);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_21504C608((uint64_t)v2, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C80);
    return swift_dynamicCast();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  result = swift_dynamicCast();
  v9 = v13;
  v10 = v14;
  if (v14 < v13)
  {
    __break(1u);
LABEL_10:
    sub_2150452A8((uint64_t)v2, (uint64_t)v7);
    sub_215130178();
    swift_bridgeObjectRelease();
    v11 = v18;
    v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 80))(v11);
    sub_215130664();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (v13 == v14)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a1 = v15;
  *(_OWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = 2 * (v13 == v14);
  return result;
}

uint64_t sub_21505337C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v5 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 80))(v5);
  v7 = v17;
  if (v6 != MEMORY[0x24BEE0D00])
    goto LABEL_10;
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C88);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_21504C608((uint64_t)v2, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C90);
    return swift_dynamicCast();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  result = swift_dynamicCast();
  v9 = v13;
  v10 = v14;
  if (v14 < v13)
  {
    __break(1u);
LABEL_10:
    sub_2150452A8((uint64_t)v2, (uint64_t)v7);
    sub_215130178();
    swift_bridgeObjectRelease();
    v11 = v18;
    v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 80))(v11);
    sub_215130664();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (v13 == v14)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a1 = v15;
  *(_OWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = 2 * (v13 == v14);
  return result;
}

uint64_t sub_2150535C8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = sub_21512F740();
  v6 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 80))(v6);
  v8 = v18;
  if (v4 != v7)
    goto LABEL_10;
  sub_21504C608((uint64_t)v2, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C98);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_21504C608((uint64_t)v2, (uint64_t)v18);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CA0);
    return swift_dynamicCast();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_21504C608((uint64_t)v2, (uint64_t)v18);
  result = swift_dynamicCast();
  v10 = v14;
  v11 = v15;
  if (v15 < v14)
  {
    __break(1u);
LABEL_10:
    sub_2150452A8((uint64_t)v2, (uint64_t)v8);
    sub_215130178();
    swift_bridgeObjectRelease();
    v12 = v19;
    v13 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 80))(v12);
    sub_215130664();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (v14 == v15)
  {
    v10 = 0;
    v11 = 0;
  }
  *(_QWORD *)a1 = v16;
  *(_OWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = 2 * (v14 == v15);
  return result;
}

uint64_t sub_215053814@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v5 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 80))(v5);
  v7 = v17;
  if (v6 != MEMORY[0x24BDCDDE8])
    goto LABEL_10;
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CA8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_21504C608((uint64_t)v2, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CB0);
    return swift_dynamicCast();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_21504C608((uint64_t)v2, (uint64_t)v17);
  result = swift_dynamicCast();
  v9 = v13;
  v10 = v14;
  if (v14 < v13)
  {
    __break(1u);
LABEL_10:
    sub_2150452A8((uint64_t)v2, (uint64_t)v7);
    sub_215130178();
    swift_bridgeObjectRelease();
    v11 = v18;
    v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 80))(v11);
    sub_215130664();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    sub_21512FB90();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (v13 == v14)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a1 = v15;
  *(_OWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = 2 * (v13 == v14);
  return result;
}

uint64_t sub_215053A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_215053AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_215053AEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  swift_release();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v2, v3, v4);
  return a1;
}

uint64_t sub_215053B44(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = *a1;
  v4 = v2[3];
  v5 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + 96))(v3, v4) & 1;
}

uint64_t sub_215053BA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2150437A8(v2, v3, v4);
  return a1;
}

BOOL sub_215053C00(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::Int v5;

  v5 = *a1;
  type metadata accessor for ColumnSlice(0, *(_QWORD *)(v4 + 16), a3, a4);
  return !ColumnSlice.isNil(at:)(v5);
}

uint64_t sub_215053C6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215053DA0(a1, a2);
}

unint64_t sub_215053C80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254DA7CC0;
  if (!qword_254DA7CC0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254DA7CB8);
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_254DA7CC0);
  }
  return result;
}

BOOL sub_215053CCC(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::Int v5;

  v5 = *a1;
  type metadata accessor for DiscontiguousColumnSlice(0, *(_QWORD *)(v4 + 16), a3, a4);
  return !DiscontiguousColumnSlice.isNil(at:)(v5);
}

BOOL sub_215053D38(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::Int v5;

  v5 = *a1;
  type metadata accessor for Column(0, *(_QWORD *)(v4 + 16), a3, a4);
  return !Column.isNil(at:)(v5);
}

uint64_t sub_215053DA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, *(_QWORD *)(v2 + 32) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 72) * *a1);
}

uint64_t + infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  return sub_2150540F0(a1, a2, a3, a4, a5, a6, (uint64_t)sub_215053E18, a7, (void (*)(char *, char *))sub_215053E2C, 43);
}

{
  return sub_2150545D4(a1, a2, a3, a4, a5, a6, (uint64_t)sub_215053E7C, a7, (void (*)(char *, char *))sub_215053EB8, 43);
}

uint64_t sub_215053E18(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, (uint64_t)MEMORY[0x24BEE2F68], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054374);
}

uint64_t sub_215053E2C(uint64_t a1, uint64_t a2)
{
  return sub_215053ED4(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054500);
}

uint64_t sub_215053E7C(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, (uint64_t)MEMORY[0x24BEE2F68], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054858);
}

uint64_t sub_215053E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v4;

  return a4(a1, a2, v4[2], v4[3], v4[4], v4[5], v4[6], a3);
}

uint64_t sub_215053EB8(uint64_t a1, uint64_t a2)
{
  return sub_215053ED4(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2150549E8);
}

uint64_t sub_215053ED4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v3;

  return a3(a1, v3[7], v3[8], v3[2], v3[3], v3[4], v3[5], v3[6], a2);
}

uint64_t - infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  return sub_2150540F0(a1, a2, a3, a4, a5, a6, (uint64_t)sub_215053F40, a7, (void (*)(char *, char *))sub_215053E2C, 45);
}

{
  return sub_2150545D4(a1, a2, a3, a4, a5, a6, (uint64_t)sub_215053F88, a7, (void (*)(char *, char *))sub_215053EB8, 45);
}

uint64_t sub_215053F40(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, (uint64_t)MEMORY[0x24BEE2F70], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054374);
}

uint64_t sub_215053F88(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, (uint64_t)MEMORY[0x24BEE2F70], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054858);
}

uint64_t * infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  return sub_2150540F0(a1, a2, a3, a4, a5, a6, (uint64_t)sub_215053FD0, a7, (void (*)(char *, char *))sub_215053E2C, 42);
}

{
  return sub_2150545D4(a1, a2, a3, a4, a5, a6, (uint64_t)sub_215054018, a7, (void (*)(char *, char *))sub_215053EB8, 42);
}

uint64_t sub_215053FD0(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, (uint64_t)MEMORY[0x24BEE17F8], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054374);
}

uint64_t sub_215054018(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, (uint64_t)MEMORY[0x24BEE17F8], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054858);
}

uint64_t / infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  return sub_2150540F0(a1, a2, a3, a4, a5, a6, (uint64_t)sub_215054060, a7, (void (*)(char *, char *))sub_215053E2C, 47);
}

{
  return sub_2150545D4(a1, a2, a3, a4, a5, a6, (uint64_t)sub_2150540A8, a7, (void (*)(char *, char *))sub_215053EB8, 47);
}

{
  return sub_2150540F0(a1, a2, a3, a4, a5, a6, (uint64_t)sub_2150544EC, a7, (void (*)(char *, char *))sub_215053E2C, 47);
}

{
  return sub_2150545D4(a1, a2, a3, a4, a5, a6, (uint64_t)sub_2150549D4, a7, (void (*)(char *, char *))sub_215053EB8, 47);
}

uint64_t sub_215054060(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, MEMORY[0x24BEE1FE0], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054374);
}

uint64_t sub_2150540A8(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, MEMORY[0x24BEE1FE0], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054858);
}

uint64_t sub_2150540F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, void (*a9)(char *, char *), uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v31 = a7;
  v30 = a6;
  v32 = a1;
  v37 = a8;
  v36 = a10;
  v34 = a9;
  v35 = *(_QWORD *)(a4 + 8);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) + 8) + 8);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 8) + 8);
  v52 = a2;
  v53 = a3;
  v54 = v14;
  v55 = v15;
  v16 = sub_2151301A8();
  v33 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - v17;
  sub_215130490();
  v47 = a2;
  v48 = a3;
  v49 = a4;
  v50 = a5;
  v51 = v30;
  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  v43 = v30;
  v44 = v31;
  v45 = &v46;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = sub_215130064();
  v21 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE2620], v16);
  v23 = sub_215021834(v34, (uint64_t)v38, v16, v20, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v16);
  v52 = (*(uint64_t (**)(uint64_t))(v35 + 16))(a2);
  v53 = v24;
  sub_21512FB90();
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v25 = v52;
  v26 = v53;
  v52 = v23;
  v27 = sub_21512FD40();
  v28 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v27);
  return Column.init<A>(name:contents:)(v25, v26, (uint64_t)&v52, AssociatedTypeWitness, v27, v28, v37);
}

uint64_t sub_215054374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X6>, void (*a4)(char *, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);

  v21 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_215130064();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v18 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, AssociatedTypeWitness);
    v21(v17, a2, AssociatedTypeWitness, a3);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
    v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a5, v18, 1, AssociatedTypeWitness);
}

uint64_t sub_2150544EC(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, (uint64_t)MEMORY[0x24BEE0548], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054374);
}

uint64_t sub_215054500(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata2;

  swift_getAssociatedTypeWitness();
  sub_215130064();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_2150545D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, void (*a9)(char *, char *), uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v31 = a7;
  v30 = a6;
  v32 = a1;
  v37 = a8;
  v36 = a10;
  v34 = a9;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8);
  v35 = *(_QWORD *)(a5 + 8);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) + 8) + 8);
  v52 = a2;
  v53 = a3;
  v54 = v14;
  v55 = v15;
  v16 = sub_2151301A8();
  v33 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - v17;
  sub_215130490();
  v47 = a2;
  v48 = a3;
  v49 = a4;
  v50 = a5;
  v51 = v30;
  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  v43 = v30;
  v44 = v31;
  v45 = &v46;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = sub_215130064();
  v21 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE2620], v16);
  v23 = sub_215021834(v34, (uint64_t)v38, v16, v20, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v16);
  v52 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
  v53 = v24;
  sub_21512FB90();
  (*(void (**)(uint64_t))(v35 + 16))(a3);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v25 = v52;
  v26 = v53;
  v52 = v23;
  v27 = sub_21512FD40();
  v28 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v27);
  return Column.init<A>(name:contents:)(v25, v26, (uint64_t)&v52, AssociatedTypeWitness, v27, v28, v37);
}

uint64_t sub_215054858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X6>, void (*a4)(uint64_t, char *, uint64_t, uint64_t)@<X7>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t, uint64_t);

  v21 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_215130064();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v18 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, AssociatedTypeWitness);
    v21(a1, v17, AssociatedTypeWitness, a3);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
    v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a5, v18, 1, AssociatedTypeWitness);
}

uint64_t sub_2150549D4(uint64_t a1, uint64_t a2)
{
  return sub_215053E90(a1, a2, (uint64_t)MEMORY[0x24BEE0548], (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215054858);
}

uint64_t sub_2150549E8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata2;

  swift_getAssociatedTypeWitness();
  sub_215130064();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_215054A90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v8 = *(_QWORD *)(v5 + 24) >> 1, v8 <= v6))
  {
    result = (uint64_t)sub_21502DABC((char *)result, v6 + 1, 1, (char *)v5);
    v5 = result;
    v8 = *(_QWORD *)(result + 24) >> 1;
  }
  v9 = *(_QWORD *)(v5 + 16);
  if (v8 != v9)
  {
    if (v8 > v9)
    {
      v10 = v5 + 16 * v9;
      *(_QWORD *)(v10 + 32) = a1;
      *(_QWORD *)(v10 + 40) = a2;
      *(_QWORD *)(v5 + 16) = v9 + 1;
      *v2 = v5;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_215054B2C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v19;

  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 + 2;
  if (__OFADD__(v6, 2))
    goto LABEL_14;
  v11 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v12 = *(_QWORD *)(v5 + 24) >> 1, v12 < v7))
  {
    if (v6 <= v7)
      v13 = v6 + 2;
    else
      v13 = v6;
    result = (uint64_t)sub_21502DABC((char *)result, v13, 1, (char *)v5);
    v5 = result;
    v12 = *(_QWORD *)(result + 24) >> 1;
  }
  v14 = *(_QWORD *)(v5 + 16);
  v15 = v12 - v14;
  if (!v15)
    goto LABEL_13;
  v16 = v15 == 1;
  if (v15 < 1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = (uint64_t *)(v5 + 32 + 16 * v14);
  *v17 = v11;
  v17[1] = a2;
  if (v16)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17[2] = a3;
  v17[3] = a4;
  v18 = __OFADD__(v14, 2);
  v19 = v14 + 2;
  if (!v18)
  {
    *(_QWORD *)(v5 + 16) = v19;
    *v4 = v5;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_215054C00(uint64_t result, int64_t a2)
{
  char *v2;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t (*v21)();
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  int64_t v31;
  int64_t v32;
  char *v33;
  uint64_t (*v34)();
  uint64_t *v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  _QWORD v40[4];
  int64_t v41;
  int64_t v42;
  uint64_t v43;

  v5 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_16;
  }
  v2 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  v7 = v6 + v5;
  if (__OFADD__(v6, v5))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v9 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v11 = *((_QWORD *)v2 + 3) >> 1, v11 < v7))
  {
    if (v6 <= v7)
      v12 = v6 + v5;
    else
      v12 = v6;
    v2 = sub_21502DBB4(isUniquelyReferenced_nonNull_native, v12, 1, v2);
    v11 = *((_QWORD *)v2 + 3) >> 1;
  }
  v13 = *((_QWORD *)v2 + 2);
  v14 = v11 - v13;
  result = (uint64_t)sub_215120C8C(&v41, (int64_t *)&v2[8 * v13 + 32], v11 - v13, v9, a2);
  if (result < v5)
    goto LABEL_17;
  if (result >= 1)
  {
    v15 = *((_QWORD *)v2 + 2);
    v16 = __OFADD__(v15, result);
    v17 = v15 + result;
    if (v16)
    {
      __break(1u);
LABEL_37:
      v29 = v36 + v4 + 1;
      goto LABEL_38;
    }
    *((_QWORD *)v2 + 2) = v17;
  }
  if (result != v14)
  {
LABEL_14:
    *v3 = v2;
    return result;
  }
LABEL_18:
  v18 = v43;
  if (v43 == v42)
    goto LABEL_14;
  v19 = *((_QWORD *)v2 + 2);
  v20 = v41;
  v39 = v42;
  v21 = sub_215054F68(v40, v43);
  v23 = *v22;
  result = ((uint64_t (*)(_QWORD *, _QWORD))v21)(v40, 0);
  v24 = v39;
  if (v39 < v20)
    goto LABEL_40;
  if (v18 < v20)
  {
LABEL_41:
    __break(1u);
  }
  else
  {
    v38 = v20;
    if (v18 < v39)
    {
      v25 = v18 + 1;
      v26 = -v39;
      while (1)
      {
LABEL_24:
        v27 = *((_QWORD *)v2 + 3);
        v28 = v27 >> 1;
        v29 = v19 + 1;
        if ((uint64_t)(v27 >> 1) < v19 + 1)
        {
          result = (uint64_t)sub_21502DBB4((char *)(v27 > 1), v19 + 1, 1, v2);
          v24 = v39;
          v2 = (char *)result;
          v28 = *(_QWORD *)(result + 24) >> 1;
          if (v19 < v28)
          {
LABEL_26:
            v30 = &v2[8 * v19];
            *((_QWORD *)v30 + 4) = v23;
            if (v25 != v24)
            {
              v4 = 0;
              v31 = v26 + v25;
              v36 = v19;
              v37 = v28;
              v32 = ~v19 + v28;
              v33 = v30 + 40;
              while (1)
              {
                v34 = sub_215054F68(v40, v25 + v4);
                v23 = *v35;
                result = ((uint64_t (*)(_QWORD *, _QWORD))v34)(v40, 0);
                v24 = v39;
                if (v25 < v38 || v25 + v4 >= v39)
                  break;
                if (v32 == v4)
                {
                  v25 += v4 + 1;
                  v19 = v37;
                  v26 = -v39;
                  *((_QWORD *)v2 + 2) = v37;
                  goto LABEL_24;
                }
                *(_QWORD *)&v33[8 * v4++] = v23;
                if (!(v31 + v4))
                  goto LABEL_37;
              }
              __break(1u);
LABEL_40:
              __break(1u);
              goto LABEL_41;
            }
LABEL_38:
            *((_QWORD *)v2 + 2) = v29;
            goto LABEL_14;
          }
        }
        else if (v19 < v28)
        {
          goto LABEL_26;
        }
        *((_QWORD *)v2 + 2) = v19;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_215054E88(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_21502DAB0((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t (*sub_215054F68(_QWORD *a1, uint64_t a2))()
{
  *a1 = a2;
  return nullsub_5;
}

uint64_t sub_215054F80(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;

  result = (uint64_t)sub_21502DAB0(0, a2 & ~(a2 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v6 = result;
  if (a2 < 1)
    return v6;
  v7 = 0;
  while (1)
  {
    v8 = v7;
    if (__OFADD__(v7, 128))
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v7 += 128;
    v9 = __OFSUB__(a2, v8);
    v10 = a2 - v8;
    if (v9)
      break;
    if (v10 >= 128)
      v11 = 128;
    else
      v11 = v10;
    result = (uint64_t)sub_21501D310(a1, v11);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
    v12 = result;
    v13 = *(_QWORD *)(result + 16);
    v14 = *(_QWORD *)(v6 + 16);
    v15 = v14 + v13;
    if (__OFADD__(v14, v13))
      goto LABEL_28;
    if (v15 > *(_QWORD *)(v6 + 24) >> 1)
    {
      if (v14 <= v15)
        v18 = v14 + v13;
      else
        v18 = *(_QWORD *)(v6 + 16);
      result = (uint64_t)sub_21502DAB0((char *)1, v18, 1, (char *)v6);
      v6 = result;
      v14 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_16:
        if ((*(_QWORD *)(v6 + 24) >> 1) - v14 < v13)
          goto LABEL_30;
        result = (uint64_t)memcpy((void *)(v6 + 8 * v14 + 32), (const void *)(v12 + 32), 8 * v13);
        if (v13)
        {
          v16 = *(_QWORD *)(v6 + 16);
          v9 = __OFADD__(v16, v13);
          v17 = v16 + v13;
          if (v9)
            goto LABEL_31;
          *(_QWORD *)(v6 + 16) = v17;
        }
        goto LABEL_4;
      }
    }
    else if (v13)
    {
      goto LABEL_16;
    }
    if (v13)
      goto LABEL_29;
LABEL_4:
    result = swift_bridgeObjectRelease();
    if (v7 >= a2)
      return v6;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_2150550F4(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v4 = sub_215054F80(a1, a2);
  if (!v3)
  {
    v5 = v4;
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      v12 = MEMORY[0x24BEE4AF8];
      sub_215038BE4(0, v6, 0);
      v7 = 0;
      v2 = v12;
      v8 = *(_QWORD *)(v12 + 16);
      do
      {
        v9 = *(_QWORD *)(v5 + 8 * v7 + 32);
        v10 = *(_QWORD *)(v12 + 24);
        if (v8 >= v10 >> 1)
          sub_215038BE4((char *)(v10 > 1), v8 + 1, 1);
        ++v7;
        *(_QWORD *)(v12 + 16) = v8 + 1;
        *(_QWORD *)(v12 + 8 * v8++ + 32) = v9;
      }
      while (v6 != v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
  }
  return v2;
}

ValueMetadata *type metadata accessor for IntegerJSONColumnProcessor()
{
  return &type metadata for IntegerJSONColumnProcessor;
}

ValueMetadata *type metadata accessor for BooleanJSONColumnProcessor()
{
  return &type metadata for BooleanJSONColumnProcessor;
}

ValueMetadata *type metadata accessor for DoubleJSONColumnProcessor()
{
  return &type metadata for DoubleJSONColumnProcessor;
}

ValueMetadata *type metadata accessor for StringJSONColumnProcessor()
{
  return &type metadata for StringJSONColumnProcessor;
}

uint64_t destroy for DateJSONColumnProcessor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for DateJSONColumnProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DateJSONColumnProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DateJSONColumnProcessor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DateJSONColumnProcessor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DateJSONColumnProcessor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DateJSONColumnProcessor()
{
  return &type metadata for DateJSONColumnProcessor;
}

ValueMetadata *type metadata accessor for ArrayJSONColumnProcessor()
{
  return &type metadata for ArrayJSONColumnProcessor;
}

ValueMetadata *type metadata accessor for ObjectJSONColumnProcessor()
{
  return &type metadata for ObjectJSONColumnProcessor;
}

uint64_t *sub_2150554E8(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64[4];
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v2 = result[2];
  if (!v2)
    return result;
  v3 = v1;
  v4 = result;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = &qword_254DA7868;
  v63 = v2;
  while (1)
  {
    v7 = v4[v5 + 4];
    if (*(_QWORD *)(v7 + 16))
    {
      v8 = *v3;
      v9 = v3[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = sub_21502F840(v8, v9);
      if ((v11 & 1) != 0)
      {
        sub_21504679C(*(_QWORD *)(v7 + 56) + 32 * v10, (uint64_t)&v67);
      }
      else
      {
        v67 = 0u;
        v68 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v67 = 0u;
      v68 = 0u;
    }
    sub_215057C48((uint64_t)&v67, (uint64_t)&v65);
    if (v66)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CC8);
      sub_215057C90();
      if ((swift_dynamicCast() & 1) == 0)
      {
        if (!swift_dynamicCast())
        {
          sub_21504678C(&v65, v64);
          sub_215057CCC();
          swift_allocError();
          v61 = v60;
          *(_QWORD *)v60 = v5;
          v62 = v3[1];
          *(_QWORD *)(v60 + 8) = *v3;
          *(_QWORD *)(v60 + 16) = v62;
          *(_BYTE *)(v60 + 24) = 1;
          sub_21504679C((uint64_t)v64, v60 + 32);
          *(_BYTE *)(v61 + 64) = 0;
          swift_bridgeObjectRetain();
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v64);
          sub_215046750((uint64_t)&v67, &qword_254DA7868);
          return (uint64_t *)swift_bridgeObjectRelease();
        }
        v31 = v4;
        v32 = v6;
        v33 = v69;
        v34 = v3[4];
        result = (uint64_t *)swift_beginAccess();
        v35 = *(_QWORD *)(v34 + 16);
        if (!v35)
          goto LABEL_88;
        v36 = *(_QWORD *)(v35 + 8);
        v37 = v36 + 1;
        if (__OFADD__(v36, 1))
          goto LABEL_76;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v39 = v3[4];
        v40 = (uint64_t **)(v39 + 16);
        if (isUniquelyReferenced_nonNull_native)
        {
          swift_beginAccess();
          result = *v40;
          if (!*v40)
            goto LABEL_91;
          v41 = *result;
          if (*result < v37)
          {
            if (v41 + 0x4000000000000000 < 0)
              goto LABEL_81;
            v42 = 2 * v41;
            if (v42 <= v37)
              v43 = v37;
            else
              v43 = v42;
            sub_2150975F0((uint64_t)result, v43, (uint64_t *)v64);
            result = *(uint64_t **)(v39 + 16);
            if (!result)
              goto LABEL_93;
            if (result[1] < 0)
              goto LABEL_83;
            MEMORY[0x2199DC578]();
            *(_OWORD *)v40 = *(_OWORD *)v64;
          }
        }
        else
        {
          result = (uint64_t *)swift_beginAccess();
          v44 = *v40;
          if (!v44)
            goto LABEL_92;
          v45 = *v44;
          if (*v44 < v37)
          {
            if (v45 + 0x4000000000000000 < 0)
              goto LABEL_82;
            if (2 * v45 <= v37)
              v45 = v37;
            else
              v45 *= 2;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D438);
          v46 = swift_allocObject();
          sub_215096600((uint64_t)v44, v45, (uint64_t *)v64);
          *(_OWORD *)(v46 + 16) = *(_OWORD *)v64;
          swift_release();
          v3[4] = v46;
          v39 = v46;
        }
        result = (uint64_t *)swift_beginAccess();
        v47 = *(_QWORD **)(v39 + 16);
        if (!v47)
          goto LABEL_89;
        v48 = *v47 + 7;
        if (__OFADD__(*v47, 7))
          goto LABEL_77;
        v49 = v47 + 8;
        if (v48 < 0)
          v48 = *v47 + 14;
        v50 = v48 >> 3;
        v52 = v50 - 1;
        v51 = v50 < 1;
        v53 = v50 + 62;
        if (!v51)
          v53 = v52;
        *(_QWORD *)((char *)&v49[v47[1] + 8] + (v53 & 0xFFFFFFFFFFFFC0)) = v33;
        v54 = v47[1];
        v55 = v54 + 7;
        if (v54 >= 0)
          v55 = v47[1];
        v56 = v55 >> 3;
        v57 = v54 - (v55 & 0xFFFFFFFFFFFFFFF8);
        if (v57 >= 0)
          v58 = 1 << v57;
        else
          v58 = 0;
        *((_BYTE *)v49 + v56) |= v58;
        v27 = __OFADD__(v54, 1);
        v59 = v54 + 1;
        if (v27)
        {
          __break(1u);
          return (uint64_t *)swift_bridgeObjectRelease();
        }
        v47[1] = v59;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v65);
        v6 = v32;
        v4 = v31;
        v2 = v63;
        goto LABEL_3;
      }

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v65);
    }
    v12 = v3[4];
    result = (uint64_t *)swift_beginAccess();
    v13 = *(_QWORD *)(v12 + 16);
    if (!v13)
      goto LABEL_84;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v17 = v3[4];
    v18 = (uint64_t **)(v17 + 16);
    if (v16)
    {
      swift_beginAccess();
      result = *v18;
      if (!*v18)
        goto LABEL_86;
      v19 = *result;
      if (*result < v15)
      {
        if (v19 + 0x4000000000000000 < 0)
          goto LABEL_78;
        v20 = 2 * v19;
        if (v20 <= v15)
          v21 = v15;
        else
          v21 = v20;
        sub_2150975F0((uint64_t)result, v21, (uint64_t *)&v65);
        result = *(uint64_t **)(v17 + 16);
        if (!result)
          goto LABEL_90;
        if (result[1] < 0)
          goto LABEL_80;
        MEMORY[0x2199DC578]();
        *(_OWORD *)v18 = v65;
      }
    }
    else
    {
      result = (uint64_t *)swift_beginAccess();
      v22 = *v18;
      if (!v22)
        goto LABEL_87;
      v23 = *v22;
      if (*v22 < v15)
      {
        if (v23 + 0x4000000000000000 < 0)
          goto LABEL_79;
        if (2 * v23 <= v15)
          v23 = v15;
        else
          v23 *= 2;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D438);
      v24 = swift_allocObject();
      sub_215096600((uint64_t)v22, v23, (uint64_t *)&v65);
      *(_OWORD *)(v24 + 16) = v65;
      swift_release();
      v3[4] = v24;
      v17 = v24;
    }
    result = (uint64_t *)swift_beginAccess();
    v25 = *(_QWORD *)(v17 + 16);
    if (!v25)
      goto LABEL_85;
    v26 = *(_QWORD *)(v25 + 16);
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_74;
    *(_QWORD *)(v25 + 16) = v28;
    v29 = *(_QWORD *)(v25 + 8);
    v27 = __OFADD__(v29, 1);
    v30 = v29 + 1;
    if (v27)
      goto LABEL_75;
    *(_QWORD *)(v25 + 8) = v30;
LABEL_3:
    ++v5;
    sub_215046750((uint64_t)&v67, v6);
    if (v2 == v5)
      return (uint64_t *)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
  return result;
}

uint64_t *sub_215055ABC(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61[4];
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  char v66;

  v2 = result[2];
  if (!v2)
    return result;
  v3 = v1;
  v4 = result;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = &qword_254DA7868;
  v60 = v2;
  while (1)
  {
    v7 = v4[v5 + 4];
    if (*(_QWORD *)(v7 + 16))
    {
      v8 = *v3;
      v9 = v3[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = sub_21502F840(v8, v9);
      if ((v11 & 1) != 0)
      {
        sub_21504679C(*(_QWORD *)(v7 + 56) + 32 * v10, (uint64_t)&v64);
      }
      else
      {
        v64 = 0u;
        v65 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v64 = 0u;
      v65 = 0u;
    }
    sub_215057C48((uint64_t)&v64, (uint64_t)&v62);
    if (v63)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CC8);
      sub_215057C90();
      if ((swift_dynamicCast() & 1) == 0)
      {
        if (!swift_dynamicCast())
        {
          sub_21504678C(&v62, v61);
          sub_215057CCC();
          swift_allocError();
          v58 = v57;
          *(_QWORD *)v57 = v5;
          v59 = v3[1];
          *(_QWORD *)(v57 + 8) = *v3;
          *(_QWORD *)(v57 + 16) = v59;
          *(_BYTE *)(v57 + 24) = 1;
          sub_21504679C((uint64_t)v61, v57 + 32);
          *(_BYTE *)(v58 + 64) = 0;
          swift_bridgeObjectRetain();
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
          sub_215046750((uint64_t)&v64, &qword_254DA7868);
          return (uint64_t *)swift_bridgeObjectRelease();
        }
        v31 = v4;
        v32 = v6;
        v33 = v66;
        v34 = v3[4];
        result = (uint64_t *)swift_beginAccess();
        v35 = *(_QWORD *)(v34 + 16);
        if (!v35)
          goto LABEL_86;
        v36 = *(_QWORD *)(v35 + 8);
        v37 = v36 + 1;
        if (__OFADD__(v36, 1))
          goto LABEL_74;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v39 = v3[4];
        v40 = (uint64_t **)(v39 + 16);
        if (isUniquelyReferenced_nonNull_native)
        {
          swift_beginAccess();
          result = *v40;
          if (!*v40)
            goto LABEL_89;
          v41 = *result;
          if (*result < v37)
          {
            if (v41 + 0x4000000000000000 < 0)
              goto LABEL_79;
            v42 = 2 * v41;
            if (v42 <= v37)
              v43 = v37;
            else
              v43 = v42;
            sub_215097C2C((uint64_t)result, v43, (uint64_t *)v61);
            result = *(uint64_t **)(v39 + 16);
            if (!result)
              goto LABEL_91;
            if (result[1] < 0)
              goto LABEL_81;
            MEMORY[0x2199DC578]();
            *(_OWORD *)v40 = *(_OWORD *)v61;
          }
        }
        else
        {
          result = (uint64_t *)swift_beginAccess();
          v44 = *v40;
          if (!v44)
            goto LABEL_90;
          v45 = *v44;
          if (*v44 < v37)
          {
            if (v45 + 0x4000000000000000 < 0)
              goto LABEL_80;
            if (2 * v45 <= v37)
              v45 = v37;
            else
              v45 *= 2;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D188);
          v46 = swift_allocObject();
          sub_215096C70((uint64_t)v44, v45, (uint64_t *)v61);
          *(_OWORD *)(v46 + 16) = *(_OWORD *)v61;
          swift_release();
          v3[4] = v46;
          v39 = v46;
        }
        result = (uint64_t *)swift_beginAccess();
        v47 = *(_QWORD **)(v39 + 16);
        if (!v47)
          goto LABEL_87;
        v48 = *v47 + 7;
        if (__OFADD__(*v47, 7))
          goto LABEL_75;
        v49 = v47 + 8;
        if (v48 < 0)
          v48 = *v47 + 14;
        v50 = v48 >> 3;
        v52 = v50 - 1;
        v51 = v50 < 1;
        v53 = v50 + 62;
        if (!v51)
          v53 = v52;
        v54 = v47[1];
        *((_BYTE *)v49 + v54 + (v53 & 0xFFFFFFFFFFFFC0) + 64) = v33;
        v55 = v54 - (v53 & 0xFFFFFFFFFFFFFFF8);
        if (v55 >= 0)
          v56 = 1 << v55;
        else
          v56 = 0;
        *((_BYTE *)v49 + v54 / 8) |= v56;
        if (__OFADD__(v54, 1))
        {
          __break(1u);
          return (uint64_t *)swift_bridgeObjectRelease();
        }
        v47[1] = v54 + 1;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v62);
        v6 = v32;
        v4 = v31;
        v2 = v60;
        goto LABEL_3;
      }

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v62);
    }
    v12 = v3[4];
    result = (uint64_t *)swift_beginAccess();
    v13 = *(_QWORD *)(v12 + 16);
    if (!v13)
      goto LABEL_82;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v17 = v3[4];
    v18 = (uint64_t **)(v17 + 16);
    if (v16)
    {
      swift_beginAccess();
      result = *v18;
      if (!*v18)
        goto LABEL_84;
      v19 = *result;
      if (*result < v15)
      {
        if (v19 + 0x4000000000000000 < 0)
          goto LABEL_76;
        v20 = 2 * v19;
        if (v20 <= v15)
          v21 = v15;
        else
          v21 = v20;
        sub_215097C2C((uint64_t)result, v21, (uint64_t *)&v62);
        result = *(uint64_t **)(v17 + 16);
        if (!result)
          goto LABEL_88;
        if (result[1] < 0)
          goto LABEL_78;
        MEMORY[0x2199DC578]();
        *(_OWORD *)v18 = v62;
      }
    }
    else
    {
      result = (uint64_t *)swift_beginAccess();
      v22 = *v18;
      if (!v22)
        goto LABEL_85;
      v23 = *v22;
      if (*v22 < v15)
      {
        if (v23 + 0x4000000000000000 < 0)
          goto LABEL_77;
        if (2 * v23 <= v15)
          v23 = v15;
        else
          v23 *= 2;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D188);
      v24 = swift_allocObject();
      sub_215096C70((uint64_t)v22, v23, (uint64_t *)&v62);
      *(_OWORD *)(v24 + 16) = v62;
      swift_release();
      v3[4] = v24;
      v17 = v24;
    }
    result = (uint64_t *)swift_beginAccess();
    v25 = *(_QWORD *)(v17 + 16);
    if (!v25)
      goto LABEL_83;
    v26 = *(_QWORD *)(v25 + 16);
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_72;
    *(_QWORD *)(v25 + 16) = v28;
    v29 = *(_QWORD *)(v25 + 8);
    v27 = __OFADD__(v29, 1);
    v30 = v29 + 1;
    if (v27)
      goto LABEL_73;
    *(_QWORD *)(v25 + 8) = v30;
LABEL_3:
    ++v5;
    sub_215046750((uint64_t)&v64, v6);
    if (v2 == v5)
      return (uint64_t *)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
  return result;
}

uint64_t *sub_21505608C(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57[5];
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;

  v2 = result[2];
  if (!v2)
    return result;
  v3 = v1;
  v4 = result;
  swift_bridgeObjectRetain();
  v5 = 0;
  while (1)
  {
    v6 = v4[v5 + 4];
    if (*(_QWORD *)(v6 + 16))
    {
      v7 = *v3;
      v8 = v3[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_21502F840(v7, v8);
      if ((v10 & 1) != 0)
      {
        sub_21504679C(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v61);
      }
      else
      {
        v61 = 0u;
        v62 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v61 = 0u;
      v62 = 0u;
    }
    sub_215057C48((uint64_t)&v61, (uint64_t)&v59);
    if (v60)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CC8);
      sub_215057C90();
      if ((swift_dynamicCast() & 1) == 0)
      {
        if (!swift_dynamicCast())
        {
          sub_21504678C(&v59, v57);
          sub_215057CCC();
          swift_allocError();
          v55 = v54;
          *(_QWORD *)v54 = v5;
          v56 = v3[1];
          *(_QWORD *)(v54 + 8) = *v3;
          *(_QWORD *)(v54 + 16) = v56;
          *(_BYTE *)(v54 + 24) = 2;
          sub_21504679C((uint64_t)v57, v54 + 32);
          *(_BYTE *)(v55 + 64) = 0;
          swift_bridgeObjectRetain();
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
          sub_215046750((uint64_t)&v61, &qword_254DA7868);
          return (uint64_t *)swift_bridgeObjectRelease();
        }
        v30 = v58;
        v31 = v3[4];
        result = (uint64_t *)swift_beginAccess();
        v32 = *(_QWORD *)(v31 + 16);
        if (!v32)
          goto LABEL_86;
        v33 = *(_QWORD *)(v32 + 8);
        v34 = v33 + 1;
        if (__OFADD__(v33, 1))
          goto LABEL_74;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v36 = v3[4];
        v37 = (uint64_t **)(v36 + 16);
        if (isUniquelyReferenced_nonNull_native)
        {
          swift_beginAccess();
          result = *v37;
          if (!*v37)
            goto LABEL_89;
          v38 = *result;
          if (*result < v34)
          {
            if (v38 + 0x4000000000000000 < 0)
              goto LABEL_79;
            v39 = 2 * v38;
            if (v39 <= v34)
              v40 = v34;
            else
              v40 = v39;
            sub_2150975F0((uint64_t)result, v40, (uint64_t *)v57);
            result = *(uint64_t **)(v36 + 16);
            if (!result)
              goto LABEL_91;
            if (result[1] < 0)
              goto LABEL_81;
            MEMORY[0x2199DC578]();
            *(_OWORD *)v37 = *(_OWORD *)v57;
          }
        }
        else
        {
          result = (uint64_t *)swift_beginAccess();
          v41 = *v37;
          if (!v41)
            goto LABEL_90;
          v42 = *v41;
          if (*v41 < v34)
          {
            if (v42 + 0x4000000000000000 < 0)
              goto LABEL_80;
            if (2 * v42 <= v34)
              v42 = v34;
            else
              v42 *= 2;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D430);
          v43 = swift_allocObject();
          sub_215096790((uint64_t)v41, v42, (uint64_t *)v57);
          *(_OWORD *)(v43 + 16) = *(_OWORD *)v57;
          swift_release();
          v3[4] = v43;
          v36 = v43;
        }
        result = (uint64_t *)swift_beginAccess();
        v44 = *(_QWORD **)(v36 + 16);
        if (!v44)
          goto LABEL_87;
        v45 = *v44 + 7;
        if (__OFADD__(*v44, 7))
          goto LABEL_75;
        v46 = v44 + 8;
        if (v45 < 0)
          v45 = *v44 + 14;
        v47 = v45 >> 3;
        v49 = v47 - 1;
        v48 = v47 < 1;
        v50 = v47 + 62;
        if (!v48)
          v50 = v49;
        v51 = v44[1];
        *(_QWORD *)((char *)&v46[v51 + 8] + (v50 & 0xFFFFFFFFFFFFC0)) = v30;
        v52 = v51 - (v50 & 0xFFFFFFFFFFFFFFF8);
        if (v52 >= 0)
          v53 = 1 << v52;
        else
          v53 = 0;
        *((_BYTE *)v46 + v51 / 8) |= v53;
        if (__OFADD__(v51, 1))
        {
          __break(1u);
          return (uint64_t *)swift_bridgeObjectRelease();
        }
        v44[1] = v51 + 1;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v59);
        goto LABEL_3;
      }

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v59);
    }
    v11 = v3[4];
    result = (uint64_t *)swift_beginAccess();
    v12 = *(_QWORD *)(v11 + 16);
    if (!v12)
      goto LABEL_82;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    v15 = swift_isUniquelyReferenced_nonNull_native();
    v16 = v3[4];
    v17 = (uint64_t **)(v16 + 16);
    if (v15)
    {
      swift_beginAccess();
      result = *v17;
      if (!*v17)
        goto LABEL_84;
      v18 = *result;
      if (*result < v14)
      {
        if (v18 + 0x4000000000000000 < 0)
          goto LABEL_76;
        v19 = 2 * v18;
        if (v19 <= v14)
          v20 = v14;
        else
          v20 = v19;
        sub_2150975F0((uint64_t)result, v20, (uint64_t *)&v59);
        result = *(uint64_t **)(v16 + 16);
        if (!result)
          goto LABEL_88;
        if (result[1] < 0)
          goto LABEL_78;
        MEMORY[0x2199DC578]();
        *(_OWORD *)v17 = v59;
      }
    }
    else
    {
      result = (uint64_t *)swift_beginAccess();
      v21 = *v17;
      if (!v21)
        goto LABEL_85;
      v22 = *v21;
      if (*v21 < v14)
      {
        if (v22 + 0x4000000000000000 < 0)
          goto LABEL_77;
        if (2 * v22 <= v14)
          v22 = v14;
        else
          v22 *= 2;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D430);
      v23 = swift_allocObject();
      sub_215096790((uint64_t)v21, v22, (uint64_t *)&v59);
      *(_OWORD *)(v23 + 16) = v59;
      swift_release();
      v3[4] = v23;
      v16 = v23;
    }
    result = (uint64_t *)swift_beginAccess();
    v24 = *(_QWORD *)(v16 + 16);
    if (!v24)
      goto LABEL_83;
    v25 = *(_QWORD *)(v24 + 16);
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_72;
    *(_QWORD *)(v24 + 16) = v27;
    v28 = *(_QWORD *)(v24 + 8);
    v26 = __OFADD__(v28, 1);
    v29 = v28 + 1;
    if (v26)
      goto LABEL_73;
    *(_QWORD *)(v24 + 8) = v29;
LABEL_3:
    ++v5;
    sub_215046750((uint64_t)&v61, &qword_254DA7868);
    if (v2 == v5)
      return (uint64_t *)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
  return result;
}

uint64_t sub_21505664C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = v2;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = v1;
    v6 = result;
    swift_bridgeObjectRetain();
    for (i = 0; i != v4; ++i)
    {
      v8 = *(_QWORD *)(v6 + 8 * i + 32);
      if (*(_QWORD *)(v8 + 16))
      {
        v9 = *v5;
        v10 = v5[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v11 = sub_21502F840(v9, v10);
        if ((v12 & 1) != 0)
        {
          sub_21504679C(*(_QWORD *)(v8 + 56) + 32 * v11, (uint64_t)&v13);
        }
        else
        {
          v13 = 0u;
          v14 = 0u;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = 0u;
        v14 = 0u;
      }
      sub_21505748C((uint64_t)&v13, i);
      sub_215046750((uint64_t)&v13, &qword_254DA7868);
      if (v3)
        break;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_215056754(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  _OWORD v62[2];
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v2 = result[2];
  if (!v2)
    return result;
  v3 = v1;
  v4 = result;
  swift_bridgeObjectRetain();
  v5 = 0;
  v67 = v2;
  while (1)
  {
    v6 = v4[v5 + 4];
    if (*(_QWORD *)(v6 + 16))
    {
      v7 = *v3;
      v8 = v3[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_21502F840(v7, v8);
      if ((v10 & 1) != 0)
      {
        sub_21504679C(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v65);
      }
      else
      {
        v65 = 0u;
        v66 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v65 = 0u;
      v66 = 0u;
    }
    sub_215057C48((uint64_t)&v65, (uint64_t)&v63);
    if (v64)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CC8);
      sub_215057C90();
      if ((swift_dynamicCast() & 1) == 0)
      {
        if (!swift_dynamicCast())
        {
          sub_21504678C(&v63, v62);
          sub_215057CCC();
          swift_allocError();
          v59 = v58;
          *(_QWORD *)v58 = v5;
          v60 = v3[1];
          *(_QWORD *)(v58 + 8) = *v3;
          *(_QWORD *)(v58 + 16) = v60;
          *(_BYTE *)(v58 + 24) = 4;
          sub_21504679C((uint64_t)v62, v58 + 32);
          *(_BYTE *)(v59 + 64) = 0;
          swift_bridgeObjectRetain();
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
          sub_215046750((uint64_t)&v65, &qword_254DA7868);
          return (uint64_t *)swift_bridgeObjectRelease();
        }
        v30 = v62[0];
        v31 = v3[4];
        result = (uint64_t *)swift_beginAccess();
        v32 = *(_QWORD *)(v31 + 16);
        if (!v32)
          goto LABEL_82;
        v33 = *(_QWORD *)(v32 + 8);
        v34 = v33 + 1;
        if (__OFADD__(v33, 1))
          goto LABEL_72;
        v35 = v4;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v37 = v3[4];
        v38 = (uint64_t **)(v37 + 16);
        if (isUniquelyReferenced_nonNull_native)
        {
          swift_beginAccess();
          result = *v38;
          if (!*v38)
            goto LABEL_84;
          v39 = *result;
          if (*result < v34)
          {
            if (v39 + 0x4000000000000000 < 0)
              goto LABEL_76;
            v40 = 2 * v39;
            if (v40 <= v34)
              v41 = v34;
            else
              v41 = v40;
            sub_2150977DC((uint64_t)result, v41, (uint64_t *)&v61);
            sub_2150983B8(*(_QWORD **)(v37 + 16));
            *(_OWORD *)(v37 + 16) = v61;
          }
        }
        else
        {
          result = (uint64_t *)swift_beginAccess();
          v42 = *v38;
          if (!v42)
            goto LABEL_85;
          v43 = *v42;
          if (*v42 < v34)
          {
            if (v43 + 0x4000000000000000 < 0)
              goto LABEL_77;
            if (2 * v43 <= v34)
              v43 = v34;
            else
              v43 *= 2;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D428);
          v44 = swift_allocObject();
          sub_21509691C((uint64_t)v42, v43, (uint64_t *)&v61);
          *(_OWORD *)(v44 + 16) = v61;
          swift_release();
          v3[4] = v44;
          v37 = v44;
        }
        result = (uint64_t *)swift_beginAccess();
        v45 = *(_QWORD **)(v37 + 16);
        if (!v45)
          goto LABEL_83;
        v46 = *v45 + 7;
        if (__OFADD__(*v45, 7))
          goto LABEL_73;
        v47 = v45 + 8;
        if (v46 < 0)
          v46 = *v45 + 14;
        v48 = v46 >> 3;
        v50 = v48 - 1;
        v49 = v48 < 1;
        v51 = v48 + 62;
        if (!v49)
          v51 = v50;
        *(_OWORD *)((char *)&v47[2 * v45[1] + 8] + (v51 & 0xFFFFFFFFFFFFFFC0)) = v30;
        v52 = v45[1];
        v53 = v52 + 7;
        if (v52 >= 0)
          v53 = v45[1];
        v54 = v53 >> 3;
        v55 = v52 - (v53 & 0xFFFFFFFFFFFFFFF8);
        if (v55 >= 0)
          v56 = 1 << v55;
        else
          v56 = 0;
        *((_BYTE *)v47 + v54) |= v56;
        v26 = __OFADD__(v52, 1);
        v57 = v52 + 1;
        if (v26)
        {
          __break(1u);
          return (uint64_t *)swift_bridgeObjectRelease();
        }
        v4 = v35;
        v45[1] = v57;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v63);
        v2 = v67;
        goto LABEL_3;
      }

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v63);
    }
    v11 = v3[4];
    result = (uint64_t *)swift_beginAccess();
    v12 = *(_QWORD *)(v11 + 16);
    if (!v12)
      goto LABEL_78;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    v15 = swift_isUniquelyReferenced_nonNull_native();
    v16 = v3[4];
    v17 = (uint64_t **)(v16 + 16);
    if (v15)
    {
      swift_beginAccess();
      result = *v17;
      if (!*v17)
        goto LABEL_80;
      v18 = *result;
      if (*result < v14)
      {
        if (v18 + 0x4000000000000000 < 0)
          goto LABEL_74;
        v19 = 2 * v18;
        if (v19 <= v14)
          v20 = v14;
        else
          v20 = v19;
        sub_2150977DC((uint64_t)result, v20, (uint64_t *)&v63);
        sub_2150983B8(*(_QWORD **)(v16 + 16));
        *(_OWORD *)(v16 + 16) = v63;
      }
    }
    else
    {
      result = (uint64_t *)swift_beginAccess();
      v21 = *v17;
      if (!v21)
        goto LABEL_81;
      v22 = *v21;
      if (*v21 < v14)
      {
        if (v22 + 0x4000000000000000 < 0)
          goto LABEL_75;
        if (2 * v22 <= v14)
          v22 = v14;
        else
          v22 *= 2;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D428);
      v23 = swift_allocObject();
      sub_21509691C((uint64_t)v21, v22, (uint64_t *)&v63);
      *(_OWORD *)(v23 + 16) = v63;
      swift_release();
      v3[4] = v23;
      v16 = v23;
    }
    result = (uint64_t *)swift_beginAccess();
    v24 = *(_QWORD *)(v16 + 16);
    if (!v24)
      goto LABEL_79;
    v25 = *(_QWORD *)(v24 + 16);
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_70;
    *(_QWORD *)(v24 + 16) = v27;
    v28 = *(_QWORD *)(v24 + 8);
    v26 = __OFADD__(v28, 1);
    v29 = v28 + 1;
    if (v26)
      goto LABEL_71;
    *(_QWORD *)(v24 + 8) = v29;
LABEL_3:
    ++v5;
    sub_215046750((uint64_t)&v65, &qword_254DA7868);
    if (v2 == v5)
      return (uint64_t *)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

uint64_t sub_215056D08(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = v2;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = v1;
    v6 = result;
    swift_bridgeObjectRetain();
    for (i = 0; i != v4; ++i)
    {
      v8 = *(_QWORD *)(v6 + 8 * i + 32);
      if (*(_QWORD *)(v8 + 16))
      {
        v9 = *v5;
        v10 = v5[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v11 = sub_21502F840(v9, v10);
        if ((v12 & 1) != 0)
        {
          sub_21504679C(*(_QWORD *)(v8 + 56) + 32 * v11, (uint64_t)&v13);
        }
        else
        {
          v13 = 0u;
          v14 = 0u;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = 0u;
        v14 = 0u;
      }
      sub_2150578F4((uint64_t)&v13, i);
      sub_215046750((uint64_t)&v13, &qword_254DA7868);
      if (v3)
        break;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_215056E10(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  int64_t v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;

  v2 = result[2];
  if (!v2)
    return result;
  v3 = v1;
  v56 = result + 4;
  v57 = v1 + 4;
  swift_bridgeObjectRetain();
  v4 = 0;
  v53 = v2;
  v54 = v1;
  while (1)
  {
    v6 = v56[v4];
    if (*(_QWORD *)(v6 + 16))
    {
      v8 = *v3;
      v7 = v3[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_21502F840(v8, v7);
      if ((v10 & 1) != 0)
      {
        sub_21504679C(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v66);
      }
      else
      {
        v66 = 0u;
        v67 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v66 = 0u;
      v67 = 0u;
    }
    sub_215057C48((uint64_t)&v66, (uint64_t)&v64);
    if (v65)
      break;
LABEL_14:
    v11 = *v57;
    result = (uint64_t *)swift_beginAccess();
    v12 = *(_QWORD *)(v11 + 16);
    if (!v12)
      goto LABEL_76;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v57;
    v17 = (uint64_t **)(*v57 + 16);
    if (isUniquelyReferenced_nonNull_native)
    {
      swift_beginAccess();
      result = *v17;
      if (!*v17)
        goto LABEL_78;
      v18 = *result;
      if (*result < v14)
      {
        if (v18 + 0x4000000000000000 < 0)
          goto LABEL_74;
        v19 = 2 * v18;
        if (v19 <= v14)
          v20 = v14;
        else
          v20 = v19;
        sub_2150977D8((uint64_t)result, v20, (uint64_t *)&v64);
        sub_21509871C(*(_QWORD **)(v16 + 16), *(_QWORD *)(v16 + 24));
        *(_OWORD *)(v16 + 16) = v64;
      }
    }
    else
    {
      result = (uint64_t *)swift_beginAccess();
      v21 = *v17;
      if (!v21)
        goto LABEL_79;
      v22 = *v21;
      if (*v21 < v14)
      {
        if (v22 + 0x4000000000000000 < 0)
          goto LABEL_75;
        if (2 * v22 <= v14)
          v22 = v14;
        else
          v22 *= 2;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA77A0);
      v23 = swift_allocObject();
      sub_21509678C(&v64, v21, *(_QWORD *)(v16 + 24), v22);
      *(_OWORD *)(v23 + 16) = v64;
      swift_release();
      *v57 = v23;
      v16 = v23;
    }
    result = (uint64_t *)swift_beginAccess();
    v24 = *(_QWORD *)(v16 + 16);
    if (!v24)
      goto LABEL_77;
    v25 = *(_QWORD *)(v24 + 16);
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_71;
    *(_QWORD *)(v24 + 16) = v27;
    v28 = *(_QWORD *)(v24 + 8);
    v26 = __OFADD__(v28, 1);
    v29 = v28 + 1;
    if (v26)
      goto LABEL_72;
    *(_QWORD *)(v24 + 8) = v29;
LABEL_4:
    ++v4;
    sub_215046750((uint64_t)&v66, &qword_254DA7868);
    if (v4 == v2)
      return (uint64_t *)swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CC8);
  v68 = sub_215057C90();
  if ((swift_dynamicCast() & 1) != 0)
  {

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v64);
    goto LABEL_14;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CD8);
  if (!swift_dynamicCast())
  {
    sub_21504678C(&v64, v62);
    sub_215057CCC();
    swift_allocError();
    v51 = v50;
    *(_QWORD *)v50 = v4;
    v52 = v3[1];
    *(_QWORD *)(v50 + 8) = *v3;
    *(_QWORD *)(v50 + 16) = v52;
    *(_BYTE *)(v50 + 24) = 6;
    sub_21504679C((uint64_t)v62, v50 + 32);
    *(_BYTE *)(v51 + 64) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
    sub_215046750((uint64_t)&v66, &qword_254DA7868);
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  v55 = v4;
  v30 = v63;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CE8);
  result = (uint64_t *)sub_215130328();
  v31 = result;
  v32 = 0;
  v33 = 1 << *(_BYTE *)(v30 + 32);
  v35 = v30 + 64;
  v34 = *(_QWORD *)(v30 + 64);
  if (v33 < 64)
    v36 = ~(-1 << v33);
  else
    v36 = -1;
  v37 = v36 & v34;
  v58 = (unint64_t)(v33 + 63) >> 6;
  v38 = result + 8;
  if ((v36 & v34) != 0)
  {
LABEL_40:
    v39 = __clz(__rbit64(v37));
    v37 &= v37 - 1;
    v40 = v39 | (v32 << 6);
    goto LABEL_57;
  }
  while (2)
  {
    v41 = v32 + 1;
    if (__OFADD__(v32, 1))
      goto LABEL_69;
    if (v41 >= v58)
      goto LABEL_3;
    v42 = *(_QWORD *)(v35 + 8 * v41);
    ++v32;
    if (v42)
      goto LABEL_56;
    v32 = v41 + 1;
    if (v41 + 1 >= v58)
      goto LABEL_3;
    v42 = *(_QWORD *)(v35 + 8 * v32);
    if (v42)
      goto LABEL_56;
    v32 = v41 + 2;
    if (v41 + 2 >= v58)
      goto LABEL_3;
    v42 = *(_QWORD *)(v35 + 8 * v32);
    if (v42)
      goto LABEL_56;
    v32 = v41 + 3;
    if (v41 + 3 >= v58)
      goto LABEL_3;
    v42 = *(_QWORD *)(v35 + 8 * v32);
    if (v42)
    {
LABEL_56:
      v37 = (v42 - 1) & v42;
      v40 = __clz(__rbit64(v42)) + (v32 << 6);
LABEL_57:
      v44 = (uint64_t *)(*(_QWORD *)(v30 + 48) + 16 * v40);
      v46 = *v44;
      v45 = v44[1];
      sub_215057C48(*(_QWORD *)(v30 + 56) + 32 * v40, (uint64_t)v62);
      sub_215057C48((uint64_t)v62, (uint64_t)&v60);
      if (*((_QWORD *)&v61 + 1))
      {
        swift_bridgeObjectRetain();
        if ((swift_dynamicCast() & 1) != 0)
        {

          v60 = 0u;
          v61 = 0u;
LABEL_62:
          sub_215046750((uint64_t)v62, &qword_254DA7868);
          *(_QWORD *)((char *)v38 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
          v47 = (_QWORD *)(v31[6] + 16 * v40);
          *v47 = v46;
          v47[1] = v45;
          result = (uint64_t *)sub_215057D10((uint64_t)&v60, v31[7] + 32 * v40);
          v48 = v31[2];
          v26 = __OFADD__(v48, 1);
          v49 = v48 + 1;
          if (v26)
          {
            __break(1u);
LABEL_69:
            __break(1u);
            goto LABEL_70;
          }
          v31[2] = v49;
          if (v37)
            goto LABEL_40;
          continue;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_215046750((uint64_t)&v60, &qword_254DA7868);
      }
      sub_215057C48((uint64_t)v62, (uint64_t)&v60);
      goto LABEL_62;
    }
    break;
  }
  v43 = v41 + 4;
  if (v43 >= v58)
  {
LABEL_3:
    swift_bridgeObjectRelease();
    v5 = swift_bridgeObjectRetain();
    sub_2150EE778(v5);
    swift_release_n();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v64);
    v3 = v54;
    v4 = v55;
    v2 = v53;
    goto LABEL_4;
  }
  v42 = *(_QWORD *)(v35 + 8 * v43);
  if (v42)
  {
    v32 = v43;
    goto LABEL_56;
  }
  while (1)
  {
    v32 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v32 >= v58)
      goto LABEL_3;
    v42 = *(_QWORD *)(v35 + 8 * v32);
    ++v43;
    if (v42)
      goto LABEL_56;
  }
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

uint64_t sub_21505742C@<X0>(_QWORD *a1@<X8>)
{
  return sub_215057BE0(&qword_253F0D450, a1);
}

uint64_t *sub_215057438(uint64_t *a1)
{
  return sub_2150554E8(a1);
}

uint64_t sub_21505744C@<X0>(_QWORD *a1@<X8>)
{
  return sub_215057BE0(&qword_253F0D1A8, a1);
}

uint64_t *sub_215057458(uint64_t *a1)
{
  return sub_215055ABC(a1);
}

uint64_t sub_21505746C@<X0>(_QWORD *a1@<X8>)
{
  return sub_215057BE0(&qword_253F0D448, a1);
}

uint64_t *sub_215057478(uint64_t *a1)
{
  return sub_21505608C(a1);
}

uint64_t sub_21505748C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  uint64_t v35;

  v3 = v2;
  v32 = a2;
  v5 = sub_21512F740();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v31 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v31 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v31 - v19;
  sub_215057C48(a1, (uint64_t)&v34);
  if (!v35)
    goto LABEL_4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CC8);
  sub_215057C90();
  if (swift_dynamicCast())
  {

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v34);
LABEL_4:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v20, 1, 1, v5);
    sub_2150EE438((uint64_t)v20);
    return sub_215046750((uint64_t)v20, qword_253F0D218);
  }
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      v22 = v33[0];
      sub_2150C0AA4(*(uint64_t *)&v33[0], *((uint64_t *)&v33[0] + 1), v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v18, 1, v5) != 1)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v18, v5);
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v20, v9, v5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
        sub_2150EE438((uint64_t)v20);
        sub_215046750((uint64_t)v20, qword_253F0D218);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v34);
      }
      sub_215046750((uint64_t)v18, qword_253F0D218);
      sub_215057CCC();
      swift_allocError();
      v24 = *v3;
      v23 = v3[1];
      *(_QWORD *)v25 = v32;
      *(_QWORD *)(v25 + 8) = v24;
      *(_QWORD *)(v25 + 16) = v23;
      *(_BYTE *)(v25 + 24) = 3;
      *(_OWORD *)(v25 + 32) = v22;
      *(_BYTE *)(v25 + 64) = 2;
      swift_bridgeObjectRetain();
      swift_willThrow();
      v26 = &v34;
    }
    else
    {
      sub_21504678C(&v34, v33);
      sub_215057CCC();
      swift_allocError();
      v28 = v27;
      *(_QWORD *)v27 = v32;
      v29 = *v3;
      v30 = v3[1];
      *(_QWORD *)(v27 + 8) = v29;
      *(_QWORD *)(v27 + 16) = v30;
      *(_BYTE *)(v27 + 24) = 3;
      sub_21504679C((uint64_t)v33, v27 + 32);
      *(_BYTE *)(v28 + 64) = 0;
      swift_bridgeObjectRetain();
      swift_willThrow();
      v26 = v33;
    }
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v14, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v20, v12, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  sub_2150EE438((uint64_t)v20);
  sub_215046750((uint64_t)v20, qword_253F0D218);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v34);
}

uint64_t sub_215057868@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v1[5];
  v3 = v1[6];
  v5 = v1[7];
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1A0);
  a1[4] = &off_24D2A4440;
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v5;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_2150578C0(uint64_t a1)
{
  return sub_21505664C(a1);
}

uint64_t sub_2150578D4@<X0>(_QWORD *a1@<X8>)
{
  return sub_215057BE0(&qword_253F0D440, a1);
}

uint64_t *sub_2150578E0(uint64_t *a1)
{
  return sub_215056754(a1);
}

uint64_t sub_2150578F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[32];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  sub_215057C48(a1, (uint64_t)&v22);
  if (!v23)
    return sub_2150EE5A0(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CC8);
  sub_215057C90();
  if (swift_dynamicCast())
  {

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v22);
    return sub_2150EE5A0(0);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CF8);
  if (swift_dynamicCast())
  {
    v5 = v24;
    v6 = *(_QWORD *)(v24 + 16);
    if (v6)
    {
      v19 = MEMORY[0x24BEE4AF8];
      sub_215038E4C(0, v6, 0);
      v7 = v5 + 32;
      while (1)
      {
        sub_215057C48(v7, (uint64_t)v18);
        sub_215057C48((uint64_t)v18, (uint64_t)&v20);
        if (!*((_QWORD *)&v21 + 1))
          break;
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_12;

        v20 = 0u;
        v21 = 0u;
LABEL_13:
        sub_215046750((uint64_t)v18, &qword_254DA7868);
        v8 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_215038E4C(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v19;
        }
        v10 = *(_QWORD *)(v8 + 16);
        v9 = *(_QWORD *)(v8 + 24);
        if (v10 >= v9 >> 1)
        {
          sub_215038E4C((_QWORD *)(v9 > 1), v10 + 1, 1);
          v8 = v19;
        }
        *(_QWORD *)(v8 + 16) = v10 + 1;
        sub_215057D10((uint64_t)&v20, v8 + 32 * v10 + 32);
        v7 += 32;
        if (!--v6)
        {
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
      sub_215046750((uint64_t)&v20, &qword_254DA7868);
LABEL_12:
      sub_215057C48((uint64_t)v18, (uint64_t)&v20);
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
LABEL_21:
    v16 = swift_bridgeObjectRetain();
    sub_2150EE5A0(v16);
    swift_bridgeObjectRelease_n();
    v15 = &v22;
  }
  else
  {
    sub_21504678C(&v22, &v20);
    sub_215057CCC();
    swift_allocError();
    v12 = v11;
    *(_QWORD *)v11 = a2;
    v13 = *v2;
    v14 = v2[1];
    *(_QWORD *)(v11 + 8) = v13;
    *(_QWORD *)(v11 + 16) = v14;
    *(_BYTE *)(v11 + 24) = 5;
    sub_21504679C((uint64_t)&v20, v11 + 32);
    *(_BYTE *)(v12 + 64) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    v15 = &v20;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
}

uint64_t sub_215057BB4@<X0>(_QWORD *a1@<X8>)
{
  return sub_215057BE0(&qword_254DA7D00, a1);
}

uint64_t sub_215057BC0(uint64_t a1)
{
  return sub_215056D08(a1);
}

uint64_t sub_215057BD4@<X0>(_QWORD *a1@<X8>)
{
  return sub_215057BE0(&qword_254DA7CF0, a1);
}

uint64_t sub_215057BE0@<X0>(uint64_t *a1@<X2>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[2];
  v4 = v2[3];
  v6 = v2[4];
  a2[3] = __swift_instantiateConcreteTypeFromMangledName(a1);
  a2[4] = &off_24D2A4440;
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v6;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t *sub_215057C34(uint64_t *a1)
{
  return sub_215056E10(a1);
}

uint64_t sub_215057C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7868);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_215057C90()
{
  unint64_t result;

  result = qword_254DA7CD0;
  if (!qword_254DA7CD0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254DA7CD0);
  }
  return result;
}

unint64_t sub_215057CCC()
{
  unint64_t result;

  result = qword_254DA7CE0;
  if (!qword_254DA7CE0)
  {
    result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for JSONReadingError, &type metadata for JSONReadingError);
    atomic_store(result, (unint64_t *)&qword_254DA7CE0);
  }
  return result;
}

uint64_t sub_215057D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7868);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_215057D58(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v5 = result;
      v6 = (_QWORD *)sub_21512FCF8();
      v7 = v6;
      v6[2] = a3;
      v6[4] = v5;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = v5;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = v5;
            *v9 = a2;
            swift_bridgeObjectRetain();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    return v7;
  }
  return result;
}

_QWORD *sub_215057E04(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v5 = result;
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D020);
      v6 = (_QWORD *)sub_21512FCF8();
      v7 = v6;
      v6[2] = a3;
      v6[4] = v5;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = v5;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = v5;
            *v9 = a2;
            swift_bridgeObjectRetain();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    return v7;
  }
  return result;
}

uint64_t sub_215057EB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = result;
    if (a4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D38);
      v8 = (_QWORD *)sub_21512FCF8();
      v9 = v8;
      v8[2] = a4;
      v8[4] = v7;
      v8[5] = a2;
      v8[6] = a3;
      if (a4 != 1)
      {
        v8[7] = v7;
        v8[8] = a2;
        v8[9] = a3;
        v10 = a4 - 2;
        if (v10)
        {
          v11 = v8 + 12;
          do
          {
            sub_2150462EC(v7);
            *(v11 - 2) = v7;
            *(v11 - 1) = a2;
            *v11 = a3;
            v11 += 3;
            --v10;
          }
          while (v10);
        }
        sub_2150462EC(v7);
      }
    }
    else
    {
      sub_215046324(result);
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v9;
  }
  return result;
}

_QWORD *sub_215057F90(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(a3);
      v5 = (_QWORD *)sub_21512FCF8();
      v6 = v5;
      v5[2] = a2;
      v5[4] = v4;
      if (a2 != 1)
      {
        v5[5] = v4;
        v7 = a2 - 2;
        if (v7)
        {
          v8 = v5 + 6;
          do
          {
            *v8++ = v4;
            swift_bridgeObjectRetain();
            --v7;
          }
          while (v7);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    return v6;
  }
  return result;
}

void sub_215058030(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t a9)
{
  uint64_t v9;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];
  _QWORD v19[5];
  __int128 v20;
  _OWORD v21[3];
  uint64_t v22;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (*(_QWORD *)(a9 + 16) <= a3)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x21505860CLL);
  }
  v13 = *(_QWORD *)(a9 + 8 * a3 + 32);
  if (*(_QWORD *)(v13 + 16))
  {
    v22 = a7;
    v14 = *(_OWORD *)(v13 + 48);
    v20 = *(_OWORD *)(v13 + 32);
    v21[0] = v14;
    *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(v13 + 57);
    if ((a6 & 1) != 0)
      sub_2150EBEB4(v13, v19);
    else
      sub_2150EBDB0(a4, a5, v13, v18);
    sub_215058638((uint64_t *)&v20);
    if (!v9)
      __asm { BR              X10 }
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_215059060(MEMORY[0x24BEE4AF8]);
    v16 = v15;
    a8[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1B0);
    a8[4] = &off_24D2A4440;
    *a8 = a1;
    a8[1] = a2;
    a8[2] = v16;
  }
}

void sub_215058638(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;

  v1 = a1[4];
  if ((v1 & 4) != 0)
  {
    sub_21501D914();
    swift_allocError();
    *(_QWORD *)v2 = 0xD00000000000001ELL;
    v3 = "Can't decode multi-type block.";
    goto LABEL_5;
  }
  if ((v1 & 2) == 0)
  {
    sub_21501D914();
    swift_allocError();
    *(_QWORD *)v2 = 0xD00000000000001BLL;
    v3 = "Can't decode untyped block.";
LABEL_5:
    *(_QWORD *)(v2 + 8) = (unint64_t)(v3 - 32) | 0x8000000000000000;
    *(_BYTE *)(v2 + 16) = 3;
    swift_willThrow();
    return;
  }
  if (a1[3] < 0)
    __break(1u);
  else
    sub_2150599CC(*a1, a1[1], a1[2], v1);
}

void sub_21505871C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  if (__OFADD__(v2, v3))
  {
    __break(1u);
  }
  else if (v2 + v3 >= v2)
  {
    v4 = sub_21512F668();
    v6 = v5;
    if ((a1[4] & 1) != 0)
    {
      sub_2150594BC(v4, v5);
      v7 = v8;
    }
    else
    {
      sub_21501F068(v4, v5);
      v7 = v6;
    }
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x2150589C4);
}

void sub_2150589DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *a1;
  v3 = a1[1];
  if (__OFADD__(v2, v3))
  {
    __break(1u);
  }
  else if (v2 + v3 >= v2)
  {
    v4 = sub_21512F668();
    v6 = v5;
    if ((a1[4] & 1) != 0)
    {
      sub_2150594BC(v4, v5);
      v6 = v7;
    }
    else
    {
      sub_21501F068(v4, v5);
    }
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x215058C84);
}

void sub_215058C9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23[2];
  _QWORD v24[3];

  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D190);
  v2 = swift_allocObject();
  sub_21502D0D0(v24, a1);
  v3 = (uint64_t *)v24[0];
  v4 = v24[1];
  *(_QWORD *)(v2 + 16) = v24[0];
  *(_QWORD *)(v2 + 24) = v4;
  swift_beginAccess();
  if (a1)
  {
    v5 = 0;
    while (1)
    {
      v6 = v5 <= a1 ? a1 : v5;
      while (1)
      {
        if (v6 == v5)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        if (!v3)
          goto LABEL_42;
        v7 = *v3;
        v8 = v3[1];
        if (v8 >= *v3)
          break;
        if (v7 > 0x7FFFFFFFFFFFFFF8)
          goto LABEL_36;
        ++v5;
        v9 = v8 + 7;
        if (v8 >= 0)
          v9 = v3[1];
        v10 = v9 >> 3;
        v11 = v8 - (v9 & 0xFFFFFFFFFFFFFFF8);
        if (v11 >= 0)
          v12 = 1 << v11;
        else
          v12 = 0;
        *((_BYTE *)v3 + v10 + 64) |= v12;
        v3[1] = v8 + 1;
        if (a1 == v5)
          return;
      }
      v13 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_37;
      if (v7 < v13)
      {
        if (v7 + 0x4000000000000000 < 0)
          goto LABEL_41;
        if (2 * v7 <= v13)
          v7 = v8 + 1;
        else
          v7 *= 2;
      }
      sub_215097C2C((uint64_t)v3, v7, v23);
      if (v3[1] < 0)
        goto LABEL_38;
      MEMORY[0x2199DC578](v3, -1, -1);
      v3 = (uint64_t *)v23[0];
      v14 = v23[1];
      *(_QWORD *)(v2 + 16) = v23[0];
      *(_QWORD *)(v2 + 24) = v14;
      if (!v3)
        goto LABEL_43;
      if (*v3 > 0x7FFFFFFFFFFFFFF8)
        goto LABEL_39;
      v15 = v3[1];
      v16 = v15 + 7;
      if (v15 >= 0)
        v16 = v3[1];
      v17 = v15 - (v16 & 0xFFFFFFFFFFFFFFF8);
      v18 = v17 >= 0 ? 1 << v17 : 0;
      *((_BYTE *)v3 + (v16 >> 3) + 64) |= v18;
      v19 = v3[1];
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        break;
      v3[1] = v21;
      if (a1 - 1 == v5++)
        return;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
}

uint64_t sub_215058E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v14 = sub_21512F530();
  if (!v14)
  {
    result = sub_21512F53C();
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v15 = v14;
  result = sub_21512F548();
  if (!__OFSUB__(a1, result))
  {
    v17 = v15 + a1 - result;
    result = sub_21512F53C();
    if (v17)
      return a8(v17, *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 32), a5, a6, a7);
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_215058F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v14 = sub_21512F530();
  if (!v14)
  {
    result = sub_21512F53C();
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v15 = v14;
  result = sub_21512F548();
  if (!__OFSUB__(a1, result))
  {
    v17 = v15 + a1 - result;
    result = sub_21512F53C();
    if (v17)
      return a8(v17, *(_QWORD *)(a4 + 24), a5, a6, a7);
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

_BYTE *sub_215058FEC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_21505926C(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_21505932C((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_2150593A4((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_215059060(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23[2];
  _QWORD v24[3];

  v1 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D190);
  v2 = swift_allocObject();
  sub_21502D0D0(v24, v1);
  v3 = (uint64_t *)v24[0];
  v4 = v24[1];
  *(_QWORD *)(v2 + 16) = v24[0];
  *(_QWORD *)(v2 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  if (v1)
  {
    v5 = 0;
    while (1)
    {
      v6 = v5 <= v1 ? v1 : v5;
      while (1)
      {
        if (v6 == v5)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        if (!v3)
          goto LABEL_42;
        v7 = *v3;
        v8 = v3[1];
        if (v8 >= *v3)
          break;
        if (v7 > 0x7FFFFFFFFFFFFFF8)
          goto LABEL_36;
        ++v5;
        v9 = v8 + 7;
        if (v8 >= 0)
          v9 = v3[1];
        v10 = v9 >> 3;
        v11 = v8 - (v9 & 0xFFFFFFFFFFFFFFF8);
        if (v11 >= 0)
          v12 = 1 << v11;
        else
          v12 = 0;
        *((_BYTE *)v3 + v10 + 64) |= v12;
        v3[1] = v8 + 1;
        if (v1 == v5)
          goto LABEL_34;
      }
      v13 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_37;
      if (v7 < v13)
      {
        if (v7 + 0x4000000000000000 < 0)
          goto LABEL_41;
        if (2 * v7 <= v13)
          v7 = v8 + 1;
        else
          v7 *= 2;
      }
      sub_215097C2C((uint64_t)v3, v7, v23);
      if (v3[1] < 0)
        goto LABEL_38;
      MEMORY[0x2199DC578](v3, -1, -1);
      v3 = (uint64_t *)v23[0];
      v14 = v23[1];
      *(_QWORD *)(v2 + 16) = v23[0];
      *(_QWORD *)(v2 + 24) = v14;
      if (!v3)
        goto LABEL_43;
      if (*v3 > 0x7FFFFFFFFFFFFFF8)
        goto LABEL_39;
      v15 = v3[1];
      v16 = v15 + 7;
      if (v15 >= 0)
        v16 = v3[1];
      v17 = (char *)v3 + (v16 >> 3);
      v18 = v15 - (v16 & 0xFFFFFFFFFFFFFFF8);
      v19 = v18 >= 0 ? 1 << v18 : 0;
      v17[64] |= v19;
      v20 = __OFADD__(v15, 1);
      v21 = v15 + 1;
      if (v20)
        break;
      v3[1] = v21;
      if (v1 - 1 == v5++)
        goto LABEL_34;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
  else
  {
LABEL_34:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_21505926C(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_21505932C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_21512F554();
  swift_allocObject();
  result = sub_21512F524();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_21512F65C();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_2150593A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_21512F554();
  swift_allocObject();
  result = sub_21512F524();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_215059424(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1D0);
  v10 = sub_21505CA28();
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_215058FEC(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v5;
}

void sub_2150594BC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_21505950C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t src_buffer, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v21;
  v28 = v22;
  v29 = BYTE2(v22);
  v30 = BYTE3(v22);
  v31 = BYTE4(v22);
  v32 = BYTE5(v22);
  if (v20 < 0)
  {
    __break(1u);
    JUMPOUT(0x21505983CLL);
  }
  if (v20)
  {
    v23 = sub_21512FCF8();
    *(_QWORD *)(v23 + 16) = v20;
  }
  else
  {
    v23 = MEMORY[0x24BEE4AF8];
  }
  v24 = compression_decode_buffer((uint8_t *)(v23 + 32), v20, (const uint8_t *)&v27, BYTE6(v22), 0, COMPRESSION_LZ4_RAW);
  if (v24 > v20)
  {
    __break(1u);
    JUMPOUT(0x215059798);
  }
  *(_QWORD *)(v23 + 16) = v24;
  v25 = sub_215059424(v23);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_215059878(unsigned __int8 *a1)
{
  unint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  if (*a1 - 3 > 0xFFFFFFFD)
  {
    v4 = a1[1];
    result = sub_21508AAB0(v4);
    if (result != 10)
      return result;
    sub_21501D914();
    swift_allocError();
    v1 = 0;
    *(_QWORD *)v2 = v4;
    v3 = 2;
  }
  else
  {
    sub_215130178();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    v1 = 0xE000000000000000;
    sub_21501D914();
    swift_allocError();
    *(_QWORD *)v2 = 0;
    v3 = 3;
  }
  *(_QWORD *)(v2 + 8) = v1;
  *(_BYTE *)(v2 + 16) = v3;
  return swift_willThrow();
}

void sub_2150599CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
  }
  else if (v5 >= a1)
  {
    v7 = sub_21512F668();
    v9 = v8;
    if ((a4 & 1) != 0)
    {
      sub_2150594BC(v7, v8);
      v10 = v11;
    }
    else
    {
      sub_21501F068(v7, v8);
      v10 = v9;
    }
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x215059C08);
}

uint64_t sub_215059C38(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8x8_t v21;
  BOOL v22;

  v2 = *a1;
  v3 = *(unsigned __int8 *)(*a1)++;
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return 7;
  if (v3 != 2)
  {
    if (v3 != 1)
    {
      sub_215130178();
      sub_21512FB90();
      sub_2151303B8();
      sub_21512FB90();
      swift_bridgeObjectRelease();
      sub_21512FB90();
      v10 = 0xE000000000000000;
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v9 = 0;
      v14 = 3;
      goto LABEL_11;
    }
    v7 = *(unsigned __int8 *)(v2 + 1);
    *a1 = v2 + 2;
    v8 = sub_21508AAB0(v7);
    if (v8 != 10)
      return v8;
    sub_21501D914();
    swift_allocError();
    v10 = 0;
    *(_QWORD *)v9 = v7;
LABEL_9:
    v14 = 2;
LABEL_11:
    *(_QWORD *)(v9 + 8) = v10;
    *(_BYTE *)(v9 + 16) = v14;
    swift_willThrow();
    return v10;
  }
  v11 = *(unsigned __int8 *)(v2 + 1);
  v12 = (char *)(v2 + 2);
  *a1 = v2 + 2;
  result = sub_21508AAB0(v11);
  if (result == 10)
  {
    sub_21501D914();
    swift_allocError();
    v10 = 0;
    *(_QWORD *)v9 = v11;
    goto LABEL_9;
  }
  v15 = a2 + 63;
  if (!__OFADD__(a2, 63))
  {
    v16 = a2 + 126;
    if (v15 >= 0)
      v16 = a2 + 63;
    if (v15 < -63)
      goto LABEL_26;
    v10 = result;
    v17 = 8 * (v16 >> 6);
    if (v15 <= 63)
    {
      memcpy((void *)(v4 + 32), v12, 8 * (v16 >> 6));
      *(_QWORD *)(v4 + 16) = v17;
      *a1 = (uint64_t)&v12[v17];
      return v10;
    }
    v18 = sub_21512FCF8();
    *(_QWORD *)(v18 + 16) = v17;
    result = (uint64_t)memcpy((void *)(v18 + 32), v12, v17);
    v19 = 0;
    v20 = 0;
    *(_QWORD *)(v18 + 16) = v17;
    *a1 = (uint64_t)&v12[v17];
    while (1)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int8 *)(v18 + v19 + 32));
      v21.i16[0] = vaddlv_u8(v21);
      v22 = __OFADD__(v20, v21.u32[0]);
      v20 += v21.u32[0];
      if (v22)
        break;
      if (v17 == ++v19)
        return v10;
    }
    __break(1u);
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t *sub_215059F10(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  unsigned __int8 *v78;

  v9 = a2;
  v78 = a1;
  result = (uint64_t *)sub_215059C38((uint64_t *)&v78, a2);
  if (!v5)
  {
    v13 = v12;
    if (v11 == v9)
    {
      result = (uint64_t *)swift_bridgeObjectRelease();
      if (v9 < 0)
        goto LABEL_88;
      if (v9)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D040);
        v14 = sub_21512FCF8();
        v15 = v14;
        *(_QWORD *)(v14 + 16) = v9;
        v16 = 32;
        do
        {
          v17 = v14 + v16;
          *(_QWORD *)v17 = 0;
          *(_BYTE *)(v17 + 8) = 1;
          v16 += 16;
          --v9;
        }
        while (v9);
      }
      else
      {
        v15 = MEMORY[0x24BEE4AF8];
      }
      sub_2150956F4(v15);
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if ((_BYTE)result)
    {
      swift_bridgeObjectRelease();
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v18 = 0xD00000000000002DLL;
      *(_QWORD *)(v18 + 8) = 0x8000000215130FD0;
      *(_BYTE *)(v18 + 16) = 0;
      return (uint64_t *)swift_willThrow();
    }
    v19 = __OFSUB__(v9, v11);
    v20 = v9 - v11;
    if (v19)
      goto LABEL_97;
    result = (uint64_t *)sub_2150550F4(&v78, v20);
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (v9)
      {
        v21 = 0;
        v22 = 0;
        v23 = *(_QWORD *)(v13 + 16);
        v76 = v13 + 32;
        v70 = result + 4;
        v71 = result;
        v69 = v13;
        v73 = a3;
        v74 = a4;
        v72 = v23;
        do
        {
          if (!v23)
            goto LABEL_34;
          if ((unint64_t)v22 >> 3 >= *(_QWORD *)(v13 + 16))
          {
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
            goto LABEL_101;
          }
          if (((*(unsigned __int8 *)(v76 + ((unint64_t)v22 >> 3)) >> (v22 & 7)) & 1) != 0)
          {
            if (v22 >= a3 && v22 < a4)
            {
              v24 = *(_QWORD *)(a5 + 16);
              result = (uint64_t *)swift_beginAccess();
              v25 = *(_QWORD *)(v24 + 16);
              if (!v25)
                goto LABEL_107;
              v26 = *(_QWORD *)(v25 + 8);
              v27 = v26 + 1;
              if (__OFADD__(v26, 1))
                goto LABEL_94;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v29 = *(_QWORD *)(a5 + 16);
              v30 = (uint64_t **)(v29 + 16);
              if (isUniquelyReferenced_nonNull_native)
              {
                swift_beginAccess();
                result = *v30;
                if (!*v30)
                  goto LABEL_111;
                v31 = *result;
                if (*result < v27)
                {
                  if (v31 + 0x4000000000000000 < 0)
                    goto LABEL_102;
                  v32 = 2 * v31;
                  if (v32 <= v27)
                    v33 = v27;
                  else
                    v33 = v32;
                  sub_2150975F0((uint64_t)result, v33, (uint64_t *)&v77);
                  result = *(uint64_t **)(v29 + 16);
                  if (!result)
                    goto LABEL_114;
                  if (result[1] < 0)
                    goto LABEL_104;
                  MEMORY[0x2199DC578]();
                  *(_OWORD *)v30 = v77;
                }
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v61 = *v30;
                if (!v61)
                  goto LABEL_112;
                v62 = *v61;
                if (*v61 < v27)
                {
                  if (v62 + 0x4000000000000000 < 0)
                    goto LABEL_103;
                  if (2 * v62 <= v27)
                    v62 = v27;
                  else
                    v62 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D438);
                v63 = swift_allocObject();
                sub_215096600((uint64_t)v61, v62, (uint64_t *)&v77);
                *(_OWORD *)(v63 + 16) = v77;
                swift_release();
                *(_QWORD *)(a5 + 16) = v63;
                v29 = v63;
                v13 = v69;
              }
              result = (uint64_t *)swift_beginAccess();
              v64 = *(_QWORD *)(v29 + 16);
              a3 = v73;
              a4 = v74;
              if (!v64)
                goto LABEL_108;
              v65 = *(_QWORD *)(v64 + 16);
              v19 = __OFADD__(v65, 1);
              v66 = v65 + 1;
              v23 = v72;
              if (v19)
                goto LABEL_95;
              *(_QWORD *)(v64 + 16) = v66;
              v67 = *(_QWORD *)(v64 + 8);
              v19 = __OFADD__(v67, 1);
              v68 = v67 + 1;
              if (v19)
                goto LABEL_96;
              *(_QWORD *)(v64 + 8) = v68;
            }
          }
          else
          {
LABEL_34:
            if (v22 >= a3 && v22 < a4)
            {
              if ((v21 & 0x8000000000000000) != 0)
                goto LABEL_89;
              if (v21 >= v71[2])
                goto LABEL_90;
              v34 = v70[v21];
              v35 = *(_QWORD *)(a5 + 16);
              result = (uint64_t *)swift_beginAccess();
              v36 = *(_QWORD *)(v35 + 16);
              if (!v36)
                goto LABEL_105;
              v75 = v34;
              v37 = *(_QWORD *)(v36 + 8);
              v38 = v37 + 1;
              if (__OFADD__(v37, 1))
                goto LABEL_91;
              v39 = swift_isUniquelyReferenced_nonNull_native();
              v40 = *(_QWORD *)(a5 + 16);
              v41 = (uint64_t **)(v40 + 16);
              if (v39)
              {
                swift_beginAccess();
                result = *v41;
                if (!*v41)
                  goto LABEL_109;
                v42 = *result;
                if (*result < v38)
                {
                  if (v42 + 0x4000000000000000 < 0)
                    goto LABEL_98;
                  v43 = 2 * v42;
                  if (v43 <= v38)
                    v44 = v38;
                  else
                    v44 = v43;
                  sub_2150975F0((uint64_t)result, v44, (uint64_t *)&v77);
                  result = *(uint64_t **)(v40 + 16);
                  if (!result)
                    goto LABEL_113;
                  if (result[1] < 0)
                    goto LABEL_100;
                  MEMORY[0x2199DC578]();
                  *(_OWORD *)v41 = v77;
                }
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v45 = *v41;
                if (!v45)
                  goto LABEL_110;
                v46 = *v45;
                if (*v45 < v38)
                {
                  if (v46 + 0x4000000000000000 < 0)
                    goto LABEL_99;
                  if (2 * v46 <= v38)
                    v46 = v38;
                  else
                    v46 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D438);
                v47 = swift_allocObject();
                sub_215096600((uint64_t)v45, v46, (uint64_t *)&v77);
                *(_OWORD *)(v47 + 16) = v77;
                swift_release();
                *(_QWORD *)(a5 + 16) = v47;
                v40 = v47;
                v13 = v69;
              }
              result = (uint64_t *)swift_beginAccess();
              v48 = *(_QWORD **)(v40 + 16);
              a3 = v73;
              a4 = v74;
              if (!v48)
                goto LABEL_106;
              v49 = *v48 + 7;
              if (__OFADD__(*v48, 7))
                goto LABEL_92;
              v50 = v48 + 8;
              if (v49 < 0)
                v49 = *v48 + 14;
              v51 = v49 >> 3;
              v53 = v51 - 1;
              v52 = v51 < 1;
              v54 = v51 + 62;
              if (!v52)
                v54 = v53;
              *(_QWORD *)((char *)&v50[v48[1] + 8] + (v54 & 0xFFFFFFFFFFFFC0)) = v75;
              v55 = v48[1];
              v56 = v55 + 7;
              if (v55 >= 0)
                v56 = v48[1];
              v57 = v56 >> 3;
              v58 = v55 - (v56 & 0xFFFFFFFFFFFFFFF8);
              if (v58 >= 0)
                v59 = 1 << v58;
              else
                v59 = 0;
              *((_BYTE *)v50 + v57) |= v59;
              v19 = __OFADD__(v55, 1);
              v60 = v55 + 1;
              if (v19)
                goto LABEL_93;
              v48[1] = v60;
              v23 = v72;
            }
            v19 = __OFADD__(v21++, 1);
            if (v19)
              goto LABEL_87;
          }
          ++v22;
        }
        while (v9 != v22);
      }
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_bridgeObjectRelease();
    }
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
  }
  return result;
}

uint64_t *sub_21505A518(unsigned __int8 *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  unsigned __int8 *v77[2];

  v11 = a2;
  v77[0] = a1;
  result = (uint64_t *)sub_215059C38((uint64_t *)v77, a2);
  if (!v6)
  {
    v15 = v14;
    if (v13 == v11)
    {
      result = (uint64_t *)swift_bridgeObjectRelease();
      if (v11 < 0)
        goto LABEL_91;
      if (v11)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D030);
        v16 = sub_21512FCF8();
        v17 = v16;
        *(_QWORD *)(v16 + 16) = v11;
        v18 = 32;
        do
        {
          v19 = v16 + v18;
          *(_QWORD *)v19 = 0;
          *(_BYTE *)(v19 + 8) = 1;
          v18 += 16;
          --v11;
        }
        while (v11);
      }
      else
      {
        v17 = MEMORY[0x24BEE4AF8];
      }
      sub_2150959D8(v17);
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if (result != 1)
    {
LABEL_79:
      swift_bridgeObjectRelease();
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v68 = 0xD00000000000002DLL;
      *(_QWORD *)(v68 + 8) = 0x8000000215130FD0;
      *(_BYTE *)(v68 + 16) = 0;
      return (uint64_t *)swift_willThrow();
    }
    v20 = __OFSUB__(v11, v13);
    v21 = v11 - v13;
    if (v20)
      goto LABEL_95;
    result = (uint64_t *)sub_21512F3A4(v77, v21, v11, a3);
    if ((v11 & 0x8000000000000000) == 0)
    {
      v22 = result;
      if (v11)
      {
        v23 = 0;
        v24 = 0;
        v25 = *(_QWORD *)(v15 + 16);
        v74 = a4;
        v75 = v15 + 32;
        v69 = result;
        v70 = result + 4;
        v72 = a5;
        v73 = v15;
        v71 = v25;
        do
        {
          if (!v25)
            goto LABEL_33;
          if ((unint64_t)v24 >> 3 >= *(_QWORD *)(v15 + 16))
          {
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
            goto LABEL_99;
          }
          if (((*(unsigned __int8 *)(v75 + ((unint64_t)v24 >> 3)) >> (v24 & 7)) & 1) != 0)
          {
            if (v24 >= a4 && v24 < a5)
            {
              v26 = *(_QWORD *)(a6 + 16);
              result = (uint64_t *)swift_beginAccess();
              v27 = *(_QWORD *)(v26 + 16);
              if (!v27)
                goto LABEL_105;
              v28 = *(_QWORD *)(v27 + 8);
              v29 = v28 + 1;
              if (__OFADD__(v28, 1))
                goto LABEL_92;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v31 = *(_QWORD *)(a6 + 16);
              v32 = (uint64_t **)(v31 + 16);
              if (isUniquelyReferenced_nonNull_native)
              {
                swift_beginAccess();
                result = *v32;
                if (!*v32)
                  goto LABEL_109;
                v33 = *result;
                if (*result < v29)
                {
                  if (v33 + 0x4000000000000000 < 0)
                    goto LABEL_100;
                  v34 = 2 * v33;
                  if (v34 <= v29)
                    v35 = v29;
                  else
                    v35 = v34;
                  sub_2150975F0((uint64_t)result, v35, (uint64_t *)&v76);
                  result = *(uint64_t **)(v31 + 16);
                  if (!result)
                    goto LABEL_112;
                  if (result[1] < 0)
                    goto LABEL_102;
                  MEMORY[0x2199DC578]();
                  *(_OWORD *)v32 = v76;
                }
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v50 = *v32;
                if (!v50)
                  goto LABEL_110;
                v51 = *v50;
                if (*v50 < v29)
                {
                  if (v51 + 0x4000000000000000 < 0)
                    goto LABEL_101;
                  if (2 * v51 <= v29)
                    v51 = v29;
                  else
                    v51 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D430);
                v52 = swift_allocObject();
                sub_215096790((uint64_t)v50, v51, (uint64_t *)&v76);
                *(_OWORD *)(v52 + 16) = v76;
                swift_release();
                *(_QWORD *)(a6 + 16) = v52;
                v31 = v52;
                v22 = v69;
              }
              result = (uint64_t *)swift_beginAccess();
              v53 = *(_QWORD *)(v31 + 16);
              a5 = v72;
              v15 = v73;
              if (!v53)
                goto LABEL_106;
              v54 = *(_QWORD *)(v53 + 16);
              v20 = __OFADD__(v54, 1);
              v55 = v54 + 1;
              a4 = v74;
              v25 = v71;
              if (v20)
                goto LABEL_93;
              *(_QWORD *)(v53 + 16) = v55;
              v56 = *(_QWORD *)(v53 + 8);
              v20 = __OFADD__(v56, 1);
              v57 = v56 + 1;
              if (v20)
                goto LABEL_94;
              *(_QWORD *)(v53 + 8) = v57;
            }
          }
          else
          {
LABEL_33:
            if (v24 >= a4 && v24 < a5)
            {
              if ((v23 & 0x8000000000000000) != 0)
                goto LABEL_87;
              if (v23 >= v22[2])
                goto LABEL_88;
              v36 = v70[v23];
              v37 = *(_QWORD *)(a6 + 16);
              result = (uint64_t *)swift_beginAccess();
              v38 = *(_QWORD *)(v37 + 16);
              if (!v38)
                goto LABEL_103;
              v39 = *(_QWORD *)(v38 + 8);
              v40 = v39 + 1;
              if (__OFADD__(v39, 1))
                goto LABEL_89;
              v41 = swift_isUniquelyReferenced_nonNull_native();
              v42 = *(_QWORD *)(a6 + 16);
              v43 = (uint64_t **)(v42 + 16);
              if (v41)
              {
                swift_beginAccess();
                result = *v43;
                if (!*v43)
                  goto LABEL_107;
                v44 = *result;
                if (*result >= v40)
                {
                  a4 = v74;
                }
                else
                {
                  if (v44 + 0x4000000000000000 < 0)
                    goto LABEL_96;
                  v45 = 2 * v44;
                  if (v45 <= v40)
                    v46 = v40;
                  else
                    v46 = v45;
                  sub_2150975F0((uint64_t)result, v46, (uint64_t *)&v76);
                  result = *(uint64_t **)(v42 + 16);
                  if (!result)
                    goto LABEL_111;
                  a4 = v74;
                  if (result[1] < 0)
                    goto LABEL_98;
                  MEMORY[0x2199DC578]();
                  *(_OWORD *)v43 = v76;
                }
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v47 = *v43;
                if (!v47)
                  goto LABEL_108;
                v48 = *v47;
                if (*v47 < v40)
                {
                  if (v48 + 0x4000000000000000 < 0)
                    goto LABEL_97;
                  if (2 * v48 <= v40)
                    v48 = v40;
                  else
                    v48 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D430);
                v49 = swift_allocObject();
                sub_215096790((uint64_t)v47, v48, (uint64_t *)&v76);
                *(_OWORD *)(v49 + 16) = v76;
                swift_release();
                *(_QWORD *)(a6 + 16) = v49;
                v42 = v49;
                a4 = v74;
                v22 = v69;
              }
              result = (uint64_t *)swift_beginAccess();
              v58 = *(_QWORD **)(v42 + 16);
              a5 = v72;
              v15 = v73;
              if (!v58)
                goto LABEL_104;
              v59 = *v58 + 7;
              if (__OFADD__(*v58, 7))
                goto LABEL_90;
              v60 = v58 + 8;
              if (v59 < 0)
                v59 = *v58 + 14;
              v61 = v59 >> 3;
              v63 = v61 - 1;
              v62 = v61 < 1;
              v64 = v61 + 62;
              if (!v62)
                v64 = v63;
              v65 = v58[1];
              *(_QWORD *)((char *)&v60[v65 + 8] + (v64 & 0xFFFFFFFFFFFFC0)) = v36;
              v66 = v65 - (v64 & 0xFFFFFFFFFFFFFFF8);
              if (v66 >= 0)
                v67 = 1 << v66;
              else
                v67 = 0;
              *((_BYTE *)v60 + v65 / 8) |= v67;
              if (__OFADD__(v65, 1))
              {
                __break(1u);
                goto LABEL_79;
              }
              v58[1] = v65 + 1;
              v25 = v71;
            }
            v20 = __OFADD__(v23++, 1);
            if (v20)
              goto LABEL_86;
          }
          ++v24;
        }
        while (v11 != v24);
      }
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_bridgeObjectRelease();
    }
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
  }
  return result;
}

uint64_t *sub_21505AB38(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  unsigned __int8 *v79;

  v79 = a1;
  result = (uint64_t *)sub_215059C38((uint64_t *)&v79, a2);
  if (!v5)
  {
    v13 = v12;
    if (v11 == a2)
    {
      swift_bridgeObjectRelease();
      v14 = sub_215057E04(0, 0, a2);
      sub_215095CB8((uint64_t)v14);
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if (result != 2)
    {
      swift_bridgeObjectRelease();
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v18 = 0xD00000000000002DLL;
      *(_QWORD *)(v18 + 8) = 0x8000000215130FD0;
      *(_BYTE *)(v18 + 16) = 0;
      return (uint64_t *)swift_willThrow();
    }
    v15 = __OFSUB__(a2, v11);
    v16 = a2 - v11;
    if (v15)
      goto LABEL_88;
    if (*v79++)
      result = (uint64_t *)sub_2150B5500(&v79, v16);
    else
      result = (uint64_t *)sub_2150B52E0(&v79, v16);
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (a2)
      {
        v19 = 0;
        v20 = 0;
        v21 = *(_QWORD *)(v13 + 16);
        v77 = v13 + 32;
        v70 = result + 4;
        v71 = result;
        v69 = a5;
        v72 = v13;
        v73 = v21;
        v74 = a3;
        v75 = a4;
        do
        {
          if (!v21)
            goto LABEL_31;
          if ((unint64_t)v20 >> 3 >= *(_QWORD *)(v13 + 16))
          {
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            goto LABEL_91;
          }
          if (((*(unsigned __int8 *)(v77 + ((unint64_t)v20 >> 3)) >> (v20 & 7)) & 1) != 0)
          {
            if (v20 >= a3 && v20 < a4)
            {
              v22 = *(_QWORD *)(a5 + 16);
              result = (uint64_t *)swift_beginAccess();
              v23 = *(_QWORD *)(v22 + 16);
              if (!v23)
                goto LABEL_96;
              v24 = *(_QWORD *)(v23 + 8);
              v25 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_85;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v27 = *(_QWORD *)(a5 + 16);
              v28 = (uint64_t **)(v27 + 16);
              if (isUniquelyReferenced_nonNull_native)
              {
                swift_beginAccess();
                result = *v28;
                if (!*v28)
                  goto LABEL_100;
                v29 = *result;
                if (*result < v25)
                {
                  if (v29 + 0x4000000000000000 < 0)
                    goto LABEL_92;
                  v30 = 2 * v29;
                  if (v30 <= v25)
                    v31 = v25;
                  else
                    v31 = v30;
                  sub_2150977DC((uint64_t)result, v31, (uint64_t *)&v78);
                  sub_2150983B8(*(_QWORD **)(v27 + 16));
                  *(_OWORD *)(v27 + 16) = v78;
                }
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v61 = *v28;
                if (!*v28)
                  goto LABEL_101;
                v62 = *v61;
                if (*v61 < v25)
                {
                  if (v62 + 0x4000000000000000 < 0)
                    goto LABEL_93;
                  if (2 * v62 <= v25)
                    v62 = v25;
                  else
                    v62 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D428);
                v63 = swift_allocObject();
                sub_21509691C((uint64_t)v61, v62, (uint64_t *)&v78);
                *(_OWORD *)(v63 + 16) = v78;
                swift_release();
                a5 = v69;
                *(_QWORD *)(v69 + 16) = v63;
                v27 = v63;
                v13 = v72;
              }
              result = (uint64_t *)swift_beginAccess();
              v64 = *(_QWORD *)(v27 + 16);
              if (!v64)
                goto LABEL_97;
              v65 = *(_QWORD *)(v64 + 16);
              v15 = __OFADD__(v65, 1);
              v66 = v65 + 1;
              a3 = v74;
              a4 = v75;
              v21 = v73;
              if (v15)
                goto LABEL_86;
              *(_QWORD *)(v64 + 16) = v66;
              v67 = *(_QWORD *)(v64 + 8);
              v15 = __OFADD__(v67, 1);
              v68 = v67 + 1;
              if (v15)
                goto LABEL_87;
              *(_QWORD *)(v64 + 8) = v68;
            }
          }
          else
          {
LABEL_31:
            if (v20 >= a3 && v20 < a4)
            {
              if ((v19 & 0x8000000000000000) != 0)
                goto LABEL_80;
              if (v19 >= v71[2])
                goto LABEL_81;
              v32 = &v70[2 * v19];
              v33 = v32[1];
              v76 = *v32;
              v34 = *(_QWORD *)(a5 + 16);
              result = (uint64_t *)swift_beginAccess();
              v35 = *(_QWORD *)(v34 + 16);
              if (!v35)
                goto LABEL_94;
              v36 = *(_QWORD *)(v35 + 8);
              v37 = v36 + 1;
              if (__OFADD__(v36, 1))
                goto LABEL_82;
              swift_bridgeObjectRetain();
              v38 = swift_isUniquelyReferenced_nonNull_native();
              v39 = *(_QWORD *)(a5 + 16);
              v40 = (uint64_t **)(v39 + 16);
              if (v38)
              {
                swift_beginAccess();
                result = *v40;
                if (!*v40)
                  goto LABEL_98;
                v41 = *result;
                if (*result < v37)
                {
                  if (v41 + 0x4000000000000000 < 0)
                    goto LABEL_89;
                  v42 = 2 * v41;
                  if (v42 <= v37)
                    v43 = v37;
                  else
                    v43 = v42;
                  sub_2150977DC((uint64_t)result, v43, (uint64_t *)&v78);
                  sub_2150983B8(*(_QWORD **)(v39 + 16));
                  *(_OWORD *)(v39 + 16) = v78;
                }
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v44 = *v40;
                if (!*v40)
                  goto LABEL_99;
                v45 = *v44;
                if (*v44 < v37)
                {
                  if (v45 + 0x4000000000000000 < 0)
                    goto LABEL_90;
                  if (2 * v45 <= v37)
                    v45 = v37;
                  else
                    v45 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D428);
                v46 = swift_allocObject();
                sub_21509691C((uint64_t)v44, v45, (uint64_t *)&v78);
                *(_OWORD *)(v46 + 16) = v78;
                swift_release();
                a5 = v69;
                *(_QWORD *)(v69 + 16) = v46;
                v39 = v46;
              }
              result = (uint64_t *)swift_beginAccess();
              v47 = *(_QWORD **)(v39 + 16);
              v13 = v72;
              if (!v47)
                goto LABEL_95;
              v48 = *v47 + 7;
              if (__OFADD__(*v47, 7))
                goto LABEL_83;
              v49 = v47 + 8;
              if (v48 < 0)
                v48 = *v47 + 14;
              v50 = v48 >> 3;
              v52 = v50 - 1;
              v51 = v50 < 1;
              v53 = v50 + 62;
              if (!v51)
                v53 = v52;
              v54 = (unint64_t)&v49[2 * v47[1]] + (v53 & 0xFFFFFFFFFFFFFFC0);
              *(_QWORD *)(v54 + 64) = v76;
              *(_QWORD *)(v54 + 72) = v33;
              v55 = v47[1];
              v56 = v55 + 7;
              if (v55 >= 0)
                v56 = v47[1];
              v57 = v56 >> 3;
              v58 = v55 - (v56 & 0xFFFFFFFFFFFFFFF8);
              if (v58 >= 0)
                v59 = 1 << v58;
              else
                v59 = 0;
              *((_BYTE *)v49 + v57) |= v59;
              v15 = __OFADD__(v55, 1);
              v60 = v55 + 1;
              if (v15)
                goto LABEL_84;
              v47[1] = v60;
              a3 = v74;
              a4 = v75;
              v21 = v73;
            }
            v15 = __OFADD__(v19++, 1);
            if (v15)
              goto LABEL_79;
          }
          ++v20;
        }
        while (a2 != v20);
      }
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_bridgeObjectRelease();
    }
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
  }
  return result;
}

uint64_t *sub_21505B0F8(unsigned __int8 *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  unsigned __int8 *v75;

  v75 = a1;
  result = (uint64_t *)sub_215059C38((uint64_t *)&v75, a2);
  if (!v6)
  {
    v15 = v14;
    if (v13 == a2)
    {
      swift_bridgeObjectRelease();
      v16 = sub_215057F90(0, a2, &qword_254DA7D30);
      sub_215095FB4((uint64_t)v16);
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if (result != 3)
    {
      swift_bridgeObjectRelease();
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v65 = 0xD00000000000002DLL;
      *(_QWORD *)(v65 + 8) = 0x8000000215130FD0;
      *(_BYTE *)(v65 + 16) = 0;
      return (uint64_t *)swift_willThrow();
    }
    v17 = __OFSUB__(a2, v13);
    v18 = a2 - v13;
    if (v17)
      goto LABEL_84;
    result = (uint64_t *)sub_2150C1940(&v75, v18, a2, a3);
    if ((a2 & 0x8000000000000000) == 0)
    {
      v19 = result;
      if (a2)
      {
        v20 = 0;
        v21 = 0;
        v22 = *(_QWORD *)(v15 + 16);
        v72 = v15 + 32;
        v73 = a6;
        v67 = result + 4;
        v68 = v15;
        v70 = a4;
        v71 = a5;
        v66 = result;
        v69 = v22;
        do
        {
          if (!v22)
            goto LABEL_28;
          if ((unint64_t)v21 >> 3 >= *(_QWORD *)(v15 + 16))
          {
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
            goto LABEL_87;
          }
          if (((*(unsigned __int8 *)(v72 + ((unint64_t)v21 >> 3)) >> (v21 & 7)) & 1) != 0)
          {
            if (v21 >= a4 && v21 < a5)
            {
              v23 = *(_QWORD *)(a6 + 16);
              result = (uint64_t *)swift_beginAccess();
              v24 = *(_QWORD *)(v23 + 16);
              if (!v24)
                goto LABEL_92;
              v25 = *(_QWORD *)(v24 + 8);
              v26 = v25 + 1;
              if (__OFADD__(v25, 1))
                goto LABEL_81;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v28 = *(_QWORD *)(v73 + 16);
              v29 = (uint64_t **)(v28 + 16);
              if (isUniquelyReferenced_nonNull_native)
              {
                swift_beginAccess();
                result = *v29;
                if (!*v29)
                  goto LABEL_96;
                v30 = *result;
                if (*result < v26)
                {
                  if (v30 + 0x4000000000000000 < 0)
                    goto LABEL_88;
                  v31 = 2 * v30;
                  if (v31 <= v26)
                    v32 = v26;
                  else
                    v32 = v31;
                  sub_2150977D8((uint64_t)result, v32, (uint64_t *)&v74);
                  sub_21509881C(*(_QWORD **)(v28 + 16), *(_QWORD *)(v28 + 24));
                  *(_OWORD *)(v28 + 16) = v74;
                }
                a6 = v73;
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v57 = *v29;
                if (!*v29)
                  goto LABEL_97;
                v58 = *v57;
                if (*v57 < v26)
                {
                  if (v58 + 0x4000000000000000 < 0)
                    goto LABEL_89;
                  if (2 * v58 <= v26)
                    v58 = v26;
                  else
                    v58 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7708);
                v59 = swift_allocObject();
                sub_21509678C(&v74, v57, *(_QWORD *)(v28 + 24), v58);
                *(_OWORD *)(v59 + 16) = v74;
                swift_release();
                a6 = v73;
                *(_QWORD *)(v73 + 16) = v59;
                v28 = v59;
                v15 = v68;
                v19 = v66;
              }
              result = (uint64_t *)swift_beginAccess();
              v60 = *(_QWORD *)(v28 + 16);
              if (!v60)
                goto LABEL_93;
              v61 = *(_QWORD *)(v60 + 16);
              v17 = __OFADD__(v61, 1);
              v62 = v61 + 1;
              a4 = v70;
              a5 = v71;
              v22 = v69;
              if (v17)
                goto LABEL_82;
              *(_QWORD *)(v60 + 16) = v62;
              v63 = *(_QWORD *)(v60 + 8);
              v17 = __OFADD__(v63, 1);
              v64 = v63 + 1;
              if (v17)
                goto LABEL_83;
              *(_QWORD *)(v60 + 8) = v64;
            }
          }
          else
          {
LABEL_28:
            if (v21 >= a4 && v21 < a5)
            {
              if ((v20 & 0x8000000000000000) != 0)
                goto LABEL_76;
              if (v20 >= v19[2])
                goto LABEL_77;
              v33 = v67[v20];
              v34 = *(_QWORD *)(a6 + 16);
              result = (uint64_t *)swift_beginAccess();
              v35 = *(_QWORD *)(v34 + 16);
              if (!v35)
                goto LABEL_90;
              v36 = *(_QWORD *)(v35 + 8);
              v37 = v36 + 1;
              if (__OFADD__(v36, 1))
                goto LABEL_78;
              swift_bridgeObjectRetain();
              v38 = swift_isUniquelyReferenced_nonNull_native();
              v39 = *(_QWORD *)(a6 + 16);
              v40 = (uint64_t **)(v39 + 16);
              if (v38)
              {
                swift_beginAccess();
                result = *v40;
                if (!*v40)
                  goto LABEL_94;
                v41 = *result;
                if (*result < v37)
                {
                  if (v41 + 0x4000000000000000 < 0)
                    goto LABEL_85;
                  v42 = 2 * v41;
                  if (v42 <= v37)
                    v43 = v37;
                  else
                    v43 = v42;
                  sub_2150977D8((uint64_t)result, v43, (uint64_t *)&v74);
                  sub_21509881C(*(_QWORD **)(v39 + 16), *(_QWORD *)(v39 + 24));
                  *(_OWORD *)(v39 + 16) = v74;
                }
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v44 = *v40;
                if (!*v40)
                  goto LABEL_95;
                v45 = *v44;
                if (*v44 < v37)
                {
                  if (v45 + 0x4000000000000000 < 0)
                    goto LABEL_86;
                  if (2 * v45 <= v37)
                    v45 = v37;
                  else
                    v45 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7708);
                v46 = swift_allocObject();
                sub_21509678C(&v74, v44, *(_QWORD *)(v39 + 24), v45);
                *(_OWORD *)(v46 + 16) = v74;
                swift_release();
                *(_QWORD *)(v73 + 16) = v46;
                v39 = v46;
                v19 = v66;
              }
              result = (uint64_t *)swift_beginAccess();
              v47 = *(_QWORD **)(v39 + 16);
              v15 = v68;
              if (!v47)
                goto LABEL_91;
              v48 = *v47 + 7;
              a6 = v73;
              if (__OFADD__(*v47, 7))
                goto LABEL_79;
              v49 = v47 + 8;
              if (v48 < 0)
                v48 = *v47 + 14;
              v50 = v48 >> 3;
              v52 = v50 - 1;
              v51 = v50 < 1;
              v53 = v50 + 62;
              if (!v51)
                v53 = v52;
              v54 = v47[1];
              *(_QWORD *)((char *)&v49[v54 + 8] + (v53 & 0xFFFFFFFFFFFFC0)) = v33;
              v55 = v54 - (v53 & 0xFFFFFFFFFFFFFFF8);
              if (v55 >= 0)
                v56 = 1 << v55;
              else
                v56 = 0;
              *((_BYTE *)v49 + v54 / 8) |= v56;
              if (__OFADD__(v54, 1))
                goto LABEL_80;
              v47[1] = v54 + 1;
              a4 = v70;
              a5 = v71;
              v22 = v69;
            }
            v17 = __OFADD__(v20++, 1);
            if (v17)
              goto LABEL_75;
          }
          ++v21;
        }
        while (a2 != v21);
      }
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_bridgeObjectRelease();
    }
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
  }
  return result;
}

uint64_t *sub_21505B6AC(unsigned __int8 *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  unsigned __int8 *v77;

  v77 = a1;
  result = (uint64_t *)sub_215059C38((uint64_t *)&v77, a2);
  if (!v6)
  {
    v15 = v14;
    if (v13 == a2)
    {
      swift_bridgeObjectRelease();
      v16 = sub_215057EB8(0, 0, 0, a2);
      sub_215095FC8(v16);
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if (result != 9)
    {
      swift_bridgeObjectRelease();
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v66 = 0xD00000000000002DLL;
      *(_QWORD *)(v66 + 8) = 0x8000000215130FD0;
      *(_BYTE *)(v66 + 16) = 0;
      return (uint64_t *)swift_willThrow();
    }
    v17 = __OFSUB__(a2, v13);
    v18 = a2 - v13;
    if (v17)
      goto LABEL_83;
    result = (uint64_t *)sub_2151136E0(&v77, v18, a2, a3);
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (a2)
      {
        v19 = 0;
        v20 = 0;
        v21 = *(_QWORD *)(v15 + 16);
        v74 = v15 + 32;
        v69 = result + 4;
        v70 = result;
        v67 = a6;
        v68 = v15;
        v72 = a5;
        v73 = a4;
        v71 = v21;
        do
        {
          if (!v21)
            goto LABEL_27;
          if ((unint64_t)v20 >> 3 >= *(_QWORD *)(v15 + 16))
          {
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
            goto LABEL_86;
          }
          if (((*(unsigned __int8 *)(v74 + ((unint64_t)v20 >> 3)) >> (v20 & 7)) & 1) != 0)
          {
            if (v20 >= a4 && v20 < a5)
            {
              v22 = *(_QWORD *)(a6 + 16);
              result = (uint64_t *)swift_beginAccess();
              v23 = *(_QWORD *)(v22 + 16);
              if (!v23)
                goto LABEL_91;
              v24 = *(_QWORD *)(v23 + 8);
              v25 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_80;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v27 = *(_QWORD *)(a6 + 16);
              v28 = (uint64_t **)(v27 + 16);
              if (isUniquelyReferenced_nonNull_native)
              {
                swift_beginAccess();
                result = *v28;
                if (!*v28)
                  goto LABEL_95;
                v29 = *result;
                if (*result < v25)
                {
                  if (v29 + 0x4000000000000000 < 0)
                    goto LABEL_87;
                  v30 = 2 * v29;
                  if (v30 <= v25)
                    v31 = v25;
                  else
                    v31 = v30;
                  sub_215097FD8((uint64_t)result, v31, (uint64_t *)&v76);
                  sub_215098740(*(_QWORD **)(v27 + 16));
                  *(_OWORD *)(v27 + 16) = v76;
                }
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v58 = *v28;
                if (!v58)
                  goto LABEL_96;
                v59 = *v58;
                if (*v58 < v25)
                {
                  if (v59 + 0x4000000000000000 < 0)
                    goto LABEL_88;
                  if (2 * v59 <= v25)
                    v59 = v25;
                  else
                    v59 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7720);
                v60 = swift_allocObject();
                sub_215096DE0((uint64_t)v58, v59, (uint64_t *)&v76);
                *(_OWORD *)(v60 + 16) = v76;
                swift_release();
                a6 = v67;
                *(_QWORD *)(v67 + 16) = v60;
                v27 = v60;
              }
              result = (uint64_t *)swift_beginAccess();
              v61 = *(_QWORD *)(v27 + 16);
              a5 = v72;
              if (!v61)
                goto LABEL_92;
              v62 = *(_QWORD *)(v61 + 16);
              v17 = __OFADD__(v62, 1);
              v63 = v62 + 1;
              a4 = v73;
              v21 = v71;
              if (v17)
                goto LABEL_81;
              *(_QWORD *)(v61 + 16) = v63;
              v64 = *(_QWORD *)(v61 + 8);
              v17 = __OFADD__(v64, 1);
              v65 = v64 + 1;
              if (v17)
                goto LABEL_82;
              *(_QWORD *)(v61 + 8) = v65;
            }
          }
          else
          {
LABEL_27:
            if (v20 >= a4 && v20 < a5)
            {
              if ((v19 & 0x8000000000000000) != 0)
                goto LABEL_75;
              if (v19 >= v70[2])
                goto LABEL_76;
              v32 = &v69[3 * v19];
              v75 = *(_OWORD *)v32;
              v33 = v32[2];
              v34 = *(_QWORD *)(a6 + 16);
              result = (uint64_t *)swift_beginAccess();
              v35 = *(_QWORD *)(v34 + 16);
              if (!v35)
                goto LABEL_89;
              v36 = *(_QWORD *)(v35 + 8);
              v37 = v36 + 1;
              if (__OFADD__(v36, 1))
                goto LABEL_77;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              v38 = swift_isUniquelyReferenced_nonNull_native();
              v39 = *(_QWORD *)(a6 + 16);
              v40 = (uint64_t **)(v39 + 16);
              if (v38)
              {
                swift_beginAccess();
                result = *v40;
                if (!*v40)
                  goto LABEL_93;
                v41 = *result;
                a4 = v73;
                if (*result < v37)
                {
                  if (v41 + 0x4000000000000000 < 0)
                    goto LABEL_84;
                  v42 = 2 * v41;
                  if (v42 <= v37)
                    v43 = v37;
                  else
                    v43 = v42;
                  sub_215097FD8((uint64_t)result, v43, (uint64_t *)&v76);
                  sub_215098740(*(_QWORD **)(v39 + 16));
                  *(_OWORD *)(v39 + 16) = v76;
                }
              }
              else
              {
                result = (uint64_t *)swift_beginAccess();
                v44 = *v40;
                if (!*v40)
                  goto LABEL_94;
                v45 = *v44;
                if (*v44 < v37)
                {
                  if (v45 + 0x4000000000000000 < 0)
                    goto LABEL_85;
                  if (2 * v45 <= v37)
                    v45 = v37;
                  else
                    v45 *= 2;
                }
                __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7720);
                v46 = swift_allocObject();
                sub_215096DE0((uint64_t)v44, v45, (uint64_t *)&v76);
                *(_OWORD *)(v46 + 16) = v76;
                swift_release();
                a6 = v67;
                *(_QWORD *)(v67 + 16) = v46;
                v39 = v46;
                a4 = v73;
              }
              result = (uint64_t *)swift_beginAccess();
              v47 = *(_QWORD **)(v39 + 16);
              if (!v47)
                goto LABEL_90;
              v48 = *v47 + 7;
              a5 = v72;
              if (__OFADD__(*v47, 7))
                goto LABEL_78;
              v49 = v47 + 8;
              if (v48 < 0)
                v48 = *v47 + 14;
              v50 = v48 >> 3;
              v52 = v50 - 1;
              v51 = v50 < 1;
              v53 = v50 + 62;
              if (!v51)
                v53 = v52;
              v54 = v47[1];
              v55 = (unint64_t)&v49[3 * v54] + (v53 & 0xFFFFFFFFFFFFFFC0);
              *(_OWORD *)(v55 + 64) = v75;
              *(_QWORD *)(v55 + 80) = v33;
              v56 = v54 - (v55 & 0xFFFFFFFFFFFFFFF8);
              if (v56 >= 0)
                v57 = 1 << v56;
              else
                v57 = 0;
              *((_BYTE *)v49 + v54 / 8) |= v57;
              if (__OFADD__(v54, 1))
                goto LABEL_79;
              v47[1] = v54 + 1;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = (uint64_t *)swift_bridgeObjectRelease();
              v15 = v68;
              v21 = v71;
            }
            v17 = __OFADD__(v19++, 1);
            if (v17)
              goto LABEL_74;
          }
          ++v20;
        }
        while (a2 != v20);
      }
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_bridgeObjectRelease();
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
  }
  return result;
}

uint64_t sub_21505BCB4(int64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[6];
  int64_t *v74;

  v74 = a1;
  result = sub_215059C38((uint64_t *)&v74, a2);
  if (!v5)
  {
    v13 = v12;
    if (v11 == a2)
    {
      swift_bridgeObjectRelease();
      v14 = sub_215057F90(0, a2, &qword_254DA7D40);
      sub_2150962E8((uint64_t)v14);
      return swift_bridgeObjectRelease();
    }
    if (result != 4)
    {
      swift_bridgeObjectRelease();
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v15 = 0xD00000000000002DLL;
      *(_QWORD *)(v15 + 8) = 0x8000000215130FD0;
      *(_BYTE *)(v15 + 16) = 0;
      return swift_willThrow();
    }
    if (a3 == a4)
      return swift_bridgeObjectRelease();
    if (a4 >= a3)
    {
      v71 = v12 + 32;
      v72 = *(_QWORD *)(v12 + 16);
      v70 = a4;
      while (a3 < a4)
      {
        v16 = a3 + 7;
        if (a3 >= 0)
          v16 = a3;
        if (!v72)
          goto LABEL_31;
        if (a3 < -7)
          goto LABEL_82;
        v17 = v16 >> 3;
        if (v16 >> 3 >= *(_QWORD *)(v13 + 16))
          goto LABEL_83;
        v18 = a3 - (v16 & 0xFFFFFFFFFFFFFFF8);
        v19 = *(unsigned __int8 *)(v71 + v17);
        v20 = v18 >= 0 ? 1 << v18 : 0;
        if ((v20 & v19) != 0)
        {
          v21 = *(_QWORD *)(a5 + 16);
          result = swift_beginAccess();
          v22 = *(_QWORD *)(v21 + 16);
          if (!v22)
            goto LABEL_96;
          v23 = *(_QWORD *)(v22 + 8);
          v24 = v23 + 1;
          if (__OFADD__(v23, 1))
            goto LABEL_85;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v26 = *(_QWORD *)(a5 + 16);
          v27 = (uint64_t *)(v26 + 16);
          if (isUniquelyReferenced_nonNull_native)
          {
            swift_beginAccess();
            result = *v27;
            if (!*v27)
              goto LABEL_100;
            v28 = *(_QWORD *)result;
            if (*(_QWORD *)result < v24)
            {
              if (v28 + 0x4000000000000000 < 0)
                goto LABEL_92;
              v29 = 2 * v28;
              if (v29 <= v24)
                v30 = v24;
              else
                v30 = v29;
              sub_2150977D8(result, v30, v73);
              sub_215098734(*(_QWORD **)(v26 + 16), *(_QWORD *)(v26 + 24));
              *(_OWORD *)(v26 + 16) = *(_OWORD *)v73;
            }
          }
          else
          {
            result = swift_beginAccess();
            v47 = (uint64_t *)*v27;
            if (!*v27)
              goto LABEL_101;
            v48 = *v47;
            if (*v47 < v24)
            {
              if (v48 + 0x4000000000000000 < 0)
                goto LABEL_93;
              if (2 * v48 <= v24)
                v48 = v24;
              else
                v48 *= 2;
            }
            __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7738);
            v49 = swift_allocObject();
            sub_21509678C(v73, v47, *(_QWORD *)(v26 + 24), v48);
            *(_OWORD *)(v49 + 16) = *(_OWORD *)v73;
            swift_release();
            *(_QWORD *)(a5 + 16) = v49;
            v26 = v49;
            a4 = v70;
          }
          result = swift_beginAccess();
          v50 = *(_QWORD *)(v26 + 16);
          if (!v50)
            goto LABEL_97;
          v51 = *(_QWORD *)(v50 + 16);
          v52 = __OFADD__(v51, 1);
          v53 = v51 + 1;
          if (v52)
            goto LABEL_86;
          *(_QWORD *)(v50 + 16) = v53;
          v54 = *(_QWORD *)(v50 + 8);
          v52 = __OFADD__(v54, 1);
          v55 = v54 + 1;
          if (v52)
            goto LABEL_87;
          *(_QWORD *)(v50 + 8) = v55;
        }
        else
        {
LABEL_31:
          v31 = *v74++;
          if (v31 < 0)
            goto LABEL_84;
          v32 = sub_21502EAC8(0, v31, 0, MEMORY[0x24BEE4AF8]);
          if (v31)
          {
            while (1)
            {
              v34 = *(unsigned __int8 *)v74;
              v33 = *(unsigned __int8 *)v74;
              v74 = (int64_t *)((char *)v74 + 1);
              result = (v34 - 128);
              if ((result & 0xFFFFFF00) != 0)
                break;
              if (result > 9u)
              {
                sub_21501D914();
                swift_allocError();
                *(_QWORD *)v69 = v33;
                *(_QWORD *)(v69 + 8) = 0;
                *(_BYTE *)(v69 + 16) = 2;
                swift_willThrow();
                swift_bridgeObjectRelease();
                return swift_bridgeObjectRelease();
              }
              sub_21506B1C0(result);
              v36 = v32[2];
              v35 = v32[3];
              if (v36 >= v35 >> 1)
                v32 = sub_21502EAC8((_QWORD *)(v35 > 1), v36 + 1, 1, v32);
              v32[2] = v36 + 1;
              sub_215053A5C((uint64_t)v73, (uint64_t)&v32[4 * v36 + 4]);
              if (!--v31)
                goto LABEL_38;
            }
            __break(1u);
            break;
          }
LABEL_38:
          v37 = *(_QWORD *)(a5 + 16);
          result = swift_beginAccess();
          v38 = *(_QWORD *)(v37 + 16);
          if (!v38)
            goto LABEL_98;
          v39 = *(_QWORD *)(v38 + 8);
          v40 = v39 + 1;
          if (__OFADD__(v39, 1))
            goto LABEL_88;
          swift_bridgeObjectRetain();
          v41 = swift_isUniquelyReferenced_nonNull_native();
          v42 = *(_QWORD *)(a5 + 16);
          v43 = (uint64_t *)(v42 + 16);
          if (v41)
          {
            swift_beginAccess();
            result = *v43;
            if (!*v43)
              goto LABEL_103;
            v44 = *(_QWORD *)result;
            if (*(_QWORD *)result < v40)
            {
              if (v44 + 0x4000000000000000 < 0)
                goto LABEL_94;
              v45 = 2 * v44;
              if (v45 <= v40)
                v46 = v40;
              else
                v46 = v45;
              sub_2150977D8(result, v46, v73);
              sub_215098734(*(_QWORD **)(v42 + 16), *(_QWORD *)(v42 + 24));
              *(_OWORD *)(v42 + 16) = *(_OWORD *)v73;
            }
          }
          else
          {
            result = swift_beginAccess();
            v56 = (uint64_t *)*v43;
            if (!*v43)
              goto LABEL_102;
            v57 = *v56;
            if (*v56 < v40)
            {
              if (v57 + 0x4000000000000000 < 0)
                goto LABEL_95;
              if (2 * v57 <= v40)
                v57 = v40;
              else
                v57 *= 2;
            }
            __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7738);
            v58 = swift_allocObject();
            sub_21509678C(v73, v56, *(_QWORD *)(v42 + 24), v57);
            *(_OWORD *)(v58 + 16) = *(_OWORD *)v73;
            swift_release();
            *(_QWORD *)(a5 + 16) = v58;
            v42 = v58;
            a4 = v70;
          }
          result = swift_beginAccess();
          v59 = *(_QWORD **)(v42 + 16);
          if (!v59)
            goto LABEL_99;
          v60 = *v59 + 7;
          if (__OFADD__(*v59, 7))
            goto LABEL_89;
          v61 = v59 + 8;
          if (v60 < 0)
            v60 = *v59 + 14;
          v62 = v60 >> 3;
          v64 = v62 - 1;
          v63 = v62 < 1;
          v65 = v62 + 62;
          if (!v63)
            v65 = v64;
          v66 = v59[1];
          *(_QWORD *)((char *)&v61[v66 + 8] + (v65 & 0xFFFFFFFFFFFFC0)) = v32;
          v67 = v66 - (v65 & 0xFFFFFFFFFFFFFFF8);
          if (v67 >= 0)
            v68 = 1 << v67;
          else
            v68 = 0;
          *((_BYTE *)v61 + v66 / 8) |= v68;
          if (__OFADD__(v66, 1))
            goto LABEL_90;
          v59[1] = v66 + 1;
          result = swift_bridgeObjectRelease();
        }
        if (++a3 == a4)
          return swift_bridgeObjectRelease();
      }
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
    }
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
  }
  return result;
}

uint64_t *sub_21505C2FC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;

  v68 = a1;
  result = (uint64_t *)sub_215059C38((uint64_t *)&v68, a2);
  if (!v5)
  {
    v13 = v12;
    if (v11 == a2)
    {
      swift_bridgeObjectRelease();
      v14 = sub_215057F90(0, a2, &qword_254DA7D48);
      sub_2150962FC((uint64_t)v14);
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if (result == 5)
    {
      if (a3 == a4)
        return (uint64_t *)swift_bridgeObjectRelease();
      if (a4 >= a3)
      {
        v65 = v12 + 32;
        v66 = *(_QWORD *)(v12 + 16);
        v64 = v12;
        while (a3 < a4)
        {
          v16 = a3 + 7;
          if (a3 >= 0)
            v16 = a3;
          if (!v66)
            goto LABEL_32;
          if (a3 < -7)
            goto LABEL_73;
          v17 = v16 >> 3;
          if (v16 >> 3 >= *(_QWORD *)(v13 + 16))
            goto LABEL_74;
          v18 = a3 - (v16 & 0xFFFFFFFFFFFFFFF8);
          v19 = *(unsigned __int8 *)(v65 + v17);
          v20 = v18 >= 0 ? 1 << v18 : 0;
          if ((v20 & v19) != 0)
          {
            v21 = *(_QWORD *)(a5 + 16);
            result = (uint64_t *)swift_beginAccess();
            v22 = *(_QWORD *)(v21 + 16);
            if (!v22)
              goto LABEL_88;
            v23 = *(_QWORD *)(v22 + 8);
            v24 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_78;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v26 = *(_QWORD *)(a5 + 16);
            v27 = (uint64_t **)(v26 + 16);
            if (isUniquelyReferenced_nonNull_native)
            {
              swift_beginAccess();
              result = *v27;
              if (!*v27)
                goto LABEL_92;
              v28 = *result;
              if (*result < v24)
              {
                if (v28 + 0x4000000000000000 < 0)
                  goto LABEL_83;
                v29 = 2 * v28;
                if (v29 <= v24)
                  v30 = v24;
                else
                  v30 = v29;
                sub_2150977D8((uint64_t)result, v30, (uint64_t *)&v67);
                sub_215098728(*(_QWORD **)(v26 + 16), *(_QWORD *)(v26 + 24));
                *(_OWORD *)(v26 + 16) = v67;
              }
            }
            else
            {
              result = (uint64_t *)swift_beginAccess();
              v55 = *v27;
              if (!*v27)
                goto LABEL_93;
              v56 = *v55;
              if (*v55 < v24)
              {
                if (v56 + 0x4000000000000000 < 0)
                  goto LABEL_84;
                if (2 * v56 <= v24)
                  v56 = v24;
                else
                  v56 *= 2;
              }
              __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7740);
              v57 = swift_allocObject();
              sub_21509678C(&v67, v55, *(_QWORD *)(v26 + 24), v56);
              *(_OWORD *)(v57 + 16) = v67;
              swift_release();
              *(_QWORD *)(a5 + 16) = v57;
              v26 = v57;
              v13 = v64;
            }
            result = (uint64_t *)swift_beginAccess();
            v58 = *(_QWORD *)(v26 + 16);
            if (!v58)
              goto LABEL_89;
            v59 = *(_QWORD *)(v58 + 16);
            v60 = __OFADD__(v59, 1);
            v61 = v59 + 1;
            if (v60)
              goto LABEL_79;
            *(_QWORD *)(v58 + 16) = v61;
            v62 = *(_QWORD *)(v58 + 8);
            v60 = __OFADD__(v62, 1);
            v63 = v62 + 1;
            if (v60)
              goto LABEL_80;
            *(_QWORD *)(v58 + 8) = v63;
          }
          else
          {
LABEL_32:
            v31 = sub_21506B51C(&v68);
            v32 = *(_QWORD *)(a5 + 16);
            result = (uint64_t *)swift_beginAccess();
            v33 = *(_QWORD *)(v32 + 16);
            if (!v33)
              goto LABEL_86;
            v34 = *(_QWORD *)(v33 + 8);
            v35 = v34 + 1;
            if (__OFADD__(v34, 1))
              goto LABEL_75;
            swift_bridgeObjectRetain();
            v36 = swift_isUniquelyReferenced_nonNull_native();
            v37 = *(_QWORD *)(a5 + 16);
            v38 = (uint64_t **)(v37 + 16);
            if (v36)
            {
              swift_beginAccess();
              result = *v38;
              if (!*v38)
                goto LABEL_90;
              v39 = *result;
              if (*result < v35)
              {
                if (v39 + 0x4000000000000000 < 0)
                  goto LABEL_81;
                v40 = 2 * v39;
                if (v40 <= v35)
                  v41 = v35;
                else
                  v41 = v40;
                sub_2150977D8((uint64_t)result, v41, (uint64_t *)&v67);
                sub_215098728(*(_QWORD **)(v37 + 16), *(_QWORD *)(v37 + 24));
                *(_OWORD *)(v37 + 16) = v67;
              }
            }
            else
            {
              result = (uint64_t *)swift_beginAccess();
              v42 = *v38;
              if (!*v38)
                goto LABEL_91;
              v43 = *v42;
              if (*v42 < v35)
              {
                if (v43 + 0x4000000000000000 < 0)
                  goto LABEL_82;
                if (2 * v43 <= v35)
                  v43 = v35;
                else
                  v43 *= 2;
              }
              __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7740);
              v44 = swift_allocObject();
              sub_21509678C(&v67, v42, *(_QWORD *)(v37 + 24), v43);
              *(_OWORD *)(v44 + 16) = v67;
              swift_release();
              *(_QWORD *)(a5 + 16) = v44;
              v37 = v44;
              v13 = v64;
            }
            result = (uint64_t *)swift_beginAccess();
            v45 = *(_QWORD **)(v37 + 16);
            if (!v45)
              goto LABEL_87;
            v46 = *v45 + 7;
            if (__OFADD__(*v45, 7))
              goto LABEL_76;
            v47 = v45 + 8;
            if (v46 < 0)
              v46 = *v45 + 14;
            v48 = v46 >> 3;
            v50 = v48 - 1;
            v49 = v48 < 1;
            v51 = v48 + 62;
            if (!v49)
              v51 = v50;
            v52 = v45[1];
            *(_QWORD *)((char *)&v47[v52 + 8] + (v51 & 0xFFFFFFFFFFFFC0)) = v31;
            v53 = v52 - (v51 & 0xFFFFFFFFFFFFFFF8);
            if (v53 >= 0)
              v54 = 1 << v53;
            else
              v54 = 0;
            *((_BYTE *)v47 + v52 / 8) |= v54;
            if (__OFADD__(v52, 1))
              goto LABEL_77;
            v45[1] = v52 + 1;
            result = (uint64_t *)swift_bridgeObjectRelease();
          }
          if (a4 == ++a3)
            return (uint64_t *)swift_bridgeObjectRelease();
        }
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
      }
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v15 = 0xD00000000000002DLL;
      *(_QWORD *)(v15 + 8) = 0x8000000215130FD0;
      *(_BYTE *)(v15 + 16) = 0;
      return (uint64_t *)swift_willThrow();
    }
  }
  return result;
}

unint64_t sub_21505C84C(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD v27[2];
  uint64_t v28;

  v28 = a5;
  if (a2 == a3)
    return result;
  v13 = a2;
  if (a3 < a2)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (*(_QWORD *)(a8 + 16) <= result)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a2 >= a3)
    goto LABEL_24;
  if (a2 < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v15 = *(_QWORD *)(a8 + 8 * result + 32);
  if (*(_QWORD *)(v15 + 16) <= (unint64_t)a2)
    goto LABEL_25;
  v16 = (__int128 *)(v15 + 32 + 48 * a2);
  v17 = v16[1];
  v26 = *v16;
  v27[0] = v17;
  *(_OWORD *)((char *)v27 + 9) = *(__int128 *)((char *)v16 + 25);
  v25 = a3 - 1;
  if (a3 - 1 == a2)
  {
    v18 = v28;
    if (v28 >= a4)
      goto LABEL_12;
    __break(1u);
  }
  v18 = *((_QWORD *)&v27[0] + 1);
  if (*((uint64_t *)&v27[0] + 1) < a4)
  {
LABEL_32:
    __break(1u);
    return result;
  }
LABEL_12:
  result = a11(&v26, a4, v18, a6, a7, a8, a9, a10);
  if (!v11)
  {
    v24 = a6;
    if (v13 + 1 != a3)
    {
      v21 = (__int128 *)(v15 + 48 * v13 + 80);
      while (v13 + 1 < a3)
      {
        if ((unint64_t)(v13 + 1) >= *(_QWORD *)(v15 + 16))
          goto LABEL_25;
        v22 = v21[1];
        v26 = *v21;
        v27[0] = v22;
        *(_OWORD *)((char *)v27 + 9) = *(__int128 *)((char *)v21 + 25);
        if (a3 - 2 == v13)
        {
          v23 = v28;
          if (v28 < 0)
            goto LABEL_26;
        }
        else
        {
          v23 = *((_QWORD *)&v27[0] + 1);
          if ((*((_QWORD *)&v27[0] + 1) & 0x8000000000000000) != 0)
            goto LABEL_27;
        }
        result = a11(&v26, 0, v23, v24, a7, a8, a9, a10);
        ++v13;
        v21 += 3;
        if (v25 == v13)
          return result;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
  return result;
}

unint64_t sub_21505CA28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254DA7D28;
  if (!qword_254DA7D28)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_253F0D1D0);
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BDCFBE0], v1);
    atomic_store(result, (unint64_t *)&qword_254DA7D28);
  }
  return result;
}

__n128 sub_21505CA74@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, __n128 *a4@<X8>)
{
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  __n128 result;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v23;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[8];
  uint64_t v36;
  __n128 v37[2];
  unint64_t v38;
  int v39;
  int v40;

  v4 = *a3;
  v5 = *((_QWORD *)a3 + 1);
  v6 = *((_QWORD *)a3 + 2);
  v7 = *((_QWORD *)a3 + 3);
  v8 = a3[32];
  v9 = *((_QWORD *)a3 + 5);
  v10 = a3[48];
  v39 = a3[49];
  v40 = v10;
  v11 = a3[50];
  v12 = a3[51];
  v13 = a3[52];
  sub_2150BFF5C(a1, a2);
  v21 = v4;
  LOBYTE(v26) = v4;
  *((_QWORD *)&v26 + 1) = v5;
  *(_QWORD *)&v27 = v6;
  *((_QWORD *)&v27 + 1) = v7;
  LOBYTE(v28) = v8;
  v15 = v14;
  *((_QWORD *)&v28 + 1) = v9;
  LOBYTE(v29) = v40;
  BYTE1(v29) = v39;
  BYTE2(v29) = v11;
  BYTE3(v29) = v12;
  BYTE4(v29) = v13;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  sub_2150BE90C(v15, (char *)&v26, (uint64_t)v35);
  if (v23)
  {
    sub_21501F0D8(a1, a2);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  else
  {
    v20 = v15;
    sub_2150BEDFC((uint64_t)v37);
    v18 = v37[1];
    v19 = v37[0];
    v17 = v38;
    v32 = v35[6];
    v33 = v35[7];
    v34 = v36;
    v28 = v35[2];
    v29 = v35[3];
    v30 = v35[4];
    v31 = v35[5];
    v26 = v35[0];
    v27 = v35[1];
    sub_215060354((uint64_t)v37);
    sub_2150602E4((uint64_t)&v26);
    sub_21501F0D8(a1, a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    a4->n128_u64[0] = v20;
    a4->n128_u8[8] = v21;
    a4[1].n128_u64[0] = v5;
    a4[1].n128_u64[1] = v6;
    a4[2].n128_u64[0] = v7;
    a4[2].n128_u8[8] = v8;
    a4[3].n128_u64[0] = v9;
    a4[3].n128_u8[8] = v40;
    a4[3].n128_u8[9] = v39;
    a4[3].n128_u8[10] = v11;
    a4[3].n128_u8[11] = v12;
    a4[3].n128_u8[12] = v13;
    result = v18;
    a4[4] = v19;
    a4[5] = v18;
    a4[6].n128_u64[0] = v17;
  }
  return result;
}

uint64_t sub_21505CD60(int64_t a1, _QWORD *a2, char **a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  _QWORD v53[2];
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v51 = a5;
  v10 = sub_21512FB0C();
  result = MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2[10];
  v58 = a2[12];
  if (v13 <= a1)
  {
LABEL_45:
    v54 = 0;
    v55 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_215130178();
    sub_21512FB90();
    v53[0] = a1;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v53[0] = v13;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  v14 = a2[11];
  if (v14 < 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v45 = a4;
  v46 = v5;
  if (!v14)
    return result;
  v15 = a1 * v14;
  if ((unsigned __int128)(a1 * (__int128)v14) >> 64 != (a1 * v14) >> 63)
    goto LABEL_43;
  v16 = 0;
  v17 = a2[8];
  v50 = v14 - 1;
  v48 = a1 * v14;
  v49 = v58 + 32;
  v18 = v17 - 1;
  v47 = v14;
  while (1)
  {
    if (v16 == v14)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v15 < 0)
      goto LABEL_38;
    v19 = v15 + v16;
    v20 = *(_QWORD *)(v58 + 16);
    if (v15 + v16 >= v20)
      goto LABEL_39;
    v21 = v19 + 1;
    if (v19 + 1 >= v20)
      goto LABEL_40;
    v22 = *(_QWORD *)(v49 + 8 * v19);
    v23 = *(_QWORD *)(v49 + 8 * v21);
    if (v16 == v50)
    {
      if (v22 < v23)
      {
        while (1)
        {
          v24 = *(unsigned __int8 *)(v18 + v23);
          if (v24 != 13 && v24 != 10)
            break;
          if (v22 >= --v23)
          {
            v23 = v22;
            break;
          }
        }
      }
    }
    else
    {
      v23 -= v22 < v23;
    }
    if (!v17)
      goto LABEL_44;
    a1 = v23 - v22;
    if (__OFSUB__(v23, v22))
      goto LABEL_41;
    v13 = v17;
    v26 = v17 + v22;
    sub_2150E43E4(v17 + v22, v23 - v22);
    v27 = *a3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = sub_21502EBE8(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v29 = *((_QWORD *)v27 + 2);
    v28 = *((_QWORD *)v27 + 3);
    if (v29 >= v28 >> 1)
      v27 = sub_21502EBE8((char *)(v28 > 1), v29 + 1, 1, v27);
    *((_QWORD *)v27 + 2) = v29 + 1;
    v27[v29 + 32] = 0;
    *a3 = v27;
    sub_21512FB00();
    v30 = sub_21512FAB8();
    if (!v31)
      break;
    v32 = v30;
    v33 = v31;
    v34 = v51;
    a1 = *v51;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v34 = a1;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_21502DDE0(0, *(_QWORD *)(a1 + 16) + 1, 1, (char *)a1);
      a1 = result;
      *v51 = result;
    }
    v36 = *(_QWORD *)(a1 + 16);
    v35 = *(_QWORD *)(a1 + 24);
    if (v36 >= v35 >> 1)
    {
      result = (uint64_t)sub_21502DDE0((char *)(v35 > 1), v36 + 1, 1, (char *)a1);
      a1 = result;
      *v51 = result;
    }
    ++v16;
    *(_QWORD *)(a1 + 16) = v36 + 1;
    v37 = a1 + 16 * v36;
    *(_QWORD *)(v37 + 32) = v32;
    *(_QWORD *)(v37 + 40) = v33;
    v14 = v47;
    v15 = v48;
    v17 = v13;
    if (v16 == v47)
      return result;
  }
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D50);
  v56 = v38;
  v57 = sub_21506037C((unint64_t *)&qword_254DA7D58, &qword_254DA7D50, MEMORY[0x24BDCF860]);
  v54 = v26;
  v55 = a1;
  v39 = __swift_project_boxed_opaque_existential_1(&v54, v38);
  if (*v39)
    v40 = (_BYTE *)(*v39 + v39[1]);
  else
    v40 = 0;
  sub_215058FEC((_BYTE *)*v39, v40, v53);
  v41 = v53[0];
  v42 = v53[1];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v54);
  sub_2150602A0();
  swift_allocError();
  *(_QWORD *)v43 = v45;
  *(_QWORD *)(v43 + 8) = v16;
  *(_QWORD *)(v43 + 16) = v41;
  *(_QWORD *)(v43 + 24) = v42;
  *(_QWORD *)(v43 + 32) = 0;
  *(_BYTE *)(v43 + 40) = 0;
  return swift_willThrow();
}

uint64_t sub_21505D26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int isUniquelyReferenced_nonNull_native;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char **v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char **v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[2];
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;

  v101 = a5;
  v9 = sub_21512FB0C();
  result = MEMORY[0x24BDAC7A8](v9);
  v93 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t)a4[11];
  v100 = a4[12];
  if (v12 <= a1)
  {
LABEL_125:
    v107 = *a4;
    *(_QWORD *)&v104 = 0;
    *((_QWORD *)&v104 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_215130178();
    sub_21512FB90();
    v102 = a1;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v102 = v12;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (a2 == a3)
    return result;
  if (a3 < a2)
  {
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  v13 = a4[8];
  v98 = v100 + 4;
  v99 = v12 - 1;
  v94 = (char **)(v101 + 112);
  v107 = (uint64_t *)(v101 + 224);
  v14 = (uint64_t)v13 - 1;
  v92 = v12;
  v95 = a1;
  v96 = v13;
  v97 = a3;
  while (1)
  {
    if (a2 >= a3)
    {
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    v15 = a2 * v12;
    if ((unsigned __int128)(a2 * (__int128)v12) >> 64 != (a2 * v12) >> 63)
      goto LABEL_95;
    v16 = __OFADD__(v15, a1);
    v17 = v15 + a1;
    if (v16)
      goto LABEL_96;
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_97;
    v18 = v100[2];
    if (v17 >= v18)
      goto LABEL_98;
    v19 = v17 + 1;
    if (v17 + 1 >= v18)
      goto LABEL_99;
    v20 = v98[v17];
    v21 = v98[v19];
    if (v99 == a1)
    {
      if (v20 < v21)
      {
        while (1)
        {
          v22 = *(unsigned __int8 *)(v14 + v21);
          if (v22 != 13 && v22 != 10)
            break;
          if (v20 >= --v21)
          {
            v21 = v20;
            break;
          }
        }
      }
    }
    else
    {
      v21 -= v20 < v21;
    }
    if (!v13)
      goto LABEL_114;
    v24 = v21 - v20;
    if (__OFSUB__(v21, v20))
      goto LABEL_100;
    v25 = (unsigned __int8 *)v13 + v20;
    if ((sub_2150C03F0((uint64_t)v13 + v20, v24, *(_QWORD *)(v101 + 104)) & 1) != 0)
    {
      a4 = (uint64_t **)*v107;
      swift_beginAccess();
      v26 = a4[2];
      if (!v26)
        goto LABEL_115;
      v27 = v26[1];
      v28 = v27 + 1;
      if (__OFADD__(v27, 1))
        goto LABEL_101;
      v29 = v107;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a4 = (uint64_t **)*v29;
      v31 = a4 + 2;
      if (isUniquelyReferenced_nonNull_native)
      {
        swift_beginAccess();
        v32 = *v31;
        if (!*v31)
          goto LABEL_119;
        v33 = *v32;
        if (*v32 < v28)
        {
          if (v33 + 0x4000000000000000 < 0)
            goto LABEL_107;
          v34 = 2 * v33;
          if (v34 <= v28)
            v35 = v28;
          else
            v35 = v34;
          sub_2150975F0((uint64_t)v32, v35, (uint64_t *)&v104);
          v36 = a4[2];
          if (!v36)
            goto LABEL_123;
          a3 = v97;
          if (v36[1] < 0)
            goto LABEL_109;
          MEMORY[0x2199DC578]();
          *(_OWORD *)v31 = v104;
          goto LABEL_66;
        }
      }
      else
      {
        swift_beginAccess();
        v61 = *v31;
        if (!v61)
          goto LABEL_118;
        v62 = *v61;
        if (*v61 < v28)
        {
          if (v62 + 0x4000000000000000 < 0)
            goto LABEL_108;
          if (2 * v62 <= v28)
            v62 = v28;
          else
            v62 *= 2;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D438);
        v63 = swift_allocObject();
        sub_215096600((uint64_t)v61, v62, (uint64_t *)&v104);
        *(_OWORD *)(v63 + 16) = v104;
        swift_release();
        *v107 = v63;
        a4 = (uint64_t **)v63;
        a1 = v95;
      }
      a3 = v97;
LABEL_66:
      result = swift_beginAccess();
      v64 = a4[2];
      if (!v64)
        goto LABEL_116;
      v65 = v64[2];
      v16 = __OFADD__(v65, 1);
      v66 = v65 + 1;
      v13 = v96;
      if (v16)
        goto LABEL_102;
      v64[2] = v66;
      v67 = v64[1];
      v16 = __OFADD__(v67, 1);
      v68 = v67 + 1;
      if (v16)
        goto LABEL_103;
      v64[1] = v68;
      goto LABEL_6;
    }
    v37 = sub_2150C1D1C(v25, v24);
    if ((v38 & 1) != 0)
      break;
    a4 = (uint64_t **)v37;
    v39 = (_QWORD *)*v107;
    swift_beginAccess();
    v40 = v39[2];
    if (!v40)
      goto LABEL_117;
    v41 = *(_QWORD *)(v40 + 8);
    v42 = v41 + 1;
    if (__OFADD__(v41, 1))
      goto LABEL_104;
    v43 = v107;
    v44 = swift_isUniquelyReferenced_nonNull_native();
    v45 = *v43;
    v46 = (uint64_t **)(*v43 + 16);
    if (v44)
    {
      swift_beginAccess();
      v47 = *v46;
      if (!*v46)
        goto LABEL_121;
      v48 = *v47;
      if (*v47 < v42)
      {
        if (v48 + 0x4000000000000000 < 0)
          goto LABEL_111;
        v49 = 2 * v48;
        if (v49 <= v42)
          v50 = v42;
        else
          v50 = v49;
        sub_2150975F0((uint64_t)v47, v50, (uint64_t *)&v104);
        v51 = *(_QWORD *)(v45 + 16);
        if (!v51)
          goto LABEL_124;
        if ((*(_QWORD *)(v51 + 8) & 0x8000000000000000) != 0)
          goto LABEL_112;
        MEMORY[0x2199DC578]();
        *(_OWORD *)v46 = v104;
      }
    }
    else
    {
      swift_beginAccess();
      v69 = *v46;
      if (!v69)
        goto LABEL_122;
      a1 = *v69;
      if (*v69 < v42)
      {
        if (a1 + 0x4000000000000000 < 0)
          goto LABEL_110;
        if (2 * a1 <= v42)
          a1 = v42;
        else
          a1 *= 2;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D438);
      v70 = swift_allocObject();
      sub_215096600((uint64_t)v69, a1, (uint64_t *)&v104);
      *(_OWORD *)(v70 + 16) = v104;
      swift_release();
      *v107 = v70;
      v45 = v70;
      a1 = v95;
    }
    result = swift_beginAccess();
    v71 = *(_QWORD **)(v45 + 16);
    if (!v71)
      goto LABEL_120;
    v72 = *v71 + 7;
    a3 = v97;
    if (__OFADD__(*v71, 7))
      goto LABEL_105;
    v73 = v71 + 8;
    if (v72 < 0)
      v72 = *v71 + 14;
    v74 = v72 >> 3;
    v76 = v74 - 1;
    v75 = v74 < 1;
    v77 = v74 + 62;
    if (!v75)
      v77 = v76;
    *(_QWORD *)((char *)&v73[v71[1] + 8] + (v77 & 0xFFFFFFFFFFFFC0)) = a4;
    v78 = v71[1];
    v79 = v78 + 7;
    if (v78 >= 0)
      v79 = v71[1];
    v80 = v79 >> 3;
    v81 = v78 - (v79 & 0xFFFFFFFFFFFFFFF8);
    if (v81 >= 0)
      v82 = 1 << v81;
    else
      v82 = 0;
    *((_BYTE *)v73 + v80) |= v82;
    v16 = __OFADD__(v78, 1);
    v83 = v78 + 1;
    if (v16)
      goto LABEL_106;
    v71[1] = v83;
    v13 = v96;
LABEL_6:
    if (++a2 == a3)
      return result;
  }
  v52 = v94;
  sub_2150E43E4((uint64_t)v25, v24);
  v53 = *v52;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v53 = sub_21502EBE8(0, *((_QWORD *)v53 + 2) + 1, 1, v53);
  v55 = *((_QWORD *)v53 + 2);
  v54 = *((_QWORD *)v53 + 3);
  if (v55 >= v54 >> 1)
    v53 = sub_21502EBE8((char *)(v54 > 1), v55 + 1, 1, v53);
  *((_QWORD *)v53 + 2) = v55 + 1;
  v53[v55 + 32] = 0;
  *v94 = v53;
  sub_21512FB00();
  v56 = sub_21512FAB8();
  if (v57)
  {
    v58 = sub_2150C1E3C(v56, v57);
    v60 = v59;
    swift_bridgeObjectRelease();
    if ((v60 & 1) == 0)
    {
      a4 = (uint64_t **)v107;
      result = sub_2150EE414(v58, 0);
      v12 = v92;
      a1 = v95;
      v13 = v96;
      a3 = v97;
      goto LABEL_6;
    }
  }
  v84 = *(_QWORD *)(v101 + 176);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D50);
  v105 = v85;
  v106 = sub_21506037C((unint64_t *)&qword_254DA7D58, &qword_254DA7D50, MEMORY[0x24BDCF860]);
  *(_QWORD *)&v104 = v25;
  *((_QWORD *)&v104 + 1) = v24;
  v86 = __swift_project_boxed_opaque_existential_1(&v104, v85);
  if (*v86)
    v87 = (_BYTE *)(*v86 + v86[1]);
  else
    v87 = 0;
  sub_215058FEC((_BYTE *)*v86, v87, v103);
  v88 = v103[0];
  v89 = v103[1];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v104);
  sub_2150602A0();
  swift_allocError();
  *(_QWORD *)v90 = a2;
  *(_QWORD *)(v90 + 8) = v84;
  *(_QWORD *)(v90 + 16) = 0;
  *(_QWORD *)(v90 + 24) = v88;
  *(_QWORD *)(v90 + 32) = v89;
  *(_BYTE *)(v90 + 40) = 1;
  return swift_willThrow();
}

uint64_t sub_21505DB68(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v5 = result;
  v82 = a4[12];
  v87 = a4[11];
  if (v87 <= result)
  {
LABEL_116:
    *(_QWORD *)&v84 = 0;
    *((_QWORD *)&v84 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_215130178();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  v7 = a2;
  if (a2 == a3)
    return result;
  if (a3 < a2)
  {
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  v9 = a4[8];
  v80 = v82 + 32;
  v81 = v87 - 1;
  v10 = v9 - 1;
  v78 = result;
  v79 = v9;
  while (1)
  {
    if (v7 >= a3)
    {
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    v11 = v7 * v87;
    if ((unsigned __int128)(v7 * (__int128)v87) >> 64 != (v7 * v87) >> 63)
      goto LABEL_87;
    v12 = __OFADD__(v11, v5);
    v13 = v11 + v5;
    if (v12)
      goto LABEL_88;
    if ((v13 & 0x8000000000000000) != 0)
      goto LABEL_89;
    v14 = *(_QWORD *)(v82 + 16);
    if (v13 >= v14)
      goto LABEL_90;
    v15 = v13 + 1;
    if (v13 + 1 >= v14)
      goto LABEL_91;
    v16 = *(_QWORD *)(v80 + 8 * v13);
    v17 = *(_QWORD *)(v80 + 8 * v15);
    if (v81 == v5)
    {
      if (v16 < v17)
      {
        while (1)
        {
          v18 = *(unsigned __int8 *)(v10 + v17);
          if (v18 != 13 && v18 != 10)
            break;
          if (v16 >= --v17)
          {
            v17 = v16;
            break;
          }
        }
      }
    }
    else
    {
      v17 -= v16 < v17;
    }
    if (!v9)
      goto LABEL_105;
    v20 = v17 - v16;
    if (__OFSUB__(v17, v16))
      goto LABEL_92;
    v21 = v9 + v16;
    if ((sub_2150C03F0(v9 + v16, v17 - v16, a5[13]) & 1) != 0)
    {
      v22 = a5[30];
      swift_beginAccess();
      v23 = *(_QWORD *)(v22 + 16);
      if (!v23)
        goto LABEL_106;
      v24 = *(_QWORD *)(v23 + 8);
      v25 = v24 + 1;
      if (__OFADD__(v24, 1))
        goto LABEL_93;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v27 = a5[30];
      v28 = (uint64_t **)(v27 + 16);
      if (isUniquelyReferenced_nonNull_native)
      {
        swift_beginAccess();
        v29 = *v28;
        if (!*v28)
          goto LABEL_111;
        v30 = *v29;
        if (*v29 < v25)
        {
          if (v30 + 0x4000000000000000 < 0)
            goto LABEL_98;
          v31 = 2 * v30;
          if (v31 <= v25)
            v32 = v25;
          else
            v32 = v31;
          sub_215097C2C((uint64_t)v29, v32, (uint64_t *)&v84);
          v33 = *(_QWORD *)(v27 + 16);
          if (!v33)
            goto LABEL_114;
          if ((*(_QWORD *)(v33 + 8) & 0x8000000000000000) != 0)
            goto LABEL_100;
          MEMORY[0x2199DC578]();
          *(_OWORD *)v28 = v84;
        }
      }
      else
      {
        swift_beginAccess();
        v49 = *v28;
        if (!v49)
          goto LABEL_110;
        v50 = *v49;
        if (*v49 < v25)
        {
          if (v50 + 0x4000000000000000 < 0)
            goto LABEL_99;
          if (2 * v50 <= v25)
            v50 = v25;
          else
            v50 *= 2;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D188);
        v51 = swift_allocObject();
        sub_215096C70((uint64_t)v49, v50, (uint64_t *)&v84);
        *(_OWORD *)(v51 + 16) = v84;
        swift_release();
        a5[30] = v51;
        v27 = v51;
        v5 = v78;
      }
      result = swift_beginAccess();
      v52 = *(_QWORD *)(v27 + 16);
      if (!v52)
        goto LABEL_107;
      v53 = *(_QWORD *)(v52 + 16);
      v12 = __OFADD__(v53, 1);
      v54 = v53 + 1;
      v9 = v79;
      if (v12)
        goto LABEL_94;
      v56 = *(_QWORD *)(v52 + 8);
      v55 = (_QWORD *)(v52 + 8);
      v55[1] = v54;
      v57 = v56 + 1;
      if (__OFADD__(v56, 1))
        goto LABEL_95;
      goto LABEL_5;
    }
    v34 = a5[15];
    v35 = a5[24];
    v36 = sub_2150C03F0(v21, v20, a5[14]);
    if ((v36 & 1) == 0 && (sub_2150C03F0(v21, v20, v34) & 1) == 0)
      break;
    v37 = a5[30];
    swift_beginAccess();
    v38 = *(_QWORD *)(v37 + 16);
    if (!v38)
      goto LABEL_108;
    v39 = *(_QWORD *)(v38 + 8);
    v40 = v39 + 1;
    v5 = v78;
    if (__OFADD__(v39, 1))
      goto LABEL_96;
    v41 = swift_isUniquelyReferenced_nonNull_native();
    v42 = a5[30];
    v43 = (uint64_t **)(v42 + 16);
    if (v41)
    {
      swift_beginAccess();
      v44 = *v43;
      if (!*v43)
        goto LABEL_112;
      v45 = *v44;
      if (*v44 < v40)
      {
        if (v45 + 0x4000000000000000 < 0)
          goto LABEL_101;
        v46 = 2 * v45;
        if (v46 <= v40)
          v47 = v40;
        else
          v47 = v46;
        sub_215097C2C((uint64_t)v44, v47, (uint64_t *)&v84);
        v48 = *(_QWORD *)(v42 + 16);
        if (!v48)
          goto LABEL_115;
        if ((*(_QWORD *)(v48 + 8) & 0x8000000000000000) != 0)
          goto LABEL_103;
        MEMORY[0x2199DC578]();
        *(_OWORD *)v43 = v84;
      }
    }
    else
    {
      swift_beginAccess();
      v58 = *v43;
      if (!v58)
        goto LABEL_113;
      v59 = *v58;
      if (*v58 < v40)
      {
        if (v59 + 0x4000000000000000 < 0)
          goto LABEL_102;
        if (2 * v59 <= v40)
          v59 = v40;
        else
          v59 *= 2;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D188);
      v60 = swift_allocObject();
      sub_215096C70((uint64_t)v58, v59, (uint64_t *)&v84);
      *(_OWORD *)(v60 + 16) = v84;
      swift_release();
      a5[30] = v60;
      v42 = v60;
      v5 = v78;
    }
    result = swift_beginAccess();
    v61 = *(_QWORD **)(v42 + 16);
    if (!v61)
      goto LABEL_109;
    v62 = *v61 + 7;
    if (__OFADD__(*v61, 7))
      goto LABEL_97;
    v64 = v61[1];
    v55 = v61 + 1;
    v63 = v64;
    v65 = v55 + 7;
    v66 = v62 / 8;
    v68 = v66 - 1;
    v67 = v66 < 1;
    v69 = v66 + 62;
    if (!v67)
      v69 = v68;
    *((_BYTE *)v65 + v63 + (v69 & 0xFFFFFFFFFFFFC0) + 64) = v36 & 1;
    v70 = v63 - (v69 & 0xFFFFFFFFFFFFFFF8);
    if (v70 >= 0)
      v71 = 1 << v70;
    else
      v71 = 0;
    *((_BYTE *)v65 + v63 / 8) |= v71;
    v57 = v63 + 1;
    if (__OFADD__(v63, 1))
    {
      __break(1u);
      return result;
    }
    v9 = v79;
LABEL_5:
    ++v7;
    *v55 = v57;
    if (v7 == a3)
      return result;
  }
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D50);
  v85 = v72;
  v86 = sub_21506037C((unint64_t *)&qword_254DA7D58, &qword_254DA7D50, MEMORY[0x24BDCF860]);
  *(_QWORD *)&v84 = v21;
  *((_QWORD *)&v84 + 1) = v20;
  v73 = __swift_project_boxed_opaque_existential_1(&v84, v72);
  if (*v73)
    v74 = (_BYTE *)(*v73 + v73[1]);
  else
    v74 = 0;
  sub_215058FEC((_BYTE *)*v73, v74, v83);
  v75 = v83[0];
  v76 = v83[1];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v84);
  sub_2150602A0();
  swift_allocError();
  *(_QWORD *)v77 = v7;
  *(_QWORD *)(v77 + 8) = v35;
  *(_QWORD *)(v77 + 16) = 0;
  *(_QWORD *)(v77 + 24) = v75;
  *(_QWORD *)(v77 + 32) = v76;
  *(_BYTE *)(v77 + 40) = 1;
  return swift_willThrow();
}

uint64_t sub_21505E320(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int isUniquelyReferenced_nonNull_native;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;

  v71 = a5;
  v9 = sub_21512FB0C();
  result = MEMORY[0x24BDAC7A8](v9);
  v59 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a4[11];
  v65 = a4[12];
  if (v12 <= a1)
  {
LABEL_76:
    v58 = v12;
    *(_QWORD *)&v68 = 0;
    *((_QWORD *)&v68 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_215130178();
    sub_21512FB90();
    v66 = a1;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v66 = v58;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (a2 == a3)
    return result;
  if (a3 < a2)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v13 = a4[8];
  v64 = v12 - 1;
  v63 = v65 + 32;
  v62 = (char **)(v71 + 14);
  v14 = v71 + 28;
  v58 = v12;
  v60 = a1;
  v61 = a3;
  while (1)
  {
    if (a2 >= a3)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    v15 = a2 * v12;
    if ((unsigned __int128)(a2 * (__int128)v12) >> 64 != (a2 * v12) >> 63)
      goto LABEL_59;
    v16 = __OFADD__(v15, a1);
    v17 = v15 + a1;
    if (v16)
      goto LABEL_60;
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_61;
    v18 = *(_QWORD *)(v65 + 16);
    if (v17 >= v18)
      goto LABEL_62;
    v19 = v17 + 1;
    if (v17 + 1 >= v18)
      goto LABEL_63;
    v20 = *(_QWORD *)(v63 + 8 * v17);
    v21 = *(_QWORD *)(v63 + 8 * v19);
    if (v64 == a1)
    {
      if (v20 < v21)
      {
        while (1)
        {
          v22 = *(unsigned __int8 *)(v13 - 1 + v21);
          if (v22 != 13 && v22 != 10)
            break;
          if (v20 >= --v21)
          {
            v21 = v20;
            break;
          }
        }
      }
    }
    else
    {
      v21 -= v20 < v21;
    }
    if (!v13)
      goto LABEL_71;
    v24 = v21 - v20;
    if (__OFSUB__(v21, v20))
      goto LABEL_64;
    v25 = v13 + v20;
    if ((sub_2150C03F0(v13 + v20, v24, v71[13]) & 1) == 0)
      break;
    v26 = *v14;
    swift_beginAccess();
    v27 = *(_QWORD *)(v26 + 16);
    if (!v27)
      goto LABEL_72;
    v28 = *(_QWORD *)(v27 + 8);
    v29 = v28 + 1;
    if (__OFADD__(v28, 1))
      goto LABEL_65;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a1 = *v14;
    v31 = (uint64_t **)(*v14 + 16);
    if (isUniquelyReferenced_nonNull_native)
    {
      swift_beginAccess();
      v32 = *v31;
      if (!*v31)
        goto LABEL_74;
      v33 = *v32;
      if (*v32 < v29)
      {
        if (v33 + 0x4000000000000000 < 0)
          goto LABEL_68;
        v34 = 2 * v33;
        if (v34 <= v29)
          v35 = v29;
        else
          v35 = v34;
        sub_2150977DC((uint64_t)v32, v35, (uint64_t *)&v68);
        sub_2150983B8(*(_QWORD **)(a1 + 16));
        *(_OWORD *)(a1 + 16) = v68;
      }
    }
    else
    {
      swift_beginAccess();
      v42 = *v31;
      if (!v42)
        goto LABEL_75;
      v43 = *v42;
      if (*v42 < v29)
      {
        if (v43 + 0x4000000000000000 < 0)
          goto LABEL_69;
        if (2 * v43 <= v29)
          v43 = v29;
        else
          v43 *= 2;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D428);
      v44 = swift_allocObject();
      sub_21509691C((uint64_t)v42, v43, (uint64_t *)&v68);
      *(_OWORD *)(v44 + 16) = v68;
      swift_release();
      *v14 = v44;
      a1 = v44;
    }
    result = swift_beginAccess();
    v45 = *(_QWORD *)(a1 + 16);
    a3 = v61;
    if (!v45)
      goto LABEL_73;
    v46 = *(_QWORD *)(v45 + 16);
    v16 = __OFADD__(v46, 1);
    v47 = v46 + 1;
    a1 = v60;
    if (v16)
      goto LABEL_66;
    *(_QWORD *)(v45 + 16) = v47;
    v48 = *(_QWORD *)(v45 + 8);
    v16 = __OFADD__(v48, 1);
    v49 = v48 + 1;
    if (v16)
      goto LABEL_67;
    *(_QWORD *)(v45 + 8) = v49;
LABEL_7:
    if (++a2 == a3)
      return result;
  }
  v36 = v62;
  sub_2150E43E4(v25, v24);
  v37 = *v36;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v37 = sub_21502EBE8(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
  v39 = *((_QWORD *)v37 + 2);
  v38 = *((_QWORD *)v37 + 3);
  if (v39 >= v38 >> 1)
    v37 = sub_21502EBE8((char *)(v38 > 1), v39 + 1, 1, v37);
  *((_QWORD *)v37 + 2) = v39 + 1;
  v37[v39 + 32] = 0;
  *v62 = v37;
  sub_21512FB00();
  v40 = sub_21512FAB8();
  if (v41)
  {
    sub_2150EE79C(v40, v41);
    result = swift_bridgeObjectRelease();
    v12 = v58;
    a1 = v60;
    a3 = v61;
    goto LABEL_7;
  }
  v50 = v71[22];
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D50);
  v69 = v51;
  v70 = sub_21506037C((unint64_t *)&qword_254DA7D58, &qword_254DA7D50, MEMORY[0x24BDCF860]);
  *(_QWORD *)&v68 = v25;
  *((_QWORD *)&v68 + 1) = v24;
  v52 = __swift_project_boxed_opaque_existential_1(&v68, v51);
  if (*v52)
    v53 = (_BYTE *)(*v52 + v52[1]);
  else
    v53 = 0;
  sub_215058FEC((_BYTE *)*v52, v53, v67);
  v54 = v67[0];
  v55 = v67[1];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v68);
  sub_2150602A0();
  swift_allocError();
  *(_QWORD *)v56 = a2;
  *(_QWORD *)(v56 + 8) = v50;
  *(_QWORD *)(v56 + 16) = v54;
  *(_QWORD *)(v56 + 24) = v55;
  *(_QWORD *)(v56 + 32) = 0;
  *(_BYTE *)(v56 + 40) = 0;
  return swift_willThrow();
}

uint64_t sub_21505E9EC(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  _BYTE __dst[14];
  unsigned __int8 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v5 = result;
  v60 = *MEMORY[0x24BDAC8D0];
  v53 = a4[12];
  v54 = a4[11];
  if (v54 <= result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_215130178();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
  }
  else
  {
    v7 = a2;
    if (a2 != a3)
    {
      if (a3 >= a2)
      {
        v8 = a4[8];
        v51 = v53 + 32;
        v49 = a5 + 14;
        v50 = result;
        v9 = a5 + 28;
        while (v7 < a3)
        {
          v12 = v7 * v54;
          if ((unsigned __int128)(v7 * (__int128)v54) >> 64 != (v7 * v54) >> 63)
            goto LABEL_56;
          v13 = __OFADD__(v12, v5);
          v14 = v12 + v5;
          if (v13)
            goto LABEL_57;
          if ((v14 & 0x8000000000000000) != 0)
            goto LABEL_58;
          v15 = *(_QWORD *)(v53 + 16);
          if (v14 >= v15)
            goto LABEL_59;
          v16 = v14 + 1;
          if (v14 + 1 >= v15)
            goto LABEL_60;
          v17 = *(_QWORD *)(v51 + 8 * v14);
          v18 = *(_QWORD *)(v51 + 8 * v16);
          if (v54 - 1 == v5)
          {
            if (v17 < v18)
            {
              while (1)
              {
                v19 = *(unsigned __int8 *)(v8 - 1 + v18);
                if (v19 != 13 && v19 != 10)
                  break;
                if (v17 >= --v18)
                {
                  v18 = v17;
                  break;
                }
              }
            }
          }
          else
          {
            v18 -= v17 < v18;
          }
          if (!v8)
            goto LABEL_68;
          v21 = v18 - v17;
          if (__OFSUB__(v18, v17))
            goto LABEL_61;
          v22 = v8 + v17;
          if ((sub_2150C03F0(v8 + v17, v21, a5[13]) & 1) != 0)
          {
            v23 = *v9;
            swift_beginAccess();
            v24 = *(_QWORD *)(v23 + 16);
            if (!v24)
              goto LABEL_69;
            v25 = *(_QWORD *)(v24 + 8);
            v26 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_62;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v28 = *v9;
            v29 = (uint64_t **)(*v9 + 16);
            if (isUniquelyReferenced_nonNull_native)
            {
              swift_beginAccess();
              v30 = *v29;
              if (!*v29)
                goto LABEL_71;
              v31 = *v30;
              if (*v30 < v26)
              {
                if (v31 + 0x4000000000000000 < 0)
                  goto LABEL_65;
                v32 = 2 * v31;
                if (v32 <= v26)
                  v33 = v26;
                else
                  v33 = v32;
                sub_2150977DC((uint64_t)v30, v33, (uint64_t *)&v57);
                sub_21509863C(*(_QWORD **)(v28 + 16));
                *(_OWORD *)(v28 + 16) = v57;
              }
            }
            else
            {
              swift_beginAccess();
              v41 = *v29;
              if (!v41)
                goto LABEL_72;
              v42 = *v41;
              if (*v41 < v26)
              {
                if (v42 + 0x4000000000000000 < 0)
                  goto LABEL_66;
                if (2 * v42 <= v26)
                  v42 = v26;
                else
                  v42 *= 2;
              }
              __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7830);
              v43 = swift_allocObject();
              sub_2150972C4((uint64_t)v41, v42, (uint64_t *)&v57);
              *(_OWORD *)(v43 + 16) = v57;
              swift_release();
              *v9 = v43;
              v28 = v43;
              v5 = v50;
            }
            result = swift_beginAccess();
            v44 = *(_QWORD *)(v28 + 16);
            if (!v44)
              goto LABEL_70;
            v45 = *(_QWORD *)(v44 + 16);
            v13 = __OFADD__(v45, 1);
            v46 = v45 + 1;
            if (v13)
              goto LABEL_63;
            *(_QWORD *)(v44 + 16) = v46;
            v47 = *(_QWORD *)(v44 + 8);
            v13 = __OFADD__(v47, 1);
            v48 = v47 + 1;
            if (v13)
              goto LABEL_64;
            *(_QWORD *)(v44 + 8) = v48;
          }
          else
          {
            sub_2150E43E4(v22, v21);
            v34 = *v49;
            v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1D0);
            v58 = v35;
            v59 = sub_21506037C((unint64_t *)&qword_254DA7D28, &qword_253F0D1D0, MEMORY[0x24BDCFBE0]);
            *(_QWORD *)&v57 = v34;
            v36 = __swift_project_boxed_opaque_existential_1(&v57, v35);
            v37 = *v36;
            v38 = *(_QWORD *)(*v36 + 16);
            if (v38)
            {
              if (v38 <= 0xE)
              {
                memset(__dst, 0, sizeof(__dst));
                v56 = v38;
                memcpy(__dst, (const void *)(v37 + 32), v38);
                v10 = *(_QWORD *)__dst;
                v11 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v56 << 48);
                swift_bridgeObjectRetain_n();
              }
              else
              {
                sub_21512F554();
                swift_allocObject();
                swift_bridgeObjectRetain_n();
                v39 = sub_21512F524();
                v40 = v39;
                if (v38 >= 0x7FFFFFFF)
                {
                  sub_21512F65C();
                  v10 = swift_allocObject();
                  *(_QWORD *)(v10 + 16) = 0;
                  *(_QWORD *)(v10 + 24) = v38;
                  v11 = v40 | 0x8000000000000000;
                }
                else
                {
                  v10 = v38 << 32;
                  v11 = v39 | 0x4000000000000000;
                }
              }
            }
            else
            {
              swift_bridgeObjectRetain_n();
              v10 = 0;
              v11 = 0xC000000000000000;
            }
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v57);
            swift_bridgeObjectRelease();
            sub_2150EEA98(v10, v11);
            result = sub_21501F0D8(v10, v11);
            v5 = v50;
          }
          if (++v7 == a3)
            return result;
        }
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
      }
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_21505F038(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;

  v5 = result;
  v6 = a4[11];
  v20 = a4[12];
  if (v6 <= result)
  {
LABEL_35:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_215130178();
    sub_21512FB90();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  v8 = a2;
  if (a2 != a3)
  {
    if (a3 >= a2)
    {
      v9 = a4[8];
      v10 = v20 + 32;
      while (v8 < a3)
      {
        v11 = v8 * v6;
        if ((unsigned __int128)(v8 * (__int128)v6) >> 64 != (v8 * v6) >> 63)
          goto LABEL_27;
        v12 = __OFADD__(v11, v5);
        v13 = v11 + v5;
        if (v12)
          goto LABEL_28;
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_29;
        v14 = *(_QWORD *)(v20 + 16);
        if (v13 >= v14)
          goto LABEL_30;
        v15 = v13 + 1;
        if (v13 + 1 >= v14)
          goto LABEL_31;
        v16 = *(_QWORD *)(v10 + 8 * v13);
        v17 = *(_QWORD *)(v10 + 8 * v15);
        if (v6 - 1 == v5)
        {
          if (v16 < v17)
          {
            while (1)
            {
              v18 = *(unsigned __int8 *)(v9 - 1 + v17);
              if (v18 != 13 && v18 != 10)
                break;
              if (v16 >= --v17)
              {
                v17 = v16;
                break;
              }
            }
          }
        }
        else
        {
          v17 -= v16 < v17;
        }
        if (!v9)
          goto LABEL_34;
        if (__OFSUB__(v17, v16))
          goto LABEL_32;
        result = sub_2150DB968(v9 + v16, v17 - v16, v8);
        if (!v4 && ++v8 != a3)
          continue;
        return result;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  return result;
}

uint64_t sub_21505F31C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  float v42;
  char **v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD v76[2];
  char *v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v73 = a5;
  v80 = *MEMORY[0x24BDAC8D0];
  v9 = sub_21512FB0C();
  result = MEMORY[0x24BDAC7A8](v9);
  v67 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a4[11];
  v72 = a4[12];
  if (v12 <= a1)
  {
    v66 = v12;
    v77[0] = 0;
    v77[1] = (char *)0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_215130178();
    sub_21512FB90();
    v75 = a1;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75 = v66;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (a2 != a3)
  {
    if (a3 >= a2)
    {
      v13 = a4[8];
      v71 = v12 - 1;
      v70 = v72 + 32;
      v68 = (char **)(v73 + 14);
      v74 = v73 + 28;
      v14 = v13 - 1;
      v66 = v12;
      v69 = a3;
      while (a2 < a3)
      {
        v15 = a2 * v12;
        if ((unsigned __int128)(a2 * (__int128)v12) >> 64 != (a2 * v12) >> 63)
          goto LABEL_65;
        v16 = __OFADD__(v15, a1);
        v17 = v15 + a1;
        if (v16)
          goto LABEL_66;
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_67;
        v18 = *(_QWORD *)(v72 + 16);
        if (v17 >= v18)
          goto LABEL_68;
        v19 = v17 + 1;
        if (v17 + 1 >= v18)
          goto LABEL_69;
        v20 = *(_QWORD *)(v70 + 8 * v17);
        v21 = *(_QWORD *)(v70 + 8 * v19);
        if (v71 == a1)
        {
          if (v20 < v21)
          {
            while (1)
            {
              v22 = *(unsigned __int8 *)(v14 + v21);
              if (v22 != 13 && v22 != 10)
                break;
              if (v20 >= --v21)
              {
                v21 = v20;
                break;
              }
            }
          }
        }
        else
        {
          v21 -= v20 < v21;
        }
        if (!v13)
          goto LABEL_78;
        v24 = (char *)(v21 - v20);
        if (__OFSUB__(v21, v20))
          goto LABEL_70;
        v25 = a1;
        v26 = v13;
        v27 = v13 + v20;
        if ((sub_2150C03F0(v13 + v20, (uint64_t)v24, v73[13]) & 1) != 0)
        {
          v28 = *v74;
          swift_beginAccess();
          v29 = *(_QWORD *)(v28 + 16);
          if (!v29)
            goto LABEL_79;
          v30 = *(_QWORD *)(v29 + 8);
          v31 = v30 + 1;
          if (__OFADD__(v30, 1))
            goto LABEL_71;
          v32 = v74;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v34 = *v32;
          v35 = (uint64_t **)(v34 + 16);
          if (isUniquelyReferenced_nonNull_native)
          {
            swift_beginAccess();
            v36 = *v35;
            if (!*v35)
              goto LABEL_82;
            v37 = *v36;
            if (*v36 < v31)
            {
              if (v37 + 0x4000000000000000 < 0)
                goto LABEL_74;
              v38 = 2 * v37;
              if (v38 <= v31)
                v39 = v31;
              else
                v39 = v38;
              sub_215097DF0((uint64_t)v36, v39, (uint64_t *)v77);
              v40 = *(_QWORD *)(v34 + 16);
              if (!v40)
                goto LABEL_83;
              if ((*(_QWORD *)(v40 + 8) & 0x8000000000000000) != 0)
                goto LABEL_76;
              MEMORY[0x2199DC578]();
              *(_OWORD *)v35 = *(_OWORD *)v77;
            }
          }
          else
          {
            swift_beginAccess();
            v50 = *v35;
            if (!v50)
              goto LABEL_81;
            v51 = *v50;
            if (*v50 < v31)
            {
              if (v51 + 0x4000000000000000 < 0)
                goto LABEL_75;
              if (2 * v51 <= v31)
                v51 = v31;
              else
                v51 *= 2;
            }
            __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7828);
            v52 = swift_allocObject();
            sub_215097138((uint64_t)v50, v51, (uint64_t *)v77);
            *(_OWORD *)(v52 + 16) = *(_OWORD *)v77;
            swift_release();
            *v74 = v52;
            v34 = v52;
          }
          result = swift_beginAccess();
          v53 = *(_QWORD *)(v34 + 16);
          if (!v53)
            goto LABEL_80;
          v54 = *(_QWORD *)(v53 + 16);
          v16 = __OFADD__(v54, 1);
          v55 = v54 + 1;
          if (v16)
            goto LABEL_72;
          *(_QWORD *)(v53 + 16) = v55;
          v56 = *(_QWORD *)(v53 + 8);
          v16 = __OFADD__(v56, 1);
          v57 = v56 + 1;
          if (v16)
            goto LABEL_73;
          a1 = v25;
          v13 = v26;
          *(_QWORD *)(v53 + 8) = v57;
        }
        else
        {
          v77[0] = &v24[v27];
          v41 = v24[v27];
          v24[v27] = 0;
          v42 = strtof((const char *)v27, v77);
          if (v77[0] && &v77[0][-v27] == v24)
          {
            v24[v27] = v41;
            LOBYTE(v77[0]) = 0;
            result = sub_2150EE928(LODWORD(v42));
          }
          else
          {
            v24[v27] = v41;
            v43 = v68;
            sub_2150E43E4(v27, (uint64_t)v24);
            v44 = *v43;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v44 = sub_21502EBE8(0, *((_QWORD *)v44 + 2) + 1, 1, v44);
            v46 = *((_QWORD *)v44 + 2);
            v45 = *((_QWORD *)v44 + 3);
            if (v46 >= v45 >> 1)
              v44 = sub_21502EBE8((char *)(v45 > 1), v46 + 1, 1, v44);
            *((_QWORD *)v44 + 2) = v46 + 1;
            v44[v46 + 32] = 0;
            *v68 = v44;
            sub_21512FB00();
            v47 = sub_21512FAB8();
            if (!v48 || (v49 = sub_21506AFD8(v47, v48), swift_bridgeObjectRelease(), (v49 & 0x100000000) != 0))
            {
              v58 = v73[22];
              v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D50);
              v78 = v59;
              v79 = sub_21506037C((unint64_t *)&qword_254DA7D58, &qword_254DA7D50, MEMORY[0x24BDCF860]);
              v77[0] = (char *)v27;
              v77[1] = v24;
              v60 = __swift_project_boxed_opaque_existential_1(v77, v59);
              if (*v60)
                v61 = (_BYTE *)(*v60 + v60[1]);
              else
                v61 = 0;
              sub_215058FEC((_BYTE *)*v60, v61, v76);
              v62 = v76[0];
              v63 = v76[1];
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v77);
              sub_2150602A0();
              swift_allocError();
              *(_QWORD *)v64 = a2;
              *(_QWORD *)(v64 + 8) = v58;
              *(_QWORD *)(v64 + 16) = 2;
              *(_QWORD *)(v64 + 24) = v62;
              *(_QWORD *)(v64 + 32) = v63;
              *(_BYTE *)(v64 + 40) = 1;
              return swift_willThrow();
            }
            LOBYTE(v77[0]) = 0;
            result = sub_2150EE928(v49);
            v12 = v66;
          }
          a1 = v25;
          v13 = v26;
        }
        ++a2;
        a3 = v69;
        if (a2 == v69)
          return result;
      }
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
  }
  return result;
}

uint64_t sub_21505FAEC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char **v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD v77[2];
  char *v78[2];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v74 = a5;
  v81 = *MEMORY[0x24BDAC8D0];
  v9 = sub_21512FB0C();
  result = MEMORY[0x24BDAC7A8](v9);
  v68 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a4[11];
  v73 = a4[12];
  if (v12 <= a1)
  {
    v67 = v12;
    v78[0] = 0;
    v78[1] = (char *)0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_215130178();
    sub_21512FB90();
    v76 = a1;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v76 = v67;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  if (a2 != a3)
  {
    if (a3 >= a2)
    {
      v13 = a4[8];
      v72 = v12 - 1;
      v71 = v73 + 32;
      v69 = (char **)(v74 + 14);
      v75 = v74 + 28;
      v14 = v13 - 1;
      v67 = v12;
      v70 = a3;
      while (a2 < a3)
      {
        v15 = a2 * v12;
        if ((unsigned __int128)(a2 * (__int128)v12) >> 64 != (a2 * v12) >> 63)
          goto LABEL_65;
        v16 = __OFADD__(v15, a1);
        v17 = v15 + a1;
        if (v16)
          goto LABEL_66;
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_67;
        v18 = *(_QWORD *)(v73 + 16);
        if (v17 >= v18)
          goto LABEL_68;
        v19 = v17 + 1;
        if (v17 + 1 >= v18)
          goto LABEL_69;
        v20 = *(_QWORD *)(v71 + 8 * v17);
        v21 = *(_QWORD *)(v71 + 8 * v19);
        if (v72 == a1)
        {
          if (v20 < v21)
          {
            while (1)
            {
              v22 = *(unsigned __int8 *)(v14 + v21);
              if (v22 != 13 && v22 != 10)
                break;
              if (v20 >= --v21)
              {
                v21 = v20;
                break;
              }
            }
          }
        }
        else
        {
          v21 -= v20 < v21;
        }
        if (!v13)
          goto LABEL_78;
        v24 = (char *)(v21 - v20);
        if (__OFSUB__(v21, v20))
          goto LABEL_70;
        v25 = v13;
        v26 = v13 + v20;
        if ((sub_2150C03F0(v13 + v20, (uint64_t)v24, v74[13]) & 1) != 0)
        {
          v27 = *v75;
          swift_beginAccess();
          v28 = *(_QWORD *)(v27 + 16);
          if (!v28)
            goto LABEL_79;
          v29 = *(_QWORD *)(v28 + 8);
          v30 = v29 + 1;
          if (__OFADD__(v29, 1))
            goto LABEL_71;
          v31 = v75;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v33 = *v31;
          v34 = (uint64_t **)(v33 + 16);
          if (isUniquelyReferenced_nonNull_native)
          {
            swift_beginAccess();
            v35 = *v34;
            if (!*v34)
              goto LABEL_82;
            v36 = *v35;
            if (*v35 < v30)
            {
              if (v36 + 0x4000000000000000 < 0)
                goto LABEL_74;
              v37 = 2 * v36;
              if (v37 <= v30)
                v38 = v30;
              else
                v38 = v37;
              sub_2150975F0((uint64_t)v35, v38, (uint64_t *)v78);
              v39 = *(_QWORD *)(v33 + 16);
              if (!v39)
                goto LABEL_83;
              if ((*(_QWORD *)(v39 + 8) & 0x8000000000000000) != 0)
                goto LABEL_76;
              MEMORY[0x2199DC578]();
              *(_OWORD *)v34 = *(_OWORD *)v78;
            }
          }
          else
          {
            swift_beginAccess();
            v51 = *v34;
            if (!v51)
              goto LABEL_81;
            v52 = *v51;
            if (*v51 < v30)
            {
              if (v52 + 0x4000000000000000 < 0)
                goto LABEL_75;
              if (2 * v52 <= v30)
                v52 = v30;
              else
                v52 *= 2;
            }
            __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D430);
            v53 = swift_allocObject();
            sub_215096790((uint64_t)v51, v52, (uint64_t *)v78);
            *(_OWORD *)(v53 + 16) = *(_OWORD *)v78;
            swift_release();
            *v75 = v53;
            v33 = v53;
          }
          result = swift_beginAccess();
          v54 = *(_QWORD *)(v33 + 16);
          if (!v54)
            goto LABEL_80;
          v55 = *(_QWORD *)(v54 + 16);
          v16 = __OFADD__(v55, 1);
          v56 = v55 + 1;
          if (v16)
            goto LABEL_72;
          *(_QWORD *)(v54 + 16) = v56;
          v57 = *(_QWORD *)(v54 + 8);
          v16 = __OFADD__(v57, 1);
          v58 = v57 + 1;
          if (v16)
            goto LABEL_73;
          v13 = v25;
          *(_QWORD *)(v54 + 8) = v58;
        }
        else
        {
          v78[0] = &v24[v26];
          v40 = v24[v26];
          v24[v26] = 0;
          *(double *)&v41 = strtod((const char *)v26, v78);
          if (v78[0] && &v78[0][-v26] == v24)
          {
            v24[v26] = v40;
            result = sub_2150EE5C4(v41, 0);
          }
          else
          {
            v24[v26] = v40;
            v42 = v69;
            sub_2150E43E4(v26, (uint64_t)v24);
            v43 = *v42;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v43 = sub_21502EBE8(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
            v45 = *((_QWORD *)v43 + 2);
            v44 = *((_QWORD *)v43 + 3);
            if (v45 >= v44 >> 1)
              v43 = sub_21502EBE8((char *)(v44 > 1), v45 + 1, 1, v43);
            *((_QWORD *)v43 + 2) = v45 + 1;
            v43[v45 + 32] = 0;
            *v69 = v43;
            sub_21512FB00();
            v46 = sub_21512FAB8();
            if (!v47 || (v48 = sub_21506B0D0(v46, v47), v50 = v49, swift_bridgeObjectRelease(), (v50 & 1) != 0))
            {
              v59 = v74[22];
              v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D50);
              v79 = v60;
              v80 = sub_21506037C((unint64_t *)&qword_254DA7D58, &qword_254DA7D50, MEMORY[0x24BDCF860]);
              v78[0] = (char *)v26;
              v78[1] = v24;
              v61 = __swift_project_boxed_opaque_existential_1(v78, v60);
              if (*v61)
                v62 = (_BYTE *)(*v61 + v61[1]);
              else
                v62 = 0;
              sub_215058FEC((_BYTE *)*v61, v62, v77);
              v63 = v77[0];
              v64 = v77[1];
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
              sub_2150602A0();
              swift_allocError();
              *(_QWORD *)v65 = a2;
              *(_QWORD *)(v65 + 8) = v59;
              *(_QWORD *)(v65 + 16) = 3;
              *(_QWORD *)(v65 + 24) = v63;
              *(_QWORD *)(v65 + 32) = v64;
              *(_BYTE *)(v65 + 40) = 1;
              return swift_willThrow();
            }
            result = sub_2150EE5C4(v48, 0);
            v12 = v67;
          }
          v13 = v25;
        }
        ++a2;
        a3 = v70;
        if (a2 == v70)
          return result;
      }
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
  }
  return result;
}

unint64_t sub_2150602A0()
{
  unint64_t result;

  result = qword_254DA7D60;
  if (!qword_254DA7D60)
  {
    result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for CSVReadingError, &type metadata for CSVReadingError);
    atomic_store(result, (unint64_t *)&qword_254DA7D60);
  }
  return result;
}

uint64_t sub_2150602E4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_215060354(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21506037C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x2199DC4C4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for CSVParser()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CSVParser(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CSVParser(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for CSVParser(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_WORD *)(a1 + 59) = *(_WORD *)(a2 + 59);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CSVParser(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CSVParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CSVParser()
{
  return &type metadata for CSVParser;
}

uint64_t sub_215060754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v8;
  char v10;

  if (sub_21512FB48() < *(_QWORD *)(v1 + 16))
    goto LABEL_2;
  sub_21512FB78();
  if (sub_21512FBFC() == 84 && v8 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return sub_2150608CC(a1);
  }
  v10 = sub_21513043C();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    return sub_2150608CC(a1);
LABEL_2:
  if (sub_21512FB48() < *(_QWORD *)(v1 + 24))
  {
LABEL_8:
    v6 = sub_21512F740();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
  sub_21512FB78();
  if (sub_21512FBFC() == 84 && v3 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = sub_21513043C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
      goto LABEL_8;
  }
  return sub_215060AEC(a1);
}

uint64_t sub_2150608CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  result = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFSUB__(*(_QWORD *)(v1 + 16), 1))
  {
    __break(1u);
  }
  else
  {
    sub_21512FB78();
    v7 = sub_21512FBFC();
    v9 = v7 == 90 && v8 == 0xE100000000000000;
    if (v9
      || (v10 = v7, v11 = v8, (sub_21513043C() & 1) != 0)
      || (v10 == 43 ? (v12 = v11 == 0xE100000000000000) : (v12 = 0),
          v12 || (sub_21513043C() & 1) != 0 || v10 == 45 && v11 == 0xE100000000000000))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_21513043C();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
        v19 = sub_21512F740();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
      }
    }
    v13 = *(void **)v1;
    v14 = (void *)sub_21512FA70();
    v15 = objc_msgSend(v13, sel_dateFromString_, v14);

    if (v15)
    {
      sub_21512F728();

      v16 = sub_21512F740();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 0, 1, v16);
    }
    else
    {
      v17 = sub_21512F740();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 1, 1, v17);
    }
    return sub_215060D0C((uint64_t)v6, a1);
  }
  return result;
}

uint64_t sub_215060AEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  result = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFSUB__(*(_QWORD *)(v1 + 24), 1))
  {
    __break(1u);
  }
  else
  {
    sub_21512FB78();
    v7 = sub_21512FBFC();
    v9 = v7 == 90 && v8 == 0xE100000000000000;
    if (v9
      || (v10 = v7, v11 = v8, (sub_21513043C() & 1) != 0)
      || (v10 == 43 ? (v12 = v11 == 0xE100000000000000) : (v12 = 0),
          v12 || (sub_21513043C() & 1) != 0 || v10 == 45 && v11 == 0xE100000000000000))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_21513043C();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
        v19 = sub_21512F740();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
      }
    }
    v13 = *(void **)(v1 + 8);
    v14 = (void *)sub_21512FA70();
    v15 = objc_msgSend(v13, sel_dateFromString_, v14);

    if (v15)
    {
      sub_21512F728();

      v16 = sub_21512F740();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 0, 1, v16);
    }
    else
    {
      v17 = sub_21512F740();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 1, 1, v17);
    }
    return sub_215060D0C((uint64_t)v6, a1);
  }
  return result;
}

uint64_t sub_215060D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL static JSONType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t JSONType.hash(into:)()
{
  return sub_2151305B0();
}

uint64_t JSONType.hashValue.getter()
{
  sub_2151305A4();
  sub_2151305B0();
  return sub_2151305EC();
}

BOOL sub_215060DD4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_215060DE8()
{
  sub_2151305A4();
  sub_2151305B0();
  return sub_2151305EC();
}

uint64_t sub_215060E2C()
{
  return sub_2151305B0();
}

uint64_t sub_215060E54()
{
  sub_2151305A4();
  sub_2151305B0();
  return sub_2151305EC();
}

unint64_t sub_215060E98()
{
  unint64_t result;

  result = qword_254DA7D68;
  if (!qword_254DA7D68)
  {
    result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for JSONType, &type metadata for JSONType);
    atomic_store(result, (unint64_t *)&qword_254DA7D68);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CSVType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_215060FC8 + 4 * byte_21513642D[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_215060FFC + 4 * asc_215136428[v4]))();
}

uint64_t sub_215060FFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_215061004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21506100CLL);
  return result;
}

uint64_t sub_215061018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x215061020);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_215061024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21506102C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_215061038(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_215061040(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSONType()
{
  return &type metadata for JSONType;
}

uint64_t static ColumnProtocol<>.+ infix(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  return sub_215061138(a1, a2, a3, (uint64_t)sub_215061070, (void (*)(char *, char *))sub_21506107C, 43, a4);
}

uint64_t sub_215061070(uint64_t a1, uint64_t a2)
{
  return sub_215061D04(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE2F68]);
}

uint64_t sub_21506107C(uint64_t a1)
{
  return sub_2150610B4(a1);
}

uint64_t static ColumnProtocol<>.- infix(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  return sub_215061138(a1, a2, a3, (uint64_t)sub_2150610A8, (void (*)(char *, char *))sub_21506107C, 45, a4);
}

uint64_t sub_2150610A8(uint64_t a1, uint64_t a2)
{
  return sub_215061D04(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE2F70]);
}

uint64_t sub_2150610B4(uint64_t a1)
{
  uint64_t v1;

  return sub_21506133C(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 40));
}

uint64_t static ColumnProtocol<>.* infix(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  return sub_215061138(a1, a2, a3, (uint64_t)sub_2150610F0, (void (*)(char *, char *))sub_21506107C, 42, a4);
}

uint64_t sub_2150610F0(uint64_t a1, uint64_t a2)
{
  return sub_215061D04(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE17F8]);
}

uint64_t static ColumnProtocol<>./ infix(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  return sub_215061138(a1, a2, a3, (uint64_t)sub_215061114, (void (*)(char *, char *))sub_21506107C, 47, a4);
}

{
  return sub_215061138(a1, a2, a3, (uint64_t)sub_215061330, (void (*)(char *, char *))sub_21506107C, 47, a4);
}

uint64_t sub_215061114(uint64_t a1, uint64_t a2)
{
  return sub_215061D04(a1, a2, MEMORY[0x24BEE1FE0]);
}

uint64_t sub_215061138@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, void (*a5)(char *, char *)@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v29;
  _QWORD *v30;
  char v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v29 = a6;
  v28 = a5;
  v30 = a7;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 8);
  v41 = a1;
  v42 = a1;
  v43 = v11;
  v44 = v11;
  v12 = sub_2151301A8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v27 - v14;
  sub_215130490();
  v38 = a1;
  v39 = a2;
  v40 = a3;
  v32 = a1;
  v33 = a2;
  v34 = a3;
  v35 = a4;
  v36 = &v37;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE2620], v12);
  v19 = sub_215021834(v28, (uint64_t)v31, v12, AssociatedTypeWitness, MEMORY[0x24BEE4078], v17, MEMORY[0x24BEE40A8], v18);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
  v41 = v20(a1, a2);
  v42 = v21;
  sub_21512FB90();
  v20(a1, a2);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v22 = v41;
  v23 = v42;
  v41 = v19;
  v24 = sub_21512FD40();
  v25 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v24);
  return Column.init<A>(name:contents:)(v22, v23, (uint64_t)&v41, AssociatedTypeWitness, v24, v25, v30);
}

uint64_t sub_215061330(uint64_t a1, uint64_t a2)
{
  return sub_215061D04(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE0548]);
}

uint64_t sub_21506133C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata2;

  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_2150613D4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t a9)
{
  uint64_t v13;
  char *AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[8];
  uint64_t v20;

  v19[2] = a6;
  v19[3] = a7;
  v19[4] = a9;
  v19[5] = a4;
  v19[6] = a5;
  v19[7] = a1;
  v13 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8);
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  v20 = sub_2150ED6A0((void (*)(char *, char *))sub_215062A20, (uint64_t)v19, a6, AssociatedTypeWitness, MEMORY[0x24BEE4078], v13, MEMORY[0x24BEE40A8], v15);
  v16 = sub_21512FD40();
  swift_bridgeObjectRetain();
  v17 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v16);
  return Column.init<A>(name:contents:)(a2, a3, (uint64_t)&v20, (uint64_t)AssociatedTypeWitness, v16, v17, a8);
}

uint64_t static ColumnProtocol.+ infix<>(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return sub_21506150C(a1, a2, a3, a4, (uint64_t)sub_215061070, a5);
}

uint64_t static ColumnProtocol.+ infix<>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return sub_215061638(a1, a2, a3, a4, (uint64_t)sub_215061070, a5);
}

uint64_t static ColumnProtocol.- infix<>(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return sub_21506150C(a1, a2, a3, a4, (uint64_t)sub_2150610A8, a5);
}

uint64_t sub_21506150C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, _QWORD *a6@<X8>)
{
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v17 = 0;
  v18 = 0xE000000000000000;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  swift_getAssociatedTypeWitness();
  sub_215130418();
  v14 = a2;
  v15 = a3;
  v16 = a4;
  sub_2150613D4(a1, 0, 0xE000000000000000, a5, (uint64_t)v13, a2, a3, a6, a4);
  return swift_bridgeObjectRelease();
}

uint64_t static ColumnProtocol.- infix<>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return sub_215061638(a1, a2, a3, a4, (uint64_t)sub_215061750, a5);
}

uint64_t sub_215061638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, _QWORD *a6@<X8>)
{
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v17 = 0;
  v18 = 0xE000000000000000;
  swift_getAssociatedTypeWitness();
  sub_215130418();
  sub_21512FB90();
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v14 = a2;
  v15 = a3;
  v16 = a4;
  sub_2150613D4(a1, 0, 0xE000000000000000, a5, (uint64_t)v13, a2, a3, a6, a4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215061750(uint64_t a1, uint64_t a2)
{
  return sub_215061EB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE2F70]);
}

uint64_t static ColumnProtocol<>.* infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0xE000000000000000;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  swift_getAssociatedTypeWitness();
  sub_215130418();
  v12 = a2;
  v13 = a3;
  v14 = a4;
  sub_2150613D4(a1, 0, 0xE000000000000000, (uint64_t)sub_2150610F0, (uint64_t)v11, a2, a3, a5, *(_QWORD *)(a4 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t static ColumnProtocol<>.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0xE000000000000000;
  swift_getAssociatedTypeWitness();
  sub_215130418();
  sub_21512FB90();
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v12 = a2;
  v13 = a3;
  v14 = a4;
  sub_2150613D4(a1, 0, 0xE000000000000000, (uint64_t)sub_2150610F0, (uint64_t)v11, a2, a3, a5, *(_QWORD *)(a4 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t static ColumnProtocol<>./ infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0xE000000000000000;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  swift_getAssociatedTypeWitness();
  sub_215130424();
  v12 = a2;
  v13 = a3;
  v14 = a4;
  sub_2150613D4(a1, 0, 0xE000000000000000, (uint64_t)sub_215061114, (uint64_t)v11, a2, a3, a5, *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8));
  return swift_bridgeObjectRelease();
}

{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0xE000000000000000;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  swift_getAssociatedTypeWitness();
  sub_215130418();
  v12 = a2;
  v13 = a3;
  v14 = a4;
  sub_2150613D4(a1, 0, 0xE000000000000000, (uint64_t)sub_215061330, (uint64_t)v11, a2, a3, a5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8));
  return swift_bridgeObjectRelease();
}

uint64_t static ColumnProtocol<>./ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0xE000000000000000;
  swift_getAssociatedTypeWitness();
  sub_215130424();
  sub_21512FB90();
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v12 = a2;
  v13 = a3;
  v14 = a4;
  sub_2150613D4(a1, 0, 0xE000000000000000, (uint64_t)sub_215061BD4, (uint64_t)v11, a2, a3, a5, *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8));
  return swift_bridgeObjectRelease();
}

{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0xE000000000000000;
  swift_getAssociatedTypeWitness();
  sub_215130418();
  sub_21512FB90();
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  sub_21512FB90();
  swift_bridgeObjectRelease();
  v12 = a2;
  v13 = a3;
  v14 = a4;
  sub_2150613D4(a1, 0, 0xE000000000000000, (uint64_t)sub_215061EA4, (uint64_t)v11, a2, a3, a5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8));
  return swift_bridgeObjectRelease();
}

uint64_t sub_215061BD4(uint64_t a1, uint64_t a2)
{
  return sub_215061EB0(a1, a2, MEMORY[0x24BEE1FE0]);
}

uint64_t sub_215061D04(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  return a3(a1, a2);
}

uint64_t sub_215061EA4(uint64_t a1, uint64_t a2)
{
  return sub_215061EB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE0548]);
}

uint64_t sub_215061EB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  return a3(a2, a1);
}

uint64_t static ColumnProtocol<>.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_215061FF0;
  v18 = &v9;
  v19 = a2;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_2150620BC;
  v18 = &v9;
  v19 = a1;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

uint64_t sub_215061FF0(uint64_t a1, uint64_t a2)
{
  return sub_215062560(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_2150620BC(uint64_t a1, uint64_t a2)
{
  return sub_215062560(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07D8]);
}

uint64_t static ColumnProtocol<>.<= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_215062188;
  v18 = &v9;
  v19 = a2;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_215062254;
  v18 = &v9;
  v19 = a1;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

uint64_t sub_215062188(uint64_t a1, uint64_t a2)
{
  return sub_215062560(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_215062254(uint64_t a1, uint64_t a2)
{
  return sub_215062560(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07E8]);
}

uint64_t static ColumnProtocol<>.> infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_2150620BC;
  v18 = &v9;
  v19 = a2;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_215061FF0;
  v18 = &v9;
  v19 = a1;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

uint64_t static ColumnProtocol<>.>= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_215062254;
  v18 = &v9;
  v19 = a2;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_215062188;
  v18 = &v9;
  v19 = a1;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

uint64_t sub_215062560(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;

  v7 = *(_QWORD *)(v3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return a3(a1, a2, AssociatedTypeWitness, v7) & 1;
}

uint64_t static ColumnProtocol<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_215062698;
  v18 = &v9;
  v19 = a2;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_215062698;
  v18 = &v9;
  v19 = a1;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

uint64_t sub_21506275C()
{
  swift_getAssociatedTypeWitness();
  return sub_21512FA58() & 1;
}

uint64_t static ColumnProtocol<>.!= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_215062A50;
  v18 = &v9;
  v19 = a2;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  BOOL (*v17)();
  uint64_t *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v10;
  v16 = v11;
  v17 = sub_2150629BC;
  v18 = &v9;
  v19 = a1;
  return sub_2150ED6A0((void (*)(char *, char *))sub_2150629DC, (uint64_t)v14, v10, MEMORY[0x24BEE1328], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
}

BOOL sub_215062948()
{
  swift_getAssociatedTypeWitness();
  return (sub_21512FA58() & 1) == 0;
}

BOOL sub_2150629BC()
{
  return sub_215062948();
}

uint64_t sub_2150629DC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 32))(a1, *(_QWORD *)(v2 + 48));
  *a2 = result & 1;
  return result;
}

uint64_t sub_215062A20(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 40))(a1, *(_QWORD *)(v1 + 56));
}

uint64_t JSONReadingOptions.dateParsers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t JSONReadingOptions.dateParsers.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*JSONReadingOptions.dateParsers.modify())()
{
  return nullsub_5;
}

uint64_t JSONReadingOptions.init()@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  objc_msgSend(v2, sel_setFormatOptions_, 51);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  objc_msgSend(v3, sel_setFormatOptions_, 1907);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D168);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2151360E0;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v4 + 32) = sub_21506326C;
  *(_QWORD *)(v4 + 40) = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(v4 + 48) = sub_215062FE8;
  *(_QWORD *)(v4 + 56) = result;
  *a1 = v4;
  return result;
}

uint64_t sub_215062B84@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v4 = (void *)sub_21512FA70();
  v5 = objc_msgSend(a1, sel_dateFromString_, v4);

  if (v5)
  {
    sub_21512F728();

    v6 = sub_21512F740();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a2;
    v9 = 0;
  }
  else
  {
    v6 = sub_21512F740();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a2;
    v9 = 1;
  }
  return v7(v8, v9, 1, v6);
}

uint64_t JSONReadingOptions.addDateParseStrategy<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, v8, a2);
  v11 = *v3;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_21502ECD0(0, v11[2] + 1, 1, v11);
    v11 = (_QWORD *)result;
  }
  v14 = v11[2];
  v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    result = (uint64_t)sub_21502ECD0((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
    v11 = (_QWORD *)result;
  }
  v11[2] = v14 + 1;
  v15 = &v11[2 * v14];
  v15[4] = sub_215063058;
  v15[5] = v10;
  *v3 = v11;
  return result;
}

uint64_t sub_215062D64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  sub_21512F518();
  v2 = sub_21512F740();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t JSONWritingOptions.sortKeys.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t JSONWritingOptions.sortKeys.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*JSONWritingOptions.sortKeys.modify())()
{
  return nullsub_5;
}

uint64_t JSONWritingOptions.prettyPrint.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t JSONWritingOptions.prettyPrint.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*JSONWritingOptions.prettyPrint.modify())()
{
  return nullsub_5;
}

uint64_t sub_215062E44(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 8) = sub_215063238;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t JSONWritingOptions.dateFormatter.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t JSONWritingOptions.dateFormatter.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*JSONWritingOptions.dateFormatter.modify())()
{
  return nullsub_5;
}

void JSONWritingOptions.init()(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = sub_215062F2C;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t sub_215062F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_21512F710();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2150EA1C0((uint64_t)v3);
  v4 = sub_21512F6C8();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_215062FC4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_215062FE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_215062B84(*(void **)(v1 + 16), a1);
}

uint64_t sub_215063000()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_215063058@<X0>(uint64_t a1@<X8>)
{
  return sub_215062D64(a1);
}

uint64_t sub_215063074@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = sub_215063264;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;
  return swift_retain();
}

ValueMetadata *type metadata accessor for JSONReadingOptions()
{
  return &type metadata for JSONReadingOptions;
}

uint64_t destroy for JSONWritingOptions()
{
  return swift_release();
}

uint64_t _s11TabularData18JSONWritingOptionsVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for JSONWritingOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for JSONWritingOptions(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONWritingOptions(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONWritingOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONWritingOptions()
{
  return &type metadata for JSONWritingOptions;
}

uint64_t sub_215063238(uint64_t a1)
{
  uint64_t v1;

  return sub_2150EA190(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16));
}

uint64_t sub_215063240()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_215063264@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_2150EA168(*(uint64_t (**)(void))(v1 + 16), a1);
}

double sub_215063278@<D0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  __int16 v38;
  char v39;
  char v40;
  char v41;
  char v42;
  double v48[3];

  v10 = *a1;
  v11 = *((_BYTE *)a1 + 8);
  v12 = a1[4];
  v36 = *((_BYTE *)a1 + 40);
  v35 = a1[6];
  v33 = *((_BYTE *)a1 + 57);
  v34 = *((_BYTE *)a1 + 56);
  v31 = *(_WORD *)((char *)a1 + 59);
  v32 = *((_BYTE *)a1 + 58);
  v29 = *((_OWORD *)a1 + 5);
  v30 = *((_OWORD *)a1 + 4);
  v28 = a1[12];
  v13 = *((_QWORD *)a2 + 1);
  v14 = *((_QWORD *)a2 + 2);
  v15 = *((_QWORD *)a2 + 3);
  v16 = *((_QWORD *)a2 + 5);
  v41 = a2[48];
  v42 = *a2;
  v39 = a2[50];
  v40 = a2[49];
  v37 = a2[32];
  v38 = *(_WORD *)(a2 + 51);
  sub_215059060(MEMORY[0x24BEE4AF8]);
  v18 = v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1B0);
  *(_QWORD *)(a8 + 216) = 0;
  *(_QWORD *)(a8 + 224) = 0xE000000000000000;
  *(_QWORD *)(a8 + 240) = v19;
  *(_QWORD *)(a8 + 248) = &off_24D2A4440;
  *(_QWORD *)(a8 + 232) = v18;
  *(_QWORD *)a8 = v10;
  *(_BYTE *)(a8 + 8) = v11;
  *(_OWORD *)(a8 + 16) = *((_OWORD *)a1 + 1);
  *(_QWORD *)(a8 + 32) = v12;
  *(_BYTE *)(a8 + 40) = v36;
  *(_QWORD *)(a8 + 48) = v35;
  *(_BYTE *)(a8 + 56) = v34;
  *(_BYTE *)(a8 + 57) = v33;
  *(_BYTE *)(a8 + 58) = v32;
  *(_WORD *)(a8 + 59) = v31;
  *(_OWORD *)(a8 + 64) = v30;
  *(_OWORD *)(a8 + 80) = v29;
  *(_QWORD *)(a8 + 96) = v28;
  v20 = swift_bridgeObjectRetain();
  v21 = sub_2150C0720(v20);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a8 + 104) = v21;
  v22 = swift_bridgeObjectRetain();
  v23 = sub_2150C0720(v22);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a8 + 112) = v23;
  v24 = swift_bridgeObjectRetain();
  v25 = sub_2150C0720(v24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a8 + 120) = v25;
  v26 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a8 + 128) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a8 + 136) = v42;
  *(_QWORD *)(a8 + 144) = v13;
  *(_QWORD *)(a8 + 152) = v14;
  *(_QWORD *)(a8 + 160) = v15;
  *(_BYTE *)(a8 + 168) = v37;
  *(_QWORD *)(a8 + 176) = v16;
  *(_BYTE *)(a8 + 184) = v41;
  *(_BYTE *)(a8 + 185) = v40;
  *(_BYTE *)(a8 + 186) = v39;
  *(_WORD *)(a8 + 187) = v38;
  *(_BYTE *)(a8 + 189) = v37;
  *(_QWORD *)(a8 + 192) = v16;
  *(_QWORD *)(a8 + 200) = 0;
  *(_BYTE *)(a8 + 208) = 1;
  *(_QWORD *)(a8 + 328) = a3;
  *(double *)(a8 + 336) = a4;
  *(_QWORD *)(a8 + 256) = a5;
  *(_QWORD *)(a8 + 264) = a6;
  *(_QWORD *)(a8 + 272) = a7;
  *(_QWORD *)(a8 + 280) = 0;
  v48[0] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)&v48[1] = sub_215043B48(v26);
  sub_2150EE06C(0);
  *(_QWORD *)(a8 + 312) = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D440);
  *(_QWORD *)(a8 + 320) = &off_24D2A4440;
  *(_QWORD *)(a8 + 288) = a3;
  result = a4;
  *(_OWORD *)(a8 + 296) = *(_OWORD *)v48;
  return result;
}

uint64_t sub_2150634F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 264);
  v3 = *(_QWORD *)(v1 + 280);
  v4 = v2 + v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_21;
  }
  if (__OFADD__(v4, result))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (*(_QWORD *)(v1 + 272) >= v4 + result)
    v5 = v4 + result;
  else
    v5 = *(_QWORD *)(v1 + 272);
  v6 = v5 - v4;
  if (v5 < v4)
    goto LABEL_22;
  if (__OFSUB__(v5, v4))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = __OFADD__(v3, v6);
  v8 = v3 + v6;
  if (v7)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 280) = v8;
  result = sub_2150635F4(v4, v5);
  if ((result & 1) == 0)
  {
    result = sub_2150638D4(v4, v5);
    if ((result & 1) == 0)
    {
      result = sub_21506406C(v4, v5);
      if ((result & 1) == 0)
      {
        if (*(_BYTE *)(v1 + 189) == 2)
        {
          result = sub_2150644EC(v4, v5);
          if ((result & 1) != 0)
            return result;
        }
        else
        {
          result = sub_215064A0C(v4, v5);
          if ((result & 1) != 0)
            return result;
        }
        result = sub_215064F24(v4, v5);
        if ((result & 1) == 0)
        {
          result = sub_215065464(v4, v5);
          if ((result & 1) == 0)
            return sub_2150658EC(v4, v5);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2150635F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _UNKNOWN **v49;
  uint64_t v50;
  __int128 v51;

  v3 = v2;
  v4 = sub_215065DAC(&v50, a1, a2, &qword_253F0D440, sub_215043B48, sub_2150EE06C);
  v6 = v5;
  result = (uint64_t)sub_21501EEF0(v2 + 27, v2 + 36);
  if (v4 == v6)
  {
LABEL_2:
    v8 = v50;
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D440);
    v49 = &off_24D2A4440;
    v46 = v8;
    v47 = v51;
    sub_2150668CC((uint64_t)&v46, (uint64_t)(v2 + 36));
    return 1;
  }
  if (v6 < v4)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    return result;
  }
  v45 = v2[11];
  if (__OFSUB__(v45, 1))
    goto LABEL_55;
  v9 = v2[32];
  v10 = v2[8];
  v44 = v2[12];
  v43 = v44 + 32;
  v11 = v10 - 1;
  v42 = v10 - 1;
  while (1)
  {
    if (v4 >= v6)
      goto LABEL_47;
    v12 = v4 * v45;
    if ((unsigned __int128)(v4 * (__int128)v45) >> 64 != (v4 * v45) >> 63)
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    v13 = __OFADD__(v12, v9);
    v14 = v12 + v9;
    if (v13)
      goto LABEL_49;
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_50;
    v15 = *(_QWORD *)(v44 + 16);
    if (v14 >= v15)
      goto LABEL_51;
    v16 = v14 + 1;
    if (v14 + 1 >= v15)
      goto LABEL_52;
    v17 = *(_QWORD *)(v43 + 8 * v14);
    v18 = *(_QWORD *)(v43 + 8 * v16);
    if (v9 == v45 - 1)
    {
      if (v17 < v18)
      {
        while (1)
        {
          v19 = *(unsigned __int8 *)(v11 + v18);
          if (v19 != 13 && v19 != 10)
            break;
          if (v17 >= --v18)
          {
            v18 = v17;
            break;
          }
        }
      }
    }
    else
    {
      v18 -= v17 < v18;
    }
    if (!v10)
      goto LABEL_56;
    if (__OFSUB__(v18, v17))
      goto LABEL_53;
    v21 = v10;
    v22 = v3;
    v23 = v3[13];
    v24 = (unsigned __int8 *)sub_2150C04E0(v10 + v17, v18 - v17);
    v26 = *(_QWORD *)(v23 + 16);
    if (!v26)
      goto LABEL_44;
    v27 = v24;
    v28 = v25;
    v30 = *(_QWORD *)(v23 + 32);
    v29 = v23 + 32;
    result = (uint64_t)sub_215115810(v24, v25, v30);
    if ((result & 1) == 0)
      break;
LABEL_6:
    ++v4;
    result = sub_2150EE79C(0, 0);
    v10 = v21;
    v3 = v22;
    v11 = v42;
    if (v4 == v6)
      goto LABEL_2;
  }
  if (v26 != 1)
  {
    v31 = &v27[v28];
    if (!v27)
      v31 = 0;
    v32 = 1;
    do
    {
      v33 = v32;
      v13 = __OFADD__(v32++, 1);
      if (v13)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v34 = 0;
      v35 = *(_QWORD *)(v29 + 8 * v33);
      v36 = *(_QWORD *)(v35 + 16);
      v37 = v35 + 32;
      v38 = v27;
      while (v34 == v36)
      {
        v39 = 0;
        v40 = v36;
        if (!v38)
          goto LABEL_31;
LABEL_40:
        if (v38 == v31)
          goto LABEL_31;
        if (v34 != v36)
        {
          v41 = *v38++;
          v34 = v40;
          if (v39 == v41)
            continue;
        }
        goto LABEL_32;
      }
      if (v34 >= v36)
      {
        __break(1u);
        goto LABEL_46;
      }
      v39 = *(unsigned __int8 *)(v37 + v34);
      v40 = v34 + 1;
      if (v38)
        goto LABEL_40;
LABEL_31:
      if (v34 == v36)
        goto LABEL_6;
LABEL_32:
      ;
    }
    while (v32 != v26);
  }
LABEL_44:
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_2150638D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char **v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  int v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[24];
  uint64_t v106;
  _UNKNOWN **v107;
  uint64_t v108;
  __int128 v109;

  v5 = sub_21512FB0C();
  MEMORY[0x24BDAC7A8](v5);
  v95 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_215065DAC(&v108, a1, a2, &qword_253F0D450, (uint64_t (*)(_QWORD))sub_215043454, sub_2150EE010);
  v9 = v8;
  v94 = v2 + 36;
  result = (uint64_t)sub_21501EEF0(v2 + 27, v2 + 36);
  if (v7 == v9)
  {
LABEL_2:
    v11 = v108;
    v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D450);
    v107 = &off_24D2A4440;
    *(_QWORD *)v105 = v11;
    *(_OWORD *)&v105[8] = v109;
    sub_2150668CC((uint64_t)v105, (uint64_t)v94);
    return 1;
  }
  if (v9 < v7)
    goto LABEL_130;
  v104 = v2[11];
  v102 = v104 - 1;
  if (!__OFSUB__(v104, 1))
  {
    v12 = v2[32];
    v103 = v2[12];
    v101 = v103 + 32;
    v96 = (char *)&v109 + 8;
    v13 = v2[8];
    v99 = (char **)(v2 + 16);
    v14 = v13 - 1;
    v93 = v13 + 2;
    v100 = v13;
    v98 = v9;
    v97 = v12;
    while (1)
    {
      if (v7 >= v9)
        goto LABEL_114;
      v17 = v7 * v104;
      if ((unsigned __int128)(v7 * (__int128)v104) >> 64 != (v7 * v104) >> 63)
      {
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
        goto LABEL_121;
      }
      v18 = __OFADD__(v17, v12);
      v19 = v17 + v12;
      if (v18)
        goto LABEL_116;
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_117;
      v20 = *(_QWORD *)(v103 + 16);
      if (v19 >= v20)
        goto LABEL_118;
      v21 = v19 + 1;
      if (v19 + 1 >= v20)
        goto LABEL_119;
      v22 = *(_QWORD *)(v101 + 8 * v19);
      v23 = *(_QWORD *)(v101 + 8 * v21);
      if (v12 == v102)
      {
        if (v22 < v23)
        {
          while (1)
          {
            v24 = *(unsigned __int8 *)(v14 + v23);
            if (v24 != 13 && v24 != 10)
              break;
            if (v22 >= --v23)
            {
              v23 = v22;
              break;
            }
          }
        }
      }
      else
      {
        v23 -= v22 < v23;
      }
      if (!v13)
        goto LABEL_132;
      v26 = v23 - v22;
      if (__OFSUB__(v23, v22))
        goto LABEL_120;
      v27 = (unsigned __int8 *)(v13 + v22);
      if (!v26)
        goto LABEL_85;
      if (v26 >= 1)
      {
        v28 = *v27;
        if (v28 == 43)
        {
          if (v26 == 1)
          {
            v29 = 0;
            goto LABEL_47;
          }
          v30 = 0;
          goto LABEL_38;
        }
        if (v28 == 45)
        {
          if (v26 == 1)
          {
            v29 = 0;
LABEL_46:
            v18 = __OFSUB__(0, v29);
            v29 = -v29;
            if (v18)
              goto LABEL_126;
            goto LABEL_47;
          }
          v30 = 1;
LABEL_38:
          v31 = 1;
          goto LABEL_39;
        }
      }
      v30 = 0;
      v31 = 0;
LABEL_39:
      v32 = v27[v31];
      if (v32 > 0x2F && v32 < 0x3A)
      {
        v29 = (v32 - 48);
        if (v31 + 1 != v26)
        {
          v57 = v27[v31 + 1];
          if ((v57 - 58) >= 0xF6u)
          {
            v58 = v31 + v22;
            v59 = v58 - v23 + 2;
            v60 = (unsigned __int8 *)(v93 + v58);
            while (1)
            {
              v61 = 10 * v29;
              if ((unsigned __int128)(v29 * (__int128)10) >> 64 != (10 * v29) >> 63)
                break;
              v62 = v57 - 48;
              v29 = v61 + v62;
              if (__OFADD__(v61, v62))
                goto LABEL_122;
              if (!v59)
                goto LABEL_45;
              v63 = *v60++;
              v57 = v63;
              ++v59;
              if ((v63 - 58) < 0xF6u)
                goto LABEL_85;
            }
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
            break;
          }
LABEL_85:
          v64 = v2;
          v65 = v2[13];
          v66 = (unsigned __int8 *)sub_2150C04E0((uint64_t)v27, v26);
          v68 = *(_QWORD *)(v65 + 16);
          if (v68)
          {
            v69 = v66;
            v70 = v67;
            v72 = *(_QWORD *)(v65 + 32);
            v71 = v65 + 32;
            result = (uint64_t)sub_215115810(v66, v67, v72);
            if ((result & 1) == 0)
            {
              if (v68 == 1)
                goto LABEL_88;
              v82 = &v69[v70];
              if (!v69)
                v82 = 0;
              v83 = 1;
LABEL_100:
              v84 = v83;
              v18 = __OFADD__(v83++, 1);
              if (v18)
              {
LABEL_113:
                __break(1u);
LABEL_114:
                __break(1u);
                goto LABEL_115;
              }
              v85 = 0;
              v86 = *(_QWORD *)(v71 + 8 * v84);
              v87 = *(_QWORD *)(v86 + 16);
              v88 = v86 + 32;
              v89 = v69;
              while (1)
              {
                if (v85 == v87)
                {
                  v90 = 0;
                  v91 = v87;
                  if (!v89)
                    goto LABEL_98;
                }
                else
                {
                  if (v85 >= v87)
                  {
                    __break(1u);
                    goto LABEL_113;
                  }
                  v90 = *(unsigned __int8 *)(v88 + v85);
                  v91 = v85 + 1;
                  if (!v89)
                  {
LABEL_98:
                    if (v85 == v87)
                      break;
LABEL_99:
                    if (v83 == v68)
                      goto LABEL_88;
                    goto LABEL_100;
                  }
                }
                if (v89 == v82)
                  goto LABEL_98;
                if (v85 != v87)
                {
                  v92 = *v89++;
                  v85 = v91;
                  if (v90 == v92)
                    continue;
                }
                goto LABEL_99;
              }
            }
            v15 = 0;
            v16 = 1;
          }
          else
          {
LABEL_88:
            v73 = v99;
            sub_2150E43E4((uint64_t)v27, v26);
            v74 = *v73;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v74 = sub_21502EBE8(0, *((_QWORD *)v74 + 2) + 1, 1, v74);
            v76 = *((_QWORD *)v74 + 2);
            v75 = *((_QWORD *)v74 + 3);
            if (v76 >= v75 >> 1)
              v74 = sub_21502EBE8((char *)(v75 > 1), v76 + 1, 1, v74);
            *((_QWORD *)v74 + 2) = v76 + 1;
            v74[v76 + 32] = 0;
            *v99 = v74;
            sub_21512FB00();
            v77 = sub_21512FAB8();
            if (!v78 || (v79 = sub_2150C1E3C(v77, v78), v81 = v80, swift_bridgeObjectRelease(), (v81 & 1) != 0))
            {
              swift_release();
              swift_bridgeObjectRelease();
              return 0;
            }
            v15 = v79;
            v16 = 0;
          }
          result = sub_2150EE414(v15, v16);
          v2 = v64;
          v9 = v98;
          v12 = v97;
          v13 = v100;
          goto LABEL_8;
        }
LABEL_45:
        if (v30)
          goto LABEL_46;
      }
      else
      {
        if (v31 != v26)
          goto LABEL_85;
        v29 = 0;
        if ((v30 & 1) != 0)
          goto LABEL_46;
      }
LABEL_47:
      v33 = *((_QWORD *)&v109 + 1);
      v34 = (uint64_t *)(*((_QWORD *)&v109 + 1) + 16);
      result = swift_beginAccess();
      v35 = *(_QWORD *)(v33 + 16);
      if (!v35)
        goto LABEL_133;
      v36 = *(_QWORD *)(v35 + 8);
      v37 = v36 + 1;
      if (__OFADD__(v36, 1))
        goto LABEL_123;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        swift_beginAccess();
        result = *v34;
        if (!*v34)
          goto LABEL_135;
        v38 = *(_QWORD *)result;
        if (*(_QWORD *)result < v37)
        {
          if (v38 + 0x4000000000000000 < 0)
            goto LABEL_127;
          v39 = 2 * v38;
          if (v39 <= v37)
            v40 = v37;
          else
            v40 = v39;
          sub_2150975F0(result, v40, (uint64_t *)v105);
          result = *(_QWORD *)(v33 + 16);
          if (!result)
            goto LABEL_137;
          if ((*(_QWORD *)(result + 8) & 0x8000000000000000) != 0)
            goto LABEL_129;
          MEMORY[0x2199DC578]();
          *(_OWORD *)v34 = *(_OWORD *)v105;
        }
      }
      else
      {
        result = swift_beginAccess();
        v41 = (uint64_t *)*v34;
        if (!v41)
          goto LABEL_136;
        v42 = *v41;
        if (*v41 < v37)
        {
          if (v42 + 0x4000000000000000 < 0)
            goto LABEL_128;
          if (2 * v42 <= v37)
            v42 = v37;
          else
            v42 *= 2;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D438);
        v43 = swift_allocObject();
        sub_215096600((uint64_t)v41, v42, (uint64_t *)v105);
        *(_OWORD *)(v43 + 16) = *(_OWORD *)v105;
        swift_release();
        *((_QWORD *)&v109 + 1) = v43;
        v33 = v43;
      }
      result = swift_beginAccess();
      v44 = *(_QWORD **)(v33 + 16);
      if (!v44)
        goto LABEL_134;
      v45 = *v44 + 7;
      v13 = v100;
      if (__OFADD__(*v44, 7))
        goto LABEL_124;
      v46 = v44 + 8;
      if (v45 < 0)
        v45 = *v44 + 14;
      v47 = v45 >> 3;
      v49 = v47 - 1;
      v48 = v47 < 1;
      v50 = v47 + 62;
      if (!v48)
        v50 = v49;
      *(_QWORD *)((char *)&v46[v44[1] + 8] + (v50 & 0xFFFFFFFFFFFFC0)) = v29;
      v51 = v44[1];
      v52 = v51 + 7;
      if (v51 >= 0)
        v52 = v44[1];
      v53 = v52 >> 3;
      v54 = v51 - (v52 & 0xFFFFFFFFFFFFFFF8);
      if (v54 >= 0)
        v55 = 1 << v54;
      else
        v55 = 0;
      *((_BYTE *)v46 + v53) |= v55;
      v18 = __OFADD__(v51, 1);
      v56 = v51 + 1;
      if (v18)
        goto LABEL_125;
      v44[1] = v56;
LABEL_8:
      if (++v7 == v9)
        goto LABEL_2;
    }
  }
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
  return result;
}

uint64_t sub_21506406C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  unint64_t v56;
  int v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  int v66;
  unint64_t v67;
  int v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  _UNKNOWN **v89;
  uint64_t v90;
  __int128 v91;

  v3 = sub_215065DAC(&v90, a1, a2, &qword_253F0D1A8, (uint64_t (*)(_QWORD))sub_215044030, sub_2150EE090);
  v5 = v4;
  result = (uint64_t)sub_21501EEF0(v2 + 27, v2 + 36);
  if (v3 == v5)
  {
LABEL_2:
    v7 = v90;
    v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1A8);
    v89 = &off_24D2A4440;
    v86 = v7;
    v87 = v91;
    sub_2150668CC((uint64_t)&v86, (uint64_t)(v2 + 36));
    return 1;
  }
  if (v5 < v3)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    return result;
  }
  v85 = v2[11];
  if (__OFSUB__(v85, 1))
    goto LABEL_100;
  v8 = v2[32];
  v9 = v2[8];
  v84 = v2[12];
  v82 = v5;
  v83 = v84 + 32;
  v10 = v9 - 1;
  v80 = v9;
  v81 = v8;
  while (2)
  {
    if (v3 >= v5)
      goto LABEL_92;
    v12 = v3 * v85;
    if ((unsigned __int128)(v3 * (__int128)v85) >> 64 != (v3 * v85) >> 63)
      goto LABEL_93;
    v13 = __OFADD__(v12, v8);
    v14 = v12 + v8;
    if (v13)
      goto LABEL_94;
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_95;
    v15 = *(_QWORD *)(v84 + 16);
    if (v14 >= v15)
      goto LABEL_96;
    v16 = v14 + 1;
    if (v14 + 1 >= v15)
      goto LABEL_97;
    v17 = *(_QWORD *)(v83 + 8 * v14);
    v18 = *(_QWORD *)(v83 + 8 * v16);
    if (v8 == v85 - 1)
    {
      if (v17 < v18)
      {
        while (1)
        {
          v19 = *(unsigned __int8 *)(v10 + v18);
          if (v19 != 13 && v19 != 10)
            break;
          if (v17 >= --v18)
          {
            v18 = v17;
            break;
          }
        }
      }
    }
    else
    {
      v18 -= v17 < v18;
    }
    if (!v9)
      goto LABEL_101;
    v21 = v18 - v17;
    if (__OFSUB__(v18, v17))
      goto LABEL_98;
    v22 = v9 + v17;
    v23 = v2[13];
    v24 = (unsigned __int8 *)sub_2150C04E0(v9 + v17, v18 - v17);
    v26 = *(_QWORD *)(v23 + 16);
    if (!v26)
      goto LABEL_29;
    v27 = v24;
    v28 = v25;
    v30 = *(_QWORD *)(v23 + 32);
    v29 = v23 + 32;
    result = (uint64_t)sub_215115810(v24, v25, v30);
    if ((result & 1) != 0)
    {
LABEL_6:
      v11 = 2;
      goto LABEL_7;
    }
    if (v26 == 1)
      goto LABEL_29;
    v58 = &v27[v28];
    if (!v27)
      v58 = 0;
    v59 = 1;
    while (2)
    {
      v60 = v59;
      v13 = __OFADD__(v59++, 1);
      if (v13)
        goto LABEL_90;
      v61 = 0;
      v62 = *(_QWORD *)(v29 + 8 * v60);
      v63 = *(_QWORD *)(v62 + 16);
      v64 = v62 + 32;
      v65 = v27;
      while (1)
      {
        if (v61 == v63)
        {
          v66 = 0;
          v67 = v63;
          if (!v65)
            break;
        }
        else
        {
          if (v61 >= v63)
          {
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
            goto LABEL_99;
          }
          v66 = *(unsigned __int8 *)(v64 + v61);
          v67 = v61 + 1;
          if (!v65)
            break;
        }
        if (v65 == v58)
          break;
        if (v61 != v63)
        {
          v68 = *v65++;
          v61 = v67;
          if (v66 == v68)
            continue;
        }
        goto LABEL_57;
      }
      if (v61 == v63)
        goto LABEL_6;
LABEL_57:
      if (v59 != v26)
        continue;
      break;
    }
LABEL_29:
    v31 = v2[14];
    v32 = (unsigned __int8 *)sub_2150C04E0(v22, v21);
    v34 = *(_QWORD *)(v31 + 16);
    if (!v34)
      goto LABEL_33;
    v35 = v32;
    v36 = v33;
    v38 = *(_QWORD *)(v31 + 32);
    v37 = v31 + 32;
    result = (uint64_t)sub_215115810(v32, v33, v38);
    if ((result & 1) != 0)
    {
LABEL_31:
      v11 = 1;
      goto LABEL_7;
    }
    if (v34 == 1)
      goto LABEL_33;
    v69 = &v35[v36];
    if (!v35)
      v69 = 0;
    v70 = 1;
    while (2)
    {
      v71 = v70;
      v13 = __OFADD__(v70++, 1);
      if (v13)
        goto LABEL_91;
      v72 = 0;
      v73 = *(_QWORD *)(v37 + 8 * v71);
      v74 = *(_QWORD *)(v73 + 16);
      v75 = v73 + 32;
      v76 = v35;
      while (2)
      {
        if (v72 == v74)
        {
          v77 = 0;
          v78 = v74;
          if (!v76)
            break;
          goto LABEL_81;
        }
        if (v72 >= v74)
          goto LABEL_88;
        v77 = *(unsigned __int8 *)(v75 + v72);
        v78 = v72 + 1;
        if (v76)
        {
LABEL_81:
          if (v76 == v69)
            break;
          if (v72 == v74)
            goto LABEL_73;
          v79 = *v76++;
          v72 = v78;
          if (v77 != v79)
            goto LABEL_73;
          continue;
        }
        break;
      }
      if (v72 == v74)
        goto LABEL_31;
LABEL_73:
      if (v70 != v34)
        continue;
      break;
    }
LABEL_33:
    v39 = v2[15];
    v40 = (unsigned __int8 *)sub_2150C04E0(v22, v21);
    v42 = *(_QWORD *)(v39 + 16);
    if (!v42)
      goto LABEL_85;
    v43 = v40;
    v44 = v41;
    v46 = *(_QWORD *)(v39 + 32);
    v45 = v39 + 32;
    result = (uint64_t)sub_215115810(v40, v41, v46);
    if ((result & 1) != 0)
    {
LABEL_35:
      v11 = 0;
LABEL_7:
      ++v3;
      result = sub_2150EE7C0(v11);
      v8 = v81;
      v5 = v82;
      v9 = v80;
      if (v3 == v82)
        goto LABEL_2;
      continue;
    }
    break;
  }
  if (v42 != 1)
  {
    v47 = &v43[v44];
    if (!v43)
      v47 = 0;
    v48 = 1;
    do
    {
      v49 = v48;
      v13 = __OFADD__(v48++, 1);
      if (v13)
        goto LABEL_89;
      v50 = 0;
      v51 = *(_QWORD *)(v45 + 8 * v49);
      v52 = *(_QWORD *)(v51 + 16);
      v53 = v51 + 32;
      v54 = v43;
      while (v50 == v52)
      {
        v55 = 0;
        v56 = v52;
        if (!v54)
          goto LABEL_40;
LABEL_49:
        if (v54 == v47)
          goto LABEL_40;
        if (v50 != v52)
        {
          v57 = *v54++;
          v50 = v56;
          if (v55 == v57)
            continue;
        }
        goto LABEL_41;
      }
      if (v50 >= v52)
      {
        __break(1u);
        goto LABEL_87;
      }
      v55 = *(unsigned __int8 *)(v53 + v50);
      v56 = v50 + 1;
      if (v54)
        goto LABEL_49;
LABEL_40:
      if (v50 == v52)
        goto LABEL_35;
LABEL_41:
      ;
    }
    while (v48 != v42);
  }
LABEL_85:
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_2150644EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  float v43;
  char **v44;
  char *v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63[2];
  char **v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  _UNKNOWN **v81;
  uint64_t v82;

  v3 = v2;
  v82 = *MEMORY[0x24BDAC8D0];
  v6 = sub_21512FB0C();
  MEMORY[0x24BDAC7A8](v6);
  v63[1] = (uint64_t)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_215065DAC(&v76, a1, a2, &qword_254DA7500, (uint64_t (*)(_QWORD))sub_2150442E4, sub_2150EE1A8);
  v10 = v9;
  v63[0] = (uint64_t)(v3 + 36);
  sub_21501EEF0(v3 + 27, v3 + 36);
  if (v8 == v10)
  {
LABEL_2:
    v11 = v76;
    v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7500);
    v81 = &off_24D2A4440;
    v78 = v11;
    v79 = v77;
    sub_2150668CC((uint64_t)&v78, v63[0]);
    return 1;
  }
  if (v10 < v8)
    goto LABEL_83;
  v73 = v3[11];
  v71 = v73 - 1;
  if (__OFSUB__(v73, 1))
  {
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
  }
  v13 = v3[32];
  v72 = v3[12];
  v69 = v3;
  v70 = v72 + 32;
  v66 = (char *)&v77 + 8;
  v67 = v13;
  v75 = v3[8];
  v14 = v75 - 1;
  v68 = v10;
  v64 = (char **)(v3 + 16);
  v65 = v75 - 1;
  while (1)
  {
    if (v8 >= v10)
      goto LABEL_73;
    v16 = v8 * v73;
    if ((unsigned __int128)(v8 * (__int128)v73) >> 64 != (v8 * v73) >> 63)
      goto LABEL_74;
    v17 = __OFADD__(v16, v13);
    v18 = v16 + v13;
    if (v17)
      goto LABEL_75;
    if ((v18 & 0x8000000000000000) != 0)
      goto LABEL_76;
    v19 = *(_QWORD *)(v72 + 16);
    if (v18 >= v19)
      goto LABEL_77;
    if (v18 + 1 >= v19)
      goto LABEL_78;
    v20 = *(_QWORD *)(v70 + 8 * v18);
    v21 = *(_QWORD *)(v70 + 8 * (v18 + 1));
    if (v13 == v71)
    {
      if (v20 < v21)
      {
        while (1)
        {
          v22 = *(unsigned __int8 *)(v14 + v21);
          if (v22 != 13 && v22 != 10)
            break;
          if (v20 >= --v21)
          {
            v21 = v20;
            break;
          }
        }
      }
    }
    else
    {
      v21 -= v20 < v21;
    }
    if (!v75)
      goto LABEL_85;
    v24 = v21 - v20;
    if (__OFSUB__(v21, v20))
      goto LABEL_79;
    v25 = v75 + v20;
    if (v24 < 1)
    {
      v26 = 0;
      v31 = v24 - 1;
      if (__OFSUB__(v24, 1))
        goto LABEL_80;
    }
    else
    {
      v26 = 0;
      while (1)
      {
        v27 = *(unsigned __int8 *)(v25 + v26);
        v28 = v27 > 0x20;
        v29 = (1 << v27) & 0x100002600;
        if (v28 || v29 == 0)
          break;
        if (v24 == ++v26)
        {
          v26 = v21 - v20;
          break;
        }
      }
      v31 = v24 - 1;
      if (__OFSUB__(v24, 1))
        goto LABEL_80;
    }
    if (v26 < v31)
    {
      v32 = (unsigned __int8 *)(v14 + v21);
      while (1)
      {
        v33 = *v32--;
        v34 = (1 << v33) & 0x100002600;
        if (v33 > 0x20 || v34 == 0)
          break;
        if (v26 >= --v31)
        {
          v31 = v26;
          break;
        }
      }
    }
    v36 = v31 - v26;
    if (__OFSUB__(v31, v26))
      goto LABEL_81;
    v37 = v36 + 1;
    if (__OFADD__(v36, 1))
      goto LABEL_82;
    v74 = v8;
    v38 = v3[13];
    v39 = *(_QWORD *)(v38 + 16);
    if (!v39)
      goto LABEL_52;
    v41 = *(_QWORD *)(v38 + 32);
    v40 = v38 + 32;
    if ((sub_215115810((unsigned __int8 *)(v25 + v26), v36 + 1, v41) & 1) == 0)
      break;
LABEL_6:
    LOBYTE(v78) = 1;
    v15 = 0x100000000;
LABEL_7:
    v3 = v69;
LABEL_8:
    v8 = v74 + 1;
    sub_2150EE928(v15);
    v13 = v67;
    v10 = v68;
    v14 = v65;
    if (v8 == v68)
      goto LABEL_2;
  }
  if (v39 != 1)
  {
    v52 = 1;
    while (1)
    {
      v53 = v52;
      v17 = __OFADD__(v52++, 1);
      if (v17)
        break;
      v54 = *(_QWORD *)(v40 + 8 * v53);
      v55 = *(_QWORD *)(v54 + 16);
      v56 = (unsigned __int8 *)(v54 + 32);
      v57 = v75 + v26 + v20 + v55;
      v58 = v37;
      v59 = (unsigned __int8 *)(v25 + v26);
      while (v55)
      {
        if (v58)
        {
          v61 = *v56++;
          v60 = v61;
          v62 = *v59++;
          --v58;
          --v55;
          if (v60 == v62)
            continue;
        }
        goto LABEL_64;
      }
      if (v25 + v26 + v37 == v57)
        goto LABEL_6;
LABEL_64:
      if (v52 == v39)
        goto LABEL_52;
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
LABEL_52:
  v78 = (char *)(v25 + v24);
  v42 = *(_BYTE *)(v25 + v24);
  *(_BYTE *)(v25 + v24) = 0;
  v43 = strtof((const char *)v25, &v78);
  if (v78 && &v78[-v25] == (char *)v24)
  {
    *(_BYTE *)(v25 + v24) = v42;
    LOBYTE(v78) = 0;
    v15 = LODWORD(v43);
    goto LABEL_7;
  }
  *(_BYTE *)(v25 + v24) = v42;
  v44 = v64;
  sub_2150E43E4(v25, v24);
  v45 = *v44;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3 = v69;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v45 = sub_21502EBE8(0, *((_QWORD *)v45 + 2) + 1, 1, v45);
  v48 = *((_QWORD *)v45 + 2);
  v47 = *((_QWORD *)v45 + 3);
  if (v48 >= v47 >> 1)
    v45 = sub_21502EBE8((char *)(v47 > 1), v48 + 1, 1, v45);
  *((_QWORD *)v45 + 2) = v48 + 1;
  v45[v48 + 32] = 0;
  *v64 = v45;
  sub_21512FB00();
  v49 = sub_21512FAB8();
  if (v50)
  {
    v51 = sub_21506AFD8(v49, v50);
    swift_bridgeObjectRelease();
    if ((v51 & 0x100000000) == 0)
    {
      LOBYTE(v78) = 0;
      v15 = v51;
      goto LABEL_8;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_215064A0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  double v44;
  char **v45;
  char *v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66[2];
  char **v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  _UNKNOWN **v84;
  uint64_t v85;

  v3 = v2;
  v85 = *MEMORY[0x24BDAC8D0];
  v6 = sub_21512FB0C();
  MEMORY[0x24BDAC7A8](v6);
  v66[1] = (uint64_t)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_215065DAC(&v79, a1, a2, &qword_253F0D448, (uint64_t (*)(_QWORD))sub_215043D68, sub_2150EE050);
  v10 = v9;
  v66[0] = (uint64_t)(v3 + 36);
  sub_21501EEF0(v3 + 27, v3 + 36);
  if (v8 == v10)
  {
LABEL_2:
    v11 = v79;
    v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D448);
    v84 = &off_24D2A4440;
    v81 = v11;
    v82 = v80;
    sub_2150668CC((uint64_t)&v81, v66[0]);
    return 1;
  }
  if (v10 < v8)
    goto LABEL_83;
  v76 = v3[11];
  v74 = v76 - 1;
  if (__OFSUB__(v76, 1))
  {
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
  }
  v13 = v3[32];
  v75 = v3[12];
  v72 = v3;
  v73 = v75 + 32;
  v69 = (char *)&v80 + 8;
  v70 = v13;
  v78 = v3[8];
  v14 = v78 - 1;
  v71 = v10;
  v67 = (char **)(v3 + 16);
  v68 = v78 - 1;
  while (1)
  {
    if (v8 >= v10)
      goto LABEL_73;
    v17 = v8 * v76;
    if ((unsigned __int128)(v8 * (__int128)v76) >> 64 != (v8 * v76) >> 63)
      goto LABEL_74;
    v18 = __OFADD__(v17, v13);
    v19 = v17 + v13;
    if (v18)
      goto LABEL_75;
    if ((v19 & 0x8000000000000000) != 0)
      goto LABEL_76;
    v20 = *(_QWORD *)(v75 + 16);
    if (v19 >= v20)
      goto LABEL_77;
    if (v19 + 1 >= v20)
      goto LABEL_78;
    v21 = *(_QWORD *)(v73 + 8 * v19);
    v22 = *(_QWORD *)(v73 + 8 * (v19 + 1));
    if (v13 == v74)
    {
      if (v21 < v22)
      {
        while (1)
        {
          v23 = *(unsigned __int8 *)(v14 + v22);
          if (v23 != 13 && v23 != 10)
            break;
          if (v21 >= --v22)
          {
            v22 = v21;
            break;
          }
        }
      }
    }
    else
    {
      v22 -= v21 < v22;
    }
    if (!v78)
      goto LABEL_85;
    v25 = v22 - v21;
    if (__OFSUB__(v22, v21))
      goto LABEL_79;
    v26 = v78 + v21;
    if (v25 < 1)
    {
      v27 = 0;
      v32 = v25 - 1;
      if (__OFSUB__(v25, 1))
        goto LABEL_80;
    }
    else
    {
      v27 = 0;
      while (1)
      {
        v28 = *(unsigned __int8 *)(v26 + v27);
        v29 = v28 > 0x20;
        v30 = (1 << v28) & 0x100002600;
        if (v29 || v30 == 0)
          break;
        if (v25 == ++v27)
        {
          v27 = v22 - v21;
          break;
        }
      }
      v32 = v25 - 1;
      if (__OFSUB__(v25, 1))
        goto LABEL_80;
    }
    if (v27 < v32)
    {
      v33 = (unsigned __int8 *)(v14 + v22);
      while (1)
      {
        v34 = *v33--;
        v35 = (1 << v34) & 0x100002600;
        if (v34 > 0x20 || v35 == 0)
          break;
        if (v27 >= --v32)
        {
          v32 = v27;
          break;
        }
      }
    }
    v37 = v32 - v27;
    if (__OFSUB__(v32, v27))
      goto LABEL_81;
    v38 = v37 + 1;
    if (__OFADD__(v37, 1))
      goto LABEL_82;
    v77 = v8;
    v39 = v3[13];
    v40 = *(_QWORD *)(v39 + 16);
    if (!v40)
      goto LABEL_52;
    v42 = *(_QWORD *)(v39 + 32);
    v41 = v39 + 32;
    if ((sub_215115810((unsigned __int8 *)(v26 + v27), v37 + 1, v42) & 1) == 0)
      break;
LABEL_6:
    v15 = 0;
    v16 = 1;
LABEL_7:
    sub_2150EE5C4(v15, v16);
    v3 = v72;
LABEL_8:
    v8 = v77 + 1;
    v13 = v70;
    v10 = v71;
    v14 = v68;
    if (v77 + 1 == v71)
      goto LABEL_2;
  }
  if (v40 != 1)
  {
    v55 = 1;
    while (1)
    {
      v56 = v55;
      v18 = __OFADD__(v55++, 1);
      if (v18)
        break;
      v57 = *(_QWORD *)(v41 + 8 * v56);
      v58 = *(_QWORD *)(v57 + 16);
      v59 = (unsigned __int8 *)(v57 + 32);
      v60 = v78 + v27 + v21 + v58;
      v61 = v38;
      v62 = (unsigned __int8 *)(v26 + v27);
      while (v58)
      {
        if (v61)
        {
          v64 = *v59++;
          v63 = v64;
          v65 = *v62++;
          --v61;
          --v58;
          if (v63 == v65)
            continue;
        }
        goto LABEL_64;
      }
      if (v26 + v27 + v38 == v60)
        goto LABEL_6;
LABEL_64:
      if (v55 == v40)
        goto LABEL_52;
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
LABEL_52:
  v81 = (char *)(v26 + v25);
  v43 = *(_BYTE *)(v26 + v25);
  *(_BYTE *)(v26 + v25) = 0;
  v44 = strtod((const char *)v26, &v81);
  if (v81 && &v81[-v26] == (char *)v25)
  {
    v15 = *(_QWORD *)&v44;
    *(_BYTE *)(v26 + v25) = v43;
    v16 = 0;
    goto LABEL_7;
  }
  *(_BYTE *)(v26 + v25) = v43;
  v45 = v67;
  sub_2150E43E4(v26, v25);
  v46 = *v45;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3 = v72;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v46 = sub_21502EBE8(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
  v49 = *((_QWORD *)v46 + 2);
  v48 = *((_QWORD *)v46 + 3);
  if (v49 >= v48 >> 1)
    v46 = sub_21502EBE8((char *)(v48 > 1), v49 + 1, 1, v46);
  *((_QWORD *)v46 + 2) = v49 + 1;
  v46[v49 + 32] = 0;
  *v67 = v46;
  sub_21512FB00();
  v50 = sub_21512FAB8();
  if (v51)
  {
    v52 = sub_21506B0D0(v50, v51);
    v54 = v53;
    swift_bridgeObjectRelease();
    if ((v54 & 1) == 0)
    {
      sub_2150EE5C4(v52, 0);
      goto LABEL_8;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_215064F24(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char **v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _UNKNOWN **v84;
  uint64_t v85;
  __int128 v86;

  v3 = v2;
  v6 = sub_21512F740();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v74 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v79 = (char *)&v71 - v13;
  v14 = sub_21512FB0C();
  MEMORY[0x24BDAC7A8](v14);
  v75 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_215065DAC(&v85, a1, a2, &qword_253F0D1A0, sub_215044588, sub_2150EE0AC);
  v18 = v17;
  v72 = v3 + 36;
  result = (uint64_t)sub_21501EEF0(v3 + 27, v3 + 36);
  if (v16 == v18)
  {
LABEL_2:
    v20 = v85;
    v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1A0);
    v84 = &off_24D2A4440;
    v81 = v20;
    v82 = v86;
    sub_2150668CC((uint64_t)&v81, (uint64_t)v72);
    return 1;
  }
  if (v18 < v16)
    goto LABEL_65;
  v76 = (char *)&v86 + 8;
  v77 = v18;
  v80 = (char **)(v3 + 16);
  v73 = v3 + 24;
  v78 = v6;
  while (1)
  {
    if (v16 >= v18)
      goto LABEL_57;
    v22 = v3[11];
    v23 = v16 * v22;
    if ((unsigned __int128)(v16 * (__int128)v22) >> 64 != (v16 * v22) >> 63)
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      return result;
    }
    v24 = v3[32];
    v25 = __OFADD__(v23, v24);
    v26 = v23 + v24;
    if (v25)
      goto LABEL_59;
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_60;
    v27 = v3[12];
    v28 = *(_QWORD *)(v27 + 16);
    if (v26 >= v28)
      goto LABEL_61;
    v29 = v26 + 1;
    if (v26 + 1 >= v28)
      goto LABEL_62;
    v30 = v22 - 1;
    if (__OFSUB__(v22, 1))
      goto LABEL_63;
    v31 = v3[8];
    v32 = v27 + 32;
    v33 = *(_QWORD *)(v32 + 8 * v26);
    v34 = *(_QWORD *)(v32 + 8 * v29);
    if (v24 == v30)
    {
      if (v33 < v34)
      {
        while (1)
        {
          v35 = *(unsigned __int8 *)(v31 - 1 + v34);
          if (v35 != 13 && v35 != 10)
            break;
          if (v33 >= --v34)
          {
            v34 = v33;
            break;
          }
        }
      }
    }
    else
    {
      v34 -= v33 < v34;
    }
    if (!v31)
      goto LABEL_66;
    v37 = v34 - v33;
    if (__OFSUB__(v34, v33))
      goto LABEL_64;
    v38 = v12;
    v39 = v7;
    v40 = v31 + v33;
    v41 = v3[13];
    v42 = (unsigned __int8 *)sub_2150C04E0(v31 + v33, v34 - v33);
    v44 = *(_QWORD *)(v41 + 16);
    if (!v44)
      goto LABEL_29;
    v45 = v42;
    v46 = v43;
    v48 = *(_QWORD *)(v41 + 32);
    v47 = v41 + 32;
    result = (uint64_t)sub_215115810(v42, v43, v48);
    if ((result & 1) == 0)
      break;
LABEL_5:
    v7 = v39;
    v21 = (uint64_t)v79;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v79, 1, 1, v78);
    sub_2150EE438(v21);
    result = sub_215066908(v21);
    v12 = v38;
LABEL_6:
    ++v16;
    v18 = v77;
    if (v16 == v77)
      goto LABEL_2;
  }
  if (v44 != 1)
  {
    v60 = &v45[v46];
    if (!v45)
      v60 = 0;
    v61 = 1;
    do
    {
      v62 = v61;
      v25 = __OFADD__(v61++, 1);
      if (v25)
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v63 = 0;
      v64 = *(_QWORD *)(v47 + 8 * v62);
      v65 = *(_QWORD *)(v64 + 16);
      v66 = v64 + 32;
      v67 = v45;
      while (v63 == v65)
      {
        v68 = 0;
        v69 = v65;
        if (!v67)
          goto LABEL_39;
LABEL_48:
        if (v67 == v60)
          goto LABEL_39;
        if (v63 != v65)
        {
          v70 = *v67++;
          v63 = v69;
          if (v68 == v70)
            continue;
        }
        goto LABEL_40;
      }
      if (v63 >= v65)
      {
        __break(1u);
        goto LABEL_56;
      }
      v68 = *(unsigned __int8 *)(v66 + v63);
      v69 = v63 + 1;
      if (v67)
        goto LABEL_48;
LABEL_39:
      if (v63 == v65)
        goto LABEL_5;
LABEL_40:
      ;
    }
    while (v61 != v44);
  }
LABEL_29:
  v49 = v37;
  v50 = v80;
  sub_2150E43E4(v40, v49);
  v51 = *v50;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v51 = sub_21502EBE8(0, *((_QWORD *)v51 + 2) + 1, 1, v51);
  v12 = v38;
  v53 = *((_QWORD *)v51 + 2);
  v52 = *((_QWORD *)v51 + 3);
  if (v53 >= v52 >> 1)
    v51 = sub_21502EBE8((char *)(v52 > 1), v53 + 1, 1, v51);
  *((_QWORD *)v51 + 2) = v53 + 1;
  v51[v53 + 32] = 0;
  *v80 = v51;
  sub_21512FB00();
  v54 = sub_21512FAB8();
  if (!v55)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_2150C0AA4(v54, v55, v38);
  swift_bridgeObjectRelease();
  v7 = v39;
  v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v57 = v78;
  if (v56(v38, 1, v78) != 1)
  {
    v58 = v74;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v74, v38, v57);
    v59 = (uint64_t)v79;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v79, v58, v57);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v59, 0, 1, v57);
    sub_2150EE438(v59);
    sub_215066908(v59);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v58, v57);
    goto LABEL_6;
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_215066908((uint64_t)v38);
  return 0;
}

uint64_t sub_215065464(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char **v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _UNKNOWN **v77;
  uint64_t v78;
  __int128 v79;

  v3 = v2;
  v6 = sub_21512FB0C();
  MEMORY[0x24BDAC7A8](v6);
  v61 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_215065DAC(&v78, a1, a2, &qword_253F0D440, sub_215043B48, sub_2150EE06C);
  v10 = v9;
  v60 = v3 + 36;
  result = (uint64_t)sub_21501EEF0(v3 + 27, v3 + 36);
  if (v8 == v10)
  {
LABEL_2:
    v12 = v78;
    v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D440);
    v77 = &off_24D2A4440;
    v74 = v12;
    v75 = v79;
    sub_2150668CC((uint64_t)&v74, (uint64_t)v60);
    return 1;
  }
  if (v10 < v8)
    goto LABEL_78;
  v70 = v3[11];
  v68 = v70 - 1;
  if (!__OFSUB__(v70, 1))
  {
    v13 = v3[32];
    v69 = v3[12];
    v66 = v3;
    v67 = v69 + 32;
    v14 = v3[8];
    v71 = (char **)(v3 + 16);
    v73 = v14;
    v15 = v14 - 1;
    v64 = v13;
    v65 = v10;
    v62 = (char *)&v79 + 8;
    v63 = v14 - 1;
    while (1)
    {
      if (v8 >= v10)
      {
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        break;
      }
      v16 = v8 * v70;
      if ((unsigned __int128)(v8 * (__int128)v70) >> 64 != (v8 * v70) >> 63)
        goto LABEL_69;
      v17 = __OFADD__(v16, v13);
      v18 = v16 + v13;
      if (v17)
        goto LABEL_70;
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_71;
      v19 = *(_QWORD *)(v69 + 16);
      if (v18 >= v19)
        goto LABEL_72;
      if (v18 + 1 >= v19)
        goto LABEL_73;
      v20 = *(_QWORD *)(v67 + 8 * v18);
      v21 = *(_QWORD *)(v67 + 8 * (v18 + 1));
      if (v13 == v68)
      {
        if (v20 < v21)
        {
          while (1)
          {
            v22 = *(unsigned __int8 *)(v15 + v21);
            if (v22 != 13 && v22 != 10)
              break;
            if (v20 >= --v21)
            {
              v21 = v20;
              break;
            }
          }
        }
      }
      else
      {
        v21 -= v20 < v21;
      }
      if (!v73)
        goto LABEL_80;
      v24 = v21 - v20;
      if (__OFSUB__(v21, v20))
        goto LABEL_74;
      v25 = v73 + v20;
      if (v24 < 1)
      {
        v26 = 0;
        v31 = v24 - 1;
        if (__OFSUB__(v24, 1))
          goto LABEL_75;
      }
      else
      {
        v26 = 0;
        while (1)
        {
          v27 = *(unsigned __int8 *)(v25 + v26);
          v28 = v27 > 0x20;
          v29 = (1 << v27) & 0x100002600;
          if (v28 || v29 == 0)
            break;
          if (v24 == ++v26)
          {
            v26 = v21 - v20;
            break;
          }
        }
        v31 = v24 - 1;
        if (__OFSUB__(v24, 1))
          goto LABEL_75;
      }
      if (v26 < v31)
      {
        v32 = (unsigned __int8 *)(v15 + v21);
        while (1)
        {
          v33 = *v32--;
          v34 = (1 << v33) & 0x100002600;
          if (v33 > 0x20 || v34 == 0)
            break;
          if (v26 >= --v31)
          {
            v31 = v26;
            break;
          }
        }
      }
      v36 = v31 - v26;
      if (__OFSUB__(v31, v26))
        goto LABEL_76;
      v37 = v36 + 1;
      if (__OFADD__(v36, 1))
        goto LABEL_77;
      v72 = v8;
      v38 = v3[13];
      v39 = *(_QWORD *)(v38 + 16);
      if (v39)
      {
        v41 = *(_QWORD *)(v38 + 32);
        v40 = v38 + 32;
        result = (uint64_t)sub_215115810((unsigned __int8 *)(v25 + v26), v36 + 1, v41);
        if ((result & 1) != 0)
        {
LABEL_6:
          result = sub_2150EE79C(0, 0);
          v3 = v66;
          goto LABEL_7;
        }
        if (v39 != 1)
        {
          v48 = 1;
          while (1)
          {
            v49 = v48;
            v17 = __OFADD__(v48++, 1);
            if (v17)
              break;
            v50 = *(_QWORD *)(v40 + 8 * v49);
            v51 = *(_QWORD *)(v50 + 16);
            v52 = (unsigned __int8 *)(v50 + 32);
            v53 = v73 + v26 + v20 + v51;
            v54 = v37;
            v55 = (unsigned __int8 *)(v25 + v26);
            while (v51)
            {
              if (v54)
              {
                v57 = *v52++;
                v56 = v57;
                v58 = *v55++;
                --v54;
                --v51;
                if (v56 == v58)
                  continue;
              }
              goto LABEL_59;
            }
            if (v25 + v26 + v37 == v53)
              goto LABEL_6;
LABEL_59:
            if (v48 == v39)
              goto LABEL_51;
          }
          __break(1u);
          goto LABEL_68;
        }
      }
LABEL_51:
      v42 = v71;
      sub_2150E43E4(v25, v24);
      v43 = *v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = sub_21502EBE8(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
      v3 = v66;
      v45 = *((_QWORD *)v43 + 2);
      v44 = *((_QWORD *)v43 + 3);
      if (v45 >= v44 >> 1)
        v43 = sub_21502EBE8((char *)(v44 > 1), v45 + 1, 1, v43);
      *((_QWORD *)v43 + 2) = v45 + 1;
      v43[v45 + 32] = 0;
      *v71 = v43;
      sub_21512FB00();
      v46 = sub_21512FAB8();
      if (!v47)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 0;
      }
      sub_2150EE79C(v46, v47);
      result = swift_bridgeObjectRelease();
LABEL_7:
      v8 = v72 + 1;
      v13 = v64;
      v10 = v65;
      v15 = v63;
      if (v72 + 1 == v65)
        goto LABEL_2;
    }
  }
  __break(1u);
LABEL_80:
  __break(1u);
  return result;
}

uint64_t sub_2150658EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _BYTE __dst[14];
  unsigned __int8 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  _UNKNOWN **v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v3 = sub_215065DAC(&v67, a1, a2, &qword_254DA74F8, sub_21504490C, sub_2150EE2D0);
  v5 = v4;
  v60 = (uint64_t)(v2 + 36);
  sub_21501EEF0(v2 + 27, v2 + 36);
  if (v3 != v5)
  {
    if (v5 < v3)
      goto LABEL_80;
    v61 = v2 + 16;
    v62 = v5;
    v63 = v2;
    while (1)
    {
      if (v3 >= v5)
        goto LABEL_69;
      v10 = v2[11];
      v11 = v3 * v10;
      if ((unsigned __int128)(v3 * (__int128)v10) >> 64 != (v3 * v10) >> 63)
        goto LABEL_70;
      v12 = v2[32];
      v13 = __OFADD__(v11, v12);
      v14 = v11 + v12;
      if (v13)
        goto LABEL_71;
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_72;
      v15 = v2[12];
      v16 = *(_QWORD *)(v15 + 16);
      if (v14 >= v16)
        goto LABEL_73;
      if (v14 + 1 >= v16)
        goto LABEL_74;
      v17 = v10 - 1;
      if (__OFSUB__(v10, 1))
        goto LABEL_75;
      v18 = v2[8];
      v19 = *(_QWORD *)(v15 + 32 + 8 * v14);
      v20 = *(_QWORD *)(v15 + 32 + 8 * (v14 + 1));
      if (v12 == v17)
      {
        if (v19 < v20)
        {
          while (1)
          {
            v21 = *(unsigned __int8 *)(v18 - 1 + v20);
            if (v21 != 13 && v21 != 10)
              break;
            if (v19 >= --v20)
            {
              v20 = v19;
              break;
            }
          }
        }
      }
      else
      {
        v20 -= v19 < v20;
      }
      if (!v18)
        goto LABEL_81;
      v23 = v20 - v19;
      if (__OFSUB__(v20, v19))
        goto LABEL_76;
      v24 = v18 + v19;
      if (v23 < 1)
      {
        v25 = 0;
        v30 = v23 - 1;
        if (__OFSUB__(v23, 1))
          goto LABEL_77;
      }
      else
      {
        v25 = 0;
        while (1)
        {
          v26 = *(unsigned __int8 *)(v24 + v25);
          v27 = v26 > 0x20;
          v28 = (1 << v26) & 0x100002600;
          if (v27 || v28 == 0)
            break;
          if (v23 == ++v25)
          {
            v25 = v20 - v19;
            break;
          }
        }
        v30 = v23 - 1;
        if (__OFSUB__(v23, 1))
          goto LABEL_77;
      }
      if (v25 < v30)
      {
        v31 = (unsigned __int8 *)(v18 + v20 - 1);
        while (1)
        {
          v32 = *v31--;
          v33 = (1 << v32) & 0x100002600;
          if (v32 > 0x20 || v33 == 0)
            break;
          if (v25 >= --v30)
          {
            v30 = v25;
            break;
          }
        }
      }
      v35 = v30 - v25;
      if (__OFSUB__(v30, v25))
        goto LABEL_78;
      v36 = v35 + 1;
      if (__OFADD__(v35, 1))
        goto LABEL_79;
      v64 = v3;
      v37 = v2[13];
      v38 = *(_QWORD *)(v37 + 16);
      if (!v38)
        goto LABEL_53;
      v39 = v2[8];
      v41 = *(_QWORD *)(v37 + 32);
      v40 = v37 + 32;
      if ((sub_215115810((unsigned __int8 *)(v24 + v25), v35 + 1, v41) & 1) == 0)
        break;
LABEL_51:
      sub_2150EEA98(0, 0xF000000000000000);
      v5 = v62;
LABEL_7:
      v2 = v63;
      v3 = v64 + 1;
      if (v64 + 1 == v5)
        goto LABEL_2;
    }
    if (v38 != 1)
    {
      v49 = 1;
      while (1)
      {
        v50 = v49;
        v13 = __OFADD__(v49++, 1);
        if (v13)
          break;
        v51 = *(_QWORD *)(v40 + 8 * v50);
        v52 = *(_QWORD *)(v51 + 16);
        v53 = (unsigned __int8 *)(v51 + 32);
        v54 = v39 + v25 + v19 + v52;
        v55 = v36;
        v56 = (unsigned __int8 *)(v24 + v25);
        while (v52)
        {
          if (v55)
          {
            v58 = *v53++;
            v57 = v58;
            v59 = *v56++;
            --v55;
            --v52;
            if (v57 == v59)
              continue;
          }
          goto LABEL_60;
        }
        if (v24 + v25 + v36 == v54)
          goto LABEL_51;
LABEL_60:
        if (v49 == v38)
          goto LABEL_53;
      }
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
    }
LABEL_53:
    sub_2150E43E4(v24, v23);
    v42 = *v61;
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1D0);
    v71 = v43;
    v72 = (_UNKNOWN **)sub_21505CA28();
    v69 = v42;
    v44 = __swift_project_boxed_opaque_existential_1(&v69, v43);
    v45 = *v44;
    v46 = *(_QWORD *)(*v44 + 16);
    if (v46)
    {
      v5 = v62;
      if (v46 <= 0xE)
      {
        memset(__dst, 0, sizeof(__dst));
        v66 = v46;
        memcpy(__dst, (const void *)(v45 + 32), v46);
        v8 = *(_QWORD *)__dst;
        v9 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v66 << 48);
        swift_bridgeObjectRetain_n();
      }
      else
      {
        sub_21512F554();
        swift_allocObject();
        swift_bridgeObjectRetain_n();
        v47 = sub_21512F524();
        v48 = v47;
        if (v46 >= 0x7FFFFFFF)
        {
          sub_21512F65C();
          v8 = swift_allocObject();
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = v46;
          v9 = v48 | 0x8000000000000000;
        }
        else
        {
          v8 = v46 << 32;
          v9 = v47 | 0x4000000000000000;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain_n();
      v8 = 0;
      v9 = 0xC000000000000000;
      v5 = v62;
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);
    sub_2150EEA98(v8, v9);
    sub_21501F0D8(v8, v9);
    goto LABEL_7;
  }
LABEL_2:
  v6 = v67;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA74F8);
  v72 = &off_24D2A4440;
  v69 = v6;
  v70 = v68;
  return sub_2150668CC((uint64_t)&v69, v60);
}

uint64_t sub_215065DAC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(uint64_t))
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22[40];
  __int128 v23;
  uint64_t v24;

  sub_21501EE90((uint64_t)(v6 + 36), (uint64_t)&v23);
  sub_2150459B0(&v23, (uint64_t)v22);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v15 = v19;
    v14 = v20;
    v16 = v21;
LABEL_6:
    *a1 = v15;
    a1[1] = v14;
    a1[2] = v16;
    return a2;
  }
  a2 = v6[33];
  v17 = v6[34];
  v18 = v17 - a2;
  if (__OFSUB__(v17, a2))
  {
    __break(1u);
  }
  else
  {
    v15 = v6[41];
    v14 = v6[42];
    swift_bridgeObjectRetain();
    v24 = a5(MEMORY[0x24BEE4AF8]);
    result = a6(v18);
    if (a2 <= a3)
    {
      v16 = v24;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_215065EB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21501EE90(v1 + 288, a1);
}

uint64_t sub_215065EC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v2[41] = a1;
  v2[42] = a2;
  v5 = v2[39];
  v6 = v2[40];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 36), v5);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  return v8(a1, a2, v5, v7);
}

uint64_t sub_215065F38(uint64_t a1)
{
  return sub_2150634F4(a1);
}

uint64_t destroy for InferringColumnProcessor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 216);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 288);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InferringColumnProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v18 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_WORD *)(a1 + 188) = *(_WORD *)(a2 + 188);
  v8 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v8;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v17 = a1 + 216;
  v16 = a2 + 216;
  v9 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 240) = v9;
  v10 = v9;
  v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v17, v16, v10);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  v11 = *(_QWORD *)(a2 + 312);
  v12 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = v11;
  *(_QWORD *)(a1 + 320) = v12;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 288, a2 + 288);
  v13 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InferringColumnProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_BYTE *)(a1 + 187) = *(_BYTE *)(a2 + 187);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_BYTE *)(a1 + 189) = *(_BYTE *)(a2 + 189);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v4;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 216), (uint64_t *)(a2 + 216));
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 288), (uint64_t *)(a2 + 288));
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

void *__swift_memcpy344_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x158uLL);
}

uint64_t assignWithTake for InferringColumnProcessor(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_WORD *)(a1 + 59) = *(_WORD *)(a2 + 59);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_BYTE *)(a1 + 187) = *(_BYTE *)(a2 + 187);
  *(_WORD *)(a1 + 188) = *(_WORD *)(a2 + 188);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 216);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v5 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v5;
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 288);
  v6 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v6;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferringColumnProcessor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 344))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferringColumnProcessor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 344) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 344) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InferringColumnProcessor()
{
  return &type metadata for InferringColumnProcessor;
}

uint64_t sub_2150668CC(uint64_t a1, uint64_t a2)
{
  assignWithTake for AnyColumn(a2, a1);
  return a2;
}

uint64_t sub_215066908(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void static SummaryColumnIDs.columnName.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6D756C6F63;
  a1[1] = 0xE600000000000000;
}

void static SummaryColumnIDs.mean.getter(_QWORD *a1@<X8>)
{
  *a1 = 1851876717;
  a1[1] = 0xE400000000000000;
}

void static SummaryColumnIDs.standardDeviation.getter(_QWORD *a1@<X8>)
{
  *a1 = 6583411;
  a1[1] = 0xE300000000000000;
}

void static SummaryColumnIDs.minimum.getter(_QWORD *a1@<X8>)
{
  *a1 = 7235949;
  a1[1] = 0xE300000000000000;
}

void static SummaryColumnIDs.maximum.getter(_QWORD *a1@<X8>)
{
  *a1 = 7889261;
  a1[1] = 0xE300000000000000;
}

void static SummaryColumnIDs.median.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6E616964656DLL;
  a1[1] = 0xE600000000000000;
}

void static SummaryColumnIDs.firstQuartile.getter(_QWORD *a1@<X8>)
{
  *a1 = 12625;
  a1[1] = 0xE200000000000000;
}

void static SummaryColumnIDs.thirdQuartile.getter(_QWORD *a1@<X8>)
{
  *a1 = 13137;
  a1[1] = 0xE200000000000000;
}

void static SummaryColumnIDs.mode.getter(_QWORD *a1@<X8>)
{
  *a1 = 1701080941;
  a1[1] = 0xE400000000000000;
}

void static SummaryColumnIDs.uniqueCount.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6F43657571696E75;
  a1[1] = 0xEB00000000746E75;
}

void static SummaryColumnIDs.noneCount.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6E756F43656E6F6ELL;
  a1[1] = 0xE900000000000074;
}

void static SummaryColumnIDs.someCount.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6E756F43656D6F73;
  a1[1] = 0xE900000000000074;
}

ValueMetadata *type metadata accessor for SummaryColumnIDs()
{
  return &type metadata for SummaryColumnIDs;
}

uint64_t sub_215066A70(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_215038BE4(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v5 = sub_21512FB48();
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        sub_215038BE4((char *)(v6 > 1), v7 + 1, 1);
      v4 += 16;
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

Swift::Int sub_215066B54()
{
  uint64_t v0;
  Swift::Int result;
  Swift::Int v2;
  uint64_t i;
  uint64_t v4;

  result = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  if (result < v2)
  {
    for (i = 0; ; ++i)
    {
      v4 = i + 1;
      if (__OFADD__(i, 1))
        break;
      result = DataFrame.Rows.index(after:)(result);
      if (result == v2)
        return v4;
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (v2 < result)
  {
    v4 = 0;
    while (!__OFSUB__(v4--, 1))
    {
      result = DataFrame.Rows.index(before:)(result);
      if (result == v2)
        return v4;
    }
    goto LABEL_14;
  }
  return 0;
}

uint64_t DataFrameProtocol.writeCSV(to:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 112);
  v16[0] = *(_BYTE *)a2;
  v11 = *(_OWORD *)(a2 + 24);
  v17 = *(_OWORD *)(a2 + 8);
  v18 = v11;
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = v8;
  v23 = v9;
  v24 = v10;
  result = DataFrameProtocol.csvRepresentation(options:)(v16, a3, a4);
  if (!v4)
  {
    v14 = result;
    v15 = v13;
    sub_21512F698();
    return sub_21501F0D8(v14, v15);
  }
  return result;
}

uint64_t DataFrameProtocol.csvRepresentation(options:)(unsigned __int8 *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t, _QWORD *);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD *);
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t *__return_ptr, uint64_t, _QWORD *);
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD v103[4];
  uint64_t v104;
  unint64_t v105;
  __int128 v106;
  _BYTE v107[32];
  __int128 v108;
  uint64_t v109;

  v4 = v3;
  v8 = sub_21512FB0C();
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v68 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 1);
  v81 = *((_QWORD *)a1 + 2);
  v82 = v11;
  v83 = *(_OWORD *)(a1 + 24);
  v12 = *((_QWORD *)a1 + 5);
  v79 = *((_QWORD *)a1 + 6);
  v80 = v12;
  v13 = *((_QWORD *)a1 + 7);
  v77 = *((_QWORD *)a1 + 8);
  v78 = v13;
  v14 = *((_QWORD *)a1 + 9);
  v15 = *((_QWORD *)a1 + 11);
  v75 = *((_QWORD *)a1 + 10);
  v76 = v14;
  v16 = *((_QWORD *)a1 + 12);
  v88 = *((_QWORD *)a1 + 13);
  v17 = *((_QWORD *)a1 + 14);
  v18 = (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *))a3[3];
  v109 = a2;
  v18(&v89, a2, a3);
  v19 = v89;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRelease();
  if (!v20)
    return 0;
  v86 = v16;
  v87 = v15;
  v104 = 0;
  v105 = 0xE000000000000000;
  v84 = v17;
  v74 = v4;
  v72 = v10;
  if (v10)
  {
    v21 = (uint64_t (*)(uint64_t, _QWORD *))a3[7];
    swift_bridgeObjectRetain();
    v22 = v109;
    v89 = v21(v109, a3);
    MEMORY[0x24BDAC7A8](v89);
    *(&v67 - 2) = v22;
    *(&v67 - 1) = (uint64_t)a3;
    KeyPath = swift_getKeyPath();
    v24 = MEMORY[0x24BDAC7A8](KeyPath);
    *(&v67 - 4) = v22;
    *(&v67 - 3) = (uint64_t)a3;
    *(&v67 - 2) = v24;
    swift_getAssociatedTypeWitness();
    v25 = sub_21512FD40();
    v26 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12E0], v25);
    v27 = v85;
    v29 = sub_2150ED6A0((void (*)(char *, char *))sub_215068D34, (uint64_t)(&v67 - 6), v25, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v26, MEMORY[0x24BEE40A8], v28);
    v85 = v27;
    swift_release();
    swift_bridgeObjectRelease();
    v89 = v29;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D80);
    sub_21506037C((unint64_t *)&qword_254DA7D88, &qword_254DA7D80, MEMORY[0x24BEE12B0]);
    sub_21512F9B0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = v22;
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
  }
  else
  {
    swift_bridgeObjectRetain();
    v30 = v109;
  }
  v32 = (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *))a3[4];
  v73 = a3;
  v32(&v89, v30, a3);
  v33 = v89;
  v34 = v90;
  v35 = v91;
  v36 = v92;
  v37 = v93;
  v38 = v92;
  if ((_BYTE)v93)
  {
    if (v93 == 1 && *(_QWORD *)(v92 + 16))
    {
      v38 = *(_QWORD *)(v92 + 32);
    }
    else
    {
      sub_21508C520(v92, *((uint64_t *)&v92 + 1), v93);
      if ((v40 & 1) != 0)
        v38 = 0;
      else
        v38 = v39;
    }
  }
  sub_21508C520(v36, *((uint64_t *)&v36 + 1), v37);
  v71 = v33;
  *(_QWORD *)&v106 = v33;
  *((_QWORD *)&v106 + 1) = v34;
  if ((v42 & 1) != 0)
    v43 = 0;
  else
    v43 = v41;
  *(_QWORD *)v107 = v35;
  *(_OWORD *)&v107[8] = v36;
  v107[24] = v37;
  *(_QWORD *)&v108 = v38;
  *((_QWORD *)&v108 + 1) = v43;
  v103[0] = v106;
  v103[1] = *(_OWORD *)v107;
  v103[2] = *(_OWORD *)&v107[16];
  v103[3] = v108;
  LOBYTE(v89) = v72;
  v90 = v82;
  v91 = v81;
  v92 = v83;
  v93 = v80;
  v94 = v79;
  v95 = v78;
  v96 = v77;
  v97 = v76;
  v98 = v75;
  v99 = v87;
  v100 = v86;
  v101 = v88;
  v102 = v84;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D70);
  v45 = sub_21506037C(&qword_254DA7D78, &qword_254DA7D70, MEMORY[0x24BEE0660]);
  v46 = v85;
  v47 = sub_215067500((uint64_t)v103, (uint64_t)&v89, v109, v44, (uint64_t)v73, v45);
  v85 = v46;
  if (v46)
  {
    v31 = v105;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v36, *((uint64_t *)&v36 + 1), v37);
    return v31;
  }
  v80 = v47;
  v48 = sub_215066B54();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_21501EF2C(v36, *((uint64_t *)&v36 + 1), v37);
  if (v48 < 0)
    goto LABEL_36;
  v50 = v84;
  if (v48)
  {
    v51 = 0;
    v52 = *(_QWORD *)(v80 + 16);
    v81 = v80 + 64;
    v82 = v52;
    *(_QWORD *)&v83 = v48;
    while (1)
    {
      v109 = v51;
      if (v51 == v48)
        break;
      if (v52)
      {
        v89 = MEMORY[0x24BEE4AF8];
        result = (uint64_t)sub_215038BC8(0, v52, 0);
        v54 = v52;
        v55 = v89;
        v56 = v81;
        v57 = v109;
        while (v57 < *(_QWORD *)(*(_QWORD *)v56 + 16))
        {
          v58 = *(_QWORD *)v56 + 16 * v57;
          v59 = *(_QWORD *)(v58 + 32);
          v60 = *(_QWORD *)(v58 + 40);
          v89 = v55;
          v62 = *(_QWORD *)(v55 + 16);
          v61 = *(_QWORD *)(v55 + 24);
          result = swift_bridgeObjectRetain();
          if (v62 >= v61 >> 1)
          {
            result = (uint64_t)sub_215038BC8((char *)(v61 > 1), v62 + 1, 1);
            v57 = v109;
            v55 = v89;
          }
          *(_QWORD *)(v55 + 16) = v62 + 1;
          v63 = v55 + 16 * v62;
          *(_QWORD *)(v63 + 32) = v59;
          *(_QWORD *)(v63 + 40) = v60;
          v56 += 48;
          if (!--v54)
          {
            v53 = v84;
            goto LABEL_21;
          }
        }
        __break(1u);
        break;
      }
      v55 = MEMORY[0x24BEE4AF8];
      v57 = v109;
      v53 = v50;
LABEL_21:
      v89 = v55;
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D80);
      sub_21506037C((unint64_t *)&qword_254DA7D88, &qword_254DA7D80, MEMORY[0x24BEE12B0]);
      v51 = v57 + 1;
      v50 = v53;
      sub_21512F9B0();
      swift_bridgeObjectRelease();
      sub_21512FB90();
      swift_bridgeObjectRelease();
      result = sub_21512FB90();
      v52 = v82;
      v48 = v83;
      if (v51 == (_QWORD)v83)
        goto LABEL_31;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_31:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v64 = v68;
  sub_21512FB00();
  v31 = sub_21512FA88();
  v66 = v65;
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v64, v70);
  if (v66 >> 60 != 15)
  {
    swift_bridgeObjectRelease();
    return v31;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2150673B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_21506744C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  v1 = *a1;
  v2 = a1[1];
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  swift_bridgeObjectRetain();
  v5 = swift_checkMetadataState();
  return v4(v1, v2, v5, AssociatedConformanceWitness);
}

uint64_t sub_215067500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[9];
  uint64_t v18;
  _OWORD v19[7];
  uint64_t v20;

  v11 = *(_OWORD *)(a2 + 80);
  v19[4] = *(_OWORD *)(a2 + 64);
  v19[5] = v11;
  v19[6] = *(_OWORD *)(a2 + 96);
  v20 = *(_QWORD *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v12;
  v13 = *(_OWORD *)(a2 + 48);
  v19[2] = *(_OWORD *)(a2 + 32);
  v19[3] = v13;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 24))(&v18, a3, a5);
  v14 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17[2] = a3;
  v17[3] = a4;
  v17[4] = a5;
  v17[5] = a6;
  v17[6] = a1;
  v17[7] = v19;
  v15 = sub_215111F84((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_215068FD8, (uint64_t)v17, v14);
  swift_bridgeObjectRelease();
  return v15;
}

double sub_2150675E8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, _QWORD *a6@<X7>, _OWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  __int128 v20;
  _OWORD v21[7];
  uint64_t v22;
  _OWORD v23[2];
  double v24[3];

  v14 = a1[3];
  v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  v16 = *(_OWORD *)(a3 + 80);
  v21[4] = *(_OWORD *)(a3 + 64);
  v21[5] = v16;
  v21[6] = *(_OWORD *)(a3 + 96);
  v22 = *(_QWORD *)(a3 + 112);
  v17 = *(_OWORD *)(a3 + 16);
  v21[0] = *(_OWORD *)a3;
  v21[1] = v17;
  v18 = *(_OWORD *)(a3 + 48);
  v21[2] = *(_OWORD *)(a3 + 32);
  v21[3] = v18;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 8)
                                                                                             + 120))(v23, a2, v21, a4, a5, v14);
  if (v7)
  {
    *a6 = v7;
  }
  else
  {
    v20 = v23[1];
    *a7 = v23[0];
    a7[1] = v20;
    result = v24[0];
    a7[2] = *(_OWORD *)v24;
  }
  return result;
}

uint64_t sub_2150676CC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  int64x2_t v28;
  int64x2_t *v29;
  unint64_t v30;
  int64x2_t v31;
  int8x16_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t *v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v51;
  uint64_t v52;
  char v53[8];
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 1);
  v12 = *((_QWORD *)a2 + 2);
  v46 = *(_OWORD *)(a2 + 56);
  v47 = *(_OWORD *)(a2 + 40);
  v44 = *(_OWORD *)(a2 + 88);
  v45 = *(_OWORD *)(a2 + 72);
  v14 = *((_QWORD *)a2 + 13);
  v13 = *((_QWORD *)a2 + 14);
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a5 + 8) + 16))(a3);
  v52 = v15;
  swift_getAssociatedTypeWitness();
  v43 = *(_OWORD *)(a2 + 24);
  v40 = sub_215130664();
  v17 = v16;
  v53[0] = v10;
  v54 = v11;
  v55 = v12;
  v56 = v43;
  v57 = v47;
  v58 = v46;
  v59 = v45;
  v60 = v44;
  v61 = v14;
  v62 = v13;
  v18 = sub_215067928(a1, (uint64_t)v53, a3, a4, a5, a6);
  if (v51)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v20 = v18;
  v21 = sub_21512FB48();
  v22 = sub_215066A70(v20);
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
    v24 = 0;
    v26 = a7;
    goto LABEL_16;
  }
  v24 = *(_QWORD *)(v22 + 32);
  v25 = v23 - 1;
  if (v23 == 1)
  {
    v26 = a7;
    goto LABEL_16;
  }
  if (v23 < 5)
  {
    v27 = 1;
    v26 = a7;
    goto LABEL_12;
  }
  v27 = v25 & 0xFFFFFFFFFFFFFFFCLL | 1;
  v28 = vdupq_n_s64(v24);
  v29 = (int64x2_t *)(v22 + 56);
  v30 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  v31 = v28;
  do
  {
    v28 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v28, v29[-1]), (int8x16_t)v28, (int8x16_t)v29[-1]);
    v31 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v31, *v29), (int8x16_t)v31, *(int8x16_t *)v29);
    v29 += 2;
    v30 -= 4;
  }
  while (v30);
  v32 = vbslq_s8((int8x16_t)vcgtq_s64(v28, v31), (int8x16_t)v28, (int8x16_t)v31);
  v33 = vextq_s8(v32, v32, 8uLL).u64[0];
  v24 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v32.i64[0], v33), *(int8x8_t *)v32.i8, (int8x8_t)v33);
  v26 = a7;
  if (v25 != (v25 & 0xFFFFFFFFFFFFFFFCLL))
  {
LABEL_12:
    v34 = v23 - v27;
    v35 = (int64_t *)(v22 + 8 * v27 + 32);
    do
    {
      v37 = *v35++;
      v36 = v37;
      if (v24 <= v37)
        v24 = v36;
      --v34;
    }
    while (v34);
  }
LABEL_16:
  swift_bridgeObjectRelease();
  if (v24 <= v21)
    v38 = v21;
  else
    v38 = v24;
  result = sub_21512FB48();
  if (result <= v38)
    v39 = v38;
  else
    v39 = result;
  *v26 = v42;
  v26[1] = v52;
  v26[2] = v40;
  v26[3] = v17;
  v26[4] = v20;
  v26[5] = v39;
  return result;
}

uint64_t sub_215067928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v15[5];
  v50 = v15[4];
  v51 = v16;
  v52 = v15[6];
  v53 = *((_QWORD *)v15 + 14);
  v17 = v15[1];
  v46 = *v15;
  v47 = v17;
  v18 = v15[3];
  v48 = v15[2];
  v49 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 16))(v14, v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1A8);
  if (swift_dynamicCast())
  {
    v40 = v43;
    v41 = v44;
    v42 = v45;
    v36 = v50;
    v37 = v51;
    v38 = v52;
    v39 = v53;
    v32 = v46;
    v33 = v47;
    v34 = v48;
    v35 = v49;
    v22 = sub_215067CCC(a1, (uint64_t)&v32, a4, a6, (void (*)(char *, char *))sub_215068D80, v19, v20, v21);
    swift_release();
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D448);
  if (swift_dynamicCast())
  {
    v40 = v43;
    v41 = v44;
    v42 = v45;
    v36 = v50;
    v37 = v51;
    v38 = v52;
    v39 = v53;
    v32 = v46;
    v33 = v47;
    v34 = v48;
    v35 = v49;
    v26 = sub_215067CCC(a1, (uint64_t)&v32, a4, a6, (void (*)(char *, char *))sub_215068D9C, v23, v24, v25);
LABEL_7:
    v22 = v26;
    swift_release();
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1A0);
  if (swift_dynamicCast())
  {
    v40 = v43;
    v41 = v44;
    v42 = v45;
    v36 = v50;
    v37 = v51;
    v38 = v52;
    v39 = v53;
    v32 = v46;
    v33 = v47;
    v34 = v48;
    v35 = v49;
    v26 = sub_215067D70(a1, (uint64_t)&v32, a4, a6);
    goto LABEL_7;
  }
  v31 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA74F8);
  v28 = swift_dynamicCast();
  if ((_DWORD)v28)
  {
    v40 = v43;
    v41 = v44;
    v42 = v45;
    v36 = v50;
    v37 = v51;
    v38 = v52;
    v39 = v53;
    v32 = v46;
    v33 = v47;
    v34 = v48;
    v35 = v49;
    v22 = sub_215067E48(v31, (uint64_t)&v32, a4, a6);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x24BDAC7A8](v28);
    *(&v30 - 6) = a3;
    *(&v30 - 5) = a4;
    *(&v30 - 4) = a5;
    *(&v30 - 3) = a6;
    *(&v30 - 2) = v6;
    *(&v30 - 1) = (uint64_t)&v46;
    v22 = sub_215021834((void (*)(char *, char *))sub_215068D5C, (uint64_t)(&v30 - 8), a4, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], a6, MEMORY[0x24BEE40A8], v29);
  }
LABEL_9:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a3);
  return v22;
}

uint64_t sub_215067CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[5];
  __int128 v15;
  _OWORD *v16;
  _OWORD v17[7];
  uint64_t v18;

  v9 = *(_OWORD *)(a2 + 80);
  v17[4] = *(_OWORD *)(a2 + 64);
  v17[5] = v9;
  v17[6] = *(_OWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v17[2] = *(_OWORD *)(a2 + 32);
  v17[3] = v11;
  v12 = *v8;
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = v12;
  v15 = *(_OWORD *)(v8 + 1);
  v16 = v17;
  return sub_215021834(a5, (uint64_t)v14, a3, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], a4, MEMORY[0x24BEE40A8], a8);
}

uint64_t sub_215067D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  __int128 v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v7 = *(_OWORD *)(a2 + 80);
  v22 = *(_OWORD *)(a2 + 64);
  v23 = v7;
  v24 = *(_OWORD *)(a2 + 96);
  v25 = *(_QWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v8;
  v9 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  v21 = v9;
  v10 = *v4;
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = v10;
  v15 = *(_OWORD *)(v4 + 1);
  v16 = v19;
  v17 = *((_QWORD *)&v8 + 1);
  v18 = v20;
  swift_retain();
  v12 = sub_215021834((void (*)(char *, char *))sub_215068E50, (uint64_t)v14, a3, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], a4, MEMORY[0x24BEE40A8], v11);
  swift_release();
  return v12;
}

uint64_t sub_215067E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  __int128 v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD v17[7];
  uint64_t v18;

  v7 = *(_OWORD *)(a2 + 80);
  v17[4] = *(_OWORD *)(a2 + 64);
  v17[5] = v7;
  v17[6] = *(_OWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v8;
  v9 = *(_OWORD *)(a2 + 48);
  v17[2] = *(_OWORD *)(a2 + 32);
  v17[3] = v9;
  v10 = *v4;
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = v10;
  v14 = *(_OWORD *)(v4 + 1);
  v15 = v17;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7840);
  return sub_215021834((void (*)(char *, char *))sub_215068E84, (uint64_t)v13, a3, MEMORY[0x24BEE0D00], v11, a4, MEMORY[0x24BEE3F20], (uint64_t)&v16);
}

uint64_t sub_215067F18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_OWORD *, _QWORD);
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  _OWORD v35[7];
  uint64_t v36;
  uint64_t v37;

  v34 = a4;
  v33 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_215130064();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v32 = (char *)&v30 - v15;
  v37 = *a1;
  v16 = (void (*)(_OWORD *, _QWORD))sub_21512FF5C();
  (*(void (**)(char *))(v8 + 16))(v11);
  v16(v35, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v17 = *(_QWORD *)(a3 + 48);
    v18 = v34;
    *v34 = *(_QWORD *)(a3 + 40);
    v18[1] = v17;
    return swift_bridgeObjectRetain();
  }
  else
  {
    v20 = v32;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v32, v11, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v31, v20, AssociatedTypeWitness);
    v21 = sub_21512FB18();
    v22 = *(_OWORD *)(a3 + 80);
    v35[4] = *(_OWORD *)(a3 + 64);
    v35[5] = v22;
    v35[6] = *(_OWORD *)(a3 + 96);
    v36 = *(_QWORD *)(a3 + 112);
    v23 = *(_OWORD *)(a3 + 16);
    v35[0] = *(_OWORD *)a3;
    v35[1] = v23;
    v24 = *(_OWORD *)(a3 + 48);
    v35[2] = *(_OWORD *)(a3 + 32);
    v35[3] = v24;
    v26 = sub_21506814C((uint64_t)v35, v21, v25);
    v28 = v27;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v20, AssociatedTypeWitness);
    v29 = v34;
    *v34 = v26;
    v29[1] = v28;
  }
  return result;
}

uint64_t sub_21506814C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v5 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = v5;
  v14[2] = &v15;
  swift_bridgeObjectRetain();
  v6 = sub_215068BB0(sub_215068DB8, (uint64_t)v14, a2, a3);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    goto LABEL_5;
  v15 = a2;
  v16 = a3;
  v19 = 34;
  v20 = 0xE100000000000000;
  sub_215068E0C();
  if ((sub_2151300AC() & 1) != 0)
    goto LABEL_5;
  v15 = a2;
  v16 = a3;
  v19 = 13;
  v20 = 0xE100000000000000;
  if ((sub_2151300AC() & 1) != 0
    || (v15 = a2, v16 = a3, v19 = 10, v20 = 0xE100000000000000, (sub_2151300AC() & 1) != 0))
  {
LABEL_5:
    v19 = 0;
    v20 = 0xE000000000000000;
    v7 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    v15 = a2;
    v16 = a3;
    v17 = 0;
    v18 = v7;
    swift_bridgeObjectRetain();
    v8 = sub_21512FB9C();
    v10 = v9;
    if (v9)
    {
      v11 = v8;
      do
      {
        if (v11 == 34 && v10 == 0xE100000000000000 || (sub_21513043C() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          sub_21512FB90();
        }
        else
        {
          MEMORY[0x2199DB6E4](v11, v10);
          swift_bridgeObjectRelease();
        }
        v11 = sub_21512FB9C();
        v10 = v12;
      }
      while (v12);
    }
    swift_bridgeObjectRelease();
    v15 = 34;
    v16 = 0xE100000000000000;
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    return v15;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a2;
}

uint64_t sub_215068378@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = *a1;
  if (*a1 < 0)
    goto LABEL_11;
  swift_beginAccess();
  v8 = *(_QWORD **)(a2 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_11;
  }
  v9 = v8[1];
  if (v4 >= v9)
  {
LABEL_11:
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  v10 = sub_215099508(v4, v8, v9);
  if (v10 == 2)
  {
    v12 = a3[5];
    v11 = a3[6];
  }
  else if ((v10 & 1) != 0)
  {
    v12 = a3[7];
    v11 = a3[8];
  }
  else
  {
    v12 = a3[9];
    v11 = a3[10];
  }
  *a4 = v12;
  a4[1] = v11;
  return swift_bridgeObjectRetain();
}

uint64_t sub_215068474@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _OWORD v21[7];
  uint64_t v22;

  v4 = *a1;
  if (*a1 < 0)
    goto LABEL_9;
  swift_beginAccess();
  v8 = *(_QWORD **)(a2 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = v8[1];
  if (v4 >= v9)
  {
LABEL_9:
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  sub_215099328(v4, v8, v9);
  if ((v10 & 1) != 0)
  {
    v20 = *(_QWORD *)(a3 + 48);
    *a4 = *(_QWORD *)(a3 + 40);
    a4[1] = v20;
    return swift_bridgeObjectRetain();
  }
  else
  {
    v11 = sub_21512FD7C();
    v12 = *(_OWORD *)(a3 + 80);
    v21[4] = *(_OWORD *)(a3 + 64);
    v21[5] = v12;
    v21[6] = *(_OWORD *)(a3 + 96);
    v22 = *(_QWORD *)(a3 + 112);
    v13 = *(_OWORD *)(a3 + 16);
    v21[0] = *(_OWORD *)a3;
    v21[1] = v13;
    v14 = *(_OWORD *)(a3 + 48);
    v21[2] = *(_OWORD *)(a3 + 32);
    v21[3] = v14;
    v16 = sub_21506814C((uint64_t)v21, v11, v15);
    v18 = v17;
    result = swift_bridgeObjectRelease();
    *a4 = v16;
    a4[1] = v18;
  }
  return result;
}

uint64_t sub_2150685B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t (*a4)(char *)@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *);
  _OWORD v30[7];
  uint64_t v31;

  v29 = a4;
  v9 = sub_21512F740();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D218);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  if (v16 < 0)
    goto LABEL_9;
  swift_beginAccess();
  v17 = *(_QWORD **)(a2 + 16);
  if (!v17)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v16 >= v17[1])
  {
LABEL_9:
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  sub_215099590(v16, v17, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    v18 = *(_QWORD *)(a3 + 48);
    *a5 = *(_QWORD *)(a3 + 40);
    a5[1] = v18;
    return swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    v20 = v29(v12);
    v21 = *(_OWORD *)(a3 + 80);
    v30[4] = *(_OWORD *)(a3 + 64);
    v30[5] = v21;
    v30[6] = *(_OWORD *)(a3 + 96);
    v31 = *(_QWORD *)(a3 + 112);
    v22 = *(_OWORD *)(a3 + 16);
    v30[0] = *(_OWORD *)a3;
    v30[1] = v22;
    v23 = *(_OWORD *)(a3 + 48);
    v30[2] = *(_OWORD *)(a3 + 32);
    v30[3] = v23;
    v25 = sub_21506814C((uint64_t)v30, v20, v24);
    v27 = v26;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *a5 = v25;
    a5[1] = v27;
  }
  return result;
}

uint64_t sub_2150687CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X7>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;

  v14 = sub_21512FB0C();
  MEMORY[0x24BDAC7A8](v14);
  v15 = *a1;
  if (v15 < 0)
    goto LABEL_10;
  swift_beginAccess();
  v16 = *(_QWORD **)(a4 + 16);
  if (!v16)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v15 >= v16[1])
  {
LABEL_10:
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  v30 = a6;
  sub_215099698(v15, v16, (uint64_t)&v28);
  v17 = v29;
  if (v29 >> 60 == 15)
  {
    v18 = *(_QWORD *)(a5 + 48);
    *a7 = *(_QWORD *)(a5 + 40);
    a7[1] = v18;
    return swift_bridgeObjectRetain();
  }
  else
  {
    v20 = v28;
    sub_21512FB00();
    v21 = sub_21512FA94();
    if (v22)
    {
      v23 = sub_21506814C(a5, v21, v22);
      v25 = v24;
      sub_215045ED8(v20, v17);
      result = swift_bridgeObjectRelease();
      *a7 = v23;
      a7[1] = v25;
    }
    else
    {
      sub_215068EC8();
      v26 = swift_allocError();
      *v27 = v15;
      v27[1] = a2;
      v27[2] = a3;
      v27[3] = v20;
      v27[4] = v17;
      swift_bridgeObjectRetain();
      result = swift_willThrow();
      *v30 = v26;
    }
  }
  return result;
}

double sub_2150689C4@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;

  v13 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a5);
  sub_2150676CC(a1, a2, a5, a3, v13, a4, (uint64_t *)v16);
  if (!v6)
  {
    v15 = v16[1];
    *a6 = v16[0];
    a6[1] = v15;
    result = *(double *)&v17;
    a6[2] = v17;
  }
  return result;
}

double sub_215068A60@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;

  v13 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a5);
  sub_2150676CC(a1, a2, a5, a3, v13, a4, (uint64_t *)v16);
  if (!v6)
  {
    v15 = v16[1];
    *a6 = v16[0];
    a6[1] = v15;
    result = *(double *)&v17;
    a6[2] = v17;
  }
  return result;
}

int64_t sub_215068AFC(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = vdupq_n_s64(v2);
      v6 = (int64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v2 <= v14)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_215068BB0(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v13[6];

  v6 = HIBYTE(a4) & 0xF;
  v13[2] = a3;
  v13[3] = a4;
  if ((a4 & 0x2000000000000000) == 0)
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  v13[4] = 0;
  v13[5] = v6;
  swift_bridgeObjectRetain();
  v7 = sub_21512FB9C();
  if (v8)
  {
    v9 = v8;
    while (1)
    {
      v13[0] = v7;
      v13[1] = v9;
      v10 = a1(v13);
      swift_bridgeObjectRelease();
      if (v4 || (v10 & 1) != 0)
        break;
      v7 = sub_21512FB9C();
      v9 = v11;
      if (!v11)
        goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
}

double sub_215068C78@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;

  v13 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for DiscontiguousColumnSlice<A>, a5);
  sub_2150676CC(a1, a2, a5, a3, v13, a4, (uint64_t *)v16);
  if (!v6)
  {
    v15 = v16[1];
    *a6 = v16[0];
    a6[1] = v15;
    result = *(double *)&v17;
    a6[2] = v17;
  }
  return result;
}

uint64_t sub_215068D1C()
{
  return 16;
}

__n128 sub_215068D28(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_215068D34()
{
  return swift_getAtKeyPath();
}

uint64_t sub_215068D5C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_215067F18(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_215068D80(uint64_t a1, uint64_t a2)
{
  return sub_215068EA0(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215068378);
}

uint64_t sub_215068D9C(uint64_t a1, uint64_t a2)
{
  return sub_215068EA0(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_215068474);
}

uint64_t sub_215068DB8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_21513043C() & 1;
}

unint64_t sub_215068E0C()
{
  unint64_t result;

  result = qword_253F0D1C8;
  if (!qword_253F0D1C8)
  {
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_253F0D1C8);
  }
  return result;
}

uint64_t sub_215068E50@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2150685B4(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(uint64_t (**)(char *))(v2 + 64), a2);
}

uint64_t sub_215068E84(uint64_t a1, uint64_t a2)
{
  return sub_215068EA0(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_2150687CC);
}

uint64_t sub_215068EA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v3;

  return a3(a1, v3[4], v3[5], v3[6], v3[7], v3[2], v3[3], a2);
}

unint64_t sub_215068EC8()
{
  unint64_t result;

  result = qword_254DA7D90;
  if (!qword_254DA7D90)
  {
    result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for CSVWritingError, &type metadata for CSVWritingError);
    atomic_store(result, (unint64_t *)&qword_254DA7D90);
  }
  return result;
}

int64_t sub_215068F0C(int64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  int64x2_t v10;
  int8x16_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t *v14;
  int64_t v15;
  int64_t v16;

  v3 = a3 >> 1;
  if (a3 >> 1 == a2)
    return 0;
  if ((uint64_t)(a3 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(result + 8 * a2);
    v5 = a2 + 1;
    if (a2 + 1 == v3)
      return v4;
    if (a2 + 1 < v3)
    {
      v6 = v3 + ~a2;
      if (v6 < 4)
        goto LABEL_10;
      v5 += v6 & 0xFFFFFFFFFFFFFFFCLL;
      v7 = vdupq_n_s64(v4);
      v8 = (int64x2_t *)(result + 8 * a2 + 24);
      v9 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v10 = v7;
      do
      {
        v7 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v7, v8[-1]), (int8x16_t)v7, (int8x16_t)v8[-1]);
        v10 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v10, *v8), (int8x16_t)v10, *(int8x16_t *)v8);
        v8 += 2;
        v9 -= 4;
      }
      while (v9);
      v11 = vbslq_s8((int8x16_t)vcgtq_s64(v7, v10), (int8x16_t)v7, (int8x16_t)v10);
      v12 = vextq_s8(v11, v11, 8uLL).u64[0];
      v4 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v11.i64[0], v12), *(int8x8_t *)v11.i8, (int8x8_t)v12);
      if (v6 != (v6 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v13 = v3 - v5;
        v14 = (int64_t *)(result + 8 * v5);
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (v4 <= v16)
            v4 = v15;
          --v13;
        }
        while (v13);
      }
      return v4;
    }
  }
  __break(1u);
  return result;
}

double sub_215068FD8@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;

  return sub_2150675E8(a1, v3[6], v3[7], v3[3], v3[5], a2, a3);
}

uint64_t DataFrame.Slice.columns.getter()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  _OWORD v6[2];

  v1 = v0[1];
  v5 = *v0;
  v6[0] = v1;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)v0 + 25);
  sub_2150451E0((uint64_t)&v5);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_215043204(v2, (uint64_t)&v5);
  sub_215045244((uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t DataFrame.Slice.rows.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 40) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_2150437A8(v4, v5, v6);
}

uint64_t DataFrame.Slice.base.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_215069110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a2 + 40) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_2150437A8(v4, v5, v6);
}

uint64_t sub_21506917C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7[5];
  char v8;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v7[0] = *(_QWORD *)a1;
  v7[1] = v1;
  v7[2] = v2;
  v7[3] = v3;
  v7[4] = v4;
  v8 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v3, v4, v5);
  return DataFrame.Slice.rows.setter(v7);
}

uint64_t DataFrame.Slice.rows.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[4];

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  v5 = *((_BYTE *)a1 + 40);
  v11 = a1[3];
  v6 = sub_2150EBC3C(v11, v4, v5);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 32);
    do
    {
      v9 = *v8++;
      v12[0] = v1;
      v12[1] = v2;
      v12[2] = v3;
      v12[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DataFrame.subscript.setter(v12, v9);
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_21501EF2C(v11, v4, v5);
}

void (*DataFrame.Slice.rows.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  *v3 = *(_QWORD *)v1;
  v3[1] = v4;
  v3[2] = v5;
  v3[3] = v6;
  v3[4] = v7;
  v8 = *(_BYTE *)(v1 + 40);
  *((_BYTE *)v3 + 40) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v6, v7, v8);
  return sub_215069368;
}

void sub_215069368(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[4];
  v8 = *((_BYTE *)*a1 + 40);
  v23 = v7;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2150437A8(v5, v7, v8);
    v9 = sub_2150EBC3C(v5, v7, v8);
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = (uint64_t *)(v9 + 32);
      do
      {
        v12 = *v11++;
        v24 = v4;
        v25 = v3;
        v26 = v6;
        v27 = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        DataFrame.subscript.setter(&v24, v12);
        --v10;
      }
      while (v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v5, v23, v8);
    v13 = v2[3];
    v14 = v2[4];
    v15 = *((_BYTE *)v2 + 40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = v13;
    v17 = v14;
    v18 = v15;
  }
  else
  {
    v19 = sub_2150EBC3C(v5, v7, v8);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v21 = (uint64_t *)(v19 + 32);
      do
      {
        v22 = *v21++;
        v24 = v4;
        v25 = v3;
        v26 = v6;
        v27 = v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        DataFrame.subscript.setter(&v24, v22);
        --v20;
      }
      while (v20);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v23;
    v16 = v5;
    v18 = v8;
  }
  sub_21501EF2C(v16, v17, v18);
  free(v2);
}

uint64_t DataFrame.Slice.shape.getter()
{
  _OWORD *v0;
  unsigned __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  _BYTE v7[25];

  v1 = *(_OWORD *)((char *)v0 + 25);
  v2 = v0[1];
  v6 = *v0;
  *(_OWORD *)v7 = v2;
  *(_OWORD *)&v7[9] = v1;
  v3 = sub_2150EBD1C(*(uint64_t *)&v7[8], v1 >> 56, SHIBYTE(v1));
  sub_2150451E0((uint64_t)&v6);
  v4 = swift_bridgeObjectRetain();
  sub_215043204(v4, (uint64_t)&v6);
  sub_215045244((uint64_t)&v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_2150695C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_215069600@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 40) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_2150437A8(v4, v5, v6);
}

void (*sub_21506966C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = DataFrame.Slice.rows.modify(v2);
  return sub_215029390;
}

uint64_t sub_2150696B0()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  _OWORD v6[2];

  v1 = v0[1];
  v5 = *v0;
  v6[0] = v1;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)v0 + 25);
  sub_2150451E0((uint64_t)&v5);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_215043204(v2, (uint64_t)&v5);
  sub_215045244((uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_215069724()
{
  _OWORD *v0;
  unsigned __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  _BYTE v7[25];

  v1 = *(_OWORD *)((char *)v0 + 25);
  v2 = v0[1];
  v6 = *v0;
  *(_OWORD *)v7 = v2;
  *(_OWORD *)&v7[9] = v1;
  v3 = sub_2150EBD1C(*(uint64_t *)&v7[8], v1 >> 56, SHIBYTE(v1));
  sub_2150451E0((uint64_t)&v6);
  v4 = swift_bridgeObjectRetain();
  sub_215043204(v4, (uint64_t)&v6);
  sub_215045244((uint64_t)&v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t _s11TabularData0B5FrameV5SliceV13dynamicMemberAA09AnyColumnD0VSS_tcig_0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v5 = *v2;
  v6 = v2[1];
  v8 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v10 = *((unsigned __int8 *)v2 + 40);
  v15[0] = *v2;
  v15[1] = v6;
  v15[2] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_21501F2BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(_QWORD *)(v5 + 16))
  {
    sub_21501EE90(v5 + 40 * v11 + 32, (uint64_t)v15);
    v13 = v16;
    v14 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 + 8) + 160))(v7, v9, v10, v13);
    return sub_21501EA34((uint64_t)v15);
  }
  __break(1u);
  return result;
}

void DataFrame.Slice.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  char v29;
  _BYTE v30[40];
  __int128 v31[3];

  v8 = *v4;
  v9 = v4[1];
  v10 = v4[2];
  v11 = v4[3];
  v12 = v4[4];
  v13 = *((_BYTE *)v4 + 40);
  v26 = *v4;
  *(_QWORD *)&v27 = v9;
  *((_QWORD *)&v27 + 1) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_21501F2BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v14 < *(_QWORD *)(v8 + 16))
  {
    sub_21501EE90(v8 + 40 * v14 + 32, (uint64_t)v31);
    sub_2150459B0(v31, (uint64_t)v30);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
    v17 = type metadata accessor for Column(0, a3, v15, v16);
    swift_dynamicCast();
    v24[0] = v11;
    v24[1] = v12;
    v25 = v13;
    v18 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v17);
    sub_21506CCA4((uint64_t)v24, v17, v18, (uint64_t)&v26);
    swift_release();
    swift_bridgeObjectRelease();
    v20 = v26;
    v21 = v27;
    v22 = v28;
    v23 = v29;
    sub_2150C3054((uint64_t)&v20, a4);
    return;
  }
  __break(1u);
}

void DataFrame.Slice.subscript.getter(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _QWORD v23[2];
  char v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char v28;
  _BYTE v29[40];
  __int128 v30[3];

  v5 = *a1;
  v6 = a1[1];
  v7 = *v3;
  v8 = v3[1];
  v9 = v3[2];
  v10 = v3[3];
  v11 = v3[4];
  v12 = *((_BYTE *)v3 + 40);
  v25 = *v3;
  *(_QWORD *)&v26 = v8;
  *((_QWORD *)&v26 + 1) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_21501F2BC(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v13 < *(_QWORD *)(v7 + 16))
  {
    sub_21501EE90(v7 + 40 * v13 + 32, (uint64_t)v30);
    sub_2150459B0(v30, (uint64_t)v29);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
    v16 = type metadata accessor for Column(0, a2, v14, v15);
    swift_dynamicCast();
    v23[0] = v10;
    v23[1] = v11;
    v24 = v12;
    v17 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v16);
    sub_21506CCA4((uint64_t)v23, v16, v17, (uint64_t)&v25);
    swift_release();
    swift_bridgeObjectRelease();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    v22 = v28;
    sub_2150C3054((uint64_t)&v19, a3);
    return;
  }
  __break(1u);
}

void DataFrame.Slice.subscript.getter(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _QWORD v17[2];
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23[2];
  _BYTE v24[40];

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v3 + 16) > a1)
  {
    v6 = *(_QWORD *)(v3 + 24);
    v7 = *(_QWORD *)(v3 + 32);
    v8 = *(_BYTE *)(v3 + 40);
    sub_21501EE90(*(_QWORD *)v3 + 40 * a1 + 32, (uint64_t)v23);
    sub_2150459B0(v23, (uint64_t)v24);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
    v11 = type metadata accessor for Column(0, a2, v9, v10);
    swift_dynamicCast();
    v17[0] = v6;
    v17[1] = v7;
    v18 = v8;
    v12 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v11);
    sub_21506CCA4((uint64_t)v17, v11, v12, (uint64_t)&v19);
    swift_release();
    swift_bridgeObjectRelease();
    v13 = v19;
    v14 = v20;
    v15 = v21;
    v16 = v22;
    sub_2150C3054((uint64_t)&v13, a3);
    return;
  }
  __break(1u);
}

double DataFrame.Slice.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double result;
  __int128 v14;
  uint64_t v15;

  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_QWORD *)(v4 + 32);
  v10 = *(_BYTE *)(v4 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v8, v9, v10);
  DataFrame.selecting<A>(columnNames:)(a1, a2, a3, &v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v15;
  result = *(double *)&v14;
  *(_OWORD *)a4 = v14;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v8;
  *(_QWORD *)(a4 + 32) = v9;
  *(_BYTE *)(a4 + 40) = v10;
  return result;
}

uint64_t DataFrame.Slice.filter<A>(on:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v13 = *(char **)v7;
  v14 = *(_QWORD *)(v7 + 8);
  v15 = *(_QWORD *)(v7 + 16);
  v31 = *(_QWORD *)(v7 + 24);
  v30 = *(_QWORD *)(v7 + 32);
  v16 = *(_BYTE *)(v7 + 40);
  v34 = *(char **)v7;
  v35 = v14;
  v36 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DataFrame.subscript.getter(a1, a2, a3, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = type metadata accessor for Column(0, a6, v17, v18);
  v20 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v19);
  v21 = v37;
  sub_2150C1EF0(a4, a5, v19, v20, (uint64_t)&v34);
  if (v21)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v37 = v34;
    v33 = v35;
    v28 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2150437A8(v31, v30, v16);
    v23 = sub_21502CB8C(v37, v33, v28, v31, v30, v16);
    v25 = v24;
    v27 = v26;
    swift_release();
    swift_bridgeObjectRelease();
    result = sub_21501EF2C((uint64_t)v37, v33, v28);
    *(_QWORD *)a7 = v13;
    *(_QWORD *)(a7 + 8) = v14;
    *(_QWORD *)(a7 + 16) = v15;
    *(_QWORD *)(a7 + 24) = v23;
    *(_QWORD *)(a7 + 32) = v25;
    *(_BYTE *)(a7 + 40) = v27;
  }
  return result;
}

uint64_t DataFrame.Slice.filter<A>(on:_:)@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char *v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v11 = *a1;
  v12 = a1[1];
  v13 = *(_QWORD *)(v5 + 8);
  v14 = *(_QWORD *)(v5 + 16);
  v31 = *(_QWORD *)(v5 + 32);
  v32 = *(_QWORD *)(v5 + 24);
  v30 = *(_BYTE *)(v5 + 40);
  v38 = *(char **)v5;
  v35 = v38;
  v36 = v13;
  v33 = v13;
  v34[0] = v11;
  v37 = v14;
  v34[1] = v12;
  DataFrame.subscript.getter(v34, a4);
  v17 = type metadata accessor for Column(0, a4, v15, v16);
  v18 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v17);
  sub_2150C1EF0(a2, a3, v17, v18, (uint64_t)&v35);
  if (v6)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v20 = v35;
    v27 = (uint64_t)v35;
    v28 = v36;
    v29 = v14;
    v21 = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2150437A8(v32, v31, v30);
    v22 = sub_21502CB8C(v20, v28, v21, v32, v31, v30);
    v24 = v23;
    v26 = v25;
    swift_release();
    swift_bridgeObjectRelease();
    result = sub_21501EF2C(v27, v28, v21);
    *(_QWORD *)a5 = v38;
    *(_QWORD *)(a5 + 8) = v33;
    *(_QWORD *)(a5 + 16) = v29;
    *(_QWORD *)(a5 + 24) = v22;
    *(_QWORD *)(a5 + 32) = v24;
    *(_BYTE *)(a5 + 40) = v26;
  }
  return result;
}

uint64_t DataFrame.Slice.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21506A3D0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2150EBB78, a2);
}

uint64_t DataFrame.Slice.prefix(through:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  int64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v6 = v2[3];
    v5 = v2[4];
    v7 = v2[1];
    v8 = v2[2];
    v9 = *v2;
    v10 = *((_BYTE *)v2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2150437A8(v6, v5, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2150437A8(v6, v5, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v6, v5, v10);
    v11 = sub_2150EBB78(v3, v6, v5, v10);
    v13 = v12;
    v15 = v14;
    result = sub_21501EF2C(v6, v5, v10);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 32) = v13;
    *(_BYTE *)(a2 + 40) = v15;
  }
  return result;
}

uint64_t DataFrame.Slice.prefix(upTo:)@<X0>(int64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t result;

  v6 = *v2;
  v5 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  v9 = v2[4];
  v10 = *((_BYTE *)v2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v8, v9, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v8, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v8, v9, v10);
  v11 = sub_2150EBB78(a1, v8, v9, v10);
  v13 = v12;
  v15 = v14;
  result = sub_21501EF2C(v8, v9, v10);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 40) = v15;
  return result;
}

uint64_t DataFrame.Slice.suffix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21506A3D0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_215024DEC, a2);
}

uint64_t sub_21506A3D0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;

  v8 = *v3;
  v7 = v3[1];
  v9 = v3[2];
  v10 = v3[3];
  v11 = v3[4];
  v12 = *((unsigned __int8 *)v3 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v10, v11, v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v10, v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v10, v11, v12);
  v13 = a2(a1, v10, v11, v12);
  v15 = v14;
  LOBYTE(a1) = v16;
  result = sub_21501EF2C(v10, v11, v12);
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v15;
  *(_BYTE *)(a3 + 40) = a1;
  return result;
}

uint64_t DataFrame.Slice.suffix(from:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v6 = *v2;
  v5 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  v9 = v2[4];
  v10 = *((_BYTE *)v2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v8, v9, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v8, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v8, v9, v10);
  sub_21508C520(v8, v9, v10);
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v8, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_21501EF2C(v8, v9, v10);
  if ((v14 & 1) != 0)
    v16 = 0;
  else
    v16 = v12;
  if (v16 < (uint64_t)a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v19 = v18 == (_QWORD)a1;
  if ((char *)v18 == a1)
    v20 = 0;
  else
    v20 = a1;
  if ((char *)v18 == a1)
    v21 = 0;
  else
    v21 = v18;
  v22 = 2 * v19;
  v23 = sub_21502CB8C(v20, v21, 2 * v19, v8, v9, v10);
  v25 = v24;
  v27 = v26;
  result = sub_21501EF2C((uint64_t)v20, v21, v22);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v25;
  *(_BYTE *)(a2 + 40) = v27;
  return result;
}

double DataFrame.Slice.selecting<A>(columnNames:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return DataFrame.Slice.subscript.getter(a1, a2, a3, a4);
}

double DataFrame.Slice.selecting(columnNames:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double result;
  __int128 v13;
  uint64_t v14;

  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v2 + 32);
  v10 = *(_BYTE *)(v2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v8, v9, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v8, v9, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_215028274(a1, v5, v6, v7, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_21501EF2C(v8, v9, v10);
  v11 = v14;
  result = *(double *)&v13;
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v9;
  *(_BYTE *)(a2 + 40) = v10;
  return result;
}

uint64_t static DataFrame.Slice.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  _OWORD v13[2];

  v2 = a1[1];
  v12 = *a1;
  v13[0] = v2;
  *(_OWORD *)((char *)v13 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v10 = *a2;
  v11[0] = v3;
  *(_OWORD *)((char *)v11 + 9) = *(__int128 *)((char *)a2 + 25);
  sub_2150451E0((uint64_t)&v12);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_215043204(v4, (uint64_t)&v12);
  sub_215045244((uint64_t)&v12);
  swift_bridgeObjectRelease();
  sub_2150451E0((uint64_t)&v10);
  v6 = swift_bridgeObjectRetain();
  v7 = sub_215043204(v6, (uint64_t)&v10);
  sub_215045244((uint64_t)&v10);
  swift_bridgeObjectRelease();
  v8 = sub_21502B088(v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t DataFrame.Slice.hash(into:)(uint64_t a1)
{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];
  __int128 v10;
  _OWORD v11[2];

  v3 = v1[1];
  v10 = *v1;
  v11[0] = v3;
  *(_OWORD *)((char *)v11 + 9) = *(__int128 *)((char *)v1 + 25);
  sub_2150451E0((uint64_t)&v10);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_215043204(v4, (uint64_t)&v10);
  sub_215045244((uint64_t)&v10);
  swift_bridgeObjectRelease();
  sub_2151305B0();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 32;
    do
    {
      sub_2150452A8(v7, (uint64_t)v9);
      AnyColumnSlice.hash(into:)(a1);
      sub_2150452E4((uint64_t)v9);
      v7 += 40;
      --v6;
    }
    while (v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t DataFrame.Slice.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  char v8;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_BYTE *)v0 + 40);
  v5 = *v0;
  v6 = v1;
  v7 = *(__int128 *)((char *)v0 + 24);
  v8 = v2;
  sub_2151305A4();
  DataFrame.Slice.hash(into:)((uint64_t)v4);
  return sub_2151305EC();
}

uint64_t sub_21506AA04()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  char v8;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_BYTE *)v0 + 40);
  v5 = *v0;
  v6 = v1;
  v7 = *(__int128 *)((char *)v0 + 24);
  v8 = v2;
  sub_2151305A4();
  DataFrame.Slice.hash(into:)((uint64_t)v4);
  return sub_2151305EC();
}

uint64_t sub_21506AA68()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  char v8;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_BYTE *)v0 + 40);
  v5 = *v0;
  v6 = v1;
  v7 = *(__int128 *)((char *)v0 + 24);
  v8 = v2;
  sub_2151305A4();
  DataFrame.Slice.hash(into:)((uint64_t)v4);
  return sub_2151305EC();
}

uint64_t sub_21506AAC4(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  _OWORD v13[2];

  v2 = a1[1];
  v12 = *a1;
  v13[0] = v2;
  *(_OWORD *)((char *)v13 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v10 = *a2;
  v11[0] = v3;
  *(_OWORD *)((char *)v11 + 9) = *(__int128 *)((char *)a2 + 25);
  sub_2150451E0((uint64_t)&v12);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_215043204(v4, (uint64_t)&v12);
  sub_215045244((uint64_t)&v12);
  swift_bridgeObjectRelease();
  sub_2150451E0((uint64_t)&v10);
  v6 = swift_bridgeObjectRetain();
  v7 = sub_215043204(v6, (uint64_t)&v10);
  sub_215045244((uint64_t)&v10);
  swift_bridgeObjectRelease();
  v8 = sub_21502B088(v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

_UNKNOWN **sub_21506AB9C()
{
  return &protocol witness table for AnyColumnSlice;
}

unint64_t sub_21506ABAC()
{
  unint64_t result;

  result = qword_254DA7DF8;
  if (!qword_254DA7DF8)
  {
    result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for DataFrame.Slice, &type metadata for DataFrame.Slice);
    atomic_store(result, (unint64_t *)&qword_254DA7DF8);
  }
  return result;
}

uint64_t _s14descr24D2A4141O5SliceVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_21501EF2C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t _s14descr24D2A4141O5SliceVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2150437A8(v4, v5, v6);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t _s14descr24D2A4141O5SliceVwca(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = v2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = v2[3];
  v5 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  sub_2150437A8(v4, v5, (char)v2);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v8 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = (_BYTE)v2;
  sub_21501EF2C(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s14descr24D2A4141O5SliceVwta(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_21501EF2C(v5, v6, v7);
  return a1;
}

uint64_t _s14descr24D2A4141O5SliceVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s14descr24D2A4141O5SliceVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataFrame.Slice()
{
  return &type metadata for DataFrame.Slice;
}

void sub_21506AE68(const char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v8;
  float v9;
  BOOL v10;
  char v11;
  float v12;
  char *v13[2];

  v13[1] = *(char **)MEMORY[0x24BDAC8D0];
  if (!a1)
    __break(1u);
  v13[0] = (char *)&a1[a3];
  v8 = a1[a3];
  a1[a3] = 0;
  v9 = strtof(a1, v13);
  if (v13[0])
    v10 = v13[0] == a2;
  else
    v10 = 0;
  v11 = !v10;
  v12 = v9;
  if (!v10)
    v12 = 0.0;
  *(float *)a4 = v12;
  *(_BYTE *)(a4 + 4) = v11;
  a1[a3] = v8;
}

void sub_21506AF20(const char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v8;
  double v9;
  BOOL v10;
  char v11;
  double v12;
  char *v13[2];

  v13[1] = *(char **)MEMORY[0x24BDAC8D0];
  if (!a1)
    __break(1u);
  v13[0] = (char *)&a1[a3];
  v8 = a1[a3];
  a1[a3] = 0;
  v9 = strtod(a1, v13);
  if (v13[0])
    v10 = v13[0] == a2;
  else
    v10 = 0;
  v11 = !v10;
  v12 = v9;
  if (!v10)
    v12 = 0.0;
  *(double *)a4 = v12;
  *(_BYTE *)(a4 + 8) = v11;
  a1[a3] = v8;
}

unint64_t sub_21506AFD8(uint64_t a1, unint64_t a2)
{
  const char *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  _QWORD v15[2];

  swift_bridgeObjectRetain();
  if ((a2 & 0x1000000000000000) != 0)
  {
    a1 = sub_2150CFC08();
    v10 = v9;
    swift_bridgeObjectRelease();
    a2 = v10;
    if ((v10 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_10:
    v15[0] = a1;
    v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    sub_21506AE68((const char *)v15, (char *)v15 + (HIBYTE(a2) & 0xF), HIBYTE(a2) & 0xF, (uint64_t)&v13);
    v7 = v13;
    v8 = v14;
    goto LABEL_11;
  }
  if ((a2 & 0x2000000000000000) != 0)
    goto LABEL_10;
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    v4 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v4 = (const char *)sub_215130208();
    v5 = v12;
  }
  if (v4)
    v6 = (char *)&v4[v5];
  else
    v6 = 0;
  sub_21506AE68(v4, v6, v5, (uint64_t)v15);
  v7 = v15[0];
  v8 = BYTE4(v15[0]);
LABEL_11:
  swift_bridgeObjectRelease();
  LOBYTE(v15[0]) = v8;
  return v7 | ((unint64_t)v8 << 32);
}

uint64_t sub_21506B0D0(uint64_t a1, unint64_t a2)
{
  const char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  swift_bridgeObjectRetain();
  if ((a2 & 0x1000000000000000) != 0)
  {
    a1 = sub_2150CFC08();
    v9 = v8;
    swift_bridgeObjectRelease();
    a2 = v9;
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_10:
    v13[0] = a1;
    v13[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    sub_21506AF20((const char *)v13, (char *)v13 + (HIBYTE(a2) & 0xF), HIBYTE(a2) & 0xF, (uint64_t)&v12);
    v7 = v12;
    goto LABEL_11;
  }
  if ((a2 & 0x2000000000000000) != 0)
    goto LABEL_10;
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    v4 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v4 = (const char *)sub_215130208();
    v5 = v11;
  }
  if (v4)
    v6 = (char *)&v4[v5];
  else
    v6 = 0;
  sub_21506AF20(v4, v6, v5, (uint64_t)v13);
  v7 = v13[0];
LABEL_11:
  swift_bridgeObjectRelease();
  return v7;
}

void sub_21506B1C0(char a1)
{
  uint64_t v2;

  v2 = sub_21512FB0C();
  MEMORY[0x24BDAC7A8](v2);
  __asm { BR              X10 }
}

uint64_t sub_21506B51C(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v24[32];
  _BYTE v25[24];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _QWORD *v32;

  v5 = *a1;
  if (((unint64_t)*a1 & 7) != 0)
  {
    v1 = a1;
    v6 = sub_21512F194();
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_27:
    __break(1u);
LABEL_28:
    v32 = v1;
    sub_21501D914();
    swift_allocError();
    *(_QWORD *)v20 = v3;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 2;
    swift_willThrow();
    v1 = v32;
LABEL_35:
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  v6 = *v5;
  *a1 = v5 + 1;
  if (v6 < 0)
    goto LABEL_27;
LABEL_3:
  v32 = (_QWORD *)MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7E00);
  sub_21512F86C();
  v1 = v32;
  if (!v6)
    return (uint64_t)v1;
  while (1)
  {
    v3 = *(unsigned __int8 *)*a1;
    *a1 = (_QWORD *)((char *)*a1 + 1);
    if ((((_DWORD)v3 - 128) & 0xFFFFFF00) != 0)
      break;
    if ((v3 + 0x80) > 9u)
      goto LABEL_28;
    sub_21506B1C0(v3 + 0x80);
    if (v2)
    {
      v32 = v1;
      goto LABEL_35;
    }
    if (!v26)
    {
      v32 = v1;
      sub_215046750((uint64_t)v25, qword_253F0D058);
      v27 = 0u;
      v28 = 0u;
      v29 = 0;
      goto LABEL_33;
    }
    if ((swift_dynamicCast() & 1) == 0)
    {
      v29 = 0;
      v27 = 0u;
      v28 = 0u;
LABEL_32:
      v32 = v1;
LABEL_33:
      swift_bridgeObjectRelease();
      sub_215046750((uint64_t)&v27, &qword_254DA75E8);
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v21 = 0xD000000000000021;
      *(_QWORD *)(v21 + 8) = 0x80000002151311A0;
      *(_BYTE *)(v21 + 16) = 3;
      swift_willThrow();
      return (uint64_t)v1;
    }
    if (!*((_QWORD *)&v28 + 1))
      goto LABEL_32;
    v30[0] = v27;
    v30[1] = v28;
    v31 = v29;
    v7 = *(unsigned __int8 *)*a1;
    *a1 = (_QWORD *)((char *)*a1 + 1);
    if ((((_DWORD)v7 - 128) & 0xFFFFFF00) != 0)
      goto LABEL_38;
    if ((v7 + 0x80) > 9u)
    {
      v32 = v1;
      sub_21501D914();
      swift_allocError();
      *(_QWORD *)v22 = v7;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 2;
      swift_willThrow();
      v1 = v32;
      sub_215046238((uint64_t)v30);
      goto LABEL_35;
    }
    sub_21506B1C0(v7 + 0x80);
    sub_2150462B0((uint64_t)v30, (uint64_t)&v27);
    sub_215053AA4((uint64_t)v25, (uint64_t)v24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = sub_21502F854((uint64_t)&v27);
    v11 = v1[2];
    v12 = (v9 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      goto LABEL_39;
    v14 = v9;
    if (v1[3] >= v13)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v9 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        sub_215037630();
        if ((v14 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      sub_2150319A0(v13, isUniquelyReferenced_nonNull_native);
      v15 = sub_21502F854((uint64_t)&v27);
      if ((v14 & 1) != (v16 & 1))
        goto LABEL_41;
      v10 = v15;
      if ((v14 & 1) != 0)
      {
LABEL_5:
        sub_21506BAE4((uint64_t)v24, v1[7] + 32 * v10);
        goto LABEL_6;
      }
    }
    v1[(v10 >> 6) + 8] |= 1 << v10;
    sub_2150462B0((uint64_t)&v27, v1[6] + 40 * v10);
    sub_215053A5C((uint64_t)v24, v1[7] + 32 * v10);
    v17 = v1[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_40;
    v1[2] = v19;
LABEL_6:
    swift_bridgeObjectRelease();
    sub_215046238((uint64_t)&v27);
    sub_215046750((uint64_t)v25, qword_253F0D058);
    sub_215046238((uint64_t)v30);
    if (!--v6)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = sub_2151304B4();
  __break(1u);
  return result;
}

unint64_t sub_21506B938(int64_t **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t *v5;
  int64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a1;
  if (((unint64_t)*a1 & 7) != 0)
  {
    v1 = a1;
    v6 = sub_21512F194();
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_12:
    __break(1u);
LABEL_13:
    sub_21501D914();
    swift_allocError();
    *(_QWORD *)v10 = v3;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 2;
    swift_willThrow();
LABEL_14:
    swift_bridgeObjectRelease();
    return (unint64_t)v1;
  }
  v6 = *v5;
  *a1 = v5 + 1;
  if (v6 < 0)
    goto LABEL_12;
LABEL_3:
  v1 = sub_21502EAC8(0, v6, 0, MEMORY[0x24BEE4AF8]);
  if (!v6)
    return (unint64_t)v1;
  while (1)
  {
    v3 = *(unsigned __int8 *)*a1;
    *a1 = (int64_t *)((char *)*a1 + 1);
    result = (v3 - 128);
    if ((result & 0xFFFFFF00) != 0)
      break;
    if ((v3 + 0x80) > 9u)
      goto LABEL_13;
    sub_21506B1C0(v3 + 0x80);
    if (v2)
      goto LABEL_14;
    v9 = v1[2];
    v8 = v1[3];
    if (v9 >= v8 >> 1)
      v1 = sub_21502EAC8((_QWORD *)(v8 > 1), v9 + 1, 1, v1);
    v1[2] = v9 + 1;
    sub_215053A5C((uint64_t)&v11, (uint64_t)&v1[4 * v9 + 4]);
    if (!--v6)
      return (unint64_t)v1;
  }
  __break(1u);
  return result;
}

unint64_t sub_21506BA98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254DA7E18[0];
  if (!qword_254DA7E18[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254DA7D50);
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BEE09D8], v1);
    atomic_store(result, qword_254DA7E18);
  }
  return result;
}

uint64_t sub_21506BAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21506BB2C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_21506BB34()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  unint64_t v5;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v0 = type metadata accessor for _RangeSetStorage._Storage(319, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
    if (v5 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_21506BC28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 | 7;
  v12 = (v10 | 7) + v7;
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v13 + v10;
  v15 = ((v13 + v10) & ~v10) + v13;
  if (v15 <= 8)
    v16 = 8;
  else
    v16 = v15;
  v17 = v11 | *(_DWORD *)(v6 + 80);
  if (v17 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || v16 + 1 + (v12 & ~(v10 | 7uLL)) > 0x18)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  else
  {
    v28 = v14;
    v29 = AssociatedTypeWitness;
    v21 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v22 = (_QWORD *)(((unint64_t)a1 + v12) & v21);
    v23 = (_QWORD *)(((unint64_t)a2 + v12) & v21);
    v24 = *((unsigned __int8 *)v23 + v16);
    if (v24 >= 2)
    {
      if (v16 <= 3)
        v25 = v16;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
    {
      *v22 = *v23;
      *((_BYTE *)v22 + v16) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v26 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16);
      v26(v22, v23, v29);
      v26((_QWORD *)(((unint64_t)v22 + v28) & ~v10), (_QWORD *)(((unint64_t)v23 + v28) & ~v10), v29);
      *((_BYTE *)v22 + v16) = 0;
    }
  }
  return a1;
}

uint64_t sub_21506BE28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + (v7 | 7)) & ~(v7 | 7);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = v9 + v7;
  v11 = ((v9 + v7) & ~v7) + v9;
  if (v11 <= 8)
    v11 = 8;
  v12 = *(unsigned __int8 *)(v8 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X15 }
  }
  if (v12 == 1)
    return swift_bridgeObjectRelease();
  v14 = ~v7;
  v16 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v16(v8, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t))v16)((v10 + v8) & v14, AssociatedTypeWitness);
}

uint64_t sub_21506BF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD *, uint64_t);

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v13 + v9;
  v15 = ((v13 + v9) & ~v9) + v13;
  if (v15 <= 8)
    v16 = 8;
  else
    v16 = v15;
  v17 = *((unsigned __int8 *)v12 + v16);
  if (v17 >= 2)
  {
    if (v16 <= 3)
      v18 = v16;
    else
      v18 = 4;
    __asm { BR              X14 }
  }
  if (v17 == 1)
  {
    *v11 = *v12;
    *((_BYTE *)v11 + v16) = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = ~v9;
    v20 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16);
    v20(v11, v12, AssociatedTypeWitness);
    v20((_QWORD *)(((unint64_t)v11 + v14) & v19), (_QWORD *)(((unint64_t)v12 + v14) & v19), AssociatedTypeWitness);
    *((_BYTE *)v11 + v16) = 0;
  }
  return a1;
}

uint64_t sub_21506C130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t);
  unsigned int v20;
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  if (v11 != v12)
  {
    v13 = AssociatedTypeWitness;
    v14 = *(_QWORD *)(v8 + 64);
    if (((v14 + v9) & (unint64_t)~v9) + v14 <= 8)
      v15 = 8;
    else
      v15 = ((v14 + v9) & ~v9) + v14;
    v16 = *((unsigned __int8 *)v11 + v15);
    if (v16 >= 2)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = ~v9;
    if (v16 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
      v19(v11, AssociatedTypeWitness);
      v19((_QWORD *)(((unint64_t)v11 + v9 + v14) & v18), v13);
    }
    v20 = *((unsigned __int8 *)v12 + v15);
    if (v20 >= 2)
    {
      if (v15 <= 3)
        v21 = v15;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
    {
      *v11 = *v12;
      *((_BYTE *)v11 + v15) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16);
      v22(v11, v12, v13);
      v22((_QWORD *)(((unint64_t)v11 + v9 + v14) & v18), (_QWORD *)(((unint64_t)v12 + v9 + v14) & v18), v13);
      *((_BYTE *)v11 + v15) = 0;
    }
  }
  return a1;
}

uint64_t sub_21506C388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD *, uint64_t);

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v13 + v9;
  v15 = ((v13 + v9) & ~v9) + v13;
  if (v15 <= 8)
    v16 = 8;
  else
    v16 = v15;
  v17 = *((unsigned __int8 *)v12 + v16);
  if (v17 >= 2)
  {
    if (v16 <= 3)
      v18 = v16;
    else
      v18 = 4;
    __asm { BR              X14 }
  }
  if (v17 == 1)
  {
    *v11 = *v12;
    *((_BYTE *)v11 + v16) = 1;
  }
  else
  {
    v19 = ~v9;
    v20 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32);
    v20(v11, v12, AssociatedTypeWitness);
    v20((_QWORD *)(((unint64_t)v11 + v14) & v19), (_QWORD *)(((unint64_t)v12 + v14) & v19), AssociatedTypeWitness);
    *((_BYTE *)v11 + v16) = 0;
  }
  return a1;
}

uint64_t sub_21506C518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t);
  unsigned int v20;
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  if (v11 != v12)
  {
    v13 = AssociatedTypeWitness;
    v14 = *(_QWORD *)(v8 + 64);
    if (((v14 + v9) & (unint64_t)~v9) + v14 <= 8)
      v15 = 8;
    else
      v15 = ((v14 + v9) & ~v9) + v14;
    v16 = *((unsigned __int8 *)v11 + v15);
    if (v16 >= 2)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = ~v9;
    if (v16 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
      v19(v11, AssociatedTypeWitness);
      v19((_QWORD *)(((unint64_t)v11 + v9 + v14) & v18), v13);
    }
    v20 = *((unsigned __int8 *)v12 + v15);
    if (v20 >= 2)
    {
      if (v15 <= 3)
        v21 = v15;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
    {
      *v11 = *v12;
      *((_BYTE *)v11 + v15) = 1;
    }
    else
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32);
      v22(v11, v12, v13);
      v22((_QWORD *)(((unint64_t)v11 + v9 + v14) & v18), (_QWORD *)(((unint64_t)v12 + v9 + v14) & v18), v13);
      *((_BYTE *)v11 + v15) = 0;
    }
  }
  return a1;
}

uint64_t sub_21506C76C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((*(_QWORD *)(v8 + 64) + v9) & ~v9) + *(_QWORD *)(v8 + 64);
  v11 = 8;
  if (v10 > 8)
    v11 = v10;
  if (v7 <= 0xFD)
    v12 = 253;
  else
    v12 = v7;
  if (!a2)
    return 0;
  v13 = v9 | 7;
  v14 = v13 + *(_QWORD *)(v6 + 64);
  if (a2 <= v12)
    goto LABEL_26;
  v15 = v11 + (v14 & ~v13) + 1;
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v19 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v19 < 2)
    {
LABEL_26:
      if (v7 >= 0xFD)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      v22 = *(unsigned __int8 *)(((v14 + a1) & ~v13) + v11);
      if (v22 >= 3)
        return (v22 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_26;
LABEL_17:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v21 = v15;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  return v12 + v20 + 1;
}

void sub_21506C93C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((*(_QWORD *)(v9 + 64) + v10) & ~v10) + *(_QWORD *)(v9 + 64);
  if (v11 <= 8)
    v11 = 8;
  if (v8 <= 0xFD)
    v12 = 253;
  else
    v12 = v8;
  v13 = v11 + 1 + (((v10 | 7) + *(_QWORD *)(v7 + 64)) & ~(v10 | 7));
  if (a3 <= v12)
  {
    v14 = 0;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v12 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v12 < a2)
  {
    v15 = ~v12 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for _DiscontiguousSlice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DiscontiguousSlice);
}

void sub_21506CC0C()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_21506CC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x2199DC4C4](&unk_2151366A8, a2, &v6);
  return MEMORY[0x2199DC4C4](MEMORY[0x24BEE0658], a1, &v5);
}

uint64_t sub_21506CC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x2199DC4C4](&unk_2151366A8, a1, &v4);
}

uint64_t sub_21506CCA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;

  v5 = v4;
  v9 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for _RangeSet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v5, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  return sub_21506CDE0((uint64_t)v19, (uint64_t)v17, a2, v9, a4);
}

uint64_t sub_21506CDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for _DiscontiguousSlice(0, a3, a4, v9) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for _RangeSet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v10, a2, v14);
}

uint64_t sub_21506CEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  type metadata accessor for _DiscontiguousSlice.Index(0, a3, a4, v6);
  swift_getAssociatedConformanceWitness();
  return sub_21512F9C8() & 1;
}

uint64_t sub_21506CF5C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (*a1 != *a2)
    return 0;
  swift_getAssociatedTypeWitness();
  type metadata accessor for _DiscontiguousSlice.Index(0, a3, a4, v6);
  swift_getAssociatedConformanceWitness();
  return sub_21512FA58() & 1;
}

uint64_t sub_21506D024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v6;
  uint64_t AssociatedTypeWitness;

  *a5 = a1;
  v6 = (char *)a5 + *(int *)(type metadata accessor for _DiscontiguousSlice.Index(0, a3, a4, a4) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v6, a2, AssociatedTypeWitness);
}

uint64_t sub_21506D0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21506CEAC(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_21506D0BC()
{
  sub_2151305B0();
  swift_getAssociatedTypeWitness();
  return sub_21512F914();
}

uint64_t sub_21506D134()
{
  sub_2151305A4();
  sub_21506D0BC();
  return sub_2151305EC();
}

uint64_t sub_21506D188(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return sub_21506CF5C(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_21506D194()
{
  return sub_21506D134();
}

uint64_t sub_21506D19C()
{
  return sub_21506D0BC();
}

uint64_t sub_21506D1A4()
{
  sub_2151305A4();
  sub_21506D0BC();
  return sub_2151305EC();
}

uint64_t sub_21506D1F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v3 = v2;
  v33 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v30 = (char *)&v28 - v8;
  v31 = v6;
  v32 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v28 = sub_215130028();
  v10 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v12 = (char *)&v28 - v11;
  v14 = type metadata accessor for _RangeSet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v28 - v17;
  v19 = v3 + *(int *)(a1 + 36);
  if ((sub_21507D9C8(v16, v20, v21, v22) & 1) != 0)
    return sub_21506D3FC(a1, v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v19, v14);
  v25 = type metadata accessor for _RangeSetStorage(0, AssociatedTypeWitness, AssociatedConformanceWitness, v24);
  sub_2150C877C(0, v25, v26, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v18, v25);
  v27 = (uint64_t)v30;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v30, v12, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v28);
  return sub_21506D024(0, v27, v31, v32, v33);
}

uint64_t sub_21506D3FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = v2;
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v21 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for _RangeSet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v21 - v14;
  (*(void (**)(char *, uint64_t))(v16 + 16))((char *)&v21 - v14, v3 + *(int *)(a1 + 36));
  v18 = type metadata accessor for _RangeSetStorage(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  v19 = sub_2150C88DC(v18);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v15, v18);
  sub_21512FEA8();
  return sub_21506D024(v19, (uint64_t)v10, v7, v6, a2);
}

uint64_t sub_21506D568@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  void (*AssociatedConformanceWitness)(uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;

  v56 = a3;
  v61 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = (void (*)(uint64_t, uint64_t))swift_getAssociatedConformanceWitness();
  v8 = sub_215130028();
  v59 = *(char **)(v8 - 8);
  v60 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v48 - v9;
  v12 = type metadata accessor for _RangeSet(0, AssociatedTypeWitness, (uint64_t)AssociatedConformanceWitness, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v48 - v15;
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v55 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v48 - v19;
  type metadata accessor for _DiscontiguousSlice.Index(0, v5, v6, v21);
  v53 = v5;
  v54 = v6;
  sub_21512FE6C();
  v22 = v3 + *(int *)(v61 + 36);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v49 = v3;
  v50 = v22;
  v51 = v23;
  v52 = v12;
  ((void (*)(char *))v23)(v16);
  v24 = *a1;
  v26 = type metadata accessor for _RangeSetStorage(0, AssociatedTypeWitness, (uint64_t)AssociatedConformanceWitness, v25);
  sub_2150C877C(v24, v26, v27, (uint64_t)v10);
  v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
  v28(v16, v26);
  v29 = v60;
  LOBYTE(v13) = sub_21513001C();
  v30 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v59 + 1);
  v59 = v10;
  AssociatedConformanceWitness = v30;
  result = ((uint64_t (*)(char *, uint64_t))v30)(v10, v29);
  v32 = *a1;
  if ((v13 & 1) != 0)
  {
    v33 = v55;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v55, v20, AssociatedTypeWitness);
    v34 = v56;
    v35 = v32;
    v36 = (uint64_t)v33;
    return sub_21506D024(v35, v36, v53, v54, v34);
  }
  v37 = v58;
  v48 = AssociatedTypeWitness;
  v38 = v32 + 1;
  if (__OFADD__(v32, 1))
  {
    __break(1u);
  }
  else
  {
    v39 = v20;
    v40 = v50;
    v41 = v51;
    v42 = v52;
    v51(v16, v50, v52);
    v43 = sub_2150C88DC(v26);
    v28(v16, v26);
    if (v38 < v43)
    {
      v41(v16, v40, v42);
      v44 = (uint64_t)v59;
      sub_2150C877C(v38, v26, v45, (uint64_t)v59);
      v46 = v48;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v48);
      v28(v16, v26);
      v47 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v55, v44, v46);
      AssociatedConformanceWitness(v44, v60);
      v34 = v56;
      v35 = v38;
      v36 = (uint64_t)v47;
      return sub_21506D024(v35, v36, v53, v54, v34);
    }
    sub_21506D3FC(v61, v56);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v39, v48);
  }
  return result;
}

uint64_t sub_21506D8C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v4)(uint64_t *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  type metadata accessor for _DiscontiguousSlice.Index(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v4 = (uint64_t (*)(uint64_t *, _QWORD))sub_21512FF5C();
  v6 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, v6, AssociatedTypeWitness);
  return v4(&v9, 0);
}

uint64_t sub_21506D970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t TupleTypeMetadata2;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;

  v76 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v72 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v74 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v6;
  v7 = *(_QWORD *)(v6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for _RangeSet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v69 = *(_QWORD *)(v11 - 8);
  v70 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v65 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v59 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v68 = (uint64_t *)((char *)&v59 - v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v17 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v59 - v20;
  v66 = v4;
  v73 = v7;
  v23 = type metadata accessor for _DiscontiguousSlice.Index(0, v4, v7, v22);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v59 - v28;
  v60 = sub_215130028();
  v63 = *(_QWORD *)(v60 - 8);
  v30 = MEMORY[0x24BDAC7A8](v60);
  v32 = (char *)&v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v62 = (char *)&v59 - v33;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v34(v29, a1, v23);
  v35 = &v29[*(int *)(v23 + 36)];
  MEMORY[0x2199DC4C4](&unk_21513694C, v23);
  v36 = sub_215130028();
  v34(v27, a1 + *(int *)(v36 + 36), v23);
  v37 = &v27[*(int *)(v23 + 36)];
  v67 = AssociatedConformanceWitness;
  result = sub_21512F9E0();
  if ((result & 1) != 0)
  {
    v39 = TupleTypeMetadata2;
    v40 = &v21[*(int *)(TupleTypeMetadata2 + 48)];
    v41 = *(_QWORD **)(AssociatedTypeWitness - 8);
    v42 = (void (*)(char *, char *, uint64_t))v41[4];
    v42(v21, v35, AssociatedTypeWitness);
    v42(v40, v37, AssociatedTypeWitness);
    v43 = &v19[*(int *)(v39 + 48)];
    v44 = (void (*)(char *, char *, uint64_t))v41[2];
    v44(v19, v21, AssociatedTypeWitness);
    v44(v43, v40, AssociatedTypeWitness);
    v42(v32, v19, AssociatedTypeWitness);
    v45 = (void (*)(char *, uint64_t))v41[1];
    v45(v43, AssociatedTypeWitness);
    v46 = &v19[*(int *)(v39 + 48)];
    v42(v19, v21, AssociatedTypeWitness);
    v42(v46, v40, AssociatedTypeWitness);
    v47 = v60;
    v42(&v32[*(int *)(v60 + 36)], v46, AssociatedTypeWitness);
    v45(v19, AssociatedTypeWitness);
    v49 = v62;
    v48 = v63;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v32, v47);
    v50 = v70;
    v51 = v75;
    v52 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v64, v75 + *(int *)(v71 + 36), v70);
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v32, v49, v47);
    v53 = v65;
    sub_21507E57C((uint64_t)v32, AssociatedTypeWitness, v67, v54, v65);
    v55 = v68;
    sub_21507DA98(v53, v50, v68);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v50);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
    v56 = (uint64_t)v74;
    v57 = v51;
    v58 = v66;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v74, v57, v66);
    return sub_21506CDE0(v56, (uint64_t)v55, v58, v73, v76);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*sub_21506DE1C(uint64_t **a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_21506DE78(v6, a2, a3);
  return sub_215029390;
}

void (*sub_21506DE78(uint64_t *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  a1[2] = (uint64_t)v7;
  sub_21506D8C0(a3, v8, (uint64_t)v7);
  return sub_21506DF04;
}

void sub_21506DF04(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_21506DF44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t result;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = v1;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v57 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v56 = (char *)&v46 - v10;
  v63 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v54 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v5;
  v60 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = sub_215130028();
  v53 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v46 - v14;
  v17 = type metadata accessor for _RangeSet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v46 - v19;
  v55 = AssociatedTypeWitness;
  v22 = type metadata accessor for _RangeSetStorage(255, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  MEMORY[0x2199DC4C4](&unk_215138AA4, v22);
  v23 = sub_2151302B0();
  v46 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v46 - v24;
  v26 = *(int *)(a1 + 36);
  v61 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v2 + v26, v17);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v25, v20, v22);
  v47 = v23;
  v27 = (uint64_t *)&v25[*(int *)(v23 + 36)];
  *v27 = 0;
  v29 = 0;
  if (sub_2150C88DC(v22))
  {
    v30 = 0;
    v51 = &v15[*(int *)(v13 + 36)];
    v52 = v13;
    v49 = v22;
    v50 = v15;
    v48 = v27;
    v31 = v55;
    v32 = v56;
    v33 = v57;
    while (1)
    {
      v62 = v29;
      sub_2150C877C(v30, v22, v28, (uint64_t)v15);
      MEMORY[0x2199DC4C4](&unk_215138C54, v22);
      sub_21512FE0C();
      *v27 = v64;
      v34 = v54;
      v35 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v54, v61, v59);
      v36 = v58;
      v37 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v37(v32, v15, v31);
      v38 = v25;
      v37(v33, v51, v31);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v52);
      v39 = sub_21512FE9C();
      v40 = *(void (**)(char *, uint64_t))(v36 + 8);
      v40(v33, v31);
      v40(v32, v31);
      v41 = v34;
      v42 = v62;
      result = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v41, v35);
      v44 = __OFADD__(v42, v39);
      v29 = v42 + v39;
      if (v44)
        break;
      v27 = v48;
      v22 = v49;
      v30 = *v48;
      v25 = v38;
      v45 = sub_2150C88DC(v49);
      v15 = v50;
      if (v30 == v45)
        goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v46 + 8))(v25, v47);
    return v29;
  }
  return result;
}

uint64_t sub_21506E2F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  type metadata accessor for _DiscontiguousSlice.Index(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v4 = sub_215130064();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t sub_21506E350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21506F834(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_21506E374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21506F834(a1, a2, a3, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_21506E3A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = type metadata accessor for _DiscontiguousSlice.Index(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - v8;
  sub_21506D568(a1, a2, (uint64_t *)((char *)&v11 - v8));
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(a1, v6);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v7 + 32))(a1, v9, v6);
}

uint64_t sub_21506E444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = type metadata accessor for _DiscontiguousSlice.Index(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v13 - v8);
  v10 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a3, v3, a1);
  sub_21506D1F4(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3, a1);
  MEMORY[0x2199DC4C4](&unk_21513686C, a1);
  v11 = sub_2151302B0();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v7 + 32))(a3 + *(int *)(v11 + 36), v9, v6);
}

uint64_t sub_21506E524(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&unk_21513686C, a1);
  return sub_21512FEC0();
}

uint64_t sub_21506E558()
{
  return 2;
}

uint64_t sub_21506E560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21506FB68(v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t sub_21506E5B0()
{
  return sub_21512FC50();
}

uint64_t sub_21506E5D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t (*v5)(uint64_t *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;

  type metadata accessor for _DiscontiguousSlice.Index(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8), a3);
  v5 = (uint64_t (*)(uint64_t *, _QWORD))sub_21512FF5C();
  v7 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, v7, AssociatedTypeWitness);
  return v5(&v10, 0);
}

uint64_t sub_21506E684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t result;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t TupleTypeMetadata2;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;

  v77 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v72 = a2;
  v73 = v5;
  MEMORY[0x24BDAC7A8](a1);
  v75 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for _RangeSet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v70 = *(_QWORD *)(v12 - 8);
  v71 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v66 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v65 = (char *)&v60 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v69 = (uint64_t *)((char *)&v60 - v17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v60 - v21;
  v67 = v4;
  v74 = v8;
  v24 = type metadata accessor for _DiscontiguousSlice.Index(0, v4, v8, v23);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v60 - v29;
  v61 = sub_215130028();
  v64 = *(_QWORD *)(v61 - 8);
  v31 = MEMORY[0x24BDAC7A8](v61);
  v33 = (char *)&v60 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v63 = (char *)&v60 - v34;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v35(v30, a1, v24);
  v36 = &v30[*(int *)(v24 + 36)];
  MEMORY[0x2199DC4C4](&unk_21513694C, v24);
  v37 = sub_215130028();
  v35(v28, a1 + *(int *)(v37 + 36), v24);
  v38 = &v28[*(int *)(v24 + 36)];
  v68 = AssociatedConformanceWitness;
  result = sub_21512F9E0();
  if ((result & 1) != 0)
  {
    v40 = TupleTypeMetadata2;
    v41 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
    v42 = *(_QWORD **)(AssociatedTypeWitness - 8);
    v43 = (void (*)(char *, char *, uint64_t))v42[4];
    v43(v22, v36, AssociatedTypeWitness);
    v43(v41, v38, AssociatedTypeWitness);
    v44 = &v20[*(int *)(v40 + 48)];
    v45 = (void (*)(char *, char *, uint64_t))v42[2];
    v45(v20, v22, AssociatedTypeWitness);
    v45(v44, v41, AssociatedTypeWitness);
    v43(v33, v20, AssociatedTypeWitness);
    v46 = (void (*)(char *, uint64_t))v42[1];
    v46(v44, AssociatedTypeWitness);
    v47 = &v20[*(int *)(v40 + 48)];
    v43(v20, v22, AssociatedTypeWitness);
    v43(v47, v41, AssociatedTypeWitness);
    v48 = v61;
    v43(&v33[*(int *)(v61 + 36)], v47, AssociatedTypeWitness);
    v46(v20, AssociatedTypeWitness);
    v50 = v63;
    v49 = v64;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v63, v33, v48);
    v51 = v71;
    v52 = v76;
    v53 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v65, v76 + *(int *)(v72 + 36), v71);
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v33, v50, v48);
    v54 = v66;
    sub_21507E57C((uint64_t)v33, AssociatedTypeWitness, v68, v55, v66);
    v56 = v69;
    sub_21507DA98(v54, v51, v69);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v51);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v48);
    v57 = (uint64_t)v75;
    v58 = v52;
    v59 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v75, v58, v67);
    return sub_21506CDE0(v57, (uint64_t)v56, v59, v74, v77);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21506EB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;

  v7 = *(_QWORD *)(a4 - 8);
  sub_21506FEB0(a1, a2, a3, v7);
  v9 = type metadata accessor for _DiscontiguousSlice.Index(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(v7 + 8), v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a2, v9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*sub_21506EBC0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = malloc(0x50uLL);
  *a1 = v8;
  *v8 = v4;
  v8[1] = a3;
  v9 = *(_QWORD *)(a4 - 8);
  v8[2] = v9;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[3] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[4] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v8[5] = malloc(v14);
  v15 = malloc(v14);
  v8[6] = v15;
  v17 = type metadata accessor for _DiscontiguousSlice.Index(0, v11, v10, v16);
  v8[7] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v8[8] = v18;
  v8[9] = malloc(*(_QWORD *)(v18 + 64));
  (*(void (**)(void))(v18 + 16))();
  sub_21506E5D0(a3, v9, v19, (uint64_t)v15);
  return sub_21506ECCC;
}

void sub_21506ECCC(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);
  uint64_t v12;

  v2 = *a1;
  v4 = (*a1)[8];
  v3 = (void *)(*a1)[9];
  v5 = (void *)(*a1)[6];
  v12 = (*a1)[7];
  v7 = (*a1)[4];
  v6 = (void *)(*a1)[5];
  v9 = (*a1)[2];
  v8 = (*a1)[3];
  v10 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))(v2[5], v5, v2[3]);
    sub_21506FEB0((uint64_t)v6, (uint64_t)v3, v10, v9);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v12);
    v11 = *(void (**)(void *, uint64_t))(v7 + 8);
    v11(v6, v8);
  }
  else
  {
    sub_21506FEB0((uint64_t)v5, (uint64_t)v3, v2[1], v2[2]);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v12);
    v11 = *(void (**)(void *, uint64_t))(v7 + 8);
  }
  v11(v5, v8);
  free(v3);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t sub_21506EDC8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a4 - 8);
  sub_21506FFF0(a1, a2, a3, v7);
  v9 = type metadata accessor for _DiscontiguousSlice.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(v7 + 8), v8);
  MEMORY[0x2199DC4C4](&unk_21513694C, v9);
  v10 = sub_215130028();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a2, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

void (*sub_21506EE60(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = malloc(0x48uLL);
  *a1 = v9;
  *v9 = v4;
  v9[1] = a3;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(_QWORD *)(a3 - 8);
  v9[2] = v10;
  v9[3] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[4] = malloc(v12);
  v13 = malloc(v12);
  v9[5] = v13;
  v15 = type metadata accessor for _DiscontiguousSlice.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(v10 + 8), v14);
  MEMORY[0x2199DC4C4](&unk_21513694C, v15);
  v16 = sub_215130028();
  v9[6] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v9[7] = v17;
  v9[8] = malloc(*(_QWORD *)(v17 + 64));
  (*(void (**)(void))(v17 + 16))();
  sub_21506E684(a2, a3, (uint64_t)v13);
  return sub_21506EF60;
}

void sub_21506EF60(uint64_t a1, char a2)
{
  void *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v3 = *(char **)(*(_QWORD *)a1 + 64);
  v5 = *(void **)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v7 = *(void **)(*(_QWORD *)a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v8 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v5, v9);
    sub_21506FFF0((uint64_t)v7, v3, v9, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v3, v6);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v7, v9);
  }
  else
  {
    sub_21506FFF0(*(_QWORD *)(*(_QWORD *)a1 + 40), v3, v9, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v3, v6);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v11(v5, v9);
  free(v3);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t sub_21506F050()
{
  return sub_21512FA34();
}

uint64_t sub_21506F068()
{
  return sub_21512FA1C();
}

uint64_t sub_21506F088()
{
  return sub_21512FA10();
}

uint64_t sub_21506F0A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(_QWORD *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t result;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  _QWORD *v80;
  void (*v81)(char *, uint64_t, uint64_t);
  void (*v82)(char *, uint64_t *, uint64_t);
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;

  v4 = a1;
  v80 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v77 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v76 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v7;
  v8 = *(void (**)(char *, uint64_t *, uint64_t))(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = sub_215130028();
  v91 = *(_QWORD *)(v11 - 8);
  v92 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v89 = AssociatedConformanceWitness;
  v90 = (uint64_t)&v75 - v12;
  v14 = type metadata accessor for _RangeSet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v85 = *(_QWORD *)(v14 - 8);
  v86 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v87 = (char *)&v75 - v16;
  v84 = AssociatedTypeWitness;
  v95 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v88 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v96 = (char *)&v75 - v20;
  v21 = *(_QWORD *)(a2 - 8);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v94 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v75 - v24;
  v27 = type metadata accessor for _DiscontiguousSlice.Index(0, v5, (uint64_t)v8, v26);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v93 = (uint64_t *)((char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (void (**)(char *, char *, uint64_t))((char *)&v75 - v32);
  MEMORY[0x24BDAC7A8](v31);
  v35 = (void (**)(char *, char *, uint64_t))((char *)&v75 - v34);
  v82 = *(void (**)(char *, uint64_t *, uint64_t))(v28 + 16);
  v83 = v4;
  v82((char *)&v75 - v34, v4, v27);
  v81 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v81(v25, v97, a2);
  sub_21506D1F4(a2, v33);
  LOBYTE(v4) = sub_21506CF5C(v35, v33, v5, (uint64_t)v8);
  v36 = *(void (**)(_QWORD *, uint64_t))(v28 + 8);
  v36(v33, v27);
  v37 = *(void (**)(char *, uint64_t))(v21 + 8);
  v37(v25, a2);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v36)(v35, v27);
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v78 = v37;
    v39 = v97;
    sub_21506D3FC(a2, v33);
    v40 = v83;
    v41 = sub_21506CF5C(v83, v33, v5, (uint64_t)v8);
    v36(v33, v27);
    v42 = v93;
    v82((char *)v93, v40, v27);
    v43 = v94;
    v81(v94, v39, a2);
    v81 = (void (*)(char *, uint64_t, uint64_t))v5;
    v82 = v8;
    if ((v41 & 1) != 0)
    {
      v78(v43, a2);
      result = ((uint64_t (*)(uint64_t *, uint64_t))v36)(v42, v27);
      v44 = v84;
    }
    else
    {
      v45 = (char *)v42 + *(int *)(v27 + 36);
      v75 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
      v46 = v42;
      v44 = v84;
      v75(v96, v45, v84);
      v47 = v87;
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v87, &v43[*(int *)(a2 + 36)], v86);
      v48 = *v46;
      v50 = v40;
      v51 = type metadata accessor for _RangeSetStorage(0, v44, v89, v49);
      v52 = v90;
      sub_2150C877C(v48, v51, v53, v90);
      v54 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 8);
      v55 = v51;
      v40 = v50;
      v54(v47, v55);
      v56 = v88;
      v75(v88, (char *)v52, v44);
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v52, v92);
      v57 = v96;
      LOBYTE(v47) = sub_21512FA58();
      v58 = *(void (**)(char *, uint64_t))(v95 + 8);
      v58(v56, v44);
      v58(v57, v44);
      v78(v94, a2);
      result = ((uint64_t (*)(uint64_t *, uint64_t))v36)(v93, v27);
      if ((v47 & 1) == 0)
      {
        v74 = *v40;
        v73 = (uint64_t)v96;
        v63 = (uint64_t)v81;
        sub_21512F974();
        return sub_21506D024(v74, v73, v63, (uint64_t)v82, v80);
      }
    }
    v59 = *v40 - 1;
    if (!__OFSUB__(*v40, 1))
    {
      v60 = v77;
      v61 = v76;
      v62 = v97;
      v63 = (uint64_t)v81;
      (*(void (**)(char *, uint64_t, _QWORD))(v77 + 16))(v76, v97, v81);
      v64 = v87;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v87, v62 + *(int *)(a2 + 36), v86);
      v66 = type metadata accessor for _RangeSetStorage(0, v44, v89, v65);
      v67 = v90;
      sub_2150C877C(v59, v66, v68, v90);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v64, v66);
      v69 = v92;
      v70 = v95;
      v71 = v59;
      v72 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v88, v67 + *(int *)(v92 + 36), v44);
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v67, v69);
      v73 = (uint64_t)v96;
      sub_21512F974();
      v74 = v71;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v72, v44);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v63);
      return sub_21506D024(v74, v73, v63, (uint64_t)v82, v80);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_21506F6B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_21506F0A8(a1, a2, a3);
}

uint64_t sub_21506F6BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = type metadata accessor for _DiscontiguousSlice.Index(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - v8;
  sub_21506F0A8(a1, a2, (uint64_t *)((char *)&v11 - v8));
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(a1, v6);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v7 + 32))(a1, v9, v6);
}

uint64_t sub_21506F77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x2199DC4C4](&unk_215136714, a1, &v4);
}

void sub_21506F7B0()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_21506F7C0()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_21506F7D0()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_21506F7E0()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_21506F7F0()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t type metadata accessor for _DiscontiguousSlice.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DiscontiguousSlice.Index);
}

uint64_t sub_21506F80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21506F834(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_21506F820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21506F834(a1, a2, a3, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_21506F834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v22 - v17;
  v19 = sub_21512F9E0();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_21506F9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_215130028();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  v11 = sub_21512F9E0();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_21512F9E0();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_21506FB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = sub_215130028();
  v31 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - v9;
  v29 = type metadata accessor for _RangeSet(0, v6, AssociatedConformanceWitness, v11);
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v13 = (char *)&v26 - v12;
  v15 = type metadata accessor for _RangeSetStorage(255, v6, AssociatedConformanceWitness, v14);
  MEMORY[0x2199DC4C4](&unk_215138AA4, v15);
  v16 = sub_2151302B0();
  v28 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v26 - v17;
  v19 = swift_getAssociatedTypeWitness();
  sub_21512FCEC();
  v30 = v19;
  v35 = sub_215130238();
  v21 = type metadata accessor for _DiscontiguousSlice(0, a2, a3, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v13, v33 + *(int *)(v21 + 36), v29);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v18, v13, v15);
  v29 = v16;
  v22 = (uint64_t *)&v18[*(int *)(v16 + 36)];
  *v22 = 0;
  if (sub_2150C88DC(v15))
  {
    v24 = 0;
    do
    {
      sub_2150C877C(v24, v15, v23, (uint64_t)v10);
      MEMORY[0x2199DC4C4](&unk_215138C54, v15);
      sub_21512FE0C();
      *v22 = v34;
      sub_21512FF50();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v32);
      sub_215130274();
      swift_getAssociatedConformanceWitness();
      sub_215130250();
      v24 = *v22;
    }
    while (v24 != sub_2150C88DC(v15));
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  return v35;
}

uint64_t sub_21506FEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v18 = a1;
  v5 = *(_QWORD *)(a4 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v18 - v9;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - v13;
  v16 = type metadata accessor for _DiscontiguousSlice.Index(0, v6, v5, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2 + *(int *)(v16 + 36), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v18, AssociatedTypeWitness);
  return sub_21512FA4C();
}

uint64_t sub_21506FFF0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t result;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t TupleTypeMetadata2;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v120 = a2;
  v113 = a4;
  v114 = a1;
  v5 = *(_QWORD *)(a4 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v112 = (uint64_t)&v90 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v110 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v111 = (char *)&v90 - v10;
  v11 = MEMORY[0x2199DC4C4](&unk_21513686C, a3);
  v115 = a3;
  v118 = (void (*)(char *, uint64_t))v11;
  v12 = sub_21512F944();
  v119 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v96 = (char *)&v90 - v13;
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE0670], v12);
  v126 = v12;
  v104 = sub_2151302B0();
  v108 = *(_QWORD *)(v104 - 8);
  v14 = MEMORY[0x24BDAC7A8](v104);
  v117 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v103 = (char *)&v90 - v16;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v102 = type metadata accessor for _RangeSet(0, v9, AssociatedConformanceWitness, v18);
  v100 = *(_QWORD *)(v102 - 8);
  v19 = MEMORY[0x24BDAC7A8](v102);
  v98 = (uint64_t)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v97 = (char *)&v90 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v105 = (uint64_t *)((char *)&v90 - v23);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v24 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v94 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v90 - v26;
  v124 = v5;
  v125 = v6;
  v29 = type metadata accessor for _DiscontiguousSlice.Index(0, v6, v5, v28);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v123 = (char *)&v90 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v121 = (char *)&v90 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v37 = (char *)&v90 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v90 - v38;
  v40 = sub_215130028();
  v107 = *(_QWORD *)(v40 - 8);
  v41 = MEMORY[0x24BDAC7A8](v40);
  v92 = (char *)&v90 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v106 = (char *)&v90 - v43;
  v101 = v30;
  v44 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v45 = v120;
  v44(v39, v120, v29);
  v46 = *(int *)(v29 + 36);
  v122 = v39;
  v47 = &v39[v46];
  MEMORY[0x2199DC4C4](&unk_21513694C, v29);
  v48 = &v45[*(int *)(sub_215130028() + 36)];
  v120 = (char *)v44;
  v44(v37, v48, v29);
  v99 = v29;
  v49 = &v37[*(int *)(v29 + 36)];
  v95 = AssociatedConformanceWitness;
  result = sub_21512F9E0();
  if ((result & 1) != 0)
  {
    v51 = TupleTypeMetadata2;
    v52 = v27;
    v53 = &v27[*(int *)(TupleTypeMetadata2 + 48)];
    v54 = v110;
    v55 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
    v55(v27, v47, v9);
    v91 = v53;
    v55(v53, v49, v9);
    v56 = v94;
    v57 = &v94[*(int *)(v51 + 48)];
    v58 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v58(v94, v52, v9);
    v109 = (void (*)(char *, uint64_t, uint64_t))v58;
    v58(v57, v53, v9);
    v59 = (uint64_t)v92;
    v55(v92, v56, v9);
    v60 = *(void (**)(char *, uint64_t))(v54 + 8);
    v60(v57, v9);
    v61 = &v56[*(int *)(v51 + 48)];
    v55(v56, v52, v9);
    v55(v61, v91, v9);
    v55((char *)(v59 + *(int *)(v40 + 36)), v61, v9);
    v60(v56, v9);
    v63 = v106;
    v62 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v106, v59, v40);
    v64 = v100;
    v65 = v102;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v97, v116 + *(int *)(v115 + 36), v102);
    v66 = *(void (**)(uint64_t, char *, uint64_t))(v62 + 16);
    v94 = (char *)v40;
    v66(v59, v63, v40);
    v67 = v98;
    v110 = v9;
    sub_21507E57C(v59, v9, v95, v68, v98);
    sub_21507DA98(v67, v65, v105);
    v100 = *(_QWORD *)(v64 + 8);
    ((void (*)(uint64_t, uint64_t))v100)(v67, v65);
    v69 = v96;
    sub_21512FF38();
    v70 = v119;
    v71 = v117;
    v72 = v126;
    (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v117, v69, v126);
    v73 = (char *)v122;
    MEMORY[0x2199DB480](v72);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v72);
    v74 = v104;
    v75 = (char *)v71 + *(int *)(v104 + 36);
    v76 = v101;
    v77 = v99;
    v119 = *(_QWORD *)(v101 + 32);
    ((void (*)(char *, char *, uint64_t))v119)(v75, v73, v99);
    v78 = v103;
    (*(void (**)(char *, _QWORD *, uint64_t))(v108 + 32))(v103, v71, v74);
    v79 = &v78[*(int *)(v74 + 36)];
    sub_21512F92C();
    LOBYTE(v74) = sub_21506CF5C(v79, v73, v125, v124);
    v118 = *(void (**)(char *, uint64_t))(v76 + 8);
    v118(v73, v77);
    v80 = v65;
    v81 = v105;
    v82 = v77;
    v83 = v123;
    if ((v74 & 1) == 0)
    {
      v117 = v79;
      v84 = v118;
      do
      {
        v87 = v121;
        ((void (*)(char *, char *, uint64_t))v120)(v121, v79, v82);
        sub_21512F938();
        ((void (*)(char *, char *, uint64_t))v119)(v83, v87, v82);
        v88 = (uint64_t)&v83[*(int *)(v82 + 36)];
        if ((sub_21507E634(v88, v80) & 1) != 0)
        {
          v109(v111, v88, v110);
          sub_21506E5D0(v115, v113, v89, v112);
          v83 = v123;
          sub_21512FA4C();
        }
        v84(v83, v82);
        v85 = (char *)v122;
        sub_21512F92C();
        v79 = v117;
        v86 = sub_21506CF5C(v117, v85, v125, v124);
        v84(v85, v82);
      }
      while ((v86 & 1) == 0);
    }
    (*(void (**)(char *, uint64_t))(v108 + 8))(v78, v104);
    ((void (*)(_QWORD *, uint64_t))v100)(v81, v80);
    return (*(uint64_t (**)(char *, char *))(v107 + 8))(v106, v94);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2150708B4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_215070940(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 8) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v6 + 8) & ~v6, ((unint64_t)a2 + v6 + 8) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_215070A04(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

_QWORD *sub_215070A5C(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_215070ACC(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_215070B3C(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_215070BAC(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_215070C1C(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v6)
    goto LABEL_20;
  v8 = ((v7 + 8) & ~v7) + *(_QWORD *)(v5 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_20;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_20;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_20:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))((a1 + v7 + 8) & ~v7, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_20;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v13 = v8;
    else
      v13 = 4;
    __asm { BR              X11 }
  }
  return (v6 + v12 + 1);
}

void sub_215070D80(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t Column.eraseToAnyColumn()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];

  v5 = *v4;
  v6 = v4[1];
  v7 = v4[2];
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  sub_21511DB94(v9, *(_QWORD *)(a1 + 16), a2, a3, a4);
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t Column.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_215071E5C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_215114854, a5);
}

_QWORD *sub_215070FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D208);
  v8 = (_QWORD *)swift_allocObject();
  v9 = _swift_stdlib_malloc_size(v8);
  v10 = v9 - 32;
  if (v9 < 32)
    v10 = v9 - 17;
  v8[2] = 2;
  v8[3] = 2 * (v10 >> 4);
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  v8[7] = a4;
  return v8;
}

uint64_t Column.init<A>(name:contents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  return sub_2150715FC(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_215116F34, a7);
}

{
  return sub_2150715FC(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_215117368, a7);
}

uint64_t sub_215071060(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;

  v6 = a4;
  v10 = *((_QWORD *)a4 - 1);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v30 - v14;
  v31 = a1;
  v16 = sub_21512FE60();
  v17 = __OFSUB__(a3, a2);
  v18 = a3 - a2;
  if (v17)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    v6 = sub_21502DABC(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    goto LABEL_19;
  }
  if (v16 != v18)
  {
    v32 = 0;
    v33 = 0xE000000000000000;
    sub_215130178();
    swift_bridgeObjectRelease();
    v32 = 0xD000000000000017;
    v33 = 0x8000000215131290;
    v35 = sub_21512FE60();
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    sub_21512FB90();
    v35 = v18;
    sub_2151303B8();
    sub_21512FB90();
    swift_bridgeObjectRelease();
    result = sub_2151302EC();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, char *))(v10 + 16))(v12, v31, v6);
  sub_21512FC20();
  swift_getAssociatedConformanceWitness();
  a5 = 0;
  v6 = (char *)MEMORY[0x24BEE4AF8];
  v19 = 1;
  while (1)
  {
    sub_215130094();
    if (v32 == 2)
      break;
    v20 = (v32 & 1) == 0;
    if ((v32 & 1) != 0)
    {
      if ((v19 & 1) != 0)
        a5 = a2;
    }
    else if ((v19 & 1) == 0)
    {
      if (a2 < a5)
        goto LABEL_27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_21502DABC(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v22 = *((_QWORD *)v6 + 2);
      v21 = *((_QWORD *)v6 + 3);
      if (v22 >= v21 >> 1)
        v6 = sub_21502DABC((char *)(v21 > 1), v22 + 1, 1, v6);
      *((_QWORD *)v6 + 2) = v22 + 1;
      v23 = &v6[16 * v22];
      *((_QWORD *)v23 + 4) = a5;
      *((_QWORD *)v23 + 5) = a2;
      a5 = 0;
    }
    v19 = v20;
    v17 = __OFADD__(a2++, 1);
    if (v17)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, AssociatedTypeWitness);
  if ((v19 & 1) != 0)
    goto LABEL_22;
  if (a2 < a5)
    goto LABEL_29;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_30;
LABEL_19:
  v25 = *((_QWORD *)v6 + 2);
  v24 = *((_QWORD *)v6 + 3);
  if (v25 >= v24 >> 1)
    v6 = sub_21502DABC((char *)(v24 > 1), v25 + 1, 1, v6);
  *((_QWORD *)v6 + 2) = v25 + 1;
  v26 = &v6[16 * v25];
  *((_QWORD *)v26 + 4) = a5;
  *((_QWORD *)v26 + 5) = a2;
LABEL_22:
  v32 = 0;
  v33 = 0;
  v34 = 2;
  v27 = *((_QWORD *)v6 + 2);
  if (v27)
  {
    v28 = (uint64_t *)(v6 + 40);
    do
    {
      sub_2150757D4(*(v28 - 1), *v28);
      v28 += 2;
      --v27;
    }
    while (v27);
  }
  swift_bridgeObjectRelease();
  return v32;
}

void Column.init(name:capacity:)(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::Int a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a5 = a1;
  a5[1] = a2;
  sub_215130064();
  v8 = sub_21512FCEC();
  v9 = sub_21511721C(v8, a4);
  swift_bridgeObjectRelease();
  a5[2] = v9;
  v12 = type metadata accessor for PackedOptionalsArray(0, a4, v10, v11);
  sub_215114000(a3, v12, v13, v14);
}

uint64_t Column.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for PackedOptionalsArray(0, *(_QWORD *)(a2 + 16), a3, a4);
  return sub_21511400C(a1, v5);
}

Swift::Bool __swiftcall Column.isNil(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v2;

  return sub_215115068(at, *(_QWORD *)(v2 + 16), *(_QWORD *)(v1 + 16));
}

uint64_t Column.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = sub_215130064();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - v6;
  v8 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - v6, a1, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v3);
  v11 = type metadata accessor for PackedOptionalsArray(0, v3, v9, v10);
  sub_21511400C((uint64_t)v7, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_2150715FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v13;
  uint64_t result;

  v13 = a7(a3, a4, a5, a6);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a3, a5);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = v13;
  return result;
}

uint64_t Column.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_215071D48(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2151140B8);
}

{
  return sub_215071D48(a1, a2, a3, a4, sub_2151143B8);
}

_QWORD *Column.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_215114FF0(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t Column.name.getter()
{
  uint64_t v0;

  v0 = sub_215075E3C();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t Column.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Column.name.modify())()
{
  return nullsub_5;
}

uint64_t Column.count.getter(uint64_t a1)
{
  uint64_t v1;

  return sub_215117738(*(_QWORD *)(v1 + 16), *(_QWORD *)(a1 + 16));
}

uint64_t Column.missingCount.getter(uint64_t a1)
{
  uint64_t v1;

  return sub_215113FA8(*(_QWORD *)(v1 + 16), *(_QWORD *)(a1 + 16));
}

uint64_t Column.wrappedElementType.getter(uint64_t a1)
{
  return nullsub_5(*(_QWORD *)(a1 + 16));
}

uint64_t Column.prototype.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = nullsub_5(*v2);
  v7 = v6;
  a2[3] = type metadata accessor for ColumnPrototype(0, v4, v8, v9);
  a2[4] = (uint64_t)&off_24D2A3598;
  *a2 = v5;
  a2[1] = v7;
  return swift_bridgeObjectRetain();
}

void Column.init(_:capacity:)(_QWORD *a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a1[1];
  *a4 = *a1;
  a4[1] = v7;
  sub_215130064();
  v8 = sub_21512FCEC();
  v9 = sub_21511721C(v8, a3);
  swift_bridgeObjectRelease();
  a4[2] = v9;
  v12 = type metadata accessor for PackedOptionalsArray(0, a3, v10, v11);
  sub_215114000(a2, v12, v13, v14);
}

uint64_t Column.init<A>(_:contents:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return sub_215071838(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_215116F34, a6);
}

{
  return sub_215071838(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_215117368, a6);
}

uint64_t sub_215071838@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v10 = *a1;
  v11 = a1[1];
  v12 = a6(a2, a3, a4, a5);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  *a7 = v10;
  a7[1] = v11;
  a7[2] = v12;
  return result;
}

uint64_t Column.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t result;
  _QWORD v18[5];

  v7 = *a1;
  v8 = a1[1];
  v10 = a1[2];
  v9 = a1[3];
  v11 = a1[4];
  v12 = type metadata accessor for ColumnSlice(0, a2, a3, a4);
  v13 = ColumnSlice.name.getter(v12);
  v15 = v14;
  v18[0] = v7;
  v18[1] = v8;
  v18[2] = v10;
  v18[3] = v9;
  v18[4] = v11;
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, v12);
  v16 = sub_215116F34((uint64_t)v18, a2, v12);
  swift_release();
  result = swift_bridgeObjectRelease();
  *a5 = v13;
  a5[1] = v15;
  a5[2] = v16;
  return result;
}

uint64_t sub_21507196C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_215130064();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - v4;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))((char *)&v10 - v4, 1, 1, v1);
  v8 = type metadata accessor for PackedOptionalsArray(0, v1, v6, v7);
  sub_21511400C((uint64_t)v5, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_215071A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  uint64_t v26;
  _OWORD v27[2];

  v3 = *(_QWORD *)(a2 + 16);
  v4 = sub_215130064();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v24 - v10;
  v12 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_215053AA4(a1, (uint64_t)&v25);
  if (v26)
  {
    sub_21504678C(&v25, v27);
    sub_21504679C((uint64_t)v27, (uint64_t)&v25);
    v15 = swift_dynamicCast();
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    if (v15)
    {
      v16(v11, 0, 1, v3);
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v3);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v8, v14, v3);
      v16(v8, 0, 1, v3);
      v19 = type metadata accessor for PackedOptionalsArray(0, v3, v17, v18);
      sub_21511400C((uint64_t)v8, v19);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v3);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
    }
    else
    {
      v16(v11, 1, 1, v3);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
      sub_21504679C((uint64_t)v27, (uint64_t)&v25);
      v24[0] = 0;
      v24[1] = 0xE000000000000000;
      sub_215130178();
      sub_21512FB90();
      __swift_project_boxed_opaque_existential_1(&v25, v26);
      swift_getDynamicType();
      sub_215130664();
      sub_21512FB90();
      swift_bridgeObjectRelease();
      sub_21512FB90();
      sub_215130664();
      sub_21512FB90();
      swift_bridgeObjectRelease();
      result = sub_2151302EC();
      __break(1u);
    }
  }
  else
  {
    sub_21507651C((uint64_t)&v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, 1, 1, v3);
    v23 = type metadata accessor for PackedOptionalsArray(0, v3, v21, v22);
    sub_21511400C((uint64_t)v8, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_215071D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for PackedOptionalsArray(0, *(_QWORD *)(a2 + 16), a3, a4);
  return a5(a1, v9, a3, a4);
}

Swift::Void __swiftcall Column.remove(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_215130064();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - v6;
  v10 = type metadata accessor for PackedOptionalsArray(0, v3, v8, v9);
  sub_215114700(at, v10, (uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Column.mapNonNil<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_215071E5C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_215114A4C, a5);
}

uint64_t sub_215071E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v14 = *v6;
  v13 = v6[1];
  v15 = v6[2];
  v16 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  result = a5(a1, a2, v15, v16, a4);
  if (v7)
    return swift_bridgeObjectRelease();
  *a6 = v14;
  a6[1] = v13;
  a6[2] = result;
  return result;
}

uint64_t Column.transform(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_215071F2C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_215114C8C);
}

{
  return sub_215071F2C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_215114E14);
}

uint64_t sub_215071F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = type metadata accessor for PackedOptionalsArray(0, *(_QWORD *)(a3 + 16), a3, (uint64_t)a4);
  return a4(a1, a2, v7);
}

void Column.filter(_:)(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  int64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46[4];
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v34 = a2;
  v33 = a1;
  v30 = a4;
  v31 = *(_QWORD *)(a3 + 16);
  v7 = sub_215130064();
  v50 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = sub_215130064();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v27 - v12);
  v14 = *v4;
  v32 = v4[1];
  v15 = v4[2];
  v47 = 0;
  v48 = 0;
  v49 = 2;
  *(_QWORD *)&v43 = v14;
  *((_QWORD *)&v43 + 1) = v32;
  v44 = v15;
  *((_QWORD *)&v35 + 1) = a3;
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a3);
  sub_21512FE30();
  v42 = v36;
  v28 = v14;
  *(_QWORD *)&v39 = v14;
  *((_QWORD *)&v39 + 1) = v32;
  v29 = v15;
  v40 = v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7F20);
  v17 = sub_215076058((unint64_t *)&qword_254DA7F28, MEMORY[0x24BEE1BB8]);
  v18 = *((_QWORD *)&v35 + 1);
  v19 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, *((_QWORD *)&v35 + 1));
  sub_215130490();
  v39 = v43;
  v40 = v44;
  v41 = v45;
  *(_QWORD *)&v35 = v16;
  *(_QWORD *)&v36 = v16;
  *((_QWORD *)&v36 + 1) = v18;
  v20 = v17;
  v37 = v17;
  v38 = v19;
  sub_2151301A8();
  sub_215130184();
  while (1)
  {
    v43 = v35;
    v44 = v20;
    *(_QWORD *)&v45 = v19;
    sub_21513019C();
    sub_215130190();
    if ((*(unsigned int (**)(int64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v13, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v46[0] = v28;
      v46[1] = v32;
      v46[2] = v29;
      v25 = v47;
      v24 = v48;
      v26 = v49;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_2150C31A8(v46, v25, v24, v26, v31, v30);
      return;
    }
    v21 = *v13;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v9, (char *)v13 + *(int *)(TupleTypeMetadata2 + 48), v7);
    v22 = v33(v9);
    if (v5)
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v7);
      swift_release();
      swift_bridgeObjectRelease();
      sub_21501EF2C(v47, v48, v49);
      return;
    }
    if ((v22 & 1) == 0)
      goto LABEL_2;
    v23 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v23 < v21)
      goto LABEL_12;
    sub_2150757D4(v21, v23);
LABEL_2:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v7);
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

BOOL sub_21507235C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_21507236C()
{
  return sub_2151305B0();
}

uint64_t sub_215072390(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_21513043C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746E656D656C65 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_21513043C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_215072470()
{
  sub_2151305A4();
  sub_2151305B0();
  return sub_2151305EC();
}

uint64_t sub_2150724B4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x73746E656D656C65;
  else
    return 1701667182;
}

BOOL sub_2150724E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_21507235C(*a1, *a2);
}

uint64_t sub_2150724F4()
{
  return sub_215072470();
}

uint64_t sub_215072504()
{
  return sub_21507236C();
}

uint64_t sub_215072514()
{
  sub_2151305A4();
  sub_21507236C();
  return sub_2151305EC();
}

uint64_t sub_215072558()
{
  char *v0;

  return sub_2150724B4(*v0);
}

uint64_t sub_215072568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_215072390(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_215072590()
{
  return 0;
}

uint64_t sub_21507259C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21506E558();
  *a1 = result;
  return result;
}

uint64_t sub_2150725C4(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&unk_215136E78, a1);
  return sub_21513064C();
}

uint64_t sub_2150725F8(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&unk_215136E78, a1);
  return sub_215130658();
}

void (*sub_215072630(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Column.name.modify();
  return sub_215072674;
}

_QWORD *sub_215072678@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

Swift::Int __swiftcall Column.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

_QWORD *sub_2150726A0(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t sub_2150726B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a3);
  return sub_21512FE24();
}

uint64_t sub_21507271C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a4);
  return sub_21512FE00();
}

uint64_t sub_215072780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a3);
  return sub_21512FE3C();
}

void sub_2150727D4(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Column.startIndex.getter()
{
  return 0;
}

uint64_t sub_2150727E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = Column.endIndex.getter(a1);
  *a2 = result;
  return result;
}

uint64_t Column.endIndex.getter(uint64_t a1)
{
  uint64_t v1;

  return sub_215117738(*(_QWORD *)(v1 + 16), *(_QWORD *)(a1 + 16));
}

void (*sub_215072818(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_215072874(v6, *a2, a3);
  return sub_215072674;
}

void (*sub_215072874(uint64_t *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_215130064();
  *a1 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  sub_215114FF0(a2, v5, (uint64_t)v8);
  return sub_21506DF04;
}

double sub_2150728F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Column.subscript.getter(*(_QWORD *)(a1 + 8), a2, a3);
}

double Column.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double result;

  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  *(_QWORD *)&result = ColumnSlice.init(base:bounds:)(a1, v5, a3).n128_u64[0];
  return result;
}

uint64_t sub_215072974(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a1);
  return sub_21512FE30();
}

void sub_2150729C4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_2150729DC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

Swift::Int __swiftcall Column.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

_QWORD *sub_215072A04(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 sub_215072A1C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_215072A34(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a1);
  return sub_21512FEC0();
}

uint64_t sub_215072A68(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a1);
  return sub_21512FECC();
}

uint64_t sub_215072A9C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return Column.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

uint64_t Column.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return sub_2151152C8(a1, a2);
}

_QWORD *sub_215072AE0@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a1;
  v6 = type metadata accessor for Column(0, *(uint64_t *)((char *)a1 + a2 - 8), a2, a3);
  return Column.subscript.getter(v5, v6, a4);
}

uint64_t Column.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  sub_215075E44(a1, a2, a3, a4);
  v5 = sub_215130064();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

{
  sub_215075E8C(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
}

void (*Column.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = v8;
  v9 = sub_215130064();
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[4] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[5] = malloc(v11);
  v12 = malloc(v11);
  v7[6] = v12;
  sub_215114FF0(a2, v8, (uint64_t)v12);
  return sub_215072C38;
}

void sub_215072C38(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, uint64_t);
  uint64_t v15;

  v4 = *a1;
  v5 = (void *)(*a1)[5];
  v6 = (void *)(*a1)[6];
  v7 = (*a1)[3];
  v8 = (*a1)[4];
  v9 = (*a1)[2];
  v10 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[5], v6, v7);
    v13 = type metadata accessor for PackedOptionalsArray(0, v9, v11, v12);
    sub_215117280((uint64_t)v5, v10, v13);
    v14 = *(void (**)(void *, uint64_t))(v8 + 8);
    v14(v5, v7);
  }
  else
  {
    v15 = type metadata accessor for PackedOptionalsArray(0, v9, a3, a4);
    sub_215117280((uint64_t)v6, v10, v15);
    v14 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v14(v6, v7);
  free(v6);
  free(v5);
  free(v4);
}

double sub_215072D08@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  double v11[3];

  v5 = *(_QWORD *)(a1 + 8);
  v6 = type metadata accessor for Column(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  Column.subscript.getter(v5, v6, (uint64_t)&v9);
  v7 = v10;
  *(_OWORD *)a4 = v9;
  *(_QWORD *)(a4 + 16) = v7;
  result = v11[0];
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v11;
  return result;
}

uint64_t sub_215072D8C(uint64_t a1, uint64_t a2, Swift::Int *a3, uint64_t a4)
{
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(Swift::Int *)((char *)a3 + a4 - 8);
  v5 = *a3;
  v6 = a3[1];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v12 = *(_OWORD *)a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v10 = type metadata accessor for Column(0, v4, (uint64_t)a3, a4);
  swift_bridgeObjectRetain();
  swift_retain();
  return Column.subscript.setter(&v12, v5, v6, v10);
}

uint64_t Column.subscript.setter(__int128 *a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  v16 = *a1;
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v9 = *(_QWORD *)(a4 + 16);
  v10 = type metadata accessor for PackedOptionalsArray(0, v9, a3, a4);
  v13 = type metadata accessor for ColumnSlice(0, v9, v11, v12);
  v14 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, v13);
  sub_2151150D8(a2, a3, (uint64_t)&v16, v10, v13, v14);
  swift_release();
  return swift_bridgeObjectRelease();
}

void (*Column.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = malloc(0x48uLL);
  *a1 = v9;
  v9[7] = a4;
  v9[8] = v4;
  v9[5] = a2;
  v9[6] = a3;
  Column.subscript.getter(a3, a4, (uint64_t)v9);
  return sub_215072F5C;
}

void sub_215072F5C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = v2[7];
  v9 = v2[5];
  v8 = v2[6];
  v10 = v2[4];
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v3;
  v12 = v6;
  v13 = v5;
  v14 = v10;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    Column.subscript.setter(&v11, v9, v8, v7);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    Column.subscript.setter(&v11, v9, v8, v7);
  }
  free(v2);
}

double sub_21507300C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  double result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v13[0] = a1;
  v13[1] = a2;
  v14 = a3;
  v7 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a4);
  sub_21506CCA4((uint64_t)v13, a4, v7, (uint64_t)&v15);
  v9 = v15;
  v10 = v16;
  v11 = v17;
  v12 = v18;
  *(_QWORD *)&result = sub_2150C3054((uint64_t)&v9, a5).n128_u64[0];
  return result;
}

uint64_t sub_2150730A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[24];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;

  LODWORD(v59) = a4;
  v8 = *(_QWORD *)(a5 + 16);
  v54 = sub_215130064();
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v10 = (char *)&v51 - v9;
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  LODWORD(a1) = *(unsigned __int8 *)(a1 + 40);
  v57 = a2;
  v58 = a3;
  v16 = sub_2150EBD1C(a2, a3, v59);
  v60 = v11;
  v76 = v11;
  v77 = v12;
  v63 = v12;
  v17 = v13;
  v62 = v14;
  *(_QWORD *)&v78 = v14;
  *((_QWORD *)&v78 + 1) = v13;
  v18 = a1;
  v61 = v15;
  v79 = v15;
  LOBYTE(v80) = a1;
  v55 = v8;
  v21 = type metadata accessor for DiscontiguousColumnSlice(0, v8, v19, v20);
  if (v16 == DiscontiguousColumnSlice.count.getter(v21, v22, v23, v24))
  {
    v25 = v57;
    v26 = v58;
    v27 = v59;
    v28 = sub_2150EBC3C(v57, v58, v59);
    v56 = v28;
    sub_21501EF2C(v25, v26, v27);
    v69 = v28;
    v70 = v60;
    v71 = v63;
    *(_QWORD *)&v72 = v62;
    *((_QWORD *)&v72 + 1) = v17;
    *(_QWORD *)&v73 = v61;
    BYTE8(v73) = v18;
    MEMORY[0x2199DC4C4](&protocol conformance descriptor for DiscontiguousColumnSlice<A>, v21);
    sub_21512FF38();
    v29 = *((_QWORD *)&v78 + 1);
    v59 = v17;
    v52 = v21;
    v30 = v79;
    LODWORD(v57) = v80;
    v64 = v76;
    v65 = v77;
    v66 = v78;
    *(_QWORD *)&v67 = v79;
    BYTE8(v67) = v80;
    *(_OWORD *)v68 = v81;
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7CB8);
    LODWORD(v58) = v18;
    v32 = v31;
    v33 = sub_21512F944();
    v34 = sub_21507646C();
    v35 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE0660], v33);
    sub_215130490();
    swift_release();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v29, v30, v57);
    swift_bridgeObjectRelease();
    v64 = v70;
    v65 = v71;
    v66 = v72;
    v67 = v73;
    v68[0] = v74;
    *(_OWORD *)&v68[8] = v75;
    v76 = v32;
    v77 = v33;
    *(_QWORD *)&v78 = v34;
    *((_QWORD *)&v78 + 1) = v35;
    sub_2151301A8();
    sub_215130184();
    v57 = v32;
    v70 = v32;
    v71 = v33;
    v56 = v33;
    v36 = v34;
    *(_QWORD *)&v72 = v34;
    *((_QWORD *)&v72 + 1) = v35;
    v37 = v35;
    sub_21513019C();
    sub_215130190();
    v38 = v52;
    v39 = v55;
    v40 = v54;
    v41 = v53;
    if ((v66 & 1) == 0)
    {
      v42 = v64;
      v43 = v65;
      do
      {
        v70 = v60;
        v71 = v63;
        *(_QWORD *)&v72 = v62;
        *((_QWORD *)&v72 + 1) = v59;
        *(_QWORD *)&v73 = v61;
        BYTE8(v73) = v58;
        DiscontiguousColumnSlice.subscript.getter(v43, v38, (uint64_t)v10);
        v46 = type metadata accessor for PackedOptionalsArray(0, v39, v44, v45);
        sub_215117280((uint64_t)v10, v42, v46);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v40);
        v70 = v57;
        v71 = v56;
        *(_QWORD *)&v72 = v36;
        *((_QWORD *)&v72 + 1) = v37;
        sub_21513019C();
        sub_215130190();
        v42 = v64;
        v43 = v65;
      }
      while (v66 != 1);
    }
    v47 = v80;
    v48 = v81;
    v49 = BYTE8(v81);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v47, v48, v49);
    swift_release();
    swift_bridgeObjectRelease();
    return sub_21501EF2C(v59, v61, v58);
  }
  else
  {
    result = sub_2151302EC();
    __break(1u);
  }
  return result;
}

double Column.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5;

  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>);
  sub_21512FC98();
  return Column.subscript.getter(v5, a1, a2);
}

double sub_21507367C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  uint64_t v9;
  double v10[3];

  v5 = type metadata accessor for Column(0, *(_QWORD *)(a2 + a1 - 24), a2, a3);
  Column.subscript.getter(v5, (uint64_t)&v8);
  v6 = v9;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v6;
  result = v10[0];
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v10;
  return result;
}

uint64_t sub_21507370C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  v11 = *a1;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v9 = type metadata accessor for Column(0, v5, a3, a4);
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_215075E8C((uint64_t)&v11, a3, v9);
}

void (*Column.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t *a1, char a2)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;

  v10 = malloc(0x58uLL);
  *a1 = v10;
  v10[7] = a5;
  v10[8] = v5;
  v10[5] = a3;
  v10[6] = a4;
  v11 = *(_QWORD *)(a4 - 8);
  v10[9] = v11;
  v10[10] = malloc(*(_QWORD *)(v11 + 64));
  (*(void (**)(void))(v11 + 16))();
  Column.subscript.getter(a3, (uint64_t)v10);
  return sub_215073884;
}

void sub_215073884(uint64_t *a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v3 = *(void **)(*a1 + 80);
  v6 = *(_QWORD *)(*a1 + 40);
  v5 = *(_QWORD *)(*a1 + 48);
  if ((a2 & 1) != 0)
  {
    v8 = v2[2];
    v7 = v2[3];
    v9 = v2[4];
    v10 = *(_OWORD *)v2;
    v11 = v8;
    v12 = v7;
    v13 = v9;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_215075E8C((uint64_t)&v10, (uint64_t)v3, v6);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    sub_215075E8C(*a1, (uint64_t)v3, v6);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  }
  free(v3);
  free(v2);
}

uint64_t Column.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  result = sub_215117738(*(_QWORD *)(v5 + 16), *(_QWORD *)(a2 + 16));
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v12 = sub_215071060(a1, 0, result, a3, a4);
    v14 = v13;
    v16 = v15;
    sub_21507300C(v12, v13, v15, a2, a5);
    return sub_21501EF2C(v12, v14, v16);
  }
  return result;
}

uint64_t Column.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_215073A70(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_215115304);
}

{
  return sub_215073A70(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_215115400);
}

uint64_t Column.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_21511533C(a1, *(_QWORD *)(a2 + 16), a3, a4);
}

uint64_t sub_215073A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for PackedOptionalsArray(0, *(_QWORD *)(a3 + 16), a3, a4);
  return a5(a1, a2, v9, a4);
}

uint64_t sub_215073AE4()
{
  return sub_21512FE24();
}

uint64_t sub_215073AF4()
{
  return sub_21512FE3C();
}

uint64_t sub_215073B00(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  sub_215075E44(a1, *a2, a3, a4);
  v5 = sub_215130064();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

void (*sub_215073B4C(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Column.subscript.modify(v6, *a2, a3);
  return sub_215072674;
}

uint64_t sub_215073BA8(__int128 *a1, Swift::Int *a2, uint64_t a3)
{
  return Column.subscript.setter(a1, *a2, a2[1], a3);
}

void (*sub_215073BB8(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Column.subscript.modify(v6, *a2, a2[1], a3);
  return sub_215072674;
}

uint64_t sub_215073C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a3);
  return sub_21512FA40();
}

uint64_t sub_215073C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Column.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t static Column<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v6 = a1[2];
  v7 = a2[2];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (sub_21513043C() & 1) != 0)
    return sub_215115478(v6, v7, a3, a4);
  else
    return 0;
}

uint64_t sub_215073D20(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return static Column<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void Column<A>.distinct()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  int64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  _QWORD v57[2];

  v42 = a2;
  v36 = a3;
  v37 = *(_QWORD *)(a1 + 16);
  v5 = sub_215130064();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v38 = (char *)&v33 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v33 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = sub_215130064();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)((char *)&v33 - v15);
  v18 = *v3;
  v17 = v3[1];
  v19 = v3[2];
  v57[0] = v42;
  v42 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE4AB0], v5, v57);
  v57[1] = sub_21512F830();
  v54 = 0;
  v55 = 0;
  v56 = 2;
  v50 = v18;
  v51 = v17;
  v52 = v19;
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a1);
  sub_21512FE30();
  v46 = v43;
  v33 = v18;
  v50 = v18;
  v51 = v17;
  v34 = v17;
  v35 = v19;
  v52 = v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7F20);
  v21 = sub_215076058((unint64_t *)&qword_254DA7F28, MEMORY[0x24BEE1BB8]);
  v22 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a1);
  sub_215130490();
  v43 = v47;
  v44 = v48;
  v45 = v49;
  v41 = v20;
  v50 = v20;
  v51 = a1;
  v40 = a1;
  v23 = v21;
  v52 = v21;
  v53 = v22;
  v24 = v22;
  sub_2151301A8();
  sub_215130184();
  while (1)
  {
    while (1)
    {
      *(_QWORD *)&v47 = v41;
      *((_QWORD *)&v47 + 1) = v40;
      v48 = v23;
      *(_QWORD *)&v49 = v24;
      sub_21513019C();
      sub_215130190();
      if ((*(unsigned int (**)(int64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8)
                                                                              + 48))(v16, 1, TupleTypeMetadata2) == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v50 = v33;
        v51 = v34;
        v52 = v35;
        v30 = v54;
        v31 = v55;
        v32 = v56;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_2150C31A8(&v50, v30, v31, v32, v37, v36);
        return;
      }
      v25 = *v16;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, (char *)v16 + *(int *)(TupleTypeMetadata2 + 48), v5);
      swift_bridgeObjectRetain();
      v26 = sub_21512FDD0();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        break;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    }
    v27 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v27 < v25)
      goto LABEL_10;
    sub_2150757D4(v25, v27);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v39, v12, v5);
    sub_21512FDDC();
    v28 = v38;
    sub_21512FDC4();
    v29 = *(void (**)(char *, uint64_t))(v6 + 8);
    v29(v28, v5);
    v29(v12, v5);
  }
  __break(1u);
LABEL_10:
  __break(1u);
}

uint64_t Column<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  sub_21512FB3C();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  swift_retain();
  sub_2151162B4(a1, v5, v6);
  return swift_release();
}

uint64_t Column<A>.hashValue.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD v4[10];
  __int128 v5;

  v4[9] = *(_QWORD *)v1;
  v5 = *(_OWORD *)(v1 + 8);
  sub_2151305A4();
  Column<A>.hash(into:)((uint64_t)v4, a1);
  return sub_2151305EC();
}

uint64_t sub_215074254(uint64_t a1)
{
  return Column<A>.hashValue.getter(a1);
}

uint64_t sub_21507425C(uint64_t a1, uint64_t a2)
{
  return Column<A>.hash(into:)(a1, a2);
}

uint64_t sub_215074264(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_2151305A4();
  Column<A>.hash(into:)((uint64_t)v4, a2);
  return sub_2151305EC();
}

uint64_t sub_2150742B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BYTE v32[40];

  sub_21504C608(a1, (uint64_t)v32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D198);
  if (swift_dynamicCast())
  {
    v22 = v27;
    v23 = v28;
    v6 = type metadata accessor for PackedOptionalsArray(0, *(_QWORD *)(a2 + 16), v4, v5);
    MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a2);
    v7 = v6;
    v8 = a2;
LABEL_5:
    sub_2151140B8((uint64_t)&v22, v7, v8);
    swift_release();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  }
  v9 = *(_QWORD *)(a2 + 16);
  v10 = type metadata accessor for ColumnSlice(0, v9, v4, v5);
  if (swift_dynamicCast())
  {
    v22 = v27;
    v23 = v28;
    v24 = v29;
    v25 = v30;
    v13 = type metadata accessor for PackedOptionalsArray(0, v9, v11, v12);
    MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, v10);
    v7 = v13;
    v8 = v10;
    goto LABEL_5;
  }
  v14 = type metadata accessor for DiscontiguousColumnSlice(0, v9, v11, v12);
  if (swift_dynamicCast())
  {
    v17 = v29;
    v18 = v30;
    v19 = v31;
    v22 = v27;
    v23 = v28;
    v24 = v29;
    v25 = v30;
    v26 = v31;
    v20 = type metadata accessor for PackedOptionalsArray(0, v9, v15, v16);
    MEMORY[0x2199DC4C4](&protocol conformance descriptor for DiscontiguousColumnSlice<A>, v14);
    sub_2151140B8((uint64_t)&v22, v20, v14);
    swift_release();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v17, v18, v19);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  }
  sub_21504C608(a1, (uint64_t)&v27);
  sub_215130178();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(&v27, v29);
  swift_getDynamicType();
  sub_215130664();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t sub_215074564(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v8[5];

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  v8[3] = v3;
  v8[4] = *(_QWORD *)(v4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_1, v5, v3);
  sub_2150742B4((uint64_t)v8, a2);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
}

uint64_t sub_2150745E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  _BYTE v40[48];

  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_215130064();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - v8;
  sub_21504C608(a2, (uint64_t)v40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D198);
  if (swift_dynamicCast())
  {
    sub_215114FF0(a1, v5, (uint64_t)v9);
    v14 = type metadata accessor for PackedOptionalsArray(0, v5, v12, v13);
    sub_21511400C((uint64_t)v9, v14);
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_8:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
  }
  v15 = type metadata accessor for ColumnSlice(0, v5, v10, v11);
  if (swift_dynamicCast())
  {
    v30 = v35;
    v31 = v36;
    v32 = v37;
    v33 = v38;
    ColumnSlice.subscript.getter(a1, v15);
    v20 = type metadata accessor for PackedOptionalsArray(0, v5, v18, v19);
    sub_21511400C((uint64_t)v9, v20);
    goto LABEL_5;
  }
  v21 = type metadata accessor for DiscontiguousColumnSlice(0, v5, v16, v17);
  if (swift_dynamicCast())
  {
    v28 = v38;
    v29 = v37;
    v27 = v39;
    v30 = v35;
    v31 = v36;
    v32 = v37;
    v33 = v38;
    v34 = v39;
    DiscontiguousColumnSlice.subscript.getter(a1, v21, (uint64_t)v9);
    v24 = type metadata accessor for PackedOptionalsArray(0, v5, v22, v23);
    sub_21511400C((uint64_t)v9, v24);
    swift_release();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v29, v28, v27);
    goto LABEL_8;
  }
  sub_21504C608(a2, (uint64_t)&v35);
  *(_QWORD *)&v30 = 0;
  *((_QWORD *)&v30 + 1) = 0xE000000000000000;
  sub_215130178();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v30 = 0xD000000000000014;
  *((_QWORD *)&v30 + 1) = 0x8000000215131230;
  __swift_project_boxed_opaque_existential_1(&v35, v37);
  swift_getDynamicType();
  sub_215130664();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t sub_2150748DC(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  _BYTE v43[48];

  v7 = *(_QWORD *)(a4 + 16);
  v8 = sub_215130064();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v29 - v10;
  sub_21504C608(a2, (uint64_t)v43);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D198);
  if (swift_dynamicCast())
  {
    sub_215114FF0(a1, v7, (uint64_t)v11);
    v16 = type metadata accessor for PackedOptionalsArray(0, v7, v14, v15);
    sub_215115684((uint64_t)v11, a3, v16);
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_8:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
  }
  v17 = type metadata accessor for ColumnSlice(0, v7, v12, v13);
  v18 = swift_dynamicCast();
  v32 = a3;
  if (v18)
  {
    v33 = v38;
    v34 = v39;
    v35 = v40;
    v36 = v41;
    ColumnSlice.subscript.getter(a1, v17);
    v23 = type metadata accessor for PackedOptionalsArray(0, v7, v21, v22);
    sub_215115684((uint64_t)v11, v32, v23);
    goto LABEL_5;
  }
  v24 = type metadata accessor for DiscontiguousColumnSlice(0, v7, v19, v20);
  if (swift_dynamicCast())
  {
    v30 = v41;
    v31 = v40;
    HIDWORD(v29) = v42;
    v33 = v38;
    v34 = v39;
    v35 = v40;
    v36 = v41;
    v37 = v42;
    DiscontiguousColumnSlice.subscript.getter(a1, v24, (uint64_t)v11);
    v27 = type metadata accessor for PackedOptionalsArray(0, v7, v25, v26);
    sub_215115684((uint64_t)v11, v32, v27);
    swift_release();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v31, v30, SBYTE4(v29));
    goto LABEL_8;
  }
  sub_21504C608(a2, (uint64_t)&v38);
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = 0xE000000000000000;
  sub_215130178();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v33 = 0xD000000000000014;
  *((_QWORD *)&v33 + 1) = 0x8000000215131230;
  __swift_project_boxed_opaque_existential_1(&v38, v40);
  swift_getDynamicType();
  sub_215130664();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t sub_215074BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  _BYTE v43[48];

  v7 = *(_QWORD *)(a4 + 16);
  v8 = sub_215130064();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v29 - v10;
  sub_21504C608(a3, (uint64_t)v43);
  __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D198);
  if (swift_dynamicCast())
  {
    sub_215114FF0(a2, v7, (uint64_t)v11);
    v16 = type metadata accessor for PackedOptionalsArray(0, v7, v14, v15);
    sub_215117280((uint64_t)v11, a1, v16);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
  }
  v17 = type metadata accessor for ColumnSlice(0, v7, v12, v13);
  v18 = swift_dynamicCast();
  v32 = a1;
  if (v18)
  {
    v33 = v38;
    v34 = v39;
    v35 = v40;
    v36 = v41;
    ColumnSlice.subscript.getter(a2, v17);
    v23 = type metadata accessor for PackedOptionalsArray(0, v7, v21, v22);
    sub_215117280((uint64_t)v11, v32, v23);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_5;
  }
  v24 = type metadata accessor for DiscontiguousColumnSlice(0, v7, v19, v20);
  if (swift_dynamicCast())
  {
    v30 = v41;
    v31 = v40;
    HIDWORD(v29) = v42;
    v33 = v38;
    v34 = v39;
    v35 = v40;
    v36 = v41;
    v37 = v42;
    DiscontiguousColumnSlice.subscript.getter(a2, v24, (uint64_t)v11);
    v27 = type metadata accessor for PackedOptionalsArray(0, v7, v25, v26);
    sub_215117280((uint64_t)v11, v32, v27);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release();
    swift_bridgeObjectRelease();
    sub_21501EF2C(v31, v30, SBYTE4(v29));
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
  }
  sub_21504C608(a3, (uint64_t)&v38);
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = 0xE000000000000000;
  sub_215130178();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v33 = 0xD000000000000014;
  *((_QWORD *)&v33 + 1) = 0x8000000215131230;
  __swift_project_boxed_opaque_existential_1(&v38, v40);
  swift_getDynamicType();
  sub_215130664();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  result = sub_2151302EC();
  __break(1u);
  return result;
}

uint64_t sub_215074F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = sub_215130064();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - v8;
  sub_215114FF0(a1, v5, (uint64_t)&v13 - v8);
  v10 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a3 + 24) = v5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v9, v5);
  }
  return result;
}

uint64_t sub_215074FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];

  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_215130064();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - v8;
  sub_215053AA4(a2, (uint64_t)&v17);
  if (v18)
  {
    sub_21504678C(&v17, v19);
    sub_21504679C((uint64_t)v19, (uint64_t)&v17);
    swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v9, 0, 1, v5);
    v12 = type metadata accessor for PackedOptionalsArray(0, v5, v10, v11);
    sub_215117280((uint64_t)v9, a1, v12);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  }
  else
  {
    sub_21507651C((uint64_t)&v17);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v9, 1, 1, v5);
    v16 = type metadata accessor for PackedOptionalsArray(0, v5, v14, v15);
    sub_215117280((uint64_t)v9, a1, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

double sub_21507516C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;

  a4[3] = type metadata accessor for ColumnSlice(0, *(_QWORD *)(a2 + 16), a2, a3);
  a4[4] = (uint64_t)&off_24D2A4A38;
  v7 = swift_allocObject();
  *a4 = v7;
  return Column.subscript.getter(a1, a2, v7 + 16);
}

uint64_t sub_215075204(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[40];

  sub_21504C608(a3, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  type metadata accessor for ColumnSlice(0, *(_QWORD *)(a4 + 16), v7, v8);
  swift_dynamicCast();
  v10 = v13;
  v11 = v14;
  v12 = v15;
  return Column.subscript.setter(&v10, a1, a2, a4);
}

double sub_2150752AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  char v6;
  uint64_t v10;

  v6 = a3;
  a5[3] = type metadata accessor for DiscontiguousColumnSlice(0, *(_QWORD *)(a4 + 16), a3, a4);
  a5[4] = (uint64_t)&off_24D2A6678;
  v10 = swift_allocObject();
  *a5 = v10;
  return sub_21507300C(a1, a2, v6, a4, v10 + 16);
}

uint64_t sub_215075354(_QWORD *a1, uint64_t a2)
{
  return sub_215074564(a1, a2);
}

uint64_t sub_215075378()
{
  uint64_t v0;

  v0 = sub_215075E3C();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_2150753AC()
{
  return 0;
}

uint64_t sub_2150753BC(uint64_t a1)
{
  BOOL v1;
  uint64_t result;

  v1 = __OFADD__(a1, 1);
  result = a1 + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t sub_2150753CC(uint64_t a1)
{
  BOOL v1;
  uint64_t result;

  v1 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t sub_2150753DC(uint64_t a1)
{
  return nullsub_5(*(_QWORD *)(a1 + 16));
}

uint64_t Column<A>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v17 = *(_QWORD *)(a2 + 16);
  v18 = a3;
  v6 = type metadata accessor for Column.CodingKeys(255, v17, a3, a4);
  MEMORY[0x2199DC4C4](&unk_215136E78, v6);
  v7 = sub_215130388();
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - v8;
  v19 = *v4;
  v16 = v4[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_215130640();
  LOBYTE(v24) = 0;
  v10 = v21;
  sub_215130370();
  if (v10)
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v7);
  v14 = v20;
  v24 = v16;
  v23 = 1;
  v15 = type metadata accessor for PackedOptionalsArray(0, v17, v11, v12);
  v22 = v18;
  MEMORY[0x2199DC4C4](&unk_21513A674, v15, &v22);
  sub_21513037C();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v9, v7);
}

uint64_t sub_215075598(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Column<A>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t Column<A>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v24 = a5;
  v25 = a3;
  v8 = type metadata accessor for Column.CodingKeys(255, a2, a3, a4);
  MEMORY[0x2199DC4C4](&unk_215136E78, v8);
  v26 = sub_215130364();
  v9 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v11 = (char *)&v23 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_215130628();
  if (v5)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v12 = v9;
  v14 = v24;
  v13 = v25;
  LOBYTE(v29) = 0;
  v15 = sub_21513034C();
  v17 = v16;
  v23 = v15;
  v20 = type metadata accessor for PackedOptionalsArray(0, a2, v18, v19);
  v28 = 1;
  v27 = v13;
  swift_bridgeObjectRetain();
  MEMORY[0x2199DC4C4](&unk_21513A640, v20, &v27);
  sub_215130358();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v26);
  v21 = v29;
  *v14 = v23;
  v14[1] = v17;
  v14[2] = v21;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2150757B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return Column<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4, a5);
}

unint64_t sub_2150757D4(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int64_t v8;
  char v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (result != a2)
  {
    v4 = result;
    v6 = *(_QWORD *)v2;
    v5 = *(_QWORD *)(v2 + 8);
    v7 = *(unsigned __int8 *)(v2 + 16);
    if (*(_BYTE *)(v2 + 16) && (v7 != 1 || !*(_QWORD *)(v6 + 16)))
      goto LABEL_11;
    result = sub_21508C520(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
    if ((v9 & 1) != 0)
      goto LABEL_46;
    if (v8 <= v4)
      return sub_21502C94C(v4, a2);
    v10 = v6;
    if (v7)
    {
      if (!*(_QWORD *)(v6 + 16))
        goto LABEL_38;
      v10 = *(_QWORD *)(v6 + 32);
    }
    if (v10 > a2)
    {
LABEL_11:
      result = 0;
      v11 = 0;
LABEL_12:
      v12 = v4;
      v13 = a2;
      return sub_215075CDC(result, v11, v12, v13);
    }
    result = sub_215075960(v4, a2, v6, v5, v7);
    if (result == v11)
    {
      v11 = result;
      goto LABEL_12;
    }
    if (v7)
    {
      if ((result & 0x8000000000000000) != 0)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      v14 = *(_QWORD *)(v6 + 16);
      if (result >= v14)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      if (*(_QWORD *)(v6 + 32 + 16 * result) >= v4)
        v12 = v4;
      else
        v12 = *(_QWORD *)(v6 + 32 + 16 * result);
      v15 = v11 - 1;
      if (__OFSUB__(v11, 1))
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      if ((v15 & 0x8000000000000000) != 0)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      if (v15 >= v14)
      {
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v5 = *(_QWORD *)(v6 + 32 + 16 * v15 + 8);
    }
    else
    {
      if (result)
      {
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        return result;
      }
      if (__OFSUB__(v11, 1))
        goto LABEL_39;
      if (v6 >= v4)
        v12 = v4;
      else
        v12 = v6;
      if (v11 != 1)
        goto LABEL_45;
    }
    if (v5 <= a2)
      v13 = a2;
    else
      v13 = v5;
    if (v13 >= v12)
      return sub_215075CDC(result, v11, v12, v13);
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_215075960(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[6];
  char v19;

  v18[0] = result;
  v18[1] = a2;
  if (result == a2)
    goto LABEL_19;
  v9 = result;
  if (a5 && (a5 != 1 || !*(_QWORD *)(a3 + 16)))
    goto LABEL_25;
  result = sub_21508C520(a3, a4, a5);
  if ((v11 & 1) == 0)
  {
    if (v10 < v9)
    {
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v12 = a3;
    if (a5)
    {
      if (!*(_QWORD *)(a3 + 16))
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      v12 = *(_QWORD *)(a3 + 32);
    }
    if (v12 > a2)
      goto LABEL_21;
    MEMORY[0x24BDAC7A8](result);
    v17 = v18;
    sub_2150437A8(a3, a4, a5);
    v13 = sub_2150F776C((uint64_t (*)(__int128 *))sub_21507655C, (uint64_t)&v16, a3, a4, a5);
    result = sub_21501EF2C(a3, a4, a5);
    if (a5)
    {
      if (*(_QWORD *)(a3 + 16) < v13)
      {
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      if ((v13 & 0x8000000000000000) == 0)
        goto LABEL_14;
    }
    else
    {
      if (v13 > 1)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if ((v13 & 0x8000000000000000) == 0)
      {
LABEL_14:
        MEMORY[0x24BDAC7A8](result);
        v17 = v18;
        v18[2] = v13;
        v18[3] = v14;
        v18[4] = a3;
        v18[5] = a4;
        v19 = a5;
        sub_2150437A8(a3, a4, a5);
        v15 = sub_2150F7910((uint64_t (*)(__int128 *))sub_215076574);
        result = sub_21501EF2C(a3, a4, a5);
        if (v15 >= v13)
          return v13;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_215075B4C(unint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char **v6;
  char **v7;
  unint64_t result;
  uint64_t v13;
  char *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  char *v19;
  uint64_t v20;

  v7 = v6;
  if (*((_BYTE *)v6 + 16))
  {
    if (*((_BYTE *)v6 + 16) == 1)
    {
      v19 = *v6;
      result = sub_21502D7B8(a1, a2, a3, a4, a5, a6);
      *v6 = v19;
      goto LABEL_8;
    }
LABEL_7:
    result = (unint64_t)sub_215070FD4(a3, a4, a5, a6);
    *v6 = (char *)result;
    goto LABEL_8;
  }
  if (a1 != a2)
    goto LABEL_7;
  v18 = *(_OWORD *)v6;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D208);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_215135F80;
    *(_OWORD *)(v13 + 32) = v18;
    v20 = v13;
    result = sub_215054B2C(a3, a4, a5, a6);
    *v6 = (char *)v20;
  }
  else
  {
    v14 = (char *)sub_215070FD4(a3, a4, a5, a6);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (unint64_t)sub_21502DABC(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      v14 = (char *)result;
    }
    v15 = v18;
    v17 = *((_QWORD *)v14 + 2);
    v16 = *((_QWORD *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      result = (unint64_t)sub_21502DABC((char *)(v16 > 1), v17 + 1, 1, v14);
      v15 = v18;
      v14 = (char *)result;
    }
    *((_QWORD *)v14 + 2) = v17 + 1;
    *(_OWORD *)&v14[16 * v17 + 32] = v15;
    *v7 = v14;
  }
LABEL_8:
  v7[1] = 0;
  *((_BYTE *)v7 + 16) = 1;
  return result;
}

unint64_t sub_215075CDC(unint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  char **v4;
  char **v5;
  unint64_t result;
  uint64_t v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  char *v15;
  uint64_t v16;

  v5 = v4;
  if (*((_BYTE *)v4 + 16))
  {
    if (*((_BYTE *)v4 + 16) == 1)
    {
      v15 = *v4;
      result = sub_21502D6A0(a1, a2, a3, a4);
      *v4 = v15;
      goto LABEL_8;
    }
LABEL_7:
    result = (unint64_t)sub_215048B84(a3, a4);
    *v4 = (char *)result;
    goto LABEL_8;
  }
  if (a1 != a2)
    goto LABEL_7;
  v14 = *(_OWORD *)v4;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D208);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_215135F80;
    *(_OWORD *)(v9 + 32) = v14;
    v16 = v9;
    result = sub_215054A90(a3, a4);
    *v4 = (char *)v16;
  }
  else
  {
    v10 = (char *)sub_215048B84(a3, a4);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (unint64_t)sub_21502DABC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v10 = (char *)result;
    }
    v11 = v14;
    v13 = *((_QWORD *)v10 + 2);
    v12 = *((_QWORD *)v10 + 3);
    if (v13 >= v12 >> 1)
    {
      result = (unint64_t)sub_21502DABC((char *)(v12 > 1), v13 + 1, 1, v10);
      v11 = v14;
      v10 = (char *)result;
    }
    *((_QWORD *)v10 + 2) = v13 + 1;
    *(_OWORD *)&v10[16 * v13 + 32] = v11;
    *v5 = v10;
  }
LABEL_8:
  v5[1] = 0;
  *((_BYTE *)v5 + 16) = 1;
  return result;
}

uint64_t sub_215075E3C()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

_QWORD *sub_215075E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for PackedOptionalsArray(0, *(_QWORD *)(a3 + 16), a3, a4);
  return sub_215117280(a1, a2, v6);
}

uint64_t sub_215075E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  Swift::Int v10;
  uint64_t v11;

  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, a3);
  sub_21512FC98();
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_OWORD *)a1;
  v8 = v5;
  v9 = *(_OWORD *)(a1 + 24);
  return Column.subscript.setter(&v7, v10, v11, a3);
}

uint64_t type metadata accessor for Column.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Column.CodingKeys);
}

uint64_t sub_215075F38(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_215075F64(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_215075F90()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_215075FA0()
{
  return sub_215076058(&qword_254DA7F48, MEMORY[0x24BEE1BA8]);
}

void sub_215075FC4()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_215075FD4()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_215075FE4()
{
  return MEMORY[0x24BEE1780];
}

uint64_t sub_215075FF0()
{
  return sub_215076058(&qword_254DA7F50, MEMORY[0x24BEE1BD8]);
}

void sub_215076014()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_215076024()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_215076034()
{
  return sub_215076058(qword_254DA7F58, MEMORY[0x24BEE1BD0]);
}

uint64_t sub_215076058(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254DA7F20);
    v6 = sub_21504386C();
    v7[0] = MEMORY[0x24BEE17A8];
    v7[1] = v6;
    result = MEMORY[0x2199DC4C4](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_2150760C4()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_2150760D4()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_2150760E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x2199DC4C4](&protocol conformance descriptor for <A> Column<A>, a1, &v4);
}

_QWORD *sub_215076120(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a3;
  v6 = type metadata accessor for Column(0, *(uint64_t *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  return sub_215075E44(a1, v5, v6, v7);
}

uint64_t sub_21507616C()
{
  return 8;
}

_QWORD *sub_215076178(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_21507618C()
{
  return 8;
}

uint64_t sub_2150761A0()
{
  return 24;
}

__n128 sub_2150761AC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_2150761C4()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *sub_2150761EC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_215076228(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21507628C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Column(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Column);
}

uint64_t sub_2150762DC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for Order(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_215076374(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2150763C0 + 4 * byte_2151369B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2150763F4 + 4 * byte_2151369B0[v4]))();
}

uint64_t sub_2150763F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2150763FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x215076404);
  return result;
}

uint64_t sub_215076410(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x215076418);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21507641C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_215076424(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_215076430(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void sub_21507643C()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_21507644C()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_21507645C()
{
  JUMPOUT(0x2199DC4C4);
}

unint64_t sub_21507646C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254DA7FE0;
  if (!qword_254DA7FE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254DA7CB8);
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_254DA7FE0);
  }
  return result;
}

uint64_t sub_2150764B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  sub_21501EF2C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t sub_2150764F0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21507651C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_253F0D058);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_21507655C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(a1 + 8) >= **(_QWORD **)(v1 + 16);
}

BOOL sub_215076574(_QWORD *a1)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) < *a1;
}

uint64_t ColumnID.name.getter()
{
  uint64_t v0;

  v0 = sub_215075E3C();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t ColumnID.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t ColumnID.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ColumnID.name.modify())(_QWORD)
{
  return nullsub_5;
}

uint64_t ColumnID.description.getter()
{
  sub_215130178();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  sub_215130664();
  sub_21512FB90();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  return 0x44496E6D756C6F43;
}

uint64_t type metadata accessor for ColumnID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ColumnID);
}

Swift::Bool __swiftcall ColumnSlice.isNil(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = *(_QWORD *)(v1 + 16);
  v6 = type metadata accessor for Column(255, v5, v2, v3);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v6);
  sub_215130544();
  sub_215130508();
  swift_bridgeObjectRelease();
  LOBYTE(at) = sub_215115068(at, v8, v5);
  swift_release();
  return at & 1;
}

uint64_t ColumnSlice.name.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  swift_retain();
  v4 = type metadata accessor for Column(255, *(_QWORD *)(a1 + 16), v2, v3);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v4);
  sub_215130544();
  sub_215130508();
  swift_release();
  swift_bridgeObjectRelease();
  v5 = sub_215075E3C();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  return v5;
}

__n128 ColumnSlice.init(base:bounds:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;
  __n128 v8;

  v4 = type metadata accessor for Column(0, a2, a1, a2);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v4);
  sub_2151304FC();
  result = v8;
  *(_OWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(__n128 *)(a3 + 24) = v8;
  return result;
}

uint64_t ColumnSlice.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  swift_retain();
  v5 = type metadata accessor for Column(255, *(_QWORD *)(a2 + 16), v3, v4);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v5);
  sub_215130544();
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v5);
  sub_21513055C();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t ColumnSlice.slice.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

__n128 ColumnSlice.slice.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v5 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v1 = v5;
  *(_QWORD *)(v1 + 16) = v3;
  result = *(__n128 *)((char *)a1 + 24);
  *(__n128 *)(v1 + 24) = result;
  return result;
}

uint64_t (*ColumnSlice.slice.modify())(_QWORD)
{
  return nullsub_5;
}

uint64_t sub_215076A7C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = type metadata accessor for ColumnSlice(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  result = ColumnSlice.name.getter(v5);
  *a4 = result;
  a4[1] = v7;
  return result;
}

uint64_t sub_215076AD4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for ColumnSlice(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  swift_bridgeObjectRetain();
  return ColumnSlice.name.setter(v4, v5, v6, v7);
}

uint64_t ColumnSlice.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = v4;
  v8 = *((_QWORD *)v4 + 2);
  v9 = *((_QWORD *)v4 + 3);
  v10 = *((_QWORD *)v5 + 4);
  v32 = *v5;
  v33 = v8;
  *(_QWORD *)&v34 = v9;
  *((_QWORD *)&v34 + 1) = v10;
  v11 = type metadata accessor for Column(255, *(_QWORD *)(a3 + 16), a3, a4);
  swift_bridgeObjectRetain();
  swift_retain();
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v11);
  v12 = sub_215130544();
  sub_215130508();
  swift_release();
  swift_bridgeObjectRelease();
  Column.name.setter(a1, a2);
  v29 = v35;
  v30 = v36;
  v31 = v37;
  v14 = *((_QWORD *)v5 + 2);
  v13 = *((_QWORD *)v5 + 3);
  v15 = *((_QWORD *)v5 + 4);
  v32 = *v5;
  v33 = v14;
  *(_QWORD *)&v34 = v13;
  *((_QWORD *)&v34 + 1) = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2151304F0();
  swift_release();
  swift_bridgeObjectRelease();
  v16 = v28;
  v18 = *((_QWORD *)v5 + 2);
  v17 = *((_QWORD *)v5 + 3);
  v19 = *((_QWORD *)v5 + 4);
  v24 = *v5;
  v25 = v18;
  v26 = v17;
  v27 = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  MEMORY[0x2199DC08C](&v23, v12);
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v23 < v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v24 = v16;
    *((_QWORD *)&v24 + 1) = v23;
    sub_2151304FC();
    v22 = v32;
    v21 = v33;
    swift_bridgeObjectRelease();
    swift_release();
    *v5 = v22;
    *((_QWORD *)v5 + 2) = v21;
    *(__int128 *)((char *)v5 + 24) = v34;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*ColumnSlice.name.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v2;
  uint64_t v4;

  a1[2] = a2;
  a1[3] = v2;
  *a1 = ColumnSlice.name.getter(a2);
  a1[1] = v4;
  return sub_215076D54;
}

uint64_t sub_215076D54(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  if ((a2 & 1) == 0)
    return ColumnSlice.name.setter(*a1, v4, v6, a4);
  swift_bridgeObjectRetain();
  ColumnSlice.name.setter(v5, v4, v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t ColumnSlice.wrappedElementType.getter(uint64_t a1)
{
  return nullsub_5(*(_QWORD *)(a1 + 16));
}

uint64_t ColumnSlice.prototype.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = ColumnSlice.name.getter(a1);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = nullsub_5(v4);
  v8 = v7;
  result = type metadata accessor for ColumnPrototype(0, v5, v9, v10);
  a2[3] = result;
  a2[4] = (uint64_t)&off_24D2A3598;
  *a2 = v6;
  a2[1] = v8;
  return result;
}

__n128 ColumnSlice.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t ColumnSlice.init(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for Column(0, a1, a2, a3);
  swift_bridgeObjectRetain();
  swift_retain();
  result = Column.count.getter(v6);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    ColumnSlice.init(base:bounds:)(result, a1, a4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ColumnSlice.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v7 = v6;
  v13 = ColumnSlice.name.getter(a3);
  v15 = v14;
  v17 = *((_QWORD *)v5 + 2);
  v16 = *((_QWORD *)v5 + 3);
  v18 = *((_QWORD *)v5 + 4);
  v36 = *v5;
  v37 = v17;
  v38 = v16;
  v39 = v18;
  v32 = *(_QWORD *)(a3 + 16);
  v33 = a4;
  v34 = a1;
  v35 = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  v21 = type metadata accessor for Column(255, v32, v19, v20);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v21);
  v22 = sub_215130544();
  v23 = (char *)sub_215130064();
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7840);
  v25 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE4238], v22);
  v26 = sub_2150ED6A0((void (*)(char *, char *))sub_215079C80, (uint64_t)&v31, v22, v23, v24, v25, MEMORY[0x24BEE3F20], (uint64_t)&v40);
  if (v7)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v28 = v26;
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v36 = v28;
    v29 = sub_21512FD40();
    v30 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12C8], v29);
    return Column.init<A>(name:contents:)(v13, v15, (uint64_t)&v36, a4, v29, v30, a5);
  }
}

uint64_t sub_2150770B4(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t result;

  result = a2();
  if (v6)
    *a6 = v6;
  return result;
}

void ColumnSlice.filter(_:)(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  int64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  _QWORD v51[2];
  __int128 v52;
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;

  v39 = a1;
  v40 = a2;
  v34 = *(_QWORD *)(a3 + 16);
  v35 = a4;
  v7 = sub_215130064();
  v63 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v32 - v8;
  v43 = v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = sub_215130064();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v32 - v13);
  v16 = *v4;
  v15 = v4[1];
  v17 = v4[3];
  v37 = v4[2];
  v38 = v15;
  v36 = v17;
  v18 = v4[4];
  v60 = 0;
  v61 = 0;
  v62 = 2;
  *(_QWORD *)&v53[0] = v16;
  *((_QWORD *)&v53[0] + 1) = v15;
  *(_QWORD *)&v53[1] = v37;
  *((_QWORD *)&v53[1] + 1) = v17;
  v54 = v18;
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a3);
  sub_21512FE30();
  v52 = v44;
  v32 = v18;
  v33 = v16;
  *(_QWORD *)&v47 = v16;
  *((_QWORD *)&v47 + 1) = v38;
  *(_QWORD *)&v48 = v37;
  *((_QWORD *)&v48 + 1) = v36;
  v49 = v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7F20);
  v20 = sub_21504386C();
  v51[0] = MEMORY[0x24BEE17A8];
  v51[1] = v20;
  v21 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE1BB8], v19, v51);
  v22 = a3;
  v23 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a3);
  sub_215130490();
  v47 = v53[0];
  v48 = v53[1];
  v49 = v54;
  v50 = v55;
  v41 = v22;
  v42 = v19;
  *(_QWORD *)&v44 = v19;
  *((_QWORD *)&v44 + 1) = v22;
  v45 = v21;
  v46 = v23;
  v24 = v23;
  sub_2151301A8();
  sub_215130184();
  while (1)
  {
    *(_QWORD *)&v53[0] = v42;
    *((_QWORD *)&v53[0] + 1) = v41;
    *(_QWORD *)&v53[1] = v21;
    *((_QWORD *)&v53[1] + 1) = v24;
    sub_21513019C();
    sub_215130190();
    if ((*(unsigned int (**)(int64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v14, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v28 = v34;
      v56 = v33;
      *(_QWORD *)&v57 = v38;
      *((_QWORD *)&v57 + 1) = v37;
      v58 = v36;
      v59 = v32;
      v31 = type metadata accessor for Column(255, v34, v29, v30);
      MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v31);
      sub_215130544();
      sub_215130508();
      v56 = *(_QWORD *)&v53[0];
      v57 = *(_OWORD *)((char *)v53 + 8);
      sub_2150C31A8(&v56, v60, v61, v62, v28, v35);
      return;
    }
    v25 = *v14;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v9, (char *)v14 + *(int *)(TupleTypeMetadata2 + 48), v43);
    v26 = v39(v9);
    if (v5)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v43);
      swift_release();
      swift_bridgeObjectRelease();
      sub_21501EF2C(v60, v61, v62);
      return;
    }
    if ((v26 & 1) == 0)
      goto LABEL_2;
    v27 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v27 < v25)
      goto LABEL_12;
    sub_2150757D4(v25, v27);
LABEL_2:
    (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v43);
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

uint64_t ColumnSlice.eraseToAnyColumn()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v9 = *v2;
  v5 = *((_QWORD *)v2 + 2);
  v4 = *((_QWORD *)v2 + 3);
  v6 = *((_QWORD *)v2 + 4);
  a2[3] = a1;
  a2[4] = (uint64_t)&off_24D2A4A38;
  v7 = swift_allocObject();
  *a2 = v7;
  *(_OWORD *)(v7 + 16) = v9;
  *(_QWORD *)(v7 + 32) = v5;
  *(_QWORD *)(v7 + 40) = v4;
  *(_QWORD *)(v7 + 48) = v6;
  swift_bridgeObjectRetain();
  return swift_retain();
}

void (*sub_215077510(uint64_t **a1, uint64_t a2))(_QWORD *)
{
  uint64_t *v4;

  v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t)ColumnSlice.name.modify(v4, a2);
  return sub_215072674;
}

Swift::Int sub_21507755C@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result;

  result = ColumnSlice.index(before:)(*a1);
  *a2 = result;
  return result;
}

Swift::Int __swiftcall ColumnSlice.index(before:)(Swift::Int before)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v7;

  v2 = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  v5 = type metadata accessor for Column(255, *(_QWORD *)(v2 + 16), v3, v4);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v5);
  sub_215130544();
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v5);
  sub_215130550();
  swift_release();
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int sub_21507764C(Swift::Int *a1)
{
  Swift::Int result;

  result = ColumnSlice.index(before:)(*a1);
  *a1 = result;
  return result;
}

uint64_t sub_215077674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a3);
  return sub_21512FE24();
}

uint64_t sub_2150776D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a4);
  return sub_21512FE00();
}

uint64_t sub_21507773C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a3);
  return sub_21512FE3C();
}

uint64_t sub_215077790@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = ColumnSlice.startIndex.getter(a1);
  *a2 = result;
  return result;
}

uint64_t ColumnSlice.startIndex.getter(uint64_t a1)
{
  return sub_2150777F0(a1, (void (*)(uint64_t *__return_ptr, uint64_t))MEMORY[0x24BEE41A0]);
}

uint64_t sub_2150777C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = ColumnSlice.endIndex.getter(a1);
  *a2 = result;
  return result;
}

uint64_t ColumnSlice.endIndex.getter(uint64_t a1)
{
  return sub_2150777F0(a1, (void (*)(uint64_t *__return_ptr, uint64_t))MEMORY[0x24BEE41C8]);
}

uint64_t sub_2150777F0(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *((_QWORD *)v2 + 2);
  v5 = *((_QWORD *)v2 + 3);
  v7 = *((_QWORD *)v2 + 4);
  v14 = *v2;
  v15 = v6;
  v16 = v5;
  v17 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = type metadata accessor for Column(255, *(_QWORD *)(a1 + 16), v8, v9);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v10);
  v11 = sub_215130544();
  a2(&v13, v11);
  swift_release();
  swift_bridgeObjectRelease();
  return v13;
}

void (*sub_215077894(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_2150778F0(v6, *a2, a3);
  return sub_215072674;
}

void (*sub_2150778F0(uint64_t *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_215130064();
  *a1 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  a1[1] = v7;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v7 + 64));
  ColumnSlice.subscript.getter(a2, a3);
  return sub_21506DF04;
}

double sub_215077968@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ColumnSlice.subscript.getter(a1, a2);
}

double ColumnSlice.subscript.getter@<D0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  swift_bridgeObjectRetain();
  swift_retain();
  v6 = type metadata accessor for Column(255, *(_QWORD *)(a1 + 16), v4, v5);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v6);
  sub_215130544();
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v6);
  sub_215130574();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  result = *(double *)&v10;
  *(_OWORD *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_215077A64(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a1);
  return sub_21512FE30();
}

uint64_t ColumnSlice.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Column(255, *(_QWORD *)(a1 + 16), a3, a4);
  swift_bridgeObjectRetain();
  swift_retain();
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v4);
  v5 = sub_215130544();
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE4238], v5);
  v6 = sub_21512FED8();
  swift_release();
  swift_bridgeObjectRelease();
  return v6;
}

Swift::Int sub_215077B70@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result;

  result = ColumnSlice.index(after:)(*a1);
  *a2 = result;
  return result;
}

Swift::Int __swiftcall ColumnSlice.index(after:)(Swift::Int after)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v7;

  v2 = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  v5 = type metadata accessor for Column(255, *(_QWORD *)(v2 + 16), v3, v4);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v5);
  sub_215130544();
  sub_215130514();
  swift_release();
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int sub_215077C48(Swift::Int *a1)
{
  Swift::Int result;

  result = ColumnSlice.index(after:)(*a1);
  *a1 = result;
  return result;
}

__n128 sub_215077C70@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;

  v4 = *((_QWORD *)v2 + 2);
  v7 = *(__n128 *)((char *)v2 + 24);
  v8 = *v2;
  v5 = ColumnSlice.startIndex.getter(a1);
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v4;
  result = v7;
  *(__n128 *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

uint64_t sub_215077CC8(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a1);
  return sub_21512FEC0();
}

uint64_t sub_215077CFC(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a1);
  v1 = sub_215079C7C();
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t ColumnSlice.missingCount.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  __int128 v6;
  __int128 v7;

  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a1);
  v1 = MEMORY[0x24BEE17A8];
  sub_21512FE30();
  v6 = v7;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7F20);
  v5[0] = v1;
  v5[1] = sub_21504386C();
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE1BB8], v2, v5);
  sub_21512FC68();
  v3 = MEMORY[0x2199DB870]();
  swift_bridgeObjectRelease();
  return v3;
}

BOOL sub_215077E2C(Swift::Int *a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Bool v8;

  v4 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = type metadata accessor for Column(255, a3, v5, v6);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v7);
  sub_215130544();
  sub_215130508();
  swift_release();
  swift_bridgeObjectRelease();
  v8 = Column.isNil(at:)(v4);
  swift_release();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_215077EFC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = type metadata accessor for ColumnSlice(0, *(uint64_t *)((char *)a2 + a3 - 8), a3, a4);
  return ColumnSlice.subscript.getter(v4, v5);
}

uint64_t ColumnSlice.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_215079CF8(a1, a2, a3);
  v4 = sub_215130064();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void (*ColumnSlice.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = sub_215130064();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  ColumnSlice.subscript.getter(a2, a3);
  return sub_215078054;
}

void sub_215078054(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  v7 = (*a1)[1];
  v8 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    sub_215079CF8((uint64_t)v3, v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
  }
  else
  {
    sub_215079CF8((*a1)[6], v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v9(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

double sub_215078108@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  uint64_t v9;
  double v10[3];

  v5 = type metadata accessor for ColumnSlice(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  ColumnSlice.subscript.getter(v5, (uint64_t)&v8);
  v6 = v9;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v6;
  result = v10[0];
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v10;
  return result;
}

uint64_t sub_215078194(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(uint64_t *)((char *)a3 + a4 - 8);
  v5 = *a3;
  v6 = a3[1];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v12 = *(_OWORD *)a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v10 = type metadata accessor for ColumnSlice(0, v4, (uint64_t)a3, a4);
  swift_bridgeObjectRetain();
  swift_retain();
  return ColumnSlice.subscript.setter(&v12, v5, v6, v10);
}

uint64_t ColumnSlice.subscript.setter(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v10 = *((_QWORD *)a1 + 4);
  v18 = *a1;
  v19 = v9;
  v20 = v8;
  v21 = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  v17[0] = a2;
  v17[1] = a3;
  v13 = type metadata accessor for Column(255, *(_QWORD *)(a4 + 16), v11, v12);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v13);
  v14 = sub_215130544();
  v15 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v13);
  sub_215079DD8((uint64_t)&v18, (uint64_t)v17, v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

void (*ColumnSlice.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(__int128 **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = malloc(0x48uLL);
  *a1 = v9;
  v9[7] = a4;
  v9[8] = v4;
  v9[5] = a2;
  v9[6] = a3;
  ColumnSlice.subscript.getter(a4, (uint64_t)v9);
  return sub_21507836C;
}

void sub_21507836C(__int128 **a1, char a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 7);
  v5 = *((_QWORD *)*a1 + 5);
  v4 = *((_QWORD *)*a1 + 6);
  if ((a2 & 1) != 0)
  {
    v7 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    v8 = *((_QWORD *)v2 + 4);
    v9 = *v2;
    v10 = v7;
    v11 = v6;
    v12 = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    ColumnSlice.subscript.setter(&v9, v5, v4, v3);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    ColumnSlice.subscript.setter(*a1, v5, v4, v3);
  }
  free(v2);
}

uint64_t sub_215078410(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  sub_215079CF8(a1, *a2, a3);
  v4 = sub_215130064();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void (*sub_21507845C(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = ColumnSlice.subscript.modify(v6, *a2, a3);
  return sub_215072674;
}

uint64_t sub_2150784B8(__int128 *a1, uint64_t *a2, uint64_t a3)
{
  return ColumnSlice.subscript.setter(a1, *a2, a2[1], a3);
}

void (*sub_2150784C8(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = ColumnSlice.subscript.modify(v6, *a2, a2[1], a3);
  return sub_215072674;
}

uint64_t sub_215078524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a3);
  return sub_21512FA40();
}

uint64_t static ColumnSlice<A>.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  int v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  char *v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(_QWORD, _QWORD);
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;

  v84 = a4;
  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v83 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v85 = (char *)&v72 - v10;
  v11 = sub_215130064();
  v12 = *(_QWORD **)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v86 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v87 = (char *)&v72 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v90 = (char *)&v72 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v94 = (char *)&v72 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v95 = (char *)&v72 - v21;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v23 = sub_215130064();
  MEMORY[0x24BDAC7A8](v23);
  v91 = (char *)&v72 - v24;
  v26 = *a1;
  v25 = a1[1];
  v27 = (void (*)(_QWORD, _QWORD))a1[2];
  v28 = a1[3];
  v29 = a1[4];
  v30 = *a2;
  v89 = a2[1];
  v31 = a2[3];
  v93 = (void (*)(char *, uint64_t))a2[2];
  v32 = a2[4];
  v80 = a3;
  v81 = v32;
  v74 = v26;
  v113 = v26;
  v114 = v25;
  v76 = v25;
  v77 = v29;
  v78 = v28;
  v79 = v27;
  v115 = (void (*)(char *, uint64_t))v27;
  v116 = v28;
  v117 = v29;
  v35 = type metadata accessor for ColumnSlice(0, a3, v33, v34);
  v36 = ColumnSlice.name.getter(v35);
  v75 = v30;
  v113 = v30;
  v37 = v89;
  v114 = v89;
  v115 = v93;
  v73 = v31;
  v116 = v31;
  v38 = v81;
  v117 = v81;
  v92 = v35;
  v39 = v35;
  v41 = v40;
  if (v36 == ColumnSlice.name.getter(v39) && v41 == v42)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v43 = sub_21513043C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v43 & 1) == 0)
      return result;
  }
  *(_QWORD *)&v96 = v74;
  *((_QWORD *)&v96 + 1) = v76;
  v97 = (uint64_t)v79;
  *(_QWORD *)&v98 = v78;
  *((_QWORD *)&v98 + 1) = v77;
  v102 = v75;
  v103 = v37;
  v45 = v92;
  v104 = (void (*)(_QWORD, _QWORD))v93;
  v105 = v73;
  v106 = v38;
  v46 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, v92);
  sub_215130490();
  v96 = v107;
  v97 = v108;
  v98 = v109;
  v99 = v110;
  v100 = v111;
  v101 = v112;
  v102 = v45;
  v103 = v45;
  v104 = (void (*)(_QWORD, _QWORD))v46;
  v105 = v46;
  v89 = v46;
  sub_2151301A8();
  sub_215130184();
  v47 = v80;
  v48 = v91;
  v82 = v12;
  v88 = TupleTypeMetadata2;
  while (1)
  {
    *(_QWORD *)&v107 = v92;
    *((_QWORD *)&v107 + 1) = v92;
    v108 = v89;
    *(_QWORD *)&v109 = v89;
    sub_21513019C();
    sub_215130190();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v48, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
    v49 = &v48[*(int *)(TupleTypeMetadata2 + 48)];
    v50 = (void (*)(char *, char *, uint64_t))v12[4];
    v51 = v47;
    v52 = v95;
    v50(v95, v48, v11);
    v53 = v94;
    v50(v94, v49, v11);
    v54 = v7;
    v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
    v56 = v52;
    v47 = v51;
    LODWORD(v49) = v55(v56, 1, v51);
    v57 = (void (*)(char *, char *, uint64_t))v12[2];
    v58 = v90;
    v57(v90, v53, v11);
    if ((_DWORD)v49 == 1)
    {
      v59 = v55(v58, 1, v47);
      v60 = (void (*)(char *, uint64_t))v12[1];
      if (v59 == 1)
      {
        v60(v58, v11);
        v60(v94, v11);
        v7 = v54;
        goto LABEL_7;
      }
    }
    else
    {
      v60 = (void (*)(char *, uint64_t))v12[1];
    }
    v61 = v87;
    v60(v58, v11);
    v57(v61, v95, v11);
    if (v55(v61, 1, v47) == 1)
    {
      v66 = v61;
LABEL_20:
      v60(v94, v11);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v60(v66, v11);
      v60(v95, v11);
      return 0;
    }
    v93 = v60;
    v62 = v61;
    v63 = v47;
    v7 = v54;
    v64 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v65 = v85;
    v64(v85, v62, v63);
    v66 = v86;
    v67 = v94;
    v57(v86, v94, v11);
    if (v55(v66, 1, v63) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v65, v63);
      v60 = v93;
      goto LABEL_20;
    }
    v68 = v83;
    v64(v83, v66, v63);
    v69 = sub_21512FA58();
    v70 = *(void (**)(char *, uint64_t))(v7 + 8);
    v70(v68, v63);
    v47 = v63;
    v70(v65, v63);
    v71 = v67;
    v60 = v93;
    v93(v71, v11);
    if ((v69 & 1) == 0)
      break;
    v12 = v82;
LABEL_7:
    v60(v95, v11);
    TupleTypeMetadata2 = v88;
    v48 = v91;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v60(v95, v11);
  return 0;
}

uint64_t sub_215078BE8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ColumnSlice<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t ColumnSlice<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v21 = a2;
  v25 = *(_QWORD *)(a2 + 16);
  v3 = sub_215130064();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v20 - v5;
  v7 = *v2;
  v8 = v2[1];
  v9 = v2[2];
  v20 = v2[3];
  v10 = v2[4];
  *(_QWORD *)&v29 = v7;
  *((_QWORD *)&v29 + 1) = v8;
  v11 = v7;
  v23 = v8;
  v24 = v7;
  v30 = v9;
  *(_QWORD *)&v31 = v20;
  v22 = v9;
  *((_QWORD *)&v31 + 1) = v10;
  ColumnSlice.name.getter(v21);
  sub_21512FB3C();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v26 = v11;
  *((_QWORD *)&v26 + 1) = v8;
  v27 = v9;
  v12 = v20;
  *(_QWORD *)&v28 = v20;
  *((_QWORD *)&v28 + 1) = v10;
  v15 = type metadata accessor for Column(255, v25, v13, v14);
  swift_bridgeObjectRetain();
  swift_retain();
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v15);
  v16 = sub_215130544();
  sub_2151304F0();
  v17 = v29;
  *(_QWORD *)&v29 = v24;
  *((_QWORD *)&v29 + 1) = v23;
  v30 = v22;
  *(_QWORD *)&v31 = v12;
  *((_QWORD *)&v31 + 1) = v10;
  v32 = v17;
  MEMORY[0x2199DC08C](&v26, v16);
  if (v17 != (_QWORD)v26)
  {
    do
    {
      sub_215130580();
      v26 = v29;
      v27 = v30;
      v28 = v31;
      sub_215130538();
      sub_215130070();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v18 = v32;
      MEMORY[0x2199DC08C](&v26, v16);
    }
    while (v18 != (_QWORD)v26);
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

void ColumnSlice<A>.distinct()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  int64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  _QWORD v55[2];
  __int128 v56;
  _OWORD v57[2];
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  _QWORD v67[4];

  *((_QWORD *)&v49 + 1) = a1;
  v50 = a2;
  v40 = *(_QWORD *)(a1 + 16);
  v41 = a3;
  v4 = sub_215130064();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v47 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v38 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v38 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = sub_215130064();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v38 - v14);
  v17 = *v3;
  v16 = v3[1];
  v18 = v3[3];
  v44 = v3[2];
  v19 = v44;
  v45 = v17;
  v20 = v3[4];
  v42 = v20;
  v43 = v18;
  v67[0] = v50;
  v50 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE4AB0], v4, v67);
  v67[1] = sub_21512F830();
  v64 = 0;
  v65 = 0;
  v66 = 2;
  v60 = v17;
  *(_QWORD *)&v61 = v16;
  *((_QWORD *)&v61 + 1) = v19;
  v21 = v43;
  v62 = v43;
  v63 = v20;
  v22 = *((_QWORD *)&v49 + 1);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, *((_QWORD *)&v49 + 1));
  sub_21512FE30();
  v56 = v51;
  v60 = v45;
  *(_QWORD *)&v61 = v16;
  v39 = v16;
  *((_QWORD *)&v61 + 1) = v44;
  v62 = v21;
  v63 = v42;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7F20);
  v24 = sub_21504386C();
  v55[0] = MEMORY[0x24BEE17A8];
  v55[1] = v24;
  v25 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE1BB8], v23, v55);
  v26 = v22;
  v27 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, v22);
  sub_215130490();
  v51 = v57[0];
  v52 = v57[1];
  v53 = v58;
  v54 = v59;
  v48 = v25;
  *(_QWORD *)&v49 = v23;
  v60 = v23;
  *(_QWORD *)&v61 = v26;
  *((_QWORD *)&v61 + 1) = v25;
  v62 = v27;
  v28 = v27;
  sub_2151301A8();
  sub_215130184();
  while (1)
  {
    while (1)
    {
      v57[0] = v49;
      *(_QWORD *)&v57[1] = v48;
      *((_QWORD *)&v57[1] + 1) = v28;
      sub_21513019C();
      sub_215130190();
      if ((*(unsigned int (**)(int64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8)
                                                                              + 48))(v15, 1, TupleTypeMetadata2) == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = v40;
        v60 = v45;
        *(_QWORD *)&v61 = v39;
        *((_QWORD *)&v61 + 1) = v44;
        v62 = v43;
        v63 = v42;
        v37 = type metadata accessor for Column(255, v40, v35, v36);
        MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v37);
        sub_215130544();
        sub_215130508();
        v60 = *(_QWORD *)&v57[0];
        v61 = *(_OWORD *)((char *)v57 + 8);
        sub_2150C31A8(&v60, v64, v65, v66, v34, v41);
        return;
      }
      v29 = *v15;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, (char *)v15 + *(int *)(TupleTypeMetadata2 + 48), v4);
      swift_bridgeObjectRetain();
      v30 = sub_21512FDD0();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0)
        break;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
    v31 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v31 < v29)
      goto LABEL_10;
    sub_2150757D4(v29, v31);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v47, v11, v4);
    sub_21512FDDC();
    v32 = v46;
    sub_21512FDC4();
    v33 = *(void (**)(char *, uint64_t))(v5 + 8);
    v33(v32, v4);
    v33(v11, v4);
  }
  __break(1u);
LABEL_10:
  __break(1u);
}

uint64_t ColumnSlice<A>.hashValue.getter(uint64_t a1)
{
  __int128 *v1;
  uint64_t v3;
  _BYTE v5[72];
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  v3 = *((_QWORD *)v1 + 2);
  v6 = *v1;
  v7 = v3;
  v8 = *(__int128 *)((char *)v1 + 24);
  sub_2151305A4();
  ColumnSlice<A>.hash(into:)((uint64_t)v5, a1);
  return sub_2151305EC();
}

uint64_t sub_2150792B8(uint64_t a1)
{
  return ColumnSlice<A>.hashValue.getter(a1);
}

uint64_t sub_2150792C0(uint64_t a1, uint64_t a2)
{
  return ColumnSlice<A>.hash(into:)(a1, a2);
}

uint64_t sub_2150792C8(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_2151305A4();
  ColumnSlice<A>.hash(into:)((uint64_t)v4, a2);
  return sub_2151305EC();
}

uint64_t sub_215079318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = sub_215130064();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v18 - v9;
  v11 = *((_QWORD *)v3 + 2);
  v19 = *v3;
  v20 = v11;
  v21 = *(__int128 *)((char *)v3 + 24);
  v18[1] = a1;
  v14 = type metadata accessor for Column(255, v6, v12, v13);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v14);
  sub_215130544();
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v14);
  sub_21513055C();
  v15 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v6) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a3 + 24) = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v10, v6);
  }
  return result;
}

_QWORD *sub_215079464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_215130064();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v26 - v9;
  v11 = *((_QWORD *)v3 + 2);
  v34 = *v3;
  v35 = v11;
  v36 = *(__int128 *)((char *)v3 + 24);
  v14 = type metadata accessor for Column(255, v6, v12, v13);
  v26[2] = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v14);
  v27 = sub_215130544();
  sub_215130508();
  sub_215053AA4(a2, (uint64_t)&v31);
  v26[3] = v14;
  if (v33)
  {
    sub_21504678C(&v31, &v34);
    sub_21504679C((uint64_t)&v34, (uint64_t)&v31);
    swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v10, 0, 1, v6);
    sub_215075E44((uint64_t)v10, a1, v14, v15);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v34);
  }
  else
  {
    sub_21507651C((uint64_t)&v31);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v10, 1, 1, v6);
    sub_215075E44((uint64_t)v10, a1, v14, v16);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v31 = v37;
  v32 = v38;
  v18 = *((_QWORD *)v3 + 1);
  v19 = *((_QWORD *)v3 + 2);
  v20 = *((_QWORD *)v3 + 3);
  v21 = *((_QWORD *)v3 + 4);
  *(_QWORD *)&v34 = *(_QWORD *)v3;
  v17 = v34;
  *((_QWORD *)&v34 + 1) = v18;
  v35 = v19;
  *(_QWORD *)&v36 = v20;
  *((_QWORD *)&v36 + 1) = v21;
  v26[1] = *((_QWORD *)&v37 + 1);
  swift_bridgeObjectRetain();
  swift_retain();
  v22 = v27;
  sub_2151304F0();
  v23 = v28;
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = v18;
  v35 = v19;
  *(_QWORD *)&v36 = v20;
  *((_QWORD *)&v36 + 1) = v21;
  result = MEMORY[0x2199DC08C](&v30, v22);
  if (v30 < v23)
  {
    __break(1u);
  }
  else
  {
    v28 = v23;
    v29 = v30;
    sub_2151304FC();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v25 = v35;
    *v3 = v34;
    *((_QWORD *)v3 + 2) = v25;
    *(__int128 *)((char *)v3 + 24) = v36;
  }
  return result;
}

_QWORD *sub_2150796F0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v10 = v5[4];
  v37 = *v5;
  v38 = v7;
  v39 = v8;
  v40 = v9;
  v41 = v10;
  v32 = *(_QWORD *)(a3 + 16);
  v11 = type metadata accessor for Column(255, v32, a3, a4);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v11);
  v12 = sub_215130544();
  sub_215130508();
  v30 = v42;
  v33 = v44;
  v34 = v43;
  sub_2151304F0();
  v13 = v36[1];
  v38 = v7;
  v39 = v8;
  v40 = v9;
  v41 = v10;
  result = MEMORY[0x2199DC08C](v36, v12);
  if (v36[0] < v13)
  {
    __break(1u);
  }
  else
  {
    v15 = v13 == v36[0];
    if (v13 == v36[0])
      v16 = 0;
    else
      v16 = v13;
    if (v13 == v36[0])
      v17 = 0;
    else
      v17 = v36[0];
    v18 = a1 == (char *)a2;
    if (a1 == (char *)a2)
      v19 = 0;
    else
      v19 = a1;
    if (a1 == (char *)a2)
      v20 = 0;
    else
      v20 = a2;
    v21 = 2 * v18;
    v22 = sub_21502CB8C(v19, v20, 2 * v18, v16, v17, 2 * v15);
    v24 = v23;
    v26 = v25;
    sub_21501EF2C((uint64_t)v19, v20, v21);
    v37 = v30;
    v38 = v34;
    v39 = v33;
    a5[3] = type metadata accessor for DiscontiguousColumnSlice(0, v32, v27, v28);
    a5[4] = (uint64_t)&off_24D2A6678;
    v29 = swift_allocObject();
    *a5 = v29;
    sub_21507300C((uint64_t)v22, v24, v26, v11, v29 + 16);
    sub_21501EF2C((uint64_t)v22, v24, v26);
    swift_release();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2150798D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[40];

  sub_21504C608(a3, (uint64_t)v22);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
  swift_dynamicCast();
  v14 = v18;
  v15 = v19;
  v16 = v20;
  v17 = v21;
  v13[0] = a1;
  v13[1] = a2;
  v9 = type metadata accessor for Column(255, *(_QWORD *)(a4 + 16), v7, v8);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v9);
  v10 = sub_215130544();
  v11 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v9);
  sub_215079DD8((uint64_t)&v14, (uint64_t)v13, v10, v11);
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_2150799C0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v27 = a3;
  v7 = v5[1];
  v9 = v5[2];
  v8 = v5[3];
  v10 = v5[4];
  v32 = *v5;
  v33 = v7;
  v34 = v9;
  v35 = v8;
  v36 = v10;
  v28 = *(_QWORD *)(a4 + 16);
  v11 = type metadata accessor for Column(255, v28, a3, a4);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v11);
  v12 = sub_215130544();
  sub_215130508();
  v24 = v37;
  v29 = v39;
  v30 = v38;
  sub_2151304F0();
  v13 = v31[1];
  v33 = v7;
  v34 = v9;
  v35 = v8;
  v36 = v10;
  result = MEMORY[0x2199DC08C](v31, v12);
  if (v31[0] < v13)
  {
    __break(1u);
  }
  else
  {
    if (v13 == v31[0])
      v15 = 0;
    else
      v15 = v13;
    if (v13 == v31[0])
      v16 = 0;
    else
      v16 = v31[0];
    v17 = sub_21502CB8C(a1, a2, v27, v15, v16, 2 * (v13 == v31[0]));
    v19 = v18;
    v21 = v20;
    v32 = v24;
    v33 = v30;
    v34 = v29;
    a5[3] = type metadata accessor for DiscontiguousColumnSlice(0, v28, v20, v22);
    a5[4] = (uint64_t)&off_24D2A6678;
    v23 = swift_allocObject();
    *a5 = v23;
    sub_21507300C((uint64_t)v17, v19, v21, v11, v23 + 16);
    sub_21501EF2C((uint64_t)v17, v19, v21);
    swift_release();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_215079B70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];

  v5 = *v2;
  v6 = v2[1];
  v8 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v10 = ColumnSlice.name.getter(a1);
  v12 = v11;
  v18[0] = v5;
  v18[1] = v6;
  v18[2] = v8;
  v18[3] = v7;
  v18[4] = v9;
  v13 = *(_QWORD *)(a1 + 16);
  a2[3] = type metadata accessor for Column(0, v13, v14, v15);
  a2[4] = &off_24D2A4440;
  swift_bridgeObjectRetain();
  swift_retain();
  v16 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>, a1);
  return Column.init<A>(name:contents:)(v10, v12, (uint64_t)v18, v13, a1, v16, a2);
}

uint64_t sub_215079C80(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + 32))();
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t sub_215079CB0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

BOOL sub_215079CDC(Swift::Int *a1)
{
  uint64_t v1;

  return sub_215077E2C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_215079CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_215130064();
  MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)v13 - v8, a1);
  v13[1] = a2;
  v11 = type metadata accessor for Column(255, v5, v9, v10);
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v11);
  sub_215130544();
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for Column<A>, v11);
  return sub_215130568();
}

uint64_t sub_215079DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = a4;
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE4220], a3, &v6);
  MEMORY[0x2199DC4C4](MEMORY[0x24BEE4238], a3);
  return sub_2151303AC();
}

uint64_t type metadata accessor for ColumnSlice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ColumnSlice);
}

uint64_t sub_215079E6C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_215079E98(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199DC4C4](&protocol conformance descriptor for ColumnSlice<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_215079EC4()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_215079ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_215079F18(a1, a2, a3, MEMORY[0x24BEE1BA8]);
}

void sub_215079EE0()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_215079EF0()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_215079F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_215079F18(a1, a2, a3, MEMORY[0x24BEE1BD8]);
}

uint64_t sub_215079F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_215079F18(a1, a2, a3, MEMORY[0x24BEE1BD0]);
}

uint64_t sub_215079F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = sub_21504386C();
  v8[0] = MEMORY[0x24BEE17A8];
  v8[1] = v6;
  return MEMORY[0x2199DC4C4](a4, a1, v8);
}

void sub_215079F60()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_215079F70()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_215079F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x2199DC4C4](&protocol conformance descriptor for <A> ColumnSlice<A>, a1, &v4);
}

uint64_t sub_215079FC0()
{
  return 8;
}

_QWORD *sub_215079FCC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_215079FDC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for ColumnSlice(0, *(uint64_t *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  return sub_215079CF8(a1, v5, v6);
}

uint64_t sub_21507A028()
{
  return 8;
}

uint64_t sub_21507A03C()
{
  return 8;
}

uint64_t sub_21507A048()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_21507A070(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_21507A0B4(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21507A128(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyColumn(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyColumn(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_21507A204()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  sub_21501EF2C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t PackedOptionalsBuffer.rawBuffer.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t static PackedOptionalsBuffer.headerSize.getter()
{
  return 64;
}

uint64_t static Alignment.roundToAligment(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (v1 < 0)
      v1 = result + 62;
    v2 = v1 >> 6;
    if ((unint64_t)(v2 - 0x1FFFFFFFFFFFFFFLL) >> 58 == 63)
      return (v2 << 6) + 64;
  }
  __break(1u);
  return result;
}

unint64_t static PackedOptionalsBuffer.nilBitmapSize(capacity:)(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result + 7;
  if (__OFADD__(result, 7))
  {
    __break(1u);
  }
  else
  {
    if (v1 < 0)
      v1 = result + 14;
    v2 = v1 >> 3;
    v4 = v2 - 1;
    v3 = v2 < 1;
    v5 = v2 + 62;
    if (!v3)
      v5 = v4;
    return (v5 & 0xFFFFFFFFFFFFFFC0) + 64;
  }
  return result;
}

unint64_t PackedOptionalsBuffer.nilBitmapSize.getter()
{
  uint64_t **v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;

  if (!*v0)
    goto LABEL_7;
  v1 = **v0;
  v2 = __OFADD__(v1, 7);
  v3 = v1 + 7;
  if (v2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v4 = v3 / 8;
  v6 = v4 - 1;
  v5 = v4 < 1;
  v7 = v4 + 62;
  if (!v5)
    v7 = v6;
  return (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
}

uint64_t PackedOptionalsBuffer.capacity.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)v0)
    return **(_QWORD **)v0;
  __break(1u);
  return result;
}

uint64_t PackedOptionalsBuffer.headerAddress.getter()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (!*v0)
    __break(1u);
  return result;
}

_QWORD *PackedOptionalsBuffer.nilBitmapBuffer.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *result;

  v1 = (_QWORD *)*v0;
  if (*v0)
  {
    if (!__OFADD__(*v1, 7))
      return v1 + 8;
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t PackedOptionalsBuffer.firstElementAddress.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;

  v1 = (_QWORD *)*v0;
  if (!*v0)
    goto LABEL_9;
  v2 = *v1 + 7;
  if (__OFADD__(*v1, 7))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (v2 < 0)
    v2 = *v1 + 14;
  v3 = v2 >> 3;
  v5 = v3 - 1;
  v4 = v3 < 1;
  v6 = v3 + 62;
  if (!v4)
    v6 = v5;
  return (unint64_t)v1 + (v6 & 0xFFFFFFFFFFFFFFC0) + 128;
}

uint64_t PackedOptionalsBuffer.elementsBuffer.getter()
{
  _QWORD **v0;
  uint64_t result;

  if (*v0)
  {
    if (!__OFADD__(**v0, 7))
      return sub_215130088();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PackedOptionalsBuffer.Header.capacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PackedOptionalsBuffer.count.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)v0)
    return *(_QWORD *)(*(_QWORD *)v0 + 8);
  __break(1u);
  return result;
}

uint64_t sub_21507A438(uint64_t *a1)
{
  return PackedOptionalsBuffer.count.setter(*a1);
}

uint64_t PackedOptionalsBuffer.count.setter(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    *(_QWORD *)(*(_QWORD *)v1 + 8) = result;
  else
    __break(1u);
  return result;
}

uint64_t PackedOptionalsBuffer.Header.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PackedOptionalsBuffer.Header.count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

_QWORD *PackedOptionalsBuffer.count.modify(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  result[1] = *v1;
  if (v2)
  {
    *result = *(_QWORD *)(v2 + 8);
    return sub_21507A4B8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_21507A4B8(_QWORD *result)
{
  *(_QWORD *)(result[1] + 8) = *result;
  return result;
}

uint64_t PackedOptionalsBuffer.nilCount.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)v0)
    return *(_QWORD *)(*(_QWORD *)v0 + 16);
  __break(1u);
  return result;
}

uint64_t sub_21507A4D8(uint64_t *a1)
{
  return PackedOptionalsBuffer.nilCount.setter(*a1);
}

uint64_t PackedOptionalsBuffer.nilCount.setter(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    *(_QWORD *)(*(_QWORD *)v1 + 16) = result;
  else
    __break(1u);
  return result;
}

uint64_t PackedOptionalsBuffer.Header.nilCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PackedOptionalsBuffer.Header.nilCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

_QWORD *PackedOptionalsBuffer.nilCount.modify(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  result[1] = *v1;
  if (v2)
  {
    *result = *(_QWORD *)(v2 + 16);
    return sub_21507A558;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_21507A558(_QWORD *result)
{
  *(_QWORD *)(result[1] + 16) = *result;
  return result;
}

uint64_t PackedOptionalsBuffer.init(rawBuffer:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void static PackedOptionalsBuffer.allocate(capacity:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v3 = a1 + 7;
  if (__OFADD__(a1, 7))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = a1 + 14;
  if (v3 >= 0)
    v7 = a1 + 7;
  v8 = v7 >> 3;
  v10 = v8 - 1;
  v9 = v8 < 1;
  v11 = v8 + 62;
  if (!v9)
    v11 = v10;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 72);
  v13 = v12 * a1;
  if ((unsigned __int128)(v12 * (__int128)a1) >> 64 != (v12 * a1) >> 63)
    goto LABEL_13;
  v14 = v11 & 0xFFFFFFFFFFFFFFC0;
  v15 = (v11 & 0xFFFFFFFFFFFFFFC0) + 128;
  v16 = v15 + v13;
  if (__OFADD__(v15, v13))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = swift_slowAlloc();
  v21[0] = a1;
  v20 = type metadata accessor for PackedOptionalsBuffer.Header(0, a2, v18, v19);
  v21[1] = 0;
  v21[2] = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v21, v20);
  if (v3 < -1015)
  {
LABEL_15:
    __break(1u);
    return;
  }
  if (v14 != -64)
    bzero((void *)(v17 + 64), v14 + 64);
  *a3 = v17;
  a3[1] = v17 + v16;
}

uint64_t static Alignment.bufferAlignment.getter()
{
  return 64;
}

uint64_t type metadata accessor for PackedOptionalsBuffer.Header(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PackedOptionalsBuffer.Header);
}

uint64_t PackedOptionalsBuffer.Header.init(capacity:count:nilCount:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void PackedOptionalsBuffer.init(copying:capacity:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;

  v8 = *(_QWORD *)(a3 - 8);
  v9 = (uint64_t *)MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v9;
  if (!*v9)
    goto LABEL_51;
  if (*(_QWORD *)v12 > a2)
  {
    __break(1u);
    goto LABEL_43;
  }
  v13 = a2 + 7;
  if (__OFADD__(a2, 7))
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v13 < 0)
    v13 = a2 + 14;
  v14 = v13 >> 3;
  v16 = v14 - 1;
  v15 = v14 < 1;
  v17 = v14 + 62;
  if (!v15)
    v17 = v16;
  v18 = *(_QWORD *)(v8 + 72);
  v19 = v18 * a2;
  v53 = v18;
  if ((unsigned __int128)(v18 * (__int128)a2) >> 64 != (v18 * a2) >> 63)
    goto LABEL_44;
  v20 = v17 & 0xFFFFFFFFFFFFFFC0;
  v21 = (v17 & 0xFFFFFFFFFFFFFFC0) + 128;
  v22 = v21 + v19;
  if (__OFADD__(v21, v19))
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v23 = swift_slowAlloc();
  *(_QWORD *)&v56 = v23;
  *((_QWORD *)&v56 + 1) = v23 + v22;
  if (!v23)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v26 = v23;
  v54 = a2;
  v55 = *(_OWORD *)(v12 + 8);
  v27 = type metadata accessor for PackedOptionalsBuffer.Header(0, a3, v24, v25);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, &v54, v27);
  v52 = v56;
  v28 = v56;
  if (!(_QWORD)v56)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v29 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
  if (!v29)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v30 = (_QWORD *)*a1;
  if (!*a1)
  {
LABEL_55:
    __break(1u);
    return;
  }
  v31 = *v30 + 7;
  if (__OFADD__(*v30, 7))
    goto LABEL_46;
  if (v31 < 0)
    v31 = *v30 + 14;
  v32 = v31 >> 3;
  v33 = v32 - 1;
  v15 = v32 < 1;
  v34 = v32 + 62;
  if (!v15)
    v34 = v33;
  memcpy((void *)(v28 + 64), v29, (v34 & 0xFFFFFFFFFFFFFFC0) + 64);
  v35 = *v30 + 7;
  v36 = __OFADD__(*v30, 7);
  if (__OFADD__(*v30, 7))
    goto LABEL_47;
  v37 = *v30 + 14;
  if (v35 >= 0)
    v37 = *v30 + 7;
  v38 = v37 >> 3;
  v39 = v38 - 1;
  v40 = v38 + 62;
  if (v39 >= 0)
    v40 = v39;
  v41 = v40 & 0xFFFFFFFFFFFFFFC0;
  if ((uint64_t)(v20 - v41) < 0)
    goto LABEL_48;
  if (v20 != v41)
  {
    bzero((void *)(v28 + 64 + v41 + 64), v20 - v41);
    v35 = *v30 + 7;
    v36 = __OFADD__(*v30, 7);
  }
  if (v36)
    goto LABEL_49;
  v42 = v35 / 8;
  v43 = v42 - 1;
  v15 = v42 < 1;
  v44 = v42 + 62;
  if (!v15)
    v44 = v43;
  v45 = *(_QWORD *)(v28 + 8);
  if (v45 < 0)
    goto LABEL_50;
  v51 = a4;
  if (v45)
  {
    v46 = 0;
    v47 = (char *)v30 + (v44 & 0xFFFFFFFFFFFFFFC0);
    v48 = v28 + v20;
    v49 = 128;
    do
    {
      if (((*((unsigned __int8 *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + (v46 >> 3)) >> (v46 & 7)) & 1) != 0)
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, &v47[v49], a3);
        (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v48 + v49, v11, a3);
      }
      ++v46;
      v49 += v53;
    }
    while (v45 != v46);
  }
  *v51 = v52;
}

uint64_t type metadata accessor for PackedOptionalsBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PackedOptionalsBuffer);
}

Swift::Bool __swiftcall PackedOptionalsBuffer.isNil(at:)(Swift::Int at)
{
  uint64_t v1;
  int64_t v2;
  int v3;
  int v4;

  v2 = at - (v1 & 0xFFFFFFFFFFFFFFF8);
  v3 = *((unsigned __int8 *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + at / 8);
  v4 = 1 << v2;
  if (v2 < 0)
    v4 = 0;
  return (v4 & v3) == 0;
}

void PackedOptionalsBuffer.init(moving:capacity:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  size_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;

  v4 = (_QWORD *)*a1;
  if (!*a1)
    goto LABEL_54;
  if (*v4 > a2)
  {
    __break(1u);
    goto LABEL_45;
  }
  v7 = a2 + 7;
  if (__OFADD__(a2, 7))
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v7 < 0)
    v7 = a2 + 14;
  v9 = v7 >> 3;
  v11 = v9 - 1;
  v10 = v9 < 1;
  v12 = v9 + 62;
  if (!v10)
    v12 = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72);
  v14 = v13 * a2;
  if ((unsigned __int128)(v13 * (__int128)a2) >> 64 != (v13 * a2) >> 63)
    goto LABEL_46;
  v15 = v12 & 0xFFFFFFFFFFFFFFC0;
  v16 = (v12 & 0xFFFFFFFFFFFFFFC0) + 128;
  v17 = v16 + v14;
  if (__OFADD__(v16, v14))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v19 = swift_slowAlloc();
  *(_QWORD *)&v45 = v19;
  *((_QWORD *)&v45 + 1) = v19 + v17;
  if (!v19)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v22 = v19;
  v43 = a2;
  v44 = *(_OWORD *)(v4 + 1);
  v23 = type metadata accessor for PackedOptionalsBuffer.Header(0, a3, v20, v21);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, &v43, v23);
  v42 = v45;
  v24 = v45;
  if (!(_QWORD)v45)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v25 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
  if (!v25)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v26 = (_QWORD *)*a1;
  if (*a1)
  {
    v27 = *v26 + 7;
    if (!__OFADD__(*v26, 7))
    {
      if (v27 < 0)
        v27 = *v26 + 14;
      v28 = v27 >> 3;
      v29 = v28 - 1;
      v10 = v28 < 1;
      v30 = v28 + 62;
      if (!v10)
        v30 = v29;
      memcpy((void *)(v24 + 64), v25, (v30 & 0xFFFFFFFFFFFFFFC0) + 64);
      v31 = __OFADD__(*v26, 7);
      if (!__OFADD__(*v26, 7))
      {
        v32 = *v26 + 14;
        if (*v26 + 7 >= 0)
          v32 = *v26 + 7;
        v33 = v32 >> 3;
        v34 = v33 - 1;
        v35 = v33 + 62;
        if (v34 >= 0)
          v35 = v34;
        v36 = v35 & 0xFFFFFFFFFFFFFFC0;
        if ((uint64_t)(v15 - v36) >= 0)
        {
          if (v15 != v36)
          {
            bzero((void *)(v24 + 64 + v36 + 64), v15 - v36);
            v31 = __OFADD__(*v26, 7);
          }
          if (!v31)
          {
            v37 = *(_QWORD *)(v24 + 8);
            if ((v37 & 0x8000000000000000) == 0)
            {
              if (v37)
              {
                v38 = 0;
                v39 = 128;
                do
                {
                  if (((*((unsigned __int8 *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + (v38 >> 3)) >> (v38 & 7)) & 1) != 0)
                    sub_215130058();
                  ++v38;
                  v39 += v13;
                }
                while (v37 != v38);
              }
              v40 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
              if (!v40)
                goto LABEL_43;
              if ((v41 & 0x8000000000000000) == 0)
              {
                if (v41)
                  bzero(v40, v41);
LABEL_43:
                v26[2] = *(_QWORD *)(v24 + 8);
                *a4 = v42;
                return;
              }
              goto LABEL_53;
            }
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_58:
  __break(1u);
}

Swift::Void __swiftcall PackedOptionalsBuffer.deallocate()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*v1;
  if (!*v1)
    goto LABEL_16;
  if (__OFADD__(*v2, 7))
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = v2[1];
  if (v3 < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    JUMPOUT(0x2199DC578);
  }
  v4 = v0;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (((*((unsigned __int8 *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + (i >> 3)) >> (i & 7)) & 1) != 0)
        sub_21513004C();
    }
  }
  if (!PackedOptionalsBuffer.nilBitmapBuffer.getter())
    goto LABEL_17;
  if ((uint64_t)*v2 >= 0x7FFFFFFFFFFFFFF9)
    goto LABEL_15;
  type metadata accessor for PackedOptionalsBuffer.Header(0, *(_QWORD *)(v4 + 16), v6, v7);
  sub_21513004C();
  if (*v1)
    goto LABEL_18;
}

Swift::Void __swiftcall PackedOptionalsBuffer.setNil(at:)(Swift::Int at)
{
  uint64_t v1;
  Swift::Int v2;
  int64_t v3;
  _QWORD *v4;
  char v5;

  v2 = at / 8;
  v3 = at - (v1 & 0xFFFFFFFFFFFFFFF8);
  v4 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
  if (v3 >= 0)
    v5 = ~(1 << v3);
  else
    v5 = -1;
  *((_BYTE *)v4 + v2) &= v5;
}

Swift::Void __swiftcall PackedOptionalsBuffer.setNonNil(at:)(Swift::Int at)
{
  uint64_t v1;
  Swift::Int v2;
  int64_t v3;
  _QWORD *v4;
  int v5;

  v2 = at / 8;
  v3 = at - (v1 & 0xFFFFFFFFFFFFFFF8);
  v4 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
  v5 = 1 << v3;
  if (v3 < 0)
    LOBYTE(v5) = 0;
  *((_BYTE *)v4 + v2) |= v5;
}

Swift::Void __swiftcall PackedOptionalsBuffer.resize(by:)(Swift::Int by)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  Swift::Int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v2 = (_QWORD *)*v1;
  if (!*v1)
    goto LABEL_35;
  v3 = *v2 + 7;
  if (__OFADD__(*v2, 7))
    goto LABEL_29;
  if (v3 < 0)
    v3 = *v2 + 14;
  v4 = v3 >> 3;
  v6 = v4 - 1;
  v5 = v4 < 1;
  v7 = v4 + 62;
  if (!v5)
    v7 = v6;
  if ((by & 0x8000000000000000) == 0)
  {
    v8 = v2[2];
    v9 = __OFADD__(v8, by);
    v10 = v8 + by;
    if (v9)
      goto LABEL_31;
    v2[2] = v10;
    goto LABEL_13;
  }
  v11 = v2[1];
  v12 = v11 + by;
  if (__OFADD__(v11, by))
    goto LABEL_32;
  if (v11 < v12)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    return;
  }
  if (v12 != v11)
  {
    if (v12 < v11)
    {
      while (1)
      {
        v16 = v12 - (v7 & 0xFFFFFFFFFFFFFFF8);
        v17 = *((unsigned __int8 *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + v12 / 8);
        if (v16 >= 0)
          v18 = 1 << v16;
        else
          v18 = 0;
        if ((v18 & v17) != 0)
        {
          sub_21513004C();
          v15 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
          if (v16 >= 0)
            LOBYTE(v7) = ~(1 << v16);
          else
            LOBYTE(v7) = -1;
          *((_BYTE *)v15 + v12 / 8) &= v7;
        }
        else
        {
          v19 = v2[2];
          v9 = __OFSUB__(v19, 1);
          v7 = v19 - 1;
          if (v9)
          {
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          v2[2] = v7;
        }
        if (v11 == ++v12)
          goto LABEL_13;
      }
    }
    goto LABEL_34;
  }
LABEL_13:
  v13 = v2[1];
  v9 = __OFADD__(v13, by);
  v14 = v13 + by;
  if (v9)
    goto LABEL_30;
  v2[1] = v14;
}

uint64_t (*PackedOptionalsBuffer.Header.nilCount.modify())(_QWORD)
{
  return nullsub_5;
}

uint64_t (*PackedOptionalsBuffer.Header.count.modify())(_QWORD)
{
  return nullsub_5;
}

Swift::Void __swiftcall PackedOptionalsBuffer.clear(at:)(Swift::Int at)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  int64_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v3 = at / 8;
  v4 = at - (v1 & 0xFFFFFFFFFFFFFFF8);
  v5 = *((unsigned __int8 *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + at / 8);
  if (v4 >= 0)
    v6 = 1 << v4;
  else
    v6 = 0;
  if ((v6 & v5) != 0)
  {
    v7 = (_QWORD *)*v2;
    if (*v2)
    {
      if (__OFADD__(*v7, 7))
      {
        __break(1u);
      }
      else
      {
        sub_21513004C();
        v8 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
        if (v4 >= 0)
          v9 = ~(1 << v4);
        else
          v9 = -1;
        *((_BYTE *)v8 + v3) &= v9;
        v10 = v7[2];
        v11 = __OFADD__(v10, 1);
        v12 = v10 + 1;
        if (!v11)
        {
          v7[2] = v12;
          return;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t PackedOptionalsBuffer.append(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_215130064();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v36 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  v11 = MEMORY[0x24BDAC7A8](v7);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v36 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v17 = (_QWORD *)*v2;
    if (!*v2)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v18 = v17[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_19;
    v17[2] = v20;
LABEL_16:
    v34 = v17[1];
    v19 = __OFADD__(v34, 1);
    v35 = v34 + 1;
    if (!v19)
    {
      v17[1] = v35;
      return result;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v21 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 32);
  result = v21(v15, v9, v4);
  v17 = (_QWORD *)*v2;
  if (*v2)
  {
    v22 = *v17 + 7;
    if (__OFADD__(*v17, 7))
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if (v22 < 0)
      v22 = *v17 + 14;
    v23 = v22 >> 3;
    v25 = v23 - 1;
    v24 = v23 < 1;
    v26 = v23 + 62;
    if (!v24)
      v26 = v25;
    v27 = (unint64_t)v17 + (v26 & 0xFFFFFFFFFFFFFFC0) + *(_QWORD *)(v10 + 72) * v17[1] + 128;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v4);
    v21((char *)v27, v13, v4);
    v28 = v17[1];
    v29 = v28 + 7;
    if (v28 >= 0)
      v29 = v17[1];
    v30 = v29 >> 3;
    v31 = v28 - (v29 & 0xFFFFFFFFFFFFFFF8);
    v32 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
    v33 = 1 << v31;
    if (v31 < 0)
      LOBYTE(v33) = 0;
    *((_BYTE *)v32 + v30) |= v33;
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v4);
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
  return result;
}

Swift::Void __swiftcall PackedOptionalsBuffer.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  unint64_t *v2;
  unint64_t v3;
  int64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  int64_t v9;
  char v10;
  char v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  Swift::Int v16;
  _QWORD *v17;
  Swift::Int v18;

  v3 = *v2;
  if (!*v2)
    goto LABEL_24;
  if (__OFADD__(*(_QWORD *)v3, 7))
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  v5 = a1 - (v3 & 0xFFFFFFFFFFFFFFF8);
  v18 = a1 / 8;
  LOBYTE(v6) = *((_BYTE *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + a1 / 8);
  if (v5 >= 0)
    v7 = 1 << v5;
  else
    v7 = 0;
  v8 = (v6 & v7);
  v9 = a2 - (v6 & 0xFFFFFFFFFFFFFFF8);
  v10 = *((_BYTE *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + a2 / 8);
  if (v9 >= 0)
    v11 = 1 << v9;
  else
    v11 = 0;
  v12 = v10 & v11;
  if (v8)
  {
    if (v12)
    {
      sub_21513049C();
      return;
    }
    sub_215130058();
    v17 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
    *((_BYTE *)v17 + a2 / 8) |= v11;
    v14 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
    if (v5 >= 0)
      v15 = ~(1 << v5);
    else
      v15 = -1;
    v16 = v18;
  }
  else
  {
    if (!v12)
      return;
    sub_215130058();
    v13 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
    *((_BYTE *)v13 + v18) |= v7;
    v14 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
    if (v9 >= 0)
      v15 = ~(1 << v9);
    else
      v15 = -1;
    v16 = a2 / 8;
  }
  *((_BYTE *)v14 + v16) &= v15;
}

Swift::Void __swiftcall PackedOptionalsBuffer.move(from:to:)(Swift::Int from, Swift::Int to)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  Swift::Int v27;
  _QWORD *v28;
  Swift::Int v29;

  v3 = (_QWORD *)*v2;
  if (!*v2)
    goto LABEL_29;
  if (__OFADD__(*v3, 7))
  {
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    return;
  }
  v5 = (*v3 + 7) / 8;
  v7 = v5 - 1;
  v6 = v5 < 1;
  v8 = v5 + 62;
  if (!v6)
    v8 = v7;
  v28 = (_QWORD *)*v2;
  v9 = from - (v8 & 0xFFFFFFFFFFFFFFF8);
  v29 = from / 8;
  LODWORD(v10) = *((unsigned __int8 *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + from / 8);
  if (v9 >= 0)
    v11 = 1 << v9;
  else
    v11 = 0;
  v12 = v11 & v10;
  v13 = to - (v10 & 0xFFFFFFFFFFFFFFF8);
  v27 = to / 8;
  v14 = *((_BYTE *)PackedOptionalsBuffer.nilBitmapBuffer.getter() + to / 8);
  if (v13 >= 0)
    v15 = 1 << v13;
  else
    LOBYTE(v15) = 0;
  LOBYTE(v16) = v14 & v15;
  if (v12)
  {
    if (v9 >= 0)
      v17 = ~(1 << v9);
    else
      v17 = -1;
    if (!(_BYTE)v16)
    {
      sub_215130058();
      v25 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
      *((_BYTE *)v25 + v29) &= v17;
      v26 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
      *((_BYTE *)v26 + v27) |= v15;
      return;
    }
    sub_215130040();
    v18 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
    *((_BYTE *)v18 + v29) &= v17;
    v19 = v28;
    v20 = v28[2];
    v21 = __OFADD__(v20, 1);
    v16 = v20 + 1;
    if (!v21)
    {
LABEL_24:
      v19[2] = v16;
      return;
    }
    __break(1u);
  }
  if ((_BYTE)v16)
  {
    sub_21513004C();
    v22 = PackedOptionalsBuffer.nilBitmapBuffer.getter();
    if (v13 >= 0)
      v23 = ~(1 << v13);
    else
      v23 = -1;
    *((_BYTE *)v22 + v27) &= v23;
    v19 = v28;
    v24 = v28[2];
    v21 = __OFADD__(v24, 1);
    v16 = v24 + 1;
    if (!v21)
      goto LABEL_24;
    goto LABEL_28;
  }
}

uint64_t PackedOptionalsBuffer.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall PackedOptionalsBuffer.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall PackedOptionalsBuffer.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall PackedOptionalsBuffer.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

BOOL PackedOptionalsBuffer.isEmpty.getter()
{
  uint64_t v0;
  _BOOL8 result;

  if (*(_QWORD *)v0)
    return *(_QWORD *)(*(_QWORD *)v0 + 8) == 0;
  __break(1u);
  return result;
}

uint64_t _s11TabularData21PackedOptionalsBufferV8endIndexSivg_0()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)v0)
    return *(_QWORD *)(*(_QWORD *)v0 + 8);
  __break(1u);
  return result;
}

_QWORD *PackedOptionalsBuffer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = a1 / 8;
  v8 = a1 - (a3 & 0xFFFFFFFFFFFFFFF8);
  result = PackedOptionalsBuffer.nilBitmapBuffer.getter();
  v10 = 1 << v8;
  if (v8 < 0)
    LOBYTE(v10) = 0;
  if ((v10 & *((_BYTE *)result + v7)) == 0)
  {
    v22 = *(_QWORD *)(a2 + 16);
    v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
    v20 = a3;
    v21 = 1;
    return (_QWORD *)v19(v20, v21, 1, v22);
  }
  v11 = (_QWORD *)*v3;
  if (*v3)
  {
    v12 = *v11 + 7;
    if (!__OFADD__(*v11, 7))
    {
      if (v12 < 0)
        v12 = *v11 + 14;
      v13 = v12 >> 3;
      v15 = v13 - 1;
      v14 = v13 < 1;
      v16 = v13 + 62;
      if (!v14)
        v16 = v15;
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(_QWORD *)(v17 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16))(a3, (unint64_t)v11 + (v16 & 0xFFFFFFFFFFFFFFC0) + *(_QWORD *)(v18 + 72) * a1 + 128, v17);
      v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
      v20 = a3;
      v21 = 0;
      v22 = v17;
      return (_QWORD *)v19(v20, v21, 1, v22);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_21507B84C@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a1;
  v6 = type metadata accessor for PackedOptionalsBuffer(0, *(uint64_t *)((char *)a1 + a2 - 8), a2, a3);
  return PackedOptionalsBuffer.subscript.getter(v5, v6, a4);
}

_QWORD *sub_21507B8AC(uint64_t a1, __int128 *a2, Swift::Int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;

  v7 = *(Swift::Int *)((char *)a3 + a4 - 8);
  v8 = sub_215130064();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - v9;
  v11 = *a3;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v17 - v9, a1);
  v17 = *a2;
  v15 = type metadata accessor for PackedOptionalsBuffer(0, v7, v13, v14);
  return PackedOptionalsBuffer.subscript.setter((uint64_t)v10, v11, v15);
}

_QWORD *PackedOptionalsBuffer.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  _QWORD *result;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  char *v44;
  void (*v45)(unint64_t, char *, uint64_t);
  uint64_t v46;
  char *v47;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_215130064();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v44 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v44 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
  {
    v17 = *(void (**)(char *, uint64_t))(v8 + 8);
    v17(v11, v7);
    PackedOptionalsBuffer.clear(at:)(a2);
    return (_QWORD *)((uint64_t (*)(uint64_t, uint64_t))v17)(a1, v7);
  }
  v46 = a1;
  v19 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v19(v16, v11, v6);
  v20 = a2 / 8;
  v22 = a2 - (v21 & 0xFFFFFFFFFFFFFFF8);
  result = PackedOptionalsBuffer.nilBitmapBuffer.getter();
  if (v22 >= 0)
    v23 = 1 << v22;
  else
    LOBYTE(v23) = 0;
  if ((*((_BYTE *)result + a2 / 8) & v23) == 0)
  {
    v31 = (_QWORD *)*v3;
    if (!*v3)
    {
LABEL_26:
      __break(1u);
      return result;
    }
    v45 = (void (*)(unint64_t, char *, uint64_t))v19;
    v32 = *v31 + 7;
    if (!__OFADD__(*v31, 7))
    {
      if (v32 < 0)
        v32 = *v31 + 14;
      v33 = v32 >> 3;
      v34 = v33 - 1;
      v28 = v33 < 1;
      v35 = v33 + 62;
      if (!v28)
        v35 = v34;
      v36 = (unint64_t)v31 + (v35 & 0xFFFFFFFFFFFFFFC0) + *(_QWORD *)(v12 + 72) * a2 + 128;
      v37 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v38 = v47;
      v44 = v16;
      v39 = v16;
      v40 = v31;
      v37(v47, v39, v6);
      v45(v36, v38, v6);
      result = PackedOptionalsBuffer.nilBitmapBuffer.getter();
      *((_BYTE *)result + v20) |= v23;
      v41 = v40[2];
      v42 = __OFSUB__(v41, 1);
      v43 = v41 - 1;
      if (!v42)
      {
        v40[2] = v43;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v46, v7);
        return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v44, v6);
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v24 = (_QWORD *)*v3;
  if (!*v3)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v25 = *v24 + 7;
  v26 = v46;
  if (__OFADD__(*v24, 7))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v25 < 0)
    v25 = *v24 + 14;
  v27 = v25 >> 3;
  v29 = v27 - 1;
  v28 = v27 < 1;
  v30 = v27 + 62;
  if (!v28)
    v30 = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 40))((unint64_t)v24 + (v30 & 0xFFFFFFFFFFFFFFC0) + *(_QWORD *)(v12 + 72) * a2 + 128, v16, v6);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v26, v7);
}

void (*PackedOptionalsBuffer.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(Swift::Int **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = sub_215130064();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v11 = malloc(v10);
  v7[6] = v11;
  PackedOptionalsBuffer.subscript.getter(a2, a3, (uint64_t)v11);
  return sub_21507BCC0;
}

void sub_21507BCC0(Swift::Int **a1, char a2)
{
  Swift::Int *v2;
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  if ((a2 & 1) != 0)
  {
    v5 = v2[3];
    v6 = v2[4];
    v7 = v2[1];
    v8 = *v2;
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[5], v4, v5);
    PackedOptionalsBuffer.subscript.setter((uint64_t)v3, v8, v7);
    (*(void (**)(void *, Swift::Int))(v6 + 8))(v4, v5);
  }
  else
  {
    PackedOptionalsBuffer.subscript.setter((*a1)[6], *v2, v2[1]);
  }
  free(v4);
  free(v3);
  free(v2);
}

_QWORD *sub_21507BD64(uint64_t a1, Swift::Int *a2, uint64_t a3)
{
  return PackedOptionalsBuffer.subscript.setter(a1, *a2, a3);
}

void (*sub_21507BD6C(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = PackedOptionalsBuffer.subscript.modify(v6, *a2, a3);
  return sub_215072674;
}

uint64_t sub_21507BDC8()
{
  return sub_2150CA64C();
}

void (*sub_21507BDFC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *)
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = sub_2150C88E0(v8, a2, a3, a4);
  return sub_215072674;
}

uint64_t sub_21507BE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>, a3);
  return sub_21512FA40();
}

void sub_21507BED0(Swift::Int *a1, Swift::Int *a2)
{
  PackedOptionalsBuffer.swapAt(_:_:)(*a1, *a2);
}

uint64_t sub_21507BEDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = PackedOptionalsBuffer.underestimatedCount.getter();
  *a1 = result;
  return result;
}

void (*sub_21507BF00(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_21507BF5C(v6, *a2, a3);
  return sub_215072674;
}

void (*sub_21507BF5C(uint64_t *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = sub_215130064();
  *a1 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  PackedOptionalsBuffer.subscript.getter(a2, a3, (uint64_t)v8);
  return sub_21506DF04;
}

uint64_t sub_21507BFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>);
  return sub_2150C8B54(a1, a2, v6, a3);
}

uint64_t sub_21507C01C(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>, a1);
  return sub_21512FE30();
}

uint64_t sub_21507C070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>, a3);
  return sub_21512FE24();
}

uint64_t sub_21507C0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>, a4);
  return sub_21512FE00();
}

uint64_t sub_21507C138(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(*a2, *a1);
  result = *a2 - *a1;
  if (v2)
    __break(1u);
  return result;
}

__n128 sub_21507C150@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_21507C164(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>, a1);
  return sub_21512FECC();
}

uint64_t sub_21507C1B0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x2199DB7A4](a1, a2);
}

double PackedOptionalsBuffer.init()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  static PackedOptionalsBuffer.allocate(capacity:)(0, a1, (uint64_t *)&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void PackedOptionalsBuffer.replaceSubrange<A>(_:with:)(Swift::Int a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = sub_21512FE60();
  PackedOptionalsBuffer.replaceSubrange<A>(_:with:elementsOf:)(a1, a2, v12, a3, a4, a5, a6);
}

void PackedOptionalsBuffer.replaceSubrange<A>(_:with:elementsOf:)(Swift::Int a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  Swift::Int v30;
  char *v31;
  Swift::Int v32;
  uint64_t v33;
  Swift::Int v34;
  void (*v35)(_BYTE *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  Swift::Int v45;
  Swift::Int v46;
  Swift::Int v47;
  Swift::Int v48;
  Swift::Int v49;
  char *v50;
  Swift::Int v51;
  Swift::Int v52;
  Swift::Int v53;
  Swift::Int v54;
  Swift::Int v55;
  Swift::Int v56;
  Swift::Int v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_BYTE *, _QWORD);
  void (*v61)(Swift::Int, uint64_t);
  uint64_t v62;
  char *v63;
  Swift::Int v64;
  Swift::Int v65;
  uint64_t v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _BYTE v76[32];

  v8 = v7;
  v16 = sub_215130064();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v75 = (char *)&v62 - v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v63 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v27 = *v8;
  if (!*v8)
    goto LABEL_92;
  v28 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_68;
  v69 = a6;
  v64 = v26;
  v72 = (char *)&v62 - v24;
  v74 = v16;
  v67 = v23;
  v29 = a3 - v28;
  if (__OFSUB__(a3, v28))
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v65 = a2 + v29;
  if (__OFADD__(a2, v29))
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v73 = v17;
  v66 = v25;
  v30 = *(_QWORD *)(v27 + 8);
  if (__OFSUB__(v30, a2))
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v68 = a1;
  if (v29 < 1)
  {
    v64 = v30 - a2;
    v36 = a4;
    v37 = v69;
    sub_21512FE48();
    if (a3 < 0)
    {
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    v31 = v63;
    v62 = a3;
    if (a3)
    {
      v38 = v37;
      v39 = v62;
      v40 = v68;
      v70 = v36;
      while (1)
      {
        v71 = v39;
        v41 = v31;
        v42 = v38;
        v72 = (char *)sub_21512FF5C();
        v43 = (uint64_t)v75;
        (*(void (**)(char *))(v73 + 16))(v75);
        ((void (*)(_BYTE *, _QWORD))v72)(v76, 0);
        PackedOptionalsBuffer.subscript.setter(v43, v40, a5);
        if (v40 == 0x7FFFFFFFFFFFFFFFLL)
          break;
        ++v40;
        sub_21512FEB4();
        v39 = v71 - 1;
        v31 = v41;
        v38 = v42;
        if (v71 == 1)
          goto LABEL_25;
      }
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
LABEL_25:
    if (!v29)
    {
LABEL_45:
      (*(void (**)(char *, uint64_t))(v66 + 8))(v31, v67);
      return;
    }
    v44 = -v29;
    if (__OFSUB__(0, v29))
      goto LABEL_74;
    if (v44 >= v64)
    {
      v52 = a2 + v64;
      if (__OFADD__(a2, v64))
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      if (v52 < a2)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      v50 = v31;
      if (v52 != a2)
      {
        if (v52 <= a2)
        {
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        while (!__OFADD__(a2, v29))
        {
          PackedOptionalsBuffer.move(from:to:)(a2, a2 + v29);
          if (v30 == ++a2)
            goto LABEL_52;
        }
        goto LABEL_66;
      }
LABEL_52:
      v53 = v65 + v64;
      if (__OFADD__(v65, v64))
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v54 = v65 - v29;
      if (__OFADD__(v65, v44))
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      if (v54 < v53)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      if (v53 != v54)
      {
        if (v53 >= v54)
        {
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
          return;
        }
        v55 = 2 * v54 - v30 - v62 - v68;
        do
        {
          v56 = v53 + 1;
          PackedOptionalsBuffer.clear(at:)(v53);
          v53 = v56;
          --v55;
        }
        while (v55);
      }
    }
    else
    {
      v45 = a2 - v29;
      if (__OFADD__(a2, v44))
      {
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      if (v45 < a2)
      {
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      if (v45 != a2)
      {
        if (v45 <= a2)
        {
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        v46 = a2 - v65;
        v47 = a2;
        while (!__OFADD__(v47, v29))
        {
          v48 = v47 + 1;
          PackedOptionalsBuffer.move(from:to:)(v47, v47 + v29);
          v47 = v48;
          if (!--v46)
            goto LABEL_35;
        }
        goto LABEL_65;
      }
LABEL_35:
      v49 = a2 + v64;
      if (__OFADD__(a2, v64))
      {
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      v50 = v63;
      if (v49 < v45)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      if (v45 != v49)
      {
        if (v45 >= v49)
        {
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
        v51 = v30 + v62 + v68 - 2 * a2;
        while (!__OFSUB__(v45, v44))
        {
          PackedOptionalsBuffer.move(from:to:)(v45, v45 + v29);
          ++v45;
          if (!--v51)
            goto LABEL_59;
        }
        goto LABEL_67;
      }
    }
LABEL_59:
    PackedOptionalsBuffer.resize(by:)(v29);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v50, v67);
    return;
  }
  PackedOptionalsBuffer.resize(by:)(v29);
  if (v30 < a2)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (v30 != a2)
  {
    while (v30 > a2)
    {
      if (__OFADD__(--v30, v29))
        goto LABEL_44;
      PackedOptionalsBuffer.swapAt(_:_:)(v30, v30 + v29);
      if (a2 == v30)
        goto LABEL_12;
    }
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_12:
  sub_21512FE48();
  v32 = v68;
  v70 = a4;
  v71 = a7;
  if (v68 != a2)
  {
    if (a2 < v68)
    {
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    if (v68 >= a2)
    {
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    v33 = (uint64_t)v75;
    do
    {
      v68 = v32;
      v34 = v32 + 1;
      v35 = (void (*)(_BYTE *, _QWORD))sub_21512FF5C();
      (*(void (**)(uint64_t))(v73 + 16))(v33);
      v35(v76, 0);
      PackedOptionalsBuffer.subscript.setter(v33, v68, a5);
      sub_21512FEB4();
      v32 = v34;
    }
    while (a2 != v34);
  }
  if (a2 > v65)
    goto LABEL_75;
  if (a2 == v65)
  {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v72, v67);
    return;
  }
  if (a2 >= v65)
    goto LABEL_87;
  v63 = *(char **)(v66 + 16);
  v57 = v64;
  v58 = v67;
  v59 = (uint64_t)v75;
  do
  {
    v68 = a2 + 1;
    ((void (*)(Swift::Int, char *, uint64_t))v63)(v57, v72, v58);
    v60 = (void (*)(_BYTE *, _QWORD))sub_21512FF5C();
    (*(void (**)(uint64_t))(v73 + 16))(v59);
    v60(v76, 0);
    v61 = *(void (**)(Swift::Int, uint64_t))(v66 + 8);
    v61(v57, v58);
    PackedOptionalsBuffer.subscript.setter(v59, a2, a5);
    sub_21512FEB4();
    a2 = v68;
  }
  while (v65 != v68);
  v61((Swift::Int)v72, v67);
}

double sub_21507C8F0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return PackedOptionalsBuffer.init()(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_21507C8F8(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  PackedOptionalsBuffer.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t sub_21507C94C(uint64_t a1, uint64_t a2)
{
  return nullsub_5(a2);
}

uint64_t sub_21507C95C()
{
  return sub_21512FFEC();
}

uint64_t sub_21507C974(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  PackedOptionalsBuffer.append(_:)(a1, a2);
  v3 = sub_215130064();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t sub_21507C9BC()
{
  return sub_21512FF98();
}

uint64_t sub_21507C9D8()
{
  return sub_21512FFB0();
}

uint64_t sub_21507C9FC()
{
  return sub_2150CA6C4();
}

uint64_t sub_21507CA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>, a3);
  return sub_21512FFF8();
}

uint64_t PackedOptionalsBuffer.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v1 = sub_215130604();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA8080);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD **)v0;
  v7 = *(_QWORD *)(v0 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA8088);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_2151360F0;
  *(_QWORD *)(result + 32) = 0x7974696361706163;
  *(_QWORD *)(result + 40) = 0xE800000000000000;
  if (v8)
  {
    v10 = MEMORY[0x24BEE1768];
    *(_QWORD *)(result + 48) = *v8;
    *(_QWORD *)(result + 72) = v10;
    *(_QWORD *)(result + 80) = 0x746E756F63;
    *(_QWORD *)(result + 88) = 0xE500000000000000;
    *(_QWORD *)(result + 96) = v8[1];
    *(_QWORD *)(result + 120) = v10;
    *(_QWORD *)(result + 128) = 0x746E756F436C696ELL;
    *(_QWORD *)(result + 136) = 0xE800000000000000;
    v11 = v8[2];
    *(_QWORD *)(result + 168) = v10;
    *(_QWORD *)(result + 144) = v11;
    v13[0] = v8;
    v13[1] = v7;
    v12 = sub_2151305F8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
    sub_215119268((uint64_t)v3);
    return sub_215130610();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PackedOptionalsBuffer.Header.capacity.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PackedOptionalsBuffer.Header.capacity.modify())(_QWORD)
{
  return nullsub_5;
}

void sub_21507CC34()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_21507CC44(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>);
  return MEMORY[0x2199DC4C4](MEMORY[0x24BEE4220], a1, &v3);
}

void sub_21507CC8C()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_21507CC9C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>);
  return MEMORY[0x2199DC4C4](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_21507CCE4()
{
  JUMPOUT(0x2199DC4C4);
}

void sub_21507CCF4()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_21507CD04(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>);
  return MEMORY[0x2199DC4C4](MEMORY[0x24BEE4218], a1, &v3);
}

uint64_t sub_21507CD4C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x2199DC4C4](&protocol conformance descriptor for PackedOptionalsBuffer<A>);
  return MEMORY[0x2199DC4C4](MEMORY[0x24BEE4240], a1, &v3);
}

uint64_t sub_21507CD94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))PackedOptionalsBuffer.count.getter, a3);
}

uint64_t sub_21507CDA4()
{
  return 8;
}

_QWORD *sub_21507CDB0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_21507CDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))PackedOptionalsBuffer.nilCount.getter, a3);
}

uint64_t keypath_getTm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = a3(a1, a2);
  *a4 = result;
  return result;
}

uint64_t sub_21507CE04()
{
  return 8;
}

uint64_t sub_21507CE18()
{
  return 8;
}

uint64_t sub_21507CE24(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_21507CE44(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ProcessedRows(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ProcessedRows(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Alignment()
{
  return &type metadata for Alignment;
}

uint64_t sub_21507CEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t *, _QWORD);
  void (*v20)(char *);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_254DA8090);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v30 = (char *)&v29 - v10;
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - v13;
  v15 = sub_21512FCEC();
  v44 = v15;
  swift_getTupleTypeMetadata2();
  sub_21512FCEC();
  v43 = sub_21512F878();
  sub_21512FE48();
  v16 = v42;
  v38 = a1;
  sub_21512FEA8();
  if (v16 == v39)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return v15;
  }
  v35 = a3;
  v17 = MEMORY[0x24BEE1768];
  v18 = v37;
  v33 = a2;
  v34 = v3;
  while (1)
  {
    v41 = v16;
    v19 = (void (*)(unint64_t *, _QWORD))sub_21512FF5C();
    v20 = *(void (**)(char *))(v18 + 16);
    v20(v14);
    v19(&v39, 0);
    MEMORY[0x2199DB3FC](&v39, v14, v43, AssociatedTypeWitness, v17, v35);
    if ((v40 & 1) == 0)
    {
      v26 = v39;
      v27 = sub_21512FD40();
      sub_21512FCE0();
      result = sub_2150F3DB8(v26, v44);
      v28 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_15;
      if (v28 < v16)
        goto LABEL_16;
      sub_2150757D4(v16, v28);
      nullsub_5(v27);
      goto LABEL_3;
    }
    v32 = (void (*)(char *, char *, uint64_t))v20;
    ((void (*)(char *, char *, uint64_t))v20)(v36, v14, AssociatedTypeWitness);
    v21 = swift_bridgeObjectRetain();
    v22 = MEMORY[0x2199DB870](v21, TupleTypeMetadata2);
    swift_bridgeObjectRelease();
    v39 = v22;
    v40 = 0;
    sub_21512F890();
    result = sub_21512F8A8();
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v24 < v16)
      goto LABEL_14;
    v25 = &v30[*(int *)(TupleTypeMetadata2 + 48)];
    v32(v30, v14, AssociatedTypeWitness);
    *(_QWORD *)v25 = v16;
    *((_QWORD *)v25 + 1) = v24;
    v25[16] = 0;
    sub_21512FD40();
    sub_21512FD28();
LABEL_3:
    sub_21512FEB4();
    v18 = v37;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v14, AssociatedTypeWitness);
    v16 = v42;
    sub_21512FEA8();
    if (v16 == v39)
    {
      v15 = v44;
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _RangeSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _RangeSet);
}

uint64_t sub_21507D2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t result;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  void (*v66)(void);
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t TupleTypeMetadata2;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v79 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v77 = (char *)&v76 - v9;
  v91 = *(_QWORD *)(v5 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v81 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v90 = (char *)&v76 - v12;
  v13 = *(_QWORD *)(a2 + 24);
  v14 = sub_215130028();
  v15 = sub_215130064();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v83 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v84 = (char *)&v76 - v19;
  v20 = *(_QWORD *)(v14 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v76 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v80 = (uint64_t)&v76 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v86 = (char *)&v76 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v76 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)&v76 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v76 - v33;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v89 = a1;
  v35((char *)&v76 - v33, a1, v14);
  v92 = v13;
  v37 = type metadata accessor for _RangeSetStorage(0, v5, v13, v36);
  v87 = MEMORY[0x2199DC4C4](&unk_215138AA4, v37);
  LOBYTE(a1) = sub_21512FF14();
  v93 = v35;
  v35(v32, (uint64_t)v34, v14);
  v88 = v2;
  v85 = v20;
  if ((a1 & 1) != 0)
  {
    v38 = *(void (**)(char *, uint64_t))(v20 + 8);
    v38(v32, v14);
    v38(v34, v14);
    v39 = v90;
  }
  else
  {
    MEMORY[0x2199DC4C4](&unk_215138B84, v37);
    v40 = v84;
    v82 = v37;
    sub_21512F980();
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v40, 1, v14);
    if ((_DWORD)result == 1)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v42 = v90;
    v43 = v91;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v90, &v40[*(int *)(v14 + 36)], v5);
    v38 = *(void (**)(char *, uint64_t))(v20 + 8);
    v44 = v40;
    v39 = v42;
    v38(v44, v14);
    LOBYTE(v42) = sub_21512F9E0();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v39, v5);
    v38(v32, v14);
    result = ((uint64_t (*)(char *, uint64_t))v38)(v34, v14);
    v37 = v82;
    if ((v42 & 1) == 0)
      goto LABEL_18;
  }
  v45 = v89;
  v93(v29, v89, v14);
  v46 = sub_215130010();
  result = ((uint64_t (*)(char *, uint64_t))v38)(v29, v14);
  if ((v46 & 1) != 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((sub_21512FF14() & 1) == 0)
  {
    MEMORY[0x2199DC4C4](&unk_215138B84, v37);
    v47 = v83;
    v48 = v37;
    sub_21512F980();
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48))(v47, 1, v14);
    if ((_DWORD)result == 1)
    {
LABEL_23:
      __break(1u);
      return result;
    }
    v49 = &v47[*(int *)(v14 + 36)];
    v50 = v91;
    v90 = *(char **)(v91 + 16);
    ((void (*)(char *, char *, uint64_t))v90)(v39, v49, v5);
    v38(v47, v14);
    v51 = sub_21512FA58();
    v52 = *(void (**)(char *, uint64_t))(v50 + 8);
    v52(v39, v5);
    if ((v51 & 1) == 0)
    {
      v93(v86, v45, v14);
      MEMORY[0x2199DC4C4](&unk_215138984, v48);
      return sub_21512FFA4();
    }
    v93 = (void (*)(char *, uint64_t, uint64_t))v52;
    result = sub_2150C88DC(v48);
    v87 = result - 1;
    if (!__OFSUB__(result, 1))
    {
      v53 = sub_2150C88DC(v48);
      v55 = __OFSUB__(v53, 1);
      result = v53 - 1;
      if (!v55)
      {
        v56 = v80;
        sub_2150C877C(result, v48, v54, v80);
        v57 = v90;
        ((void (*)(char *, uint64_t, uint64_t))v90)(v39, v56, v5);
        v58 = v56;
        v59 = v57;
        v38((char *)v58, v14);
        v60 = v45 + *(int *)(v14 + 36);
        v61 = v81;
        ((void (*)(char *, uint64_t, uint64_t))v57)(v81, v60, v5);
        result = sub_21512F9E0();
        if ((result & 1) != 0)
        {
          v82 = v48;
          v62 = TupleTypeMetadata2;
          v63 = v39;
          v64 = v77;
          v65 = &v77[*(int *)(TupleTypeMetadata2 + 48)];
          v66 = *(void (**)(void))(v91 + 32);
          ((void (*)(char *, char *, uint64_t))v66)(v77, v63, v5);
          v92 = (uint64_t)v65;
          ((void (*)(char *, char *, uint64_t))v66)(v65, v61, v5);
          v67 = v79;
          v68 = &v79[*(int *)(v62 + 48)];
          ((void (*)(char *, char *, uint64_t))v59)(v79, v64, v5);
          ((void (*)(char *, char *, uint64_t))v59)(v68, v65, v5);
          v69 = v76;
          v66();
          v70 = v68;
          v71 = (void (*)(char *, uint64_t))v93;
          ((void (*)(char *, uint64_t))v93)(v70, v5);
          v72 = &v67[*(int *)(v62 + 48)];
          ((void (*)(char *, char *, uint64_t))v66)(v67, v64, v5);
          ((void (*)(char *, uint64_t, uint64_t))v66)(v72, v92, v5);
          v73 = v69;
          ((void (*)(char *, char *, uint64_t))v66)(&v69[*(int *)(v14 + 36)], v72, v5);
          v71(v67, v5);
          v74 = (uint64_t)v86;
          (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v86, v73, v14);
          return sub_2150C909C(v74, v87, v82, v75);
        }
        goto LABEL_21;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v93(v86, v45, v14);
  MEMORY[0x2199DC4C4](&unk_215138984, v37);
  return sub_21512FFA4();
}

uint64_t sub_21507D9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for _RangeSetStorage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  MEMORY[0x2199DC4C4](&unk_215138AA4, v4);
  return sub_21512FF14();
}

uint64_t sub_21507DA08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = type metadata accessor for _RangeSetStorage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - v7, v3, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, v5);
}

uint64_t sub_21507DA98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  char v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t result;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  char *v92;
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t TupleTypeMetadata2;
  char *v126;
  void (*v127)(char *, uint64_t, uint64_t);
  void (*v128)(char *, uint64_t);
  _QWORD *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  void (*v134)(char *, char *, uint64_t);
  void (*v135)(char *, uint64_t, uint64_t);
  void (*v136)(char *, uint64_t, uint64_t);
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  void (*v144)(char *, uint64_t);
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v4 = v3;
  v142 = a1;
  v112 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v124 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v123 = (char *)&v109 - v10;
  v139 = *(_QWORD *)(v6 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v122 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v133 = (char *)&v109 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v132 = (char *)&v109 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v109 - v18;
  v130 = *(_QWORD *)(a2 - 8);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v137 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v109 - v22;
  v146 = a2;
  v24 = *(_QWORD *)(a2 + 24);
  v25 = sub_215130028();
  v26 = *(_QWORD **)(v25 - 8);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v121 = (char *)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v126 = (char *)&v109 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v138 = (char *)&v109 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v109 - v34;
  v36 = MEMORY[0x24BDAC7A8](v33);
  v143 = (char *)&v109 - v37;
  MEMORY[0x24BDAC7A8](v36);
  v118 = (uint64_t)&v109 - v38;
  v147 = v6;
  v140 = v24;
  v40 = type metadata accessor for _RangeSetStorage(255, v6, v24, v39);
  MEMORY[0x2199DC4C4](&unk_215138AA4, v40);
  v41 = sub_2151302B0();
  v110 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v109 - v42;
  v149 = sub_21512FCEC();
  v44 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
  v113 = v4;
  v44(v43, v4, v40);
  v111 = v41;
  v45 = (uint64_t *)&v43[*(int *)(v41 + 36)];
  *v45 = 0;
  if (sub_2150C88DC(v40))
  {
    v141 = 0;
    v47 = 0;
    v117 = v23;
    v129 = v26;
    v116 = v35;
    v115 = v43;
    v114 = v45;
    v120 = v40;
    v119 = v25;
    while (1)
    {
      v49 = v118;
      sub_2150C877C(v47, v40, v46, v118);
      MEMORY[0x2199DC4C4](&unk_215138C54, v40);
      sub_21512FE0C();
      *v45 = v148;
      v50 = v143;
      v127 = (void (*)(char *, uint64_t, uint64_t))v26[4];
      v127(v143, v49, v25);
      v51 = v142;
      v52 = sub_2150C88DC(v40);
      v135 = *(void (**)(char *, uint64_t, uint64_t))(v130 + 16);
      v135(v23, v51, v146);
      v134 = (void (*)(char *, char *, uint64_t))v26[2];
      v134(v35, v50, v25);
      v54 = v141;
      if (v141 >= v52)
      {
        v60 = (void (*)(char *, uint64_t))v26[1];
LABEL_11:
        v145 = v60;
        v60(v35, v25);
        v128 = *(void (**)(char *, uint64_t))(v130 + 8);
        v128(v23, v146);
      }
      else
      {
        while (1)
        {
          v55 = (uint64_t)v138;
          sub_2150C877C(v54, v40, v53, (uint64_t)v138);
          v56 = v55 + *(int *)(v25 + 36);
          v57 = v23;
          v58 = v25;
          v59 = v139;
          (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v19, v56, v147);
          v60 = (void (*)(char *, uint64_t))v129[1];
          v60((char *)v55, v58);
          LOBYTE(v55) = sub_21512F9E0();
          v61 = *(void (**)(char *, uint64_t))(v59 + 8);
          v25 = v58;
          v23 = v57;
          v61(v19, v147);
          v60(v35, v25);
          v62 = *(void (**)(char *, uint64_t))(v130 + 8);
          v62(v57, v146);
          if ((v55 & 1) == 0)
            break;
          ++v54;
          v63 = v142;
          v64 = sub_2150C88DC(v40);
          v135(v57, v63, v146);
          v134(v35, v143, v25);
          if (v54 >= v64)
            goto LABEL_11;
        }
        v128 = v62;
        v145 = v60;
      }
      v65 = v142;
      v66 = sub_2150C88DC(v40);
      v67 = v137;
      v135(v137, v65, v146);
      v68 = v126;
      v134(v126, v143, v25);
      v70 = v40;
      v71 = v25;
      if (v54 < v66)
        break;
LABEL_3:
      v141 = v54;
      v48 = v145;
      v145(v68, v71);
      v128(v67, v146);
      v25 = v71;
      v26 = v129;
      v40 = v70;
      v48(v143, v25);
LABEL_4:
      v23 = v117;
      v35 = v116;
LABEL_5:
      v43 = v115;
      v45 = v114;
      v47 = *v114;
      if (v47 == sub_2150C88DC(v40))
        goto LABEL_21;
    }
    while (1)
    {
      v141 = v54;
      v72 = (uint64_t)v138;
      sub_2150C877C(v54, v70, v69, (uint64_t)v138);
      v73 = v139;
      v74 = v147;
      v136 = *(void (**)(char *, uint64_t, uint64_t))(v139 + 16);
      v136(v19, v72, v147);
      v75 = v145;
      v145((char *)v72, v71);
      v76 = sub_21512F9C8();
      v144 = *(void (**)(char *, uint64_t))(v73 + 8);
      v144(v19, v74);
      v145 = v75;
      v75(v68, v71);
      v128(v137, v146);
      v25 = v71;
      if ((v76 & 1) == 0)
      {
        v26 = v129;
        v40 = v70;
        v145(v143, v25);
        goto LABEL_4;
      }
      v78 = v141;
      sub_2150C877C(v141, v70, v77, v72);
      v79 = v136;
      v136(v19, v72, v74);
      v145((char *)v72, v71);
      v80 = v132;
      sub_215130478();
      v144(v19, v74);
      sub_2150C877C(v78, v70, v81, v72);
      v79(v19, v72 + *(int *)(v71 + 36), v74);
      v145((char *)v72, v71);
      v82 = &v143[*(int *)(v71 + 36)];
      v83 = v133;
      sub_215130484();
      v144(v19, v74);
      result = sub_21512F9E0();
      if ((result & 1) == 0)
        break;
      v85 = v74;
      v86 = TupleTypeMetadata2;
      v87 = v80;
      v88 = v123;
      v89 = &v123[*(int *)(TupleTypeMetadata2 + 48)];
      v131 = v82;
      v90 = (void (*)(char *, char *, uint64_t))v136;
      v136(v123, (uint64_t)v87, v74);
      v90(v89, v83, v74);
      v91 = v124;
      v92 = &v124[*(int *)(v86 + 48)];
      v90(v124, v88, v74);
      v90(v92, v89, v74);
      v93 = *(void (**)(char *, char *, uint64_t))(v139 + 32);
      v94 = v121;
      v93(v121, v91, v85);
      v144(v92, v85);
      v95 = &v91[*(int *)(v86 + 48)];
      v93(v91, v88, v85);
      v93(v95, v89, v85);
      v96 = v119;
      v97 = v120;
      v93(&v94[*(int *)(v119 + 36)], v95, v85);
      v98 = v91;
      v71 = v96;
      v99 = v144;
      v144(v98, v85);
      v100 = (uint64_t)v138;
      v127(v138, (uint64_t)v94, v96);
      sub_21512FD40();
      sub_21512FD28();
      v90(v19, v131, v85);
      v70 = v97;
      sub_2150C877C(v141, v97, v101, v100);
      v102 = v100 + *(int *)(v96 + 36);
      v103 = v100;
      v104 = v122;
      v90(v122, (char *)v102, v85);
      v145((char *)v103, v96);
      LOBYTE(v103) = sub_21512F9BC();
      v99(v104, v85);
      v99(v19, v85);
      v99(v133, v85);
      v99(v132, v85);
      if ((v103 & 1) == 0)
      {
        v145(v143, v96);
        v23 = v117;
        v25 = v96;
        v26 = v129;
        v35 = v116;
        v40 = v70;
        goto LABEL_5;
      }
      v105 = v142;
      v106 = v141 + 1;
      v107 = sub_2150C88DC(v70);
      v67 = v137;
      v135(v137, v105, v146);
      v68 = v126;
      v134(v126, v143, v71);
      v54 = v106;
      if (v106 >= v107)
        goto LABEL_3;
    }
    __break(1u);
  }
  else
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v110 + 8))(v43, v111);
    sub_21507EC54(v149, v147, v140, v108, v112);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v130 + 8))(v113, v146);
  }
  return result;
}

uint64_t sub_21507E57C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_2150C8EDC(a2, a3, a3, a4);
  v9 = sub_215130028();
  if ((sub_215130010() & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  v12 = type metadata accessor for _RangeSetStorage(0, a2, a3, v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a5, v12);
  return sub_2150C8F14(a1, a2, a3, a5);
}

uint64_t sub_21507E634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v25 = sub_215130028();
  v10 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v12 = (char *)&v24 - v11;
  v14 = type metadata accessor for _RangeSetStorage(0, v5, v9, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v24 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v24 - v16, v3, v14);
  v29 = v5;
  v30 = v9;
  v26 = a1;
  v31 = a1;
  v18 = MEMORY[0x2199DC4C4](&unk_215138AA4, v14);
  sub_2150C2524((uint64_t (*)(char *))sub_21507F48C, (uint64_t)v28, v14, v18, (char *)&v32);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v19 = v32;
  if (v19 == sub_2150C88DC(v14))
  {
    v21 = 0;
  }
  else
  {
    sub_2150C877C(v19, v14, v20, (uint64_t)v12);
    v22 = v27;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v7, v12, v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v25);
    v21 = sub_21512F9E0();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  }
  return v21 & 1;
}

uint64_t sub_21507E818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char v40;
  uint64_t (*v41)(char *, uint64_t);
  uint64_t result;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v53 = a1;
  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_215130028();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v44 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v44 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = sub_215130064();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v44 - v15;
  v59 = v2;
  v60 = v1;
  v18 = type metadata accessor for _RangeSet.Ranges(255, v1, v2, v17);
  v50 = MEMORY[0x2199DC4C4](&unk_2151378A8, v18);
  v19 = sub_215130544();
  v52 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v58 = (char *)&v44 - v21;
  v22 = *(_QWORD *)(v18 - 8);
  v54 = v18;
  v51 = v22;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v56 = (uint64_t)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v57 = (uint64_t)&v44 - v25;
  v26 = MEMORY[0x2199DC4C4](&unk_215137840, v18);
  v27 = MEMORY[0x2199DC4C4](MEMORY[0x24BEE4228], v19);
  v62 = v18;
  v63 = v19;
  v28 = v19;
  v46 = v19;
  v47 = v27;
  v48 = v26;
  v64 = v26;
  v65 = v27;
  v29 = v27;
  v49 = sub_2151301A8();
  MEMORY[0x24BDAC7A8](v49);
  v55 = (char *)&v44 - v30;
  v62 = v54;
  v63 = v28;
  v64 = v26;
  v65 = v29;
  v61 = sub_21513019C();
  v45 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v32 = (char *)&v44 - v31;
  v33 = v53;
  sub_21507DA08(v53, v34, v57);
  sub_21507DA08(v33, v35, v56);
  v36 = v54;
  sub_21512FF2C();
  v37 = v46;
  sub_215130490();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v58, v37);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v57, v36);
  sub_215130184();
  while (1)
  {
    sub_215130190();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v16, 1, TupleTypeMetadata2) == 1)return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v32, v61);
    v38 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
    v39 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v39(v12, v16, v3);
    v39(v10, v38, v3);
    LOBYTE(v38) = sub_215130010();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v10, v3);
    if ((v38 & 1) != 0)
      break;
    v40 = sub_215130010();
    v41 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
    result = v41(v7, v3);
    if ((v40 & 1) != 0)
      goto LABEL_9;
    v43 = sub_21512F9C8();
    v41(v10, v3);
    v41(v12, v3);
    if ((v43 & 1) == 0)
    {
      __break(1u);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v32, v61);
    }
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_21507EC54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_2150C8EDC(a2, a3, a3, a4);
  v10 = type metadata accessor for _RangeSetStorage(0, a2, a3, v9);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a5, v10);
  sub_2150C8F80(a1, a2, a3, v11, a5);
  v13 = type metadata accessor for _RangeSet(0, a2, a3, v12);
  return sub_21507E818(v13);
}

uint64_t sub_21507ECE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for _RangeSetStorage(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return sub_2150C9B30(a1, v6, a3);
}

uint64_t sub_21507ED28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[72];

  sub_2151305A4();
  v5 = type metadata accessor for _RangeSetStorage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v4);
  sub_2150C9B30((uint64_t)v7, v5, a2);
  return sub_2151305EC();
}

uint64_t sub_21507ED88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21507ECE0(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_21507ED94(uint64_t a1, uint64_t a2)
{
  return sub_21507ED28(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_21507ED9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21507ECE4(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t sub_21507EDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[72];

  v4 = *(_QWORD *)(a3 - 8);
  sub_2151305A4();
  sub_21507ECE4((uint64_t)v7, a2, v4, v5);
  return sub_2151305EC();
}

uint64_t sub_21507EDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for _RangeSetStorage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  return sub_2150C88DC(v4);
}

uint64_t sub_21507EE10()
{
  MEMORY[0x2199DC4C4](&unk_2151377F0);
  return sub_21512FE18();
}

_QWORD *sub_21507EE60(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_21507F144(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1880]);
}

uint64_t sub_21507EE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&unk_2151377F0, a3);
  return sub_21512FE24();
}

uint64_t sub_21507EED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x2199DC4C4](&unk_2151377F0, a4);
  return sub_21512FE00();
}

uint64_t sub_21507EF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199DC4C4](&unk_2151377F0, a3);
  return sub_21512FE3C();
}

uint64_t sub_21507EF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = sub_21507EDF4(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

void (*sub_21507EFAC(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_21507F008(v6, *a2, a3);
  return sub_215029390;
}

void (*sub_21507F008(uint64_t *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = sub_215130028();
  *a1 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  a1[1] = v8;
  v9 = malloc(*(_QWORD *)(v8 + 64));
  a1[2] = (uint64_t)v9;
  v11 = type metadata accessor for _RangeSetStorage(0, v5, v6, v10);
  sub_2150C877C(a2, v11, v12, (uint64_t)v9);
  return sub_21506DF04;
}

uint64_t sub_21507F098(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&unk_2151377F0, a1);
  return sub_21512FE30();
}

uint64_t sub_21507F0E8()
{
  MEMORY[0x2199DC4C4](&unk_2151377F0);
  return sub_21512FE0C();
}

_QWORD *sub_21507F138(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_21507F144(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1878]);
}

_QWORD *sub_21507F144(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x2199DC4C4](&unk_2151377F0);
  result = a4(&v9, a1, a2, v7, MEMORY[0x24BEE17A8]);
  *a1 = v9;
  return result;
}

uint64_t sub_21507F1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v4, a1);
  MEMORY[0x2199DC4C4](&unk_2151378A8, a1);
  result = sub_2151302B0();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t sub_21507F208(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&unk_2151378A8, a1);
  return sub_21512FEC0();
}

uint64_t sub_21507F23C(uint64_t a1)
{
  MEMORY[0x2199DC4C4](&unk_2151378A8, a1);
  return sub_21512FECC();
}

uint64_t sub_21507F270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for _RangeSetStorage(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v15[-v9];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(&v15[-v9], v4, v7);
  v16 = v5;
  v17 = v6;
  v11 = MEMORY[0x2199DC4C4](&unk_215138AA4, v7);
  v13 = sub_2150ED6A0((void (*)(char *, char *))sub_21507F4F8, (uint64_t)v15, v7, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v12);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  v18 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7D80);
  sub_21507F514();
  sub_21512F9B0();
  swift_bridgeObjectRelease();
  v18 = 0x655365676E61525FLL;
  v19 = 0xEA00000000002874;
  sub_21512FB90();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  return v18;
}

uint64_t sub_21507F3D4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_215130418();
  sub_21512FB90();
  sub_215130028();
  result = sub_215130418();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

void sub_21507F470()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t type metadata accessor for _RangeSet.Ranges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _RangeSet.Ranges);
}

uint64_t sub_21507F48C()
{
  sub_215130028();
  return sub_21512F9BC() & 1;
}

uint64_t sub_21507F4F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_21507F3D4(a1);
}

unint64_t sub_21507F514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254DA7D88;
  if (!qword_254DA7D88)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254DA7D80);
    result = MEMORY[0x2199DC4C4](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_254DA7D88);
  }
  return result;
}

uint64_t sub_21507F560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for _RangeSetStorage._Storage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_21507F5CC(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, unsigned __int8 *, uint64_t);

  v4 = __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  v10 = v7 + v8;
  v11 = ((v7 + v9) & ~v9) + v7;
  if (v11 <= 8)
    v12 = 8;
  else
    v12 = v11;
  if (v8 > 7u || (v8 & 0x100000) != 0 || (unint64_t)(v12 + 1) > 0x18)
  {
    v15 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v15 + ((v8 & 0xF8 ^ 0x1F8u) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    v16 = __src[v12];
    if (v16 >= 2)
    {
      if (v12 <= 3)
        v17 = v12;
      else
        v17 = 4;
      __asm { BR              X14 }
    }
    if (v16 == 1)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v12] = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v18 = ~v9;
      v19 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16);
      v19(__dst, __src, v5);
      v19((_BYTE *)(((unint64_t)v4 + v10) & v18), (unsigned __int8 *)((unint64_t)&__src[v10] & v18), v5);
      *((_BYTE *)v4 + v12) = 0;
    }
  }
  return v4;
}

uint64_t sub_21507F748(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void (*v13)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = ((v5 + v6) & ~v6) + v5;
  if (v8 <= 8)
    v8 = 8;
  v9 = *(unsigned __int8 *)(a1 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X15 }
  }
  if (v9 == 1)
    return swift_bridgeObjectRelease();
  v11 = ~v6;
  v13 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v13(a1, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v13)((v7 + a1) & v11, v3);
}

_BYTE *sub_21507F870(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, unsigned __int8 *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  v10 = ((v7 + v8) & ~v8) + v7;
  if (v10 <= 8)
    v11 = 8;
  else
    v11 = v10;
  v12 = __src[v11];
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  if (v12 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v11] = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = ~v8;
    v15 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16);
    v15(__dst, __src, *(_QWORD *)(a3 + 16));
    v15((_BYTE *)((unint64_t)&__dst[v9] & v14), (unsigned __int8 *)((unint64_t)&__src[v9] & v14), v5);
    __dst[v11] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_21507F9B0(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(unsigned __int8 *, uint64_t);
  unsigned int v16;
  uint64_t v17;
  void (*v18)(unsigned __int8 *, unsigned __int8 *, uint64_t);

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    v10 = ((v7 + v8) & ~v8) + v7;
    if (v10 <= 8)
      v11 = 8;
    else
      v11 = v10;
    v12 = __dst[v11];
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X13 }
    }
    v14 = ~v8;
    if (v12 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v15(__dst, *(_QWORD *)(a3 + 16));
      v15((unsigned __int8 *)((unint64_t)&__dst[v9] & v14), v5);
    }
    v16 = __src[v11];
    if (v16 >= 2)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v11] = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v18 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
      v18(__dst, __src, v5);
      v18((unsigned __int8 *)((unint64_t)&__dst[v9] & v14), (unsigned __int8 *)((unint64_t)&__src[v9] & v14), v5);
      __dst[v11] = 0;
    }
  }
  return __dst;
}

_BYTE *sub_21507FBA0(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, unsigned __int8 *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  v10 = ((v7 + v8) & ~v8) + v7;
  if (v10 <= 8)
    v11 = 8;
  else
    v11 = v10;
  v12 = __src[v11];
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  if (v12 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v11] = 1;
  }
  else
  {
    v14 = ~v8;
    v15 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32);
    v15(__dst, __src, *(_QWORD *)(a3 + 16));
    v15((_BYTE *)((unint64_t)&__dst[v9] & v14), (unsigned __int8 *)((unint64_t)&__src[v9] & v14), v5);
    __dst[v11] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_21507FCDC(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(unsigned __int8 *, uint64_t);
  unsigned int v16;
  uint64_t v17;
  void (*v18)(unsigned __int8 *, unsigned __int8 *, uint64_t);

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    v10 = ((v7 + v8) & ~v8) + v7;
    if (v10 <= 8)
      v11 = 8;
    else
      v11 = v10;
    v12 = __dst[v11];
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X13 }
    }
    v14 = ~v8;
    if (v12 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v15(__dst, *(_QWORD *)(a3 + 16));
      v15((unsigned __int8 *)((unint64_t)&__dst[v9] & v14), v5);
    }
    v16 = __src[v11];
    if (v16 >= 2)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v11] = 1;
    }
    else
    {
      v18 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
      v18(__dst, __src, v5);
      v18((unsigned __int8 *)((unint64_t)&__dst[v9] & v14), (unsigned __int8 *)((unint64_t)&__src[v9] & v14), v5);
      __dst[v11] = 0;
    }
  }
  return __dst;
}

uint64_t sub_21507FEC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8)
    v3 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64)
         + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21507FF9C + 4 * byte_2151376A8[(v4 - 1)]))();
}

void sub_21507FFE8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

void sub_2150801A0()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_2150801B0(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x2199DC4C4](&unk_215137790);
  return MEMORY[0x2199DC4C4](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_2150801F8()
{
  JUMPOUT(0x2199DC4C4);
}

uint64_t sub_215080208(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x2199DC4C4](&unk_2151377F0);
  return MEMORY[0x2199DC4C4](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_215080250()
{
  JUMPOUT(0x2199DC4C4);
}

__n128 __swift_memcpy232_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

ValueMetadata *type metadata accessor for IntegerColumnProcessor()
{
  return &type metadata for IntegerColumnProcessor;
}

uint64_t destroy for BooleanColumnProcessor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for BooleanColumnProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  v7 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v7;
  v8 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BooleanColumnProcessor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_BYTE *)(a1 + 187) = *(_BYTE *)(a2 + 187);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy248_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for BooleanColumnProcessor(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_WORD *)(a1 + 59) = *(_WORD *)(a2 + 59);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_WORD *)(a1 + 187) = *(_WORD *)(a2 + 187);
  v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v5;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BooleanColumnProcessor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 248))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BooleanColumnProcessor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 248) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 248) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BooleanColumnProcessor()
{
  return &type metadata for BooleanColumnProcessor;
}

ValueMetadata *type metadata accessor for StringColumnProcessor()
{
  return &type metadata for StringColumnProcessor;
}

uint64_t _s11TabularData22IntegerColumnProcessorVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s11TabularData22IntegerColumnProcessorVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v7;
  v8 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s11TabularData22IntegerColumnProcessorVwca_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s11TabularData22IntegerColumnProcessorVwta_0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_WORD *)(a1 + 59) = *(_WORD *)(a2 + 59);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  *(_WORD *)(a1 + 171) = *(_WORD *)(a2 + 171);
  v5 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v5;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_release();
  return a1;
}

uint64_t _s11TabularData22IntegerColumnProcessorVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 232))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_215080FE8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 232) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BinaryColumnProcessor()
{
  return &type metadata for BinaryColumnProcessor;
}

uint64_t sub_215081070(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v2 = *(_QWORD *)(v1 + 200);
  v3 = *(_QWORD *)(v1 + 216);
  v4 = v2 + v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFADD__(v4, result))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v1 + 208) >= v4 + result)
    v5 = v4 + result;
  else
    v5 = *(_QWORD *)(v1 + 208);
  v6 = v5 - v4;
  if (v5 < v4)
    goto LABEL_12;
  if (__OFSUB__(v5, v4))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = __OFADD__(v3, v6);
  v8 = v3 + v6;
  if (!v7)
  {
    *(_QWORD *)(v1 + 216) = v8;
    v9 = *(_BYTE *)(v1 + 8);
    v10 = *(_QWORD *)(v1 + 32);
    v11 = *(_BYTE *)(v1 + 40);
    v12 = *(_QWORD *)(v1 + 48);
    v13 = *(_BYTE *)(v1 + 56);
    v14 = *(_BYTE *)(v1 + 57);
    v15 = *(_BYTE *)(v1 + 58);
    v16 = *(_WORD *)(v1 + 59);
    v17 = *(_QWORD *)(v1 + 96);
    v19 = *(_QWORD *)v1;
    v20 = v9;
    v21 = *(_OWORD *)(v1 + 16);
    v22 = v10;
    v23 = v11;
    v24 = v12;
    v25 = v13;
    v26 = v14;
    v27 = v15;
    v28 = v16;
    v18 = *(_OWORD *)(v1 + 80);
    v29 = *(_OWORD *)(v1 + 64);
    v30 = v18;
    v31 = v17;
    return sub_21505DB68(*(_QWORD *)(v1 + 192), v4, v5, &v19, (uint64_t *)v1);
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_21508114C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v2 = v1[26];
  v3 = v1[28];
  v4 = v2 + v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFADD__(v4, result))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v1[27] >= v4 + result)
    v5 = v4 + result;
  else
    v5 = v1[27];
  v6 = v5 - v4;
  if (v5 < v4)
    goto LABEL_12;
  if (__OFSUB__(v5, v4))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = __OFADD__(v3, v6);
  v8 = v3 + v6;
  if (!v7)
  {
    v1[28] = v8;
    v9 = *((_BYTE *)v1 + 8);
    v10 = v1[4];
    v11 = *((_BYTE *)v1 + 40);
    v12 = v1[6];
    v13 = *((_BYTE *)v1 + 56);
    v14 = *((_BYTE *)v1 + 57);
    v15 = *((_BYTE *)v1 + 58);
    v16 = *(_WORD *)((char *)v1 + 59);
    v17 = v1[12];
    v19 = *v1;
    v20 = v9;
    v21 = *((_OWORD *)v1 + 1);
    v22 = v10;
    v23 = v11;
    v24 = v12;
    v25 = v13;
    v26 = v14;
    v27 = v15;
    v28 = v16;
    v18 = *((_OWORD *)v1 + 5);
    v29 = *((_OWORD *)v1 + 4);
    v30 = v18;
    v31 = v17;
    return sub_21505F038(v1[25], v4, v5, &v19);
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_215081228(uint64_t result, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  __int16 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v4 = v2[23];
  v5 = v2[25];
  v6 = v4 + v5;
  if (__OFADD__(v4, v5))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFADD__(v6, result))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2[24] >= v6 + result)
    v7 = v6 + result;
  else
    v7 = v2[24];
  v8 = v7 - v6;
  if (v7 < v6)
    goto LABEL_12;
  if (__OFSUB__(v7, v6))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = __OFADD__(v5, v8);
  v10 = v5 + v8;
  if (!v9)
  {
    v2[25] = v10;
    v11 = *((_BYTE *)v2 + 8);
    v12 = v2[4];
    v13 = *((_BYTE *)v2 + 40);
    v14 = v2[6];
    v15 = *((_BYTE *)v2 + 56);
    v16 = *((_BYTE *)v2 + 57);
    v17 = *((_BYTE *)v2 + 58);
    v18 = *(_WORD *)((char *)v2 + 59);
    v19 = v2[12];
    v21 = *v2;
    v22 = v11;
    v23 = *((_OWORD *)v2 + 1);
    v24 = v12;
    v25 = v13;
    v26 = v14;
    v27 = v15;
    v28 = v16;
    v29 = v17;
    v30 = v18;
    v20 = *((_OWORD *)v2 + 5);
    v31 = *((_OWORD *)v2 + 4);
    v32 = v20;
    v33 = v19;
    return a2(v2[22]);
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_215081308@<X0>(_QWORD *a1@<X8>)
{
  return sub_215081404(&qword_253F0D450, a1);
}

uint64_t sub_215081314(uint64_t a1)
{
  return sub_215081228(a1, (uint64_t (*)(uint64_t))sub_21505D26C);
}

uint64_t sub_215081330@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v1[28];
  v3 = v1[29];
  v5 = v1[30];
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D1A8);
  a1[4] = &off_24D2A4440;
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v5;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_215081388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 224) = a1;
  *(_QWORD *)(v2 + 232) = a2;
  return result;
}

uint64_t sub_2150813BC(uint64_t a1)
{
  return sub_215081070(a1);
}

uint64_t sub_2150813D0@<X0>(_QWORD *a1@<X8>)
{
  return sub_215081404(&qword_253F0D440, a1);
}

uint64_t sub_2150813DC(uint64_t a1)
{
  return sub_215081228(a1, (uint64_t (*)(uint64_t))sub_21505E320);
}

uint64_t sub_2150813F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_215081404(&qword_254DA74F8, a1);
}

uint64_t sub_215081404@<X0>(uint64_t *a1@<X2>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[26];
  v4 = v2[27];
  v6 = v2[28];
  a2[3] = __swift_instantiateConcreteTypeFromMangledName(a1);
  a2[4] = &off_24D2A4440;
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v6;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_215081458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 208) = a1;
  *(_QWORD *)(v2 + 216) = a2;
  return result;
}

uint64_t sub_21508148C(uint64_t a1)
{
  return sub_215081228(a1, (uint64_t (*)(uint64_t))sub_21505E9EC);
}

uint64_t sub_2150814A8(uint64_t a1)
{
  return sub_21508114C(a1);
}

uint64_t sub_2150814BC(uint64_t a1)
{
  return sub_215081228(a1, (uint64_t (*)(uint64_t))sub_21505F31C);
}

uint64_t sub_2150814D8(uint64_t a1)
{
  return sub_215081228(a1, (uint64_t (*)(uint64_t))sub_21505FAEC);
}

ValueMetadata *type metadata accessor for ProcessedRows()
{
  return &type metadata for ProcessedRows;
}

TabularData::DataFrame __swiftcall DataFrame.summary()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  TabularData::DataFrame result;

  v1 = v0;
  v2 = swift_bridgeObjectRetain();
  sub_21508153C(v2, v1);
  v3 = (void *)swift_bridgeObjectRelease();
  result.columnIndicesByName._rawValue = v5;
  result.aliases._rawValue = v4;
  result.columns._rawValue = v3;
  return result;
}

uint64_t sub_21508153C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  _UNKNOWN **v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  _UNKNOWN **v83;
  _UNKNOWN **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _UNKNOWN **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[40];
  _QWORD v99[3];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;

  v3 = *(_QWORD *)(a1 + 16);
  v135 = 0x6E6D756C6F63;
  v136 = 0xE600000000000000;
  v4 = MEMORY[0x24BEE4AF8];
  v137 = sub_215043B48(MEMORY[0x24BEE4AF8]);
  sub_2150EE06C(v3);
  v132 = 1851876717;
  v133 = 0xE400000000000000;
  sub_215043D68(v4);
  v134 = v5;
  sub_2150EE050(v3);
  v129 = 6583411;
  v130 = 0xE300000000000000;
  sub_215043D68(v4);
  v131 = v6;
  sub_2150EE050(v3);
  v126 = 7235949;
  v127 = 0xE300000000000000;
  sub_215043D68(v4);
  v128 = v7;
  sub_2150EE050(v3);
  v123 = 7889261;
  v124 = 0xE300000000000000;
  sub_215043D68(v4);
  v125 = v8;
  sub_2150EE050(v3);
  v120 = 0x6E616964656DLL;
  v121 = 0xE600000000000000;
  sub_215043D68(v4);
  v122 = v9;
  sub_2150EE050(v3);
  v117 = 12625;
  v118 = 0xE200000000000000;
  sub_215043D68(v4);
  v119 = v10;
  sub_2150EE050(v3);
  v114 = 13137;
  v115 = 0xE200000000000000;
  sub_215043D68(v4);
  v116 = v11;
  sub_2150EE050(v3);
  v111 = 1701080941;
  v112 = 0xE400000000000000;
  v113 = sub_21504400C(v4);
  sub_2150EE02C(v3);
  v108 = 0x6F43657571696E75;
  v109 = 0xEB00000000746E75;
  sub_215043454(v4);
  v110 = v12;
  sub_2150EE010(v3);
  v105 = 0x6E756F43656E6F6ELL;
  v106 = 0xE900000000000074;
  sub_215043454(v4);
  v107 = v13;
  sub_2150EE010(v3);
  v102 = 0x6E756F43656D6F73;
  v103 = 0xE900000000000074;
  sub_215043454(v4);
  v104 = v14;
  sub_2150EE010(v3);
  if (!v3)
  {
LABEL_33:
    v66 = sub_2150203D0(v4);
    *a2 = v4;
    a2[1] = v4;
    a2[2] = v66;
    v68 = v135;
    v67 = v136;
    v69 = v137;
    v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D440);
    v91 = &off_24D2A4440;
    v87 = v68;
    v88 = v67;
    v89 = v69;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v70 = v132;
    v71 = v133;
    v72 = v134;
    v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D448);
    v90 = v73;
    v91 = &off_24D2A4440;
    v87 = v70;
    v88 = v71;
    v89 = v72;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v90 = v73;
    v91 = &off_24D2A4440;
    v87 = v129;
    v88 = v130;
    v89 = v131;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v90 = v73;
    v91 = &off_24D2A4440;
    v87 = v126;
    v88 = v127;
    v89 = v128;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v90 = v73;
    v91 = &off_24D2A4440;
    v87 = v123;
    v88 = v124;
    v89 = v125;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v90 = v73;
    v91 = &off_24D2A4440;
    v87 = v120;
    v88 = v121;
    v89 = v122;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v90 = v73;
    v91 = &off_24D2A4440;
    v87 = v117;
    v88 = v118;
    v89 = v119;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v90 = v73;
    v91 = &off_24D2A4440;
    v87 = v114;
    v88 = v115;
    v89 = v116;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v74 = v111;
    v75 = v112;
    v76 = v113;
    v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA8198);
    v91 = &off_24D2A4440;
    v87 = v74;
    v88 = v75;
    v89 = v76;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v77 = v108;
    v78 = v109;
    v79 = v110;
    v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D450);
    v90 = v80;
    v91 = &off_24D2A4440;
    v87 = v77;
    v88 = v78;
    v89 = v79;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v90 = v80;
    v91 = &off_24D2A4440;
    v87 = v105;
    v88 = v106;
    v89 = v107;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    v90 = v80;
    v91 = &off_24D2A4440;
    v87 = v102;
    v88 = v103;
    v89 = v104;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v87);
    sub_21501EA34((uint64_t)&v87);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v15 = a1 + 32;
  swift_bridgeObjectRetain();
  v16 = 0;
  while (1)
  {
    sub_21501EE90(v15, (uint64_t)v99);
    v31 = v100;
    v32 = v101;
    __swift_project_boxed_opaque_existential_1(v99, v100);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v32 + 8) + 8))(v31);
    sub_2150EE79C(v33, v34);
    swift_bridgeObjectRelease();
    sub_2150514D8(&v87);
    v35 = v87;
    v36 = v88;
    v37 = v89;
    v38 = swift_bridgeObjectRetain();
    sub_2150EEC48(v38);
    swift_bridgeObjectRelease();
    sub_2150EE414(v37, 0);
    sub_2150EE414(v36, 0);
    sub_2150EE414(v35, 0);
    swift_bridgeObjectRelease();
    sub_21504C608((uint64_t)v99, (uint64_t)v98);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D178);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D448);
    if ((swift_dynamicCast() & 1) != 0)
      break;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7500);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v43 = v96;
      v44 = v97;
      result = swift_beginAccess();
      v45 = *(uint64_t **)(v44 + 16);
      if (!v45)
        goto LABEL_37;
      v46 = *v45 + 7;
      if (__OFADD__(*v45, 7))
        goto LABEL_34;
      if (v46 < 0)
        v46 = *v45 + 14;
      v47 = v46 >> 3;
      v48 = v47 - 1;
      v19 = v47 < 1;
      v49 = v47 + 62;
      if (!v19)
        v49 = v48;
      sub_215083658((uint64_t)v45 + (v49 & 0xFFFFFFFFFFFFFFC0) + 128, *v45, v43, v44, (uint64_t)&v87);
      v50 = v89;
      v51 = *(float *)&v90;
      v52 = v91;
      v53 = *(float *)&v92;
      sub_2150EE5C4(COERCE__INT64(*((float *)&v90 + 1)), 0);
      sub_2150EE5C4(COERCE__INT64(*(float *)&v52), 0);
      sub_2150EE5C4(COERCE__INT64(*((float *)&v52 + 1)), 0);
      sub_2150EE5C4(COERCE__INT64(v53), 0);
      sub_2150EE5C4(COERCE__INT64(*(float *)&v50), 0);
      sub_2150EE5C4(COERCE__INT64(*((float *)&v50 + 1)), 0);
      *(double *)&v30 = v51;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D450);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_2150EE5C4(0, 1);
        sub_2150EE5C4(0, 1);
        sub_2150EE5C4(0, 1);
        sub_2150EE5C4(0, 1);
        sub_2150EE5C4(0, 1);
        sub_2150EE5C4(0, 1);
        sub_2150EE5C4(0, 1);
        goto LABEL_9;
      }
      v54 = v96;
      v55 = v97;
      result = swift_beginAccess();
      v56 = *(uint64_t **)(v55 + 16);
      if (!v56)
        goto LABEL_38;
      v57 = *v56 + 7;
      if (__OFADD__(*v56, 7))
        goto LABEL_35;
      if (v57 < 0)
        v57 = *v56 + 14;
      v58 = v57 >> 3;
      v59 = v58 - 1;
      v19 = v58 < 1;
      v60 = v58 + 62;
      if (!v19)
        v60 = v59;
      sub_2150848F8((uint64_t)v56 + (v60 & 0xFFFFFFFFFFFFFFC0) + 128, *v56, v54, v55, (uint64_t)&v87);
      v86 = v15;
      v61 = v89;
      v82 = v90;
      v84 = v91;
      v62 = v93;
      v63 = v94;
      v64 = v95;
      sub_2150EE5C4(v92, 0);
      sub_2150EE5C4(v62, 0);
      sub_2150EE5C4(v63, 0);
      sub_2150EE5C4(v64, 0);
      v65 = v61;
      v15 = v86;
      sub_2150EE5C4(v65, 0);
      sub_2150EE5C4(v82, 0);
      v30 = (uint64_t)v84;
    }
LABEL_8:
    sub_2150EE5C4(v30, 0);
    swift_release();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_21501EA34((uint64_t)v99);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v98);
    v15 += 40;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      v4 = MEMORY[0x24BEE4AF8];
      goto LABEL_33;
    }
  }
  v39 = v96;
  v40 = v97;
  result = swift_beginAccess();
  v42 = *(uint64_t **)(v40 + 16);
  if (!v42)
    goto LABEL_36;
  v17 = *v42 + 7;
  if (!__OFADD__(*v42, 7))
  {
    if (v17 < 0)
      v17 = *v42 + 14;
    v18 = v17 >> 3;
    v20 = v18 - 1;
    v19 = v18 < 1;
    v21 = v18 + 62;
    if (!v19)
      v21 = v20;
    sub_215083894((uint64_t)v42 + (v21 & 0xFFFFFFFFFFFFFFC0) + 128, *v42, v39, v40, (uint64_t)&v87);
    v22 = v16;
    v23 = v89;
    v24 = v90;
    v83 = v91;
    v85 = v3;
    v25 = v93;
    v26 = v94;
    v27 = v15;
    v28 = v95;
    sub_2150EE5C4(v92, 0);
    sub_2150EE5C4(v25, 0);
    sub_2150EE5C4(v26, 0);
    v29 = v28;
    v15 = v27;
    v16 = v22;
    sub_2150EE5C4(v29, 0);
    sub_2150EE5C4(v23, 0);
    sub_2150EE5C4(v24, 0);
    v30 = (uint64_t)v83;
    v3 = v85;
    goto LABEL_8;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t DataFrame.summary(of:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_215085238(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = sub_21508546C(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21508153C(v7, a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t DataFrame.summary(ofColumns:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_21508546C(a1, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21508153C(v6, a2);
  return swift_bridgeObjectRelease();
}

TabularData::DataFrame __swiftcall DataFrame.Slice.summary()()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  _OWORD v10[2];
  TabularData::DataFrame result;

  v2 = v0;
  v3 = v1[1];
  v9 = *v1;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)v1 + 25);
  sub_2150451E0((uint64_t)&v9);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_215043204(v4, (uint64_t)&v9);
  sub_215045244((uint64_t)&v9);
  swift_bridgeObjectRelease();
  sub_215082410(v5, v2);
  v6 = (void *)swift_bridgeObjectRelease();
  result.columnIndicesByName._rawValue = v8;
  result.aliases._rawValue = v7;
  result.columns._rawValue = v6;
  return result;
}

uint64_t sub_215082410@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  _UNKNOWN **v60;
  float v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  _UNKNOWN **v84;
  float v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _UNKNOWN **v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  _BYTE v125[25];
  _BYTE v126[40];
  _QWORD v127[3];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _OWORD v166[2];
  uint64_t v167;
  _OWORD v168[2];
  uint64_t v169;
  _OWORD v170[2];
  uint64_t v171;
  __int128 v172;
  _OWORD v173[2];
  __int128 v174;
  _OWORD v175[2];
  __int128 v176;
  _OWORD v177[2];
  uint64_t v178;
  uint64_t v179;
  uint64_t v180[3];

  v3 = *(_QWORD *)(a1 + 16);
  v163 = 0x6E6D756C6F63;
  v164 = 0xE600000000000000;
  v4 = MEMORY[0x24BEE4AF8];
  v165 = sub_215043B48(MEMORY[0x24BEE4AF8]);
  sub_2150EE06C(v3);
  v160 = 1851876717;
  v161 = 0xE400000000000000;
  sub_215043D68(v4);
  v162 = v5;
  sub_2150EE050(v3);
  v157 = 6583411;
  v158 = 0xE300000000000000;
  sub_215043D68(v4);
  v159 = v6;
  sub_2150EE050(v3);
  v154 = 7235949;
  v155 = 0xE300000000000000;
  sub_215043D68(v4);
  v156 = v7;
  sub_2150EE050(v3);
  v151 = 7889261;
  v152 = 0xE300000000000000;
  sub_215043D68(v4);
  v153 = v8;
  sub_2150EE050(v3);
  v148 = 0x6E616964656DLL;
  v149 = 0xE600000000000000;
  sub_215043D68(v4);
  v150 = v9;
  sub_2150EE050(v3);
  v145 = 12625;
  v146 = 0xE200000000000000;
  sub_215043D68(v4);
  v147 = v10;
  sub_2150EE050(v3);
  v142 = 13137;
  v143 = 0xE200000000000000;
  sub_215043D68(v4);
  v144 = v11;
  sub_2150EE050(v3);
  v139 = 1701080941;
  v140 = 0xE400000000000000;
  v141 = sub_21504400C(v4);
  sub_2150EE02C(v3);
  v136 = 0x6F43657571696E75;
  v137 = 0xEB00000000746E75;
  sub_215043454(v4);
  v138 = v12;
  sub_2150EE010(v3);
  v133 = 0x6E756F43656E6F6ELL;
  v134 = 0xE900000000000074;
  sub_215043454(v4);
  v135 = v13;
  sub_2150EE010(v3);
  v130 = 0x6E756F43656D6F73;
  v131 = 0xE900000000000074;
  sub_215043454(v4);
  v132 = v14;
  sub_2150EE010(v3);
  if (!v3)
  {
LABEL_57:
    v98 = MEMORY[0x24BEE4AF8];
    v99 = sub_2150203D0(MEMORY[0x24BEE4AF8]);
    *a2 = v98;
    a2[1] = v98;
    a2[2] = v99;
    v100 = v163;
    v101 = v164;
    v102 = v165;
    v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D440);
    v119 = &off_24D2A4440;
    v115 = v100;
    v116 = v101;
    v117 = v102;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v103 = v160;
    v104 = v161;
    v105 = v162;
    v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D448);
    v118 = v106;
    v119 = &off_24D2A4440;
    v115 = v103;
    v116 = v104;
    v117 = v105;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v118 = v106;
    v119 = &off_24D2A4440;
    v115 = v157;
    v116 = v158;
    v117 = v159;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v118 = v106;
    v119 = &off_24D2A4440;
    v115 = v154;
    v116 = v155;
    v117 = v156;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v118 = v106;
    v119 = &off_24D2A4440;
    v115 = v151;
    v116 = v152;
    v117 = v153;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v118 = v106;
    v119 = &off_24D2A4440;
    v115 = v148;
    v116 = v149;
    v117 = v150;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v118 = v106;
    v119 = &off_24D2A4440;
    v115 = v145;
    v116 = v146;
    v117 = v147;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v118 = v106;
    v119 = &off_24D2A4440;
    v115 = v142;
    v116 = v143;
    v117 = v144;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v107 = v139;
    v108 = v140;
    v109 = v141;
    v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_254DA8198);
    v119 = &off_24D2A4440;
    v115 = v107;
    v116 = v108;
    v117 = v109;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v110 = v136;
    v111 = v137;
    v112 = v138;
    v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_253F0D450);
    v118 = v113;
    v119 = &off_24D2A4440;
    v115 = v110;
    v116 = v111;
    v117 = v112;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v118 = v113;
    v119 = &off_24D2A4440;
    v115 = v133;
    v116 = v134;
    v117 = v135;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    v118 = v113;
    v119 = &off_24D2A4440;
    v115 = v130;
    v116 = v131;
    v117 = v132;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    DataFrame.append(column:)((uint64_t)&v115);
    sub_21501EA34((uint64_t)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v15 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_2150452A8(v15, (uint64_t)v127);
    v29 = v128;
    v30 = v129;
    __swift_project_boxed_opaque_existential_1(v127, v128);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v30 + 8) + 8))(v29);
    sub_2150EE79C(v31, v32);
    swift_bridgeObjectRelease();
    AnyColumnSlice.summary()(&v115);
    v33 = v115;
    v34 = v116;
    v35 = v117;
    v36 = swift_bridgeObjectRetain();
    sub_2150EEC48(v36);
    swift_bridgeObjectRelease();
    sub_2150EE414(v35, 0);
    sub_2150EE414(v34, 0);
    sub_2150EE414(v33, 0);
    swift_bridgeObjectRelease();
    sub_21504C608((uint64_t)v127, (uint64_t)v126);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C30);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C68);
    if ((swift_dynamicCast() & 1) != 0)
      break;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C58);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v168[0] = v124;
      v168[1] = *(_OWORD *)v125;
      v51 = *(_QWORD *)&v125[16];
      v169 = *(_QWORD *)&v125[16];
      v179 = *(_QWORD *)&v125[16];
      result = swift_beginAccess();
      v52 = *(_QWORD **)(v51 + 16);
      if (!v52)
        goto LABEL_65;
      v53 = *v52 + 7;
      if (__OFADD__(*v52, 7))
        goto LABEL_59;
      if (v53 < 0)
        v53 = *v52 + 14;
      v54 = v53 >> 3;
      v55 = v54 - 1;
      v18 = v54 < 1;
      v56 = v54 + 62;
      if (!v18)
        v56 = v55;
      v57 = (uint64_t)v52 + (v56 & 0xFFFFFFFFFFFFFFC0) + 128;
      swift_retain();
      sub_215083AD0(v57, (uint64_t)v168, (uint64_t)&v115);
      sub_21508588C((uint64_t)&v179);
      v58 = v117;
      v59 = *(float *)&v118;
      v60 = v119;
      v61 = *(float *)&v120;
      sub_2150EE5C4(COERCE__INT64(*((float *)&v118 + 1)), 0);
      sub_2150EE5C4(COERCE__INT64(*(float *)&v60), 0);
      sub_2150EE5C4(COERCE__INT64(*((float *)&v60 + 1)), 0);
      sub_2150EE5C4(COERCE__INT64(v61), 0);
      sub_2150EE5C4(COERCE__INT64(*(float *)&v58), 0);
      sub_2150EE5C4(COERCE__INT64(*((float *)&v58 + 1)), 0);
      sub_2150EE5C4(COERCE__INT64(v59), 0);
      v28 = v168;
      goto LABEL_8;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C38);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v170[0] = v124;
      v170[1] = *(_OWORD *)v125;
      v62 = *(_QWORD *)&v125[16];
      v171 = *(_QWORD *)&v125[16];
      v178 = *(_QWORD *)&v125[16];
      result = swift_beginAccess();
      v63 = *(_QWORD **)(v62 + 16);
      if (!v63)
        goto LABEL_66;
      v16 = *v63 + 7;
      if (__OFADD__(*v63, 7))
        goto LABEL_60;
      if (v16 < 0)
        v16 = *v63 + 14;
      v17 = v16 >> 3;
      v19 = v17 - 1;
      v18 = v17 < 1;
      v20 = v17 + 62;
      if (!v18)
        v20 = v19;
      v21 = (uint64_t)v63 + (v20 & 0xFFFFFFFFFFFFFFC0) + 128;
      swift_retain();
      sub_215084B30(v21, (uint64_t)v170, (uint64_t)&v115);
      sub_21508588C((uint64_t)&v178);
      v22 = v117;
      v23 = v118;
      v24 = (uint64_t)v119;
      v25 = v121;
      v26 = v122;
      v27 = v123;
      sub_2150EE5C4(v120, 0);
      sub_2150EE5C4(v25, 0);
      sub_2150EE5C4(v26, 0);
      sub_2150EE5C4(v27, 0);
      sub_2150EE5C4(v22, 0);
      sub_2150EE5C4(v23, 0);
      sub_2150EE5C4(v24, 0);
      v28 = v170;
      goto LABEL_8;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C70);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v172 = v124;
      v173[0] = *(_OWORD *)v125;
      *(_OWORD *)((char *)v173 + 9) = *(_OWORD *)&v125[9];
      v64 = *(_QWORD *)v125;
      result = swift_beginAccess();
      v65 = *(_QWORD **)(v64 + 16);
      if (!v65)
        goto LABEL_67;
      v66 = *v65 + 7;
      if (__OFADD__(*v65, 7))
        goto LABEL_61;
      if (v66 < 0)
        v66 = *v65 + 14;
      v67 = v66 >> 3;
      v68 = v67 - 1;
      v18 = v67 < 1;
      v69 = v67 + 62;
      if (!v18)
        v69 = v68;
      sub_2150844B4((uint64_t)v65 + (v69 & 0xFFFFFFFFFFFFFFC0) + 128, &v172, (uint64_t)&v115);
      v70 = v117;
      v71 = v118;
      v72 = (uint64_t)v119;
      v73 = v121;
      v74 = v122;
      v75 = v123;
      sub_2150EE5C4(v120, 0);
      sub_2150EE5C4(v73, 0);
      sub_2150EE5C4(v74, 0);
      sub_2150EE5C4(v75, 0);
      sub_2150EE5C4(v70, 0);
      sub_2150EE5C4(v71, 0);
      sub_2150EE5C4(v72, 0);
      sub_215053AEC((uint64_t)&v172);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C60);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v174 = v124;
        v175[0] = *(_OWORD *)v125;
        *(_OWORD *)((char *)v175 + 9) = *(_OWORD *)&v125[9];
        v76 = *(_QWORD *)v125;
        result = swift_beginAccess();
        v77 = *(_QWORD **)(v76 + 16);
        if (!v77)
          goto LABEL_68;
        v78 = *v77 + 7;
        if (__OFADD__(*v77, 7))
          goto LABEL_62;
        if (v78 < 0)
          v78 = *v77 + 14;
        v79 = v78 >> 3;
        v80 = v79 - 1;
        v18 = v79 < 1;
        v81 = v79 + 62;
        if (!v18)
          v81 = v80;
        sub_215084070((uint64_t)v77 + (v81 & 0xFFFFFFFFFFFFFFC0) + 128, &v174, (uint64_t)&v115);
        v82 = v117;
        v83 = *(float *)&v118;
        v84 = v119;
        v85 = *(float *)&v120;
        sub_2150EE5C4(COERCE__INT64(*((float *)&v118 + 1)), 0);
        sub_2150EE5C4(COERCE__INT64(*(float *)&v84), 0);
        sub_2150EE5C4(COERCE__INT64(*((float *)&v84 + 1)), 0);
        sub_2150EE5C4(COERCE__INT64(v85), 0);
        sub_2150EE5C4(COERCE__INT64(*(float *)&v82), 0);
        sub_2150EE5C4(COERCE__INT64(*((float *)&v82 + 1)), 0);
        sub_2150EE5C4(COERCE__INT64(v83), 0);
        sub_215053AEC((uint64_t)&v174);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_254DA7C40);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v176 = v124;
          v177[0] = *(_OWORD *)v125;
          *(_OWORD *)((char *)v177 + 9) = *(_OWORD *)&v125[9];
          v86 = *(_QWORD *)v125;
          result = swift_beginAccess();
          v87 = *(_QWORD **)(v86 + 16);
          if (!v87)
            goto LABEL_69;
          v88 = *v87 + 7;
          if (__OFADD__(*v87, 7))
            goto LABEL_63;
          if (v88 < 0)
            v88 = *v87 + 14;
          v89 = v88 >> 3;
          v90 = v89 - 1;
          v18 = v89 < 1;
          v91 = v89 + 62;
          if (!v18)
            v91 = v90;
          sub_215084DF8((uint64_t)v87 + (v91 & 0xFFFFFFFFFFFFFFC0) + 128, &v176, (uint64_t)&v115);
          v92 = v117;
          v93 = v118;
          v94 = (uint64_t)v119;
          v95 = v121;
          v96 = v122;
          v97 = v123;
          sub_2150EE5C4(v120, 0);
          sub_2150EE5C4(v95, 0);
          sub_2150EE5C4(v96, 0);
          sub_2150EE5C4(v97, 0);
          sub_2150EE5C4(v92, 0);
          sub_2150EE5C4(v93, 0);
          sub_2150EE5C4(v94, 0);
          sub_215053AEC((uint64_t)&v176);
        }
        else
        {
          sub_2150EE5C4(0, 1);
          sub_2150EE5C4(0, 1);
          sub_2150EE5C4(0, 1);
          sub_2150EE5C4(0, 1);
          sub_2150EE5C4(0, 1);
          sub_2150EE5C4(0, 1);
          sub_2150EE5C4(0, 1);
        }
      }
    }
LABEL_9:
    sub_2150452E4((uint64_t)v127);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v126);
    v15 += 40;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
  }
  v166[0] = v124;
  v166[1] = *(_OWORD *)v125;
  v37 = *(_QWORD *)&v125[16];
  v167 = *(_QWORD *)&v125[16];
  v180[0] = *(_QWORD *)&v125[16];
  result = swift_beginAccess();
  v39 = *(_QWORD **)(v37 + 16);
  if (!v39)
    goto LABEL_64;
  v40 = *v39 + 7;
  if (!__OFADD__(*v39, 7))
  {
    if (v40 < 0)
      v40 = *v39 + 14;
    v41 = v40 >> 3;
    v42 = v41 - 1;
    v18 = v41 < 1;
    v43 = v41 + 62;
    if (!v18)
      v43 = v42;
    v44 = (uint64_t)v39 + (v43 & 0xFFFFFFFFFFFFFFC0) + 128;
    swift_retain();
    sub_215083DA0(v44, (uint64_t)v166, (uint64_t)&v115);
    sub_21508588C((uint64_t)v180);
    v45 = v117;
    v46 = v118;
    v47 = (uint64_t)v119;
    v48 = v121;
    v49 = v122;
    v50 = v123;
    sub_2150EE5C4(v120, 0);
    sub_2150EE5C4(v48, 0);
    sub_2150EE5C4(v49, 0);
    sub_2150EE5C4(v50, 0);
    sub_2150EE5C4(v45, 0);
    sub_2150EE5C4(v46, 0);
    sub_2150EE5C4(v47, 0);
    v28 = v166;
LABEL_8:
    sub_2150858B4((uint64_t)v28);
    goto LABEL_9;
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t DataFrame.Slice.summary(of:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  _OWORD v10[2];

  v5 = v2[1];
  v9 = *v2;
  v10[0] = v5;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)v2 + 25);
  sub_2150451E0((uint64_t)&v9);
  v6 = sub_215085348(a1, &v9);
  sub_215045244((uint64_t)&v9);
  sub_2150451E0((uint64_t)&v9);
  v7 = sub_215085574(v6, (uint64_t)&v9);
  sub_215045244((uint64_t)&v9);
  sub_215082410(v7, a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t DataFrame.Slice.summary(ofColumns:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  _OWORD v9[2];

  v5 = v2[1];
  v8 = *v2;
  v9[0] = v5;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)v2 + 25);
  sub_2150451E0((uint64_t)&v8);
  v6 = sub_215085574(a1, (uint64_t)&v8);
  sub_215045244((uint64_t)&v8);
  sub_215082410(v6, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215083658@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  unint64_t v21;
  __int32 v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  float32x4_t *v27;

  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = a4;
    v8 = result;
    v9 = (_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v10 <= a2)
      v12 = a2;
    else
      v12 = v10;
    v13 = v10;
    while (a2 != v13)
    {
      if (v12 == v13)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v9)
        goto LABEL_26;
      v10 = v13 + 1;
      v14 = *(unsigned __int8 *)(*v9 + (v13 >> 3) + 64) >> (v13 & 7);
      ++v13;
      if ((v14 & 1) != 0)
      {
        v25 = v5;
        result = swift_isUniquelyReferenced_nonNull_native();
        v15 = a3;
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        if (v17 >= v16 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        *(_QWORD *)(v11 + 16) = v17 + 1;
        *(_QWORD *)(v11 + 8 * v17 + 32) = v10 - 1;
        a3 = v15;
        v5 = v25;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      v27 = (float32x4_t *)MEMORY[0x24BEE4AF8];
      sub_215038E14(0, v18, 0);
      v19 = 0;
      v20 = v27;
      v21 = v27[1].u64[0];
      do
      {
        v22 = *(_DWORD *)(v8 + 4 * *(_QWORD *)(v11 + 8 * v19 + 32));
        v23 = v27[1].u64[1];
        if (v21 >= v23 >> 1)
          sub_215038E14((char *)(v23 > 1), v21 + 1, 1);
        ++v19;
        v27[1].i64[0] = v21 + 1;
        v27[2].i32[v21++] = v22;
      }
      while (v18 != v19);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = (float32x4_t *)MEMORY[0x24BEE4AF8];
    }
    sub_215122840(v20, a2 - v18, a5, v24);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_215083894@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;

  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = a4;
    v8 = result;
    v9 = (_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v10 <= a2)
      v12 = a2;
    else
      v12 = v10;
    v13 = v10;
    while (a2 != v13)
    {
      if (v12 == v13)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v9)
        goto LABEL_26;
      v10 = v13 + 1;
      v14 = *(unsigned __int8 *)(*v9 + (v13 >> 3) + 64) >> (v13 & 7);
      ++v13;
      if ((v14 & 1) != 0)
      {
        v26 = v5;
        result = swift_isUniquelyReferenced_nonNull_native();
        v15 = a3;
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        if (v17 >= v16 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        *(_QWORD *)(v11 + 16) = v17 + 1;
        *(_QWORD *)(v11 + 8 * v17 + 32) = v10 - 1;
        a3 = v15;
        v5 = v26;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      v28 = MEMORY[0x24BEE4AF8];
      sub_215038DF8(0, v18, 0);
      v19 = 0;
      v20 = v28;
      v21 = *(_QWORD *)(v28 + 16);
      do
      {
        v22 = *(_QWORD *)(v8 + 8 * *(_QWORD *)(v11 + 8 * v19 + 32));
        v23 = *(_QWORD *)(v28 + 24);
        if (v21 >= v23 >> 1)
          sub_215038DF8((char *)(v23 > 1), v21 + 1, 1);
        ++v19;
        *(_QWORD *)(v28 + 16) = v21 + 1;
        *(_QWORD *)(v28 + 8 * v21++ + 32) = v22;
      }
      while (v18 != v19);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = MEMORY[0x24BEE4AF8];
    }
    sub_215122574(v20, a2 - v18, a5, v24, v25);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_215083AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int32 v26;
  unint64_t v27;
  __n128 v28;
  float32x4_t *v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA81A8);
  sub_215130520();
  result = sub_2150858E4(a2);
  v6 = (_QWORD *)(v4 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  v8 = v32;
LABEL_2:
  if (v8 <= v33)
    v9 = v33;
  else
    v9 = v8;
  v10 = v8;
  while (v33 != v10)
  {
    if (v33 < v32)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v8 < v32)
      goto LABEL_30;
    if (v9 == v10)
      goto LABEL_31;
    result = swift_beginAccess();
    if (!*v6)
      goto LABEL_34;
    v12 = v10 + 1;
    v13 = v10 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v14 = *(unsigned __int8 *)(*v6 + v10 / 8 + 64);
    v15 = 1 << v13;
    if (v13 < 0)
      v15 = 0;
    ++v10;
    if ((v15 & v14) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v17 = *(_QWORD *)(v7 + 16);
      v16 = *(_QWORD *)(v7 + 24);
      if (v17 >= v16 >> 1)
        result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
      *(_QWORD *)(v7 + 16) = v17 + 1;
      *(_QWORD *)(v7 + 8 * v17 + 32) = v12 - 1;
      v8 = v12;
      goto LABEL_2;
    }
  }
  sub_2150858B4(a2);
  result = sub_215130520();
  v18 = v33 - v32;
  if (__OFSUB__(v33, v32))
    goto LABEL_32;
  v19 = *(_QWORD *)(v7 + 16);
  v20 = v18 - v19;
  if (__OFSUB__(v18, v19))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  if (v19)
  {
    v31 = (float32x4_t *)MEMORY[0x24BEE4AF8];
    sub_215038E14(0, v19, 0);
    v21 = 0;
    v22 = v31;
    v23 = v31[1].u64[0];
    v24 = a3;
    v25 = a1;
    do
    {
      v26 = *(_DWORD *)(v25 + 4 * *(_QWORD *)(v7 + 8 * v21 + 32));
      v27 = v31[1].u64[1];
      if (v23 >= v27 >> 1)
      {
        sub_215038E14((char *)(v27 > 1), v23 + 1, 1);
        v25 = a1;
      }
      ++v21;
      v31[1].i64[0] = v23 + 1;
      v31[2].i32[v23++] = v26;
    }
    while (v19 != v21);
    swift_release();
  }
  else
  {
    swift_release();
    v22 = (float32x4_t *)MEMORY[0x24BEE4AF8];
    v24 = a3;
  }
  sub_215122840(v22, v20, v24, v28);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215083DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  __n128 v29;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA81A0);
  sub_215130520();
  result = sub_2150858E4(a2);
  v6 = (_QWORD *)(v4 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  v8 = v33;
LABEL_2:
  if (v8 <= v34)
    v9 = v34;
  else
    v9 = v8;
  v10 = v8;
  while (v34 != v10)
  {
    if (v34 < v33)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v8 < v33)
      goto LABEL_30;
    if (v9 == v10)
      goto LABEL_31;
    result = swift_beginAccess();
    if (!*v6)
      goto LABEL_34;
    v12 = v10 + 1;
    v13 = v10 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v14 = *(unsigned __int8 *)(*v6 + v10 / 8 + 64);
    v15 = 1 << v13;
    if (v13 < 0)
      v15 = 0;
    ++v10;
    if ((v15 & v14) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v17 = *(_QWORD *)(v7 + 16);
      v16 = *(_QWORD *)(v7 + 24);
      if (v17 >= v16 >> 1)
        result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
      *(_QWORD *)(v7 + 16) = v17 + 1;
      *(_QWORD *)(v7 + 8 * v17 + 32) = v12 - 1;
      v8 = v12;
      goto LABEL_2;
    }
  }
  sub_2150858B4(a2);
  result = sub_215130520();
  v18 = v34 - v33;
  if (__OFSUB__(v34, v33))
    goto LABEL_32;
  v19 = *(_QWORD *)(v7 + 16);
  v20 = v18 - v19;
  if (__OFSUB__(v18, v19))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  if (v19)
  {
    v32 = MEMORY[0x24BEE4AF8];
    sub_215038DF8(0, v19, 0);
    v21 = 0;
    v22 = v32;
    v23 = *(_QWORD *)(v32 + 16);
    v24 = a3;
    v25 = a1;
    do
    {
      v26 = *(_QWORD *)(v25 + 8 * *(_QWORD *)(v7 + 8 * v21 + 32));
      v27 = *(_QWORD *)(v32 + 24);
      if (v23 >= v27 >> 1)
      {
        sub_215038DF8((char *)(v27 > 1), v23 + 1, 1);
        v25 = a1;
      }
      ++v21;
      *(_QWORD *)(v32 + 16) = v23 + 1;
      *(_QWORD *)(v32 + 8 * v23++ + 32) = v26;
    }
    while (v19 != v21);
    swift_release();
  }
  else
  {
    swift_release();
    v22 = MEMORY[0x24BEE4AF8];
    v24 = a3;
  }
  sub_215122574(v22, v20, v24, v28, v29);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215084070@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t *v40;
  unint64_t v41;
  __int32 v42;
  unint64_t v43;
  __n128 v44;
  uint64_t result;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  _BYTE v61[25];

  v3 = (uint64_t)a2;
  v4 = *(_OWORD *)((char *)a2 + 25);
  v5 = a2[1];
  v60 = *a2;
  *(_OWORD *)v61 = v5;
  *(_OWORD *)&v61[9] = v4;
  v6 = sub_2150EBC3C(*(uint64_t *)&v61[8], v4 >> 56, HIBYTE(v4));
  v7 = *(_QWORD *)(v6 + 16);
  sub_215053BA4(v3);
  v8 = 0;
  v9 = (_QWORD *)(*(_QWORD *)v61 + 16);
  v10 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v8 <= v7)
    v11 = v7;
  else
    v11 = v8;
  while (v7 != v8)
  {
    if (v11 == v8)
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      result = sub_2151302EC();
      __break(1u);
      return result;
    }
    v12 = *(_QWORD *)(v6 + 8 * v8 + 32);
    swift_beginAccess();
    if (!*v9)
      goto LABEL_58;
    v14 = v12 - (v13 & 0xFFFFFFFFFFFFFFF8);
    ++v8;
    v15 = 1 << v14;
    if (v14 < 0)
      LOBYTE(v15) = 0;
    if ((v15 & *(_BYTE *)(*v9 + v12 / 8 + 64)) != 0)
    {
      v52[0] = v10;
      v50 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_215038BE4(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v52[0];
      }
      v17 = *(_QWORD *)(v10 + 16);
      v16 = *(_QWORD *)(v10 + 24);
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        v18 = v17 + 1;
        v10 = v52[0];
      }
      *(_QWORD *)(v10 + 16) = v18;
      *(_QWORD *)(v10 + 8 * v17 + 32) = v12;
      v3 = v50;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v3);
  v19 = swift_bridgeObjectRelease();
  sub_21508C134(v52, v19);
  v20 = v57;
  v21 = v59;
  if (v59 < v57)
    goto LABEL_56;
  v22 = v53;
  v49 = v54;
  v23 = v55;
  v24 = v58;
  v25 = v56;
  if (v57 != v59 || v56 != v58)
  {
    v27 = 0;
    v28 = v53 + 32;
    v48 = (_QWORD *)(v52[2] + 16);
    while (1)
    {
      v26 = v27 + 1;
      if (__OFADD__(v27, 1))
        goto LABEL_51;
      if (__OFADD__(v20++, 1))
        goto LABEL_52;
      if (v23)
      {
        if (v23 != 1)
          goto LABEL_60;
        if ((v25 & 0x8000000000000000) != 0)
          goto LABEL_54;
        if (v25 >= *(_QWORD *)(v22 + 16))
          goto LABEL_55;
        v31 = (uint64_t *)(v28 + 16 * v25);
        v32 = *v31;
        v30 = v31[1];
        if (v20 < v32)
          goto LABEL_32;
      }
      else
      {
        v30 = v49;
        if (v25)
          goto LABEL_53;
        if (v20 < v22)
          goto LABEL_32;
      }
      if (v20 < v30)
        goto LABEL_39;
LABEL_32:
      if (!v23)
      {
        v33 = 1;
LABEL_36:
        v51 = v33;
        v35 = v24;
        v36 = v21;
        swift_beginAccess();
        if (!*v48)
          goto LABEL_59;
        v34 = (uint64_t *)(*v48 + 8);
        v21 = v36;
        v24 = v35;
        v25 = v51;
        goto LABEL_38;
      }
      v33 = *(_QWORD *)(v22 + 16);
      if (v25 + 1 >= v33)
        goto LABEL_36;
      v34 = (uint64_t *)(v28 + 16 * ++v25);
LABEL_38:
      v20 = *v34;
LABEL_39:
      ++v27;
      if (v25 == v24 && v20 == v21)
        goto LABEL_41;
    }
  }
  v26 = 0;
LABEL_41:
  swift_release();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v22, v49, v23);
  v37 = *(_QWORD *)(v10 + 16);
  v38 = v26 - v37;
  if (__OFSUB__(v26, v37))
    goto LABEL_57;
  if (v37)
  {
    v52[0] = MEMORY[0x24BEE4AF8];
    sub_215038E14(0, v37, 0);
    v39 = 0;
    v40 = (float32x4_t *)v52[0];
    v41 = *(_QWORD *)(v52[0] + 16);
    do
    {
      v42 = *(_DWORD *)(a1 + 4 * *(_QWORD *)(v10 + 8 * v39 + 32));
      v52[0] = v40;
      v43 = v40[1].u64[1];
      if (v41 >= v43 >> 1)
      {
        sub_215038E14((char *)(v43 > 1), v41 + 1, 1);
        v40 = (float32x4_t *)v52[0];
      }
      ++v39;
      v40[1].i64[0] = v41 + 1;
      v40[2].i32[v41++] = v42;
    }
    while (v37 != v39);
    swift_release();
  }
  else
  {
    swift_release();
    v40 = (float32x4_t *)MEMORY[0x24BEE4AF8];
  }
  sub_215122840(v40, v38, a3, v44);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2150844B4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  __n128 v45;
  uint64_t result;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  _BYTE v62[25];

  v3 = (uint64_t)a2;
  v4 = *(_OWORD *)((char *)a2 + 25);
  v5 = a2[1];
  v61 = *a2;
  *(_OWORD *)v62 = v5;
  *(_OWORD *)&v62[9] = v4;
  v6 = sub_2150EBC3C(*(uint64_t *)&v62[8], v4 >> 56, HIBYTE(v4));
  v7 = *(_QWORD *)(v6 + 16);
  sub_215053BA4(v3);
  v8 = 0;
  v9 = (_QWORD *)(*(_QWORD *)v62 + 16);
  v10 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v8 <= v7)
    v11 = v7;
  else
    v11 = v8;
  while (v7 != v8)
  {
    if (v11 == v8)
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      result = sub_2151302EC();
      __break(1u);
      return result;
    }
    v12 = *(_QWORD *)(v6 + 8 * v8 + 32);
    swift_beginAccess();
    if (!*v9)
      goto LABEL_58;
    v14 = v12 - (v13 & 0xFFFFFFFFFFFFFFF8);
    ++v8;
    v15 = 1 << v14;
    if (v14 < 0)
      LOBYTE(v15) = 0;
    if ((v15 & *(_BYTE *)(*v9 + v12 / 8 + 64)) != 0)
    {
      v53[0] = v10;
      v51 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_215038BE4(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v53[0];
      }
      v17 = *(_QWORD *)(v10 + 16);
      v16 = *(_QWORD *)(v10 + 24);
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        v18 = v17 + 1;
        v10 = v53[0];
      }
      *(_QWORD *)(v10 + 16) = v18;
      *(_QWORD *)(v10 + 8 * v17 + 32) = v12;
      v3 = v51;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v3);
  v19 = swift_bridgeObjectRelease();
  sub_21508C134(v53, v19);
  v20 = v58;
  v21 = v60;
  if (v60 < v58)
    goto LABEL_56;
  v22 = v54;
  v50 = v55;
  v23 = v56;
  v24 = v59;
  v25 = v57;
  if (v58 != v60 || v57 != v59)
  {
    v27 = 0;
    v28 = v54 + 32;
    v49 = (_QWORD *)(v53[2] + 16);
    while (1)
    {
      v26 = v27 + 1;
      if (__OFADD__(v27, 1))
        goto LABEL_51;
      if (__OFADD__(v20++, 1))
        goto LABEL_52;
      if (v23)
      {
        if (v23 != 1)
          goto LABEL_60;
        if ((v25 & 0x8000000000000000) != 0)
          goto LABEL_54;
        if (v25 >= *(_QWORD *)(v22 + 16))
          goto LABEL_55;
        v31 = (uint64_t *)(v28 + 16 * v25);
        v32 = *v31;
        v30 = v31[1];
        if (v20 < v32)
          goto LABEL_32;
      }
      else
      {
        v30 = v50;
        if (v25)
          goto LABEL_53;
        if (v20 < v22)
          goto LABEL_32;
      }
      if (v20 < v30)
        goto LABEL_39;
LABEL_32:
      if (!v23)
      {
        v33 = 1;
LABEL_36:
        v52 = v33;
        v35 = v24;
        v36 = v21;
        swift_beginAccess();
        if (!*v49)
          goto LABEL_59;
        v34 = (uint64_t *)(*v49 + 8);
        v21 = v36;
        v24 = v35;
        v25 = v52;
        goto LABEL_38;
      }
      v33 = *(_QWORD *)(v22 + 16);
      if (v25 + 1 >= v33)
        goto LABEL_36;
      v34 = (uint64_t *)(v28 + 16 * ++v25);
LABEL_38:
      v20 = *v34;
LABEL_39:
      ++v27;
      if (v25 == v24 && v20 == v21)
        goto LABEL_41;
    }
  }
  v26 = 0;
LABEL_41:
  swift_release();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v22, v50, v23);
  v37 = *(_QWORD *)(v10 + 16);
  v38 = v26 - v37;
  if (__OFSUB__(v26, v37))
    goto LABEL_57;
  if (v37)
  {
    v53[0] = MEMORY[0x24BEE4AF8];
    sub_215038DF8(0, v37, 0);
    v39 = 0;
    v40 = v53[0];
    v41 = *(_QWORD *)(v53[0] + 16);
    do
    {
      v42 = *(_QWORD *)(a1 + 8 * *(_QWORD *)(v10 + 8 * v39 + 32));
      v53[0] = v40;
      v43 = *(_QWORD *)(v40 + 24);
      if (v41 >= v43 >> 1)
      {
        sub_215038DF8((char *)(v43 > 1), v41 + 1, 1);
        v40 = v53[0];
      }
      ++v39;
      *(_QWORD *)(v40 + 16) = v41 + 1;
      *(_QWORD *)(v40 + 8 * v41++ + 32) = v42;
    }
    while (v37 != v39);
    swift_release();
  }
  else
  {
    swift_release();
    v40 = MEMORY[0x24BEE4AF8];
  }
  sub_215122574(v40, v38, a3, v44, v45);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2150848F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v28;

  if (a2 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    v5 = a4;
    v8 = result;
    v9 = (_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
LABEL_3:
    if (v10 <= a2)
      v12 = a2;
    else
      v12 = v10;
    v13 = v10;
    while (a2 != v13)
    {
      if (v12 == v13)
      {
        __break(1u);
        goto LABEL_25;
      }
      result = swift_beginAccess();
      if (!*v9)
        goto LABEL_26;
      v10 = v13 + 1;
      v14 = *(unsigned __int8 *)(*v9 + (v13 >> 3) + 64) >> (v13 & 7);
      ++v13;
      if ((v14 & 1) != 0)
      {
        v26 = v5;
        result = swift_isUniquelyReferenced_nonNull_native();
        v15 = a3;
        if ((result & 1) == 0)
          result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        if (v17 >= v16 >> 1)
          result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        *(_QWORD *)(v11 + 16) = v17 + 1;
        *(_QWORD *)(v11 + 8 * v17 + 32) = v10 - 1;
        a3 = v15;
        v5 = v26;
        goto LABEL_3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      v28 = MEMORY[0x24BEE4AF8];
      sub_215038DF8(0, v18, 0);
      v19 = 0;
      v20 = v28;
      v21 = *(_QWORD *)(v28 + 16);
      do
      {
        v22 = *(_QWORD *)(v8 + 8 * *(_QWORD *)(v11 + 8 * v19 + 32));
        v23 = *(_QWORD *)(v28 + 24);
        if (v21 >= v23 >> 1)
          sub_215038DF8((char *)(v23 > 1), v21 + 1, 1);
        ++v19;
        *(_QWORD *)(v28 + 16) = v21 + 1;
        *(double *)(v28 + 8 * v21++ + 32) = (double)v22;
      }
      while (v18 != v19);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = MEMORY[0x24BEE4AF8];
    }
    sub_215122574(v20, a2 - v18, a5, v24, v25);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_215084B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254DA81B0);
  sub_215130520();
  result = sub_2150858E4(a2);
  v6 = (_QWORD *)(v4 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  v8 = v32;
LABEL_2:
  if (v8 <= v33)
    v9 = v33;
  else
    v9 = v8;
  v10 = v8;
  while (v33 != v10)
  {
    if (v33 < v32)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v8 < v32)
      goto LABEL_30;
    if (v9 == v10)
      goto LABEL_31;
    result = swift_beginAccess();
    if (!*v6)
      goto LABEL_34;
    v12 = v10 + 1;
    v13 = v10 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v14 = *(unsigned __int8 *)(*v6 + v10 / 8 + 64);
    v15 = 1 << v13;
    if (v13 < 0)
      v15 = 0;
    ++v10;
    if ((v15 & v14) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = (uint64_t)sub_215038BE4(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v17 = *(_QWORD *)(v7 + 16);
      v16 = *(_QWORD *)(v7 + 24);
      if (v17 >= v16 >> 1)
        result = (uint64_t)sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
      *(_QWORD *)(v7 + 16) = v17 + 1;
      *(_QWORD *)(v7 + 8 * v17 + 32) = v12 - 1;
      v8 = v12;
      goto LABEL_2;
    }
  }
  sub_2150858B4(a2);
  result = sub_215130520();
  v18 = v33 - v32;
  if (__OFSUB__(v33, v32))
    goto LABEL_32;
  v19 = *(_QWORD *)(v7 + 16);
  v20 = v18 - v19;
  if (__OFSUB__(v18, v19))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  if (v19)
  {
    v31 = MEMORY[0x24BEE4AF8];
    sub_215038DF8(0, v19, 0);
    v21 = 0;
    v22 = v31;
    v23 = *(_QWORD *)(v31 + 16);
    v24 = a1;
    do
    {
      v25 = *(_QWORD *)(v24 + 8 * *(_QWORD *)(v7 + 8 * v21 + 32));
      v26 = *(_QWORD *)(v31 + 24);
      if (v23 >= v26 >> 1)
      {
        sub_215038DF8((char *)(v26 > 1), v23 + 1, 1);
        v24 = a1;
      }
      ++v21;
      *(_QWORD *)(v31 + 16) = v23 + 1;
      *(double *)(v31 + 8 * v23++ + 32) = (double)v25;
    }
    while (v19 != v21);
    swift_release();
  }
  else
  {
    swift_release();
    v22 = MEMORY[0x24BEE4AF8];
  }
  sub_215122574(v22, v20, a3, v27, v28);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215084DF8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  __n128 v45;
  uint64_t result;
  _QWORD *v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  _BYTE v60[25];
  uint64_t v61;

  v3 = (uint64_t)a2;
  v4 = *(_OWORD *)((char *)a2 + 25);
  v5 = a2[1];
  v59 = *a2;
  *(_OWORD *)v60 = v5;
  *(_OWORD *)&v60[9] = v4;
  v6 = sub_2150EBC3C(*(uint64_t *)&v60[8], v4 >> 56, HIBYTE(v4));
  v7 = *(_QWORD *)(v6 + 16);
  sub_215053BA4(v3);
  v8 = 0;
  v9 = (_QWORD *)(*(_QWORD *)v60 + 16);
  v10 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v8 <= v7)
    v11 = v7;
  else
    v11 = v8;
  while (v7 != v8)
  {
    if (v11 == v8)
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      result = sub_2151302EC();
      __break(1u);
      return result;
    }
    v12 = *(_QWORD *)(v6 + 8 * v8 + 32);
    swift_beginAccess();
    if (!*v9)
      goto LABEL_58;
    v14 = v12 - (v13 & 0xFFFFFFFFFFFFFFF8);
    ++v8;
    v15 = 1 << v14;
    if (v14 < 0)
      LOBYTE(v15) = 0;
    if ((v15 & *(_BYTE *)(*v9 + v12 / 8 + 64)) != 0)
    {
      v51[0] = v10;
      v61 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_215038BE4(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v51[0];
      }
      v17 = *(_QWORD *)(v10 + 16);
      v16 = *(_QWORD *)(v10 + 24);
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        sub_215038BE4((char *)(v16 > 1), v17 + 1, 1);
        v18 = v17 + 1;
        v10 = v51[0];
      }
      *(_QWORD *)(v10 + 16) = v18;
      *(_QWORD *)(v10 + 8 * v17 + 32) = v12;
      v3 = v61;
      goto LABEL_2;
    }
  }
  sub_215053AEC(v3);
  v19 = swift_bridgeObjectRelease();
  sub_21508C134(v51, v19);
  v20 = v56;
  v21 = v58;
  if (v58 < v56)
    goto LABEL_56;
  v22 = v52;
  v50 = v53;
  v23 = v54;
  v24 = v57;
  v25 = v55;
  if (v56 != v58 || v55 != v57)
  {
    v27 = 0;
    v28 = v52 + 32;
    v49 = (_QWORD *)(v51[2] + 16);
    while (1)
    {
      v26 = v27 + 1;
      if (__OFADD__(v27, 1))
        goto LABEL_51;
      if (__OFADD__(v20++, 1))
        goto LABEL_52;
      if (v23)
      {
        if (v23 != 1)
          goto LABEL_60;
        if ((v25 & 0x8000000000000000) != 0)
          goto LABEL_54;
        if (v25 >= *(_QWORD *)(v22 + 16))
          goto LABEL_55;
        v31 = (uint64_t *)(v28 + 16 * v25);
        v32 = *v31;
        v30 = v31[1];
        if (v20 < v32)
          goto LABEL_32;
      }
      else
      {
        v30 = v50;
        if (v25)
          goto LABEL_53;
        if (v20 < v22)
          goto LABEL_32;
      }
      if (v20 < v30)
        goto LABEL_39;
LABEL_32:
      if (!v23)
      {
        v33 = 1;
LABEL_36:
        v61 = v33;
        v35 = v24;
        v36 = v21;
        swift_beginAccess();
        if (!*v49)
          goto LABEL_59;
        v34 = (uint64_t *)(*v49 + 8);
        v21 = v36;
        v24 = v35;
        v25 = v61;
        goto LABEL_38;
      }
      v33 = *(_QWORD *)(v22 + 16);
      if (v25 + 1 >= v33)
        goto LABEL_36;
      v34 = (uint64_t *)(v28 + 16 * ++v25);
LABEL_38:
      v20 = *v34;
LABEL_39:
      ++v27;
      if (v25 == v24 && v20 == v21)
        goto LABEL_41;
    }
  }
  v26 = 0;
LABEL_41:
  swift_release();
  swift_bridgeObjectRelease();
  sub_21501EF2C(v22, v50, v23);
  v37 = *(_QWORD *)(v10 + 16);
  v38 = v26 - v37;
  if (__OFSUB__(v26, v37))
    goto LABEL_57;
  if (v37)
  {
    v51[0] = MEMORY[0x24BEE4AF8];
    sub_215038DF8(0, v37, 0);
    v39 = 0;
    v40 = v51[0];
    v41 = *(_QWORD *)(v51[0] + 16);
    do
    {
      v42 = *(_QWORD *)(a1 + 8 * *(_QWORD *)(v10 + 8 * v39 + 32));
      v51[0] = v40;
      v43 = *(_QWORD *)(v40 + 24);
      if (v41 >= v43 >> 1)
      {
        sub_215038DF8((char *)(v43 > 1), v41 + 1, 1);
        v40 = v51[0];
      }
      ++v39;
      *(_QWORD *)(v40 + 16) = v41 + 1;
      *(double *)(v40 + 8 * v41++ + 32) = (double)v42;
    }
    while (v37 != v39);
    swift_release();
  }
  else
  {
    swift_release();
    v40 = MEMORY[0x24BEE4AF8];
  }
  sub_215122574(v40, v38, a3, v44, v45);
  return swift_bridgeObjectRelease();
}

uint64_t sub_215085238(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_215038BE4(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      v7 = sub_21501F2BC(v5, v6);
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_215038BE4((char *)(v8 > 1), v9 + 1, 1);
      v4 += 2;
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_215085348(uint64_t a1, __int128 *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_215038BE4(0, v2, 0);
    v3 = v13;
    v14 = *a2;
    v15 = *((_QWORD *)a2 + 2);
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      sub_215085804((uint64_t)&v14);
      v9 = sub_21501F2BC(v7, v8);
      sub_215085848((uint64_t)&v14);
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      if (v11 >= v10 >> 1)
        sub_215038BE4((char *)(v10 > 1), v11 + 1, 1);
      v6 += 2;
      *(_QWORD *)(v13 + 16) = v11 + 1;
      *(_QWORD *)(v13 + 8 * v11 + 32) = v9;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_21508546C(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v18 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)sub_215038C1C(0, v2, 0);
  v3 = v18;
  v7 = (unint64_t *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 16);
  while (1)
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 >= v8)
      break;
    result = sub_21501EE90(a2 + 32 + 40 * v9, (uint64_t)v16);
    v18 = v3;
    v12 = *(_QWORD *)(v3 + 16);
    v11 = *(_QWORD *)(v3 + 24);
    if (v12 >= v11 >> 1)
    {
      result = (uint64_t)sub_215038C1C((char *)(v11 > 1), v12 + 1, 1);
      v3 = v18;
    }
    *(_QWORD *)(v3 + 16) = v12 + 1;
    v13 = v3 + 40 * v12;
    v14 = v16[0];
    v15 = v16[1];
    *(_QWORD *)(v13 + 64) = v17;
    *(_OWORD *)(v13 + 32) = v14;
    *(_OWORD *)(v13 + 48) = v15;
    if (!--v2)
      return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_215085574(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v39 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)sub_215038BAC(0, v2, 0);
  v7 = 0;
  v8 = v39;
  v32 = a2;
  v33 = a1 + 32;
  v40 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(v40 + 16);
  v29 = (_QWORD *)(v40 + 32);
  v30 = v9;
  v31 = v2;
  while (1)
  {
    v10 = *(_QWORD *)(v33 + 8 * v7);
    if (v9)
      break;
    v11 = v3;
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_20;
LABEL_13:
    if (v10 >= *(_QWORD *)(v11 + 16))
      goto LABEL_21;
    sub_2150452A8(v11 + 40 * v10 + 32, (uint64_t)&v36);
    result = swift_bridgeObjectRelease();
    v39 = v8;
    v25 = *(_QWORD *)(v8 + 16);
    v24 = *(_QWORD *)(v8 + 24);
    if (v25 >= v24 >> 1)
    {
      result = (uint64_t)sub_215038BAC((char *)(v24 > 1), v25 + 1, 1);
      v8 = v39;
    }
    ++v7;
    *(_QWORD *)(v8 + 16) = v25 + 1;
    v26 = v8 + 40 * v25;
    v27 = v36;
    v28 = v37;
    *(_QWORD *)(v26 + 64) = v38;
    *(_OWORD *)(v26 + 32) = v27;
    *(_OWORD *)(v26 + 48) = v28;
    if (v7 == v2)
      return v8;
  }
  v34 = *(_QWORD *)(v33 + 8 * v7);
  v35 = v8;
  sub_2150451E0(a2);
  sub_215049E28((uint64_t)&v40);
  sub_215038BAC(0, v9, 0);
  v11 = v3;
  v12 = v9;
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = v29;
  v16 = *(unsigned __int8 *)(a2 + 40);
  do
  {
    v18 = v15[3];
    v17 = v15[4];
    __swift_project_boxed_opaque_existential_1(v15, v18);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8) + 160))(&v36, v13, v14, v16, v18);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      sub_215038BAC(0, *(_QWORD *)(v11 + 16) + 1, 1);
    v20 = *(_QWORD *)(v11 + 16);
    v19 = *(_QWORD *)(v11 + 24);
    if (v20 >= v19 >> 1)
      sub_215038BAC((char *)(v19 > 1), v20 + 1, 1);
    *(_QWORD *)(v11 + 16) = v20 + 1;
    v21 = v11 + 40 * v20;
    v22 = v36;
    v23 = v37;
    *(_QWORD *)(v21 + 64) = v38;
    *(_OWORD *)(v21 + 32) = v22;
    *(_OWORD *)(v21 + 48) = v23;
    v15 += 5;
    --v12;
  }
  while (v12);
  a2 = v32;
  sub_215045244(v32);
  result = sub_215049D70((uint64_t)&v40);
  v3 = MEMORY[0x24BEE4AF8];
  v9 = v30;
  v2 = v31;
  v8 = v35;
  v10 = v34;
  if ((v34 & 0x8000000000000000) == 0)
    goto LABEL_13;
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_215085804(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_215085848(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21508588C(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_2150858B4(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2150858E4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t DataFrame.combineColumns<A, B, C>(_:_:into:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(char *, char *), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t result;
  char v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v13 = v12;
  v75 = a7;
  v76 = a8;
  v77 = a5;
  v78 = a6;
  v65 = a4;
  v64 = a3;
  v63 = a2;
  v83 = a10;
  v71 = sub_215130064();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v16 = (char *)&v60 - v15;
  v69 = sub_215130064();
  v68 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v18 = (char *)&v60 - v17;
  v84 = a11;
  v67 = sub_215130064();
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  v20 = (char *)&v60 - v19;
  v21 = *v11;
  v22 = v11[1];
  v62 = v11;
  v23 = v11[2];
  v92 = v21;
  v93 = v22;
  v94 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61 = a1;
  v24 = a1;
  v25 = v21;
  v74 = a9;
  DataFrame.subscript.getter(v24, v63, v74, v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v73 = v86;
  v81 = v88;
  v82 = v87;
  v92 = v21;
  v93 = v22;
  v94 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DataFrame.subscript.getter(v64, v65, v83, v83);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v72 = v86;
  v79 = v88;
  v80 = v87;
  v26 = *(_QWORD *)(v21 + 16);
  v95 = v23;
  v85 = v22;
  if (v26)
  {
    sub_21501EE90(v21 + 32, (uint64_t)&v86);
    v27 = v89;
    v28 = v90;
    v60 = __swift_project_boxed_opaque_existential_1(&v86, v89);
    v29 = *(_QWORD *)(v28 + 8);
    v30 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v30(v27, v29);
    result = sub_21501EA34((uint64_t)&v86);
    if (v31 < 0)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v31)
    {
      v33 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v31 = 0;
  v33 = 2;
LABEL_7:
  v34 = sub_2150EBD1C(0, v31, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(0, v31, v33);
  Column.init(name:capacity:)(v77, v78, v34, v84, &v92);
  if (!*(_QWORD *)(v25 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = v95;
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  sub_21501EE90(v25 + 32, (uint64_t)&v86);
  v35 = v89;
  v36 = v90;
  __swift_project_boxed_opaque_existential_1(&v86, v89);
  v37 = *(_QWORD *)(v36 + 8);
  v38 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v39 = v38(v35, v37);
  result = sub_21501EA34((uint64_t)&v86);
  if (v39 < 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v40 = v95;
  if (v39)
  {
    v41 = 0;
    goto LABEL_13;
  }
LABEL_12:
  v39 = 0;
  v41 = 2;
LABEL_13:
  sub_21508C520(0, v39, v41);
  v78 = v39;
  LODWORD(v77) = v41;
  if ((v43 & 1) != 0 || (v44 = v42) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(0, v78, v77);
    v86 = v92;
    v87 = v93;
    v88 = v94;
    swift_bridgeObjectRetain();
    swift_retain();
    DataFrame.replaceColumn<A>(_:with:)(v61, v63, (uint64_t)&v86, v84);
    swift_release();
    swift_bridgeObjectRelease();
    DataFrame.removeColumn(_:)(v64, v65, (uint64_t)&v86);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_21501EA34((uint64_t)&v86);
    swift_release();
  }
  else
  {
    v45 = 0;
    while (1)
    {
      v46 = v25;
      v86 = v25;
      v87 = v85;
      v88 = v40;
      v89 = 0;
      v90 = v78;
      v91 = v77;
      v47 = DataFrame.Rows.index(after:)(v45);
      v86 = v73;
      v87 = v82;
      v88 = v81;
      v50 = type metadata accessor for Column(0, v74, v48, v49);
      Column.subscript.getter(v45, v50, (uint64_t)v18);
      v86 = v72;
      v87 = v80;
      v88 = v79;
      v53 = type metadata accessor for Column(0, v83, v51, v52);
      Column.subscript.getter(v45, v53, (uint64_t)v16);
      v75(v18, v16);
      if (v13)
        break;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v16, v71);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v69);
      v56 = type metadata accessor for Column(0, v84, v54, v55);
      Column.append(_:)((uint64_t)v20, v56, v57, v58);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v20, v67);
      v45 = v47;
      v59 = v47 == v44;
      v25 = v46;
      v40 = v95;
      if (v59)
        goto LABEL_19;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v16, v71);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(0, v78, v77);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t DataFrame.combineColumns<A, B, C>(_:_:into:transform:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t result;
  char v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v87 = a6;
  v86 = a5;
  v77 = a4;
  v76 = a3;
  v83 = sub_215130064();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v70 = (char *)&v68 - v14;
  v81 = sub_215130064();
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v69 = (char *)&v68 - v15;
  v97 = a9;
  v79 = sub_215130064();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v17 = (char *)&v68 - v16;
  v18 = *a1;
  v19 = a1[1];
  v20 = *a2;
  v21 = a2[1];
  v22 = *v9;
  v23 = v9[1];
  v75 = v9;
  v24 = v9[2];
  v106 = v22;
  v107 = v23;
  v108 = v24;
  v72 = v18;
  v104 = v18;
  v105 = v19;
  v71 = v19;
  v88 = a7;
  v25 = a7;
  v26 = v22;
  DataFrame.subscript.getter(&v104, v25);
  v85 = v98;
  v95 = v99;
  v93 = v100;
  v106 = v26;
  v107 = v23;
  v108 = v24;
  v74 = v20;
  v104 = v20;
  v105 = v21;
  v73 = v21;
  v89 = a8;
  DataFrame.subscript.getter(&v104, a8);
  v84 = v98;
  v94 = v99;
  v92 = v100;
  v27 = *(_QWORD *)(v26 + 16);
  v96 = v23;
  if (v27)
  {
    sub_21501EE90(v26 + 32, (uint64_t)&v98);
    v28 = v101;
    v29 = v102;
    __swift_project_boxed_opaque_existential_1(&v98, v101);
    v30 = *(_QWORD *)(v29 + 8);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = v31(v28, v30);
    result = sub_21501EA34((uint64_t)&v98);
    if (v32 < 0)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v32)
    {
      v34 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v32 = 0;
  v34 = 2;
LABEL_7:
  v35 = sub_2150EBD1C(0, v32, v34);
  swift_bridgeObjectRelease();
  v36 = v96;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(0, v32, v34);
  Column.init(name:capacity:)(v76, v77, v35, v97, &v106);
  v37 = *(_QWORD *)(v26 + 16);
  v90 = v24;
  v91 = v26;
  if (!v37)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43 = v36;
    goto LABEL_12;
  }
  sub_21501EE90(v26 + 32, (uint64_t)&v98);
  v38 = v101;
  v39 = v102;
  __swift_project_boxed_opaque_existential_1(&v98, v101);
  v40 = *(_QWORD *)(v39 + 8);
  v41 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v42 = v41(v38, v40);
  result = sub_21501EA34((uint64_t)&v98);
  if (v42 < 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v43 = v36;
  if (v42)
  {
    v44 = 0;
    goto LABEL_13;
  }
LABEL_12:
  v42 = 0;
  v44 = 2;
LABEL_13:
  sub_21508C520(0, v42, v44);
  if ((v46 & 1) != 0 || (v47 = v45) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(0, v42, v44);
    v104 = v72;
    v105 = v71;
    v98 = v106;
    v99 = v107;
    v100 = v108;
    DataFrame.replaceColumn<A, B>(_:with:)(&v104, (uint64_t)&v98, v88, v97);
    v104 = v74;
    v105 = v73;
    DataFrame.removeColumn<A>(_:)(&v104, v89);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v48 = 0;
    v49 = (uint64_t)v70;
    v50 = (uint64_t)v17;
    v51 = (uint64_t)v69;
    while (1)
    {
      v98 = v91;
      v99 = v43;
      v100 = v90;
      v101 = 0;
      v52 = v42;
      v102 = v42;
      v53 = v44;
      v103 = v44;
      v54 = DataFrame.Rows.index(after:)(v48);
      v98 = v85;
      v99 = v95;
      v100 = v93;
      v57 = type metadata accessor for Column(0, v88, v55, v56);
      Column.subscript.getter(v48, v57, v51);
      v98 = v84;
      v99 = v94;
      v100 = v92;
      v60 = type metadata accessor for Column(0, v89, v58, v59);
      Column.subscript.getter(v48, v60, v49);
      v61 = v109;
      v86(v51, v49);
      v109 = v61;
      if (v61)
        break;
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v49, v83);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v51, v81);
      v64 = type metadata accessor for Column(0, v97, v62, v63);
      Column.append(_:)(v50, v64, v65, v66);
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v50, v79);
      v48 = v54;
      v67 = v54 == v47;
      v43 = v96;
      v44 = v53;
      v42 = v52;
      if (v67)
        goto LABEL_19;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v49, v83);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v51, v81);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(0, v52, v53);
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t DataFrame.combineColumns<A, B, C, D>(_:_:_:into:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  char v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v99 = a8;
  v84 = a7;
  v81 = a6;
  v80 = a5;
  v79 = a4;
  v92 = sub_215130064();
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v74 = (char *)&v71 - v18;
  v90 = sub_215130064();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v73 = (char *)&v71 - v19;
  v88 = sub_215130064();
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v72 = (char *)&v71 - v20;
  v108 = a14;
  v86 = sub_215130064();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v71 = (char *)&v71 - v21;
  v22 = *v14;
  v23 = v14[1];
  v78 = v14;
  v24 = v14[2];
  v115 = v22;
  v116 = v23;
  v117 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75 = a1;
  v25 = a1;
  v26 = v81;
  v76 = a2;
  v27 = a2;
  v28 = v22;
  v96 = a11;
  DataFrame.subscript.getter(v25, v27, v96, v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v95 = v109;
  v106 = v111;
  v107 = v110;
  v115 = v22;
  v116 = v23;
  v117 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77 = a3;
  v97 = a12;
  DataFrame.subscript.getter(a3, v79, v97, v97);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v94 = v109;
  v104 = v111;
  v105 = v110;
  v115 = v22;
  v116 = v23;
  v117 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v98 = a13;
  DataFrame.subscript.getter(v80, v26, v98, v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v93 = v109;
  v102 = v111;
  v103 = v110;
  if (*(_QWORD *)(v22 + 16))
  {
    sub_21501EE90(v22 + 32, (uint64_t)&v109);
    v29 = v112;
    v30 = v113;
    __swift_project_boxed_opaque_existential_1(&v109, v112);
    v31 = *(_QWORD *)(v30 + 8);
    v32 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = v99;
    swift_bridgeObjectRetain();
    v34 = v32(v29, v31);
    result = sub_21501EA34((uint64_t)&v109);
    if (v34 < 0)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v34)
    {
      v36 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = v99;
    swift_bridgeObjectRetain();
  }
  v34 = 0;
  v36 = 2;
LABEL_7:
  v37 = sub_2150EBD1C(0, v34, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(0, v34, v36);
  Column.init(name:capacity:)(v84, v33, v37, v108, &v115);
  v38 = *(_QWORD *)(v28 + 16);
  v101 = v28;
  if (!v38)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  sub_21501EE90(v28 + 32, (uint64_t)&v109);
  v39 = v112;
  v40 = v113;
  __swift_project_boxed_opaque_existential_1(&v109, v112);
  v41 = *(_QWORD *)(v40 + 8);
  v42 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43 = v42(v39, v41);
  result = sub_21501EA34((uint64_t)&v109);
  if (v43 < 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  if (v43)
  {
    v44 = 0;
    goto LABEL_13;
  }
LABEL_12:
  v43 = 0;
  v44 = 2;
LABEL_13:
  sub_21508C520(0, v43, v44);
  v100 = v24;
  LODWORD(v99) = v44;
  if ((v46 & 1) != 0 || (v47 = v45) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(0, v43, v99);
    v109 = v115;
    v110 = v116;
    v111 = v117;
    swift_bridgeObjectRetain();
    swift_retain();
    DataFrame.replaceColumn<A>(_:with:)(v75, v76, (uint64_t)&v109, v108);
    swift_release();
    swift_bridgeObjectRelease();
    DataFrame.removeColumn(_:)(v77, v79, (uint64_t)&v109);
    sub_21501EA34((uint64_t)&v109);
    DataFrame.removeColumn(_:)(v80, v81, (uint64_t)&v109);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_21501EA34((uint64_t)&v109);
    swift_release();
  }
  else
  {
    v48 = 0;
    v84 = a10;
    v83 = a9;
    v49 = (uint64_t)v74;
    v50 = (uint64_t)v73;
    v51 = (uint64_t)v72;
    v52 = (uint64_t)v71;
    v82 = v43;
    while (1)
    {
      v109 = v101;
      v110 = v23;
      v53 = v23;
      v111 = v100;
      v112 = 0;
      v113 = v43;
      v114 = v99;
      v54 = DataFrame.Rows.index(after:)(v48);
      v109 = v95;
      v110 = v107;
      v111 = v106;
      v57 = type metadata accessor for Column(0, v96, v55, v56);
      Column.subscript.getter(v48, v57, v51);
      v109 = v94;
      v110 = v105;
      v111 = v104;
      v60 = type metadata accessor for Column(0, v97, v58, v59);
      Column.subscript.getter(v48, v60, v50);
      v109 = v93;
      v110 = v103;
      v111 = v102;
      v63 = type metadata accessor for Column(0, v98, v61, v62);
      Column.subscript.getter(v48, v63, v49);
      v64 = v118;
      v83(v51, v50, v49);
      v118 = v64;
      if (v64)
        break;
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v49, v92);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v50, v90);
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v51, v88);
      v67 = type metadata accessor for Column(0, v108, v65, v66);
      Column.append(_:)(v52, v67, v68, v69);
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v52, v86);
      v48 = v54;
      v70 = v54 == v47;
      v23 = v53;
      v43 = v82;
      if (v70)
        goto LABEL_19;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v49, v92);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v50, v90);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v51, v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(0, v82, v99);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t DataFrame.combineColumns<A, B, C, D>(_:_:_:into:transform:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t result;
  char v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  Swift::Int v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char **v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t *v118;
  uint64_t *v119;

  v13 = v12;
  v93 = a7;
  v92 = a6;
  v97 = a5;
  v96 = a4;
  v119 = a3;
  v105 = a9;
  v106 = a10;
  v88 = sub_215130064();
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v94 = (char *)&v72 - v17;
  v86 = sub_215130064();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v78 = (char *)&v72 - v18;
  v84 = sub_215130064();
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v20 = (char *)&v72 - v19;
  v104 = a11;
  v82 = sub_215130064();
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v22 = (char *)&v72 - v21;
  v23 = *a1;
  v24 = a1[1];
  v25 = *a2;
  v26 = a2[1];
  v27 = v119[1];
  v80 = *v119;
  v79 = v27;
  v28 = *v11;
  v29 = v11[1];
  v77 = v11;
  v30 = (uint64_t *)v11[2];
  v116 = v28;
  v117 = v29;
  v118 = v30;
  v74 = v23;
  v114 = v23;
  v115 = v24;
  v73 = v24;
  v95 = a8;
  v31 = a8;
  v32 = v28;
  DataFrame.subscript.getter(&v114, v31);
  v91 = v108;
  v103 = v109;
  v100 = v110;
  v116 = v32;
  v117 = v29;
  v118 = v30;
  v76 = v25;
  v114 = v25;
  v115 = v26;
  v75 = v26;
  DataFrame.subscript.getter(&v114, v105);
  v90 = v108;
  v102 = v109;
  v99 = v110;
  v116 = v32;
  v117 = v29;
  v118 = v30;
  v114 = v80;
  v115 = v79;
  DataFrame.subscript.getter(&v114, v106);
  v89 = v108;
  v101 = v109;
  v98 = v110;
  v33 = *((_QWORD *)v32 + 2);
  v107 = v29;
  v119 = v30;
  if (v33)
  {
    sub_21501EE90((uint64_t)(v32 + 32), (uint64_t)&v108);
    v35 = v111;
    v34 = v112;
    v72 = __swift_project_boxed_opaque_existential_1(&v108, v111);
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38 = v37(v35, v36);
    result = sub_21501EA34((uint64_t)&v108);
    if (v38 < 0)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v38)
    {
      v40 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v38 = 0;
  v40 = 2;
LABEL_7:
  v41 = (uint64_t)v94;
  v42 = (uint64_t)v78;
  v43 = sub_2150EBD1C(0, v38, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21501EF2C(0, v38, v40);
  Column.init(name:capacity:)(v96, v97, v43, v104, &v116);
  v44 = *((_QWORD *)v32 + 2);
  v94 = v32;
  if (!v44)
  {
    swift_bridgeObjectRetain();
    v50 = v107;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  sub_21501EE90((uint64_t)(v32 + 32), (uint64_t)&v108);
  v45 = v111;
  v46 = v112;
  __swift_project_boxed_opaque_existential_1(&v108, v111);
  v47 = *(_QWORD *)(v46 + 8);
  v48 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = v48(v45, v47);
  result = sub_21501EA34((uint64_t)&v108);
  if (v49 < 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v32 = v94;
  v50 = v107;
  if (v49)
  {
    v51 = 0;
    goto LABEL_13;
  }
LABEL_12:
  v49 = 0;
  v51 = 2;
LABEL_13:
  LODWORD(v96) = v51;
  sub_21508C520(0, v49, v51);
  v97 = v49;
  if ((v53 & 1) != 0 || (v54 = v52) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(0, v97, v96);
    v114 = v74;
    v115 = v73;
    v108 = v116;
    v109 = v117;
    v110 = v118;
    DataFrame.replaceColumn<A, B>(_:with:)(&v114, (uint64_t)&v108, v95, v104);
    v114 = v76;
    v115 = v75;
    DataFrame.removeColumn<A>(_:)(&v114, v105);
    swift_release();
    swift_bridgeObjectRelease();
    v114 = v80;
    v115 = v79;
    DataFrame.removeColumn<A>(_:)(&v114, v106);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v55 = 0;
    while (1)
    {
      v108 = v32;
      v109 = v50;
      v110 = v119;
      v111 = 0;
      v112 = v97;
      v113 = v96;
      v56 = DataFrame.Rows.index(after:)(v55);
      v108 = v91;
      v109 = v103;
      v110 = v100;
      v59 = type metadata accessor for Column(0, v95, v57, v58);
      Column.subscript.getter(v55, v59, (uint64_t)v20);
      v108 = v90;
      v109 = v102;
      v110 = v99;
      v62 = type metadata accessor for Column(0, v105, v60, v61);
      Column.subscript.getter(v55, v62, v42);
      v108 = v89;
      v109 = v101;
      v110 = v98;
      v65 = type metadata accessor for Column(0, v106, v63, v64);
      Column.subscript.getter(v55, v65, v41);
      v92(v20, v42, v41);
      if (v13)
        break;
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v41, v88);
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v42, v86);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v20, v84);
      v68 = type metadata accessor for Column(0, v104, v66, v67);
      Column.append(_:)((uint64_t)v22, v68, v69, v70);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v22, v82);
      v55 = v56;
      v71 = v56 == v54;
      v32 = v94;
      v50 = v107;
      if (v71)
        goto LABEL_19;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v41, v88);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v42, v86);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v20, v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21501EF2C(0, v97, v96);
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

void SFrameReadingError.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_2150877BC()
{
  uint64_t v0;

  sub_215130178();
  swift_bridgeObjectRelease();
  sub_21512FB90();
  return v0 + 1;
}

void SFrameReadingError.errorDescription.getter()
{
  SFrameReadingError.description.getter();
}

void sub_2150879AC()
{
  SFrameReadingError.description.getter();
}

uint64_t sub_2150879F4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u && a3 != 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SFrameReadingError(uint64_t a1)
{
  return sub_215087A20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_215087A20(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u && a3 != 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s11TabularData18SFrameReadingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2150879F4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SFrameReadingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2150879F4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_215087A20(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SFrameReadingError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_215087A20(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SFrameReadingError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SFrameReadingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_215087BBC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_215087BD4(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SFrameReadingError()
{
  return &type metadata for SFrameReadingError;
}

unint64_t sub_215087BFC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (!a1)
    return 0;
  v3 = a2;
  if ((a3 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a3) & 0xF;
  else
    v5 = a2 & 0xFFFFFFFFFFFFLL;
  result = sub_21512FB6C();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  if (result >> 14 == 4 * v5)
  {
    v8 = sub_21512FC14();
    v3 = MEMORY[0x2199DB684](v8);
    swift_bridgeObjectRelease();
    return v3;
  }
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    result = sub_21512FB6C();
    if ((v9 & 1) == 0)
    {
      v10 = sub_21512FC14();
      v3 = MEMORY[0x2199DB684](v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_21512FB90();
      swift_bridgeObjectRelease();
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_215087D6C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v5 = a2;
  v6 = result;
  v7 = *(_QWORD *)(a3 + 16);
  if (v7 >= v3)
    v8 = a2 - result;
  else
    v8 = *(_QWORD *)(a3 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)sub_215038EA0(0, v8 & ~(v8 >> 63), 0);
  if (v8 < 0)
    goto LABEL_42;
  v27 = a3;
  v28 = v7;
  v30 = v6;
  v26 = v8;
  if (v8)
  {
    result = swift_bridgeObjectRetain();
    if (v5 < v6)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v8 < (unint64_t)v3)
      v3 = v8;
    v9 = (uint64_t *)(a3 + 40);
    v10 = v6;
    v31 = v5;
    while (v5 != v10)
    {
      if (!v3)
        goto LABEL_37;
      v11 = *(v9 - 1);
      v12 = *v9;
      v14 = *(_QWORD *)(v33 + 16);
      v13 = *(_QWORD *)(v33 + 24);
      result = swift_bridgeObjectRetain();
      if (v14 >= v13 >> 1)
        result = (uint64_t)sub_215038EA0((char *)(v13 > 1), v14 + 1, 1);
      *(_QWORD *)(v33 + 16) = v14 + 1;
      v15 = v33 + 32 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v12;
      *(_QWORD *)(v15 + 48) = v10;
      *(_BYTE *)(v15 + 56) = 7;
      --v3;
      v9 += 2;
      ++v10;
      --v8;
      v5 = v31;
      if (!v8)
        goto LABEL_18;
    }
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  result = swift_bridgeObjectRetain();
  v10 = v6;
LABEL_18:
  if (v10 == v5)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return v33;
  }
  if (v5 >= v30)
  {
    v16 = 0;
    if (v10 <= v5)
      v17 = v5;
    else
      v17 = v10;
    v32 = v17 - v10;
    v18 = v28 - v26;
    if (v28 >= v26)
      v19 = v28 - v26;
    else
      v19 = 0;
    v29 = v19;
    v20 = (uint64_t *)(v27 + 16 * v26 + 40);
    while (v10 >= v30)
    {
      if (v32 == v16)
        goto LABEL_39;
      if (v18 != v16)
      {
        if (v29 == v16)
          goto LABEL_40;
        v21 = *(v20 - 1);
        v22 = *v20;
        v23 = *(_QWORD *)(v33 + 16);
        v24 = *(_QWORD *)(v33 + 24);
        result = swift_bridgeObjectRetain();
        if (v23 >= v24 >> 1)
          result = (uint64_t)sub_215038EA0((char *)(v24 > 1), v23 + 1, 1);
        *(_QWORD *)(v33 + 16) = v23 + 1;
        v25 = v33 + 32 * v23;
        *(_QWORD *)(v25 + 32) = v21;
        *(_QWORD *)(v25 + 40) = v22;
        *(_QWORD *)(v25 + 48) = v10 + v16;
        *(_BYTE *)(v25 + 56) = 7;
        ++v16;
        v20 += 2;
        if (v10 - v5 + v16)
          continue;
      }
      goto LABEL_19;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v30;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = a6;
  v26 = *a7;
  v11 = *((_QWORD *)a7 + 2);
  v30 = *((_QWORD *)a7 + 1);
  v12 = *((_QWORD *)a7 + 3);
  v13 = a7[32];
  v14 = *((_QWORD *)a7 + 5);
  v15 = a7[48];
  v16 = a7[49];
  v24 = a7[51];
  v25 = a7[50];
  v23 = a7[52];
  v17 = sub_21512F644();
  if (v8)
  {
    v19 = sub_21512F638();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v32[0] = v26;
    v33 = v30;
    v34 = v11;
    v35 = v12;
    v36 = v13;
    v37 = v14;
    v38 = v15;
    v39 = v16;
    v40 = v25;
    v41 = v24;
    v42 = v23;
    DataFrame.init(csvData:columns:rows:types:options:)(v17, v18, a2, a3, a4, a5 & 1, v45, (uint64_t)v32, (uint64_t)&v43);
    v21 = sub_21512F638();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
    v22 = v44;
    *(_OWORD *)a8 = v43;
    *(_QWORD *)(a8 + 16) = v22;
  }
  return result;
}

uint64_t DataFrame.init(csvData:columns:rows:types:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  unint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  unsigned __int8 v55;
  char v56;
  char v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v68;
  char v69;
  char v70;
  char v73;
  char v74;
  char v75;
  char v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v109 = a7;
  v11 = *(_QWORD *)(a8 + 8);
  v12 = *(_QWORD *)(a8 + 16);
  v13 = *(_QWORD *)(a8 + 24);
  v14 = *(_BYTE *)(a8 + 32);
  v15 = *(_QWORD *)(a8 + 40);
  v16 = *(_BYTE *)(a8 + 48);
  v17 = *(_BYTE *)(a8 + 49);
  v18 = *(_BYTE *)(a8 + 50);
  v19 = *(_BYTE *)(a8 + 51);
  v20 = *(_BYTE *)(a8 + 52);
  v75 = *(_BYTE *)a8;
  LOBYTE(v83) = *(_BYTE *)a8;
  *((_QWORD *)&v83 + 1) = v11;
  v84 = v12;
  v85 = v13;
  v69 = v16;
  v70 = v14;
  v86 = v14;
  v87 = v15;
  v88 = v16;
  v68 = v17;
  v89 = v17;
  v90 = v18;
  v91 = v19;
  v92 = v20;
  sub_21501F068(a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21505CA74(a1, a2, (char *)&v83, &v93);
  if (v79)
  {
    sub_21501F0D8(a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v56 = v20;
    v57 = v19;
    v58 = v18;
    v64 = v12;
    v65 = v11;
    v66 = v13;
    v61 = a1;
    v59 = a2;
    v21 = v93.n128_u64[0];
    v54 = v100;
    v55 = v93.n128_u8[8];
    v62 = v95;
    v63 = v94;
    v60 = v96;
    v73 = v97;
    v74 = v99;
    v53 = v101;
    v45 = v107;
    v46 = v106;
    v47 = v105;
    v48 = v104;
    v49 = v103;
    v50 = v102;
    v51 = v108;
    v52 = v98;
    v25 = v15;
    v24 = v12;
    v22 = sub_215089B6C((uint64_t)&v93, v75);
    v26 = sub_215089F08(v22, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = v21;
    v80 = *(_QWORD *)(v26 + 16);
    if (v80)
    {
      v28 = 0;
      v29 = 0;
      result = v109;
      v30 = a6;
      v31 = v73;
      v32 = v74;
      while (v29 < *(_QWORD *)(v26 + 16))
      {
        if (*(_QWORD *)(result + 16))
        {
          v33 = v26;
          v34 = result;
          v35 = v25;
          v37 = *(_QWORD *)(v33 + v28 + 32);
          v36 = *(_QWORD *)(v33 + v28 + 40);
          v38 = *(_QWORD *)(v33 + v28 + 48);
          swift_bridgeObjectRetain_n();
          v39 = sub_21502F840(v37, v36);
          if ((v40 & 1) != 0)
          {
            v78 = *(_BYTE *)(*(_QWORD *)(v34 + 56) + v39);
            swift_bridgeObjectRelease();
            result = swift_isUniquelyReferenced_nonNull_native();
            v26 = v33;
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_21501E54C(v33);
              v26 = result;
            }
            v32 = v74;
            if (v29 >= *(_QWORD *)(v26 + 16))
              goto LABEL_19;
            v41 = v26 + v28;
            *(_QWORD *)(v41 + 32) = v37;
            *(_QWORD *)(v41 + 40) = v36;
            *(_QWORD *)(v41 + 48) = v38;
            *(_BYTE *)(v41 + 56) = v78;
            v25 = v35;
          }
          else
          {
            swift_bridgeObjectRelease();
            v25 = v35;
            v26 = v33;
            v32 = v74;
          }
          swift_bridgeObjectRelease();
          result = v109;
          v30 = a6;
          v31 = v73;
        }
        ++v29;
        v28 += 32;
        if (v80 == v29)
        {
          v42 = v26;
          swift_bridgeObjectRelease();
          v24 = v64;
          v43 = v65;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
    }
    else
    {
      v42 = v26;
      swift_bridgeObjectRelease();
      v43 = v65;
      v30 = a6;
      v31 = v73;
      v32 = v74;
LABEL_17:
      v93.n128_u64[0] = v27;
      v93.n128_u8[8] = v55;
      v94 = v63;
      v95 = v62;
      v96 = v60;
      v97 = v31;
      v98 = v52;
      v99 = v32;
      v100 = v54;
      v101 = v53;
      v102 = v50;
      v103 = v49;
      v104 = v48;
      v105 = v47;
      v106 = v46;
      v107 = v45;
      v108 = v51;
      LOBYTE(v83) = v75;
      *((_QWORD *)&v83 + 1) = v43;
      v84 = v24;
      v85 = v66;
      v86 = v70;
      v87 = v25;
      v88 = v69;
      v89 = v68;
      v90 = v58;
      v91 = v57;
      v92 = v56;
      swift_bridgeObjectRetain();
      sub_215088794((uint64_t)&v93, a4, a5, v30 & 1, v42, &v83, (uint64_t)&v81);
      sub_21501F0D8(v61, v59);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      v44 = v82;
      *(_OWORD *)a9 = v81;
      *(_QWORD *)(a9 + 16) = v44;
    }
  }
  return result;
}

double sub_215088794@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X8>)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  __int128 v66;
  unint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[5];
  _OWORD v76[5];
  __int128 v77;
  uint64_t v78;
  _OWORD v79[2];
  _BYTE v80[21];

  v64 = a7;
  v63 = a5;
  v11 = a4 & 1;
  v12 = sub_21512F50C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_OWORD *)(a1 + 80);
  v76[4] = *(_OWORD *)(a1 + 64);
  v77 = v16;
  v78 = *(_QWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 16);
  v76[0] = *(_OWORD *)a1;
  v76[1] = v17;
  v18 = *(_OWORD *)(a1 + 48);
  v76[2] = *(_OWORD *)(a1 + 32);
  v76[3] = v18;
  v20 = a6[1];
  v19 = a6[2];
  v21 = *a6;
  *(_QWORD *)&v80[13] = *(_QWORD *)((char *)a6 + 45);
  v79[1] = v20;
  *(_OWORD *)v80 = v19;
  v79[0] = v21;
  v22 = v65;
  v23 = sub_21508A19C(a2, a3, v11, v77, v21);
  if (!v22)
  {
    v26 = v23;
    v27 = v24;
    v60 = v13;
    v61 = v12;
    sub_21508A24C((uint64_t)v76);
    sub_21508A2BC((uint64_t)v79);
    v28 = (_QWORD *)sub_215089A4C(v63);
    sub_21508A30C((uint64_t)v79);
    sub_21508A35C((uint64_t)v76);
    sub_21510223C(MEMORY[0x24BEE4B08], 46, 0xE100000000000000, v75);
    v29 = v28[2];
    v63 = 0;
    if (v29)
    {
      v62 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_4:
        v30 = 0;
        v31 = (uint64_t)(v28 + 4);
        v58 = v27;
        v59 = v26;
        v56 = v27 - v26;
        v32 = __OFSUB__(v27, v26);
        v57 = v32;
        v65 = v28;
        v33 = v62;
        while (1)
        {
          if (v33 == v30)
            goto LABEL_39;
          if (v30 >= v28[2])
            goto LABEL_40;
          sub_21504C608(v31, (uint64_t)&v71);
          v34 = v73;
          v35 = v74;
          __swift_project_boxed_opaque_existential_1(&v71, v73);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v35 + 24))(v68, v34, v35);
          v37 = v69;
          v36 = v70;
          __swift_project_boxed_opaque_existential_1(v68, v69);
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 8) + 8))(v37);
          v26 = v39;
          sub_21501EA34((uint64_t)v68);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v71);
          v71 = v38;
          v72 = v26;
          sub_21512F500();
          sub_215068E0C();
          v40 = sub_2151300A0();
          v42 = v41;
          (*(void (**)(char *, uint64_t))(v60 + 8))(v15, v61);
          swift_bridgeObjectRelease();
          v43 = HIBYTE(v42) & 0xF;
          if ((v42 & 0x2000000000000000) == 0)
            v43 = v40 & 0xFFFFFFFFFFFFLL;
          if (v43)
          {
            swift_bridgeObjectRetain();
            v44 = v38;
            v27 = v26;
          }
          else
          {
            v71 = 0x206E6D756C6F43;
            v72 = 0xE700000000000000;
            v68[0] = v30;
            sub_2151303B8();
            sub_21512FB90();
            swift_bridgeObjectRelease();
            v44 = v71;
            v27 = v72;
          }
          v28 = (_QWORD *)sub_215102038(v44, v27);
          v46 = v45;
          swift_bridgeObjectRelease();
          v47 = v28 == (_QWORD *)v38 && v46 == v26;
          if (v47)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v27 = sub_21513043C();
            swift_bridgeObjectRelease();
            if ((v27 & 1) == 0)
            {
              v48 = v59;
              if (v30 >= v65[2])
                goto LABEL_43;
              v26 = *(_QWORD *)(v31 + 24);
              v27 = *(_QWORD *)(v31 + 32);
              __swift_mutable_project_boxed_opaque_existential_1(v31, v26);
              (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v27 + 40))(v28, v46, v26, v27);
              v28 = v65;
              goto LABEL_26;
            }
            swift_bridgeObjectRelease();
          }
          v28 = v65;
          v48 = v59;
LABEL_26:
          v47 = v48 == v58;
          v49 = v64;
          if (!v47)
          {
            if (v57)
              goto LABEL_41;
            if (v30 >= v28[2])
              goto LABEL_42;
            v26 = *(_QWORD *)(v31 + 24);
            v27 = *(_QWORD *)(v31 + 32);
            __swift_mutable_project_boxed_opaque_existential_1(v31, v26);
            v50 = v63;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 80))(v56, v26, v27);
            v63 = v50;
            if (v50)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return result;
            }
          }
          v33 = v62;
          ++v30;
          v31 += 40;
          if (v62 == v30)
            goto LABEL_32;
        }
      }
LABEL_44:
      v28 = sub_21501E538(v28);
      goto LABEL_4;
    }
    v49 = v64;
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = MEMORY[0x24BEE4AF8];
    v52 = sub_2150203D0(MEMORY[0x24BEE4AF8]);
    *(_QWORD *)&v66 = v51;
    *((_QWORD *)&v66 + 1) = v51;
    v67 = v52;
    v53 = (char *)v28[2];
    if (v53)
    {
      v15 = 0;
      v54 = (uint64_t)(v28 + 4);
      while ((unint64_t)v15 < v28[2])
      {
        ++v15;
        sub_21504C608(v54, (uint64_t)&v71);
        v26 = v73;
        v27 = v74;
        __swift_project_boxed_opaque_existential_1(&v71, v73);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v27 + 24))(v68, v26, v27);
        DataFrame.append(column:)((uint64_t)v68);
        sub_21501EA34((uint64_t)v68);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v71);
        v54 += 40;
        if (v53 == v15)
          goto LABEL_36;
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    v55 = v67;
    result = *(double *)&v66;
    *(_OWORD *)v49 = v66;
    *(_QWORD *)(v49 + 16) = v55;
  }
  return result;
}

void sub_215088CC4()
{
  __asm { BR              X10 }
}

uint64_t sub_215088D88(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v41 = v13;
  v42 = v12;
  v43 = v11;
  v44 = v10;
  v45 = v9;
  v46 = v8;
  v47 = v22;
  v17[3] = (uint64_t)&type metadata for IntegerColumnProcessor;
  v17[4] = (uint64_t)&off_24D2A56D0;
  v58 = v16;
  v25 = v15;
  v28 = swift_allocObject();
  *v17 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = sub_2150C0720(v20);
  swift_bridgeObjectRelease();
  if (__OFSUB__(v56, v57))
  {
    __break(1u);
    JUMPOUT(0x215089A14);
  }
  *(_QWORD *)(v23 - 192) = v48;
  *(_QWORD *)(v23 - 184) = v55;
  v29 = MEMORY[0x24BEE4AF8];
  sub_215043454(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v23 - 176) = v30;
  result = sub_2150EE010(v56 - v57);
  *(_QWORD *)(v28 + 16) = v14;
  *(_BYTE *)(v28 + 24) = v49;
  *(_QWORD *)(v28 + 32) = v18;
  *(_QWORD *)(v28 + 40) = v21;
  v32 = *(_QWORD *)(v23 - 192);
  v33 = *(_OWORD *)(v23 - 184);
  *(_QWORD *)(v28 + 48) = a7;
  *(_BYTE *)(v28 + 56) = v50;
  *(_QWORD *)(v28 + 64) = v35;
  *(_BYTE *)(v28 + 72) = v51;
  *(_BYTE *)(v28 + 73) = v52;
  *(_BYTE *)(v28 + 74) = v53;
  *(_BYTE *)(v28 + 75) = v54;
  *(_BYTE *)(v28 + 76) = v24;
  *(_QWORD *)(v28 + 80) = a8;
  *(_QWORD *)(v28 + 88) = a6;
  *(_QWORD *)(v28 + 96) = a5;
  *(_QWORD *)(v28 + 104) = a4;
  *(_QWORD *)(v28 + 112) = v19;
  *(_QWORD *)(v28 + 120) = v34;
  *(_QWORD *)(v28 + 128) = v29;
  *(_BYTE *)(v28 + 136) = a1;
  *(_QWORD *)(v28 + 144) = v20;
  *(_QWORD *)(v28 + 152) = v25;
  *(_QWORD *)(v28 + 160) = v59;
  *(_BYTE *)(v28 + 168) = v41;
  *(_QWORD *)(v28 + 176) = v58;
  *(_BYTE *)(v28 + 184) = v42;
  *(_BYTE *)(v28 + 185) = v43;
  *(_BYTE *)(v28 + 186) = v44;
  *(_BYTE *)(v28 + 187) = v45;
  *(_BYTE *)(v28 + 188) = v46;
  *(_QWORD *)(v28 + 192) = v47;
  *(_QWORD *)(v28 + 200) = v57;
  *(_QWORD *)(v28 + 208) = v56;
  *(_QWORD *)(v28 + 216) = 0;
  *(_QWORD *)(v28 + 224) = v32;
  *(_OWORD *)(v28 + 232) = v33;
  return result;
}

