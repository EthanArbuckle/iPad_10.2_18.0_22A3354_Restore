void sub_1834BFBC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_service_requested_outbound_data(void *a1, unint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  id v8;
  void (**v9)(_QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v15;
  char v16;
  const char *v17;
  void *v18;
  char v19;
  NSObject *v20;
  uint64_t v21;
  char v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(const char *, _BYTE *, uint64_t, uint64_t, uint64_t, id *);
  int v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  char *v35;
  void *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  void *v40;
  os_log_type_t v41;
  void *v42;
  os_log_type_t v43;
  char *backtrace_string;
  os_log_type_t v45;
  _BOOL4 v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _BOOL4 v50;
  void *v51;
  const char *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  const char *v56;
  os_log_type_t v57;
  os_log_type_t v58;
  void *v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  os_log_type_t v63;
  char *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  const char *v67;
  char *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  os_log_type_t v71;
  const char *v72;
  const char *v73;
  id v74;
  os_log_type_t v75;
  id v77[2];
  unint64_t v78;
  char v79;
  os_log_type_t v80;
  char *v81;
  id *v82;
  os_log_type_t type[8];
  char v84;
  _BYTE buf[12];
  __int16 v86;
  char *v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  unint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v78 = a2;
  v8 = a4;
  v9 = (void (**)(_QWORD, _QWORD))v8;
  if (!v7)
  {
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
    v37 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v81) = 0;
    if (!__nwlog_fault(v37, type, &v81))
      goto LABEL_127;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_126;
    }
    if (!(_BYTE)v81)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v57 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        _os_log_impl(&dword_182FBE000, v38, v57, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_126;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v38 = objc_claimAutoreleasedReturnValue();
    v45 = type[0];
    v46 = os_log_type_enabled(v38, type[0]);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        _os_log_impl(&dword_182FBE000, v38, v45, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_126;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
      v86 = 2082;
      v87 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v38, v45, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_87;
  }
  if (!a3)
  {
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
    v37 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v81) = 0;
    if (!__nwlog_fault(v37, type, &v81))
      goto LABEL_127;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v41 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s called with null data_size", buf, 0xCu);
      }
      goto LABEL_126;
    }
    if (!(_BYTE)v81)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v58 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        _os_log_impl(&dword_182FBE000, v38, v58, "%{public}s called with null data_size, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_126;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v38 = objc_claimAutoreleasedReturnValue();
    v47 = type[0];
    v48 = os_log_type_enabled(v38, type[0]);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        _os_log_impl(&dword_182FBE000, v38, v47, "%{public}s called with null data_size, no backtrace", buf, 0xCu);
      }
      goto LABEL_126;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
      v86 = 2082;
      v87 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v38, v47, "%{public}s called with null data_size, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_87;
  }
  if (!v8)
  {
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
    v37 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v81) = 0;
    if (!__nwlog_fault(v37, type, &v81))
      goto LABEL_127;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v43 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        _os_log_impl(&dword_182FBE000, v38, v43, "%{public}s called with null available_outbound_data", buf, 0xCu);
      }
LABEL_126:

LABEL_127:
      if (v37)
        free(v37);
      goto LABEL_28;
    }
    if (!(_BYTE)v81)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v63 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        _os_log_impl(&dword_182FBE000, v38, v63, "%{public}s called with null available_outbound_data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_126;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v38 = objc_claimAutoreleasedReturnValue();
    v49 = type[0];
    v50 = os_log_type_enabled(v38, type[0]);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        _os_log_impl(&dword_182FBE000, v38, v49, "%{public}s called with null available_outbound_data, no backtrace", buf, 0xCu);
      }
      goto LABEL_126;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
      v86 = 2082;
      v87 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v38, v49, "%{public}s called with null available_outbound_data, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_87:

    free(backtrace_string);
    goto LABEL_127;
  }
  if (!*((_QWORD *)v7 + 37))
  {
    if ((v7[403] & 4) != 0)
    {
      v21 = 0;
      v7[403] |= 8u;
LABEL_160:
      v7[405] |= 2u;
      goto LABEL_161;
    }
    v77[0] = 0;
    v77[1] = v77;
    v17 = (const char *)*((_QWORD *)v7 - 8);
    if (v17)
    {
      v18 = (void *)*((_QWORD *)v17 + 5);
      if (v18 == &nw_protocol_ref_counted_handle)
      {
        v24 = *((_QWORD *)v17 + 11);
        if (v24)
          *((_QWORD *)v17 + 11) = v24 + 1;
        v19 = -1;
      }
      else
      {
        v19 = 0;
      }
      *(_QWORD *)type = v17;
      v84 = v19;
      v25 = (void *)*((_QWORD *)v7 - 7);
      if (v25 == &nw_protocol_ref_counted_handle)
      {
        v27 = *((_QWORD *)v7 - 1);
        if (v27)
          *((_QWORD *)v7 - 1) = v27 + 1;
        v26 = -1;
      }
      else
      {
        v26 = 0;
      }
      v81 = v7 - 96;
      LOBYTE(v82) = v26;
      v28 = *((_QWORD *)v17 + 3);
      if (v28)
      {
        v29 = *(uint64_t (**)(const char *, _BYTE *, uint64_t, uint64_t, uint64_t, id *))(v28 + 88);
        if (v29)
        {
          v30 = v29(v17, v7 - 96, a3, a3, 1, v77);
          if (v25 != &nw_protocol_ref_counted_handle)
            goto LABEL_40;
          goto LABEL_147;
        }
      }
      __nwlog_obj();
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = (const char *)*((_QWORD *)v17 + 2);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
      if (!v52)
        v52 = "invalid";
      v86 = 2082;
      v87 = (char *)v52;
      v88 = 2048;
      v89 = v17;
      v53 = (char *)_os_log_send_and_compose_impl();

      v80 = OS_LOG_TYPE_ERROR;
      v79 = 0;
      if (__nwlog_fault(v53, &v80, &v79))
      {
        if (v80 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = v80;
          if (os_log_type_enabled(v54, v80))
          {
            v56 = (const char *)*((_QWORD *)v17 + 2);
            if (!v56)
              v56 = "invalid";
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
            v86 = 2082;
            v87 = (char *)v56;
            v88 = 2048;
            v89 = v17;
            _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback", buf, 0x20u);
          }
LABEL_143:

          goto LABEL_144;
        }
        if (!v79)
        {
          __nwlog_obj();
          v54 = objc_claimAutoreleasedReturnValue();
          v71 = v80;
          if (os_log_type_enabled(v54, v80))
          {
            v72 = (const char *)*((_QWORD *)v17 + 2);
            if (!v72)
              v72 = "invalid";
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
            v86 = 2082;
            v87 = (char *)v72;
            v88 = 2048;
            v89 = v17;
            _os_log_impl(&dword_182FBE000, v54, v71, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded", buf, 0x20u);
          }
          goto LABEL_143;
        }
        v64 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v65 = v80;
        v66 = os_log_type_enabled(v54, v80);
        if (!v64)
        {
          if (v66)
          {
            v73 = (const char *)*((_QWORD *)v17 + 2);
            if (!v73)
              v73 = "invalid";
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
            v86 = 2082;
            v87 = (char *)v73;
            v88 = 2048;
            v89 = v17;
            _os_log_impl(&dword_182FBE000, v54, v65, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace", buf, 0x20u);
          }
          goto LABEL_143;
        }
        if (v66)
        {
          v67 = (const char *)*((_QWORD *)v17 + 2);
          if (!v67)
            v67 = "invalid";
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
          v86 = 2082;
          v87 = (char *)v67;
          v88 = 2048;
          v89 = v17;
          v90 = 2082;
          v91 = (unint64_t)v64;
          _os_log_impl(&dword_182FBE000, v54, v65, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v64);
      }
LABEL_144:
      if (v53)
        free(v53);
      v30 = 0;
      if (v25 != &nw_protocol_ref_counted_handle)
      {
LABEL_40:
        if (v18 != &nw_protocol_ref_counted_handle)
          goto LABEL_41;
        goto LABEL_148;
      }
LABEL_147:
      nw::release_if_needed<nw_protocol *>((uint64_t *)&v81);
      if (v18 != &nw_protocol_ref_counted_handle)
      {
LABEL_41:
        if (!v30)
          goto LABEL_159;
        goto LABEL_149;
      }
LABEL_148:
      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      if (!v30)
      {
LABEL_159:
        v21 = 0;
        goto LABEL_160;
      }
LABEL_149:
      v74 = v77[0];
      ((void (**)(_QWORD, id))v9)[2](v9, v74);

      goto LABEL_150;
    }
    __nwlog_obj();
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
    v60 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v81) = 0;
    if (__nwlog_fault(v60, type, &v81))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v61 = objc_claimAutoreleasedReturnValue();
        v62 = type[0];
        if (os_log_type_enabled(v61, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
          _os_log_impl(&dword_182FBE000, v61, v62, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if ((_BYTE)v81)
      {
        v68 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v61 = objc_claimAutoreleasedReturnValue();
        v69 = type[0];
        v70 = os_log_type_enabled(v61, type[0]);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
            v86 = 2082;
            v87 = v68;
            _os_log_impl(&dword_182FBE000, v61, v69, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v68);
          goto LABEL_157;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
          _os_log_impl(&dword_182FBE000, v61, v69, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v61 = objc_claimAutoreleasedReturnValue();
        v75 = type[0];
        if (os_log_type_enabled(v61, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_protocol_get_output_frames";
          _os_log_impl(&dword_182FBE000, v61, v75, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_157:
    if (v60)
      free(v60);
    goto LABEL_159;
  }
  v10 = nw_protocol_implementation_lookup_path((NWConcrete_nw_protocol_instance *)v7, a2, &v78);
  if (!v10)
  {
    if (((char)v7[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        v86 = 2082;
        v87 = v7 + 407;
        v88 = 2080;
        v89 = " ";
        v90 = 2048;
        v91 = v78;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path found for %lx", buf, 0x2Au);
      }

    }
    v9[2](v9, 0);
    goto LABEL_150;
  }
  v11 = v10;
  if ((*(_BYTE *)(v10 + 137) & 2) == 0)
  {
    v81 = 0;
    v82 = (id *)&v81;
    v12 = *(_QWORD **)(v10 + 32);
    if (v12)
    {
      v13 = v12[3];
      if (v13)
      {
        v14 = *(uint64_t (**)(void))(v13 + 88);
        if (v14)
        {
          v15 = (void *)v12[5];
          if (v15 == &nw_protocol_ref_counted_handle)
          {
            v31 = v12[11];
            if (v31)
              v12[11] = v31 + 1;
            v16 = -1;
          }
          else
          {
            v16 = 0;
          }
          *(_QWORD *)buf = v12;
          buf[8] = v16;
          v32 = (void *)*((_QWORD *)v7 - 7);
          if (v32 == &nw_protocol_ref_counted_handle)
          {
            v34 = *((_QWORD *)v7 - 1);
            if (v34)
              *((_QWORD *)v7 - 1) = v34 + 1;
            v33 = -1;
          }
          else
          {
            v33 = 0;
          }
          *(_QWORD *)type = v7 - 96;
          v84 = v33;
          v21 = v14();
          if (v32 == &nw_protocol_ref_counted_handle)
          {
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            if (v15 != &nw_protocol_ref_counted_handle)
            {
LABEL_53:
              if ((_DWORD)v21)
              {
LABEL_54:
                v35 = v81;
                *(_QWORD *)(v11 + 56) = nw_frame_get_finalizer_context((uint64_t)v35);
                ((void (**)(_QWORD, char *))v9)[2](v9, v35);

LABEL_150:
                v21 = 1;
                goto LABEL_161;
              }
              goto LABEL_57;
            }
          }
          else if (v15 != &nw_protocol_ref_counted_handle)
          {
            goto LABEL_53;
          }
          nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
          if ((_DWORD)v21)
            goto LABEL_54;
LABEL_57:
          v22 = *(_BYTE *)(v11 + 137) | 1;
          goto LABEL_22;
        }
      }
    }
    if (((char)v7[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        v86 = 2082;
        v87 = v7 + 407;
        v88 = 2080;
        v89 = " ";
        v90 = 2048;
        v91 = v78;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler is torn down for path %lx", buf, 0x2Au);
      }

    }
LABEL_28:
    v21 = 0;
    goto LABEL_161;
  }
  v21 = 0;
  v22 = *(_BYTE *)(v10 + 137) | 5;
LABEL_22:
  *(_BYTE *)(v11 + 137) = v22;
LABEL_161:

  return v21;
}

void sub_1834C0B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_request_outbound_data_block_invoke(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  uint64_t v7;

  v5 = a2;
  v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v7 = 1;
  }
  else
  {
    v7 = nw_protocol_service_requested_outbound_data(v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(void **)(a1 + 32));
  }

  return v7;
}

void sub_1834C0C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL33nw_protocol_create_data_from_poolP31NWConcrete_nw_protocol_instanceb_block_invoke(uint64_t a1, void *a2)
{
  id v4;
  int v5;
  int v6;

  v4 = a2;
  v5 = nw_frame_uses_external_data((uint64_t)v4);
  v6 = *(unsigned __int8 *)(a1 + 40);
  if (v6 == v5)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);

  return v6 != v5;
}

uint64_t ___ZL47nw_protocol_implementation_service_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a2;
  v4 = v3;
  if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) && !nw_frame_unclaimed_length(v3))
  {
    v7 = v4[4];
    v8 = (_QWORD *)v4[5];
    v6 = v4 + 4;
    if (v7)
    {
      *(_QWORD *)(v7 + 40) = v8;
      v8 = (_QWORD *)v4[5];
    }
    else
    {
      *(_QWORD *)(a1[6] + 24) = v8;
    }
    *v8 = v7;
    *v6 = 0;
    v4[5] = 0;
    --*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    v9 = a1[7];
    --*(_DWORD *)(a1[6] + 32);
    ++*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v10 = *(_QWORD **)(v9 + 8);
    v4[4] = 0;
    v4[5] = v10;
    *v10 = v4;
    *(_QWORD *)(v9 + 8) = v6;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

BOOL ___ZL47nw_protocol_implementation_service_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_278(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  void *v4;
  unsigned int v5;
  size_t v6;
  uint64_t v7;
  _WORD *v8;
  _QWORD *v9;
  const void *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 result;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  size_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (!*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) || !*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    v7 = 0;
LABEL_15:

    return v7;
  }
  v5 = nw_frame_unclaimed_length(v3);
  v6 = *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v5 <= v6)
  {
    v12 = v5;
    v13 = v4;
    v9 = v13;
    v14 = v13[4];
    v15 = (_QWORD *)v13[5];
    if (v14)
    {
      *(_QWORD *)(v14 + 40) = v15;
      v15 = (_QWORD *)v13[5];
    }
    else
    {
      *(_QWORD *)(a1[8] + 24) = v15;
    }
    *v15 = v14;
    v13[4] = 0;
    v13[5] = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v12;
    --*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    v16 = a1[8];
    v17 = *(_DWORD *)(v16 + 36) - v12;
    --*(_DWORD *)(v16 + 32);
    *(_DWORD *)(v16 + 36) = v17;
    goto LABEL_13;
  }
  if (!(_DWORD)v6)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v36 = "strict_calloc";
    v22 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v22);
    if (result)
      goto LABEL_41;
    free(v22);
  }
  v7 = (uint64_t)malloc_type_calloc(1uLL, v6, 0xEAFB8F1AuLL);
  if (v7)
    goto LABEL_6;
  __nwlog_obj();
  v23 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v36 = "strict_calloc";
  v37 = 2048;
  v38 = 1;
  v39 = 2048;
  v40 = v6;
  v24 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v24);
  if (!result)
  {
    free(v24);
LABEL_6:
    v8 = (_WORD *)nw_frame_create(0, v7, *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24), (uint64_t)nw_protocol_implementation_partial_input_frame_finalizer, 0);
    if (v8)
    {
      v8[102] |= 1u;
      v9 = v8;
      nw_frame_inherit_metadata((uint64_t)v4, (uint64_t)v9, 0);
      v10 = (const void *)nw_frame_unclaimed_bytes((uint64_t)v4, 0);
      memcpy((void *)v7, v10, *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24));
      nw_frame_claim((uint64_t)v4, v11, *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
      *(_DWORD *)(a1[8] + 36) -= *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
      *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
LABEL_13:
      ++*(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
      v18 = a1[9];
      v9[4] = 0;
      v19 = *(_QWORD **)(v18 + 8);
      v9[5] = v19;
      *v19 = v9;
      *(_QWORD *)(v18 + 8) = v9 + 4;
      v7 = 1;
LABEL_14:

      goto LABEL_15;
    }
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v26, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s nw_frame_create with partial data failed", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v31 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
            v37 = 2082;
            v38 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s nw_frame_create with partial data failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s nw_frame_create with partial data failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s nw_frame_create with partial data failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_36:
    if (v26)
      free(v26);
    if (v7)
    {
      free((void *)v7);
      v9 = 0;
      v7 = 0;
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_14;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1834C1338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL47nw_protocol_implementation_service_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_279(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  void *v4;
  unsigned int v5;
  size_t v6;
  uint64_t v7;
  _WORD *v8;
  _QWORD *v9;
  const void *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 result;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  size_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (!*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) || !*(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    v7 = 0;
LABEL_15:

    return v7;
  }
  v5 = nw_frame_unclaimed_length(v3);
  v6 = *(unsigned int *)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v5 <= v6)
  {
    v12 = v5;
    v13 = v4;
    v9 = v13;
    v14 = v13[4];
    v15 = (_QWORD *)v13[5];
    if (v14)
    {
      *(_QWORD *)(v14 + 40) = v15;
      v15 = (_QWORD *)v13[5];
    }
    else
    {
      *(_QWORD *)(a1[4] + 192) = v15;
    }
    *v15 = v14;
    v13[4] = 0;
    v13[5] = 0;
    *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) -= v12;
    --*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    *(_DWORD *)(a1[4] + 204) -= v12;
    --*(_DWORD *)(a1[4] + 200);
    goto LABEL_13;
  }
  if (!(_DWORD)v6)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v34 = "strict_calloc";
    v20 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v20);
    if (result)
      goto LABEL_41;
    free(v20);
  }
  v7 = (uint64_t)malloc_type_calloc(1uLL, v6, 0xEAFB8F1AuLL);
  if (v7)
    goto LABEL_6;
  __nwlog_obj();
  v21 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v34 = "strict_calloc";
  v35 = 2048;
  v36 = 1;
  v37 = 2048;
  v38 = v6;
  v22 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v22);
  if (!result)
  {
    free(v22);
LABEL_6:
    v8 = (_WORD *)nw_frame_create(0, v7, *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24), (uint64_t)nw_protocol_implementation_partial_input_frame_finalizer, 0);
    if (v8)
    {
      v8[102] |= 1u;
      v9 = v8;
      nw_frame_inherit_metadata((uint64_t)v4, (uint64_t)v9, 0);
      v10 = (const void *)nw_frame_unclaimed_bytes((uint64_t)v4, 0);
      memcpy((void *)v7, v10, *(unsigned int *)(*(_QWORD *)(a1[6] + 8) + 24));
      nw_frame_claim((uint64_t)v4, v11, *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24), 0);
      *(_DWORD *)(a1[4] + 204) -= *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
      *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
LABEL_13:
      ++*(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
      v16 = a1[9];
      v9[4] = 0;
      v17 = *(_QWORD **)(v16 + 8);
      v9[5] = v17;
      *v17 = v9;
      *(_QWORD *)(v16 + 8) = v9 + 4;
      v7 = 1;
LABEL_14:

      goto LABEL_15;
    }
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v24, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s nw_frame_create with partial data failed", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
            v35 = 2082;
            v36 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s nw_frame_create with partial data failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s nw_frame_create with partial data failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_implementation_service_input_frames_block_invoke";
          _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s nw_frame_create with partial data failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_36:
    if (v24)
      free(v24);
    if (v7)
    {
      free((void *)v7);
      v9 = 0;
      v7 = 0;
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_14;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1834C18FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_implementation_partial_input_frame_finalizer(void *a1)
{
  id v1;
  uint64_t v2;
  int v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  void *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (uint64_t)v1;
    v13 = v1;
    if ((*((_WORD *)v1 + 102) & 0x100) == 0
      || !g_channel_check_validity
      || (v3 = g_channel_check_validity(v1, *((_QWORD *)v1 + 11)), v2 = (uint64_t)v13, v3))
    {
      v4 = *(void **)(v2 + 112);
      if (v4)
      {
        free(v4);
        v2 = (uint64_t)v13;
      }
    }
    nw_frame_reset(v2, 0, 0, 0, 0);

    return;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null frame", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null frame, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_implementation_partial_input_frame_finalizer";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null frame, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v6)
    free(v6);
}

BOOL ___ZL39nw_protocol_implementation_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = *(_DWORD *)(nw_hash_node_get_extra(a2) + 128);
  if (v3 != 2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v3 == 2;
}

uint64_t ___ZL39nw_protocol_implementation_disconnectedP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  _QWORD *object;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *);
  void *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  const char *v40;
  const char *v41;
  os_log_type_t v42;
  os_log_type_t v43;
  char v44;
  os_log_type_t v45[8];
  char v46;
  os_log_type_t type;
  os_log_type_t v48[8];
  char v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  _QWORD *v55;
  __int16 v56;
  char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  object = (_QWORD *)nw_hash_node_get_object(a2);
  if (object)
  {
    v4 = object;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)object[5];
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      v8 = object[11];
      if (v8)
        object[11] = v8 + 1;
      v7 = -1;
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)v48 = object;
    v49 = v7;
    if (v5)
    {
      v9 = *(void **)(v5 + 40);
      if (v9 == &nw_protocol_ref_counted_handle)
      {
        v11 = *(_QWORD *)(v5 + 88);
        if (v11)
          *(_QWORD *)(v5 + 88) = v11 + 1;
        v10 = -1;
      }
      else
      {
        v10 = 0;
      }
      *(_QWORD *)v45 = v5;
      v46 = v10;
      v12 = object[3];
      if (v12)
      {
        v13 = *(void (**)(_QWORD *))(v12 + 48);
        if (v13)
        {
          v13(object);
LABEL_16:
          if (v9 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v45);
LABEL_18:
          if (v6 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v48);
          return 1;
        }
      }
      __nwlog_obj();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (const char *)v4[2];
      *(_DWORD *)buf = 136446722;
      v51 = "__nw_protocol_disconnected";
      if (!v16)
        v16 = "invalid";
      v52 = 2082;
      v53 = (void *)v16;
      v54 = 2048;
      v55 = v4;
      v17 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (__nwlog_fault(v17, &type, &v44))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            v20 = (const char *)v4[2];
            if (!v20)
              v20 = "invalid";
            *(_DWORD *)buf = 136446722;
            v51 = "__nw_protocol_disconnected";
            v52 = 2082;
            v53 = (void *)v20;
            v54 = 2048;
            v55 = v4;
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s protocol %{public}s (%p) has invalid disconnected callback", buf, 0x20u);
          }
        }
        else if (v44)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v30 = type;
          v31 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v31)
            {
              v32 = (const char *)v4[2];
              if (!v32)
                v32 = "invalid";
              *(_DWORD *)buf = 136446978;
              v51 = "__nw_protocol_disconnected";
              v52 = 2082;
              v53 = (void *)v32;
              v54 = 2048;
              v55 = v4;
              v56 = 2082;
              v57 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_67;
          }
          if (v31)
          {
            v41 = (const char *)v4[2];
            if (!v41)
              v41 = "invalid";
            *(_DWORD *)buf = 136446722;
            v51 = "__nw_protocol_disconnected";
            v52 = 2082;
            v53 = (void *)v41;
            v54 = 2048;
            v55 = v4;
            _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v39 = type;
          if (os_log_type_enabled(v18, type))
          {
            v40 = (const char *)v4[2];
            if (!v40)
              v40 = "invalid";
            *(_DWORD *)buf = 136446722;
            v51 = "__nw_protocol_disconnected";
            v52 = 2082;
            v53 = (void *)v40;
            v54 = 2048;
            v55 = v4;
            _os_log_impl(&dword_182FBE000, v18, v39, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_67:
      if (v17)
        free(v17);
      goto LABEL_16;
    }
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v51 = "__nw_protocol_disconnected";
    v26 = (char *)_os_log_send_and_compose_impl();

    v45[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, v45, &type))
    {
      if (v45[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v37 = v45[0];
        v38 = os_log_type_enabled(v27, v45[0]);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "__nw_protocol_disconnected";
            v52 = 2082;
            v53 = v36;
            _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
          goto LABEL_83;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v43 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "__nw_protocol_disconnected";
          _os_log_impl(&dword_182FBE000, v27, v43, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_83:
    if (v26)
      free(v26);
    goto LABEL_18;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v51 = "__nw_protocol_disconnected";
  v22 = (char *)_os_log_send_and_compose_impl();

  v48[0] = OS_LOG_TYPE_ERROR;
  v45[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v22, v48, v45))
  {
    if (v48[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v45[0])
    {
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v34 = v48[0];
      v35 = os_log_type_enabled(v23, v48[0]);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "__nw_protocol_disconnected";
          v52 = 2082;
          v53 = v33;
          _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_78;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v42 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v23, v42, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_78:
  if (v22)
    free(v22);
  return 1;
}

void sub_1834C2464(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL36nw_protocol_implementation_connectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *);
  void *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  const char *v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  const char *v40;
  const char *v41;
  os_log_type_t v42;
  os_log_type_t v43;
  char v44;
  os_log_type_t v45[8];
  char v46;
  os_log_type_t type;
  os_log_type_t v48[8];
  char v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  _QWORD *v55;
  __int16 v56;
  char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  object = (_QWORD *)nw_hash_node_get_object(a2);
  if (object)
  {
    v4 = object;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)object[5];
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      v8 = object[11];
      if (v8)
        object[11] = v8 + 1;
      v7 = -1;
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)v48 = object;
    v49 = v7;
    if (v5)
    {
      v9 = *(void **)(v5 + 40);
      if (v9 == &nw_protocol_ref_counted_handle)
      {
        v11 = *(_QWORD *)(v5 + 88);
        if (v11)
          *(_QWORD *)(v5 + 88) = v11 + 1;
        v10 = -1;
      }
      else
      {
        v10 = 0;
      }
      *(_QWORD *)v45 = v5;
      v46 = v10;
      v12 = object[3];
      if (v12)
      {
        v13 = *(void (**)(_QWORD *))(v12 + 40);
        if (v13)
        {
          v13(object);
LABEL_16:
          if (v9 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v45);
LABEL_18:
          if (v6 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)v48);
          return 1;
        }
      }
      __nwlog_obj();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (const char *)v4[2];
      *(_DWORD *)buf = 136446722;
      v51 = "__nw_protocol_connected";
      if (!v16)
        v16 = "invalid";
      v52 = 2082;
      v53 = (void *)v16;
      v54 = 2048;
      v55 = v4;
      v17 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (__nwlog_fault(v17, &type, &v44))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            v20 = (const char *)v4[2];
            if (!v20)
              v20 = "invalid";
            *(_DWORD *)buf = 136446722;
            v51 = "__nw_protocol_connected";
            v52 = 2082;
            v53 = (void *)v20;
            v54 = 2048;
            v55 = v4;
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s protocol %{public}s (%p) has invalid connected callback", buf, 0x20u);
          }
        }
        else if (v44)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v30 = type;
          v31 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v31)
            {
              v32 = (const char *)v4[2];
              if (!v32)
                v32 = "invalid";
              *(_DWORD *)buf = 136446978;
              v51 = "__nw_protocol_connected";
              v52 = 2082;
              v53 = (void *)v32;
              v54 = 2048;
              v55 = v4;
              v56 = 2082;
              v57 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            goto LABEL_67;
          }
          if (v31)
          {
            v41 = (const char *)v4[2];
            if (!v41)
              v41 = "invalid";
            *(_DWORD *)buf = 136446722;
            v51 = "__nw_protocol_connected";
            v52 = 2082;
            v53 = (void *)v41;
            v54 = 2048;
            v55 = v4;
            _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v39 = type;
          if (os_log_type_enabled(v18, type))
          {
            v40 = (const char *)v4[2];
            if (!v40)
              v40 = "invalid";
            *(_DWORD *)buf = 136446722;
            v51 = "__nw_protocol_connected";
            v52 = 2082;
            v53 = (void *)v40;
            v54 = 2048;
            v55 = v4;
            _os_log_impl(&dword_182FBE000, v18, v39, "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_67:
      if (v17)
        free(v17);
      goto LABEL_16;
    }
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v51 = "__nw_protocol_connected";
    v26 = (char *)_os_log_send_and_compose_impl();

    v45[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, v45, &type))
    {
      if (v45[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "__nw_protocol_connected";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null other_protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v37 = v45[0];
        v38 = os_log_type_enabled(v27, v45[0]);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "__nw_protocol_connected";
            v52 = 2082;
            v53 = v36;
            _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
          goto LABEL_83;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "__nw_protocol_connected";
          _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v43 = v45[0];
        if (os_log_type_enabled(v27, v45[0]))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "__nw_protocol_connected";
          _os_log_impl(&dword_182FBE000, v27, v43, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_83:
    if (v26)
      free(v26);
    goto LABEL_18;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v51 = "__nw_protocol_connected";
  v22 = (char *)_os_log_send_and_compose_impl();

  v48[0] = OS_LOG_TYPE_ERROR;
  v45[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v22, v48, v45))
  {
    if (v48[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_connected";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v45[0])
    {
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v34 = v48[0];
      v35 = os_log_type_enabled(v23, v48[0]);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "__nw_protocol_connected";
          v52 = 2082;
          v53 = v33;
          _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_78;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_connected";
        _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v42 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_connected";
        _os_log_impl(&dword_182FBE000, v23, v42, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_78:
  if (v22)
    free(v22);
  return 1;
}

void sub_1834C2C98(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL36nw_protocol_implementation_connectedP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t extra;
  __int16 v6;
  uint64_t v7;
  void **v8;
  void (*v9)(void **, uint64_t, _QWORD);
  void **v10;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  extra = nw_hash_node_get_extra(a2);
  v6 = *(_WORD *)(extra + 52);
  if ((v6 & 0xC) != 4)
    return 1;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80) + 120))
  {
    v7 = extra;
    *(_WORD *)(extra + 52) = v6 | 8;
    v8 = *(void ***)(a1 + 32);
    v9 = *(void (**)(void **, uint64_t, _QWORD))(*((_QWORD *)v8[1] + 10) + 120);
    v10 = v8;
    if (nw_protocol_definition_get_message_is_stream(v8[1]))
    {
      if (*(v10 - 6) == (void *)object)
        object = -2;
    }

    v9(v10, object, *(_WORD *)(v7 + 52) & 1);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_implementation_connected_block_invoke_2";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_implementation_connected_block_invoke";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null instance->parent_definition->start", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v17 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_implementation_connected_block_invoke";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null instance->parent_definition->start, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v13)
          return 0;
        goto LABEL_14;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_implementation_connected_block_invoke";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null instance->parent_definition->start, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_implementation_connected_block_invoke";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null instance->parent_definition->start, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v13)
LABEL_14:
    free(v13);
  return 0;
}

uint64_t ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v3;

  v3 = *(unsigned __int16 *)(nw_hash_node_get_extra(a2) + 52);
  if ((v3 & 2) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return (v3 >> 1) & 1;
}

uint64_t ___ZL28nw_protocol_purge_frame_poolP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  NSObject *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = *((_QWORD *)v3 + 2);
  v6 = (_QWORD *)*((_QWORD *)v3 + 3);
  if (v5)
  {
    *(_QWORD *)(v5 + 24) = v6;
    v6 = (_QWORD *)*((_QWORD *)v3 + 3);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176) = v6;
  }
  *v6 = v5;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_DWORD *)(v7 + 160);
  *(_DWORD *)(v7 + 160) = v8 - 1;
  if (!v8)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160);
        v12 = 136446978;
        v13 = "nw_protocol_purge_frame_pool_block_invoke";
        v14 = 2082;
        v15 = "instance->empty_frame_pool_count";
        v16 = 2048;
        v17 = 1;
        v18 = 2048;
        v19 = v11;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", (uint8_t *)&v12, 0x2Au);
      }

    }
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 160) = 0;
  }

  return 1;
}

void nw_protocol_implementation_teardown(NWConcrete_nw_protocol_instance *a1)
{
  NWConcrete_nw_protocol_instance *v1;
  uint64_t v2;
  NWConcrete_nw_protocol_instance *v3;
  char v4;
  BOOL v6;
  uint64_t internal_reference;
  void *v8;
  void *v9;
  uint64_t (*var16)(NWConcrete_nw_protocol_instance *, uint64_t, uint64_t);
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  os_log_type_t v20;
  os_log_type_t v21;
  NWConcrete_nw_protocol_instance *v22;
  nw_frame *tqh_first;
  const char *v24;
  char *flow_registration;
  void *v26;
  char v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(const char *, unsigned __int16 *, uint64_t);
  char v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  char *backtrace_string;
  os_log_type_t v40;
  _BOOL4 v41;
  NSObject *v42;
  void *v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *v49;
  _BOOL4 v50;
  const char *v51;
  os_log_type_t v52;
  os_log_type_t v53;
  const char *v54;
  const char *v55;
  id v56;
  void *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  os_log_type_t v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, unsigned __int16 *);
  id v69;
  NWConcrete_nw_protocol_metadata *new_flow_metadata;
  uint64_t handle;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (**v77)(_QWORD);
  const void *v78;
  os_log_type_t v79;
  _QWORD v80[4];
  char *v81;
  char v82;
  os_log_type_t v83;
  unsigned __int16 *p_paths_log_id_num;
  char v85;
  os_log_type_t type[8];
  char v87;
  uint8_t buf[4];
  const char *v89;
  __int16 v90;
  char *v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  char *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v3 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v89 = "nw_protocol_implementation_teardown";
    v36 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (__nwlog_fault(v36, type, &p_paths_log_id_num))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v89 = "nw_protocol_implementation_teardown";
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null instance", buf, 0xCu);
        }
      }
      else if ((_BYTE)p_paths_log_id_num)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v40 = type[0];
        v41 = os_log_type_enabled(v37, type[0]);
        if (backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            v89 = "nw_protocol_implementation_teardown";
            v90 = 2082;
            v91 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v37, v40, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_93;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v89 = "nw_protocol_implementation_teardown";
          _os_log_impl(&dword_182FBE000, v37, v40, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v52 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v89 = "nw_protocol_implementation_teardown";
          _os_log_impl(&dword_182FBE000, v37, v52, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_93:
    if (v36)
      free(v36);
    goto LABEL_143;
  }
  v4 = BYTE6(v1->flow_in_connected);
  v6 = (v1->flow_in_connected & 0x800000000000) != 0 || gLogDatapath == 0;
  if ((v1->flow_in_connected & 0x1000000000000) == 0)
  {
    if (!v6)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v89 = "nw_protocol_implementation_teardown";
        v90 = 2082;
        v91 = (char *)&v3->flow_in_connected + 7;
        v92 = 2080;
        v93 = " ";
        _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sTearing down protocol", buf, 0x20u);
      }

      v4 = BYTE6(v3->flow_in_connected);
    }
    BYTE6(v3->flow_in_connected) = v4 | 1;
    internal_reference = (uint64_t)v3->internal_reference;
    if (internal_reference)
    {
      nw_queue_cancel_source(internal_reference, v2);
      v3->internal_reference = 0;
    }
    v8 = *(void **)&v3->level;
    if (v8)
    {
      nw_protocol_instance_registrar_remove_instance(v8, (uint64_t)&v3[-1].paths_log_id_num);
      v9 = *(void **)&v3->level;
      *(_QWORD *)&v3->level = 0;

    }
    var16 = (uint64_t (*)(NWConcrete_nw_protocol_instance *, uint64_t, uint64_t))v3->parent_definition->extended_state->var16;
    if (!var16 || (var16(v3, -1, 3) & 1) != 0)
      goto LABEL_39;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v89 = "nw_protocol_implementation_teardown";
    v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (__nwlog_fault(v12, type, &p_paths_log_id_num))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v89 = "nw_protocol_implementation_teardown";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS", buf, 0xCu);
        }
      }
      else if ((_BYTE)p_paths_log_id_num)
      {
        v16 = __nw_create_backtrace_string();
        if (v16)
        {
          v17 = (char *)v16;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          v19 = type[0];
          if (os_log_type_enabled(v18, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            v89 = "nw_protocol_implementation_teardown";
            v90 = 2082;
            v91 = v17;
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v17);
          if (v12)
            goto LABEL_38;
          goto LABEL_39;
        }
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v21 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v89 = "nw_protocol_implementation_teardown";
          _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v20 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v89 = "nw_protocol_implementation_teardown";
          _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s Cannot defer stop of NW_PROTOCOL_ALL_FLOWS, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (v12)
LABEL_38:
      free(v12);
LABEL_39:
    BYTE4(v3->flow_in_connected) |= 4u;
    nw_protocol_remove_instance((uint64_t)&v3[-1].paths_log_id_num);
    v22 = v3;
    nw_array_apply((unsigned __int8 *)v22->pending_outbound_frames.tqh_first, (uint64_t)&__block_literal_global_275);
    tqh_first = v22->pending_outbound_frames.tqh_first;
    v22->pending_outbound_frames.tqh_first = 0;

    v24 = *(const char **)&v22[-1].log_str[25];
    if (!v24)
      goto LABEL_133;
    flow_registration = (char *)v22->flow_registration;
    if (flow_registration)
    {
      v80[0] = MEMORY[0x1E0C809B0];
      v80[1] = 3221225472;
      v80[2] = ___ZL35nw_protocol_implementation_teardownP31NWConcrete_nw_protocol_instance_block_invoke;
      v80[3] = &unk_1E14AC340;
      v81 = v22;
      nw_hash_table_apply(flow_registration, (uint64_t)v80);

      v24 = *(const char **)&v22[-1].log_str[25];
      if (!v24)
      {
LABEL_133:
        v67 = *(_QWORD *)&v22->_anon_0[8];
        if (v67)
        {
          if (*(_QWORD *)v67)
          {
            v68 = *(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v67 + 8);
            if (v68)
              v68(v67, &v3[-1].paths_log_id_num);
          }
          *(_QWORD *)&v22->_anon_0[8] = 0;
        }
        ((void (*)(NWConcrete_nw_protocol_instance *))v3->parent_definition->extended_state->var6)(v22);
        v69 = nw_parameters_copy_context(v22->destroy_timer);
        nw_context_reset_timer_block_with_time(v69, (uint64_t)v22, -1, 0);

        new_flow_metadata = v22->new_flow_metadata;
        v22->new_flow_metadata = 0;

        BYTE4(v3->flow_in_connected) &= ~0x10u;
        handle = (uint64_t)v22->handle;
        if (handle)
        {
          do
          {
            v72 = *(_QWORD *)(handle + 16);
            nw_frame_finalize(handle);
            handle = v72;
          }
          while (v72);
        }
        v73 = (uint64_t)v22->inbound_frames.tqh_first;
        if (v73)
        {
          do
          {
            v74 = *(_QWORD *)(v73 + 16);
            nw_frame_finalize(v73);
            v73 = v74;
          }
          while (v74);
        }
        nw_protocol_implementation_destroy(v22);
        BYTE6(v3->flow_in_connected) &= ~1u;
        goto LABEL_143;
      }
    }
    v26 = (void *)*((_QWORD *)v24 + 5);
    if (v26 == &nw_protocol_ref_counted_handle)
    {
      v28 = *((_QWORD *)v24 + 11);
      if (v28)
        *((_QWORD *)v24 + 11) = v28 + 1;
      v27 = -1;
    }
    else
    {
      v27 = 0;
    }
    *(_QWORD *)type = v24;
    v87 = v27;
    v29 = *(void **)&v22[-1].log_str[33];
    if (v29 == &nw_protocol_ref_counted_handle)
    {
      v31 = *(_QWORD *)&v22[-1].log_str[81];
      if (v31)
        *(_QWORD *)&v22[-1].log_str[81] = v31 + 1;
      v30 = -1;
    }
    else
    {
      v30 = 0;
    }
    p_paths_log_id_num = &v3[-1].paths_log_id_num;
    v85 = v30;
    v32 = *((_QWORD *)v24 + 3);
    if (v32)
    {
      v33 = *(uint64_t (**)(const char *, unsigned __int16 *, uint64_t))(v32 + 8);
      if (v33)
      {
        v34 = v33(v24, &v3[-1].paths_log_id_num, 1);
        if (v29 != &nw_protocol_ref_counted_handle)
          goto LABEL_55;
        goto LABEL_108;
      }
    }
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = (const char *)*((_QWORD *)v24 + 2);
    *(_DWORD *)buf = 136446722;
    v89 = "__nw_protocol_remove_input_handler";
    if (!v44)
      v44 = "invalid";
    v90 = 2082;
    v91 = (char *)v44;
    v92 = 2048;
    v93 = v24;
    v45 = (char *)_os_log_send_and_compose_impl();

    v83 = OS_LOG_TYPE_ERROR;
    v82 = 0;
    if (__nwlog_fault(v45, &v83, &v82))
    {
      if (v83 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v47 = v83;
        if (os_log_type_enabled(v46, v83))
        {
          v48 = (const char *)*((_QWORD *)v24 + 2);
          if (!v48)
            v48 = "invalid";
          *(_DWORD *)buf = 136446722;
          v89 = "__nw_protocol_remove_input_handler";
          v90 = 2082;
          v91 = (char *)v48;
          v92 = 2048;
          v93 = v24;
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
        }
LABEL_104:

        goto LABEL_105;
      }
      if (!v82)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v53 = v83;
        if (os_log_type_enabled(v46, v83))
        {
          v54 = (const char *)*((_QWORD *)v24 + 2);
          if (!v54)
            v54 = "invalid";
          *(_DWORD *)buf = 136446722;
          v89 = "__nw_protocol_remove_input_handler";
          v90 = 2082;
          v91 = (char *)v54;
          v92 = 2048;
          v93 = v24;
          _os_log_impl(&dword_182FBE000, v46, v53, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_104;
      }
      v49 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v79 = v83;
      v50 = os_log_type_enabled(v46, v83);
      if (!v49)
      {
        if (v50)
        {
          v55 = (const char *)*((_QWORD *)v24 + 2);
          if (!v55)
            v55 = "invalid";
          *(_DWORD *)buf = 136446722;
          v89 = "__nw_protocol_remove_input_handler";
          v90 = 2082;
          v91 = (char *)v55;
          v92 = 2048;
          v93 = v24;
          _os_log_impl(&dword_182FBE000, v46, v79, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
        }
        goto LABEL_104;
      }
      if (v50)
      {
        v51 = (const char *)*((_QWORD *)v24 + 2);
        if (!v51)
          v51 = "invalid";
        *(_DWORD *)buf = 136446978;
        v89 = "__nw_protocol_remove_input_handler";
        v90 = 2082;
        v91 = (char *)v51;
        v92 = 2048;
        v93 = v24;
        v94 = 2082;
        v95 = v49;
        _os_log_impl(&dword_182FBE000, v46, v79, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v49);
    }
LABEL_105:
    if (v45)
      free(v45);
    v34 = 0;
    if (v29 != &nw_protocol_ref_counted_handle)
    {
LABEL_55:
      if (v26 != &nw_protocol_ref_counted_handle)
        goto LABEL_56;
      goto LABEL_109;
    }
LABEL_108:
    nw::release_if_needed<nw_protocol *>((uint64_t *)&p_paths_log_id_num);
    if (v26 != &nw_protocol_ref_counted_handle)
    {
LABEL_56:
      if ((v34 & 1) != 0)
      {
LABEL_130:
        v66 = *(_QWORD *)&v22[-1].log_str[25];
        if (v66)
        {
          if (*(_UNKNOWN **)(v66 + 40) == &nw_protocol_ref_counted_handle)
          {
            v75 = *(_QWORD *)(v66 + 88);
            if (v75)
            {
              v76 = v75 - 1;
              *(_QWORD *)(v66 + 88) = v76;
              if (!v76)
              {
                v77 = *(void (***)(_QWORD))(v66 + 64);
                if (v77)
                {
                  *(_QWORD *)(v66 + 64) = 0;
                  v77[2](v77);
                  _Block_release(v77);
                }
                if ((*(_BYTE *)(v66 + 72) & 1) != 0)
                {
                  v78 = *(const void **)(v66 + 64);
                  if (v78)
                    _Block_release(v78);
                }
                free((void *)v66);
              }
            }
          }
          *(_QWORD *)&v22[-1].log_str[25] = 0;
        }
        goto LABEL_133;
      }
LABEL_110:
      if (SBYTE5(v3->flow_in_connected) < 0)
        goto LABEL_130;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v56 = (id)gLogObj;
      *(_DWORD *)buf = 136446722;
      v89 = "nw_protocol_implementation_teardown";
      v90 = 2082;
      v91 = (char *)&v22->flow_in_connected + 7;
      v92 = 2080;
      v93 = " ";
      v57 = (void *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(p_paths_log_id_num) = 0;
      if (__nwlog_fault((const char *)v57, type, &p_paths_log_id_num))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v58 = (id)gLogObj;
          v59 = type[0];
          if (os_log_type_enabled(v58, type[0]))
          {
            *(_DWORD *)buf = 136446722;
            v89 = "nw_protocol_implementation_teardown";
            v90 = 2082;
            v91 = (char *)&v22->flow_in_connected + 7;
            v92 = 2080;
            v93 = " ";
            _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s %{public}s%sUnable to remove output handler", buf, 0x20u);
          }
        }
        else if ((_BYTE)p_paths_log_id_num)
        {
          v60 = __nw_create_backtrace_string();
          if (v60)
          {
            v61 = (char *)v60;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v62 = (id)gLogObj;
            v63 = type[0];
            if (os_log_type_enabled(v62, type[0]))
            {
              *(_DWORD *)buf = 136446978;
              v89 = "nw_protocol_implementation_teardown";
              v90 = 2082;
              v91 = (char *)&v22->flow_in_connected + 7;
              v92 = 2080;
              v93 = " ";
              v94 = 2082;
              v95 = v61;
              _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s %{public}s%sUnable to remove output handler, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v61);
            if (!v57)
              goto LABEL_130;
LABEL_129:
            free(v57);
            goto LABEL_130;
          }
          __nwlog_obj();
          v58 = objc_claimAutoreleasedReturnValue();
          v65 = type[0];
          if (os_log_type_enabled(v58, type[0]))
          {
            *(_DWORD *)buf = 136446722;
            v89 = "nw_protocol_implementation_teardown";
            v90 = 2082;
            v91 = (char *)&v22->flow_in_connected + 7;
            v92 = 2080;
            v93 = " ";
            _os_log_impl(&dword_182FBE000, v58, v65, "%{public}s %{public}s%sUnable to remove output handler, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v58 = (id)gLogObj;
          v64 = type[0];
          if (os_log_type_enabled(v58, type[0]))
          {
            *(_DWORD *)buf = 136446722;
            v89 = "nw_protocol_implementation_teardown";
            v90 = 2082;
            v91 = (char *)&v22->flow_in_connected + 7;
            v92 = 2080;
            v93 = " ";
            _os_log_impl(&dword_182FBE000, v58, v64, "%{public}s %{public}s%sUnable to remove output handler, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
      if (!v57)
        goto LABEL_130;
      goto LABEL_129;
    }
LABEL_109:
    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
    if ((v34 & 1) != 0)
      goto LABEL_130;
    goto LABEL_110;
  }
  if (!v6)
  {
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v89 = "nw_protocol_implementation_teardown";
      v90 = 2082;
      v91 = (char *)&v3->flow_in_connected + 7;
      v92 = 2080;
      v93 = " ";
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAlready tearing down protocol", buf, 0x20u);
    }

  }
LABEL_143:

}

void ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke_269(uint64_t a1)
{
  nw_protocol_implementation_teardown(*(NWConcrete_nw_protocol_instance **)(a1 + 32));
}

uint64_t ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke_270(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(_QWORD);
  const void *v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  const char *v29;
  uint64_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  const char *v47;
  const char *v48;
  char v49;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  object = nw_hash_node_get_object(a2);
  if (v3)
  {
    v5 = object;
    v6 = *(_QWORD *)(v3 + 48);
    if (v6 != object)
    {
      if (v6)
      {
        if (*(_UNKNOWN **)(v6 + 40) == &nw_protocol_ref_counted_handle)
        {
          v12 = *(_QWORD *)(v6 + 88);
          if (v12)
          {
            v13 = v12 - 1;
            *(_QWORD *)(v6 + 88) = v13;
            if (!v13)
            {
              v14 = *(void (***)(_QWORD))(v6 + 64);
              if (v14)
              {
                *(_QWORD *)(v6 + 64) = 0;
                v14[2](v14);
                _Block_release(v14);
              }
              if ((*(_BYTE *)(v6 + 72) & 1) != 0)
              {
                v15 = *(const void **)(v6 + 64);
                if (v15)
                  _Block_release(v15);
              }
              free((void *)v6);
            }
          }
        }
      }
      *(_QWORD *)(v3 + 48) = v5;
      if (v5)
      {
        if (*(_UNKNOWN **)(v5 + 40) == &nw_protocol_ref_counted_handle)
        {
          v7 = *(_QWORD *)(v5 + 88);
          if (v7)
            *(_QWORD *)(v5 + 88) = v7 + 1;
        }
      }
    }
    goto LABEL_9;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v52 = "__nw_protocol_set_input_handler";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v49 = 0;
  if (__nwlog_fault(v17, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_set_input_handler";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v49)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "__nw_protocol_set_input_handler";
          v53 = 2082;
          v54 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_62;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_set_input_handler";
        _os_log_impl(&dword_182FBE000, v18, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_set_input_handler";
        _os_log_impl(&dword_182FBE000, v18, v37, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_62:
  if (v17)
    free(v17);
LABEL_9:
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = *(_OWORD **)(v8 + 48);
    goto LABEL_11;
  }
  __nwlog_obj();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v52 = "__nw_protocol_get_input_handler";
  v21 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v49 = 0;
  if (__nwlog_fault(v21, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_get_input_handler";
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v49)
    {
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v22, type);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "__nw_protocol_get_input_handler";
          v53 = 2082;
          v54 = v34;
          _os_log_impl(&dword_182FBE000, v22, v35, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_67;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_get_input_handler";
        _os_log_impl(&dword_182FBE000, v22, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "__nw_protocol_get_input_handler";
        _os_log_impl(&dword_182FBE000, v22, v38, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_67:
  if (v21)
    free(v21);
  v8 = 0;
  v9 = 0;
LABEL_11:
  nw_protocol_set_flow_id_from_protocol((_OWORD *)v8, v9);
  v10 = *(_QWORD *)(a1 + 32);
  if ((!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0) && gLogDatapath)
  {
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
LABEL_42:

      return 0;
    }
    v25 = "";
    v27 = *(_QWORD *)(a1 + 32);
    v26 = *(_QWORD *)(a1 + 40);
    v28 = v27 == 0;
    if (v27)
      v29 = (const char *)(v27 + 407);
    else
      v29 = "";
    if (!v28)
      v25 = " ";
    if (v26)
    {
      v30 = *(_QWORD *)(v26 + 48);
LABEL_41:
      *(_DWORD *)buf = 136446978;
      v52 = "nw_protocol_implementation_remove_input_handler_block_invoke";
      v53 = 2082;
      v54 = (void *)v29;
      v55 = 2080;
      v56 = v25;
      v57 = 2048;
      v58 = v30;
      _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReset default input handler to %p", buf, 0x2Au);
      goto LABEL_42;
    }
    v47 = v29;
    v48 = v25;
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "__nw_protocol_get_input_handler";
    v40 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (__nwlog_fault(v40, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_get_input_handler";
          _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v49)
      {
        v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        v45 = os_log_type_enabled(v41, type);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "__nw_protocol_get_input_handler";
            v53 = 2082;
            v54 = v43;
            _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v43);
          goto LABEL_86;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_get_input_handler";
          _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "__nw_protocol_get_input_handler";
          _os_log_impl(&dword_182FBE000, v41, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_86:
    if (v40)
      free(v40);
    v30 = 0;
    v29 = v47;
    v25 = v48;
    goto LABEL_41;
  }
  return 0;
}

uint64_t ___ZL35nw_protocol_implementation_teardownP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  extra = nw_hash_node_get_extra(a2);
  v4 = (uint64_t *)(extra + 32);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 - 64);
    goto LABEL_3;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "__nw_protocol_get_output_handler";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "__nw_protocol_get_output_handler";
        v13 = "%{public}s called with null protocol";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "__nw_protocol_get_output_handler";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (!v15)
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v19 = "__nw_protocol_get_output_handler";
        v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_21;
      }
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "__nw_protocol_get_output_handler";
        v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_22:

  }
LABEL_23:
  if (v10)
    free(v10);
  v6 = 0;
LABEL_3:
  if (*v4 == v6)
  {
    v7 = *(_BYTE *)(extra + 40);
    if ((v7 & 1) != 0)
    {
      nw::release_if_needed<nw_protocol *>(v4);
      v7 = *(_BYTE *)(extra + 40);
    }
    *(_QWORD *)(extra + 32) = 0;
    *(_BYTE *)(extra + 40) = v7 | 1;
  }
  return 1;
}

uint64_t ___ZL34nw_protocol_fail_outbound_requestsP31NWConcrete_nw_protocol_instance_block_invoke(int a1, int a2, void *aBlock)
{
  void (**v3)(void *, _QWORD, uint64_t);

  v3 = (void (**)(void *, _QWORD, uint64_t))_Block_copy(aBlock);
  v3[2](v3, 0, 1);

  return 1;
}

void sub_1834C4CA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL41nw_protocol_instance_one_to_one_callbacksv_block_invoke()
{
  nw_protocol_instance_one_to_one_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler((_QWORD *)nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_remove_input_handler);
  nw_protocol_callbacks_set_connected(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_connected);
  nw_protocol_callbacks_set_disconnect(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_disconnect);
  nw_protocol_callbacks_set_disconnected(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_disconnected);
  nw_protocol_callbacks_set_link_state(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_link_state);
  nw_protocol_callbacks_set_get_message_properties(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_message_properties);
  nw_protocol_callbacks_set_waiting_for_output(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_waiting_for_output);
  nw_protocol_callbacks_set_get_input_frames(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_finalize_output_frames);
  nw_protocol_callbacks_set_input_available(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_available);
  nw_protocol_callbacks_set_input_finished(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_finished);
  nw_protocol_callbacks_set_input_flush(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_flush);
  nw_protocol_callbacks_set_output_available(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_output_available);
  nw_protocol_callbacks_set_output_finished(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_output_finished);
  nw_protocol_callbacks_set_copy_info(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_copy_info);
  nw_protocol_callbacks_set_notify(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_notify);
  nw_protocol_callbacks_set_error(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_error);
  nw_protocol_callbacks_set_updated_path(nw_protocol_instance_one_to_one_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_updated_path);
}

void nw_protocol_definition_unregister(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_protocol_unregister((_QWORD *)v1 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_definition_unregister";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_definition_unregister";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_definition_unregister";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_definition_unregister";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_definition_unregister";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v4)
    free(v4);
LABEL_3:

}

void nw_protocol_inbound_data_finalizer(void *a1, uint64_t a2, void *a3)
{
  nw_protocol_data_finalizer(a3, a1, a2, (uint64_t)a3 + 128);

}

void sub_1834C50EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_protocol_make_subdata(void *a1, int a2, int a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v7 = v5;
  if (v5)
  {
    nw_frame_claim((uint64_t)v5, v6, a2, a3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_make_subdata";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_make_subdata";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_make_subdata";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_make_subdata";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_make_subdata";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void nw_protocol_make_superdata(void *a1, unsigned int a2, unsigned int a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v7 = v5;
  if (v5)
  {
    nw_frame_unclaim((uint64_t)v5, v6, a2, a3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_make_superdata";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_make_superdata";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_make_superdata";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_make_superdata";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_make_superdata";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

BOOL nw_protocol_data_is_in_array(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_QWORD *)v1 + 4))
      v3 = 1;
    else
      v3 = *((_QWORD *)v1 + 5) != 0;
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_data_is_in_array";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_is_in_array";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_data_is_in_array";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_is_in_array";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_is_in_array";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_5:

  return v3;
}

NWConcrete_nw_protocol_data_array *nw_protocol_data_array_create()
{
  NWConcrete_nw_protocol_data_array *v0;
  NWConcrete_nw_protocol_data_array *v1;
  NWConcrete_nw_protocol_data_array *v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(NWConcrete_nw_protocol_data_array);
  v1 = v0;
  if (v0)
  {
    v2 = v0;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_data_array_create";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_8;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_data_array_create";
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s [nw_protocol_data_array init] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v4)
      goto LABEL_10;
LABEL_9:
    free(v4);
    goto LABEL_10;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v11 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_data_array_create";
      _os_log_impl(&dword_182FBE000, v5, v11, "%{public}s [nw_protocol_data_array init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  v9 = type;
  v10 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_data_array_create";
      _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s [nw_protocol_data_array init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nw_protocol_data_array_create";
    v16 = 2082;
    v17 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s [nw_protocol_data_array init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4)
    goto LABEL_9;
LABEL_10:

  return v1;
}

BOOL nw_protocol_data_array_is_empty(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 6))
      v3 = 0;
    else
      v3 = *((_QWORD *)v1 + 1) == 0;
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_data_array_is_empty";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_is_empty";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_data_array_is_empty";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_is_empty";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_is_empty";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  v3 = 1;
LABEL_5:

  return v3;
}

id nw_protocol_data_array_first(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[1];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_data_array_first";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_first";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_data_array_first";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_first";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_first";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_protocol_data_array_last(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = **(id **)(*((_QWORD *)v1 + 2) + 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_data_array_last";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_last";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_data_array_last";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_last";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_last";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_protocol_data_array_next(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)*((_QWORD *)v1 + 4);
    if (!v3 && !*((_QWORD *)v1 + 5))
      v3 = 0;
    v4 = v3;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_data_array_next";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_data_array_next";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_data_array_next";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_data_array_next";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_data_array_next";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_6:

  return v4;
}

void nw_protocol_data_array_append(void *a1, void *a2)
{
  _DWORD *v3;
  char *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_data_array_append";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_data_array_append";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_protocol_data_array_append";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_data_array_append";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_data_array_append";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    ++v3[6];
    *((_QWORD *)v4 + 4) = 0;
    v6 = (_QWORD *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v4 + 5) = v6;
    *v6 = v4;
    *((_QWORD *)v3 + 2) = v4 + 32;
    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_protocol_data_array_append";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_data_array_append";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null data", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_data_array_append";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_data_array_append";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null data, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_protocol_data_array_append";
    v25 = 2082;
    v26 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

void nw_protocol_data_array_insert_after(void *a1, void *a2, void *a3)
{
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_data_array_insert_after";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_protocol_data_array_insert_after";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v13)
          goto LABEL_7;
LABEL_58:
        free(v13);
        goto LABEL_7;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v6)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_data_array_insert_after";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null data", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_data_array_insert_after";
      v35 = 2082;
      v36 = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_data_array_insert_after";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null other_data", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null other_data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_insert_after";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null other_data, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_data_array_insert_after";
      v35 = 2082;
      v36 = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null other_data, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v23);
    if (!v13)
      goto LABEL_7;
    goto LABEL_58;
  }
  ++v5[6];
  v9 = v5 + 4;
  v10 = v7 + 4;
  v11 = v7[4];
  v6[4] = v11;
  if (v11)
    v9 = (_QWORD *)(v11 + 40);
  *v9 = v6 + 4;
  *v10 = v6;
  v6[5] = v10;
LABEL_7:

}

void nw_protocol_data_array_prepend(void *a1, void *a2)
{
  _QWORD *v3;
  char *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_data_array_prepend";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_data_array_prepend";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_protocol_data_array_prepend";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_data_array_prepend";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_data_array_prepend";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (v4)
  {
    v6 = v3 + 1;
    v7 = v3[1];
    ++*((_DWORD *)v3 + 6);
    *((_QWORD *)v4 + 4) = v7;
    if (v7)
      v8 = (_QWORD *)(v7 + 40);
    else
      v8 = v3 + 2;
    *v8 = v4 + 32;
    *v6 = v4;
    *((_QWORD *)v4 + 5) = v6;
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_protocol_data_array_prepend";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_data_array_prepend";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null data", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v23)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_data_array_prepend";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_data_array_prepend";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null data, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_data_array_prepend";
    v27 = 2082;
    v28 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

void nw_protocol_data_array_remove(void *a1, void *a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_data_array_remove";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_remove";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_protocol_data_array_remove";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_62:
        if (!v18)
          goto LABEL_28;
LABEL_63:
        free(v18);
        goto LABEL_28;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_remove";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_data_array_remove";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (v4)
  {
    v6 = v3[6];
    if (v6)
    {
      v3[6] = v6 - 1;
LABEL_24:
      v15 = v5[4];
      v16 = (_QWORD *)v5[5];
      if (v15)
      {
        *(_QWORD *)(v15 + 40) = v16;
        v16 = (_QWORD *)v5[5];
      }
      else
      {
        *((_QWORD *)v3 + 2) = v16;
      }
      *v16 = v15;
      v5[4] = 0;
      v5[5] = 0;
      goto LABEL_28;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_data_array_remove";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v8, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_data_array_remove";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s Protocol data array count attempted to decrement below zero", buf, 0xCu);
        }
      }
      else if (v31)
      {
        v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v34 = "nw_protocol_data_array_remove";
            v35 = 2082;
            v36 = v11;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s Protocol data array count attempted to decrement below zero, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          if (!v8)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_data_array_remove";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s Protocol data array count attempted to decrement below zero, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_data_array_remove";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s Protocol data array count attempted to decrement below zero, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v8)
      goto LABEL_24;
LABEL_23:
    free(v8);
    goto LABEL_24;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_protocol_data_array_remove";
  v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (!__nwlog_fault(v18, &type, &v31))
    goto LABEL_62;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_data_array_remove";
      _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null data", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v31)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_data_array_remove";
      _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v19 = objc_claimAutoreleasedReturnValue();
  v27 = type;
  v28 = os_log_type_enabled(v19, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_data_array_remove";
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null data, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v34 = "nw_protocol_data_array_remove";
    v35 = 2082;
    v36 = v26;
    _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v18)
    goto LABEL_63;
LABEL_28:

}

void nw_protocol_data_array_apply(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[2];
  uint64_t (*v24)(uint64_t);
  void *v25;
  id v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_data_array_apply";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v10, &type, &v27))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_data_array_apply";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_protocol_data_array_apply";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_data_array_apply";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_data_array_apply";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (v4)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v24 = __nw_protocol_data_array_apply_block_invoke;
    v25 = &unk_1E149B9E0;
    v26 = v4;
    v6 = v3[1];
    do
    {
      if (!v6)
        break;
      v7 = *(_QWORD *)(v6 + 32);
      v8 = v24((uint64_t)v23);
      v6 = v7;
    }
    while ((v8 & 1) != 0);

    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_protocol_data_array_apply";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (!__nwlog_fault(v10, &type, &v27))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_data_array_apply";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null apply_block", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v27)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_data_array_apply";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null apply_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_data_array_apply";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null apply_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v30 = "nw_protocol_data_array_apply";
    v31 = 2082;
    v32 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null apply_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_protocol_data_array_apply_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void nw_protocol_data_array_prepend_array(void *a1, void *a2)
{
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_data_array_prepend_array";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_data_array_prepend_array";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_protocol_data_array_prepend_array";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v10)
          goto LABEL_8;
LABEL_43:
        free(v10);
        goto LABEL_8;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_data_array_prepend_array";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_data_array_prepend_array";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    v6 = v3[1];
    v7 = v4 + 8;
    if (v6)
    {
      **((_QWORD **)v4 + 2) = v6;
      *(_QWORD *)(v3[1] + 40) = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = v3[2];
      v3[1] = 0;
      v3[2] = v3 + 1;
    }
    if (*v7)
    {
      *(_QWORD *)v3[2] = *v7;
      *(_QWORD *)(*((_QWORD *)v4 + 1) + 40) = v3[2];
      v3[2] = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = v7;
    }
    *((_DWORD *)v3 + 6) += *((_DWORD *)v4 + 6);
    v8 = v4;
    v5[1] = 0;
    *((_QWORD *)v8 + 2) = v7;
    *((_DWORD *)v5 + 6) = 0;

    goto LABEL_8;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_protocol_data_array_prepend_array";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_data_array_prepend_array";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null prepend_array", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_data_array_prepend_array";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null prepend_array, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_data_array_prepend_array";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null prepend_array, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_data_array_prepend_array";
    v27 = 2082;
    v28 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null prepend_array, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_43;
LABEL_8:

}

void nw_protocol_data_array_apppend_array(void *a1, void *a2)
{
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_data_array_apppend_array";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_data_array_apppend_array";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_protocol_data_array_apppend_array";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v10)
          goto LABEL_8;
LABEL_43:
        free(v10);
        goto LABEL_8;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_data_array_apppend_array";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_data_array_apppend_array";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    v6 = v3[1];
    v7 = v4 + 8;
    if (v6)
    {
      **((_QWORD **)v4 + 2) = v6;
      *(_QWORD *)(v3[1] + 40) = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = v3[2];
      v3[1] = 0;
      v3[2] = v3 + 1;
    }
    if (*v7)
    {
      *(_QWORD *)v3[2] = *v7;
      *(_QWORD *)(*((_QWORD *)v4 + 1) + 40) = v3[2];
      v3[2] = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = v7;
    }
    *((_DWORD *)v3 + 6) += *((_DWORD *)v4 + 6);
    v8 = v4;
    v5[1] = 0;
    *((_QWORD *)v8 + 2) = v7;
    *((_DWORD *)v5 + 6) = 0;

    goto LABEL_8;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_protocol_data_array_apppend_array";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_data_array_apppend_array";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null append_array", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_data_array_apppend_array";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null append_array, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_data_array_apppend_array";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null append_array, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_data_array_apppend_array";
    v27 = 2082;
    v28 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null append_array, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_43;
LABEL_8:

}

uint64_t nw_protocol_data_array_count(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[6];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_data_array_count";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_count";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_data_array_count";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_count";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_count";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_data_array_data_length(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_DWORD *)buf = 0;
    nw_frame_array_get_frame_count(v1 + 1, 1, buf);
    v3 = *(unsigned int *)buf;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_data_array_data_length";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_data_length";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_data_array_data_length";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_data_length";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_array_data_length";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id *nw_protocol_metadata_create(void *a1, _OWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  objc_class *v6;
  id *Instance;
  id *v8;

  v3 = a1;
  v4 = v3[10];
  if (v4)
    v5 = *(unsigned int *)(v4 + 260);
  else
    v5 = 0;
  v6 = (objc_class *)objc_opt_class();
  Instance = (id *)class_createInstance(v6, v5);
  v8 = -[NWConcrete_nw_protocol_metadata initWithDefinition:identifier:](Instance, v3, a2);

  return v8;
}

void sub_1834C9370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_metadata_copy_original(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_metadata_copy_original";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v21)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_protocol_metadata_copy_original";
      v25 = 2082;
      v26 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  v3 = *((_QWORD *)v1 + 1);
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_metadata_copy_original";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null metadata->definition", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v8)
        free(v8);
      goto LABEL_40;
    }
    if (!v21)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null metadata->definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_metadata_copy_original";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null metadata->definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_protocol_metadata_copy_original";
      v25 = 2082;
      v26 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null metadata->definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4 || (v5 = *(uint64_t (**)(void))(v4 + 32)) == 0)
  {
LABEL_40:
    v6 = 0;
    goto LABEL_41;
  }
  v6 = v5();
LABEL_41:

  return v6;
}

void sub_1834C9838(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_metadata_set_original(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *, id);
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_metadata_set_original";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_protocol_metadata_set_original";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = v3[1];
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    if (v6)
    {
      v7 = *(void (**)(_QWORD *, id))(v6 + 40);
      if (v7)
        v7(v3, v4);
    }
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_protocol_metadata_set_original";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_metadata_set_original";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null metadata->definition", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_metadata_set_original";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null metadata->definition, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_metadata_set_original";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null metadata->definition, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_protocol_metadata_set_original";
    v26 = 2082;
    v27 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null metadata->definition, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

void sub_1834C9D14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_metadata_is_equal(void *a1, void *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5 == v6)
    goto LABEL_7;
  v8 = 0;
  if (v5 && v6)
  {
    if (!nw_protocol_definition_is_equal_unsafe(v5[1], v6[1]))
    {
      v8 = 0;
      goto LABEL_9;
    }
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5[1] + 160);
    if (v9)
    {
      v8 = v9(v7[1], v5[4], v7[4], a3);
      goto LABEL_9;
    }
LABEL_7:
    v8 = 1;
  }
LABEL_9:

  return v8;
}

void sub_1834C9DC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_protocol_create_deserialized_options(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  NWConcrete_nw_protocol_options *v7;
  char *v8;
  char *v9;
  NWConcrete_nw_protocol_options *v10;
  NSObject *v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  objc_super v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = [NWConcrete_nw_protocol_options alloc];
  v8 = (char *)v6;
  v9 = v8;
  if (v7)
  {
    if (!*((_QWORD *)v8 + 17))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
        v26 = 2112;
        v27 = v9;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s No deserialize function found for %@", buf, 0x16u);
      }

      goto LABEL_8;
    }
    v23.receiver = v7;
    v23.super_class = (Class)NWConcrete_nw_protocol_options;
    v10 = (NWConcrete_nw_protocol_options *)objc_msgSendSuper2(&v23, sel_init);
    v7 = v10;
    if (v10)
    {
      objc_storeStrong((id *)&v10->definition, a1);
      v7->handle = (void *)(*((uint64_t (**)(char *, uint64_t, uint64_t))v9 + 17))(v9, a2, a3);
      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if ((__nwlog_fault(v14, &type, &v21) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
            v26 = 2082;
            v27 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "-[NWConcrete_nw_protocol_options initWithDefinition:serializedBytes:length:]";
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_26:
    if (v14)
      free(v14);
LABEL_8:
    v7 = 0;
  }
LABEL_9:

  return v7;
}

void sub_1834CA168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_options_set_log_id(void *a1, const char *a2, const char *a3, int a4)
{
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (v7)
  {
    if (a3 && *a3)
    {
      *((_WORD *)v7 + 68) = a4;
      snprintf(v7 + 48, 0x54uLL, "[%s%s:%u]", a2, a3, a4);
    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_protocol_options_set_log_id";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_options_set_log_id";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_protocol_options_set_log_id";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_options_set_log_id";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_options_set_log_id";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v10)
    free(v10);
LABEL_5:

}

void nw_protocol_options_set_proxy_endpoint(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v5)
  {
    *((_BYTE *)v5 + 152) = a3;
    objc_storeStrong((id *)v5 + 3, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_options_set_proxy_endpoint";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_set_proxy_endpoint";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_options_set_proxy_endpoint";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_set_proxy_endpoint";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_set_proxy_endpoint";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

BOOL nw_protocol_options_proxy_endpoint_should_override_stack(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null options", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_protocol_options_proxy_endpoint_should_override_stack";
          _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v5)
      free(v5);
    goto LABEL_22;
  }
  if (!*((_QWORD *)v1 + 3))
  {
LABEL_22:
    v3 = 0;
    goto LABEL_23;
  }
  v3 = *((_BYTE *)v1 + 152) != 0;
LABEL_23:

  return v3;
}

id nw_protocol_options_copy_proxy_endpoint_for_stack(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  id v4;
  int v5;
  void *v6;
  id v7;
  id v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)v1[3];
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v4, "type");

      v6 = (void *)v2[3];
      if (v5 == 4)
      {
        v7 = (id)nw_endpoint_copy_host_port_endpoint_for_url(v6);
LABEL_7:
        v8 = v7;
        goto LABEL_8;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = v6;
    goto LABEL_7;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_options_copy_proxy_endpoint_for_stack";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_8:

  return v8;
}

void sub_1834CAC68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_protocol_options_copy_proxy_endpoint(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[3];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_copy_proxy_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_copy_proxy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_copy_proxy_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_copy_proxy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_copy_proxy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_options_add_proxy_next_hop(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  uint64_t v5;
  _BOOL8 v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    v5 = v3[4];
    if (!v5)
    {
      v6 = nw_array_create();
      v7 = (void *)v3[4];
      v3[4] = v6;

      v5 = v3[4];
    }
    nw_array_append(v5, v4);
    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_options_add_proxy_next_hop";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_options_add_proxy_next_hop";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null proxy_next_hop", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_options_add_proxy_next_hop";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null proxy_next_hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_options_add_proxy_next_hop";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null proxy_next_hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_options_add_proxy_next_hop";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null proxy_next_hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void nw_protocol_options_enumerate_proxy_next_hops(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_options_enumerate_proxy_next_hops";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_options_enumerate_proxy_next_hops";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_protocol_options_enumerate_proxy_next_hops";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_options_enumerate_proxy_next_hops";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_options_enumerate_proxy_next_hops";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    v6 = (unsigned __int8 *)v3[4];
    if (v6)
    {
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_protocol_options_enumerate_proxy_next_hops_block_invoke;
      v21[3] = &unk_1E14AC278;
      v22 = v4;
      nw_array_apply(v6, (uint64_t)v21);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_protocol_options_enumerate_proxy_next_hops";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_options_enumerate_proxy_next_hops";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_options_enumerate_proxy_next_hops";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_options_enumerate_proxy_next_hops";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_options_enumerate_proxy_next_hops";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

uint64_t __nw_protocol_options_enumerate_proxy_next_hops_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 1;
}

BOOL nw_http_authentication_parse_schemes(_CFHTTPAuthentication *a1, NSObject *a2, char a3, int a4, int a5)
{
  _BOOL8 v9;
  const __CFDictionary *SchemesDict;
  uint64_t v11;
  const __CFArray *v12;
  CFIndex v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *ValueAtIndex;
  const __CFString *v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  const __CFDictionary *Value;
  const __CFString *v22;
  void *v23;
  const char *hostname;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  char v30;
  const __CFString *v31;
  const __CFString *theString2;
  _QWORD v34[5];
  CFStreamError error;
  _BYTE buf[24];
  NWConcrete_nw_authentication_protection_space *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v9 = nw_array_create();
  error.domain = 0;
  *(_QWORD *)&error.error = 0;
  if (CFHTTPAuthenticationIsValid(a1, &error))
  {
    SchemesDict = (const __CFDictionary *)_CFHTTPAuthenticationGetSchemesDict();
    v11 = _CFHTTPAuthenticationCopySortedAuthSchemes();
    v12 = (const __CFArray *)v11;
    if (SchemesDict && v11)
    {
      v30 = a3;
      v13 = 0;
      v14 = (const __CFString *)*MEMORY[0x1E0C930B8];
      v15 = (const __CFString *)*MEMORY[0x1E0C930C0];
      theString2 = (const __CFString *)*MEMORY[0x1E0C930C8];
      v31 = (const __CFString *)*MEMORY[0x1E0C930D0];
      while (1)
      {
        while (1)
        {
          if (v13 >= CFArrayGetCount(v12))
            goto LABEL_39;
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v13);
          if (ValueAtIndex)
            break;
LABEL_6:
          ++v13;
        }
        v17 = ValueAtIndex;
        v18 = 1;
        if (CFStringCompare(ValueAtIndex, v14, 1uLL) == kCFCompareEqualTo)
          goto LABEL_25;
        if (CFStringCompare(v17, v15, 1uLL) == kCFCompareEqualTo)
          break;
        if (CFStringCompare(v17, theString2, 1uLL) == kCFCompareEqualTo)
        {
          v18 = 5;
          goto LABEL_25;
        }
        if (CFStringCompare(v17, v31, 1uLL))
        {
          if (CFStringCompare(v17, CFSTR("OAuth"), 1uLL) == kCFCompareEqualTo)
          {
            v18 = 6;
            goto LABEL_25;
          }
          if (CFStringCompare(v17, CFSTR("PrivateToken"), 1uLL) == kCFCompareEqualTo)
          {
            v18 = 8;
            goto LABEL_25;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            goto LABEL_6;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_authentication_parse_schemes";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v17;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s Unsupported authentication type '%{public}@'", buf, 0x16u);
          ++v13;
        }
        else
        {
          if ((v30 & 1) != 0)
          {
            v18 = 4;
            goto LABEL_25;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            goto LABEL_6;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_parse_schemes";
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s Negotiate requires a URL", buf, 0xCu);
          ++v13;
        }
      }
      v18 = 2;
LABEL_25:
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v37 = 0;
      v37 = nw_authentication_protection_space_create(v18);
      nw_authentication_protection_space_set_endpoint(*(void **)(*(_QWORD *)&buf[8] + 24), a2);
      if (a4)
      {
        nw_authentication_protection_space_set_is_proxy(*(void **)(*(_QWORD *)&buf[8] + 24), 1);
        nw_authentication_protection_space_set_proxy_origin_is_cleartext(*(void **)(*(_QWORD *)&buf[8] + 24), a5);
      }
      Value = (const __CFDictionary *)CFDictionaryGetValue(SchemesDict, v17);
      if (Value && (v22 = (const __CFString *)CFDictionaryGetValue(Value, CFSTR("Realm"))) != 0)
      {
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 0x40000000;
        v34[2] = __nw_http_authentication_parse_schemes_block_invoke;
        v34[3] = &unk_1E149BD30;
        v34[4] = buf;
        nw_utilities_get_c_string_from_cfstring(v22, 0x201u, v34);
      }
      else
      {
        v23 = *(void **)(*(_QWORD *)&buf[8] + 24);
        hostname = nw_endpoint_get_hostname(a2);
        nw_authentication_protection_space_set_realm(v23, hostname);
      }
      nw_array_append(v9, *(void **)(*(_QWORD *)&buf[8] + 24));
      v25 = *(void **)(*(_QWORD *)&buf[8] + 24);
      if (v25)
      {
        os_release(v25);
        *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v28 = "WWW-Authenticate";
      if (a4)
        v28 = "Proxy-Authenticate";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_authentication_parse_schemes";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v28;
      _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s Unable to parse %s header", buf, 0x16u);
    }
LABEL_39:
    if (v12)
      CFRelease(v12);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_parse_schemes";
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s CFHTTPAuthenticationCreateFromResponse failed to return a valid authentication ref", buf, 0xCu);
    }
  }
  return v9;
}

void __nw_http_authentication_parse_schemes_block_invoke(uint64_t a1, const char *a2)
{
  nw_authentication_protection_space_set_realm(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
}

BOOL nw_protocol_http_authentication_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject **v6;
  NSObject *v7;
  NSObject *v8;
  char v9;
  NSObject *v10;
  NSObject *v11;
  char v12;
  NSObject *v13;
  NSObject *v14;
  char v15;
  NSObject *v16;
  char v17;
  NSObject *v18;
  __int16 v19;
  char v20;
  NSObject *v21;
  id v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  NSObject *v25;
  NSObject *v26;
  BOOL is_equal;
  uint64_t v28;
  NSObject *v29;
  char v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  BOOL v34;
  NSObject *v35;
  char v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  BOOL v40;
  NSObject *v41;
  char v42;
  NSObject *v43;
  NSObject *v44;
  char v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  BOOL v49;
  NSObject *v50;
  char v51;
  NSObject *v52;
  uint64_t v53;
  char v54;
  NSObject *v55;
  id v56;
  unsigned __int8 *v57;
  NSObject *v58;
  char v59;
  NSObject *v60;
  id v61;
  NSObject *v62;
  Class isa;
  _BOOL8 result;
  NSObject *v65;
  void *v66;
  NSObject *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  const char *v71;
  void *v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  void *v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  void *v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  void *v84;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  char *v88;
  _BOOL4 v89;
  char *v90;
  _BOOL4 v91;
  char *backtrace_string;
  _BOOL4 v93;
  char *v94;
  _BOOL4 v95;
  char *v96;
  _BOOL4 v97;
  char *v98;
  os_log_type_t v99;
  _BOOL4 v100;
  os_log_type_t v101;
  os_log_type_t v102;
  os_log_type_t v103;
  os_log_type_t v104;
  os_log_type_t v105;
  os_log_type_t v106;
  os_log_type_t v107;
  const char *v108;
  const char *v109;
  unsigned __int8 *v110;
  id v111;
  os_log_type_t type[8];
  uint64_t v113;
  void *v114;
  void *v115;
  _BYTE *v116;
  char v117;
  _BYTE buf[24];
  uint64_t v119;
  void (*v120)(uint64_t);
  id v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v6 = (NSObject **)malloc_type_calloc(1uLL, 0x428uLL, 0xEAFB8F1AuLL);
  if (!v6)
  {
    v65 = __nwlog_obj();
    os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    v119 = 1064;
    v66 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v66);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v66);
  }
  bzero(v6, 0x428uLL);
  if (gLogDatapath)
  {
    v67 = __nwlog_obj();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_http_authentication_create";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = (char *)v6 + 114;
      *(_WORD *)&buf[22] = 2080;
      v119 = (uint64_t)" ";
      _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (nw_protocol_http_authentication_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_authentication_identifier::onceToken, &__block_literal_global_13801);
  v6[2] = &nw_protocol_http_authentication_identifier::protocol_identifier;
  if (nw_protocol_http_authentication_get_callbacks(void)::onceToken != -1)
    dispatch_once(&nw_protocol_http_authentication_get_callbacks(void)::onceToken, &__block_literal_global_108);
  v6[3] = &nw_protocol_http_authentication_get_callbacks(void)::protocol_callbacks;
  v6[5] = v6;
  v7 = nw_parameters_copy_url_endpoint(a4);
  if (!v7)
  {
    if (!a3)
    {
      v8 = 0;
      v9 = *((_BYTE *)v6 + 792);
      if ((v9 & 1) == 0)
        goto LABEL_13;
      goto LABEL_11;
    }
    v7 = os_retain(a3);
  }
  v8 = v7;
  v9 = *((_BYTE *)v6 + 792);
  if ((v9 & 1) == 0)
    goto LABEL_13;
LABEL_11:
  v10 = v6[98];
  if (v10)
  {
    os_release(v10);
    v9 = *((_BYTE *)v6 + 792);
  }
LABEL_13:
  v6[98] = v8;
  *((_BYTE *)v6 + 792) = v9 | 1;
  if (a4)
  {
    v11 = os_retain(a4);
    v12 = *((_BYTE *)v6 + 824);
    if ((v12 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v11 = 0;
    v12 = *((_BYTE *)v6 + 824);
    if ((v12 & 1) == 0)
      goto LABEL_19;
  }
  v13 = v6[102];
  if (v13)
  {
    os_release(v13);
    v12 = *((_BYTE *)v6 + 824);
  }
LABEL_19:
  v6[102] = v11;
  *((_BYTE *)v6 + 824) = v12 | 1;
  v14 = nw_parameters_copy_context(a4);
  v15 = *((_BYTE *)v6 + 840);
  if ((v15 & 1) != 0)
  {
    v16 = v6[104];
    if (v16)
    {
      os_release(v16);
      v15 = *((_BYTE *)v6 + 840);
    }
  }
  v6[104] = v14;
  *((_BYTE *)v6 + 840) = v15 | 1;
  v17 = *((_BYTE *)v6 + 856);
  if ((v17 & 1) != 0)
  {
    v18 = v6[106];
    if (v18)
    {
      os_release(v18);
      v17 = *((_BYTE *)v6 + 856);
    }
  }
  v6[106] = 0;
  *((_BYTE *)v6 + 856) = v17 | 1;
  *((_WORD *)v6 + 531) &= ~1u;
  if (nw_parameters_get_server_mode(a4))
    v19 = 2;
  else
    v19 = 0;
  *((_WORD *)v6 + 531) = *((_WORD *)v6 + 531) & 0xFFFD | v19;
  v20 = *((_BYTE *)v6 + 696);
  if ((v20 & 1) != 0)
  {
    v21 = v6[86];
    if (v21)
    {
      os_release(v21);
      v20 = *((_BYTE *)v6 + 696);
    }
  }
  v6[86] = 0;
  *((_BYTE *)v6 + 696) = v20 | 1;
  if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
  v22 = (id)nw_protocol_copy_http_authentication_definition_http_authentication_definition;
  v23 = nw_parameters_copy_protocol_options_for_definition(a4, v22);
  v24 = v23;
  if (v23)
  {
    v25 = v23;
    v26 = nw_protocol_options_copy_definition(v25);
    v110 = v24;
    v111 = v22;
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
    is_equal = nw_protocol_definition_is_equal(v26, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v119 = (uint64_t)__Block_byref_object_copy__72473;
      v120 = __Block_byref_object_dispose__72474;
      v121 = 0;
      v28 = MEMORY[0x1E0C809B0];
      *(_QWORD *)type = MEMORY[0x1E0C809B0];
      v113 = 3221225472;
      v114 = __nw_http_authentication_options_copy_challenge_handler_block_invoke;
      v115 = &unk_1E14A9D68;
      v116 = buf;
      nw_protocol_options_access_handle(v25, type);
      v29 = _Block_copy(*(const void **)(*(_QWORD *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      goto LABEL_38;
    }
    v28 = MEMORY[0x1E0C809B0];
    __nwlog_obj();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_handler";
    v73 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v117 = 0;
    if (__nwlog_fault(v73, type, &v117))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v75 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_handler";
          _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s protocol options are not http authentication", buf, 0xCu);
        }
      }
      else if (v117)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v107 = type[0];
        v93 = os_log_type_enabled(v74, type[0]);
        if (backtrace_string)
        {
          if (v93)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v74, v107, "%{public}s protocol options are not http authentication, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_182;
        }
        if (v93)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_handler";
          _os_log_impl(&dword_182FBE000, v74, v107, "%{public}s protocol options are not http authentication, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v101 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_handler";
          _os_log_impl(&dword_182FBE000, v74, v101, "%{public}s protocol options are not http authentication, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_182:
    if (v73)
      free(v73);
    v29 = 0;
LABEL_38:

    v30 = *((_BYTE *)v6 + 760);
    if ((v30 & 1) != 0)
    {
      v31 = v6[94];
      if (v31)
      {
        _Block_release(v31);
        v30 = *((_BYTE *)v6 + 760);
      }
    }
    v6[94] = v29;
    *((_BYTE *)v6 + 760) = v30 | 1;
    v32 = v25;
    v33 = nw_protocol_options_copy_definition(v32);
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
    v34 = nw_protocol_definition_is_equal(v33, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (v34)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v119 = (uint64_t)__Block_byref_object_copy__4;
      v120 = __Block_byref_object_dispose__5;
      v121 = 0;
      *(_QWORD *)type = v28;
      v113 = 3221225472;
      v114 = __nw_http_authentication_options_copy_challenge_queue_block_invoke;
      v115 = &unk_1E14A9D68;
      v116 = buf;
      nw_protocol_options_access_handle(v32, type);
      v35 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_45;
    }
    __nwlog_obj();
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_queue";
    v108 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v117 = 0;
    v77 = (char *)v108;
    if (!__nwlog_fault(v108, type, &v117))
    {
LABEL_189:
      if (v77)
        free(v77);
      v35 = 0;
LABEL_45:

      v36 = *((_BYTE *)v6 + 776);
      if ((v36 & 1) != 0)
      {
        v37 = v6[96];
        if (v37)
        {
          dispatch_release(v37);
          v36 = *((_BYTE *)v6 + 776);
        }
      }
      v6[96] = v35;
      *((_BYTE *)v6 + 776) = v36 | 1;
      v38 = v32;
      v39 = nw_protocol_options_copy_definition(v38);
      if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
      v40 = nw_protocol_definition_is_equal(v39, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

      if (v40)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v119 = (uint64_t)__Block_byref_object_copy__4;
        v120 = __Block_byref_object_dispose__5;
        v121 = 0;
        *(_QWORD *)type = v28;
        v113 = 3221225472;
        v114 = __nw_http_authentication_options_copy_credential_storage_block_invoke;
        v115 = &unk_1E14A9D68;
        v116 = buf;
        nw_protocol_options_access_handle(v38, type);
        v41 = *(id *)(*(_QWORD *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);

        goto LABEL_52;
      }
      __nwlog_obj();
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_storage";
      v109 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v117 = 0;
      v81 = (char *)v109;
      if (!__nwlog_fault(v109, type, &v117))
      {
LABEL_196:
        if (v81)
          free(v81);
        v41 = 0;
LABEL_52:

        v42 = *((_BYTE *)v6 + 696);
        if ((v42 & 1) != 0)
        {
          v43 = v6[86];
          if (v43)
          {
            os_release(v43);
            v42 = *((_BYTE *)v6 + 696);
          }
        }
        v6[86] = v41;
        *((_BYTE *)v6 + 696) = v42 | 1;
        v44 = nw_http_authentication_options_copy_credential_cache(v38);
        v45 = *((_BYTE *)v6 + 712);
        if ((v45 & 1) != 0)
        {
          v46 = v6[88];
          if (v46)
          {
            os_release(v46);
            v45 = *((_BYTE *)v6 + 712);
          }
        }
        v6[88] = v44;
        *((_BYTE *)v6 + 712) = v45 | 1;
        v47 = v38;
        v48 = nw_protocol_options_copy_definition(v47);
        if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
        v49 = nw_protocol_definition_is_equal(v48, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

        if (v49)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x3032000000;
          v119 = (uint64_t)__Block_byref_object_copy__4;
          v120 = __Block_byref_object_dispose__5;
          v121 = 0;
          *(_QWORD *)type = v28;
          v113 = 3221225472;
          v114 = __nw_http_authentication_options_copy_h1_fallback_cache_block_invoke;
          v115 = &unk_1E14A9D68;
          v116 = buf;
          nw_protocol_options_access_handle(v47, type);
          v50 = *(id *)(*(_QWORD *)&buf[8] + 40);
          _Block_object_dispose(buf, 8);

LABEL_62:
          v51 = *((_BYTE *)v6 + 728);
          if ((v51 & 1) != 0)
          {
            v52 = v6[90];
            v24 = v110;
            v22 = v111;
            if (v52)
            {
              os_release(v52);
              v51 = *((_BYTE *)v6 + 728);
            }
          }
          else
          {
            v24 = v110;
            v22 = v111;
          }
          v6[90] = v50;
          *((_BYTE *)v6 + 728) = v51 | 1;
          v53 = nw_http_authentication_options_copy_appsso_h1_fallback_headers(v47);
          v54 = *((_BYTE *)v6 + 744);
          if ((v54 & 1) != 0)
          {
            v55 = v6[92];
            if (v55)
            {
              os_release(v55);
              v54 = *((_BYTE *)v6 + 744);
            }
          }
          v6[92] = v53;
          *((_BYTE *)v6 + 744) = v54 | 1;
          goto LABEL_70;
        }
        __nwlog_obj();
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
        v85 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v117 = 0;
        if (__nwlog_fault(v85, type, &v117))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v86 = objc_claimAutoreleasedReturnValue();
            v87 = type[0];
            if (os_log_type_enabled(v86, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
              _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s protocol options are not http_authentication", buf, 0xCu);
            }
          }
          else if (v117)
          {
            v98 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v86 = objc_claimAutoreleasedReturnValue();
            v99 = type[0];
            v100 = os_log_type_enabled(v86, type[0]);
            if (v98)
            {
              if (v100)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v98;
                _os_log_impl(&dword_182FBE000, v86, v99, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v98);
              goto LABEL_202;
            }
            if (v100)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
              _os_log_impl(&dword_182FBE000, v86, v99, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v86 = objc_claimAutoreleasedReturnValue();
            v104 = type[0];
            if (os_log_type_enabled(v86, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
              _os_log_impl(&dword_182FBE000, v86, v104, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_202:
        if (v85)
          free(v85);
        v50 = 0;
        goto LABEL_62;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v82 = objc_claimAutoreleasedReturnValue();
        v83 = type[0];
        if (os_log_type_enabled(v82, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_storage";
          _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s protocol options are not http_authentication", buf, 0xCu);
        }
      }
      else if (v117)
      {
        v96 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v82 = objc_claimAutoreleasedReturnValue();
        v106 = type[0];
        v97 = os_log_type_enabled(v82, type[0]);
        if (v96)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_storage";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v96;
            _os_log_impl(&dword_182FBE000, v82, v106, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v96);
          goto LABEL_195;
        }
        if (v97)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_storage";
          _os_log_impl(&dword_182FBE000, v82, v106, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v82 = objc_claimAutoreleasedReturnValue();
        v103 = type[0];
        if (os_log_type_enabled(v82, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_storage";
          _os_log_impl(&dword_182FBE000, v82, v103, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
        }
      }

LABEL_195:
      v81 = (char *)v109;
      goto LABEL_196;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v78 = objc_claimAutoreleasedReturnValue();
      v79 = type[0];
      if (os_log_type_enabled(v78, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_queue";
        _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s protocol options are not http authentication", buf, 0xCu);
      }
    }
    else if (v117)
    {
      v94 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v78 = objc_claimAutoreleasedReturnValue();
      v105 = type[0];
      v95 = os_log_type_enabled(v78, type[0]);
      if (v94)
      {
        if (v95)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v94;
          _os_log_impl(&dword_182FBE000, v78, v105, "%{public}s protocol options are not http authentication, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v94);
        goto LABEL_188;
      }
      if (v95)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_queue";
        _os_log_impl(&dword_182FBE000, v78, v105, "%{public}s protocol options are not http authentication, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v78 = objc_claimAutoreleasedReturnValue();
      v102 = type[0];
      if (os_log_type_enabled(v78, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_challenge_queue";
        _os_log_impl(&dword_182FBE000, v78, v102, "%{public}s protocol options are not http authentication, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_188:
    v77 = (char *)v108;
    goto LABEL_189;
  }
LABEL_70:
  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  v56 = (id)nw_protocol_copy_http_client_definition_definition;
  v57 = nw_parameters_copy_protocol_options_for_definition(a4, v56);
  v58 = nw_http_client_options_copy_retry_with_h1_handler(v57);
  v59 = *((_BYTE *)v6 + 616);
  if ((v59 & 1) != 0)
  {
    v60 = v6[76];
    if (v60)
    {
      _Block_release(v60);
      v59 = *((_BYTE *)v6 + 616);
    }
  }
  v6[25] = 0;
  v6[76] = v58;
  *((_BYTE *)v6 + 616) = v59 | 1;
  v6[9] = (v6 + 25);
  v6[26] = (v6 + 25);
  v6[27] = 0;
  v6[28] = (v6 + 27);
  v6[29] = 0;
  v6[30] = (v6 + 29);
  *((_BYTE *)v6 + 340) = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v61 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks((uint64_t)v6, v61, (uint64_t)nw_protocol_http_authentication_create::$_0::__invoke, (uint64_t)nw_protocol_http_authentication_create::$_1::__invoke);
  if (v61)
    os_release(v61);
  v62 = v6[5];
  if (!v62)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
    v68 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v117 = 0;
    if (!__nwlog_fault(v68, type, &v117))
      goto LABEL_177;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v69 = __nwlog_obj();
      v70 = type[0];
      if (!os_log_type_enabled(v69, type[0]))
        goto LABEL_177;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      v71 = "%{public}s called with null protocol->handle";
      goto LABEL_176;
    }
    if (!v117)
    {
      v69 = __nwlog_obj();
      v70 = type[0];
      if (!os_log_type_enabled(v69, type[0]))
        goto LABEL_177;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      v71 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_176;
    }
    v88 = (char *)__nw_create_backtrace_string();
    v69 = __nwlog_obj();
    v70 = type[0];
    v89 = os_log_type_enabled(v69, type[0]);
    if (!v88)
    {
      if (!v89)
        goto LABEL_177;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      v71 = "%{public}s called with null protocol->handle, no backtrace";
      goto LABEL_176;
    }
    if (v89)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v88;
      _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null protocol->handle, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v88);
LABEL_177:
    if (!v68)
      goto LABEL_82;
LABEL_178:
    free(v68);
    goto LABEL_82;
  }
  isa = v62[9].isa;
  if (!isa)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
    v68 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v117 = 0;
    if (!__nwlog_fault(v68, type, &v117))
      goto LABEL_177;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v69 = __nwlog_obj();
      v70 = type[0];
      if (!os_log_type_enabled(v69, type[0]))
        goto LABEL_177;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      v71 = "%{public}s called with null metadata_plugin";
      goto LABEL_176;
    }
    if (!v117)
    {
      v69 = __nwlog_obj();
      v70 = type[0];
      if (!os_log_type_enabled(v69, type[0]))
        goto LABEL_177;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      v71 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
      goto LABEL_176;
    }
    v90 = (char *)__nw_create_backtrace_string();
    v69 = __nwlog_obj();
    v70 = type[0];
    v91 = os_log_type_enabled(v69, type[0]);
    if (v90)
    {
      if (v91)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v90;
        _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v90);
      if (!v68)
        goto LABEL_82;
      goto LABEL_178;
    }
    if (v91)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_plugin_metadata_set_message_discarded_callback";
      v71 = "%{public}s called with null metadata_plugin, no backtrace";
LABEL_176:
      _os_log_impl(&dword_182FBE000, v69, v70, v71, buf, 0xCu);
      goto LABEL_177;
    }
    goto LABEL_177;
  }
  *((_QWORD *)isa + 15) = nw_http_authentication_reissue;
LABEL_82:
  v6[11] = (v6 + 43);
  nw_protocol_plugin_retry_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_authentication_create::$_2::__invoke, (uint64_t)nw_protocol_http_authentication_create::$_3::__invoke, (uint64_t)nw_protocol_http_authentication_create::$_4::__invoke, (uint64_t)nw_protocol_http_authentication_create::$_5::__invoke);
  v6[8] = (v6 + 13);
  nw_protocol_plugin_name_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_authentication_create::$_6::__invoke);
  if (v57)
    os_release(v57);
  if (v56)
    os_release(v56);
  if (v24)
    os_release(v24);
  if (v22)
    os_release(v22);
  return (BOOL)v6;
}

void sub_1834CD190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_protocol_http_authentication_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  nw_protocol_http_authentication_create::$_0::operator()(a1, a2, a3, a5);
}

void nw_protocol_http_authentication_create::$_1::__invoke(uint64_t a1, int a2, void *object, int a4, uint64_t a5)
{
  uint64_t v6;
  void *v10;
  char v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const __CFDictionary *v15;
  uint64_t v16;
  char v17;
  void *v18;
  void *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __int16 v24;
  __int16 v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  NSObject *v38;
  char *backtrace_string;
  _BOOL4 v40;
  char *v41;
  _BOOL4 v42;
  const char *v43;
  _BOOL4 v44;
  _BOOL4 v45;
  char *v46;
  _BOOL4 v47;
  char *v48;
  _BOOL4 v49;
  char *v50;
  _BOOL4 v51;
  os_log_type_t v52[8];
  uint64_t v53;
  uint64_t (*v54)(_QWORD *, uint64_t, uint64_t);
  void *v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  char v59;
  _BYTE type[24];
  uint64_t (*v61)(uint64_t, uint64_t);
  void (*v62)(uint64_t);
  void *objecta;
  char v64;
  _BYTE buf[24];
  uint64_t (*v66)(uint64_t, uint64_t);
  void (*v67)(uint64_t);
  void *v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v26, type, v52))
      goto LABEL_136;
    if (type[0] == 17)
    {
      v27 = __nwlog_obj();
      v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0]))
        goto LABEL_136;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v29 = "%{public}s called with null protocol";
    }
    else if (v52[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type[0];
      v40 = os_log_type_enabled(v27, (os_log_type_t)type[0]);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "operator()";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_136:
        if (!v26)
          return;
        goto LABEL_137;
      }
      if (!v40)
        goto LABEL_136;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v29 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v27 = __nwlog_obj();
      v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0]))
        goto LABEL_136;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v29 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_135;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v26, type, v52))
      goto LABEL_136;
    if (type[0] != 17)
    {
      if (v52[0] == OS_LOG_TYPE_DEFAULT)
      {
        v27 = __nwlog_obj();
        v28 = type[0];
        if (!os_log_type_enabled(v27, (os_log_type_t)type[0]))
          goto LABEL_136;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v29 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_135;
      }
      v41 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = type[0];
      v42 = os_log_type_enabled(v27, (os_log_type_t)type[0]);
      if (!v41)
      {
        if (!v42)
          goto LABEL_136;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v29 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_135;
      }
      if (!v42)
        goto LABEL_95;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v41;
      v43 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
    v27 = __nwlog_obj();
    v28 = type[0];
    if (!os_log_type_enabled(v27, (os_log_type_t)type[0]))
      goto LABEL_136;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v29 = "%{public}s called with null http_authentication";
LABEL_135:
    _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
    goto LABEL_136;
  }
  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v26, type, v52))
      goto LABEL_136;
    if (type[0] == 17)
    {
      v27 = __nwlog_obj();
      v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0]))
        goto LABEL_136;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v29 = "%{public}s called with null metadata";
      goto LABEL_135;
    }
    if (v52[0] == OS_LOG_TYPE_DEFAULT)
    {
      v27 = __nwlog_obj();
      v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0]))
        goto LABEL_136;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v29 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_135;
    }
    v41 = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type[0];
    v44 = os_log_type_enabled(v27, (os_log_type_t)type[0]);
    if (!v41)
    {
      if (!v44)
        goto LABEL_136;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v29 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_135;
    }
    if (!v44)
      goto LABEL_95;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v41;
    v43 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_94:
    _os_log_impl(&dword_182FBE000, v27, v28, v43, buf, 0x16u);
    goto LABEL_95;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v26, type, v52))
      goto LABEL_136;
    if (type[0] == 17)
    {
      v27 = __nwlog_obj();
      v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0]))
        goto LABEL_136;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v29 = "%{public}s called with null completion";
      goto LABEL_135;
    }
    if (v52[0] == OS_LOG_TYPE_DEFAULT)
    {
      v27 = __nwlog_obj();
      v28 = type[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)type[0]))
        goto LABEL_136;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v29 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_135;
    }
    v41 = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type[0];
    v45 = os_log_type_enabled(v27, (os_log_type_t)type[0]);
    if (!v41)
    {
      if (!v45)
        goto LABEL_136;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v29 = "%{public}s called with null completion, no backtrace";
      goto LABEL_135;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v41;
      v43 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
LABEL_95:
    free(v41);
    if (!v26)
      return;
LABEL_137:
    free(v26);
    return;
  }
  v10 = os_retain(object);
  v11 = *(_BYTE *)(v6 + 584);
  if ((v11 & 1) != 0)
  {
    v12 = *(void **)(v6 + 576);
    if (v12)
    {
      os_release(v12);
      v11 = *(_BYTE *)(v6 + 584);
    }
  }
  *(_QWORD *)(v6 + 576) = v10;
  *(_BYTE *)(v6 + 584) = v11 | 1;
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    v14 = *(void **)(v13 + 576);
    if (v14)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3802000000;
      v66 = __Block_byref_object_copy__88;
      v67 = __Block_byref_object_dispose__89;
      v68 = nw_http_metadata_copy_request(v14);
      v69 |= 1u;
      if (*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
      {
        if ((*(_BYTE *)(v13 + 198) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v38 = __nwlog_obj();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)type = 136446722;
              *(_QWORD *)&type[4] = "nw_http_authentication_apply_cache";
              *(_WORD *)&type[12] = 2082;
              *(_QWORD *)&type[14] = v13 + 114;
              *(_WORD *)&type[22] = 2080;
              v61 = (uint64_t (*)(uint64_t, uint64_t))" ";
              _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", type, 0x20u);
            }
          }
        }
        v15 = *(const __CFDictionary **)(v13 + 736);
        if (v15 && CFDictionaryGetCount(v15))
        {
          v16 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = 0;
          v17 = *(_BYTE *)(v13 + 952);
          if ((v17 & 1) != 0)
          {
            v18 = *(void **)(v13 + 944);
            if (v18)
            {
              os_release(v18);
              v17 = *(_BYTE *)(v13 + 952);
            }
          }
          *(_QWORD *)(v13 + 944) = v16;
          *(_BYTE *)(v13 + 952) = v17 | 1;
          CFDictionaryApplyFunction(*(CFDictionaryRef *)(v13 + 736), (CFDictionaryApplierFunction)nw_http_authentication_apply_appsso_headers, (void *)v13);
          *(_DWORD *)(v13 + 1044) = 4;
          CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v13 + 736));
        }
        else
        {
          if (nw_endpoint_get_type(*(nw_endpoint_t *)(v13 + 784)) == nw_endpoint_type_url)
            v19 = (void *)nw_endpoint_copy_cfurl(*(void **)(v13 + 784));
          else
            v19 = 0;
          v20 = nw_http_request_copy_url_request(*(void **)(*(_QWORD *)&buf[8] + 40), **((void ***)&unk_1E14AD208 + *(int *)(v13 + 1040)), v19);
          *(_QWORD *)type = 0;
          *(_QWORD *)&type[8] = type;
          *(_QWORD *)&type[16] = 0x3802000000;
          v61 = __Block_byref_object_copy__90;
          v62 = __Block_byref_object_dispose__91;
          objecta = (void *)CFURLRequestCopyHTTPRequest();
          v64 |= 1u;
          *(_QWORD *)v52 = MEMORY[0x1E0C809B0];
          v53 = 0x40000000;
          v54 = ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke;
          v55 = &unk_1E149C138;
          v56 = type;
          v57 = buf;
          v58 = v13;
          v21 = *(_QWORD *)(v13 + 720);
          if (!v21 || *(_QWORD *)(v21 + 16) == *(_QWORD *)(v21 + 24))
          {
            v22 = *(_QWORD *)(v13 + 704);
            if (v22 && *(_QWORD *)(v22 + 16) != *(_QWORD *)(v22 + 24))
              nw_array_apply((unsigned __int8 *)v22, (uint64_t)v52);
          }
          else
          {
            nw_array_apply((unsigned __int8 *)v21, (uint64_t)v52);
            nw_array_remove_all_objects(*(_QWORD *)(v13 + 720));
          }
          _Block_object_dispose(type, 8);
          if ((v64 & 1) != 0 && objecta)
            os_release(objecta);
          if (v20)
            CFRelease((CFTypeRef)v20);
          if (v19)
            CFRelease(v19);
        }
LABEL_35:
        _Block_object_dispose(buf, 8);
        if ((v69 & 1) != 0 && v68)
          os_release(v68);
        goto LABEL_38;
      }
      __nwlog_obj();
      *(_DWORD *)type = 136446210;
      *(_QWORD *)&type[4] = "nw_http_authentication_apply_cache";
      v34 = (char *)_os_log_send_and_compose_impl();
      v52[0] = OS_LOG_TYPE_ERROR;
      v59 = 0;
      if (__nwlog_fault(v34, v52, &v59))
      {
        if (v52[0] == OS_LOG_TYPE_FAULT)
        {
          v35 = __nwlog_obj();
          v36 = v52[0];
          if (!os_log_type_enabled(v35, v52[0]))
            goto LABEL_148;
          *(_DWORD *)type = 136446210;
          *(_QWORD *)&type[4] = "nw_http_authentication_apply_cache";
          v37 = "%{public}s called with null request";
          goto LABEL_147;
        }
        if (!v59)
        {
          v35 = __nwlog_obj();
          v36 = v52[0];
          if (!os_log_type_enabled(v35, v52[0]))
            goto LABEL_148;
          *(_DWORD *)type = 136446210;
          *(_QWORD *)&type[4] = "nw_http_authentication_apply_cache";
          v37 = "%{public}s called with null request, backtrace limit exceeded";
          goto LABEL_147;
        }
        v50 = (char *)__nw_create_backtrace_string();
        v35 = __nwlog_obj();
        v36 = v52[0];
        v51 = os_log_type_enabled(v35, v52[0]);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)type = 136446466;
            *(_QWORD *)&type[4] = "nw_http_authentication_apply_cache";
            *(_WORD *)&type[12] = 2082;
            *(_QWORD *)&type[14] = v50;
            _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null request, dumping backtrace:%{public}s", type, 0x16u);
          }
          free(v50);
          goto LABEL_148;
        }
        if (v51)
        {
          *(_DWORD *)type = 136446210;
          *(_QWORD *)&type[4] = "nw_http_authentication_apply_cache";
          v37 = "%{public}s called with null request, no backtrace";
LABEL_147:
          _os_log_impl(&dword_182FBE000, v35, v36, v37, type, 0xCu);
        }
      }
LABEL_148:
      if (v34)
        free(v34);
      goto LABEL_35;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
    v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v30, type, v52))
    {
      if (type[0] == 17)
      {
        v31 = __nwlog_obj();
        v32 = type[0];
        if (!os_log_type_enabled(v31, (os_log_type_t)type[0]))
          goto LABEL_143;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
        v33 = "%{public}s called with null http_authentication->outbound_metadata";
        goto LABEL_142;
      }
      if (v52[0] == OS_LOG_TYPE_DEFAULT)
      {
        v31 = __nwlog_obj();
        v32 = type[0];
        if (!os_log_type_enabled(v31, (os_log_type_t)type[0]))
          goto LABEL_143;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
        v33 = "%{public}s called with null http_authentication->outbound_metadata, backtrace limit exceeded";
        goto LABEL_142;
      }
      v48 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type[0];
      v49 = os_log_type_enabled(v31, (os_log_type_t)type[0]);
      if (v48)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v48;
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null http_authentication->outbound_metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v48);
        if (!v30)
          goto LABEL_38;
        goto LABEL_144;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
        v33 = "%{public}s called with null http_authentication->outbound_metadata, no backtrace";
LABEL_142:
        _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
    v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v52[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v30, type, v52))
      goto LABEL_143;
    if (type[0] == 17)
    {
      v31 = __nwlog_obj();
      v32 = type[0];
      if (!os_log_type_enabled(v31, (os_log_type_t)type[0]))
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
      v33 = "%{public}s called with null http_authentication";
      goto LABEL_142;
    }
    if (v52[0] == OS_LOG_TYPE_DEFAULT)
    {
      v31 = __nwlog_obj();
      v32 = type[0];
      if (!os_log_type_enabled(v31, (os_log_type_t)type[0]))
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
      v33 = "%{public}s called with null http_authentication, backtrace limit exceeded";
      goto LABEL_142;
    }
    v46 = (char *)__nw_create_backtrace_string();
    v31 = __nwlog_obj();
    v32 = type[0];
    v47 = os_log_type_enabled(v31, (os_log_type_t)type[0]);
    if (!v46)
    {
      if (!v47)
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
      v33 = "%{public}s called with null http_authentication, no backtrace";
      goto LABEL_142;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_authentication_apply_cache";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v46;
      _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v46);
  }
LABEL_143:
  if (v30)
LABEL_144:
    free(v30);
LABEL_38:
  v23 = nw_http_metadata_copy_request(object);
  if (nw_http_fields_have_field_with_name(v23, (unint64_t)"Cookie"))
    v24 = 4;
  else
    v24 = 0;
  if (a4)
    v25 = 0;
  else
    v25 = 8;
  *(_WORD *)(v6 + 1062) = v24 | v25 | *(_WORD *)(v6 + 1062) & 0xFFF3;
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, object);
  if (v23)
    os_release(v23);
}

void nw_http_authentication_reissue(nw_protocol *a1)
{
  char *handle;
  __int16 v3;
  NSObject *v4;
  int v5;
  void *parameters;
  uint64_t v7;
  int v8;
  NWConcrete_nw_authentication_credential_cache_entry *v9;
  NWConcrete_nw_authentication_credential_cache_entry *v10;
  void **v11;
  void *v12;
  int v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  char *v21;
  _BOOL4 v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  char *v28;
  _BOOL4 v29;
  _QWORD v30[5];
  _QWORD v31[6];
  _QWORD v32[5];
  _QWORD v33[5];
  char v34;
  os_log_type_t v35;
  _BYTE buf[24];
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  void *v39;
  char v40;
  uint8_t v41[4];
  const char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
    v15 = (char *)_os_log_send_and_compose_impl();
    v41[0] = 16;
    v35 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, v41, &v35))
      goto LABEL_55;
    if (v41[0] == 17)
    {
      v16 = __nwlog_obj();
      v17 = v41[0];
      if (!os_log_type_enabled(v16, (os_log_type_t)v41[0]))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
      v18 = "%{public}s called with null protocol";
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = v41[0];
      v20 = os_log_type_enabled(v16, (os_log_type_t)v41[0]);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_55:
        if (!v15)
          return;
LABEL_56:
        free(v15);
        return;
      }
      if (!v20)
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
      v18 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v16 = __nwlog_obj();
      v17 = v41[0];
      if (!os_log_type_enabled(v16, (os_log_type_t)v41[0]))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
      v18 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_54:
    _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
    goto LABEL_55;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    v3 = *((_WORD *)handle + 531);
    if ((v3 & 0x41) != 0x40)
      return;
    *((_WORD *)handle + 531) = v3 & 0xFFBF;
    if ((handle[198] & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *((_DWORD *)handle + 263);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = handle + 114;
        *(_WORD *)&buf[22] = 2080;
        v37 = (uint64_t (*)(uint64_t, uint64_t))" ";
        LOWORD(v38) = 1024;
        *(_DWORD *)((char *)&v38 + 2) = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sreissuing authenticated request, challenge count %u", buf, 0x26u);
      }
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3802000000;
    v37 = __Block_byref_object_copy__97;
    v38 = __Block_byref_object_dispose__98;
    parameters = (void *)nw_protocol_get_parameters((uint64_t)handle);
    if (parameters)
      parameters = os_retain(parameters);
    v39 = parameters;
    v40 |= 1u;
    v7 = 1048;
    if ((*((_WORD *)handle + 531) & 0x10) == 0)
      v7 = 1044;
    v8 = *(_DWORD *)&handle[v7];
    if ((v8 & 0xFFFFFFFE) != 4 || *((int *)handle + 260) < 4)
    {
      nw_http_messaging_options_create_transaction_in_parameters(*(void **)(*(_QWORD *)&buf[8] + 40), (uint64_t)handle, 2);
      v12 = (void *)*((_QWORD *)handle + 104);
      v13 = handle[1060];
      v31[5] = handle;
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 0x40000000;
      v32[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_2;
      v32[3] = &__block_descriptor_tmp_101;
      v32[4] = handle;
      v30[4] = handle;
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 0x40000000;
      v31[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_3;
      v31[3] = &unk_1E149C1C0;
      v31[4] = buf;
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 0x40000000;
      v30[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_5;
      v30[3] = &__block_descriptor_tmp_106;
      nw_protocol_plugin_retry_reissue_output_frames((uint64_t)(handle + 344), (uint64_t)a1, v12, 0, 0, v13, 1, v32, v31, (uint64_t)v30);
      goto LABEL_17;
    }
    if (CFDictionaryGetCount(*((CFDictionaryRef *)handle + 92)))
    {
LABEL_24:
      v14 = *((_QWORD *)handle + 76);
      if (v14)
        goto LABEL_25;
      goto LABEL_26;
    }
    v9 = objc_alloc_init(NWConcrete_nw_authentication_credential_cache_entry);
    v10 = v9;
    if ((*((_WORD *)handle + 531) & 0x10) != 0)
    {
      nw_authentication_credential_cache_entry_set_http_authentication(v9, *((const void **)handle + 108));
      v11 = (void **)(handle + 672);
    }
    else
    {
      nw_authentication_credential_cache_entry_set_http_authentication(v9, *((const void **)handle + 106));
      v11 = (void **)(handle + 656);
    }
    nw_authentication_credential_cache_entry_set_credential((uint64_t)v10, *v11);
    nw_authentication_credential_cache_entry_set_for_proxy((uint64_t)v10, (*((_WORD *)handle + 531) & 0x10) != 0);
    if (v10)
    {
      v10->type = v8;
      nw_array_append(*((_QWORD *)handle + 90), v10);
      os_release(v10);
      goto LABEL_24;
    }
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v41 = 136446210;
    v42 = "nw_authentication_credential_cache_entry_set_type";
    v24 = (char *)_os_log_send_and_compose_impl();

    v35 = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v24, &v35, &v34))
    {
      if (v35 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = v35;
        if (os_log_type_enabled(v25, v35))
        {
          *(_DWORD *)v41 = 136446210;
          v42 = "nw_authentication_credential_cache_entry_set_type";
          v27 = "%{public}s called with null cache_entry";
LABEL_70:
          _os_log_impl(&dword_182FBE000, v25, v26, v27, v41, 0xCu);
          goto LABEL_71;
        }
        goto LABEL_71;
      }
      if (!v34)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = v35;
        if (os_log_type_enabled(v25, v35))
        {
          *(_DWORD *)v41 = 136446210;
          v42 = "nw_authentication_credential_cache_entry_set_type";
          v27 = "%{public}s called with null cache_entry, backtrace limit exceeded";
          goto LABEL_70;
        }
LABEL_71:

        goto LABEL_72;
      }
      v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = v35;
      v29 = os_log_type_enabled(v25, v35);
      if (!v28)
      {
        if (v29)
        {
          *(_DWORD *)v41 = 136446210;
          v42 = "nw_authentication_credential_cache_entry_set_type";
          v27 = "%{public}s called with null cache_entry, no backtrace";
          goto LABEL_70;
        }
        goto LABEL_71;
      }
      if (v29)
      {
        *(_DWORD *)v41 = 136446466;
        v42 = "nw_authentication_credential_cache_entry_set_type";
        v43 = 2082;
        v44 = v28;
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", v41, 0x16u);
      }

      free(v28);
    }
LABEL_72:
    if (v24)
      free(v24);
    nw_array_append(*((_QWORD *)handle + 90), 0);
    v14 = *((_QWORD *)handle + 76);
    if (v14)
    {
LABEL_25:
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 0x40000000;
      v33[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke;
      v33[3] = &__block_descriptor_tmp_99;
      v33[4] = handle;
      if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(v14 + 16))(v14, *(_QWORD *)(*(_QWORD *)&buf[8] + 40), v33) & 1) != 0)goto LABEL_17;
    }
LABEL_26:
    nw_protocol_error(*((_QWORD **)handle + 6), (uint64_t)handle);
    nw_protocol_disconnected(*((_QWORD **)handle + 6), (uint64_t)handle);
LABEL_17:
    _Block_object_dispose(buf, 8);
    if ((v40 & 1) != 0)
    {
      if (v39)
        os_release(v39);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
  v15 = (char *)_os_log_send_and_compose_impl();
  v41[0] = 16;
  v35 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v15, v41, &v35))
    goto LABEL_55;
  if (v41[0] == 17)
  {
    v16 = __nwlog_obj();
    v17 = v41[0];
    if (!os_log_type_enabled(v16, (os_log_type_t)v41[0]))
      goto LABEL_55;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
    v18 = "%{public}s called with null http_authentication";
    goto LABEL_54;
  }
  if (v35 == OS_LOG_TYPE_DEFAULT)
  {
    v16 = __nwlog_obj();
    v17 = v41[0];
    if (!os_log_type_enabled(v16, (os_log_type_t)v41[0]))
      goto LABEL_55;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
    v18 = "%{public}s called with null http_authentication, backtrace limit exceeded";
    goto LABEL_54;
  }
  v21 = (char *)__nw_create_backtrace_string();
  v16 = __nwlog_obj();
  v17 = v41[0];
  v22 = os_log_type_enabled(v16, (os_log_type_t)v41[0]);
  if (!v21)
  {
    if (!v22)
      goto LABEL_55;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
    v18 = "%{public}s called with null http_authentication, no backtrace";
    goto LABEL_54;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http_authentication_reissue";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v21;
    _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v21);
  if (v15)
    goto LABEL_56;
}

uint64_t nw_protocol_http_authentication_create::$_2::__invoke(nw_protocol_http_authentication_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  NSObject *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v5, &type, &v14))
      goto LABEL_38;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_38;
        *(_DWORD *)buf = 136446210;
        v17 = "operator()";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10)
          goto LABEL_38;
        *(_DWORD *)buf = 136446210;
        v17 = "operator()";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_37;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "operator()";
        v18 = 2082;
        v19 = backtrace_string;
        v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
        _os_log_impl(&dword_182FBE000, v6, v7, v11, buf, 0x16u);
      }
LABEL_26:
      free(backtrace_string);
      goto LABEL_38;
    }
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    v17 = "operator()";
    v8 = "%{public}s called with null protocol";
LABEL_37:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
LABEL_38:
    if (v5)
      free(v5);
    return 0;
  }
  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v5, &type, &v14))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v17 = "operator()";
      v8 = "%{public}s called with null http_authentication";
      goto LABEL_37;
    }
    if (!v14)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v17 = "operator()";
      v8 = "%{public}s called with null http_authentication, backtrace limit exceeded";
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v12 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "operator()";
        v18 = 2082;
        v19 = backtrace_string;
        v11 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    if (!v12)
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    v17 = "operator()";
    v8 = "%{public}s called with null http_authentication, no backtrace";
    goto LABEL_37;
  }
  if ((*(_WORD *)(v3 + 1062) & 0x40) == 0)
    return 0;
  if ((*(_BYTE *)(v3 + 198) & 1) == 0 && gLogDatapath)
  {
    v13 = __nwlog_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v17 = "operator()";
      v18 = 2082;
      v19 = (char *)(v3 + 114);
      v20 = 2080;
      v21 = " ";
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sretrying pending reissue on a new stream", buf, 0x20u);
    }
  }
  *(_BYTE *)(v3 + 1060) = 2;
  nw_http_authentication_reissue((nw_protocol *)v3);
  return 1;
}

uint64_t nw_protocol_http_authentication_create::$_3::__invoke(nw_protocol_http_authentication_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_authentication_create::$_4::__invoke(nw_protocol_http_authentication_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_authentication_create::$_5::__invoke(nw_protocol_http_authentication_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_authentication_create::$_6::__invoke(nw_protocol_http_authentication_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t __Block_byref_object_copy__97(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__98(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 556) |= 0x10u;
  return result;
}

uint64_t ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  char v13;
  void *v14;

  nw_frame_set_metadata(*a2, *(NSObject **)(*(_QWORD *)(a1 + 32) + 592), 0, (*(_WORD *)(*(_QWORD *)(a1 + 32) + 1062) & 8) == 0);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(v3 + 920);
  if ((v4 & 1) != 0)
  {
    v5 = *(void **)(v3 + 912);
    if (v5)
    {
      os_release(v5);
      v4 = *(_BYTE *)(v3 + 920);
    }
  }
  *(_QWORD *)(v3 + 912) = 0;
  *(_BYTE *)(v3 + 920) = v4 | 1;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(v6 + 936);
  if ((v7 & 1) != 0)
  {
    v8 = *(void **)(v6 + 928);
    if (v8)
    {
      os_release(v8);
      v7 = *(_BYTE *)(v6 + 936);
    }
  }
  *(_QWORD *)(v6 + 928) = 0;
  *(_BYTE *)(v6 + 936) = v7 | 1;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(v9 + 952);
  if ((v10 & 1) != 0)
  {
    v11 = *(void **)(v9 + 944);
    if (v11)
    {
      os_release(v11);
      v10 = *(_BYTE *)(v9 + 952);
    }
  }
  *(_QWORD *)(v9 + 944) = 0;
  *(_BYTE *)(v9 + 952) = v10 | 1;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(v12 + 968);
  if ((v13 & 1) != 0)
  {
    v14 = *(void **)(v12 + 960);
    if (v14)
    {
      os_release(v14);
      v13 = *(_BYTE *)(v12 + 968);
    }
  }
  *(_QWORD *)(v12 + 960) = 0;
  *(_BYTE *)(v12 + 968) = v13 | 1;
  return 1;
}

uint64_t ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_3(uint64_t a1)
{
  id v2;
  char *identifier;
  uint64_t v4;
  unsigned __int8 *v5;
  void *v6;
  _BOOL8 v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  v2 = (id)nw_protocol_copy_http_client_definition_definition;
  identifier = nw_protocol_definition_get_identifier(v2);
  if (v2)
    os_release(v2);
  v4 = *(_QWORD *)(a1 + 40);
  do
  {
    v4 = *(_QWORD *)(v4 + 48);
    if (!v4)
      return 1;
  }
  while (!nw_protocols_are_equal(*(_QWORD **)(v4 + 16), identifier));
  v5 = nw_parameters_copy_protocol_options_legacy(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (nw_protocol *)v4);
  v6 = nw_http_client_options_copy_resend_handler(v5);
  v7 = v6 == 0;
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_4;
    v12[3] = &__block_descriptor_tmp_103;
    v12[4] = v9;
    (*((void (**)(void *, _QWORD, _QWORD *))v6 + 2))(v6, *(_QWORD *)(v10 + 40), v12);
    _Block_release(v8);
  }
  if (v5)
    os_release(v5);
  return v7;
}

void ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_5(uint64_t a1)
{
  nw_http_authentication_destroy(*(_QWORD *)(a1 + 32));
}

void nw_http_authentication_destroy(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const void *v11;
  const void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  const void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  const void *v28;
  const void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  int v37;
  const char *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v36 = __nwlog_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        v37 = 136446722;
        v38 = "nw_http_authentication_destroy";
        v39 = 2082;
        v40 = a1 + 114;
        v41 = 2080;
        v42 = " ";
        _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v37, 0x20u);
      }
    }
  }
  if (*(_DWORD *)(a1 + 552))
  {
    *(_BYTE *)(a1 + 556) |= 0x40u;
    if ((*(_BYTE *)(a1 + 198) & 1) == 0 && gLogDatapath)
    {
      v2 = __nwlog_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v37 = 136446722;
        v38 = "nw_http_authentication_destroy";
        v39 = 2082;
        v40 = a1 + 114;
        v41 = 2080;
        v42 = " ";
        _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdeferring destroy because the request is being reissued", (uint8_t *)&v37, 0x20u);
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(a1 + 1032) & 1) != 0)
    {
      v3 = *(const void **)(a1 + 1024);
      if (v3)
        CFRelease(v3);
    }
    *(_QWORD *)(a1 + 1024) = 0;
    if ((*(_BYTE *)(a1 + 1016) & 1) != 0)
    {
      v4 = *(const void **)(a1 + 1008);
      if (v4)
        CFRelease(v4);
    }
    *(_QWORD *)(a1 + 1008) = 0;
    if ((*(_BYTE *)(a1 + 1000) & 1) != 0)
    {
      v5 = *(const void **)(a1 + 992);
      if (v5)
        CFRelease(v5);
    }
    *(_QWORD *)(a1 + 992) = 0;
    if ((*(_BYTE *)(a1 + 984) & 1) != 0)
    {
      v6 = *(const void **)(a1 + 976);
      if (v6)
        CFRelease(v6);
    }
    *(_QWORD *)(a1 + 976) = 0;
    if ((*(_BYTE *)(a1 + 968) & 1) != 0)
    {
      v7 = *(void **)(a1 + 960);
      if (v7)
        os_release(v7);
    }
    *(_QWORD *)(a1 + 960) = 0;
    if ((*(_BYTE *)(a1 + 952) & 1) != 0)
    {
      v8 = *(void **)(a1 + 944);
      if (v8)
        os_release(v8);
    }
    *(_QWORD *)(a1 + 944) = 0;
    if ((*(_BYTE *)(a1 + 936) & 1) != 0)
    {
      v9 = *(void **)(a1 + 928);
      if (v9)
        os_release(v9);
    }
    *(_QWORD *)(a1 + 928) = 0;
    if ((*(_BYTE *)(a1 + 920) & 1) != 0)
    {
      v10 = *(void **)(a1 + 912);
      if (v10)
        os_release(v10);
    }
    *(_QWORD *)(a1 + 912) = 0;
    if ((*(_BYTE *)(a1 + 904) & 1) != 0)
    {
      v11 = *(const void **)(a1 + 896);
      if (v11)
        CFRelease(v11);
    }
    *(_QWORD *)(a1 + 896) = 0;
    if ((*(_BYTE *)(a1 + 888) & 1) != 0)
    {
      v12 = *(const void **)(a1 + 880);
      if (v12)
        CFRelease(v12);
    }
    *(_QWORD *)(a1 + 880) = 0;
    if ((*(_BYTE *)(a1 + 872) & 1) != 0)
    {
      v13 = *(void **)(a1 + 864);
      if (v13)
        os_release(v13);
    }
    *(_QWORD *)(a1 + 864) = 0;
    if ((*(_BYTE *)(a1 + 856) & 1) != 0)
    {
      v14 = *(void **)(a1 + 848);
      if (v14)
        os_release(v14);
    }
    *(_QWORD *)(a1 + 848) = 0;
    if ((*(_BYTE *)(a1 + 840) & 1) != 0)
    {
      v15 = *(void **)(a1 + 832);
      if (v15)
        os_release(v15);
    }
    *(_QWORD *)(a1 + 832) = 0;
    if ((*(_BYTE *)(a1 + 824) & 1) != 0)
    {
      v16 = *(void **)(a1 + 816);
      if (v16)
        os_release(v16);
    }
    *(_QWORD *)(a1 + 816) = 0;
    if ((*(_BYTE *)(a1 + 808) & 1) != 0)
    {
      v17 = *(void **)(a1 + 800);
      if (v17)
        os_release(v17);
    }
    *(_QWORD *)(a1 + 800) = 0;
    if ((*(_BYTE *)(a1 + 792) & 1) != 0)
    {
      v18 = *(void **)(a1 + 784);
      if (v18)
        os_release(v18);
    }
    *(_QWORD *)(a1 + 784) = 0;
    if ((*(_BYTE *)(a1 + 776) & 1) != 0)
    {
      v19 = *(NSObject **)(a1 + 768);
      if (v19)
        dispatch_release(v19);
    }
    *(_QWORD *)(a1 + 768) = 0;
    if ((*(_BYTE *)(a1 + 760) & 1) != 0)
    {
      v20 = *(const void **)(a1 + 752);
      if (v20)
        _Block_release(v20);
    }
    *(_QWORD *)(a1 + 752) = 0;
    if ((*(_BYTE *)(a1 + 744) & 1) != 0)
    {
      v21 = *(void **)(a1 + 736);
      if (v21)
        os_release(v21);
    }
    *(_QWORD *)(a1 + 736) = 0;
    if ((*(_BYTE *)(a1 + 728) & 1) != 0)
    {
      v22 = *(void **)(a1 + 720);
      if (v22)
        os_release(v22);
    }
    *(_QWORD *)(a1 + 720) = 0;
    if ((*(_BYTE *)(a1 + 712) & 1) != 0)
    {
      v23 = *(void **)(a1 + 704);
      if (v23)
        os_release(v23);
    }
    *(_QWORD *)(a1 + 704) = 0;
    if ((*(_BYTE *)(a1 + 696) & 1) != 0)
    {
      v24 = *(void **)(a1 + 688);
      if (v24)
        os_release(v24);
    }
    *(_QWORD *)(a1 + 688) = 0;
    if ((*(_BYTE *)(a1 + 680) & 1) != 0)
    {
      v25 = *(void **)(a1 + 672);
      if (v25)
        os_release(v25);
    }
    *(_QWORD *)(a1 + 672) = 0;
    if ((*(_BYTE *)(a1 + 664) & 1) != 0)
    {
      v26 = *(void **)(a1 + 656);
      if (v26)
        os_release(v26);
    }
    *(_QWORD *)(a1 + 656) = 0;
    if ((*(_BYTE *)(a1 + 648) & 1) != 0)
    {
      v27 = *(void **)(a1 + 640);
      if (v27)
        os_release(v27);
    }
    *(_QWORD *)(a1 + 640) = 0;
    if ((*(_BYTE *)(a1 + 632) & 1) != 0)
    {
      v28 = *(const void **)(a1 + 624);
      if (v28)
        CFRelease(v28);
    }
    *(_QWORD *)(a1 + 624) = 0;
    if ((*(_BYTE *)(a1 + 616) & 1) != 0)
    {
      v29 = *(const void **)(a1 + 608);
      if (v29)
        _Block_release(v29);
    }
    *(_QWORD *)(a1 + 608) = 0;
    if ((*(_BYTE *)(a1 + 600) & 1) != 0)
    {
      v30 = *(void **)(a1 + 592);
      if (v30)
        os_release(v30);
    }
    *(_QWORD *)(a1 + 592) = 0;
    if ((*(_BYTE *)(a1 + 584) & 1) != 0)
    {
      v31 = *(void **)(a1 + 576);
      if (v31)
        os_release(v31);
    }
    *(_QWORD *)(a1 + 576) = 0;
    if ((*(_BYTE *)(a1 + 568) & 1) != 0)
    {
      v32 = *(void **)(a1 + 560);
      if (v32)
        os_release(v32);
    }
    *(_QWORD *)(a1 + 560) = 0;
    nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(a1 + 344));
    if ((*(_BYTE *)(a1 + 288) & 1) != 0)
    {
      v33 = *(void **)(a1 + 280);
      if (v33)
        os_release(v33);
    }
    *(_QWORD *)(a1 + 280) = 0;
    if ((*(_BYTE *)(a1 + 272) & 1) != 0)
    {
      v34 = *(void **)(a1 + 264);
      if (v34)
        os_release(v34);
    }
    *(_QWORD *)(a1 + 264) = 0;
    if ((*(_BYTE *)(a1 + 256) & 1) != 0)
    {
      v35 = *(void **)(a1 + 248);
      if (v35)
        os_release(v35);
    }
    free((void *)a1);
  }
}

void ___ZL30nw_http_authentication_reissueP11nw_protocol_block_invoke_4(uint64_t a1, nw_content_context_t context)
{
  nw_content_context_set_metadata_for_protocol(context, *(nw_protocol_metadata_t *)(*(_QWORD *)(a1 + 32) + 592));
}

uint64_t __Block_byref_object_copy__88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__89(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void nw_http_authentication_apply_appsso_headers(const __CFString *a1, const void *a2, _QWORD *a3)
{
  uint64_t v3;
  __CFDictionary *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  _QWORD v15[6];
  char v16;
  os_log_type_t v17;
  _BYTE buf[24];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
    v7 = (char *)_os_log_send_and_compose_impl();
    v17 = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v7, &v17, &v16))
      goto LABEL_38;
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v17;
      if (!os_log_type_enabled(v8, v17))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
      v10 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = v17;
      v12 = os_log_type_enabled(v8, v17);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v7)
          return;
LABEL_39:
        free(v7);
        return;
      }
      if (!v12)
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = v17;
      if (!os_log_type_enabled(v8, v17))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }
  v3 = a3[5];
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v19 = *(_QWORD *)(v3 + 944);
    if (CFStringCompare(a1, CFSTR("Set-Cookie"), 1uLL))
    {
      if (*(int *)(v3 + 1040) >= 4)
      {
        v6 = *(__CFDictionary **)(v3 + 736);
        if (v6)
          CFDictionaryAddValue(v6, a1, a2);
      }
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = ___ZL43nw_http_authentication_apply_appsso_headersPKvS0_Pv_block_invoke;
      v15[3] = &unk_1E149C0C8;
      v15[4] = buf;
      v15[5] = a2;
      nw_utilities_get_c_string_from_cfstring(a1, 0x201u, v15);
    }
    _Block_object_dispose(buf, 8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
  v7 = (char *)_os_log_send_and_compose_impl();
  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v7, &v17, &v16))
    goto LABEL_38;
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    v8 = __nwlog_obj();
    v9 = v17;
    if (!os_log_type_enabled(v8, v17))
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
    v10 = "%{public}s called with null http_authentication";
    goto LABEL_37;
  }
  if (!v16)
  {
    v8 = __nwlog_obj();
    v9 = v17;
    if (!os_log_type_enabled(v8, v17))
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
    v10 = "%{public}s called with null http_authentication, backtrace limit exceeded";
    goto LABEL_37;
  }
  v13 = (char *)__nw_create_backtrace_string();
  v8 = __nwlog_obj();
  v9 = v17;
  v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14)
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
    v10 = "%{public}s called with null http_authentication, no backtrace";
    goto LABEL_37;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http_authentication_apply_appsso_headers";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v13;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7)
    goto LABEL_39;
}

uint64_t __Block_byref_object_copy__90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__91(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _CFHTTPAuthentication *http_authentication;
  int v6;
  const __CFString *NegotiateHeaderForRequest;
  char v8;
  _BOOL4 v9;
  id v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  char v15;
  void *v16;
  const __CFString *v17;
  char v18;
  void *v19;
  uint64_t v20;
  char v21;
  void *v22;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *backtrace_string;
  _BOOL4 v30;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  char *v36;
  _BOOL4 v37;
  void *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  _BOOL4 v44;
  _QWORD v45[5];
  char v46;
  char v47;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  http_authentication = (_CFHTTPAuthentication *)nw_authentication_credential_cache_entry_get_http_authentication((void *)a3);
  if (CFHTTPAuthenticationIsValid(http_authentication, 0)
    && CFHTTPAuthenticationAppliesToRequest(http_authentication, *(CFHTTPMessageRef *)(*(_QWORD *)(a1[4] + 8) + 40)))
  {
    if (a3)
    {
      v6 = *(_DWORD *)(a3 + 24);
      if (v6 == 4)
      {
        NegotiateHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNegotiateHeaderForRequest();
        if (!NegotiateHeaderForRequest)
          goto LABEL_34;
LABEL_33:
        CFRelease(NegotiateHeaderForRequest);
        goto LABEL_34;
      }
      v8 = *(_BYTE *)(a3 + 28);
      v9 = v8 != 0;
      v10 = *(id *)(a3 + 16);
LABEL_8:
      if (!nw_http_authentication_apply_credentials(*(__CFHTTPMessage **)(*(_QWORD *)(a1[4] + 8) + 40), http_authentication, v10))
      {
        if (v10)
          os_release(v10);
        goto LABEL_34;
      }
      if (v6 == 5)
      {
        NegotiateHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNTLMHeaderForRequest();
        v11 = a1[6];
        if (!v9)
        {
LABEL_11:
          v12 = *(_BYTE *)(v11 + 856);
          if ((v12 & 1) != 0)
          {
            v13 = *(void **)(v11 + 848);
            if (v13)
            {
              os_release(v13);
              v12 = *(_BYTE *)(v11 + 856);
            }
          }
          *(_QWORD *)(v11 + 848) = http_authentication;
          *(_BYTE *)(v11 + 856) = v12 | 1;
          v14 = a1[6];
          v15 = *(_BYTE *)(v14 + 664);
          if ((v15 & 1) != 0)
          {
            v16 = *(void **)(v14 + 656);
            if (v16)
            {
              os_release(v16);
              v15 = *(_BYTE *)(v14 + 664);
            }
          }
          *(_QWORD *)(v14 + 656) = v10;
          *(_BYTE *)(v14 + 664) = v15 | 1;
          *(_DWORD *)(a1[6] + 1044) = v6;
LABEL_31:
          if (!NegotiateHeaderForRequest)
            return 1;
          v45[0] = MEMORY[0x1E0C809B0];
          v45[1] = 0x40000000;
          v45[2] = ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke_2;
          v45[3] = &unk_1E149C110;
          v45[4] = a1[5];
          v46 = v8;
          nw_utilities_get_c_string_from_cfstring(NegotiateHeaderForRequest, 0x201u, v45);
          http_authentication = 0;
          goto LABEL_33;
        }
      }
      else
      {
        if (v9)
          v17 = CFSTR("Proxy-Authorization");
        else
          v17 = CFSTR("Authorization");
        NegotiateHeaderForRequest = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)(*(_QWORD *)(a1[4] + 8) + 40), v17);
        *(_WORD *)(a1[6] + 1062) |= 0x200u;
        v11 = a1[6];
        if (!v9)
          goto LABEL_11;
      }
      v18 = *(_BYTE *)(v11 + 872);
      if ((v18 & 1) != 0)
      {
        v19 = *(void **)(v11 + 864);
        if (v19)
        {
          os_release(v19);
          v18 = *(_BYTE *)(v11 + 872);
        }
      }
      *(_QWORD *)(v11 + 864) = http_authentication;
      *(_BYTE *)(v11 + 872) = v18 | 1;
      v20 = a1[6];
      v21 = *(_BYTE *)(v20 + 680);
      if ((v21 & 1) != 0)
      {
        v22 = *(void **)(v20 + 672);
        if (v22)
        {
          os_release(v22);
          v21 = *(_BYTE *)(v20 + 680);
        }
      }
      *(_QWORD *)(v20 + 672) = v10;
      *(_BYTE *)(v20 + 680) = v21 | 1;
      *(_DWORD *)(a1[6] + 1048) = v6;
      goto LABEL_31;
    }
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
    v25 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (__nwlog_fault(v25, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
          v28 = "%{public}s called with null cache_entry";
LABEL_50:
          _os_log_impl(&dword_182FBE000, v26, v27, v28, buf, 0xCu);
          goto LABEL_51;
        }
        goto LABEL_51;
      }
      if (!v47)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
          v28 = "%{public}s called with null cache_entry, backtrace limit exceeded";
          goto LABEL_50;
        }
LABEL_51:

        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v30 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
          v28 = "%{public}s called with null cache_entry, no backtrace";
          goto LABEL_50;
        }
        goto LABEL_51;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_authentication_credential_cache_entry_get_for_proxy";
        v51 = 2082;
        v52 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_52:
    if (v25)
      free(v25);
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_authentication_credential_cache_entry_get_type";
    v32 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (__nwlog_fault(v32, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_authentication_credential_cache_entry_get_type";
          v35 = "%{public}s called with null cache_entry";
LABEL_67:
          _os_log_impl(&dword_182FBE000, v33, v34, v35, buf, 0xCu);
          goto LABEL_68;
        }
        goto LABEL_68;
      }
      if (!v47)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_authentication_credential_cache_entry_get_type";
          v35 = "%{public}s called with null cache_entry, backtrace limit exceeded";
          goto LABEL_67;
        }
LABEL_68:

        goto LABEL_69;
      }
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      v37 = os_log_type_enabled(v33, type);
      if (!v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_authentication_credential_cache_entry_get_type";
          v35 = "%{public}s called with null cache_entry, no backtrace";
          goto LABEL_67;
        }
        goto LABEL_68;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_authentication_credential_cache_entry_get_type";
        v51 = 2082;
        v52 = v36;
        _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v36);
    }
LABEL_69:
    if (v32)
      free(v32);
    __nwlog_obj();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_authentication_credential_cache_entry_get_credential";
    v39 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v39, &type, &v47))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_authentication_credential_cache_entry_get_credential";
        v42 = "%{public}s called with null cache_entry";
LABEL_84:
        _os_log_impl(&dword_182FBE000, v40, v41, v42, buf, 0xCu);
      }
    }
    else if (v47)
    {
      v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      v44 = os_log_type_enabled(v40, type);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "nw_authentication_credential_cache_entry_get_credential";
          v51 = 2082;
          v52 = v43;
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_86;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_authentication_credential_cache_entry_get_credential";
        v42 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_authentication_credential_cache_entry_get_credential";
        v42 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_84;
      }
    }

LABEL_86:
    if (v39)
      free(v39);
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v10 = 0;
    goto LABEL_8;
  }
LABEL_34:
  if (http_authentication)
    os_release(http_authentication);
  return 1;
}

BOOL nw_http_authentication_apply_credentials(__CFHTTPMessage *a1, _CFHTTPAuthentication *a2, void *a3)
{
  uint64_t username;
  uint64_t password;
  const __CFAllocator *v8;
  const char *v9;
  const __CFString *v10;
  const char *v11;
  const __CFString *v12;
  int v13;
  NSObject *v14;
  CFStreamError v16;
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  username = nw_authentication_credential_get_username(a3);
  password = nw_authentication_credential_get_password(a3);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (username)
    v9 = (const char *)username;
  else
    v9 = "";
  v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, 0x8000100u);
  if (password)
    v11 = (const char *)password;
  else
    v11 = "";
  v12 = CFStringCreateWithCString(v8, v11, 0x8000100u);
  v16.domain = 0;
  *(_QWORD *)&v16.error = 0;
  v13 = CFHTTPMessageApplyCredentials(a1, a2, v10, v12, &v16);
  if (!v13)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "nw_http_authentication_apply_credentials";
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s CFHTTPMessageApplyCredentials() failed", buf, 0xCu);
    }
  }
  if (v12)
    CFRelease(v12);
  if (v10)
    CFRelease(v10);
  return v13 != 0;
}

void ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke_2(uint64_t a1, char *a2)
{
  const char *v3;

  if (*(_BYTE *)(a1 + 40))
    v3 = "Proxy-Authorization";
  else
    v3 = "Authorization";
  nw_http_fields_append_advanced(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (unint64_t)v3, -1, a2, 0xFFFFFFFFFFFFFFFFLL, &__block_literal_global_94);
}

uint64_t ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return nw_http_field_set_indexing_strategy(a2, 1u);
}

void ___ZL43nw_http_authentication_apply_appsso_headersPKvS0_Pv_block_invoke(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZL43nw_http_authentication_apply_appsso_headersPKvS0_Pv_block_invoke_2;
  v3[3] = &unk_1E149C0A0;
  v2 = *(const __CFString **)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = a2;
  nw_utilities_get_c_string_from_cfstring(v2, 0x201u, v3);
}

void ___ZL43nw_http_authentication_apply_appsso_headersPKvS0_Pv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  nw_http_fields_append(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_QWORD *)(a1 + 40), a2);
}

void nw_protocol_http_authentication_create::$_0::operator()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  id v7;
  void *v8;
  char v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  const char *v14;
  id v15;
  int have_field_with_name;
  _BOOL8 v17;
  char v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *backtrace_string;
  _BOOL4 v25;
  char *v26;
  _BOOL4 v27;
  const char *v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  const char *v39;
  NSObject *v40;
  char *v41;
  _BOOL4 v42;
  char *v43;
  _BOOL4 v44;
  uint64_t v45;
  os_log_type_t type[8];
  int buf;
  const char *buf_4;
  __int16 v49;
  char *v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    buf = 136446210;
    buf_4 = "operator()";
    v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45))
      goto LABEL_97;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type[0];
      if (!os_log_type_enabled(v21, type[0]))
        goto LABEL_97;
      buf = 136446210;
      buf_4 = "operator()";
      v23 = "%{public}s called with null protocol";
    }
    else if ((_BYTE)v45)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type[0];
      v25 = os_log_type_enabled(v21, type[0]);
      if (backtrace_string)
      {
        if (v25)
        {
          buf = 136446466;
          buf_4 = "operator()";
          v49 = 2082;
          v50 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null protocol, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(backtrace_string);
LABEL_97:
        if (!v20)
          return;
        goto LABEL_98;
      }
      if (!v25)
        goto LABEL_97;
      buf = 136446210;
      buf_4 = "operator()";
      v23 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v21 = __nwlog_obj();
      v22 = type[0];
      if (!os_log_type_enabled(v21, type[0]))
        goto LABEL_97;
      buf = 136446210;
      buf_4 = "operator()";
      v23 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_96;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
  {
    __nwlog_obj();
    buf = 136446210;
    buf_4 = "operator()";
    v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45))
      goto LABEL_97;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v45)
      {
        v21 = __nwlog_obj();
        v22 = type[0];
        if (!os_log_type_enabled(v21, type[0]))
          goto LABEL_97;
        buf = 136446210;
        buf_4 = "operator()";
        v23 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_96;
      }
      v26 = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type[0];
      v27 = os_log_type_enabled(v21, type[0]);
      if (!v26)
      {
        if (!v27)
          goto LABEL_97;
        buf = 136446210;
        buf_4 = "operator()";
        v23 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_96;
      }
      if (!v27)
        goto LABEL_74;
      buf = 136446466;
      buf_4 = "operator()";
      v49 = 2082;
      v50 = v26;
      v28 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    v21 = __nwlog_obj();
    v22 = type[0];
    if (!os_log_type_enabled(v21, type[0]))
      goto LABEL_97;
    buf = 136446210;
    buf_4 = "operator()";
    v23 = "%{public}s called with null http_authentication";
LABEL_96:
    _os_log_impl(&dword_182FBE000, v21, v22, v23, (uint8_t *)&buf, 0xCu);
    goto LABEL_97;
  }
  if (!a2)
  {
    __nwlog_obj();
    buf = 136446210;
    buf_4 = "operator()";
    v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45))
      goto LABEL_97;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v45)
      {
        v21 = __nwlog_obj();
        v22 = type[0];
        if (!os_log_type_enabled(v21, type[0]))
          goto LABEL_97;
        buf = 136446210;
        buf_4 = "operator()";
        v23 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_96;
      }
      v26 = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type[0];
      v29 = os_log_type_enabled(v21, type[0]);
      if (!v26)
      {
        if (!v29)
          goto LABEL_97;
        buf = 136446210;
        buf_4 = "operator()";
        v23 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_96;
      }
      if (!v29)
        goto LABEL_74;
      buf = 136446466;
      buf_4 = "operator()";
      v49 = 2082;
      v50 = v26;
      v28 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    v21 = __nwlog_obj();
    v22 = type[0];
    if (!os_log_type_enabled(v21, type[0]))
      goto LABEL_97;
    buf = 136446210;
    buf_4 = "operator()";
    v23 = "%{public}s called with null other_protocol";
    goto LABEL_96;
  }
  if (!a3)
  {
    __nwlog_obj();
    buf = 136446210;
    buf_4 = "operator()";
    v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45))
      goto LABEL_97;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type[0];
      if (!os_log_type_enabled(v21, type[0]))
        goto LABEL_97;
      buf = 136446210;
      buf_4 = "operator()";
      v23 = "%{public}s called with null metadata";
      goto LABEL_96;
    }
    if (!(_BYTE)v45)
    {
      v21 = __nwlog_obj();
      v22 = type[0];
      if (!os_log_type_enabled(v21, type[0]))
        goto LABEL_97;
      buf = 136446210;
      buf_4 = "operator()";
      v23 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_96;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type[0];
    v30 = os_log_type_enabled(v21, type[0]);
    if (!v26)
    {
      if (!v30)
        goto LABEL_97;
      buf = 136446210;
      buf_4 = "operator()";
      v23 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_96;
    }
    if (!v30)
      goto LABEL_74;
    buf = 136446466;
    buf_4 = "operator()";
    v49 = 2082;
    v50 = v26;
    v28 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_73:
    _os_log_impl(&dword_182FBE000, v21, v22, v28, (uint8_t *)&buf, 0x16u);
    goto LABEL_74;
  }
  if (!a4)
  {
    __nwlog_obj();
    buf = 136446210;
    buf_4 = "operator()";
    v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v20, type, &v45))
      goto LABEL_97;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type[0];
      if (!os_log_type_enabled(v21, type[0]))
        goto LABEL_97;
      buf = 136446210;
      buf_4 = "operator()";
      v23 = "%{public}s called with null completion";
      goto LABEL_96;
    }
    if (!(_BYTE)v45)
    {
      v21 = __nwlog_obj();
      v22 = type[0];
      if (!os_log_type_enabled(v21, type[0]))
        goto LABEL_97;
      buf = 136446210;
      buf_4 = "operator()";
      v23 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_96;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type[0];
    v31 = os_log_type_enabled(v21, type[0]);
    if (!v26)
    {
      if (!v31)
        goto LABEL_97;
      buf = 136446210;
      buf_4 = "operator()";
      v23 = "%{public}s called with null completion, no backtrace";
      goto LABEL_96;
    }
    if (v31)
    {
      buf = 136446466;
      buf_4 = "operator()";
      v49 = 2082;
      v50 = v26;
      v28 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
LABEL_74:
    free(v26);
    if (!v20)
      return;
LABEL_98:
    free(v20);
    return;
  }
  v7 = nw_http_metadata_copy_response(a3);
  if ((nw_http_response_get_status_code(v7) - 200) > 0xC7 || !*(_QWORD *)(v4 + 848))
    goto LABEL_26;
  v8 = os_retain(a3);
  v9 = *(_BYTE *)(v4 + 568);
  if ((v9 & 1) != 0)
  {
    v10 = *(void **)(v4 + 560);
    if (v10)
    {
      os_release(v10);
      v9 = *(_BYTE *)(v4 + 568);
    }
  }
  *(_QWORD *)(v4 + 560) = v8;
  *(_BYTE *)(v4 + 568) = v9 | 1;
  v11 = nw_http_metadata_copy_request(*(void **)(v4 + 576));
  v12 = nw_http_metadata_copy_response(*(void **)(v4 + 560));
  v13 = v12;
  if (!v11)
  {
    __nwlog_obj();
    buf = 136446210;
    buf_4 = "nw_http_authentication_process_success";
    v32 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v32, type, &v45))
      goto LABEL_126;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v33 = __nwlog_obj();
      v34 = type[0];
      if (!os_log_type_enabled(v33, type[0]))
        goto LABEL_126;
      buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      v35 = "%{public}s called with null request";
    }
    else if ((_BYTE)v45)
    {
      v41 = (char *)__nw_create_backtrace_string();
      v33 = __nwlog_obj();
      v34 = type[0];
      v42 = os_log_type_enabled(v33, type[0]);
      if (v41)
      {
        if (v42)
        {
          buf = 136446466;
          buf_4 = "nw_http_authentication_process_success";
          v49 = 2082;
          v50 = v41;
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null request, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(v41);
LABEL_126:
        if (v32)
          free(v32);
        if (!v13)
          goto LABEL_26;
        goto LABEL_25;
      }
      if (!v42)
        goto LABEL_126;
      buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      v35 = "%{public}s called with null request, no backtrace";
    }
    else
    {
      v33 = __nwlog_obj();
      v34 = type[0];
      if (!os_log_type_enabled(v33, type[0]))
        goto LABEL_126;
      buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      v35 = "%{public}s called with null request, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v33, v34, v35, (uint8_t *)&buf, 0xCu);
    goto LABEL_126;
  }
  if (!v12)
  {
    __nwlog_obj();
    buf = 136446210;
    buf_4 = "nw_http_authentication_process_success";
    v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v45) = 0;
    if (!__nwlog_fault(v36, type, &v45))
      goto LABEL_133;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v37 = __nwlog_obj();
      v38 = type[0];
      if (!os_log_type_enabled(v37, type[0]))
        goto LABEL_133;
      buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      v39 = "%{public}s called with null response";
    }
    else if ((_BYTE)v45)
    {
      v43 = (char *)__nw_create_backtrace_string();
      v37 = __nwlog_obj();
      v38 = type[0];
      v44 = os_log_type_enabled(v37, type[0]);
      if (v43)
      {
        if (v44)
        {
          buf = 136446466;
          buf_4 = "nw_http_authentication_process_success";
          v49 = 2082;
          v50 = v43;
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null response, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(v43);
        goto LABEL_133;
      }
      if (!v44)
      {
LABEL_133:
        if (v36)
          free(v36);
        goto LABEL_24;
      }
      buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      v39 = "%{public}s called with null response, no backtrace";
    }
    else
    {
      v37 = __nwlog_obj();
      v38 = type[0];
      if (!os_log_type_enabled(v37, type[0]))
        goto LABEL_133;
      buf = 136446210;
      buf_4 = "nw_http_authentication_process_success";
      v39 = "%{public}s called with null response, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v37, v38, v39, (uint8_t *)&buf, 0xCu);
    goto LABEL_133;
  }
  if ((*(_BYTE *)(v4 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v40 = __nwlog_obj();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        buf = 136446722;
        buf_4 = "nw_http_authentication_process_success";
        v49 = 2082;
        v50 = (char *)(v4 + 114);
        v51 = 2080;
        v52 = " ";
        _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&buf, 0x20u);
      }
    }
  }
  if ((*(_WORD *)(v4 + 1062) & 0x10) != 0)
    v14 = "Proxy-Authentication-Info";
  else
    v14 = "Authentication-Info";
  v15 = v13;
  have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v15, (unint64_t)v14);

  if (have_field_with_name)
  {
    v17 = nw_http_response_copy_url_response(v15, v11, 0, **((void ***)&unk_1E14AD298 + *(int *)(v4 + 1040)));
    CFURLResponseGetHTTPResponse();
    _CFHTTPAuthenticationUpdateFromResponse();
    if (v17)
      os_release((void *)v17);
  }
  if (*(_QWORD *)(v4 + 976))
    _CFHTTPAuthenticationClearAccountRefreshState();
  os_release(v15);
LABEL_24:
  v13 = v11;
LABEL_25:
  os_release(v13);
LABEL_26:
  v18 = *(_BYTE *)(v4 + 568);
  if ((v18 & 1) != 0)
  {
    v19 = *(void **)(v4 + 560);
    if (v19)
    {
      os_release(v19);
      v18 = *(_BYTE *)(v4 + 568);
    }
  }
  *(_QWORD *)(v4 + 560) = 0;
  *(_BYTE *)(v4 + 568) = v18 | 1;
  (*(void (**)(uint64_t, uint64_t, void *))(a4 + 16))(a4, 1, a3);
  if (v7)
    os_release(v7);
}

void *nw_http_authentication_copy_protocol_metadata(nw_protocol *a1)
{
  unsigned __int8 *v1;
  void *v2;
  void *v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  void *object;
  char v12;

  v1 = (unsigned __int8 *)nw_protocol_copy_info((uint64_t)a1->output_handler, 255);
  v6 = 0;
  v7 = &v6;
  v8 = 0x3802000000;
  v9 = __Block_byref_object_copy__14076;
  v10 = __Block_byref_object_dispose__14077;
  object = 0;
  v12 = -1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZL45nw_http_authentication_copy_protocol_metadataP11nw_protocol_block_invoke;
  v5[3] = &unk_1E149BDB8;
  v5[4] = &v6;
  nw_array_apply(v1, (uint64_t)v5);
  v2 = (void *)v7[5];
  if (v2)
    v3 = os_retain(v2);
  else
    v3 = 0;
  _Block_object_dispose(&v6, 8);
  if ((v12 & 1) != 0 && object)
    os_release(object);
  if (v1)
    os_release(v1);
  return v3;
}

void ___ZL40nw_http_authentication_process_challengeP11nw_protocol_block_invoke(uint64_t a1, void *object, int a3, int a4)
{
  void *v8;
  uint64_t v9;
  char v10;
  void *v11;
  char v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v16 = __nwlog_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v17 = *(_QWORD *)(a1 + 32) + 114;
        v18 = 136447234;
        v19 = "nw_http_authentication_process_challenge_block_invoke";
        v20 = 2082;
        v21 = v17;
        v22 = 2080;
        v23 = " ";
        v24 = 2048;
        v25 = object;
        v26 = 1024;
        v27 = a3;
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreturned from nw_http_authentication_process_response, new_outbound_metadata %p, cancel %d", (uint8_t *)&v18, 0x30u);
      }
    }
  }
  if (object)
    v8 = os_retain(object);
  else
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(v9 + 600);
  if ((v10 & 1) != 0)
  {
    v11 = *(void **)(v9 + 592);
    if (v11)
    {
      os_release(v11);
      v10 = *(_BYTE *)(v9 + 600);
    }
  }
  *(_QWORD *)(v9 + 592) = v8;
  *(_BYTE *)(v9 + 600) = v10 | 1;
  if (a3)
  {
    nw_protocol_plugin_metadata_resume_input(*(_QWORD *)(a1 + 32) + 200, 1);
    nw_protocol_input_available(*(_QWORD **)(*(_QWORD *)(a1 + 40) + 48), *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (a4)
      v12 = 1;
    else
      v12 = 2;
    v13 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(v13 + 1060) = v12;
    *(_WORD *)(v13 + 1062) |= 0x40u;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 1062) & 4) == 0)
    {
      v14 = nw_http_metadata_copy_request(object);
      nw_http_fields_remove_by_name(v14, (uint64_t)"Cookie");
      if (v14)
        os_release(v14);
    }
    nw_protocol_plugin_metadata_prepare_for_reissue(*(_QWORD *)(a1 + 32) + 200);
    v15 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v15 + 1060) != 1)
      nw_http_authentication_reissue((nw_protocol *)v15);
  }
}

uint64_t nw_http_authentication_handle_challenge(uint64_t a1, _CFHTTPAuthentication *a2, void *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v13;
  uint64_t v14;
  const __CFString *NTLMHeaderForRequest;
  const __CFString *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  const char *v24;
  void **v25;
  char *v26;
  char v27;
  char v28;
  void *v29;
  uint64_t v30;
  char v31;
  void *v32;
  NSObject *v33;
  _CFHTTPAuthentication *v34;
  char v35;
  int v36;
  int v37;
  uint64_t v38;
  void *v39;
  void *object_at_index;
  int v41;
  NWConcrete_nw_authentication_challenge *v42;
  char v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  NSObject *v53;
  void *parameters;
  id v55;
  id *v56;
  id v57;
  NSObject *v58;
  int v59;
  NSObject *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  NSObject *v65;
  os_log_type_t v66;
  const char *v67;
  void *v68;
  _DWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _BOOL4 v74;
  uint64_t v75;
  NSObject *v76;
  void *v77;
  const char *v78;
  const __CFAllocator *v79;
  const __CFString *v80;
  CFURLRef v81;
  char v82;
  const void *v83;
  char v84;
  NSObject *v85;
  NSObject *v86;
  NSObject *v87;
  NSObject *v88;
  char v89;
  void *v90;
  void *v91;
  CFHTTPAuthenticationRef v93;
  char v94;
  char v95;
  void *v96;
  _CFHTTPAuthentication *v97;
  uint64_t v98;
  int v99;
  void *v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  const char *v104;
  char *backtrace_string;
  _BOOL4 v106;
  const char *v107;
  _BOOL4 v108;
  char *v109;
  _BOOL4 v110;
  char *v111;
  NSObject *v112;
  os_log_type_t v113;
  const char *v114;
  char *v115;
  _BOOL4 v116;
  const __CFAllocator *v117;
  char v118;
  uint64_t v119;
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[5];
  char v123;
  os_log_type_t type;
  _BYTE buf[24];
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint8_t v130[4];
  const char *v131;
  __int16 v132;
  char *v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
    v101 = (char *)_os_log_send_and_compose_impl();
    v130[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v101, v130, &type))
      goto LABEL_192;
    if (v130[0] == 17)
    {
      v102 = __nwlog_obj();
      v103 = v130[0];
      if (os_log_type_enabled(v102, (os_log_type_t)v130[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
        v104 = "%{public}s called with null protocol";
LABEL_191:
        _os_log_impl(&dword_182FBE000, v102, v103, v104, buf, 0xCu);
      }
LABEL_192:
      if (v101)
        free(v101);
      return 1;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v102 = __nwlog_obj();
      v103 = v130[0];
      if (os_log_type_enabled(v102, (os_log_type_t)v130[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
        v104 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_191;
      }
      goto LABEL_192;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v102 = __nwlog_obj();
    v103 = v130[0];
    v106 = os_log_type_enabled(v102, (os_log_type_t)v130[0]);
    if (!backtrace_string)
    {
      if (v106)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
        v104 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_191;
      }
      goto LABEL_192;
    }
    if (v106)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v107 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_172:
      _os_log_impl(&dword_182FBE000, v102, v103, v107, buf, 0x16u);
    }
LABEL_173:
    free(backtrace_string);
    goto LABEL_192;
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
    v101 = (char *)_os_log_send_and_compose_impl();
    v130[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v101, v130, &type))
      goto LABEL_192;
    if (v130[0] == 17)
    {
      v102 = __nwlog_obj();
      v103 = v130[0];
      if (os_log_type_enabled(v102, (os_log_type_t)v130[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
        v104 = "%{public}s called with null http_authentication";
        goto LABEL_191;
      }
      goto LABEL_192;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v102 = __nwlog_obj();
      v103 = v130[0];
      if (os_log_type_enabled(v102, (os_log_type_t)v130[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
        v104 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_191;
      }
      goto LABEL_192;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v102 = __nwlog_obj();
    v103 = v130[0];
    v108 = os_log_type_enabled(v102, (os_log_type_t)v130[0]);
    if (!backtrace_string)
    {
      if (v108)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
        v104 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_191;
      }
      goto LABEL_192;
    }
    if (v108)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v107 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    goto LABEL_173;
  }
  if (!a2)
    goto LABEL_29;
  _CFHTTPAuthenticationUpdateFromResponse();
  if (!CFHTTPAuthenticationIsValid(a2, 0))
  {
    if (a3)
    {
      if (*(_QWORD *)(v7 + 640))
      {
        v20 = a3;
        v21 = v20[2];

        if (v21)
        {
          if (*(_QWORD *)(v7 + 688))
          {
            v22 = -[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
            v23 = v20;
            v24 = (const char *)v20[2];

            nw_authentication_credential_set_username(v22, v24);
            nw_authentication_credential_set_persistence(v22, 1);
            nw_authentication_credential_storage_set_default_credential(*(void **)(v7 + 688), *(void **)(v7 + 640), v22);
            if (v22)
              os_release(v22);
          }
        }
      }
    }
    if (a4 != 5)
      nw_array_remove_objects(*(_QWORD *)(v7 + 704), (uint64_t)&__block_literal_global_29);
    if ((*(_WORD *)(v7 + 1062) & 0x10) != 0)
    {
      v25 = (void **)(v7 + 864);
      v26 = (char *)(v7 + 872);
      v27 = *(_BYTE *)(v7 + 872);
      if ((v27 & 1) == 0)
        goto LABEL_25;
    }
    else
    {
      v25 = (void **)(v7 + 848);
      v26 = (char *)(v7 + 856);
      v27 = *(_BYTE *)(v7 + 856);
      if ((v27 & 1) == 0)
      {
LABEL_25:
        *v25 = 0;
        *v26 = v27 | 1;
        v28 = *(_BYTE *)(v7 + 648);
        if ((v28 & 1) != 0)
        {
          v29 = *(void **)(v7 + 640);
          if (v29)
          {
            os_release(v29);
            v28 = *(_BYTE *)(v7 + 648);
          }
        }
        *(_QWORD *)(v7 + 640) = 0;
        *(_BYTE *)(v7 + 648) = v28 | 1;
        goto LABEL_29;
      }
    }
    if (*v25)
    {
      os_release(*v25);
      v27 = *v26;
    }
    goto LABEL_25;
  }
  if (a3)
  {
    if (a4 == 5)
    {
      v13 = a3;
      v14 = v13[2];

      if (v14)
      {
        if (nw_http_authentication_apply_credentials(*(__CFHTTPMessage **)(v7 + 912), a2, v13))
        {
          NTLMHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNTLMHeaderForRequest();
          if (NTLMHeaderForRequest)
          {
            v16 = NTLMHeaderForRequest;
            v17 = MEMORY[0x1E0C809B0];
            v122[0] = MEMORY[0x1E0C809B0];
            v122[1] = 0x40000000;
            v122[2] = ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_30;
            v122[3] = &__block_descriptor_tmp_31;
            v122[4] = v7;
            nw_utilities_get_c_string_from_cfstring(NTLMHeaderForRequest, 0x201u, v122);
            nw_protocol_plugin_retry_begin_async(v7 + 344);
            v18 = *(void **)(v7 + 832);
            v121[0] = v17;
            v121[1] = 0x40000000;
            v121[2] = ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2;
            v121[3] = &unk_1E149BE20;
            v121[4] = a6;
            v121[5] = v7;
            nw_queue_context_async(v18, v121);
            CFRelease(v16);
            return 2;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v86 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
              _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_ERROR, "%{public}s Unable to find authorization", buf, 0xCu);
            }
            v19 = 1;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a6 + 16))(a6, 0, 1, 1);
          }
          return v19;
        }
LABEL_119:
        v19 = 1;
        (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a6 + 16))(a6, 0, 1, 0);
        return v19;
      }
    }
  }
LABEL_29:
  if ((*(_WORD *)(v7 + 1062) & 0x10) != 0)
  {
    v50 = *(_QWORD *)(a1 + 40);
    if (!v50)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
      v63 = (char *)_os_log_send_and_compose_impl();
      v130[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v63, v130, &type))
      {
        if (v130[0] == 17)
        {
          v65 = __nwlog_obj();
          v66 = v130[0];
          if (os_log_type_enabled(v65, (os_log_type_t)v130[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s called with null http_authentication";
            goto LABEL_105;
          }
        }
        else if (type)
        {
          v109 = (char *)__nw_create_backtrace_string();
          v65 = __nwlog_obj();
          v66 = v130[0];
          v110 = os_log_type_enabled(v65, (os_log_type_t)v130[0]);
          if (v109)
          {
            if (v110)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v109;
              _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v109);
          }
          else if (v110)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s called with null http_authentication, no backtrace";
            goto LABEL_105;
          }
        }
        else
        {
          v65 = __nwlog_obj();
          v66 = v130[0];
          if (os_log_type_enabled(v65, (os_log_type_t)v130[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s called with null http_authentication, backtrace limit exceeded";
            goto LABEL_105;
          }
        }
      }
      goto LABEL_106;
    }
    v118 = a5;
    v119 = a6;
    v51 = *(_QWORD *)(a1 + 40);
    while (1)
    {
      v52 = *(_QWORD **)(v51 + 16);
      if (nw_protocol_http_messaging_identifier::onceToken[0] != -1)
        dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_75867);
      if (nw_protocols_are_equal(v52, nw_protocol_http_messaging_identifier::protocol_identifier))
        break;
      v51 = *(_QWORD *)(v51 + 32);
      if (!v51)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
        v63 = (char *)_os_log_send_and_compose_impl();
        v130[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        v64 = __nwlog_fault(v63, v130, &type);
        a6 = v119;
        if (v64)
        {
          if (v130[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v65 = gLogObj;
            v66 = v130[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130[0]))
              goto LABEL_106;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s could not find http_messaging";
            goto LABEL_105;
          }
          if (type)
          {
            v73 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v65 = gLogObj;
            v66 = v130[0];
            v74 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130[0]);
            if (v73)
            {
              if (v74)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v73;
                _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s could not find http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v73);
              if (!v63)
                goto LABEL_117;
LABEL_107:
              free(v63);
              goto LABEL_117;
            }
            if (!v74)
              goto LABEL_106;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s could not find http_messaging, no backtrace";
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v65 = gLogObj;
            v66 = v130[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130[0]))
              goto LABEL_106;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
            v67 = "%{public}s could not find http_messaging, backtrace limit exceeded";
          }
LABEL_105:
          _os_log_impl(&dword_182FBE000, v65, v66, v67, buf, 0xCu);
        }
LABEL_106:
        if (!v63)
          goto LABEL_117;
        goto LABEL_107;
      }
    }
    parameters = (void *)nw_protocol_get_parameters(v51);
    v55 = nw_parameters_copy_effective_proxy_config(parameters);
    a6 = v119;
    if (!v55)
      goto LABEL_117;
    v56 = (id *)v55;
    v57 = v56[5];

    if (!v57)
    {
LABEL_116:
      os_release(v56);
      goto LABEL_117;
    }
    v58 = v57;
    v59 = -[NSObject type](v58, "type");

    if (v59 == 1)
    {
      v62 = nw_endpoint_copy_address_string(v58);
      v61 = 0;
    }
    else
    {
      if (v59 != 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v85 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v59;
          _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_ERROR, "%{public}s Unsupported endpoint type: %d", buf, 0x12u);
        }
LABEL_115:
        os_release(v58);
        goto LABEL_116;
      }
      v60 = v58;
      v61 = -[NSObject hostname](v60, "hostname");

      v62 = 0;
    }
    v76 = v58;
    *(_QWORD *)buf = 0;
    asprintf((char **)buf, "%d", __rev16(-[NSObject port](v76, "port")));
    v77 = *(void **)buf;

    if (v77)
    {
      v78 = "";
      if (v62)
        v78 = v62;
      if (v61)
        v78 = (const char *)v61;
      v79 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v80 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("http://%s:%s"), v78, v77);
      if (v80)
      {
        v117 = v79;
        v81 = CFURLCreateWithString(v79, v80, 0);
        v82 = *(_BYTE *)(v50 + 904);
        if ((v82 & 1) != 0)
        {
          v83 = *(const void **)(v50 + 896);
          if (v83)
          {
            CFRelease(v83);
            v82 = *(_BYTE *)(v50 + 904);
          }
        }
        *(_QWORD *)(v50 + 896) = v81;
        *(_BYTE *)(v50 + 904) = v82 | 1;
        if (v81)
        {
          _CFHTTPMessageSetResponseProxyURL();
          *(_QWORD *)buf = nw_endpoint_create_with_cfurl(*(const __CFURL **)(v50 + 896));
          nw::retained_ptr<nw_endpoint *>::operator=(v50 + 800, buf);
          v84 = 1;
        }
        else
        {
          v84 = 0;
        }
        v79 = v117;
      }
      else
      {
        v84 = 0;
      }
      if (v62)
        free(v62);
      free(v77);
      if (v80)
        CFRelease(v80);
      os_release(v76);
      os_release(v56);
      a6 = v119;
      if ((v84 & 1) == 0)
      {
LABEL_117:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v88 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
          _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_ERROR, "%{public}s Unable to set proxy URL", buf, 0xCu);
        }
        goto LABEL_119;
      }
      v93 = CFHTTPAuthenticationCreateFromResponse(v79, *(CFHTTPMessageRef *)(v7 + 928));
      v94 = *(_BYTE *)(v7 + 872);
      if ((v94 & 1) != 0)
      {
        v96 = *(void **)(v7 + 864);
        v95 = v118;
        if (v96)
        {
          os_release(v96);
          v94 = *(_BYTE *)(v7 + 872);
        }
      }
      else
      {
        v95 = v118;
      }
      *(_QWORD *)(v7 + 864) = v93;
      *(_BYTE *)(v7 + 872) = v94 | 1;
      v33 = *(NSObject **)(v7 + 800);
      v34 = v93;
      v35 = v95;
      v36 = 1;
      v37 = 1;
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v87 = gLogObj;
    a6 = v119;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_authentication_set_proxy_url";
      _os_log_impl(&dword_182FBE000, v87, OS_LOG_TYPE_ERROR, "%{public}s Cannot connect without port", buf, 0xCu);
    }
    if (v62)
      free(v62);
    goto LABEL_115;
  }
  _CFHTTPAuthenticationCanRecoverFromKerberosFailure();
  v30 = _CFHTTPAuthenticationCreateFromResponseWithFlags();
  v31 = *(_BYTE *)(v7 + 856);
  if ((v31 & 1) != 0)
  {
    v32 = *(void **)(v7 + 848);
    if (v32)
    {
      os_release(v32);
      v31 = *(_BYTE *)(v7 + 856);
    }
  }
  *(_QWORD *)(v7 + 848) = v30;
  *(_BYTE *)(v7 + 856) = v31 | 1;
  v33 = *(NSObject **)(v7 + 784);
  v34 = (_CFHTTPAuthentication *)v30;
  v35 = a5;
  v36 = 0;
  v37 = 0;
LABEL_34:
  v38 = nw_http_authentication_parse_schemes(v34, v33, v35, v36, v37);
  v39 = (void *)v38;
  if (v38 && *(_QWORD *)(v38 + 24) != *(_QWORD *)(v38 + 16))
  {
    object_at_index = (void *)nw_array_get_object_at_index(v38, 0);
    v41 = nw_authentication_protection_space_get_type(object_at_index);
    v42 = objc_alloc_init(NWConcrete_nw_authentication_challenge);
    v43 = *(_BYTE *)(v7 + 648);
    if ((v43 & 1) != 0)
    {
      v44 = *(void **)(v7 + 640);
      if (v44)
      {
        os_release(v44);
        v43 = *(_BYTE *)(v7 + 648);
      }
    }
    *(_QWORD *)(v7 + 640) = v42;
    *(_BYTE *)(v7 + 648) = v43 | 1;
    nw_authentication_challenge_set_protection_space_array(v42, v39);
    nw_authentication_challenge_set_http_message(*(void **)(v7 + 640), *(const void **)(v7 + 928));
    if (a3 && (v45 = a3, v46 = v45[2], v45, v46) && (*(_WORD *)(v7 + 1062) & 0x200) == 0)
    {
      nw_authentication_challenge_set_proposed_credential(*(void **)(v7 + 640), v45);
      if ((*(_WORD *)(v7 + 1062) & 0x10) == 0)
      {
        v47 = *(_BYTE *)(v7 + 664);
        if ((v47 & 1) != 0)
        {
          v48 = *(void **)(v7 + 656);
          if (v48)
          {
            os_release(v48);
            v47 = *(_BYTE *)(v7 + 664);
          }
        }
        *(_QWORD *)(v7 + 656) = 0;
        *(_BYTE *)(v7 + 664) = v47 | 1;
        v49 = *(_WORD *)(v7 + 1062);
        if ((v49 & 0x10) != 0)
          goto LABEL_124;
LABEL_75:
        if (v41 == 8)
        {
          v75 = nw_http_authentication_ask_pat_for_creds(a1, a6);
LABEL_135:
          v19 = v75;
          goto LABEL_136;
        }
        if (v41 != 4)
        {
LABEL_134:
          v75 = nw_http_authentication_send_challenge(a1, a6);
          goto LABEL_135;
        }
        if (!_CFHTTPAuthenticationFailedToGetKerberosTicket())
        {
          if (!*(_DWORD *)(v7 + 1052))
          {
            *(_DWORD *)(v7 + 1052) = 1;
            if ((*(_WORD *)(v7 + 1062) & 0x10) != 0)
            {
              *(_DWORD *)(v7 + 1048) = 4;
              v97 = *(_CFHTTPAuthentication **)(v7 + 864);
              v98 = a1;
              v99 = 1;
            }
            else
            {
              *(_DWORD *)(v7 + 1044) = 4;
              v97 = *(_CFHTTPAuthentication **)(v7 + 848);
              v98 = a1;
              v99 = 0;
            }
            if (nw_http_authentication_apply_authorization(v98, v97, 0, 4, 0, v99, 0, a6))
            {
              nw_protocol_plugin_retry_begin_async(v7 + 344);
              v100 = *(void **)(v7 + 832);
              v120[0] = MEMORY[0x1E0C809B0];
              v120[1] = 0x40000000;
              v120[2] = ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_34;
              v120[3] = &unk_1E149BE48;
              v120[4] = a6;
              v120[5] = v7;
              nw_queue_context_async(v100, v120);
              v19 = 2;
            }
            else
            {
              v19 = 1;
              (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a6 + 16))(a6, 0, 1, 0);
            }
            goto LABEL_136;
          }
          goto LABEL_134;
        }
        v72 = *(_QWORD *)(a1 + 40);
        if (v72)
        {
          nw_protocol_plugin_retry_begin_async(v72 + 344);
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke;
          v126 = &unk_1E149BF48;
          v127 = a6;
          v128 = v72;
          v129 = a1;
          _CFHTTPAuthenticationAskAccountsForCreds();
          v19 = 2;
LABEL_136:
          os_release(v39);
          return v19;
        }
        __nwlog_obj();
        *(_DWORD *)v130 = 136446210;
        v131 = "nw_http_authentication_ask_accounts_for_creds";
        v111 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v123 = 0;
        if (__nwlog_fault(v111, &type, &v123))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v112 = __nwlog_obj();
            v113 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)v130 = 136446210;
              v131 = "nw_http_authentication_ask_accounts_for_creds";
              v114 = "%{public}s called with null http_authentication";
LABEL_212:
              _os_log_impl(&dword_182FBE000, v112, v113, v114, v130, 0xCu);
            }
          }
          else if (v123)
          {
            v115 = (char *)__nw_create_backtrace_string();
            v112 = __nwlog_obj();
            v113 = type;
            v116 = os_log_type_enabled(v112, type);
            if (v115)
            {
              if (v116)
              {
                *(_DWORD *)v130 = 136446466;
                v131 = "nw_http_authentication_ask_accounts_for_creds";
                v132 = 2082;
                v133 = v115;
                _os_log_impl(&dword_182FBE000, v112, v113, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", v130, 0x16u);
              }
              free(v115);
              goto LABEL_213;
            }
            if (v116)
            {
              *(_DWORD *)v130 = 136446210;
              v131 = "nw_http_authentication_ask_accounts_for_creds";
              v114 = "%{public}s called with null http_authentication, no backtrace";
              goto LABEL_212;
            }
          }
          else
          {
            v112 = __nwlog_obj();
            v113 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)v130 = 136446210;
              v131 = "nw_http_authentication_ask_accounts_for_creds";
              v114 = "%{public}s called with null http_authentication, backtrace limit exceeded";
              goto LABEL_212;
            }
          }
        }
LABEL_213:
        if (v111)
          free(v111);
        v19 = 1;
        goto LABEL_136;
      }
      v89 = *(_BYTE *)(v7 + 680);
      if ((v89 & 1) != 0)
      {
        v90 = *(void **)(v7 + 672);
        if (v90)
        {
          os_release(v90);
          v89 = *(_BYTE *)(v7 + 680);
        }
      }
      *(_QWORD *)(v7 + 672) = 0;
      *(_BYTE *)(v7 + 680) = v89 | 1;
      v49 = *(_WORD *)(v7 + 1062);
      if ((v49 & 0x10) == 0)
        goto LABEL_75;
    }
    else
    {
      if (v41 != 4)
      {
        v68 = *(void **)(v7 + 688);
        if (v68)
        {
          v69 = nw_authentication_credential_storage_copy_default_credential(v68, *(void **)(v7 + 640));
          if (v69)
          {
            v70 = v69;
            v71 = v70[3];

            if (v71)
              nw_authentication_challenge_set_proposed_credential(*(void **)(v7 + 640), v70);
            os_release(v70);
          }
        }
      }
      v49 = *(_WORD *)(v7 + 1062);
      if ((v49 & 0x10) == 0)
        goto LABEL_75;
    }
LABEL_124:
    if ((v49 & 0x80) == 0 && v41 != 4 && v41 != 8)
    {
      if (nw_proxy_options_authbroker_is_available::onceToken != -1)
        dispatch_once(&nw_proxy_options_authbroker_is_available::onceToken, &__block_literal_global_35239);
      if (nw_proxy_options_authbroker_is_available::available == 1)
      {
        v91 = (void *)nw_protocol_get_parameters(v7);
        if ((nw_parameters_get_prevents_system_http_proxy_authentication(v91) & 1) == 0)
        {
          v75 = nw_http_authentication_ask_authbroker_for_creds(a1);
          goto LABEL_135;
        }
      }
    }
    goto LABEL_134;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v53 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_handle_challenge";
    _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_ERROR, "%{public}s Unable to determine authentication type", buf, 0xCu);
  }
  v19 = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a6 + 16))(a6, 0, 1, 0);
  if (v39)
    goto LABEL_136;
  return v19;
}

void sub_1834D395C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1834D396C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1834D397C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_http_authentication_apply_authorization(uint64_t a1, _CFHTTPAuthentication *a2, void *a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v17;
  uint64_t v18;
  __int16 v19;
  const __CFString *NegotiateHeaderForRequest;
  _DWORD *v21;
  void *v22;
  BOOL v23;
  NWConcrete_nw_authentication_credential_cache_entry *v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  _BOOL8 result;
  const char *v29;
  __CFHTTPMessage **v30;
  NSObject *v31;
  __CFHTTPMessage *v32;
  const __CFString *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t domain;
  const char *v37;
  char *backtrace_string;
  _BOOL4 v39;
  const char *v40;
  _BOOL4 v41;
  void *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _QWORD v50[5];
  char v51;
  CFStreamError error;
  char v53;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  char *v58;
  __int16 v59;
  const char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_http_authentication_apply_authorization";
    v34 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(error.domain) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v34, &error, &type))
      goto LABEL_75;
    if (LOBYTE(error.domain) != 17)
    {
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v35 = __nwlog_obj();
        domain = error.domain;
        if (!os_log_type_enabled(v35, error.domain))
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        v56 = "nw_http_authentication_apply_authorization";
        v37 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_74;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v35 = __nwlog_obj();
      domain = error.domain;
      v39 = os_log_type_enabled(v35, error.domain);
      if (!backtrace_string)
      {
        if (!v39)
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        v56 = "nw_http_authentication_apply_authorization";
        v37 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_74;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        v56 = "nw_http_authentication_apply_authorization";
        v57 = 2082;
        v58 = backtrace_string;
        v40 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_64:
        _os_log_impl(&dword_182FBE000, v35, domain, v40, buf, 0x16u);
      }
LABEL_65:
      free(backtrace_string);
      goto LABEL_75;
    }
    v35 = __nwlog_obj();
    domain = error.domain;
    if (!os_log_type_enabled(v35, error.domain))
      goto LABEL_75;
    *(_DWORD *)buf = 136446210;
    v56 = "nw_http_authentication_apply_authorization";
    v37 = "%{public}s called with null protocol";
LABEL_74:
    _os_log_impl(&dword_182FBE000, v35, domain, v37, buf, 0xCu);
LABEL_75:
    if (v34)
      free(v34);
    return 0;
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (!v9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_http_authentication_apply_authorization";
    v34 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(error.domain) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v34, &error, &type))
      goto LABEL_75;
    if (LOBYTE(error.domain) == 17)
    {
      v35 = __nwlog_obj();
      domain = error.domain;
      if (!os_log_type_enabled(v35, error.domain))
        goto LABEL_75;
      *(_DWORD *)buf = 136446210;
      v56 = "nw_http_authentication_apply_authorization";
      v37 = "%{public}s called with null http_authentication";
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v35 = __nwlog_obj();
      domain = error.domain;
      if (!os_log_type_enabled(v35, error.domain))
        goto LABEL_75;
      *(_DWORD *)buf = 136446210;
      v56 = "nw_http_authentication_apply_authorization";
      v37 = "%{public}s called with null http_authentication, backtrace limit exceeded";
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v35 = __nwlog_obj();
    domain = error.domain;
    v41 = os_log_type_enabled(v35, error.domain);
    if (backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        v56 = "nw_http_authentication_apply_authorization";
        v57 = 2082;
        v58 = backtrace_string;
        v40 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    if (!v41)
      goto LABEL_75;
    *(_DWORD *)buf = 136446210;
    v56 = "nw_http_authentication_apply_authorization";
    v37 = "%{public}s called with null http_authentication, no backtrace";
    goto LABEL_74;
  }
  if (a4 != 8)
  {
    if (!a3 || (v17 = a3, v18 = v17[2], v17, !v18))
    {
      v19 = a7 ? 256 : 0;
      *(_WORD *)(v9 + 1062) = *(_WORD *)(v9 + 1062) & 0xFEFF | v19;
      if (a4 != 4)
      {
        result = 1;
        if ((*(_BYTE *)(v9 + 198) & 1) == 0 && gLogDatapath)
        {
          v31 = __nwlog_obj();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v56 = "nw_http_authentication_apply_authorization";
            v57 = 2082;
            v58 = (char *)(v9 + 114);
            v59 = 2080;
            v60 = " ";
            _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scredential or username was NULL, resending the request without authentication", buf, 0x20u);
          }
          return 1;
        }
        return result;
      }
    }
  }
  _CFHTTPAuthenticationSetPreferredScheme();
  error.domain = 0;
  *(_QWORD *)&error.error = 0;
  if (CFHTTPAuthenticationIsValid(a2, &error))
  {
    if (a4 == 8)
    {
      if ((a6 & 1) == 0)
      {
        nw_http_authentication_ask_pat_for_creds(a1, a8);
        return 1;
      }
      if (nw_http_authentication_apply_credentials(*(__CFHTTPMessage **)(v9 + 912), a2, a3))
      {
        v30 = (__CFHTTPMessage **)(v9 + 912);
        goto LABEL_37;
      }
    }
    else
    {
      if (a4 == 4)
      {
        NegotiateHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNegotiateHeaderForRequest();
        if (NegotiateHeaderForRequest)
        {
LABEL_14:
          v50[0] = MEMORY[0x1E0C809B0];
          v50[1] = 0x40000000;
          v50[2] = ___ZL42nw_http_authentication_apply_authorizationP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbbbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke;
          v50[3] = &__block_descriptor_tmp_75;
          v50[4] = v9;
          v51 = a6;
          nw_utilities_get_c_string_from_cfstring(NegotiateHeaderForRequest, 0x201u, v50);
          if ((a4 & 0xFFFFFFFE) == 4 || !a5)
          {
LABEL_41:
            CFRelease(NegotiateHeaderForRequest);
            return 1;
          }
          v21 = a3;
          if (v21)
          {
            v22 = v21;
            v23 = v21[3] == 0;

            if (!v23)
            {
              v24 = objc_alloc_init(NWConcrete_nw_authentication_credential_cache_entry);
              nw_authentication_credential_cache_entry_set_http_authentication(v24, a2);
              nw_authentication_credential_cache_entry_set_credential((uint64_t)v24, v22);
              nw_authentication_credential_cache_entry_set_for_proxy((uint64_t)v24, a6);
              v25 = *(_QWORD *)(v9 + 704);
              if (v25 && *(_QWORD *)(v25 + 24) - *(_QWORD *)(v25 + 16) >= 0x319uLL)
              {
                v26 = (char *)*(unsigned __int8 *)(v9 + 1061);
                *(_BYTE *)(v9 + 1061) = (_BYTE)v26 + 1;
                nw_array_set_object_at_index(v25, v24, v26);
                if (*(unsigned __int8 *)(v9 + 1061) >= 0x64u)
                  *(_BYTE *)(v9 + 1061) = 0;
              }
              else
              {
                nw_array_append(v25, v24);
              }
              if (v24)
                os_release(v24);
            }
            goto LABEL_41;
          }
          __nwlog_obj();
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v56 = "nw_authentication_credential_get_persistence";
          v43 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v53 = 0;
          if (__nwlog_fault(v43, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v44 = objc_claimAutoreleasedReturnValue();
              v45 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                v56 = "nw_authentication_credential_get_persistence";
                _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null credential", buf, 0xCu);
              }
            }
            else if (v53)
            {
              v46 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v44 = objc_claimAutoreleasedReturnValue();
              v47 = type;
              v48 = os_log_type_enabled(v44, type);
              if (v46)
              {
                if (v48)
                {
                  *(_DWORD *)buf = 136446466;
                  v56 = "nw_authentication_credential_get_persistence";
                  v57 = 2082;
                  v58 = v46;
                  _os_log_impl(&dword_182FBE000, v44, v47, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v46);
                goto LABEL_95;
              }
              if (v48)
              {
                *(_DWORD *)buf = 136446210;
                v56 = "nw_authentication_credential_get_persistence";
                _os_log_impl(&dword_182FBE000, v44, v47, "%{public}s called with null credential, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v44 = objc_claimAutoreleasedReturnValue();
              v49 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                v56 = "nw_authentication_credential_get_persistence";
                _os_log_impl(&dword_182FBE000, v44, v49, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_95:
          if (v43)
            free(v43);
          goto LABEL_41;
        }
LABEL_45:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = gLogObj;
        result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_http_authentication_apply_authorization";
          v29 = "%{public}s Unable to find authorization";
          goto LABEL_47;
        }
        return result;
      }
      if (nw_http_authentication_apply_credentials(*(__CFHTTPMessage **)(v9 + 912), a2, a3))
      {
        if (a4 == 5)
        {
          NegotiateHeaderForRequest = (const __CFString *)_CFHTTPAuthenticationCreateNTLMHeaderForRequest();
          if (NegotiateHeaderForRequest)
            goto LABEL_14;
          goto LABEL_45;
        }
        v30 = (__CFHTTPMessage **)(v9 + 912);
        if (!a6)
        {
          v32 = *v30;
          v33 = CFSTR("Authorization");
LABEL_44:
          NegotiateHeaderForRequest = CFHTTPMessageCopyHeaderFieldValue(v32, v33);
          if (NegotiateHeaderForRequest)
            goto LABEL_14;
          goto LABEL_45;
        }
LABEL_37:
        v32 = *v30;
        v33 = CFSTR("Proxy-Authorization");
        goto LABEL_44;
      }
    }
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v27 = gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446210;
    v56 = "nw_http_authentication_apply_authorization";
    v29 = "%{public}s _CFHTTPAuthenticationSetPreferredScheme failed";
LABEL_47:
    _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, v29, buf, 0xCu);
    return 0;
  }
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__50(uint64_t a1)
{
  const void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(const void **)(a1 + 40);
    if (v2)
      CFRelease(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL43nw_http_authentication_ask_appsso_for_credsP11nw_protocolPK10__CFStringbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(uint64_t a1, CFTypeRef cf, void *a3)
{
  CFTypeRef v5;
  char v6;
  void *v7;
  char v8;
  __int128 v9;
  void *v10;
  _QWORD v11[4];
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  char v16;
  _QWORD v17[5];
  void *object;
  char v19;
  _QWORD v20[5];
  CFTypeRef v21;
  char v22;

  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3802000000;
  v20[3] = __Block_byref_object_copy__76;
  v20[4] = __Block_byref_object_dispose__77;
  if (cf)
  {
    v5 = CFRetain(cf);
    v6 = v22 | 1;
  }
  else
  {
    v5 = 0;
    v6 = -1;
  }
  v21 = v5;
  v22 = v6;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3802000000;
  v17[3] = __Block_byref_object_copy__78;
  v17[4] = __Block_byref_object_dispose__79;
  if (a3)
  {
    v7 = os_retain(a3);
    v8 = v19 | 1;
  }
  else
  {
    v7 = 0;
    v8 = -1;
  }
  v11[1] = 0x40000000;
  v9 = *(_OWORD *)(a1 + 32);
  v15 = *(_OWORD *)(a1 + 48);
  object = v7;
  v19 = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[2] = ___ZL43nw_http_authentication_ask_appsso_for_credsP11nw_protocolPK10__CFStringbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_80;
  v11[3] = &unk_1E149C050;
  v13 = v20;
  v14 = v17;
  v10 = *(void **)(v15 + 832);
  v16 = *(_BYTE *)(a1 + 64);
  v12 = v9;
  nw_queue_context_async(v10, v11);
  _Block_object_dispose(v17, 8);
  if ((v19 & 1) != 0 && object)
    os_release(object);
  _Block_object_dispose(v20, 8);
  if ((v22 & 1) != 0)
  {
    if (v21)
      CFRelease(v21);
  }
}

uint64_t __Block_byref_object_copy__76(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__77(uint64_t a1)
{
  const void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(const void **)(a1 + 40);
    if (v2)
      CFRelease(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__79(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL43nw_http_authentication_ask_appsso_for_credsP11nw_protocolPK10__CFStringbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_80(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void (*v13)(void);
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *client_metadata_in_parameters;
  void *v18;
  NSObject *v19;
  _BOOL4 v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_plugin_retry_end_async(*(_QWORD *)(a1 + 64) + 344))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v3 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      v23 = 136446978;
      v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
      v25 = 2114;
      v26 = v3;
      v27 = 2112;
      v28 = v4;
      v29 = 2112;
      v30 = v5;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ handling AppSSO headers %@ error %@", (uint8_t *)&v23, 0x2Au);
    }
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(unsigned int *)(v6 + 1056) + 1;
    v8 = v7 << 31 >> 31;
    *(_DWORD *)(v6 + 1056) = v7;
    if (v8 != v7 || v8 < 0)
    {
      if (gLogDatapath)
      {
        v21 = __nwlog_obj();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          v22 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 1056);
          v23 = 136446978;
          v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
          v25 = 2082;
          v26 = "http_authentication->appsso_attempt_count";
          v27 = 2048;
          v28 = 1;
          v29 = 2048;
          v30 = v22;
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", (uint8_t *)&v23, 0x2Au);
        }
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 1056) = -1;
    }
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), (CFDictionaryApplierFunction)nw_http_authentication_apply_appsso_headers, *(void **)(a1 + 64));
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 1044) = 4;
      v13 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
LABEL_23:
      v13();
      return;
    }
    v9 = _CFHTTPAuthenticationAppSSOIsPerformDefaultHandlingError();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    if (!v9)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v14 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        v23 = 136446978;
        v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
        v25 = 2114;
        v26 = v14;
        v27 = 2112;
        v28 = v15;
        v29 = 2112;
        v30 = v16;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ AppSSO received headers %@ error %@ canceling", (uint8_t *)&v23, 0x2Au);
      }
      client_metadata_in_parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*(void **)(*(_QWORD *)(a1 + 64) + 816), *(_QWORD *)(a1 + 64));
      if (client_metadata_in_parameters)
      {
        v18 = client_metadata_in_parameters;
        nw_http_client_metadata_set_client_error(client_metadata_in_parameters, 3);
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        os_release(v18);
        return;
      }
      v13 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
      goto LABEL_23;
    }
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v11 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v23 = 136446466;
      v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
      v25 = 2114;
      v26 = v11;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}@ AppSSO performing default handling", (uint8_t *)&v23, 0x16u);
    }
    *(_WORD *)(*(_QWORD *)(a1 + 64) + 1062) |= 0x20u;
    nw_http_authentication_handle_challenge(*(_QWORD *)(a1 + 72), *(_CFHTTPAuthentication **)(*(_QWORD *)(a1 + 64) + 848), *(void **)(*(_QWORD *)(a1 + 64) + 656), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 1044), *(_BYTE *)(a1 + 80), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 64);
    if ((*(_BYTE *)(v12 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v19 = __nwlog_obj();
        v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
        v12 = *(_QWORD *)(a1 + 64);
        if (v20)
        {
          v23 = 136446722;
          v24 = "nw_http_authentication_ask_appsso_for_creds_block_invoke";
          v25 = 2082;
          v26 = (const char *)(v12 + 114);
          v27 = 2080;
          v28 = (uint64_t)" ";
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", (uint8_t *)&v23, 0x20u);
          v12 = *(_QWORD *)(a1 + 64);
        }
      }
    }
    nw_http_authentication_destroy(v12);
  }
}

uint64_t nw_http_authentication_ask_pat_for_creds(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *parameters;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  int is_third_party_web_content;
  CFStringRef v17;
  CFTypeRef v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *pat_timestamps_array;
  NSObject *v23;
  void *client_metadata_in_parameters;
  void *v25;
  unsigned __int8 v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *v35;
  _BOOL4 v36;
  char *v37;
  _BOOL4 v38;
  dispatch_queue_t v39;
  unsigned __int8 *v40;
  void *v42;
  NSObject *v43;
  char *backtrace_string;
  _BOOL4 v45;
  os_log_type_t v46;
  os_log_type_t v47;
  NSObject *v48;
  os_log_type_t v49;
  char *v50;
  const void *v51;
  const __CFString *v52;
  uint64_t v53;
  int v54;
  char v55;
  os_log_type_t v56;
  _BYTE type[24];
  char v58;
  _BYTE buf[24];
  uint64_t (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t);
  CFStringRef v62;
  char v63;
  uint8_t v64[4];
  const char *v65;
  __int16 v66;
  char *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    parameters = (void *)nw_protocol_get_parameters(*(_QWORD *)(a1 + 40));
    v53 = a2;
    if (parameters)
    {
      v6 = os_retain(parameters);
      if (v6)
      {
        v7 = v6;
        v54 = (v6[101] >> 1) & 1;
LABEL_25:

        is_third_party_web_content = nw_parameters_is_third_party_web_content(v7);
        v17 = CFURLCopyHostName(*(CFURLRef *)(v2 + 880));
        if (((is_third_party_web_content ^ 1 | v54) & 1) == 0
          && !_CFHTTPAuthenticationCheckOriginAllowedAsThirdParty())
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v23 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_authentication_ask_pat_for_creds";
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s Received PAT challenge for disallowed third party", buf, 0xCu);
          }
          client_metadata_in_parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*(void **)(v2 + 816), v2);
          if (!client_metadata_in_parameters)
          {
            v26 = 1;
            (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v53 + 16))(v53, 0, 1, 0);
            if (!v17)
              goto LABEL_86;
            goto LABEL_85;
          }
          v25 = client_metadata_in_parameters;
          nw_http_client_metadata_set_client_error(client_metadata_in_parameters, 2);
          v26 = 1;
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v53 + 16))(v53, 0, 1, 0);
          os_release(v25);
LABEL_84:
          if (!v17)
            goto LABEL_86;
          goto LABEL_85;
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3802000000;
        v60 = __Block_byref_object_copy__49;
        v61 = __Block_byref_object_dispose__50;
        v62 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)(v2 + 114), 0x8000100u);
        v63 |= 1u;
        _CFHTTPAuthenticationGetPATSchemes();
        v18 = nw_parameters_copy_main_document_cfurl(v7);
        v19 = *(_QWORD *)(a1 + 40);
        v52 = v17;
        v51 = v18;
        if (v19)
        {
          v20 = nw_http_authentication_copy_protocol_metadata((nw_protocol *)a1);
          if (v20)
          {
            v21 = v20;
            *(_DWORD *)(v19 + 1040) = nw_http_connection_metadata_get_version(v20);
            pat_timestamps_array = (void *)nw_http_connection_metadata_find_or_create_pat_timestamps_array(v21);
            os_release(v21);
            goto LABEL_70;
          }
LABEL_69:
          pat_timestamps_array = 0;
LABEL_70:
          v39 = dispatch_queue_create("protocol_http_authentication", 0);
          nw_queue_context_target_dispatch_queue(*(void **)(v2 + 832), v39);
          *(_QWORD *)type = 0;
          *(_QWORD *)&type[8] = type;
          *(_QWORD *)&type[16] = 0x2000000000;
          v58 = 0;
          nw_protocol_plugin_retry_begin_async(v2 + 344);
          v40 = v7;
          if (v40)
            goto LABEL_71;
          __nwlog_obj();
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v64 = 136446210;
          v65 = "nw_parameters_get_using_ephemeral_configuration";
          v50 = (char *)_os_log_send_and_compose_impl();

          v56 = OS_LOG_TYPE_ERROR;
          v55 = 0;
          if (__nwlog_fault(v50, &v56, &v55))
          {
            if (v56 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v43 = objc_claimAutoreleasedReturnValue();
              v47 = v56;
              if (os_log_type_enabled(v43, v56))
              {
                *(_DWORD *)v64 = 136446210;
                v65 = "nw_parameters_get_using_ephemeral_configuration";
                _os_log_impl(&dword_182FBE000, v43, v47, "%{public}s called with null parameters", v64, 0xCu);
              }
            }
            else
            {
              if (v55)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v48 = objc_claimAutoreleasedReturnValue();
                v46 = v56;
                v45 = os_log_type_enabled(v48, v56);
                if (backtrace_string)
                {
                  if (v45)
                  {
                    *(_DWORD *)v64 = 136446466;
                    v65 = "nw_parameters_get_using_ephemeral_configuration";
                    v66 = 2082;
                    v67 = backtrace_string;
                    _os_log_impl(&dword_182FBE000, v48, v46, "%{public}s called with null parameters, dumping backtrace:%{public}s", v64, 0x16u);
                  }

                  free(backtrace_string);
                }
                else
                {
                  if (v45)
                  {
                    *(_DWORD *)v64 = 136446210;
                    v65 = "nw_parameters_get_using_ephemeral_configuration";
                    _os_log_impl(&dword_182FBE000, v48, v46, "%{public}s called with null parameters, no backtrace", v64, 0xCu);
                  }

                }
                goto LABEL_105;
              }
              __nwlog_obj();
              v43 = objc_claimAutoreleasedReturnValue();
              v49 = v56;
              if (os_log_type_enabled(v43, v56))
              {
                *(_DWORD *)v64 = 136446210;
                v65 = "nw_parameters_get_using_ephemeral_configuration";
                _os_log_impl(&dword_182FBE000, v43, v49, "%{public}s called with null parameters, backtrace limit exceeded", v64, 0xCu);
              }
            }

          }
LABEL_105:
          if (v50)
            free(v50);
LABEL_71:

          _CFHTTPAuthenticationGetPATAuthHeaders();
          if (*(_BYTE *)(*(_QWORD *)&type[8] + 24))
            v26 = 1;
          else
            v26 = 2;
          _Block_object_dispose(type, 8);
          if (v39)
            dispatch_release(v39);
          v17 = v52;
          if (pat_timestamps_array)
            os_release(pat_timestamps_array);
          if (v51)
            CFRelease(v51);
          _Block_object_dispose(buf, 8);
          if ((v63 & 1) != 0 && v62)
          {
            CFRelease(v62);
            if (!v52)
            {
LABEL_86:
              if (v7)
                os_release(v7);
              return v26;
            }
LABEL_85:
            CFRelease(v17);
            goto LABEL_86;
          }
          goto LABEL_84;
        }
        __nwlog_obj();
        *(_DWORD *)type = 136446210;
        *(_QWORD *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
        v31 = (char *)_os_log_send_and_compose_impl();
        v64[0] = 16;
        v56 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v31, v64, &v56))
        {
          if (v64[0] == 17)
          {
            v32 = __nwlog_obj();
            v33 = v64[0];
            if (!os_log_type_enabled(v32, (os_log_type_t)v64[0]))
              goto LABEL_67;
            *(_DWORD *)type = 136446210;
            *(_QWORD *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
            v34 = "%{public}s called with null http_authentication";
            goto LABEL_66;
          }
          if (v56 == OS_LOG_TYPE_DEFAULT)
          {
            v32 = __nwlog_obj();
            v33 = v64[0];
            if (!os_log_type_enabled(v32, (os_log_type_t)v64[0]))
              goto LABEL_67;
            *(_DWORD *)type = 136446210;
            *(_QWORD *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
            v34 = "%{public}s called with null http_authentication, backtrace limit exceeded";
            goto LABEL_66;
          }
          v37 = (char *)__nw_create_backtrace_string();
          v32 = __nwlog_obj();
          v33 = v64[0];
          v38 = os_log_type_enabled(v32, (os_log_type_t)v64[0]);
          if (v37)
          {
            if (v38)
            {
              *(_DWORD *)type = 136446466;
              *(_QWORD *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
              *(_WORD *)&type[12] = 2082;
              *(_QWORD *)&type[14] = v37;
              _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", type, 0x16u);
            }
            free(v37);
            goto LABEL_67;
          }
          if (v38)
          {
            *(_DWORD *)type = 136446210;
            *(_QWORD *)&type[4] = "nw_http_authentication_copy_pat_timestamps_array";
            v34 = "%{public}s called with null http_authentication, no backtrace";
LABEL_66:
            _os_log_impl(&dword_182FBE000, v32, v33, v34, type, 0xCu);
          }
        }
LABEL_67:
        if (v31)
          free(v31);
        goto LABEL_69;
      }
    }
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    v64[0] = 0;
    if (__nwlog_fault(v9, type, v64))
    {
      if (type[0] == 17)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type[0];
        if (os_log_type_enabled(v10, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v64[0])
      {
        v12 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type[0];
        v14 = os_log_type_enabled(v10, (os_log_type_t)type[0]);
        if (v12)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v12);
          if (!v9)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type[0];
        if (os_log_type_enabled(v10, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_get_allow_private_access_tokens_for_third_party";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v7 = 0;
      v54 = 0;
      goto LABEL_25;
    }
LABEL_23:
    free(v9);
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_authentication_ask_pat_for_creds";
  v27 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  v64[0] = 0;
  if (__nwlog_fault(v27, type, v64))
  {
    if (type[0] == 17)
    {
      v28 = __nwlog_obj();
      v29 = type[0];
      if (os_log_type_enabled(v28, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_ask_pat_for_creds";
        v30 = "%{public}s called with null http_authentication";
LABEL_60:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
      }
    }
    else if (v64[0])
    {
      v35 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type[0];
      v36 = os_log_type_enabled(v28, (os_log_type_t)type[0]);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_authentication_ask_pat_for_creds";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v35;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        goto LABEL_61;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_ask_pat_for_creds";
        v30 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_60;
      }
    }
    else
    {
      v28 = __nwlog_obj();
      v29 = type[0];
      if (os_log_type_enabled(v28, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_authentication_ask_pat_for_creds";
        v30 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_60;
      }
    }
  }
LABEL_61:
  if (v27)
    free(v27);
  return 1;
}

void ___ZL42nw_http_authentication_apply_authorizationP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbbbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(uint64_t a1, uint64_t a2)
{
  const char *v3;

  if (*(_BYTE *)(a1 + 40))
    v3 = "Proxy-Authorization";
  else
    v3 = "Authorization";
  nw_http_fields_set_value_by_name(*(void **)(*(_QWORD *)(a1 + 32) + 944), (uint64_t)v3, a2);
}

void ___ZL40nw_http_authentication_ask_pat_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(_QWORD *a1, const __CFDictionary *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  const __CFString *Value;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void *client_metadata_in_parameters;
  void *v13;
  NSObject *v14;
  _BOOL4 v15;
  _QWORD v16[5];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_plugin_retry_end_async(a1[7] + 344))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
      *(_DWORD *)buf = 136446978;
      v18 = "nw_http_authentication_ask_pat_for_creds_block_invoke";
      v19 = 2114;
      v20 = v7;
      v21 = 2112;
      v22 = (const char *)a2;
      v23 = 2112;
      v24 = a3;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ received PAT headers %@ error %@", buf, 0x2Au);
    }
    if (!a2 || a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_authentication_ask_pat_for_creds_block_invoke";
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s PAT default delivering response", buf, 0xCu);
      }
      (*(void (**)(void))(a1[4] + 16))();
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else
    {
      Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("Authorization"));
      if (Value)
      {
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 0x40000000;
        v16[2] = ___ZL40nw_http_authentication_ask_pat_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_61;
        v16[3] = &__block_descriptor_tmp_62;
        v16[4] = a1[7];
        nw_utilities_get_c_string_from_cfstring(Value, 0x201u, v16);
        *(_DWORD *)(a1[7] + 1044) = 8;
        (*(void (**)(void))(a1[4] + 16))();
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_http_authentication_ask_pat_for_creds_block_invoke_2";
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s Unable to find authorization", buf, 0xCu);
        }
        client_metadata_in_parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(*(void **)(a1[7] + 816), a1[7]);
        v13 = client_metadata_in_parameters;
        if (client_metadata_in_parameters)
          nw_http_client_metadata_set_client_error(client_metadata_in_parameters, 1);
        (*(void (**)(void))(a1[4] + 16))();
        *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
        if (v13)
          os_release(v13);
      }
    }
  }
  else
  {
    v9 = a1[7];
    if ((*(_BYTE *)(v9 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v14 = __nwlog_obj();
        v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
        v9 = a1[7];
        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          v18 = "nw_http_authentication_ask_pat_for_creds_block_invoke";
          v19 = 2082;
          v20 = v9 + 114;
          v21 = 2080;
          v22 = " ";
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", buf, 0x20u);
          v9 = a1[7];
        }
      }
    }
    nw_http_authentication_destroy(v9);
  }
}

void ___ZL40nw_http_authentication_ask_pat_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_61(uint64_t a1, uint64_t a2)
{
  nw_http_fields_set_value_by_name(*(void **)(*(_QWORD *)(a1 + 32) + 944), (uint64_t)"Authorization", a2);
}

void ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;

  v3 = *(_QWORD *)(a1 + 32);
  if ((*(_WORD *)(v3 + 1062) & 0x10) != 0)
    v4 = "Proxy-Authorization";
  else
    v4 = "Authorization";
  nw_http_fields_set_value_by_name(*(void **)(v3 + 944), (uint64_t)v4, a2);
}

void ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_plugin_retry_end_async(*(_QWORD *)(a1 + 40) + 344))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 960), *(_WORD *)(*(_QWORD *)(a1 + 40) + 1062) & 1, 1);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 40);
    if ((*(_BYTE *)(v2 + 198) & 1) == 0 && gLogDatapath)
    {
      v3 = __nwlog_obj();
      v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
      v2 = *(_QWORD *)(a1 + 40);
      if (v4)
      {
        v5 = 136446722;
        v6 = "nw_http_authentication_handle_challenge_block_invoke_2";
        v7 = 2082;
        v8 = v2 + 114;
        v9 = 2080;
        v10 = " ";
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", (uint8_t *)&v5, 0x20u);
        v2 = *(_QWORD *)(a1 + 40);
      }
    }
    nw_http_authentication_destroy(v2);
  }
}

uint64_t nw::retained_ptr<nw_endpoint *>::operator=(uint64_t a1, _QWORD *a2)
{
  char v4;
  void *v5;

  v4 = *(_BYTE *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      os_release(v5);
      v4 = *(_BYTE *)(a1 + 8);
    }
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4 | 1;
  *a2 = 0;
  return a1;
}

uint64_t nw_http_authentication_ask_authbroker_for_creds(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  CFStringRef v3;
  const char **v4;
  const char **v5;
  const char *v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  void *v9;
  CFStringRef v10;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  NSObject *v20;
  char *v21;
  _BOOL4 v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v20 = __nwlog_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v30 = "nw_http_authentication_ask_authbroker_for_creds";
          v31 = 2082;
          v32 = (char *)(v1 + 114);
          v33 = 2080;
          v34 = " ";
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    v2 = (void *)nw_authentication_challenge_copy_protection_space(*(void **)(v1 + 640));
    v3 = CFURLCopyHostName(*(CFURLRef *)(v1 + 896));
    *(_DWORD *)(v1 + 1048) = nw_authentication_protection_space_get_type(v2);
    v4 = v2;
    v5 = v4;
    if (v4)
    {
      v6 = v4[2];
LABEL_6:

      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, 0x201u);
      CFURLGetPortNumber(*(CFURLRef *)(v1 + 896));
      v9 = (void *)CFURLProtectionSpaceCreate();
      v10 = CFStringCreateWithCString(v7, (const char *)(v1 + 114), 0x8000100u);
      nw_protocol_plugin_retry_begin_async(v1 + 344);
      _CFHTTPAuthenticationFetchProxyCredentialFromAuthBroker();
      if (v10)
        CFRelease(v10);
      if (v9)
        os_release(v9);
      if (v8)
        CFRelease(v8);
      if (v3)
        CFRelease(v3);
      if (v5)
        os_release(v5);
      return 2;
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_authentication_protection_space_get_realm";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v17, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_authentication_protection_space_get_realm";
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protection_space", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_authentication_protection_space_get_realm";
            v31 = 2082;
            v32 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v18, v24, "%{public}s called with null protection_space, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_authentication_protection_space_get_realm";
          _os_log_impl(&dword_182FBE000, v18, v24, "%{public}s called with null protection_space, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_authentication_protection_space_get_realm";
          _os_log_impl(&dword_182FBE000, v18, v26, "%{public}s called with null protection_space, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_52:
    if (v17)
      free(v17);
    v6 = 0;
    goto LABEL_6;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_http_authentication_ask_authbroker_for_creds";
  v12 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (__nwlog_fault(v12, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_authentication_ask_authbroker_for_creds";
        v15 = "%{public}s called with null http_authentication";
LABEL_45:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else if (v27)
    {
      v21 = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v22 = os_log_type_enabled(v13, type);
      if (v21)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_http_authentication_ask_authbroker_for_creds";
          v31 = 2082;
          v32 = v21;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v21);
        goto LABEL_46;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_authentication_ask_authbroker_for_creds";
        v15 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_45;
      }
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_authentication_ask_authbroker_for_creds";
        v15 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_45;
      }
    }
  }
LABEL_46:
  if (v12)
    free(v12);
  return 1;
}

void ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeRef v5;
  char v6;
  CFTypeRef v7;
  char v8;
  _QWORD v9[7];
  __int128 v10;
  _QWORD v11[5];
  CFTypeRef cfa;
  char v13;
  _QWORD v14[5];
  CFTypeRef v15;
  char v16;

  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3802000000;
  v14[3] = __Block_byref_object_copy__47;
  v14[4] = __Block_byref_object_dispose__48;
  if (cf)
  {
    v5 = CFRetain(cf);
    v6 = v16 | 1;
  }
  else
  {
    v5 = 0;
    v6 = -1;
  }
  v15 = v5;
  v16 = v6;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3802000000;
  v11[3] = __Block_byref_object_copy__49;
  v11[4] = __Block_byref_object_dispose__50;
  if (a3)
  {
    v7 = CFRetain(a3);
    v8 = v13 | 1;
  }
  else
  {
    v7 = 0;
    v8 = -1;
  }
  cfa = v7;
  v13 = v8;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_51;
  v9[3] = &unk_1E149BF20;
  v9[5] = v14;
  v9[6] = v11;
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 40);
  nw_queue_context_async(*(void **)(v10 + 832), v9);
  _Block_object_dispose(v11, 8);
  if ((v13 & 1) != 0 && cfa)
    CFRelease(cfa);
  _Block_object_dispose(v14, 8);
  if ((v16 & 1) != 0)
  {
    if (v15)
      CFRelease(v15);
  }
}

void ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_34(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_plugin_retry_end_async(*(_QWORD *)(a1 + 40) + 344))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 960), 0, 1);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 40);
    if ((*(_BYTE *)(v2 + 198) & 1) == 0 && gLogDatapath)
    {
      v3 = __nwlog_obj();
      v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
      v2 = *(_QWORD *)(a1 + 40);
      if (v4)
      {
        v5 = 136446722;
        v6 = "nw_http_authentication_handle_challenge_block_invoke";
        v7 = 2082;
        v8 = v2 + 114;
        v9 = 2080;
        v10 = " ";
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", (uint8_t *)&v5, 0x20u);
        v2 = *(_QWORD *)(a1 + 40);
      }
    }
    nw_http_authentication_destroy(v2);
  }
}

uint64_t nw_http_authentication_send_challenge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  _BOOL4 v15;
  _QWORD block[7];
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 40);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_authentication_send_challenge";
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s http authentication calling out to challenge handler", buf, 0xCu);
      }
      nw_authentication_challenge_set_attempt_count(*(void **)(v4 + 640), *(_DWORD *)(v4 + 1052));
      ++*(_DWORD *)(v4 + 1052);
      nw_protocol_plugin_retry_begin_async(v4 + 344);
      v6 = *(NSObject **)(v4 + 768);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke;
      block[3] = &unk_1E149C008;
      block[5] = v4;
      block[6] = a1;
      block[4] = a2;
      dispatch_async(v6, block);
      return 2;
    }
    *(_DWORD *)buf = 136446210;
    v20 = "nw_http_authentication_send_challenge";
    v8 = (char *)_os_log_send_and_compose_impl();
    v18 = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v8, &v18, &v17))
      goto LABEL_34;
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v18;
      if (os_log_type_enabled(v9, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_authentication_send_challenge";
        v11 = "%{public}s called with null http_authentication";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v17)
    {
      v9 = __nwlog_obj();
      v10 = v18;
      if (os_log_type_enabled(v9, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_authentication_send_challenge";
        v11 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v18;
    v15 = os_log_type_enabled(v9, v18);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_authentication_send_challenge";
        v11 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v20 = "nw_http_authentication_send_challenge";
      v21 = 2082;
      v22 = backtrace_string;
      v14 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_http_authentication_send_challenge";
  v8 = (char *)_os_log_send_and_compose_impl();
  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (!__nwlog_fault(v8, &v18, &v17))
    goto LABEL_34;
  if (v18 != OS_LOG_TYPE_FAULT)
  {
    if (!v17)
    {
      v9 = __nwlog_obj();
      v10 = v18;
      if (os_log_type_enabled(v9, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_authentication_send_challenge";
        v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v18;
    v13 = os_log_type_enabled(v9, v18);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_authentication_send_challenge";
        v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v20 = "nw_http_authentication_send_challenge";
      v21 = 2082;
      v22 = backtrace_string;
      v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v9, v10, v14, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v9 = __nwlog_obj();
  v10 = v18;
  if (os_log_type_enabled(v9, v18))
  {
    *(_DWORD *)buf = 136446210;
    v20 = "nw_http_authentication_send_challenge";
    v11 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
  }
LABEL_34:
  if (v8)
    free(v8);
  return 1;
}

uint64_t ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, void *, char);
  void *v5;
  uint64_t v6;
  __int128 v7;

  v2 = MEMORY[0x1E0C809B0];
  v3 = 0x40000000;
  v4 = ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2;
  v5 = &unk_1E149BFE0;
  v7 = *(_OWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v7 + 752) + 16))();
}

void ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2(uint64_t a1, void *a2, char a3)
{
  NSObject *v6;
  void *v7;
  char v8;
  void *v9;
  _QWORD v10[6];
  __int128 v11;
  char v12;
  __int128 buf;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  void *object;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = "nw_http_authentication_send_challenge_block_invoke_2";
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s http authentication returned from challenge handler", (uint8_t *)&buf, 0xCu);
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v14 = 0x3802000000;
  v15 = __Block_byref_object_copy__66;
  v16 = __Block_byref_object_dispose__67;
  if (a2)
  {
    v7 = os_retain(a2);
    v8 = v18 | 1;
  }
  else
  {
    v7 = 0;
    v8 = -1;
  }
  object = v7;
  v18 = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_68;
  v10[3] = &unk_1E149BFB8;
  v12 = a3;
  v11 = *(_OWORD *)(a1 + 40);
  v9 = *(void **)(v11 + 832);
  v10[4] = *(_QWORD *)(a1 + 32);
  v10[5] = &buf;
  nw_queue_context_async_if_needed(v9, v10);
  _Block_object_dispose(&buf, 8);
  if ((v18 & 1) != 0)
  {
    if (object)
      os_release(object);
  }
}

uint64_t __Block_byref_object_copy__66(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__67(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL37nw_http_authentication_send_challengeP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_68(uint64_t a1)
{
  NSObject *v2;
  int type;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  BOOL v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _CFHTTPAuthentication *v17;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  _BOOL4 v27;
  int v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    v28 = 136446210;
    v29 = "nw_http_authentication_send_challenge_block_invoke";
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s http authentication returned from challenge handler async", (uint8_t *)&v28, 0xCu);
  }
  if (nw_protocol_plugin_retry_end_async(*(_QWORD *)(a1 + 48) + 344))
  {
    *(_WORD *)(*(_QWORD *)(a1 + 48) + 1062) = *(_WORD *)(*(_QWORD *)(a1 + 48) + 1062) & 0xFFFE | *(unsigned __int8 *)(a1 + 64);
    type = nw_authentication_challenge_get_type(*(void **)(*(_QWORD *)(a1 + 48) + 640));
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v5)
    {
      if (*(_QWORD *)(v4 + 640))
      {
        v6 = v5;
        v7 = v6[2] == 0;

        v4 = *(_QWORD *)(a1 + 48);
        if (!v7)
        {
          v8 = *(void **)(v4 + 688);
          if (v8)
          {
            nw_authentication_credential_storage_set_default_credential(v8, *(void **)(v4 + 640), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
            v4 = *(_QWORD *)(a1 + 48);
          }
        }
      }
    }
    v9 = *(_WORD *)(v4 + 1062);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 + 40) = 0;
    v12 = *(_QWORD *)(a1 + 48);
    if ((v9 & 0x10) != 0)
    {
      v23 = *(_BYTE *)(v12 + 680);
      if ((v23 & 1) != 0)
      {
        v24 = *(void **)(v12 + 672);
        if (v24)
        {
          os_release(v24);
          v23 = *(_BYTE *)(v12 + 680);
        }
      }
      *(_QWORD *)(v12 + 672) = v11;
      *(_BYTE *)(v12 + 680) = v23 | 1;
      v25 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v25 + 1048) = type;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_CFHTTPAuthentication **)(v25 + 864);
      v18 = *(void **)(v25 + 672);
      v19 = *(_QWORD *)(a1 + 32);
      v20 = type;
      v21 = 1;
    }
    else
    {
      v13 = *(_BYTE *)(v12 + 664);
      if ((v13 & 1) != 0)
      {
        v14 = *(void **)(v12 + 656);
        if (v14)
        {
          os_release(v14);
          v13 = *(_BYTE *)(v12 + 664);
        }
      }
      *(_QWORD *)(v12 + 656) = v11;
      *(_BYTE *)(v12 + 664) = v13 | 1;
      v15 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v15 + 1044) = type;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_CFHTTPAuthentication **)(v15 + 848);
      v18 = *(void **)(v15 + 656);
      v19 = *(_QWORD *)(a1 + 32);
      v20 = type;
      v21 = 0;
    }
    nw_http_authentication_apply_authorization(v16, v17, v18, v20, 1, v21, 1, v19);
    *(_WORD *)(*(_QWORD *)(a1 + 48) + 1062) &= ~0x200u;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 48);
    if ((*(_BYTE *)(v22 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v26 = __nwlog_obj();
        v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG);
        v22 = *(_QWORD *)(a1 + 48);
        if (v27)
        {
          v28 = 136446722;
          v29 = "nw_http_authentication_send_challenge_block_invoke";
          v30 = 2082;
          v31 = v22 + 114;
          v32 = 2080;
          v33 = " ";
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", (uint8_t *)&v28, 0x20u);
          v22 = *(_QWORD *)(a1 + 48);
        }
      }
    }
    nw_http_authentication_destroy(v22);
  }
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
  const void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(const void **)(a1 + 40);
    if (v2)
      CFRelease(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_51(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  const void *v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_plugin_retry_end_async(a1[7] + 344))
  {
    v2 = *(_QWORD *)(a1[5] + 8);
    v3 = *(_QWORD *)(v2 + 40);
    if (v3 && *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40))
    {
      *(_QWORD *)(v2 + 40) = 0;
      v4 = a1[7];
      v5 = *(_BYTE *)(v4 + 984);
      if ((v5 & 1) != 0)
      {
        v6 = *(const void **)(v4 + 976);
        if (v6)
        {
          CFRelease(v6);
          v5 = *(_BYTE *)(v4 + 984);
        }
      }
      *(_QWORD *)(v4 + 976) = v3;
      *(_BYTE *)(v4 + 984) = v5 | 1;
      v7 = a1[7];
      v8 = *(const __CFString **)(*(_QWORD *)(a1[6] + 8) + 40);
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_52;
      v15[3] = &__block_descriptor_tmp_53;
      v15[4] = v7;
      nw_utilities_get_c_string_from_cfstring(v8, 0x201u, v15);
      v9 = a1[7];
      *(_DWORD *)(v9 + 1044) = 4;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(_QWORD *)(v9 + 960), 0, 0);
    }
    else if (nw_authentication_challenge_try_next_protection_space(*(void **)(a1[7] + 640)))
    {
      nw_http_authentication_send_challenge(a1[8], a1[4]);
    }
    else
    {
      if ((*(_BYTE *)(a1[7] + 198) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v13 = __nwlog_obj();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            v14 = a1[7] + 114;
            *(_DWORD *)buf = 136446722;
            v17 = "nw_http_authentication_ask_accounts_for_creds_block_invoke_2";
            v18 = 2082;
            v19 = v14;
            v20 = 2080;
            v21 = " ";
            _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAccounts failed to return a credential, ran out of schemes to try", buf, 0x20u);
          }
        }
      }
      (*(void (**)(void))(a1[4] + 16))();
    }
  }
  else
  {
    v10 = a1[7];
    if ((*(_BYTE *)(v10 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v11 = __nwlog_obj();
        v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
        v10 = a1[7];
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          v17 = "nw_http_authentication_ask_accounts_for_creds_block_invoke";
          v18 = 2082;
          v19 = v10 + 114;
          v20 = 2080;
          v21 = " ";
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", buf, 0x20u);
          v10 = a1[7];
        }
      }
    }
    nw_http_authentication_destroy(v10);
  }
}

void ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_52(uint64_t a1, uint64_t a2)
{
  nw_http_fields_set_value_by_name(*(void **)(*(_QWORD *)(a1 + 32) + 944), (uint64_t)"Authorization", a2);
}

void ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[8];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[2] = ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2;
  v6[3] = &unk_1E149BEB0;
  v3 = a1[4];
  v2 = a1[5];
  v4 = *(void **)(v2 + 832);
  v6[1] = 0x40000000;
  v5 = a1[6];
  v6[6] = a2;
  v6[7] = v5;
  v6[4] = v3;
  v6[5] = v2;
  nw_queue_context_async_if_needed(v4, v6);
}

void ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  const void *v10;
  _DWORD *v11;
  uint64_t v12;
  char v13;
  void *v14;
  const __CFString *Username;
  uint64_t v16;
  const __CFString *v17;
  NSObject *v18;
  _BOOL4 v19;
  NSObject *v20;
  _BOOL4 v21;
  NSObject *v22;
  _BOOL4 v23;
  NSObject *v24;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!nw_protocol_plugin_retry_end_async(a1[5] + 344))
  {
    v7 = a1[5];
    if ((*(_BYTE *)(v7 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v18 = __nwlog_obj();
        v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
        v7 = a1[5];
        if (v19)
        {
          *(_DWORD *)buf = 136446722;
          v29 = "nw_http_authentication_ask_authbroker_for_creds_block_invoke_2";
          v30 = 2082;
          v31 = (const char *)(v7 + 114);
          v32 = 2080;
          v33 = (uint64_t)" ";
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalling destroy because defer_destroy was true", buf, 0x20u);
          v7 = a1[5];
        }
      }
    }
    nw_http_authentication_destroy(v7);
    return;
  }
  v2 = a1[5];
  if (!a1[6])
  {
    if (!(*(_BYTE *)(v2 + 198) & 1 | (gLogDatapath == 0)))
    {
      v22 = __nwlog_obj();
      v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
      v2 = a1[5];
      if (v23)
      {
        *(_DWORD *)buf = 136446722;
        v29 = "nw_http_authentication_ask_authbroker_for_creds_block_invoke_3";
        v30 = 2082;
        v31 = (const char *)(v2 + 114);
        v32 = 2080;
        v33 = (uint64_t)" ";
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sauthbroker didn't return a cred, sending challenge", buf, 0x20u);
        v2 = a1[5];
      }
    }
    *(_WORD *)(v2 + 1062) |= 0x80u;
    nw_http_authentication_send_challenge(a1[7], a1[4]);
    return;
  }
  if (!(*(_BYTE *)(v2 + 198) & 1 | (gLogDatapath == 0)))
  {
    v20 = __nwlog_obj();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
    v2 = a1[5];
    if (v21)
    {
      *(_DWORD *)buf = 136446722;
      v29 = "nw_http_authentication_ask_authbroker_for_creds_block_invoke";
      v30 = 2082;
      v31 = (const char *)(v2 + 114);
      v32 = 2080;
      v33 = (uint64_t)" ";
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sapplying credential authbroker provided", buf, 0x20u);
      v2 = a1[5];
    }
  }
  v3 = *(unsigned int *)(v2 + 1052) + 1;
  v4 = v3 << 31 >> 31;
  *(_DWORD *)(v2 + 1052) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      v24 = __nwlog_obj();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        v25 = *(unsigned int *)(a1[5] + 1052);
        *(_DWORD *)buf = 136446978;
        v29 = "nw_http_authentication_ask_authbroker_for_creds_block_invoke";
        v30 = 2082;
        v31 = "http_authentication->auth_challenge_count";
        v32 = 2048;
        v33 = 1;
        v34 = 2048;
        v35 = v25;
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
      }
    }
    *(_DWORD *)(a1[5] + 1052) = -1;
    v5 = (const void *)a1[6];
    if (v5)
      goto LABEL_7;
  }
  else
  {
    v5 = (const void *)a1[6];
    if (v5)
    {
LABEL_7:
      v6 = CFRetain(v5);
      goto LABEL_16;
    }
  }
  v6 = 0;
LABEL_16:
  v8 = a1[5];
  v9 = *(_BYTE *)(v8 + 1000);
  if ((v9 & 1) != 0)
  {
    v10 = *(const void **)(v8 + 992);
    if (v10)
    {
      CFRelease(v10);
      v9 = *(_BYTE *)(v8 + 1000);
    }
  }
  *(_QWORD *)(v8 + 992) = v6;
  *(_BYTE *)(v8 + 1000) = v9 | 1;
  v11 = -[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
  v12 = a1[5];
  v13 = *(_BYTE *)(v12 + 680);
  if ((v13 & 1) != 0)
  {
    v14 = *(void **)(v12 + 672);
    if (v14)
    {
      os_release(v14);
      v13 = *(_BYTE *)(v12 + 680);
    }
  }
  *(_QWORD *)(v12 + 672) = v11;
  *(_BYTE *)(v12 + 680) = v13 | 1;
  Username = (const __CFString *)CFURLCredentialGetUsername();
  v16 = MEMORY[0x1E0C809B0];
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 0x40000000;
  v27[2] = ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_39;
  v27[3] = &__block_descriptor_tmp_40_14067;
  v27[4] = a1[5];
  nw_utilities_get_c_string_from_cfstring(Username, 0x201u, v27);
  v17 = (const __CFString *)CFURLCredentialCopyPassword();
  v26[0] = v16;
  v26[1] = 0x40000000;
  v26[2] = ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2_41;
  v26[3] = &__block_descriptor_tmp_42_14068;
  v26[4] = a1[5];
  nw_utilities_get_c_string_from_cfstring(v17, 0x201u, v26);
  nw_authentication_credential_set_persistence(*(void **)(a1[5] + 672), 1);
  if (nw_http_authentication_apply_authorization(a1[7], *(_CFHTTPAuthentication **)(a1[5] + 864), *(void **)(a1[5] + 672), *(_DWORD *)(a1[5] + 1048), 1, 1, 0, a1[4]))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, BOOL))(a1[4] + 16))(a1[4], *(_QWORD *)(a1[5] + 960), 0, (*(_DWORD *)(a1[5] + 1048) & 0xFFFFFFFE) == 4);
    if (!v17)
      return;
  }
  else
  {
    (*(void (**)(void))(a1[4] + 16))();
    if (!v17)
      return;
  }
  CFRelease(v17);
}

void ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_39(uint64_t a1, const char *a2)
{
  nw_authentication_credential_set_username(*(void **)(*(_QWORD *)(a1 + 32) + 672), a2);
}

void ___ZL47nw_http_authentication_ask_authbroker_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_2_41(uint64_t a1, const char *a2)
{
  nw_authentication_credential_set_password(*(void **)(*(_QWORD *)(a1 + 32) + 672), a2);
}

BOOL ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke(uint64_t a1, void *a2)
{
  _CFHTTPAuthentication *http_authentication;
  int IsValid;

  http_authentication = (_CFHTTPAuthentication *)nw_authentication_credential_cache_entry_get_http_authentication(a2);
  IsValid = CFHTTPAuthenticationIsValid(http_authentication, 0);
  if (http_authentication)
    os_release(http_authentication);
  return IsValid == 0;
}

uint64_t __Block_byref_object_copy__14076(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__14077(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

BOOL ___ZL45nw_http_authentication_copy_protocol_metadataP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  _BOOL4 is_http_connection;
  uint64_t v6;
  char v7;
  void *v8;

  v3 = a3;
  is_http_connection = nw_protocol_metadata_is_http_connection(a3);
  if (is_http_connection)
  {
    if (v3)
      v3 = os_retain(v3);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(_BYTE *)(v6 + 48);
    if ((v7 & 1) != 0)
    {
      v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        v7 = *(_BYTE *)(v6 + 48);
      }
    }
    *(_QWORD *)(v6 + 40) = v3;
    *(_BYTE *)(v6 + 48) = v7 | 1;
  }
  return !is_http_connection;
}

void ___ZL45nw_protocol_http_authentication_get_callbacksv_block_invoke()
{
  qword_1EDCE3F00 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_1EDCE3F08 = nw_protocol_common_get_output_frames;
  qword_1EDCE3F20 = (uint64_t)nw_protocol_common_get_parameters;
  unk_1EDCE3F28 = nw_protocol_common_get_path;
  qword_1EDCE3F30 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCE3F38 = nw_protocol_common_get_remote_endpoint;
  qword_1EDCE3EC0 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_1EDCE3EC8 = nw_protocol_common_connect;
  qword_1EDCE3ED0 = (uint64_t)nw_protocol_common_disconnect;
  unk_1EDCE3ED8 = nw_protocol_common_connected;
  qword_1EDCE3EF0 = (uint64_t)nw_protocol_common_input_available;
  unk_1EDCE3EF8 = nw_protocol_common_output_available;
  qword_1EDCE3F70 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCE3F78 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCE3FB8 = (uint64_t)nw_protocol_common_input_flush;
  qword_1EDCE3EE0 = (uint64_t)nw_protocol_common_disconnected;
  unk_1EDCE3EE8 = nw_protocol_common_error;
  qword_1EDCE3FA8 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_1EDCE3FB0 = nw_protocol_common_reset;
  qword_1EDCE3F90 = (uint64_t)nw_protocol_common_copy_info;
  qword_1EDCE3F60 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_1EDCE3F68 = nw_protocol_common_input_finished;
  qword_1EDCE3F80 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_1EDCE3F88 = nw_protocol_common_waiting_for_output;
  qword_1EDCE3F40 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCE3F48 = nw_protocol_common_unregister_notification;
  qword_1EDCE3F50 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCE3F58 = nw_protocol_common_updated_path;
  qword_1EDCE3F10 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_1EDCE3F18 = nw_protocol_common_link_state;
  nw_protocol_http_authentication_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  *(_QWORD *)algn_1EDCE3EB8 = nw_protocol_http_authentication_remove_input_handler;
}

uint64_t nw_protocol_http_authentication_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  void *handle;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  _QWORD v13[5];
  char v14;
  _QWORD v15[5];
  char v16;
  os_log_type_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = ___ZL52nw_protocol_http_authentication_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v15[3] = &__block_descriptor_tmp_109;
      v15[4] = handle;
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 0x40000000;
      v13[2] = ___ZL52nw_protocol_http_authentication_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v13[3] = &__block_descriptor_tmp_110;
      v14 = a3;
      v13[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v15, (uint64_t)v13);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http_authentication_remove_input_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    v17 = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &v17, &v16))
      goto LABEL_32;
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_authentication_remove_input_handler";
        v8 = "%{public}s called with null http_authentication";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v16)
    {
      v6 = __nwlog_obj();
      v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_authentication_remove_input_handler";
        v8 = "%{public}s called with null http_authentication, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = v17;
    v12 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_authentication_remove_input_handler";
        v8 = "%{public}s called with null http_authentication, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_http_authentication_remove_input_handler";
      v20 = 2082;
      v21 = backtrace_string;
      v11 = "%{public}s called with null http_authentication, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_http_authentication_remove_input_handler";
  v5 = (char *)_os_log_send_and_compose_impl();
  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v5, &v17, &v16))
    goto LABEL_32;
  if (v17 != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      v6 = __nwlog_obj();
      v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_authentication_remove_input_handler";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = v17;
    v10 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_authentication_remove_input_handler";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_http_authentication_remove_input_handler";
      v20 = 2082;
      v21 = backtrace_string;
      v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v6, v7, v11, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v6 = __nwlog_obj();
  v7 = v17;
  if (os_log_type_enabled(v6, v17))
  {
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http_authentication_remove_input_handler";
    v8 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
  }
LABEL_32:
  if (v5)
    free(v5);
  return 0;
}

void ___ZL52nw_protocol_http_authentication_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  const void *v5;
  char v6;
  const void *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136446210;
      v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(_QWORD *)(v2 + 328) = 0;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(v3 + 464);
  if ((v4 & 1) != 0)
  {
    v5 = *(const void **)(v3 + 456);
    if (v5)
    {
      _Block_release(v5);
      v4 = *(_BYTE *)(v3 + 464);
    }
  }
  *(_QWORD *)(v3 + 456) = 0;
  *(_BYTE *)(v3 + 464) = v4 | 1;
  v6 = *(_BYTE *)(v3 + 512);
  if ((v6 & 1) != 0)
  {
    v7 = *(const void **)(v3 + 504);
    if (v7)
    {
      _Block_release(v7);
      v6 = *(_BYTE *)(v3 + 512);
    }
  }
  *(_QWORD *)(v3 + 504) = 0;
  *(_BYTE *)(v3 + 512) = v6 | 1;
}

void ___ZL52nw_protocol_http_authentication_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    nw_http_authentication_destroy(*(_QWORD *)(a1 + 32));
}

double __nw_protocol_http_authentication_identifier_block_invoke()
{
  double result;

  strcpy((char *)&nw_protocol_http_authentication_identifier::protocol_identifier, "http_authentication");
  *(_QWORD *)&result = 0x100000005;
  qword_1EDCE401C = 0x100000005;
  return result;
}

void sub_1834D8DBC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_1834D9AD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1834D9BDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1834D9C30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1834D9C88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1834D9CF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1834DA558(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1834DA6DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1834DA860(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1834DA9F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1834DAB6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1834DAC98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1834DAD3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_endpoint_t nw_endpoint_create_bonjour_service(const char *name, const char *type, const char *domain)
{
  size_t v6;
  NSObject *v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  size_t v12;
  char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  id v16;
  os_log_type_t v17;
  size_t v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _BOOL4 v21;
  id v22;
  os_log_type_t v23;
  NWConcrete_nw_bonjour_service_endpoint *v24;
  id v25;
  char *v26;
  char *v27;
  char *v28;
  size_t v29;
  DNSServiceErrorType v30;
  _DWORD *dns_error;
  NSObject *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  id v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  os_log_type_t v40;
  char *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  char *v44;
  id v45;
  NSObject *v46;
  char *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  os_log_type_t v50;
  nw_endpoint_t result;
  os_log_type_t v52;
  void *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  char *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  void *v61;
  os_log_type_t v62;
  char *backtrace_string;
  os_log_type_t v64;
  _BOOL4 v65;
  void *v66;
  os_log_type_t v67;
  os_log_type_t v68;
  os_log_type_t v69;
  _BOOL4 v70;
  void *v71;
  os_log_type_t v72;
  os_log_type_t v73;
  os_log_type_t v74;
  _BOOL4 v75;
  void *v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  NSObject *v80;
  void *v81;
  NSObject *v82;
  void *v83;
  NSObject *v84;
  void *v85;
  os_log_type_t v86;
  char *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  NSObject *v90;
  void *v91;
  os_log_type_t v92;
  char v93;
  os_log_type_t v94;
  objc_super v95;
  os_log_type_t typea[4];
  const char *v97;
  __int16 v98;
  _DWORD *v99;
  __int16 v100;
  char *v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  _DWORD *v105;
  uint8_t buf[4];
  const char *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  char *v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  if (!name)
  {
    __nwlog_obj();
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v107 = "nw_endpoint_create_bonjour_service";
    v9 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v95.receiver) = 0;
    if (!__nwlog_fault(v9, typea, &v95))
      goto LABEL_93;
    if (typea[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v62 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v10, v62, "%{public}s called with null name", buf, 0xCu);
      }
      goto LABEL_92;
    }
    if (!LOBYTE(v95.receiver))
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v68 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v10, v68, "%{public}s called with null name, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_92;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v64 = typea[0];
    v65 = os_log_type_enabled(v10, typea[0]);
    if (!backtrace_string)
    {
      if (v65)
      {
        *(_DWORD *)buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v10, v64, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }
      goto LABEL_92;
    }
    if (v65)
    {
      *(_DWORD *)buf = 136446466;
      v107 = "nw_endpoint_create_bonjour_service";
      v108 = 2082;
      v109 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v64, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_164:

    free(backtrace_string);
    goto LABEL_93;
  }
  v6 = strlen(name);
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v107 = "nw_endpoint_create_bonjour_service";
    v108 = 2082;
    v109 = "name";
    v9 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v95.receiver) = 0;
    if (!__nwlog_fault(v9, typea, &v95))
      goto LABEL_93;
    if (typea[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        v108 = 2082;
        v109 = "name";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
      goto LABEL_92;
    }
    if (!LOBYTE(v95.receiver))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v19 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        v108 = 2082;
        v109 = "name";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_92;
    }
    v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v14 = typea[0];
    v15 = os_log_type_enabled(v10, typea[0]);
    if (!v13)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        v108 = 2082;
        v109 = "name";
        _os_log_impl(&dword_182FBE000, v10, v14, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
      goto LABEL_92;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446722;
      v107 = "nw_endpoint_create_bonjour_service";
      v108 = 2082;
      v109 = "name";
      v110 = 2082;
      v111 = v13;
      _os_log_impl(&dword_182FBE000, v10, v14, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    goto LABEL_41;
  }
  if (v6 >= 0x400)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v107 = "nw_endpoint_create_bonjour_service";
      v108 = 2082;
      v109 = "name";
      v110 = 1024;
      LODWORD(v111) = 1024;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
    }
LABEL_33:

    return 0;
  }
  if (!type)
  {
    __nwlog_obj();
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v107 = "nw_endpoint_create_bonjour_service";
    v9 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v95.receiver) = 0;
    if (!__nwlog_fault(v9, typea, &v95))
      goto LABEL_93;
    if (typea[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v67 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v10, v67, "%{public}s called with null type", buf, 0xCu);
      }
      goto LABEL_92;
    }
    if (!LOBYTE(v95.receiver))
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v73 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v10, v73, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_92;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v69 = typea[0];
    v70 = os_log_type_enabled(v10, typea[0]);
    if (!backtrace_string)
    {
      if (v70)
      {
        *(_DWORD *)buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v10, v69, "%{public}s called with null type, no backtrace", buf, 0xCu);
      }
      goto LABEL_92;
    }
    if (v70)
    {
      *(_DWORD *)buf = 136446466;
      v107 = "nw_endpoint_create_bonjour_service";
      v108 = 2082;
      v109 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v69, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_164;
  }
  v12 = strlen(type);
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v107 = "nw_endpoint_create_bonjour_service";
    v108 = 2082;
    v109 = "type";
    v9 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v95.receiver) = 0;
    if (!__nwlog_fault(v9, typea, &v95))
      goto LABEL_93;
    if (typea[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v17 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        v108 = 2082;
        v109 = "type";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
      goto LABEL_92;
    }
    if (!LOBYTE(v95.receiver))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v40 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        v108 = 2082;
        v109 = "type";
        _os_log_impl(&dword_182FBE000, v10, v40, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_92;
    }
    v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v20 = typea[0];
    v21 = os_log_type_enabled(v10, typea[0]);
    if (!v13)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        v108 = 2082;
        v109 = "type";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
      goto LABEL_92;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446722;
      v107 = "nw_endpoint_create_bonjour_service";
      v108 = 2082;
      v109 = "type";
      v110 = 2082;
      v111 = v13;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
LABEL_41:

    free(v13);
    if (!v9)
      return 0;
    goto LABEL_94;
  }
  if (v12 >= 0x400)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v107 = "nw_endpoint_create_bonjour_service";
      v108 = 2082;
      v109 = "type";
      v110 = 1024;
      LODWORD(v111) = 1024;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
    }
    goto LABEL_33;
  }
  if (!domain)
  {
    __nwlog_obj();
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v107 = "nw_endpoint_create_bonjour_service";
    v9 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v95.receiver) = 0;
    if (!__nwlog_fault(v9, typea, &v95))
      goto LABEL_93;
    if (typea[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v72 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v10, v72, "%{public}s called with null domain", buf, 0xCu);
      }
      goto LABEL_92;
    }
    if (!LOBYTE(v95.receiver))
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v86 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v10, v86, "%{public}s called with null domain, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_92;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v74 = typea[0];
    v75 = os_log_type_enabled(v10, typea[0]);
    if (!backtrace_string)
    {
      if (v75)
      {
        *(_DWORD *)buf = 136446210;
        v107 = "nw_endpoint_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v10, v74, "%{public}s called with null domain, no backtrace", buf, 0xCu);
      }
      goto LABEL_92;
    }
    if (v75)
    {
      *(_DWORD *)buf = 136446466;
      v107 = "nw_endpoint_create_bonjour_service";
      v108 = 2082;
      v109 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v74, "%{public}s called with null domain, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_164;
  }
  v18 = strlen(domain);
  if (!v18)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v107 = "nw_endpoint_create_bonjour_service";
    v108 = 2082;
    v109 = "domain";
    v9 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v95.receiver) = 0;
    if (!__nwlog_fault(v9, typea, &v95))
      goto LABEL_93;
    if (typea[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v23 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        v108 = 2082;
        v109 = "domain";
        _os_log_impl(&dword_182FBE000, v10, v23, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
LABEL_92:

      goto LABEL_93;
    }
    if (!LOBYTE(v95.receiver))
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v50 = typea[0];
      if (os_log_type_enabled(v10, typea[0]))
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        v108 = 2082;
        v109 = "domain";
        _os_log_impl(&dword_182FBE000, v10, v50, "%{public}s invalid empty string %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_92;
    }
    v41 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v42 = typea[0];
    v43 = os_log_type_enabled(v10, typea[0]);
    if (!v41)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_endpoint_create_bonjour_service";
        v108 = 2082;
        v109 = "domain";
        _os_log_impl(&dword_182FBE000, v10, v42, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
      goto LABEL_92;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136446722;
      v107 = "nw_endpoint_create_bonjour_service";
      v108 = 2082;
      v109 = "domain";
      v110 = 2082;
      v111 = v41;
      _os_log_impl(&dword_182FBE000, v10, v42, "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }

    free(v41);
LABEL_93:
    if (!v9)
      return 0;
LABEL_94:
    free(v9);
    return 0;
  }
  if (v18 >= 0x400)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v107 = "nw_endpoint_create_bonjour_service";
      v108 = 2082;
      v109 = "domain";
      v110 = 1024;
      LODWORD(v111) = 1024;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
    }
    goto LABEL_33;
  }
  v24 = [NWConcrete_nw_bonjour_service_endpoint alloc];
  if (!v24)
  {
LABEL_106:
    __nwlog_obj();
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v107 = "nw_endpoint_create_bonjour_service";
    v54 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v95.receiver) = 0;
    if (__nwlog_fault(v54, typea, &v95))
    {
      if (typea[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v56 = typea[0];
        if (os_log_type_enabled(v55, typea[0]))
        {
          *(_DWORD *)buf = 136446210;
          v107 = "nw_endpoint_create_bonjour_service";
          _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s NWOSBonjourEndpoint alloc/init failed", buf, 0xCu);
        }
      }
      else if (LOBYTE(v95.receiver))
      {
        v57 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v58 = typea[0];
        v59 = os_log_type_enabled(v55, typea[0]);
        if (v57)
        {
          if (v59)
          {
            *(_DWORD *)buf = 136446466;
            v107 = "nw_endpoint_create_bonjour_service";
            v108 = 2082;
            v109 = v57;
            _os_log_impl(&dword_182FBE000, v55, v58, "%{public}s NWOSBonjourEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v57);
          goto LABEL_122;
        }
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          v107 = "nw_endpoint_create_bonjour_service";
          _os_log_impl(&dword_182FBE000, v55, v58, "%{public}s NWOSBonjourEndpoint alloc/init failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v60 = typea[0];
        if (os_log_type_enabled(v55, typea[0]))
        {
          *(_DWORD *)buf = 136446210;
          v107 = "nw_endpoint_create_bonjour_service";
          _os_log_impl(&dword_182FBE000, v55, v60, "%{public}s NWOSBonjourEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_122:
    if (v54)
      free(v54);
    v46 = 0;
LABEL_125:

    return v46;
  }
  v95.receiver = v24;
  v95.super_class = (Class)NWConcrete_nw_bonjour_service_endpoint;
  v25 = objc_msgSendSuper2(&v95, sel_init);
  if (!v25)
  {
    __nwlog_obj();
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v107 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
    v77 = (char *)_os_log_send_and_compose_impl();

    typea[0] = OS_LOG_TYPE_ERROR;
    v94 = OS_LOG_TYPE_DEFAULT;
    if ((__nwlog_fault(v77, typea, &v94) & 1) != 0)
    {
      if (typea[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v79 = typea[0];
        if (os_log_type_enabled(v78, typea[0]))
        {
          *(_DWORD *)buf = 136446210;
          v107 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
          _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v94)
      {
        v87 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v88 = typea[0];
        v89 = os_log_type_enabled(v78, typea[0]);
        if (v87)
        {
          if (v89)
          {
            *(_DWORD *)buf = 136446466;
            v107 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
            v108 = 2082;
            v109 = v87;
            _os_log_impl(&dword_182FBE000, v78, v88, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v87);
          goto LABEL_198;
        }
        if (v89)
        {
          *(_DWORD *)buf = 136446210;
          v107 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
          _os_log_impl(&dword_182FBE000, v78, v88, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v92 = typea[0];
        if (os_log_type_enabled(v78, typea[0]))
        {
          *(_DWORD *)buf = 136446210;
          v107 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
          _os_log_impl(&dword_182FBE000, v78, v92, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_198:
    if (v77)
      free(v77);
    goto LABEL_106;
  }
  v26 = strdup(name);
  if (!v26)
  {
    __nwlog_obj();
    v80 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v80, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v107 = "strict_strdup";
    v81 = (void *)_os_log_send_and_compose_impl();

    result = (nw_endpoint_t)__nwlog_abort((uint64_t)v81);
    if ((_DWORD)result)
      goto LABEL_200;
    free(v81);
  }
  *((_QWORD *)v25 + 29) = v26;
  v27 = strdup(type);
  if (!v27)
  {
    __nwlog_obj();
    v82 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v107 = "strict_strdup";
    v83 = (void *)_os_log_send_and_compose_impl();

    result = (nw_endpoint_t)__nwlog_abort((uint64_t)v83);
    if ((_DWORD)result)
      goto LABEL_200;
    free(v83);
  }
  *((_QWORD *)v25 + 30) = v27;
  v28 = strdup(domain);
  if (!v28)
  {
    __nwlog_obj();
    v84 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v84, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v107 = "strict_strdup";
    v85 = (void *)_os_log_send_and_compose_impl();

    result = (nw_endpoint_t)__nwlog_abort((uint64_t)v85);
    if ((_DWORD)result)
      goto LABEL_200;
    free(v85);
  }
  *((_QWORD *)v25 + 31) = v28;
  v29 = strlen(type);
  if (type[v29 - 1] == 46)
  {
    *(_BYTE *)(*((_QWORD *)v25 + 30) + v29 - 1) = 0;
    v28 = (char *)*((_QWORD *)v25 + 31);
  }
  v30 = DNSServiceConstructFullName((char *const)buf, *((const char *const *)v25 + 29), *((const char *const *)v25 + 30), v28);
  if (v30)
  {
    dns_error = nw_error_create_dns_error(v30);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v32 = (id)gLogObj;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = (_DWORD *)*((_QWORD *)v25 + 29);
      v34 = (char *)*((_QWORD *)v25 + 30);
      v35 = *((_QWORD *)v25 + 31);
      *(_DWORD *)typea = 136447235;
      v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
      v98 = 2085;
      v99 = v33;
      v100 = 2082;
      v101 = v34;
      v102 = 2085;
      v103 = v35;
      v104 = 2114;
      v105 = dns_error;
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_ERROR, "%{public}s DNSServiceConstructFullName(..., %{sensitive}s, %{public}s, %{sensitive}s) failed: %{public}@", (uint8_t *)typea, 0x34u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = (id)gLogObj;
    *(_DWORD *)typea = 136446466;
    v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
    v98 = 2114;
    v99 = dns_error;
    v37 = (char *)_os_log_send_and_compose_impl();

    v94 = OS_LOG_TYPE_ERROR;
    v93 = 0;
    if (!__nwlog_fault(v37, &v94, &v93))
      goto LABEL_103;
    if (v94 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      v39 = v94;
      if (os_log_type_enabled(v38, v94))
      {
        *(_DWORD *)typea = 136446466;
        v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
        v98 = 2114;
        v99 = dns_error;
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s DNSServiceConstructFullName failed: %{public}@ failed", (uint8_t *)typea, 0x16u);
      }
    }
    else if (v93)
    {
      v47 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      v48 = v94;
      v49 = os_log_type_enabled(v38, v94);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)typea = 136446722;
          v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
          v98 = 2114;
          v99 = dns_error;
          v100 = 2082;
          v101 = v47;
          _os_log_impl(&dword_182FBE000, v38, v48, "%{public}s DNSServiceConstructFullName failed: %{public}@ failed, dumping backtrace:%{public}s", (uint8_t *)typea, 0x20u);
        }

        free(v47);
        goto LABEL_103;
      }
      if (v49)
      {
        *(_DWORD *)typea = 136446466;
        v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
        v98 = 2114;
        v99 = dns_error;
        _os_log_impl(&dword_182FBE000, v38, v48, "%{public}s DNSServiceConstructFullName failed: %{public}@ failed, no backtrace", (uint8_t *)typea, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      v52 = v94;
      if (os_log_type_enabled(v38, v94))
      {
        *(_DWORD *)typea = 136446466;
        v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
        v98 = 2114;
        v99 = dns_error;
        _os_log_impl(&dword_182FBE000, v38, v52, "%{public}s DNSServiceConstructFullName failed: %{public}@ failed, backtrace limit exceeded", (uint8_t *)typea, 0x16u);
      }
    }

LABEL_103:
    if (v37)
      free(v37);

    goto LABEL_106;
  }
  v44 = strdup((const char *)buf);
  if (v44)
  {
LABEL_78:
    *((_QWORD *)v25 + 32) = v44;
    if (!strcmp(domain, "local") || strcmp(domain, "local."))
      *((_BYTE *)v25 + 231) |= 1u;
    v45 = v25;

    v46 = v45;
    goto LABEL_125;
  }
  __nwlog_obj();
  v90 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
  *(_DWORD *)typea = 136446210;
  v97 = "strict_strdup";
  v91 = (void *)_os_log_send_and_compose_impl();

  result = (nw_endpoint_t)__nwlog_abort((uint64_t)v91);
  if (!(_DWORD)result)
  {
    free(v91);
    goto LABEL_78;
  }
LABEL_200:
  __break(1u);
  return result;
}

void sub_1834DC940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_construct_composite_bonjour_name(char *fullName, unint64_t a2, char *service, char *regtype, char *domain, uint64_t a6)
{
  unint64_t v6;
  char *v7;
  NSObject *v8;
  const char *v9;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!fullName)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_construct_composite_bonjour_name";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32))
      goto LABEL_97;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_construct_composite_bonjour_name";
          v20 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v26 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_construct_composite_bonjour_name";
          v20 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      if (!v26)
        goto LABEL_74;
      *(_DWORD *)buf = 136446466;
      v35 = "nw_endpoint_construct_composite_bonjour_name";
      v36 = 2082;
      v37 = backtrace_string;
      v27 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_96;
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_construct_composite_bonjour_name";
    v20 = "%{public}s called with null buffer";
LABEL_95:
    _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
    goto LABEL_96;
  }
  v6 = a2;
  if (!a2)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_construct_composite_bonjour_name";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32))
      goto LABEL_97;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_construct_composite_bonjour_name";
          v20 = "%{public}s called with null buffer_len, backtrace limit exceeded";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v28 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_construct_composite_bonjour_name";
          v20 = "%{public}s called with null buffer_len, no backtrace";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      if (!v28)
        goto LABEL_74;
      *(_DWORD *)buf = 136446466;
      v35 = "nw_endpoint_construct_composite_bonjour_name";
      v36 = 2082;
      v37 = backtrace_string;
      v27 = "%{public}s called with null buffer_len, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_96;
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_construct_composite_bonjour_name";
    v20 = "%{public}s called with null buffer_len";
    goto LABEL_95;
  }
  if (!service)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_construct_composite_bonjour_name";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32))
      goto LABEL_97;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_construct_composite_bonjour_name";
          v20 = "%{public}s called with null name, backtrace limit exceeded";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v29 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_construct_composite_bonjour_name";
          v20 = "%{public}s called with null name, no backtrace";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      if (!v29)
        goto LABEL_74;
      *(_DWORD *)buf = 136446466;
      v35 = "nw_endpoint_construct_composite_bonjour_name";
      v36 = 2082;
      v37 = backtrace_string;
      v27 = "%{public}s called with null name, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_96;
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_construct_composite_bonjour_name";
    v20 = "%{public}s called with null name";
    goto LABEL_95;
  }
  if (!regtype)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_construct_composite_bonjour_name";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32))
      goto LABEL_97;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_96;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_endpoint_construct_composite_bonjour_name";
      v20 = "%{public}s called with null type";
      goto LABEL_95;
    }
    if (!v32)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_endpoint_construct_composite_bonjour_name";
        v20 = "%{public}s called with null type, backtrace limit exceeded";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v30 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_endpoint_construct_composite_bonjour_name";
        v20 = "%{public}s called with null type, no backtrace";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    if (!v30)
      goto LABEL_74;
    *(_DWORD *)buf = 136446466;
    v35 = "nw_endpoint_construct_composite_bonjour_name";
    v36 = 2082;
    v37 = backtrace_string;
    v27 = "%{public}s called with null type, dumping backtrace:%{public}s";
LABEL_73:
    _os_log_impl(&dword_182FBE000, v18, v19, v27, buf, 0x16u);
    goto LABEL_74;
  }
  if (!domain)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_construct_composite_bonjour_name";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v17, &type, &v32))
      goto LABEL_97;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_endpoint_construct_composite_bonjour_name";
        v20 = "%{public}s called with null domain";
        goto LABEL_95;
      }
LABEL_96:

LABEL_97:
      if (v17)
        free(v17);
      return 0;
    }
    if (!v32)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_endpoint_construct_composite_bonjour_name";
        v20 = "%{public}s called with null domain, backtrace limit exceeded";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v31 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_endpoint_construct_composite_bonjour_name";
        v20 = "%{public}s called with null domain, no backtrace";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_endpoint_construct_composite_bonjour_name";
      v36 = 2082;
      v37 = backtrace_string;
      v27 = "%{public}s called with null domain, dumping backtrace:%{public}s";
      goto LABEL_73;
    }
LABEL_74:

    free(backtrace_string);
    goto LABEL_97;
  }
  v7 = fullName;
  *fullName = 0;
  if (a2 <= 0x401)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_endpoint_construct_composite_bonjour_name";
      v9 = "%{public}s Insufficient buffer size";
LABEL_12:
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0xCu);
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  if (DNSServiceConstructFullName(fullName, service, regtype, domain))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_endpoint_construct_composite_bonjour_name";
      v9 = "%{public}s Failed to construct composite";
      goto LABEL_12;
    }
LABEL_13:

    return 0;
  }
  if (a6)
  {
    v12 = v7;
    v13 = v6;
    while (*v12)
    {
      ++v12;
      if (!--v13)
        goto LABEL_23;
    }
    if (v13 >= 2)
      *v12++ = 64;
    *v12 = 0;
LABEL_23:
    while (*v7)
    {
      ++v7;
      if (!--v6)
        return 1;
    }
    if (v6 < 2)
    {
LABEL_31:
      *v7 = 0;
    }
    else
    {
      v14 = 0;
      while (1)
      {
        v15 = *(unsigned __int8 *)(a6 + v14);
        v7[v14] = v15;
        if (!v15)
          break;
        --v6;
        ++v14;
        if (v6 <= 1)
        {
          v7 += v14;
          goto LABEL_31;
        }
      }
    }
  }
  return 1;
}

const char *__cdecl nw_endpoint_get_bonjour_service_name(nw_endpoint_t endpoint)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  const char *isa;
  id v6;
  NSObject *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  NSObject *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  int v18;
  os_log_type_t v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = endpoint;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_bonjour_service_name";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_service_name";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_bonjour_service_name";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_service_name";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_service_name";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = -[NSObject type](v3, "type");

  if (v4 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = -[NSObject type](v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_bonjour_service_name";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = -[NSObject type](v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_service_name";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = -[NSObject type](v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_bonjour_service_name";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = -[NSObject type](v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_service_name";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = -[NSObject type](v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_service_name";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      isa = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  isa = (const char *)v3[29].isa;
LABEL_25:

  return isa;
}

void sub_1834DD998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

const char *__cdecl nw_endpoint_get_bonjour_service_type(nw_endpoint_t endpoint)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  const char *isa;
  id v6;
  NSObject *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  NSObject *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  int v18;
  os_log_type_t v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = endpoint;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_bonjour_service_type";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_service_type";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_bonjour_service_type";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_service_type";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_service_type";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = -[NSObject type](v3, "type");

  if (v4 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = -[NSObject type](v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_bonjour_service_type";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = -[NSObject type](v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_service_type";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = -[NSObject type](v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_bonjour_service_type";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = -[NSObject type](v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_service_type";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = -[NSObject type](v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_service_type";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      isa = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  isa = (const char *)v3[30].isa;
LABEL_25:

  return isa;
}

void sub_1834DDFB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

const char *__cdecl nw_endpoint_get_bonjour_service_domain(nw_endpoint_t endpoint)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  const char *isa;
  id v6;
  NSObject *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  NSObject *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  int v18;
  os_log_type_t v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = endpoint;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_bonjour_service_domain";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_service_domain";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_bonjour_service_domain";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_service_domain";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_service_domain";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = -[NSObject type](v3, "type");

  if (v4 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = -[NSObject type](v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_bonjour_service_domain";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = -[NSObject type](v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_service_domain";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = -[NSObject type](v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_bonjour_service_domain";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = -[NSObject type](v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_service_domain";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = -[NSObject type](v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_service_domain";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      isa = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  isa = (const char *)v3[31].isa;
LABEL_25:

  return isa;
}

void sub_1834DE5D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_bonjour_fullname(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  int v18;
  os_log_type_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_bonjour_fullname";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_fullname";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_bonjour_fullname";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_fullname";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_bonjour_fullname";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_bonjour_fullname";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_fullname";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_bonjour_fullname";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_fullname";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_bonjour_fullname";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[32];
LABEL_25:

  return v5;
}

void sub_1834DEBF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id nw_ids_info_create(const char *a1, const char *a2, const char *a3)
{
  NSObject *v6;
  NSObject *v7;
  NWConcrete_nw_ids_info *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  id result;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t receiver;
  void *v18;
  os_log_type_t v19;
  os_log_type_t v20;
  void *v21;
  NSObject *v22;
  os_log_type_t v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  os_log_type_t v42;
  char v43;
  os_log_type_t type;
  objc_super v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_ids_info_create";
    v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v45.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v45, &type))
      goto LABEL_59;
    if (LOBYTE(v45.receiver) == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_ids_info_create";
        _os_log_impl(&dword_182FBE000, v16, receiver, "%{public}s called with null session_id", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v39 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_ids_info_create";
        _os_log_impl(&dword_182FBE000, v16, v39, "%{public}s called with null session_id, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v31 = (os_log_type_t)v45.receiver;
    v32 = os_log_type_enabled(v16, (os_log_type_t)v45.receiver);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_ids_info_create";
        _os_log_impl(&dword_182FBE000, v16, v31, "%{public}s called with null session_id, no backtrace", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_ids_info_create";
      v48 = 2082;
      v49 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v31, "%{public}s called with null session_id, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_52;
  }
  if (!a2)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_ids_info_create";
    v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v45.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v45, &type))
      goto LABEL_59;
    if (LOBYTE(v45.receiver) == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_ids_info_create";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null pseudonym", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v40 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_ids_info_create";
        _os_log_impl(&dword_182FBE000, v16, v40, "%{public}s called with null pseudonym, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v33 = (os_log_type_t)v45.receiver;
    v34 = os_log_type_enabled(v16, (os_log_type_t)v45.receiver);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_ids_info_create";
        _os_log_impl(&dword_182FBE000, v16, v33, "%{public}s called with null pseudonym, no backtrace", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_ids_info_create";
      v48 = 2082;
      v49 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v33, "%{public}s called with null pseudonym, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_52;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  v7 = v6;
  if (!a3)
  {
    *(_DWORD *)buf = 136446210;
    v47 = "nw_ids_info_create";
    v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v45.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v45, &type))
      goto LABEL_59;
    if (LOBYTE(v45.receiver) == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v20 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_ids_info_create";
        _os_log_impl(&dword_182FBE000, v16, v20, "%{public}s called with null push_token", buf, 0xCu);
      }
LABEL_82:

      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v41 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_ids_info_create";
        _os_log_impl(&dword_182FBE000, v16, v41, "%{public}s called with null push_token, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v35 = (os_log_type_t)v45.receiver;
    v36 = os_log_type_enabled(v16, (os_log_type_t)v45.receiver);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_ids_info_create";
        _os_log_impl(&dword_182FBE000, v16, v35, "%{public}s called with null push_token, no backtrace", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_ids_info_create";
      v48 = 2082;
      v49 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v35, "%{public}s called with null push_token, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_52:

    goto LABEL_58;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446978;
    v47 = "nw_ids_info_create";
    v48 = 2080;
    v49 = (void *)a1;
    v50 = 2080;
    v51 = a2;
    v52 = 2080;
    v53 = a3;
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s Creating IDS info with sessionId='%s', pseudonym='%s', push_token='%s'", buf, 0x2Au);
  }

  v8 = [NWConcrete_nw_ids_info alloc];
  if (!v8)
    return 0;
  v45.receiver = v8;
  v45.super_class = (Class)NWConcrete_nw_ids_info;
  v9 = objc_msgSendSuper2(&v45, sel_init);
  if (!v9)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if ((__nwlog_fault(v15, &type, &v43) & 1) == 0)
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s [super init] failed", buf, 0xCu);
      }
LABEL_85:

LABEL_59:
      if (v15)
        free(v15);
      return 0;
    }
    if (!v43)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
        _os_log_impl(&dword_182FBE000, v22, v42, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v22 = objc_claimAutoreleasedReturnValue();
    v37 = type;
    v38 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
        _os_log_impl(&dword_182FBE000, v22, v37, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "-[NWConcrete_nw_ids_info initWithSessionId:pseudonym:pushToken:]";
      v48 = 2082;
      v49 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v22, v37, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

LABEL_58:
    free(backtrace_string);
    goto LABEL_59;
  }
  v10 = strdup(a1);
  if (!v10)
  {
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v47 = "strict_strdup";
    v25 = (void *)_os_log_send_and_compose_impl();

    result = (id)__nwlog_abort((uint64_t)v25);
    if ((_DWORD)result)
      goto LABEL_86;
    free(v25);
  }
  v9[1] = v10;
  v11 = strdup(a2);
  if (v11)
  {
LABEL_10:
    v9[2] = v11;
    v12 = strdup(a3);
    if (v12)
    {
LABEL_11:
      v9[3] = v12;
      return v9;
    }
    __nwlog_obj();
    v28 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v47 = "strict_strdup";
    v29 = (void *)_os_log_send_and_compose_impl();

    result = (id)__nwlog_abort((uint64_t)v29);
    if (!(_DWORD)result)
    {
      free(v29);
      goto LABEL_11;
    }
    goto LABEL_86;
  }
  __nwlog_obj();
  v26 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v47 = "strict_strdup";
  v27 = (void *)_os_log_send_and_compose_impl();

  result = (id)__nwlog_abort((uint64_t)v27);
  if (!(_DWORD)result)
  {
    free(v27);
    goto LABEL_10;
  }
LABEL_86:
  __break(1u);
  return result;
}

void sub_1834DF81C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t nw_ids_info_get_session_id(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_ids_info_get_session_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ids_info_get_session_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null info", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_ids_info_get_session_id";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ids_info_get_session_id";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ids_info_get_session_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null info, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_ids_info_get_pseudonym(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_ids_info_get_pseudonym";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ids_info_get_pseudonym";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null info", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_ids_info_get_pseudonym";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ids_info_get_pseudonym";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ids_info_get_pseudonym";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null info, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_ids_info_get_push_token(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_ids_info_get_push_token";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ids_info_get_push_token";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null info", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_ids_info_get_push_token";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ids_info_get_push_token";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ids_info_get_push_token";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null info, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __Block_byref_object_copy__14641(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14642(uint64_t a1)
{

}

uint64_t nw_advertise_descriptor_copy_description(void *a1)
{
  const char **v1;
  const char **v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    v3 = *((_DWORD *)v1 + 2);
    if (v3 == 2)
    {
      v8 = v1[7];
      if (!v8)
        v8 = "<NULL>";
      asprintf((char **)buf, "%s.%s scope:%x route:%x", v1[6], v8, *((_DWORD *)v1 + 16), *((_DWORD *)v1 + 17));
    }
    else if (v3 == 1)
    {
      v4 = "<NULL>";
      v5 = v1[2];
      if (!v5)
        v5 = "<NULL>";
      v6 = v1[5];
      if (v1[4])
        v4 = v1[4];
      if (v6)
        v6 = (const char *)*((_QWORD *)v6 + 2);
      if (((_BYTE)v1[9] & 1) != 0)
        v7 = " noAutoRename";
      else
        v7 = "";
      asprintf((char **)buf, "%s.%s.%s txtLength:%zu%s", v5, v1[3], v4, (size_t)v6, v7);
    }
    v9 = *(_QWORD *)buf;
    goto LABEL_18;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_advertise_descriptor_copy_description";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_advertise_descriptor_copy_description";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_advertise_descriptor_copy_description";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_advertise_descriptor_copy_description";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_advertise_descriptor_copy_description";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v12)
    free(v12);
  v9 = 0;
LABEL_18:

  return v9;
}

void sub_1834E172C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_advertise_descriptor_t nw_advertise_descriptor_create_bonjour_service(const char *name, const char *type, const char *domain)
{
  NWConcrete_nw_advertise_descriptor *v6;
  const char *v7;
  NSObject *v8;
  char *v9;
  char *v10;
  char *v11;
  nw_advertise_descriptor_t result;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t receiver;
  void *v17;
  NSObject *v18;
  os_log_type_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t typea;
  objc_super v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!type)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_advertise_descriptor_create_bonjour_service";
    v14 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v35.receiver) = 16;
    typea = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, &v35, &typea))
      goto LABEL_54;
    if (LOBYTE(v35.receiver) == 17)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v35.receiver;
      if (os_log_type_enabled(v15, (os_log_type_t)v35.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_advertise_descriptor_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v15, receiver, "%{public}s called with null type", buf, 0xCu);
      }
    }
    else if (typea)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v27 = (os_log_type_t)v35.receiver;
      v28 = os_log_type_enabled(v15, (os_log_type_t)v35.receiver);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_advertise_descriptor_create_bonjour_service";
          v38 = 2082;
          v39 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }

        goto LABEL_41;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_advertise_descriptor_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null type, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v31 = (os_log_type_t)v35.receiver;
      if (os_log_type_enabled(v15, (os_log_type_t)v35.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_advertise_descriptor_create_bonjour_service";
        _os_log_impl(&dword_182FBE000, v15, v31, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_54;
  }
  v6 = [NWConcrete_nw_advertise_descriptor alloc];
  if (!v6)
    return 0;
  v35.receiver = v6;
  v35.super_class = (Class)NWConcrete_nw_advertise_descriptor;
  v7 = objc_msgSendSuper2(&v35, sel_init);
  v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
    v14 = (char *)_os_log_send_and_compose_impl();

    typea = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if ((__nwlog_fault(v14, &typea, &v33) & 1) == 0)
      goto LABEL_54;
    if (typea == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = typea;
      if (os_log_type_enabled(v18, typea))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s [super init] failed", buf, 0xCu);
      }
LABEL_53:

LABEL_54:
      if (v14)
        free(v14);
      return 0;
    }
    if (!v33)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v32 = typea;
      if (os_log_type_enabled(v18, typea))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
        _os_log_impl(&dword_182FBE000, v18, v32, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v29 = typea;
    v30 = os_log_type_enabled(v18, typea);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
        _os_log_impl(&dword_182FBE000, v18, v29, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
      v38 = 2082;
      v39 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v18, v29, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

LABEL_41:
    free(backtrace_string);
    goto LABEL_54;
  }
  *((_DWORD *)v7 + 2) = 1;
  if (name)
  {
    v9 = strdup(name);
    if (!v9)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v37 = "strict_strdup";
      v23 = (void *)_os_log_send_and_compose_impl();

      result = (nw_advertise_descriptor_t)__nwlog_abort((uint64_t)v23);
      if ((_DWORD)result)
        goto LABEL_57;
      free(v23);
    }
    v8[2].isa = (Class)v9;
  }
  v10 = strdup(type);
  if (!v10)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v37 = "strict_strdup";
    v21 = (void *)_os_log_send_and_compose_impl();

    result = (nw_advertise_descriptor_t)__nwlog_abort((uint64_t)v21);
    if ((_DWORD)result)
      goto LABEL_57;
    free(v21);
  }
  v8[3].isa = (Class)v10;
  if (v10[strlen(v10) - 1] == 46)
    v10[strlen(type) - 1] = 0;
  if (!domain)
    goto LABEL_13;
  v11 = strdup(domain);
  if (v11)
  {
LABEL_12:
    v8[4].isa = (Class)v11;
LABEL_13:
    LOBYTE(v8[9].isa) &= ~1u;
    return v8;
  }
  __nwlog_obj();
  v24 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v37 = "strict_strdup";
  v25 = (void *)_os_log_send_and_compose_impl();

  result = (nw_advertise_descriptor_t)__nwlog_abort((uint64_t)v25);
  if (!(_DWORD)result)
  {
    free(v25);
    goto LABEL_12;
  }
LABEL_57:
  __break(1u);
  return result;
}

void sub_1834E1E1C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id nw_advertise_descriptor_create_application_service_with_bundle_id(const char *a1, const char *a2)
{
  NWConcrete_nw_advertise_descriptor *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  id result;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  id v31;
  char *v32;
  NSObject *v33;
  os_log_type_t receiver;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  char v39;
  os_log_type_t type;
  objc_super v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = [NWConcrete_nw_advertise_descriptor alloc];
    if (!v4)
      goto LABEL_52;
    v41.receiver = v4;
    v41.super_class = (Class)NWConcrete_nw_advertise_descriptor;
    v5 = objc_msgSendSuper2(&v41, sel_init);
    v6 = v5;
    if (v5)
    {
      *((_DWORD *)v5 + 2) = 2;
      v7 = strdup(a1);
      if (v7)
      {
        v6[6] = v7;
        if (!a2)
        {
LABEL_8:
          v9 = v6;
LABEL_9:

          return v9;
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        v43 = "strict_strdup";
        v20 = (void *)_os_log_send_and_compose_impl();

        result = (id)__nwlog_abort((uint64_t)v20);
        if ((_DWORD)result)
        {
LABEL_71:
          __break(1u);
          return result;
        }
        free(v20);
        v6[6] = 0;
        if (!a2)
          goto LABEL_8;
      }
      v8 = strdup(a2);
      if (v8)
      {
LABEL_7:
        v6[7] = v8;
        goto LABEL_8;
      }
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v43 = "strict_strdup";
      v22 = (void *)_os_log_send_and_compose_impl();

      result = (id)__nwlog_abort((uint64_t)v22);
      if (!(_DWORD)result)
      {
        free(v22);
        goto LABEL_7;
      }
      goto LABEL_71;
    }
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if ((__nwlog_fault(v16, &type, &v39) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
            v44 = 2082;
            v45 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
          _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "-[NWConcrete_nw_advertise_descriptor initWithApplicationServiceName:bundleId:]";
          _os_log_impl(&dword_182FBE000, v17, v30, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_50:
    if (v16)
      free(v16);
LABEL_52:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
    v32 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v32, &v41, &type))
    {
      if (LOBYTE(v41.receiver) == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        receiver = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v33, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_182FBE000, v33, receiver, "%{public}s [nw_advertise_descriptor_t init] failed", buf, 0xCu);
        }
      }
      else if (type)
      {
        v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        v36 = (os_log_type_t)v41.receiver;
        v37 = os_log_type_enabled(v33, (os_log_type_t)v41.receiver);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
            v44 = 2082;
            v45 = v35;
            _os_log_impl(&dword_182FBE000, v33, v36, "%{public}s [nw_advertise_descriptor_t init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          goto LABEL_68;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_182FBE000, v33, v36, "%{public}s [nw_advertise_descriptor_t init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        v38 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v33, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_182FBE000, v33, v38, "%{public}s [nw_advertise_descriptor_t init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_68:
    if (v32)
      free(v32);
    v9 = 0;
    goto LABEL_9;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
  v12 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v41.receiver) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v12, &v41, &type))
  {
    if (LOBYTE(v41.receiver) == 17)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v13, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null application_service_name", buf, 0xCu);
      }
    }
    else if (type)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v24 = (os_log_type_t)v41.receiver;
      v25 = os_log_type_enabled(v13, (os_log_type_t)v41.receiver);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
          v44 = 2082;
          v45 = v23;
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null application_service_name, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_44;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
        _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null application_service_name, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v29 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v13, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_advertise_descriptor_create_application_service_with_bundle_id";
        _os_log_impl(&dword_182FBE000, v13, v29, "%{public}s called with null application_service_name, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_44:
  if (v12)
    free(v12);
  return 0;
}

void sub_1834E26B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t nw_advertise_descriptor_get_invitation_scope(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_advertise_descriptor_get_invitation_scope";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_advertise_descriptor_get_invitation_scope";
          _os_log_impl(&dword_182FBE000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_advertise_descriptor_get_invitation_scope";
          _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_advertise_descriptor_get_invitation_scope";
          _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_advertise_descriptor_get_invitation_scope";
        v23 = 2082;
        v24 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (v1[2] != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_advertise_descriptor_get_invitation_scope";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19))
      goto LABEL_21;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_get_invitation_scope";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s Advertise descriptor not of type application service", buf, 0xCu);
      }
    }
    else if (v19)
    {
      v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_advertise_descriptor_get_invitation_scope";
          v23 = 2082;
          v24 = v8;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s Advertise descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v8);
        if (!v5)
          goto LABEL_23;
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_get_invitation_scope";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s Advertise descriptor not of type application service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_get_invitation_scope";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s Advertise descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  v3 = v1[16];
LABEL_24:

  return v3;
}

uint64_t nw_advertise_descriptor_get_invitation_route(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_advertise_descriptor_get_invitation_route";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_advertise_descriptor_get_invitation_route";
          _os_log_impl(&dword_182FBE000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_advertise_descriptor_get_invitation_route";
          _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_advertise_descriptor_get_invitation_route";
          _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_advertise_descriptor_get_invitation_route";
        v23 = 2082;
        v24 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (v1[2] != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_advertise_descriptor_get_invitation_route";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19))
      goto LABEL_21;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_get_invitation_route";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s Advertise descriptor not of type application service", buf, 0xCu);
      }
    }
    else if (v19)
    {
      v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_advertise_descriptor_get_invitation_route";
          v23 = 2082;
          v24 = v8;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s Advertise descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v8);
        if (!v5)
          goto LABEL_23;
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_get_invitation_route";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s Advertise descriptor not of type application service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_get_invitation_route";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s Advertise descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  v3 = v1[17];
LABEL_24:

  return v3;
}

BOOL nw_advertise_descriptor_is_equal(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  id v7;
  _BOOL8 is_equal;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  int v19;
  int v20;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  is_equal = v5 == v6;
  if (v5 == v6 || !v5 || !v6)
    goto LABEL_34;
  v9 = (const char *)*((_QWORD *)v5 + 2);
  v10 = (const char *)*((_QWORD *)v7 + 2);
  if (v9 && v10)
  {
    if (strcmp(v9, v10))
      goto LABEL_33;
  }
  else if (v9 != v10)
  {
    goto LABEL_33;
  }
  v11 = (const char *)*((_QWORD *)v5 + 3);
  v12 = (const char *)*((_QWORD *)v7 + 3);
  if (v11 && v12)
  {
    if (strcmp(v11, v12))
      goto LABEL_33;
  }
  else if (v11 != v12)
  {
    goto LABEL_33;
  }
  v13 = (const char *)*((_QWORD *)v5 + 4);
  v14 = (const char *)*((_QWORD *)v7 + 4);
  if (v13 && v14)
  {
    if (strcmp(v13, v14))
      goto LABEL_33;
  }
  else if (v13 != v14)
  {
    goto LABEL_33;
  }
  v15 = (const char *)*((_QWORD *)v5 + 6);
  v16 = (const char *)*((_QWORD *)v7 + 6);
  if (v15 && v16)
  {
    if (strcmp(v15, v16))
      goto LABEL_33;
  }
  else if (v15 != v16)
  {
    goto LABEL_33;
  }
  v17 = (const char *)*((_QWORD *)v5 + 7);
  v18 = (const char *)*((_QWORD *)v7 + 7);
  if (!v17 || !v18)
  {
    if (v17 == v18)
      goto LABEL_29;
LABEL_33:
    is_equal = 0;
    goto LABEL_34;
  }
  if (strcmp(v17, v18))
    goto LABEL_33;
LABEL_29:
  if (*((_DWORD *)v5 + 16) != *((_DWORD *)v7 + 16))
    goto LABEL_33;
  v19 = *((_DWORD *)v5 + 17);
  v20 = *((_DWORD *)v7 + 17);
  is_equal = v19 == v20;
  if (v19 == v20 && (a3 & 1) == 0)
    is_equal = nw_txt_record_is_equal(*((nw_txt_record_t *)v5 + 5), *((nw_txt_record_t *)v7 + 5));
LABEL_34:

  return is_equal;
}

void sub_1834E3200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_advertise_descriptor_get_type(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[2];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_advertise_descriptor_get_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_advertise_descriptor_get_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_advertise_descriptor_get_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_advertise_descriptor_get_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_advertise_descriptor_get_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_advertise_descriptor_get_bonjour_name(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 2) == 1)
    {
      v3 = *((_QWORD *)v1 + 2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_bonjour_name";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_bonjour_name";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_bonjour_name";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_bonjour_name";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_4:

  return v3;
}

uint64_t nw_advertise_descriptor_get_bonjour_type(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 2) == 1)
    {
      v3 = *((_QWORD *)v1 + 3);
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_bonjour_type";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_bonjour_type";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_bonjour_type";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_bonjour_type";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_4:

  return v3;
}

uint64_t nw_advertise_descriptor_get_bonjour_domain(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 2) == 1)
    {
      v3 = *((_QWORD *)v1 + 4);
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_bonjour_domain";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_bonjour_domain";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_bonjour_domain";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_bonjour_domain";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_4:

  return v3;
}

void nw_advertise_descriptor_set_no_auto_rename(nw_advertise_descriptor_t advertise_descriptor, BOOL no_auto_rename)
{
  nw_advertise_descriptor_t v3;
  nw_advertise_descriptor_t v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = advertise_descriptor;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_advertise_descriptor_set_no_auto_rename";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_set_no_auto_rename";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_advertise_descriptor_set_no_auto_rename";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_set_no_auto_rename";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_set_no_auto_rename";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (LODWORD(v3[1].isa) == 1)
  {
    LOBYTE(v3[9].isa) = (uint64_t)v3[9].isa & 0xFE | no_auto_rename;
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_advertise_descriptor_set_no_auto_rename";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_no_auto_rename";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_no_auto_rename";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_no_auto_rename";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_advertise_descriptor_set_no_auto_rename";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

BOOL nw_advertise_descriptor_get_no_auto_rename(nw_advertise_descriptor_t advertise_descriptor)
{
  nw_advertise_descriptor_t v1;
  nw_advertise_descriptor_t v2;
  BOOL v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = advertise_descriptor;
  v2 = v1;
  if (v1)
  {
    if (LODWORD(v1[1].isa) == 1)
    {
      v3 = (uint64_t)v1[9].isa & 1;
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_no_auto_rename";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_no_auto_rename";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_no_auto_rename";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_no_auto_rename";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_4:

  return v3;
}

void nw_advertise_descriptor_set_txt_record(nw_advertise_descriptor_t advertise_descriptor, const void *txt_record, size_t txt_length)
{
  nw_advertise_descriptor_t v5;
  _QWORD *p_isa;
  nw_txt_record_t v7;
  Class isa;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = advertise_descriptor;
  p_isa = &v5->isa;
  if (!v5)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_advertise_descriptor_set_txt_record";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_advertise_descriptor_set_txt_record";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null advertise_descriptor", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_advertise_descriptor_set_txt_record";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v10)
          goto LABEL_8;
LABEL_43:
        free(v10);
        goto LABEL_8;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_advertise_descriptor_set_txt_record";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_advertise_descriptor_set_txt_record";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (LODWORD(v5[1].isa) == 1)
  {
    if (txt_record && txt_length)
    {
      v7 = nw_txt_record_create_with_bytes((const uint8_t *)txt_record, txt_length);
      isa = (Class)p_isa[5];
      p_isa[5] = v7;
    }
    else
    {
      isa = v5[5].isa;
      v5[5].isa = 0;
    }

    goto LABEL_8;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_advertise_descriptor_set_txt_record";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_advertise_descriptor_set_txt_record";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s invalid advertise descriptor type", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_advertise_descriptor_set_txt_record";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_advertise_descriptor_set_txt_record";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_advertise_descriptor_set_txt_record";
    v27 = 2082;
    v28 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_43;
LABEL_8:

}

void sub_1834E50C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_advertise_descriptor_get_txt_record(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_advertise_descriptor_get_txt_record";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null advertise_descriptor", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_advertise_descriptor_get_txt_record";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_28;
  }
  if (*((_DWORD *)v3 + 2) != 1)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_advertise_descriptor_get_txt_record";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s invalid advertise descriptor type", buf, 0xCu);
      }
LABEL_40:

LABEL_41:
      if (v9)
        free(v9);
      goto LABEL_43;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_advertise_descriptor_get_txt_record";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_28:

    free(backtrace_string);
    goto LABEL_41;
  }
  if (a2)
  {
    v5 = *((_QWORD *)v3 + 5);
    if (v5)
      v5 = *(_QWORD *)(v5 + 16);
    *a2 = v5;
  }
  v6 = *((_QWORD *)v3 + 5);
  if (!v6)
  {
LABEL_43:
    v7 = 0;
    goto LABEL_44;
  }
  v7 = *(_QWORD *)(v6 + 8);
LABEL_44:

  return v7;
}

void nw_advertise_descriptor_set_txt_record_object(nw_advertise_descriptor_t advertise_descriptor, nw_txt_record_t txt_record)
{
  nw_advertise_descriptor_t v3;
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = advertise_descriptor;
  v4 = txt_record;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_advertise_descriptor_set_txt_record_object";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_set_txt_record_object";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_advertise_descriptor_set_txt_record_object";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_set_txt_record_object";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_advertise_descriptor_set_txt_record_object";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (LODWORD(v3[1].isa) == 1)
  {
    objc_storeStrong((id *)&v3[5].isa, txt_record);
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_advertise_descriptor_set_txt_record_object";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_txt_record_object";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_txt_record_object";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_advertise_descriptor_set_txt_record_object";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_advertise_descriptor_set_txt_record_object";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

nw_txt_record_t nw_advertise_descriptor_copy_txt_record_object(nw_advertise_descriptor_t advertise_descriptor)
{
  nw_advertise_descriptor_t v1;
  nw_advertise_descriptor_t v2;
  NSObject *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = advertise_descriptor;
  v2 = v1;
  if (v1)
  {
    if (LODWORD(v1[1].isa) == 1)
    {
      v3 = v1[5].isa;
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_copy_txt_record_object";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_copy_txt_record_object";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_copy_txt_record_object";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_copy_txt_record_object";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_4:

  return v3;
}

nw_advertise_descriptor_t nw_advertise_descriptor_create_application_service(const char *application_service_name)
{
  if (nw_utilities_get_self_name::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44028);
  nw_advertise_descriptor_create_application_service_with_bundle_id(application_service_name, (const char *)nw_utilities_get_self_name::name);
  return (nw_advertise_descriptor_t)objc_claimAutoreleasedReturnValue();
}

const char *__cdecl nw_advertise_descriptor_get_application_service_name(nw_advertise_descriptor_t advertise_descriptor)
{
  nw_advertise_descriptor_t v1;
  nw_advertise_descriptor_t v2;
  const char *isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = advertise_descriptor;
  v2 = v1;
  if (v1)
  {
    if (LODWORD(v1[1].isa) == 2)
    {
      isa = (const char *)v1[6].isa;
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_application_service_name";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_application_service_name";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_application_service_name";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_application_service_name";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6)
    free(v6);
  isa = 0;
LABEL_4:

  return isa;
}

uint64_t nw_advertise_descriptor_get_bundle_id(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 2) == 2)
    {
      v3 = *((_QWORD *)v1 + 7);
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_bundle_id";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_bundle_id";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_advertise_descriptor_get_bundle_id";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_advertise_descriptor_get_bundle_id";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_4:

  return v3;
}

void nw_advertise_descriptor_set_invitation(void *a1, int a2, int a3)
{
  _DWORD *v5;
  void *v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_advertise_descriptor_set_invitation";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_advertise_descriptor_set_invitation";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_advertise_descriptor_set_invitation";
          _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_advertise_descriptor_set_invitation";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_advertise_descriptor_set_invitation";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v8)
      goto LABEL_23;
LABEL_22:
    free(v8);
    goto LABEL_23;
  }
  if (v5[2] == 2)
  {
    v5[16] = a2;
    v5[17] = a3;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v24 = "nw_advertise_descriptor_set_invitation";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_21;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_advertise_descriptor_set_invitation";
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s Advertise descriptor not of type application service", buf, 0xCu);
    }
LABEL_20:

    goto LABEL_21;
  }
  if (!v21)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v14 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_advertise_descriptor_set_invitation";
      _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s Advertise descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_20;
  }
  v11 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  v12 = type;
  v13 = os_log_type_enabled(v9, type);
  if (!v11)
  {
    if (v13)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_advertise_descriptor_set_invitation";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s Advertise descriptor not of type application service, no backtrace", buf, 0xCu);
    }
    goto LABEL_20;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_advertise_descriptor_set_invitation";
    v25 = 2082;
    v26 = v11;
    _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s Advertise descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v11);
  if (v8)
    goto LABEL_22;
LABEL_23:

}

_DWORD *nw_error_create_tls_error(int a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
    return -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 3, a1);
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_error_create_tls_error";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_error_create_tls_error";
        v6 = "%{public}s called with null error_code";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_error_create_tls_error";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null error_code, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_error_create_tls_error";
        v6 = "%{public}s called with null error_code, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_error_create_tls_error";
        v6 = "%{public}s called with null error_code, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
  return 0;
}

_DWORD *nw_error_create_error_with_inferred_domain(int a1)
{
  if (a1 >> 8 == 16776959)
    return nw_error_create_dns_error(a1);
  if ((a1 + 9899) > 0x63)
    return nw_error_create_posix_error(a1);
  return nw_error_create_tls_error(a1);
}

nw_error_domain_t nw_error_get_error_domain(nw_error_t error)
{
  nw_error_t v1;
  nw_error_t v2;
  nw_error_domain_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = error;
  v2 = v1;
  if (v1)
  {
    isa = (nw_error_domain_t)v1[1].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_error_get_error_domain";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_error_get_error_domain";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null error", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_error_get_error_domain";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_error_get_error_domain";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null error, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_error_get_error_domain";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null error, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = nw_error_domain_invalid;
LABEL_3:

  return isa;
}

uint64_t nw_error_is_equal(void *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  BOOL v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  if (v3 && v4)
  {
    if (v3[2] != v4[2])
    {
      v6 = 0;
      goto LABEL_10;
    }
    v5 = v3[3] == v4[3];
  }
  else
  {
    v5 = v3 == v4;
  }
  v6 = v5;
LABEL_10:

  return v6;
}

void *nw_nexus_create_with_options(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  int v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  _BOOL4 v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  int v38;
  char *v39;
  _BOOL4 v40;
  char *v41;
  _BOOL4 v42;
  _BOOL4 v43;
  NSObject *v44;
  os_log_type_t v45;
  uint32_t v46;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  _WORD v53[17];

  *(_QWORD *)&v53[13] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_nexus_create_with_options";
    v22 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v22, &type, &v48))
      goto LABEL_93;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = gLogObj;
      v24 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_93;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_nexus_create_with_options";
      v25 = "%{public}s called with null name";
    }
    else if (v48)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = gLogObj;
      v24 = type;
      v30 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_nexus_create_with_options";
          v52 = 2082;
          *(_QWORD *)v53 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_93:
        if (!v22)
          return 0;
LABEL_94:
        free(v22);
        return 0;
      }
      if (!v30)
        goto LABEL_93;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_nexus_create_with_options";
      v25 = "%{public}s called with null name, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = gLogObj;
      v24 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_93;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_nexus_create_with_options";
      v25 = "%{public}s called with null name, backtrace limit exceeded";
    }
    v44 = v23;
    v45 = v24;
    v46 = 12;
LABEL_92:
    _os_log_impl(&dword_182FBE000, v44, v45, v25, buf, v46);
    goto LABEL_93;
  }
  v8 = os_nexus_controller_create();
  if (!v8)
  {
    v26 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v51 = "nw_nexus_create_with_options";
    v52 = 1024;
    *(_DWORD *)v53 = v26;
    v22 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v22, &type, &v48))
      goto LABEL_93;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = gLogObj;
      v28 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_93;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_nexus_create_with_options";
      v52 = 1024;
      *(_DWORD *)v53 = v26;
      v25 = "%{public}s os_nexus_controller_create() %{darwin.errno}d";
LABEL_91:
      v44 = v27;
      v45 = v28;
      v46 = 18;
      goto LABEL_92;
    }
    if (!v48)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = gLogObj;
      v28 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_93;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_nexus_create_with_options";
      v52 = 1024;
      *(_DWORD *)v53 = v26;
      v25 = "%{public}s os_nexus_controller_create() %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_91;
    }
    v35 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = gLogObj;
    v28 = type;
    v36 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v35)
    {
      if (!v36)
        goto LABEL_93;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_nexus_create_with_options";
      v52 = 1024;
      *(_DWORD *)v53 = v26;
      v25 = "%{public}s os_nexus_controller_create() %{darwin.errno}d, no backtrace";
      goto LABEL_91;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446722;
      v51 = "nw_nexus_create_with_options";
      v52 = 1024;
      *(_DWORD *)v53 = v26;
      v53[2] = 2082;
      *(_QWORD *)&v53[3] = v35;
      v37 = "%{public}s os_nexus_controller_create() %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_61:
      _os_log_impl(&dword_182FBE000, v27, v28, v37, buf, 0x1Cu);
    }
LABEL_62:
    free(v35);
    if (!v22)
      return 0;
    goto LABEL_94;
  }
  v9 = v8;
  objc_opt_class();
  v10 = _os_object_alloc();
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_nexus_create_with_options";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (__nwlog_fault(v31, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = gLogObj;
        v33 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_nexus_create_with_options";
          v34 = "%{public}s nw_nexus_obj_alloc failed";
LABEL_77:
          _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
        }
      }
      else if (v48)
      {
        v39 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = gLogObj;
        v33 = type;
        v40 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_nexus_create_with_options";
            v52 = 2082;
            *(_QWORD *)v53 = v39;
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s nw_nexus_obj_alloc failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_78;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_nexus_create_with_options";
          v34 = "%{public}s nw_nexus_obj_alloc failed, no backtrace";
          goto LABEL_77;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = gLogObj;
        v33 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_nexus_create_with_options";
          v34 = "%{public}s nw_nexus_obj_alloc failed, backtrace limit exceeded";
          goto LABEL_77;
        }
      }
    }
LABEL_78:
    if (v31)
      free(v31);
    os_nexus_controller_destroy();
    return 0;
  }
  v11 = (void *)v10;
  v12 = 0;
  v13 = v10 + 24;
  v14 = 64;
  while (1)
  {
    v15 = *(unsigned __int8 *)(a1 + v12);
    *(_BYTE *)(v13 + v12) = v15;
    if (!v15)
      break;
    --v14;
    ++v12;
    if (v14 <= 1)
    {
      *(_BYTE *)(v13 + v12) = 0;
      break;
    }
  }
  *(_QWORD *)(v10 + 16) = v9;
  if (!os_nexus_attr_create())
  {
    v38 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v51 = "nw_nexus_create_with_options";
    v52 = 1024;
    *(_DWORD *)v53 = v38;
    v22 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v22, &type, &v48))
      goto LABEL_93;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = gLogObj;
      v28 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_93;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_nexus_create_with_options";
      v52 = 1024;
      *(_DWORD *)v53 = v38;
      v25 = "%{public}s os_nexus_attr_create() %{darwin.errno}d";
      goto LABEL_91;
    }
    if (!v48)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_93;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_nexus_create_with_options";
      v52 = 1024;
      *(_DWORD *)v53 = v38;
      v25 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_91;
    }
    v35 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = gLogObj;
    v28 = type;
    v43 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v35)
    {
      if (!v43)
        goto LABEL_93;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_nexus_create_with_options";
      v52 = 1024;
      *(_DWORD *)v53 = v38;
      v25 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, no backtrace";
      goto LABEL_91;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136446722;
      v51 = "nw_nexus_create_with_options";
      v52 = 1024;
      *(_DWORD *)v53 = v38;
      v53[2] = 2082;
      *(_QWORD *)&v53[3] = v35;
      v37 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (a2)
    os_nexus_attr_set();
  if (a3)
    os_nexus_attr_set();
  if (a4)
    os_nexus_attr_set();
  os_nexus_attr_set();
  v16 = os_nexus_controller_register_provider();
  os_nexus_attr_destroy();
  if (v16)
  {
    v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v51 = "nw_nexus_create_with_options";
    v52 = 1024;
    *(_DWORD *)v53 = v17;
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (__nwlog_fault(v18, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = gLogObj;
        v20 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_nexus_create_with_options";
          v52 = 1024;
          *(_DWORD *)v53 = v17;
          v21 = "%{public}s os_nexus_controller_register_provider() %{darwin.errno}d";
LABEL_85:
          _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0x12u);
        }
      }
      else if (v48)
      {
        v41 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = gLogObj;
        v20 = type;
        v42 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v41)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446722;
            v51 = "nw_nexus_create_with_options";
            v52 = 1024;
            *(_DWORD *)v53 = v17;
            v53[2] = 2082;
            *(_QWORD *)&v53[3] = v41;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s os_nexus_controller_register_provider() %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(v41);
          goto LABEL_86;
        }
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_nexus_create_with_options";
          v52 = 1024;
          *(_DWORD *)v53 = v17;
          v21 = "%{public}s os_nexus_controller_register_provider() %{darwin.errno}d, no backtrace";
          goto LABEL_85;
        }
      }
      else
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_nexus_create_with_options";
          v52 = 1024;
          *(_DWORD *)v53 = v17;
          v21 = "%{public}s os_nexus_controller_register_provider() %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_85;
        }
      }
    }
LABEL_86:
    if (v18)
      free(v18);
    os_release(v11);
    return 0;
  }
  return v11;
}

void *nw_nexus_create(uint64_t a1)
{
  return nw_nexus_create_with_options(a1, 0, 0, 0);
}

void nw_nexus_remove_instance()
{
  int v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  const char *v4;
  char *backtrace_string;
  _BOOL4 v6;
  char v7;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (os_nexus_controller_free_provider_instance())
  {
    v0 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v10 = "nw_nexus_remove_instance";
    v11 = 1024;
    v12 = v0;
    v1 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v7 = 0;
    if (!__nwlog_fault(v1, &type, &v7))
      goto LABEL_16;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v2 = gLogObj;
      v3 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_16;
      *(_DWORD *)buf = 136446466;
      v10 = "nw_nexus_remove_instance";
      v11 = 1024;
      v12 = v0;
      v4 = "%{public}s os_nexus_controller_free_provider_instance() %{darwin.errno}d";
    }
    else if (v7)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v2 = gLogObj;
      v3 = type;
      v6 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v6)
        {
          *(_DWORD *)buf = 136446722;
          v10 = "nw_nexus_remove_instance";
          v11 = 1024;
          v12 = v0;
          v13 = 2082;
          v14 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v2, v3, "%{public}s os_nexus_controller_free_provider_instance() %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
        goto LABEL_16;
      }
      if (!v6)
      {
LABEL_16:
        if (v1)
          free(v1);
        return;
      }
      *(_DWORD *)buf = 136446466;
      v10 = "nw_nexus_remove_instance";
      v11 = 1024;
      v12 = v0;
      v4 = "%{public}s os_nexus_controller_free_provider_instance() %{darwin.errno}d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v2 = gLogObj;
      v3 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_16;
      *(_DWORD *)buf = 136446466;
      v10 = "nw_nexus_remove_instance";
      v11 = 1024;
      v12 = v0;
      v4 = "%{public}s os_nexus_controller_free_provider_instance() %{darwin.errno}d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v2, v3, v4, buf, 0x12u);
    goto LABEL_16;
  }
}

BOOL nw_nexus_create_channel_to_new_instance_and_context(uint64_t a1, _DWORD *a2)
{
  int v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  uint64_t v8;
  os_log_type_t v9;
  int v10;
  char *v11;
  _BOOL4 v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint32_t v18;
  int v19;
  _BOOL4 v20;
  NSObject *v21;
  os_log_type_t v22;
  uint32_t v23;
  int v24;
  _BOOL8 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  char v29;
  os_log_type_t type;
  uuid_t out;
  unsigned __int8 uu[16];
  _BYTE buf[28];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  memset(uu, 0, sizeof(uu));
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
    v4 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v34) = 16;
    out[0] = 0;
    if (!__nwlog_fault(v4, &v34, out))
      goto LABEL_78;
    if (v34 == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = v34;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v34))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      v7 = "%{public}s called with null nexus";
    }
    else if (out[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = v34;
      v14 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v34);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          v15 = "%{public}s called with null nexus, dumping backtrace:%{public}s";
          v16 = v8;
          v17 = v9;
          v18 = 22;
LABEL_37:
          _os_log_impl(&dword_182FBE000, v16, v17, v15, buf, v18);
          goto LABEL_38;
        }
        goto LABEL_38;
      }
      if (!v14)
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      v7 = "%{public}s called with null nexus, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = v34;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v34))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      v7 = "%{public}s called with null nexus, backtrace limit exceeded";
    }
    v21 = v8;
    v22 = v9;
    v23 = 12;
LABEL_77:
    _os_log_impl(&dword_182FBE000, v21, v22, v7, buf, v23);
    goto LABEL_78;
  }
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  v34 = 0uLL;
  if (os_nexus_controller_alloc_provider_instance())
  {
    v3 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v3;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v4, &type, &v29))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v3;
      v7 = "%{public}s os_nexus_controller_alloc_provider_instance() %{darwin.errno}d";
    }
    else if (v29)
    {
      v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v11)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v3;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v11;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s os_nexus_controller_alloc_provider_instance() %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v11);
        if (!v4)
          return 0;
        goto LABEL_79;
      }
      if (!v12)
      {
LABEL_78:
        if (!v4)
          return 0;
LABEL_79:
        free(v4);
        return 0;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v3;
      v7 = "%{public}s os_nexus_controller_alloc_provider_instance() %{darwin.errno}d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v3;
      v7 = "%{public}s os_nexus_controller_alloc_provider_instance() %{darwin.errno}d, backtrace limit exceeded";
    }
    goto LABEL_76;
  }
  getpid();
  if (os_nexus_controller_bind_provider_instance())
  {
    v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v4, &type, &v29))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      v7 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d";
LABEL_76:
      v21 = v5;
      v22 = v6;
      v23 = 18;
      goto LABEL_77;
    }
    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      v7 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v20)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      v7 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d, no backtrace";
      goto LABEL_76;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_nexus_add_instance";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = backtrace_string;
      v15 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_36:
      v16 = v5;
      v17 = v6;
      v18 = 28;
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  *(_OWORD *)uu = v34;
  *(_QWORD *)&v34 = 0;
  if (!os_nexus_attr_create())
  {
    v24 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v24;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v4, &type, &v29))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      v7 = "%{public}s os_nexus_attr_create() %{darwin.errno}d";
      goto LABEL_76;
    }
    if (!v29)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      v7 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v27 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v27)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      v7 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, no backtrace";
      goto LABEL_76;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = backtrace_string;
      v15 = "%{public}s os_nexus_attr_create() %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_38;
  }
  if (os_nexus_controller_read_provider_attr())
  {
    v19 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v19;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v4, &type, &v29))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v19;
      v7 = "%{public}s os_nexus_controller_read_provider_attr() %{darwin.errno}d";
      goto LABEL_76;
    }
    if (!v29)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v19;
      v7 = "%{public}s os_nexus_controller_read_provider_attr() %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v26 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v26)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v19;
      v7 = "%{public}s os_nexus_controller_read_provider_attr() %{darwin.errno}d, no backtrace";
      goto LABEL_76;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_nexus_create_channel_to_new_instance_and_context";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v19;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = backtrace_string;
      v15 = "%{public}s os_nexus_controller_read_provider_attr() %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
LABEL_38:
    free(backtrace_string);
    goto LABEL_78;
  }
  os_nexus_attr_get();
  os_nexus_attr_destroy();
  *(_QWORD *)&buf[8] = 16;
  if ((_QWORD)v34)
    buf[12] = 1;
  *(_QWORD *)buf = out;
  v25 = nw_channel_create_with_attributes(a2, uu, 1u, (uint64_t)buf);
  if (!v25)
    nw_nexus_remove_instance();
  return v25;
}

BOOL nw_nexus_create_channel_to_new_instance(uint64_t a1)
{
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  return nw_nexus_create_channel_to_new_instance_and_context(a1, (id)nw_context_copy_implicit_context::implicit_context);
}

void nw_nexus_close_channel_and_instance(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char *v8;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  _BYTE buf[22];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = gLogObj;
      v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
      v5 = "%{public}s called with null nexus";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      goto LABEL_32;
    }
    if (!v10)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = gLogObj;
      v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
      v5 = "%{public}s called with null nexus, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = gLogObj;
    v4 = type;
    v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v7)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
      v5 = "%{public}s called with null nexus, no backtrace";
      goto LABEL_31;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null nexus, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_32:
    if (!v2)
      return;
    goto LABEL_33;
  }
  if (a2)
  {
    *(_OWORD *)buf = *(_OWORD *)(a2 + 88);
    nw_channel_close(a2, a2);
    nw_nexus_remove_instance();
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (!__nwlog_fault(v2, &type, &v10))
    goto LABEL_32;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = gLogObj;
    v4 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
    v5 = "%{public}s called with null channel";
    goto LABEL_31;
  }
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = gLogObj;
    v4 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
    v5 = "%{public}s called with null channel, backtrace limit exceeded";
    goto LABEL_31;
  }
  v8 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = gLogObj;
  v4 = type;
  v9 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v8)
  {
    if (!v9)
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
    v5 = "%{public}s called with null channel, no backtrace";
    goto LABEL_31;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_nexus_close_channel_and_instance";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v8;
    _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v8);
  if (v2)
LABEL_33:
    free(v2);
}

uint64_t nw_nexus_bind_client_port(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  char *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  NSObject *v20;
  os_log_type_t v21;
  uint32_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  _WORD v28[17];

  *(_QWORD *)&v28[13] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_nexus_bind_client_port";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v7, &type, &v23))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_nexus_bind_client_port";
      v10 = "%{public}s called with null nexus";
LABEL_48:
      v20 = v11;
      v21 = v12;
      v22 = 12;
      goto LABEL_49;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_nexus_bind_client_port";
      v10 = "%{public}s called with null nexus, backtrace limit exceeded";
      goto LABEL_48;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type;
    v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v14)
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_nexus_bind_client_port";
      v10 = "%{public}s called with null nexus, no backtrace";
      goto LABEL_48;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_nexus_bind_client_port";
      v27 = 2082;
      *(_QWORD *)v28 = backtrace_string;
      v15 = "%{public}s called with null nexus, dumping backtrace:%{public}s";
LABEL_32:
      _os_log_impl(&dword_182FBE000, v11, v12, v15, buf, 0x16u);
    }
LABEL_33:
    free(backtrace_string);
    if (!v7)
      return 0;
    goto LABEL_51;
  }
  if (!(a3 | a4) && (!a5 || !a6))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_nexus_bind_client_port";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v7, &type, &v23))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_nexus_bind_client_port";
      v10 = "%{public}s called with null process_uuid_ptr, pid_ptr, key";
      goto LABEL_48;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_nexus_bind_client_port";
      v10 = "%{public}s called with null process_uuid_ptr, pid_ptr, key, backtrace limit exceeded";
      goto LABEL_48;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type;
    v19 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v19)
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_nexus_bind_client_port";
      v10 = "%{public}s called with null process_uuid_ptr, pid_ptr, key, no backtrace";
      goto LABEL_48;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_nexus_bind_client_port";
      v27 = 2082;
      *(_QWORD *)v28 = backtrace_string;
      v15 = "%{public}s called with null process_uuid_ptr, pid_ptr, key, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (!os_nexus_controller_bind_provider_instance())
    return 1;
  v6 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v26 = "nw_nexus_bind_client_port";
  v27 = 1024;
  *(_DWORD *)v28 = v6;
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v7, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446466;
      v26 = "nw_nexus_bind_client_port";
      v27 = 1024;
      *(_DWORD *)v28 = v6;
      v10 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d";
LABEL_43:
      v20 = v8;
      v21 = v9;
      v22 = 18;
LABEL_49:
      _os_log_impl(&dword_182FBE000, v20, v21, v10, buf, v22);
      goto LABEL_50;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446466;
      v26 = "nw_nexus_bind_client_port";
      v27 = 1024;
      *(_DWORD *)v28 = v6;
      v10 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_43;
    }
    v17 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    v9 = type;
    v18 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v17)
    {
      if (!v18)
        goto LABEL_50;
      *(_DWORD *)buf = 136446466;
      v26 = "nw_nexus_bind_client_port";
      v27 = 1024;
      *(_DWORD *)v28 = v6;
      v10 = "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d, no backtrace";
      goto LABEL_43;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446722;
      v26 = "nw_nexus_bind_client_port";
      v27 = 1024;
      *(_DWORD *)v28 = v6;
      v28[2] = 2082;
      *(_QWORD *)&v28[3] = v17;
      _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s os_nexus_controller_bind_provider_instance(SERVER) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
    }
    free(v17);
  }
LABEL_50:
  if (v7)
LABEL_51:
    free(v7);
  return 0;
}

void nw_nexus_close(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      os_nexus_controller_destroy();
      *(_QWORD *)(a1 + 16) = 0;
    }
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_nexus_close";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = gLogObj;
      v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "nw_nexus_close";
      v5 = "%{public}s called with null nexus";
      goto LABEL_17;
    }
    if (!v8)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = gLogObj;
      v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "nw_nexus_close";
      v5 = "%{public}s called with null nexus, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = gLogObj;
    v4 = type;
    v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v11 = "nw_nexus_close";
        v12 = 2082;
        v13 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null nexus, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "nw_nexus_close";
      v5 = "%{public}s called with null nexus, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

uint64_t nw_protocol_default_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  nw_protocol_identifier *v7;
  const char *v8;
  char *v9;
  _BOOL4 v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  nw_protocol_identifier *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  nw_protocol_identifier *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!a1)
  {
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_default_add_input_handler";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_add_input_handler";
      v8 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v21 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_protocol_default_add_input_handler";
          v26 = 2082;
          v27 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v4)
          goto LABEL_28;
        return 0;
      }
      if (!v21)
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_add_input_handler";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_add_input_handler";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    v14 = v18;
    v15 = v19;
    v16 = 12;
    goto LABEL_26;
  }
  identifier = a1->identifier;
  if (!identifier)
    identifier = (nw_protocol_identifier *)"invalid";
  *(_DWORD *)buf = 136446466;
  v25 = "nw_protocol_default_add_input_handler";
  v26 = 2082;
  v27 = identifier;
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v4, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v7 = a1->identifier;
      if (!v7)
        v7 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_add_input_handler";
      v26 = 2082;
      v27 = v7;
      v8 = "%{public}s Default protocol handler does not support add_input_handler for %{public}s";
LABEL_25:
      v14 = v5;
      v15 = v6;
      v16 = 22;
LABEL_26:
      _os_log_impl(&dword_182FBE000, v14, v15, v8, buf, v16);
      goto LABEL_27;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v12 = a1->identifier;
      if (!v12)
        v12 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_add_input_handler";
      v26 = 2082;
      v27 = v12;
      v8 = "%{public}s Default protocol handler does not support add_input_handler for %{public}s, backtrace limit exceeded";
      goto LABEL_25;
    }
    v9 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v9)
    {
      if (!v10)
        goto LABEL_27;
      v13 = a1->identifier;
      if (!v13)
        v13 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_add_input_handler";
      v26 = 2082;
      v27 = v13;
      v8 = "%{public}s Default protocol handler does not support add_input_handler for %{public}s, no backtrace";
      goto LABEL_25;
    }
    if (v10)
    {
      v11 = a1->identifier;
      if (!v11)
        v11 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v25 = "nw_protocol_default_add_input_handler";
      v26 = 2082;
      v27 = v11;
      v28 = 2082;
      v29 = v9;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s Default protocol handler does not support add_input_handler for %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v9);
  }
LABEL_27:
  if (v4)
LABEL_28:
    free(v4);
  return 0;
}

uint64_t nw_protocol_default_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  nw_protocol *default_input_handler;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  nw_protocol *v10;
  const char *v11;
  char *v13;
  _BOOL4 v14;
  nw_protocol *v15;
  nw_protocol *v16;
  nw_protocol *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint32_t v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  _BOOL4 v24;
  const char *v25;
  _BOOL4 v26;
  _BOOL4 v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  nw_protocol *v33;
  __int16 v34;
  nw_protocol *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_default_replace_input_handler";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v7, &type, &v28))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_protocol_default_replace_input_handler";
      v11 = "%{public}s called with null protocol";
      goto LABEL_65;
    }
    if (!v28)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_protocol_default_replace_input_handler";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_65;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v24 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (!v24)
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_protocol_default_replace_input_handler";
      v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_65;
    }
    if (!v24)
      goto LABEL_52;
    *(_DWORD *)buf = 136446466;
    v31 = "nw_protocol_default_replace_input_handler";
    v32 = 2082;
    v33 = (nw_protocol *)backtrace_string;
    v25 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_51;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_default_replace_input_handler";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v7, &type, &v28))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_protocol_default_replace_input_handler";
      v11 = "%{public}s called with null old_input_handler";
      goto LABEL_65;
    }
    if (!v28)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_protocol_default_replace_input_handler";
      v11 = "%{public}s called with null old_input_handler, backtrace limit exceeded";
      goto LABEL_65;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v26 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (!v26)
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_protocol_default_replace_input_handler";
      v11 = "%{public}s called with null old_input_handler, no backtrace";
      goto LABEL_65;
    }
    if (!v26)
      goto LABEL_52;
    *(_DWORD *)buf = 136446466;
    v31 = "nw_protocol_default_replace_input_handler";
    v32 = 2082;
    v33 = (nw_protocol *)backtrace_string;
    v25 = "%{public}s called with null old_input_handler, dumping backtrace:%{public}s";
LABEL_51:
    _os_log_impl(&dword_182FBE000, v21, v22, v25, buf, 0x16u);
    goto LABEL_52;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_default_replace_input_handler";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v7, &type, &v28))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_protocol_default_replace_input_handler";
      v11 = "%{public}s called with null new_input_handler";
      goto LABEL_65;
    }
    if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v27 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_protocol_default_replace_input_handler";
          v32 = 2082;
          v33 = (nw_protocol *)backtrace_string;
          v25 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
          goto LABEL_51;
        }
LABEL_52:
        free(backtrace_string);
        goto LABEL_23;
      }
      if (!v27)
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_protocol_default_replace_input_handler";
      v11 = "%{public}s called with null new_input_handler, no backtrace";
    }
    else
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_protocol_default_replace_input_handler";
      v11 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
    }
LABEL_65:
    v18 = v21;
    v19 = v22;
    v20 = 12;
    goto LABEL_22;
  }
  if (a1->default_input_handler != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    default_input_handler = a1->default_input_handler;
    *(_DWORD *)buf = 136446722;
    v31 = "nw_protocol_default_replace_input_handler";
    v32 = 2048;
    v33 = default_input_handler;
    v34 = 2048;
    v35 = a2;
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v7, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v10 = a1->default_input_handler;
          *(_DWORD *)buf = 136446722;
          v31 = "nw_protocol_default_replace_input_handler";
          v32 = 2048;
          v33 = v10;
          v34 = 2048;
          v35 = a2;
          v11 = "%{public}s Old input handler does not match (%p != %p)";
LABEL_21:
          v18 = v8;
          v19 = v9;
          v20 = 32;
LABEL_22:
          _os_log_impl(&dword_182FBE000, v18, v19, v11, buf, v20);
        }
      }
      else if (v28)
      {
        v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = type;
        v14 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v13)
        {
          if (v14)
          {
            v15 = a1->default_input_handler;
            *(_DWORD *)buf = 136446978;
            v31 = "nw_protocol_default_replace_input_handler";
            v32 = 2048;
            v33 = v15;
            v34 = 2048;
            v35 = a2;
            v36 = 2082;
            v37 = v13;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Old input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v13);
          goto LABEL_23;
        }
        if (v14)
        {
          v17 = a1->default_input_handler;
          *(_DWORD *)buf = 136446722;
          v31 = "nw_protocol_default_replace_input_handler";
          v32 = 2048;
          v33 = v17;
          v34 = 2048;
          v35 = a2;
          v11 = "%{public}s Old input handler does not match (%p != %p), no backtrace";
          goto LABEL_21;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v16 = a1->default_input_handler;
          *(_DWORD *)buf = 136446722;
          v31 = "nw_protocol_default_replace_input_handler";
          v32 = 2048;
          v33 = v16;
          v34 = 2048;
          v35 = a2;
          v11 = "%{public}s Old input handler does not match (%p != %p), backtrace limit exceeded";
          goto LABEL_21;
        }
      }
    }
LABEL_23:
    if (v7)
      free(v7);
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a3);
  if (!a3->output_handler)
    nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
  return 1;
}

uint64_t nw_protocol_default_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  nw_protocol_identifier *v7;
  const char *v8;
  char *v9;
  _BOOL4 v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  nw_protocol_identifier *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  nw_protocol_identifier *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!a1)
  {
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_default_remove_input_handler";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_remove_input_handler";
      v8 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v21 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_protocol_default_remove_input_handler";
          v26 = 2082;
          v27 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v4)
          goto LABEL_28;
        return 0;
      }
      if (!v21)
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_remove_input_handler";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_remove_input_handler";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    v14 = v18;
    v15 = v19;
    v16 = 12;
    goto LABEL_26;
  }
  identifier = a1->identifier;
  if (!identifier)
    identifier = (nw_protocol_identifier *)"invalid";
  *(_DWORD *)buf = 136446466;
  v25 = "nw_protocol_default_remove_input_handler";
  v26 = 2082;
  v27 = identifier;
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v4, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v7 = a1->identifier;
      if (!v7)
        v7 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_remove_input_handler";
      v26 = 2082;
      v27 = v7;
      v8 = "%{public}s Default protocol handler does not support remove_input_handler for %{public}s";
LABEL_25:
      v14 = v5;
      v15 = v6;
      v16 = 22;
LABEL_26:
      _os_log_impl(&dword_182FBE000, v14, v15, v8, buf, v16);
      goto LABEL_27;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v12 = a1->identifier;
      if (!v12)
        v12 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_remove_input_handler";
      v26 = 2082;
      v27 = v12;
      v8 = "%{public}s Default protocol handler does not support remove_input_handler for %{public}s, backtrace limit exceeded";
      goto LABEL_25;
    }
    v9 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v9)
    {
      if (!v10)
        goto LABEL_27;
      v13 = a1->identifier;
      if (!v13)
        v13 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_remove_input_handler";
      v26 = 2082;
      v27 = v13;
      v8 = "%{public}s Default protocol handler does not support remove_input_handler for %{public}s, no backtrace";
      goto LABEL_25;
    }
    if (v10)
    {
      v11 = a1->identifier;
      if (!v11)
        v11 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v25 = "nw_protocol_default_remove_input_handler";
      v26 = 2082;
      v27 = v11;
      v28 = 2082;
      v29 = v9;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s Default protocol handler does not support remove_input_handler for %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v9);
  }
LABEL_27:
  if (v4)
LABEL_28:
    free(v4);
  return 0;
}

uint64_t nw_protocol_default_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  NSObject *v7;
  nw_protocol_identifier *identifier;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  nw_protocol_identifier *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = gLogObj;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      identifier = (nw_protocol_identifier *)"invalid";
      if (a1->identifier)
        identifier = a1->identifier;
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_default_get_input_frames";
      v20 = 2082;
      v21 = identifier;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Default protocol handler does not support get_input_frames for %{public}s", buf, 0x16u);
    }
    return 0;
  }
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_default_get_input_frames";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_get_input_frames";
      v13 = "%{public}s called with null protocol";
      goto LABEL_20;
    }
    if (!v16)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_get_input_frames";
      v13 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_default_get_input_frames";
        v20 = 2082;
        v21 = (nw_protocol_identifier *)backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_get_input_frames";
      v13 = "%{public}s called with null protocol, no backtrace";
LABEL_20:
      _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    }
  }
LABEL_21:
  if (v10)
    free(v10);
  return 0;
}

uint64_t nw_protocol_default_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  nw_protocol_identifier *identifier;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  nw_protocol_identifier *v11;
  const char *v12;
  char *v13;
  _BOOL4 v14;
  nw_protocol_identifier *v15;
  nw_protocol_identifier *v16;
  nw_protocol_identifier *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint32_t v20;
  NSObject *v22;
  os_log_type_t v23;
  char *backtrace_string;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  nw_protocol_identifier *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!a1)
  {
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_default_get_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_protocol_default_get_output_frames";
      v12 = "%{public}s called with null protocol";
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v25 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_protocol_default_get_output_frames";
          v30 = 2082;
          v31 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v8)
          goto LABEL_28;
        return 0;
      }
      if (!v25)
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_protocol_default_get_output_frames";
      v12 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_protocol_default_get_output_frames";
      v12 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    v18 = v22;
    v19 = v23;
    v20 = 12;
    goto LABEL_26;
  }
  identifier = a1->identifier;
  if (!identifier)
    identifier = (nw_protocol_identifier *)"invalid";
  *(_DWORD *)buf = 136446466;
  v29 = "nw_protocol_default_get_output_frames";
  v30 = 2082;
  v31 = identifier;
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v8, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v11 = a1->identifier;
      if (!v11)
        v11 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_default_get_output_frames";
      v30 = 2082;
      v31 = v11;
      v12 = "%{public}s Default protocol handler does not support get_output_frames for %{public}s";
LABEL_25:
      v18 = v9;
      v19 = v10;
      v20 = 22;
LABEL_26:
      _os_log_impl(&dword_182FBE000, v18, v19, v12, buf, v20);
      goto LABEL_27;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v16 = a1->identifier;
      if (!v16)
        v16 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_default_get_output_frames";
      v30 = 2082;
      v31 = v16;
      v12 = "%{public}s Default protocol handler does not support get_output_frames for %{public}s, backtrace limit exceeded";
      goto LABEL_25;
    }
    v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v13)
    {
      if (!v14)
        goto LABEL_27;
      v17 = a1->identifier;
      if (!v17)
        v17 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_default_get_output_frames";
      v30 = 2082;
      v31 = v17;
      v12 = "%{public}s Default protocol handler does not support get_output_frames for %{public}s, no backtrace";
      goto LABEL_25;
    }
    if (v14)
    {
      v15 = a1->identifier;
      if (!v15)
        v15 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v29 = "nw_protocol_default_get_output_frames";
      v30 = 2082;
      v31 = v15;
      v32 = 2082;
      v33 = v13;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s Default protocol handler does not support get_output_frames for %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v13);
  }
LABEL_27:
  if (v8)
LABEL_28:
    free(v8);
  return 0;
}

uint64_t nw_protocol_default_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  nw_protocol_identifier *identifier;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  nw_protocol_identifier *v7;
  const char *v8;
  char *v9;
  _BOOL4 v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  nw_protocol_identifier *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  nw_protocol_identifier *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!a1)
  {
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_default_finalize_output_frames";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_finalize_output_frames";
      v8 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v21 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_protocol_default_finalize_output_frames";
          v26 = 2082;
          v27 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v4)
          goto LABEL_28;
        return 0;
      }
      if (!v21)
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_finalize_output_frames";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_finalize_output_frames";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    v14 = v18;
    v15 = v19;
    v16 = 12;
    goto LABEL_26;
  }
  identifier = a1->identifier;
  if (!identifier)
    identifier = (nw_protocol_identifier *)"invalid";
  *(_DWORD *)buf = 136446466;
  v25 = "nw_protocol_default_finalize_output_frames";
  v26 = 2082;
  v27 = identifier;
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v4, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v7 = a1->identifier;
      if (!v7)
        v7 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_finalize_output_frames";
      v26 = 2082;
      v27 = v7;
      v8 = "%{public}s Default protocol handler does not support finalize_output_frames for %{public}s";
LABEL_25:
      v14 = v5;
      v15 = v6;
      v16 = 22;
LABEL_26:
      _os_log_impl(&dword_182FBE000, v14, v15, v8, buf, v16);
      goto LABEL_27;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v12 = a1->identifier;
      if (!v12)
        v12 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_finalize_output_frames";
      v26 = 2082;
      v27 = v12;
      v8 = "%{public}s Default protocol handler does not support finalize_output_frames for %{public}s, backtrace limit exceeded";
      goto LABEL_25;
    }
    v9 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v9)
    {
      if (!v10)
        goto LABEL_27;
      v13 = a1->identifier;
      if (!v13)
        v13 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_finalize_output_frames";
      v26 = 2082;
      v27 = v13;
      v8 = "%{public}s Default protocol handler does not support finalize_output_frames for %{public}s, no backtrace";
      goto LABEL_25;
    }
    if (v10)
    {
      v11 = a1->identifier;
      if (!v11)
        v11 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v25 = "nw_protocol_default_finalize_output_frames";
      v26 = 2082;
      v27 = v11;
      v28 = 2082;
      v29 = v9;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s Default protocol handler does not support finalize_output_frames for %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v9);
  }
LABEL_27:
  if (v4)
LABEL_28:
    free(v4);
  return 0;
}

void nw_protocol_default_link_state(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 48);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 24);
      if (v2)
      {
        v3 = *(void (**)(void))(v2 + 104);
        if (v3)
          v3();
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_protocol_default_link_state";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_default_link_state";
      v7 = "%{public}s called with null protocol";
      goto LABEL_19;
    }
    if (!v10)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_default_link_state";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "nw_protocol_default_link_state";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_default_link_state";
      v7 = "%{public}s called with null protocol, no backtrace";
LABEL_19:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_20:
  if (v4)
    free(v4);
}

uint64_t nw_protocol_default_get_output_interface(nw_protocol *a1)
{
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_output_interface)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_default_get_output_interface";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_get_output_interface";
      v8 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_default_get_output_interface";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (!v10)
      {
LABEL_20:
        if (v5)
          free(v5);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_get_output_interface";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_get_output_interface";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_20;
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      get_output_interface = (uint64_t (*)(void))callbacks->get_output_interface;
      if (get_output_interface)
        return get_output_interface();
    }
  }
  return 0;
}

void nw_protocol_default_connected(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*connected)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        connected = (void (*)(void))callbacks->connected;
        if (connected)
          connected();
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_default_connected";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_connected";
      v8 = "%{public}s called with null protocol";
      goto LABEL_19;
    }
    if (!v11)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_connected";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v14 = "nw_protocol_default_connected";
        v15 = 2082;
        v16 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_connected";
      v8 = "%{public}s called with null protocol, no backtrace";
LABEL_19:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_20:
  if (v5)
    free(v5);
}

uint64_t nw_protocol_default_reset(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  nw_protocol_identifier *v7;
  const char *v8;
  char *v9;
  _BOOL4 v10;
  nw_protocol_identifier *v11;
  nw_protocol_identifier *v12;
  nw_protocol_identifier *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  nw_protocol_identifier *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!a1)
  {
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_default_reset";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_reset";
      v8 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v21 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_protocol_default_reset";
          v26 = 2082;
          v27 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v4)
          goto LABEL_28;
        return 0;
      }
      if (!v21)
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_reset";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_default_reset";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    v14 = v18;
    v15 = v19;
    v16 = 12;
    goto LABEL_26;
  }
  identifier = a1->identifier;
  if (!identifier)
    identifier = (nw_protocol_identifier *)"invalid";
  *(_DWORD *)buf = 136446466;
  v25 = "nw_protocol_default_reset";
  v26 = 2082;
  v27 = identifier;
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v4, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v7 = a1->identifier;
      if (!v7)
        v7 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_reset";
      v26 = 2082;
      v27 = v7;
      v8 = "%{public}s Reset is not supported on default callback for %{public}s";
LABEL_25:
      v14 = v5;
      v15 = v6;
      v16 = 22;
LABEL_26:
      _os_log_impl(&dword_182FBE000, v14, v15, v8, buf, v16);
      goto LABEL_27;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_27;
      v12 = a1->identifier;
      if (!v12)
        v12 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_reset";
      v26 = 2082;
      v27 = v12;
      v8 = "%{public}s Reset is not supported on default callback for %{public}s, backtrace limit exceeded";
      goto LABEL_25;
    }
    v9 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v9)
    {
      if (!v10)
        goto LABEL_27;
      v13 = a1->identifier;
      if (!v13)
        v13 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_default_reset";
      v26 = 2082;
      v27 = v13;
      v8 = "%{public}s Reset is not supported on default callback for %{public}s, no backtrace";
      goto LABEL_25;
    }
    if (v10)
    {
      v11 = a1->identifier;
      if (!v11)
        v11 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v25 = "nw_protocol_default_reset";
      v26 = 2082;
      v27 = v11;
      v28 = 2082;
      v29 = v9;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s Reset is not supported on default callback for %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v9);
  }
LABEL_27:
  if (v4)
LABEL_28:
    free(v4);
  return 0;
}

uint64_t nw_protocol_default_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  NSObject *v3;
  nw_protocol_identifier *identifier;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  nw_protocol_identifier *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = gLogObj;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      identifier = (nw_protocol_identifier *)"invalid";
      if (a1->identifier)
        identifier = a1->identifier;
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_default_add_listen_handler";
      v16 = 2082;
      v17 = identifier;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s Default protocol handler does not support add_listen_handler for %{public}s", buf, 0x16u);
    }
    return 0;
  }
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_default_add_listen_handler";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_default_add_listen_handler";
      v9 = "%{public}s called with null protocol";
      goto LABEL_20;
    }
    if (!v12)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_default_add_listen_handler";
      v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v15 = "nw_protocol_default_add_listen_handler";
        v16 = 2082;
        v17 = (nw_protocol_identifier *)backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_default_add_listen_handler";
      v9 = "%{public}s called with null protocol, no backtrace";
LABEL_20:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_protocol_default_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  NSObject *v3;
  nw_protocol_identifier *identifier;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  nw_protocol_identifier *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = gLogObj;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      identifier = (nw_protocol_identifier *)"invalid";
      if (a1->identifier)
        identifier = a1->identifier;
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_default_remove_listen_handler";
      v16 = 2082;
      v17 = identifier;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s Default protocol handler does not support remove_listen_handler for %{public}s", buf, 0x16u);
    }
    return 0;
  }
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_default_remove_listen_handler";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_default_remove_listen_handler";
      v9 = "%{public}s called with null protocol";
      goto LABEL_20;
    }
    if (!v12)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_default_remove_listen_handler";
      v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v15 = "nw_protocol_default_remove_listen_handler";
        v16 = 2082;
        v17 = (nw_protocol_identifier *)backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_default_remove_listen_handler";
      v9 = "%{public}s called with null protocol, no backtrace";
LABEL_20:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_protocol_http_cookie_create()
{
  char *v0;
  id v1;
  id v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = (char *)malloc_type_calloc(1uLL, 0x160uLL, 0xEAFB8F1AuLL);
  if (!v0)
  {
    v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v10 = "strict_calloc";
    v11 = 2048;
    v12 = 1;
    v13 = 2048;
    v14 = 352;
    v5 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v5);
  }
  *((_OWORD *)v0 + 20) = 0u;
  *((_OWORD *)v0 + 21) = 0u;
  *((_OWORD *)v0 + 18) = 0u;
  *((_OWORD *)v0 + 19) = 0u;
  *((_OWORD *)v0 + 16) = 0u;
  *((_OWORD *)v0 + 17) = 0u;
  *((_OWORD *)v0 + 14) = 0u;
  *((_OWORD *)v0 + 15) = 0u;
  *((_OWORD *)v0 + 12) = 0u;
  *((_OWORD *)v0 + 13) = 0u;
  *((_OWORD *)v0 + 10) = 0u;
  *((_OWORD *)v0 + 11) = 0u;
  *((_OWORD *)v0 + 8) = 0u;
  *((_OWORD *)v0 + 9) = 0u;
  *((_OWORD *)v0 + 6) = 0u;
  *((_OWORD *)v0 + 7) = 0u;
  *((_OWORD *)v0 + 4) = 0u;
  *((_OWORD *)v0 + 5) = 0u;
  *((_OWORD *)v0 + 2) = 0u;
  *((_OWORD *)v0 + 3) = 0u;
  *(_OWORD *)v0 = 0u;
  *((_OWORD *)v0 + 1) = 0u;
  if (nw_protocol_http_cookie_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_cookie_identifier::onceToken, &__block_literal_global_15648);
  *((_QWORD *)v0 + 2) = &nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier;
  if (nw_protocol_http_cookie_get_callbacks(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_cookie_get_callbacks(void)::onceToken, &__block_literal_global_19_15649);
  *((_QWORD *)v0 + 3) = &nw_protocol_http_cookie_get_callbacks(void)::protocol_callbacks;
  *((_QWORD *)v0 + 5) = v0;
  if ((v0[264] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_http_log::onceToken != -1)
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44194);
    v6 = ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEBUG))
    {
      v7 = " ";
      v8 = v0 + 265;
      v10 = "nw_protocol_http_cookie_create";
      *(_DWORD *)buf = 136446722;
      if (!v0)
      {
        v7 = "";
        v8 = "";
      }
      v11 = 2082;
      v12 = (uint64_t)v8;
      v13 = 2080;
      v14 = (uint64_t)v7;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
  v1 = (id)nw_protocol_copy_http_cookie_definition_http_cookie_definition;
  *((_QWORD *)v0 + 13) = 0;
  *((_QWORD *)v0 + 9) = v0 + 104;
  *((_QWORD *)v0 + 14) = v0 + 104;
  *((_QWORD *)v0 + 15) = 0;
  *((_QWORD *)v0 + 16) = v0 + 120;
  *((_QWORD *)v0 + 17) = 0;
  *((_QWORD *)v0 + 18) = v0 + 136;
  v0[244] = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v2 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks((uint64_t)v0, v2, (uint64_t)nw_protocol_http_cookie_create::$_0::__invoke, (uint64_t)nw_protocol_http_cookie_create::$_1::__invoke);
  if (v2)
    os_release(v2);
  *((_QWORD *)v0 + 10) = v0 + 248;
  if (v1)
    os_release(v1);
  return (BOOL)v0;
}

void nw_protocol_http_cookie_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v8;
  id v9;
  int status_code;
  void *parameters;
  void *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD *v18;
  BOOL is_equal;
  _BOOL4 v20;
  void *v21;
  unsigned __int8 *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *backtrace_string;
  _BOOL4 v28;
  char *v29;
  _BOOL4 v30;
  const char *v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  void *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  void *v40;
  os_log_type_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  os_log_type_t v50;
  os_log_type_t v51;
  CFTypeRef v52;
  id v53;
  id v54;
  const __CFString *v55;
  id v56;
  id v57;
  _BYTE *v58;
  uint64_t v59;
  NSObject *v60;
  NSObject *v61;
  const void *v62;
  NSObject *v63;
  NSObject *v64;
  BOOL v65;
  const void *v66;
  CFTypeRef v67;
  CFTypeRef v68;
  const void *v69;
  _BOOL8 is_top_level_navigation;
  unsigned int v71;
  void *v72;
  void *v73;
  void *v74;
  const void *v75;
  id *v76;
  void *v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  void *v81;
  void *v82;
  NSObject *v83;
  os_log_type_t v84;
  void *v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  void *v89;
  os_log_type_t v90;
  char *v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  char *v95;
  NSObject *v96;
  _BOOL4 v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  char *v102;
  _BOOL4 v103;
  os_log_type_t v104;
  os_log_type_t v105;
  os_log_type_t v106;
  os_log_type_t v107;
  _BYTE *v108;
  uint64_t v109;
  char v110;
  id *v111;
  os_log_type_t v112[8];
  os_log_type_t v113;
  os_log_type_t v114;
  uint64_t (**aBlock)(void *, const void *);
  const void *cf;
  nw_endpoint_t endpoint;
  void *v118;
  unsigned __int8 *v119;
  char v120;
  os_log_type_t v121;
  _BYTE type[24];
  void *v123;
  id v124;
  CFTypeRef v125;
  os_log_type_t v126[8];
  const __CFString *v127;
  uint64_t (*v128)(uint64_t, uint64_t);
  const __CFString *v129;
  _BYTE *v130;
  _BYTE buf[24];
  void *(*v132)(uint64_t, uint64_t);
  void (*v133)(uint64_t);
  id v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v126[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v23, type, v126))
      goto LABEL_120;
    if (type[0] != 17)
    {
      if (v126[0] == OS_LOG_TYPE_DEFAULT)
      {
        v24 = __nwlog_obj();
        v25 = type[0];
        if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
          goto LABEL_120;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v26 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_119;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type[0];
      v28 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
      if (!backtrace_string)
      {
        if (!v28)
          goto LABEL_120;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v26 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_119;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "operator()";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_120:
      if (!v23)
        return;
      goto LABEL_121;
    }
    v24 = __nwlog_obj();
    v25 = type[0];
    if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
      goto LABEL_120;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = "%{public}s called with null protocol";
    goto LABEL_119;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v126[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v23, type, v126))
      goto LABEL_120;
    if (type[0] != 17)
    {
      if (v126[0] == OS_LOG_TYPE_DEFAULT)
      {
        v24 = __nwlog_obj();
        v25 = type[0];
        if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
          goto LABEL_120;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v26 = "%{public}s called with null http_cookie, backtrace limit exceeded";
        goto LABEL_119;
      }
      v29 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type[0];
      v30 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
      if (!v29)
      {
        if (!v30)
          goto LABEL_120;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v26 = "%{public}s called with null http_cookie, no backtrace";
        goto LABEL_119;
      }
      if (!v30)
        goto LABEL_72;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v29;
      v31 = "%{public}s called with null http_cookie, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    v24 = __nwlog_obj();
    v25 = type[0];
    if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
      goto LABEL_120;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = "%{public}s called with null http_cookie";
LABEL_119:
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
    goto LABEL_120;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v126[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v23, type, v126))
      goto LABEL_120;
    if (type[0] != 17)
    {
      if (v126[0] == OS_LOG_TYPE_DEFAULT)
      {
        v24 = __nwlog_obj();
        v25 = type[0];
        if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
          goto LABEL_120;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v26 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_119;
      }
      v29 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type[0];
      v32 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
      if (!v29)
      {
        if (!v32)
          goto LABEL_120;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v26 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_119;
      }
      if (!v32)
        goto LABEL_72;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v29;
      v31 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    v24 = __nwlog_obj();
    v25 = type[0];
    if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
      goto LABEL_120;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = "%{public}s called with null other_protocol";
    goto LABEL_119;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v126[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v23, type, v126))
      goto LABEL_120;
    if (type[0] != 17)
    {
      if (v126[0] == OS_LOG_TYPE_DEFAULT)
      {
        v24 = __nwlog_obj();
        v25 = type[0];
        if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
          goto LABEL_120;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v26 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_119;
      }
      v29 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type[0];
      v33 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
      if (!v29)
      {
        if (!v33)
          goto LABEL_120;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v26 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_119;
      }
      if (!v33)
        goto LABEL_72;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v29;
      v31 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    v24 = __nwlog_obj();
    v25 = type[0];
    if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
      goto LABEL_120;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = "%{public}s called with null metadata";
    goto LABEL_119;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v126[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v23, type, v126))
      goto LABEL_120;
    if (type[0] == 17)
    {
      v24 = __nwlog_obj();
      v25 = type[0];
      if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
        goto LABEL_120;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v26 = "%{public}s called with null completion";
      goto LABEL_119;
    }
    if (v126[0] == OS_LOG_TYPE_DEFAULT)
    {
      v24 = __nwlog_obj();
      v25 = type[0];
      if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
        goto LABEL_120;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v26 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_119;
    }
    v29 = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type[0];
    v34 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
    if (!v29)
    {
      if (!v34)
        goto LABEL_120;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v26 = "%{public}s called with null completion, no backtrace";
      goto LABEL_119;
    }
    if (!v34)
      goto LABEL_72;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v29;
    v31 = "%{public}s called with null completion, dumping backtrace:%{public}s";
LABEL_71:
    _os_log_impl(&dword_182FBE000, v24, v25, v31, buf, 0x16u);
    goto LABEL_72;
  }
  v8 = nw_http_metadata_copy_response(a3);
  if (v8)
  {
    v9 = v8;
    status_code = _nw_http_response_get_status_code();

    if (status_code != 101 && (status_code - 100) <= 0x63)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
LABEL_178:
      os_release(v9);
      return;
    }
    parameters = (void *)nw_protocol_get_parameters(*(_QWORD *)(v5 + 48));
    if (parameters)
      v12 = os_retain(parameters);
    else
      v12 = 0;
    v119 = nw_parameters_copy_protocol_options_legacy(v12, (nw_protocol *)v5);
    v13 = nw_http_cookie_options_copy_cookie_storage(v119);
    v14 = nw_parameters_copy_url_endpoint(v12);
    v118 = v13;
    if (!v13)
    {
LABEL_19:
      (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
      if (!v14)
      {
        v21 = v118;
        v22 = v119;
        if (!v118)
        {
LABEL_174:
          if (!v22)
            goto LABEL_176;
          goto LABEL_175;
        }
LABEL_172:
        os_release(v21);
        if (!v22)
        {
LABEL_176:
          if (v12)
            os_release(v12);
          goto LABEL_178;
        }
LABEL_175:
        os_release(v22);
        goto LABEL_176;
      }
LABEL_171:
      os_release(v14);
      v21 = v118;
      v22 = v119;
      if (!v118)
        goto LABEL_174;
      goto LABEL_172;
    }
    v15 = v119;
    v16 = v15;
    endpoint = v14;
    if (v15)
    {
      v17 = nw_protocol_options_copy_definition(v15);
      if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
      v18 = &unk_183BA7000;
      is_equal = nw_protocol_definition_is_equal(v17, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

      if (is_equal)
      {
        *(_QWORD *)type = 0;
        *(_QWORD *)&type[8] = type;
        *(_QWORD *)&type[16] = 0x2020000000;
        LOBYTE(v123) = 0;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nw_http_cookie_options_get_should_not_save_cookies_block_invoke;
        v132 = (void *(*)(uint64_t, uint64_t))&unk_1E14A9D68;
        v133 = (void (*)(uint64_t))type;
        nw_protocol_options_access_handle(v16, buf);
        v20 = *(_BYTE *)(*(_QWORD *)&type[8] + 24) == 0;
        _Block_object_dispose(type, 8);

        v14 = endpoint;
        if (!v20)
          goto LABEL_19;
LABEL_138:
        if (!v14)
        {
          (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
          v21 = v118;
          v22 = v119;
          goto LABEL_172;
        }
        if (nw_endpoint_get_type(v14) != nw_endpoint_type_url)
          goto LABEL_170;
        v52 = nw_endpoint_copy_cfurl(v14);
        v53 = v9;
        if (v52)
        {
          v54 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          *(_QWORD *)type = MEMORY[0x1E0C809B0];
          v55 = (const __CFString *)v18[190];
          *(_QWORD *)&type[8] = v55;
          *(_QWORD *)&type[16] = __nw_http_cookie_parse_block_invoke;
          v123 = &unk_1E14A87A0;
          cf = v52;
          v125 = v52;
          v56 = v54;
          v124 = v56;
          v57 = v53;
          v58 = type;
          _nw_http_fields_enumerate_by_name((uint64_t)v57, (unint64_t)"Set-Cookie", v58);

          if (objc_msgSend(v56, "count"))
            v59 = objc_msgSend(v56, "copy");
          else
            v59 = 0;

          v14 = endpoint;
          if (!v59)
          {
LABEL_169:
            CFRelease(cf);
LABEL_170:
            (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
            goto LABEL_171;
          }
          v60 = v16;
          v61 = v60;
          v62 = (const void *)v59;
          if (v16)
          {
            v63 = nw_protocol_options_copy_definition(v60);
            if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
              dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
            v64 = v61;
            v65 = nw_protocol_definition_is_equal(v63, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

            if (v65)
            {
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = buf;
              *(_QWORD *)&buf[16] = 0x3032000000;
              v132 = __Block_byref_object_copy__72473;
              v133 = __Block_byref_object_dispose__72474;
              v134 = 0;
              *(_QWORD *)v126 = MEMORY[0x1E0C809B0];
              v127 = v55;
              v128 = __nw_http_cookie_options_copy_transform_callback_block_invoke;
              v129 = (const __CFString *)&unk_1E14A9D68;
              v130 = buf;
              nw_protocol_options_access_handle(v61, v126);
              aBlock = (uint64_t (**)(void *, const void *))_Block_copy(*(const void **)(*(_QWORD *)&buf[8]
                                                                                                 + 40));
              _Block_object_dispose(buf, 8);

              if (aBlock)
              {
                v66 = (const void *)aBlock[2](aBlock, v62);
                if (v66)
                  v67 = CFRetain(v66);
                else
                  v67 = 0;
                CFRelease(v62);
                v110 = 0;
              }
              else
              {
                aBlock = 0;
                v110 = 1;
                v67 = v62;
              }
LABEL_156:
              v68 = nw_parameters_copy_main_document_cfurl(v12);
              v69 = (const void *)nw_http_cookie_options_copy_site_for_cookies(v64);
              is_top_level_navigation = nw_http_cookie_options_get_is_top_level_navigation(v64);
              v71 = *(unsigned __int8 *)(v5 + 264);
              v111 = v118;
              *(_QWORD *)v112 = v67;
              if (v67)
              {
                if (v69)
                {
                  *(_QWORD *)buf = v69;
                  *(_QWORD *)v126 = CFSTR("_kCFHTTPCookiePolicyPropertySiteForCookies");
                  v127 = CFSTR("_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation");
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", is_top_level_navigation);
                  v72 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_QWORD *)&buf[8] = v72;
                  v128 = (uint64_t (*)(uint64_t, uint64_t))CFSTR("_kCFHTTPCookiePolicyPropertyIsSafeRequest");
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v71 >> 1) & 1);
                  v73 = (void *)objc_claimAutoreleasedReturnValue();
                  v129 = CFSTR("_kCFHTTPCookiePolicyPropertyAllowHTTPOnlyOverwrite");
                  *(_QWORD *)&buf[16] = v73;
                  v132 = (void *(*)(uint64_t, uint64_t))MEMORY[0x1E0C9AAB0];
                  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v126, 4);
                  v74 = (void *)objc_claimAutoreleasedReturnValue();

                  v76 = v111;
                  v75 = *(const void **)v112;

                }
                else
                {
                  v74 = 0;
                  v76 = v111;
                  v75 = v67;
                }
                objc_msgSend(v76[1], "_setCookies:forURL:mainDocumentURL:policyProperties:", v75, cf, v68, v74, v108, v109);

LABEL_161:
                if (v69)
                  CFRelease(v69);
                if (v68)
                  CFRelease(v68);
                v14 = endpoint;
                if ((v110 & 1) == 0)
                  _Block_release(aBlock);
                if (v75)
                  CFRelease(v75);
                goto LABEL_169;
              }
              __nwlog_obj();
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_cookie_set";
              v86 = (char *)_os_log_send_and_compose_impl();

              v126[0] = OS_LOG_TYPE_ERROR;
              v121 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v86, v126, &v121))
              {
                if (v126[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v87 = objc_claimAutoreleasedReturnValue();
                  v88 = v126[0];
                  if (os_log_type_enabled(v87, v126[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http_cookie_set";
                    _os_log_impl(&dword_182FBE000, v87, v88, "%{public}s called with null cookies", buf, 0xCu);
                  }
                }
                else
                {
                  if (v121)
                  {
                    v98 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v99 = objc_claimAutoreleasedReturnValue();
                    v100 = v126[0];
                    v101 = os_log_type_enabled(v99, v126[0]);
                    if (v98)
                    {
                      if (v101)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http_cookie_set";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v98;
                        _os_log_impl(&dword_182FBE000, v99, v100, "%{public}s called with null cookies, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(v98);
                    }
                    else
                    {
                      if (v101)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http_cookie_set";
                        _os_log_impl(&dword_182FBE000, v99, v100, "%{public}s called with null cookies, no backtrace", buf, 0xCu);
                      }

                    }
                    goto LABEL_244;
                  }
                  __nwlog_obj();
                  v87 = objc_claimAutoreleasedReturnValue();
                  v106 = v126[0];
                  if (os_log_type_enabled(v87, v126[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http_cookie_set";
                    _os_log_impl(&dword_182FBE000, v87, v106, "%{public}s called with null cookies, backtrace limit exceeded", buf, 0xCu);
                  }
                }

              }
LABEL_244:
              if (v86)
                free(v86);
              v76 = v111;
              v75 = 0;
              goto LABEL_161;
            }
            __nwlog_obj();
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
            LODWORD(v109) = 12;
            v108 = buf;
            v82 = (void *)_os_log_send_and_compose_impl();

            v121 = OS_LOG_TYPE_ERROR;
            v120 = 0;
            if (!__nwlog_fault((const char *)v82, &v121, &v120))
            {
LABEL_250:
              if (!v82)
              {
LABEL_252:

                v67 = v62;
                aBlock = 0;
                v110 = 1;
                goto LABEL_156;
              }
LABEL_251:
              free(v82);
              goto LABEL_252;
            }
            if (v121 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v83 = objc_claimAutoreleasedReturnValue();
              v90 = v121;
              if (os_log_type_enabled(v83, v121))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_182FBE000, v83, v90, "%{public}s protocol options are not http_cookie", buf, 0xCu);
              }
LABEL_237:

              goto LABEL_250;
            }
            if (!v120)
            {
              __nwlog_obj();
              v83 = objc_claimAutoreleasedReturnValue();
              v107 = v121;
              if (os_log_type_enabled(v83, v121))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_182FBE000, v83, v107, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_237;
            }
            v102 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v96 = objc_claimAutoreleasedReturnValue();
            v114 = v121;
            v103 = os_log_type_enabled(v96, v121);
            if (v102)
            {
              if (v103)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v102;
                _os_log_impl(&dword_182FBE000, v96, v114, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v102);
              goto LABEL_250;
            }
            if (v103)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
              _os_log_impl(&dword_182FBE000, v96, v114, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            v64 = v60;
            __nwlog_obj();
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
            LODWORD(v109) = 12;
            v108 = buf;
            v82 = (void *)_os_log_send_and_compose_impl();

            v121 = OS_LOG_TYPE_ERROR;
            v120 = 0;
            if (!__nwlog_fault((const char *)v82, &v121, &v120))
              goto LABEL_250;
            if (v121 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v83 = objc_claimAutoreleasedReturnValue();
              v84 = v121;
              if (os_log_type_enabled(v83, v121))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s called with null options", buf, 0xCu);
              }
              goto LABEL_237;
            }
            if (!v120)
            {
              __nwlog_obj();
              v83 = objc_claimAutoreleasedReturnValue();
              v105 = v121;
              if (os_log_type_enabled(v83, v121))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_182FBE000, v83, v105, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_237;
            }
            v95 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v96 = objc_claimAutoreleasedReturnValue();
            v113 = v121;
            v97 = os_log_type_enabled(v96, v121);
            if (v95)
            {
              if (v97)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v95;
                _os_log_impl(&dword_182FBE000, v96, v113, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v95);
              if (!v82)
                goto LABEL_252;
              goto LABEL_251;
            }
            if (v97)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_transform_callback";
              _os_log_impl(&dword_182FBE000, v96, v113, "%{public}s called with null options, no backtrace", buf, 0xCu);
            }
          }

          goto LABEL_250;
        }
        __nwlog_obj();
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_cookie_parse";
        v78 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        v126[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v78, type, v126))
        {
          if (type[0] == 17)
          {
            __nwlog_obj();
            v79 = objc_claimAutoreleasedReturnValue();
            v80 = type[0];
            if (os_log_type_enabled(v79, (os_log_type_t)type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_cookie_parse";
              _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s called with null url", buf, 0xCu);
            }
          }
          else
          {
            if (v126[0])
            {
              v91 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v93 = type[0];
              v94 = os_log_type_enabled(v92, (os_log_type_t)type[0]);
              if (v91)
              {
                if (v94)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http_cookie_parse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v91;
                  _os_log_impl(&dword_182FBE000, v92, v93, "%{public}s called with null url, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v91);
              }
              else
              {
                if (v94)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http_cookie_parse";
                  _os_log_impl(&dword_182FBE000, v92, v93, "%{public}s called with null url, no backtrace", buf, 0xCu);
                }

              }
              goto LABEL_226;
            }
            __nwlog_obj();
            v79 = objc_claimAutoreleasedReturnValue();
            v104 = type[0];
            if (os_log_type_enabled(v79, (os_log_type_t)type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_cookie_parse";
              _os_log_impl(&dword_182FBE000, v79, v104, "%{public}s called with null url, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_226:
        if (v78)
          free(v78);

        v14 = endpoint;
        goto LABEL_170;
      }
      __nwlog_obj();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)type = 136446210;
      *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
      LODWORD(v109) = 12;
      v108 = type;
      v37 = (char *)_os_log_send_and_compose_impl();

      v126[0] = OS_LOG_TYPE_ERROR;
      v121 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v37, v126, &v121))
      {
        if (v126[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v41 = v126[0];
          if (os_log_type_enabled(v38, v126[0]))
          {
            *(_DWORD *)type = 136446210;
            *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
            _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s protocol options are not http_cookie", type, 0xCu);
          }
LABEL_128:

          goto LABEL_135;
        }
        if (v121 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          v51 = v126[0];
          if (os_log_type_enabled(v38, v126[0]))
          {
            *(_DWORD *)type = 136446210;
            *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
            _os_log_impl(&dword_182FBE000, v38, v51, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", type, 0xCu);
          }
          goto LABEL_128;
        }
        v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v47 = objc_claimAutoreleasedReturnValue();
        v48 = v126[0];
        v49 = os_log_type_enabled(v47, v126[0]);
        if (v46)
        {
          if (v49)
          {
            *(_DWORD *)type = 136446466;
            *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
            *(_WORD *)&type[12] = 2082;
            *(_QWORD *)&type[14] = v46;
            _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", type, 0x16u);
          }

          v18 = (_QWORD *)&unk_183BA7000;
          free(v46);
          if (!v37)
            goto LABEL_137;
          goto LABEL_136;
        }
        if (v49)
        {
          *(_DWORD *)type = 136446210;
          *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s protocol options are not http_cookie, no backtrace", type, 0xCu);
        }

        v18 = &unk_183BA7000;
      }
    }
    else
    {
      __nwlog_obj();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)type = 136446210;
      *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
      LODWORD(v109) = 12;
      v108 = type;
      v37 = (char *)_os_log_send_and_compose_impl();

      v18 = (_QWORD *)&unk_183BA7000;
      v126[0] = OS_LOG_TYPE_ERROR;
      v121 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v37, v126, &v121))
        goto LABEL_135;
      if (v126[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        v39 = v126[0];
        if (os_log_type_enabled(v38, v126[0]))
        {
          *(_DWORD *)type = 136446210;
          *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null options", type, 0xCu);
        }
        goto LABEL_128;
      }
      if (v121 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        v50 = v126[0];
        if (os_log_type_enabled(v38, v126[0]))
        {
          *(_DWORD *)type = 136446210;
          *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          _os_log_impl(&dword_182FBE000, v38, v50, "%{public}s called with null options, backtrace limit exceeded", type, 0xCu);
        }
        goto LABEL_128;
      }
      v42 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v44 = v126[0];
      v45 = os_log_type_enabled(v43, v126[0]);
      if (v42)
      {
        if (v45)
        {
          *(_DWORD *)type = 136446466;
          *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          *(_WORD *)&type[12] = 2082;
          *(_QWORD *)&type[14] = v42;
          _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null options, dumping backtrace:%{public}s", type, 0x16u);
        }

        v18 = (_QWORD *)&unk_183BA7000;
        free(v42);
      }
      else
      {
        if (v45)
        {
          *(_DWORD *)type = 136446210;
          *(_QWORD *)&type[4] = "nw_http_cookie_options_get_should_not_save_cookies";
          _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null options, no backtrace", type, 0xCu);
        }

        v18 = (_QWORD *)&unk_183BA7000;
      }
    }
LABEL_135:
    if (!v37)
    {
LABEL_137:

      v14 = endpoint;
      goto LABEL_138;
    }
LABEL_136:
    free(v37);
    goto LABEL_137;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "operator()";
  v23 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  v126[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v23, type, v126))
    goto LABEL_120;
  if (type[0] == 17)
  {
    v24 = __nwlog_obj();
    v25 = type[0];
    if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
      goto LABEL_120;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = "%{public}s called with null response";
    goto LABEL_119;
  }
  if (v126[0] == OS_LOG_TYPE_DEFAULT)
  {
    v24 = __nwlog_obj();
    v25 = type[0];
    if (!os_log_type_enabled(v24, (os_log_type_t)type[0]))
      goto LABEL_120;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = "%{public}s called with null response, backtrace limit exceeded";
    goto LABEL_119;
  }
  v29 = (char *)__nw_create_backtrace_string();
  v24 = __nwlog_obj();
  v25 = type[0];
  v35 = os_log_type_enabled(v24, (os_log_type_t)type[0]);
  if (!v29)
  {
    if (!v35)
      goto LABEL_120;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v26 = "%{public}s called with null response, no backtrace";
    goto LABEL_119;
  }
  if (v35)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v29;
    v31 = "%{public}s called with null response, dumping backtrace:%{public}s";
    goto LABEL_71;
  }
LABEL_72:
  free(v29);
  if (!v23)
    return;
LABEL_121:
  free(v23);
}

void sub_1834EEF74(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void nw_protocol_http_cookie_create::$_1::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v8;
  id v9;
  char has_method;
  char v11;
  void *parameters;
  void *v13;
  unsigned __int8 *v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  BOOL is_equal;
  _BOOL4 v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  char *v32;
  _BOOL4 v33;
  const char *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  char *v37;
  _BOOL4 v38;
  void *v39;
  char *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  void *v44;
  NSObject *v45;
  os_log_type_t v46;
  char *v47;
  NSObject *v48;
  _BOOL4 v49;
  char *v50;
  NSObject *v51;
  _BOOL4 v52;
  os_log_type_t v53;
  os_log_type_t v54;
  CFTypeRef v55;
  const void *v56;
  _BOOL8 is_top_level_navigation;
  unsigned int v58;
  void *v59;
  void *v60;
  void *v61;
  const void *v62;
  _BYTE *v63;
  id *v64;
  _BYTE *v65;
  os_log_type_t v66;
  os_log_type_t v67[8];
  os_log_type_t v68;
  CFTypeRef v69;
  char *v70;
  id v71;
  NSObject *endpoint;
  os_log_type_t v73[8];
  os_log_type_t *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE type[24];
  void *v78;
  os_log_type_t *v79;
  _BYTE *v80;
  _BYTE buf[24];
  uint64_t (*v82)(uint64_t, uint64_t);
  void (*v83)(uint64_t);
  void *object;
  char v85;
  _BYTE v86[24];
  void *v87;
  id v88;
  _QWORD v89[3];
  _QWORD v90[6];

  v90[3] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v22 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v86[0] = 0;
    if (!__nwlog_fault(v22, type, v86))
      goto LABEL_118;
    if (type[0] == 17)
    {
      v23 = __nwlog_obj();
      v24 = type[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)type[0]))
        goto LABEL_118;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v25 = "%{public}s called with null protocol";
    }
    else if (v86[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v23 = __nwlog_obj();
      v24 = type[0];
      v31 = os_log_type_enabled(v23, (os_log_type_t)type[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "operator()";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_118:
        if (!v22)
          return;
        goto LABEL_119;
      }
      if (!v31)
        goto LABEL_118;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v25 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v23 = __nwlog_obj();
      v24 = type[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)type[0]))
        goto LABEL_118;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v25 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_117;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v22 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v86[0] = 0;
    if (!__nwlog_fault(v22, type, v86))
      goto LABEL_118;
    if (type[0] != 17)
    {
      if (!v86[0])
      {
        v23 = __nwlog_obj();
        v24 = type[0];
        if (!os_log_type_enabled(v23, (os_log_type_t)type[0]))
          goto LABEL_118;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v25 = "%{public}s called with null http_cookie, backtrace limit exceeded";
        goto LABEL_117;
      }
      v32 = (char *)__nw_create_backtrace_string();
      v23 = __nwlog_obj();
      v24 = type[0];
      v33 = os_log_type_enabled(v23, (os_log_type_t)type[0]);
      if (!v32)
      {
        if (!v33)
          goto LABEL_118;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v25 = "%{public}s called with null http_cookie, no backtrace";
        goto LABEL_117;
      }
      if (!v33)
        goto LABEL_71;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v32;
      v34 = "%{public}s called with null http_cookie, dumping backtrace:%{public}s";
      goto LABEL_70;
    }
    v23 = __nwlog_obj();
    v24 = type[0];
    if (!os_log_type_enabled(v23, (os_log_type_t)type[0]))
      goto LABEL_118;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v25 = "%{public}s called with null http_cookie";
LABEL_117:
    _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
    goto LABEL_118;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v22 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v86[0] = 0;
    if (!__nwlog_fault(v22, type, v86))
      goto LABEL_118;
    if (type[0] == 17)
    {
      v23 = __nwlog_obj();
      v24 = type[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)type[0]))
        goto LABEL_118;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v25 = "%{public}s called with null metadata";
      goto LABEL_117;
    }
    if (!v86[0])
    {
      v23 = __nwlog_obj();
      v24 = type[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)type[0]))
        goto LABEL_118;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v25 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_117;
    }
    v32 = (char *)__nw_create_backtrace_string();
    v23 = __nwlog_obj();
    v24 = type[0];
    v35 = os_log_type_enabled(v23, (os_log_type_t)type[0]);
    if (!v32)
    {
      if (!v35)
        goto LABEL_118;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v25 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_117;
    }
    if (!v35)
      goto LABEL_71;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v32;
    v34 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_70:
    _os_log_impl(&dword_182FBE000, v23, v24, v34, buf, 0x16u);
    goto LABEL_71;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v22 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    v86[0] = 0;
    if (!__nwlog_fault(v22, type, v86))
      goto LABEL_118;
    if (type[0] == 17)
    {
      v23 = __nwlog_obj();
      v24 = type[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)type[0]))
        goto LABEL_118;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v25 = "%{public}s called with null completion";
      goto LABEL_117;
    }
    if (!v86[0])
    {
      v23 = __nwlog_obj();
      v24 = type[0];
      if (!os_log_type_enabled(v23, (os_log_type_t)type[0]))
        goto LABEL_118;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v25 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_117;
    }
    v32 = (char *)__nw_create_backtrace_string();
    v23 = __nwlog_obj();
    v24 = type[0];
    v36 = os_log_type_enabled(v23, (os_log_type_t)type[0]);
    if (!v32)
    {
      if (!v36)
        goto LABEL_118;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v25 = "%{public}s called with null completion, no backtrace";
      goto LABEL_117;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v32;
      v34 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_70;
    }
LABEL_71:
    free(v32);
    if (!v22)
      return;
LABEL_119:
    free(v22);
    return;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3802000000;
  v82 = __Block_byref_object_copy__15678;
  v83 = __Block_byref_object_dispose__15679;
  object = nw_http_metadata_copy_request(a3);
  v85 |= 1u;
  v8 = *(void **)(*(_QWORD *)&buf[8] + 40);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)type = 136446210;
    *(_QWORD *)&type[4] = "operator()";
    v26 = (char *)_os_log_send_and_compose_impl();
    v86[0] = 16;
    v73[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v26, v86, v73))
      goto LABEL_123;
    if (v86[0] == 17)
    {
      v27 = __nwlog_obj();
      v28 = v86[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)v86[0]))
        goto LABEL_123;
      *(_DWORD *)type = 136446210;
      *(_QWORD *)&type[4] = "operator()";
      v29 = "%{public}s called with null request";
    }
    else if (v73[0])
    {
      v37 = (char *)__nw_create_backtrace_string();
      v27 = __nwlog_obj();
      v28 = v86[0];
      v38 = os_log_type_enabled(v27, (os_log_type_t)v86[0]);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)type = 136446466;
          *(_QWORD *)&type[4] = "operator()";
          *(_WORD *)&type[12] = 2082;
          *(_QWORD *)&type[14] = v37;
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null request, dumping backtrace:%{public}s", type, 0x16u);
        }
        free(v37);
        goto LABEL_123;
      }
      if (!v38)
      {
LABEL_123:
        if (v26)
          free(v26);
        goto LABEL_29;
      }
      *(_DWORD *)type = 136446210;
      *(_QWORD *)&type[4] = "operator()";
      v29 = "%{public}s called with null request, no backtrace";
    }
    else
    {
      v27 = __nwlog_obj();
      v28 = v86[0];
      if (!os_log_type_enabled(v27, (os_log_type_t)v86[0]))
        goto LABEL_123;
      *(_DWORD *)type = 136446210;
      *(_QWORD *)&type[4] = "operator()";
      v29 = "%{public}s called with null request, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v27, v28, v29, type, 0xCu);
    goto LABEL_123;
  }
  v9 = v8;
  has_method = _nw_http_request_has_method((uint64_t)v9);

  v11 = 2;
  if ((has_method & 1) == 0)
  {
    if (nw_http_request_has_method(*(void **)(*(_QWORD *)&buf[8] + 40), (uint64_t)"HEAD"))
      v11 = 2;
    else
      v11 = 0;
  }
  *(_BYTE *)(v5 + 264) = *(_BYTE *)(v5 + 264) & 0xFD | v11;
  if (nw_http_fields_have_field_with_name(*(void **)(*(_QWORD *)&buf[8] + 40), (unint64_t)"Cookie"))
    goto LABEL_28;
  parameters = (void *)nw_protocol_get_parameters(*(_QWORD *)(v5 + 48));
  if (parameters)
    v13 = os_retain(parameters);
  else
    v13 = 0;
  v14 = nw_parameters_copy_protocol_options_legacy(v13, (nw_protocol *)v5);
  v15 = nw_http_cookie_options_copy_cookie_storage(v14);
  v16 = nw_parameters_copy_url_endpoint(v13);
  if (!v15)
  {
LABEL_20:
    if (!v16)
      goto LABEL_22;
    goto LABEL_21;
  }
  v17 = v14;
  v18 = v17;
  endpoint = v16;
  if (!v17)
  {
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v86 = 136446210;
    *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
    v40 = (char *)_os_log_send_and_compose_impl();

    v73[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90[0]) = 0;
    if (!__nwlog_fault(v40, v73, v90))
      goto LABEL_135;
    v41 = v40;
    if (v73[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v43 = v73[0];
      if (os_log_type_enabled(v42, v73[0]))
      {
        *(_DWORD *)v86 = 136446210;
        *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s called with null options", v86, 0xCu);
      }
    }
    else
    {
      if (LOBYTE(v90[0]))
      {
        v47 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v68 = v73[0];
        v49 = os_log_type_enabled(v48, v73[0]);
        if (v47)
        {
          if (v49)
          {
            *(_DWORD *)v86 = 136446466;
            *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
            *(_WORD *)&v86[12] = 2082;
            *(_QWORD *)&v86[14] = v47;
            _os_log_impl(&dword_182FBE000, v48, v68, "%{public}s called with null options, dumping backtrace:%{public}s", v86, 0x16u);
          }

          v40 = v41;
          free(v47);
          if (!v41)
            goto LABEL_137;
          goto LABEL_136;
        }
        if (v49)
        {
          *(_DWORD *)v86 = 136446210;
          *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
          _os_log_impl(&dword_182FBE000, v48, v68, "%{public}s called with null options, no backtrace", v86, 0xCu);
        }

        goto LABEL_134;
      }
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v53 = v73[0];
      if (os_log_type_enabled(v42, v73[0]))
      {
        *(_DWORD *)v86 = 136446210;
        *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_182FBE000, v42, v53, "%{public}s called with null options, backtrace limit exceeded", v86, 0xCu);
      }
    }

LABEL_134:
    v40 = v41;
    goto LABEL_135;
  }
  v19 = nw_protocol_options_copy_definition(v17);
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
  is_equal = nw_protocol_definition_is_equal(v19, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

  if (!is_equal)
  {
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v86 = 136446210;
    *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
    v40 = (char *)_os_log_send_and_compose_impl();

    v73[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90[0]) = 0;
    if (!__nwlog_fault(v40, v73, v90))
      goto LABEL_135;
    v70 = v40;
    if (v73[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = v73[0];
      if (os_log_type_enabled(v45, v73[0]))
      {
        *(_DWORD *)v86 = 136446210;
        *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s protocol options are not http_cookie", v86, 0xCu);
      }
LABEL_87:

      v40 = v70;
      goto LABEL_135;
    }
    if (!LOBYTE(v90[0]))
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v54 = v73[0];
      if (os_log_type_enabled(v45, v73[0]))
      {
        *(_DWORD *)v86 = 136446210;
        *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_182FBE000, v45, v54, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", v86, 0xCu);
      }
      goto LABEL_87;
    }
    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v51 = objc_claimAutoreleasedReturnValue();
    v66 = v73[0];
    v52 = os_log_type_enabled(v51, v73[0]);
    if (v50)
    {
      if (v52)
      {
        *(_DWORD *)v86 = 136446466;
        *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        *(_WORD *)&v86[12] = 2082;
        *(_QWORD *)&v86[14] = v50;
        _os_log_impl(&dword_182FBE000, v51, v66, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", v86, 0x16u);
      }

      v40 = v70;
      free(v50);
    }
    else
    {
      if (v52)
      {
        *(_DWORD *)v86 = 136446210;
        *(_QWORD *)&v86[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_182FBE000, v51, v66, "%{public}s protocol options are not http_cookie, no backtrace", v86, 0xCu);
      }

      v40 = v70;
    }
LABEL_135:
    if (!v40)
    {
LABEL_137:

      v16 = endpoint;
      goto LABEL_138;
    }
LABEL_136:
    free(v40);
    goto LABEL_137;
  }
  *(_QWORD *)v86 = 0;
  *(_QWORD *)&v86[8] = v86;
  *(_QWORD *)&v86[16] = 0x2020000000;
  LOBYTE(v87) = 0;
  *(_QWORD *)type = MEMORY[0x1E0C809B0];
  *(_QWORD *)&type[8] = 3221225472;
  *(_QWORD *)&type[16] = __nw_http_cookie_options_get_should_not_send_cookies_block_invoke;
  v78 = &unk_1E14A9D68;
  v79 = (os_log_type_t *)v86;
  nw_protocol_options_access_handle(v18, type);
  v21 = *(_BYTE *)(*(_QWORD *)&v86[8] + 24) == 0;
  _Block_object_dispose(v86, 8);

  if (!v21)
    goto LABEL_20;
LABEL_138:
  if (!v16)
    goto LABEL_23;
  if (nw_endpoint_get_type(v16) == nw_endpoint_type_url)
  {
    v55 = nw_endpoint_copy_cfurl(v16);
    if (v55)
    {
      *(_QWORD *)v67 = v55;
      *(_QWORD *)v73 = 0;
      v74 = v73;
      v75 = 0x2000000000;
      v76 = 0;
      v69 = nw_parameters_copy_main_document_cfurl(v13);
      v56 = (const void *)nw_http_cookie_options_copy_site_for_cookies(v18);
      is_top_level_navigation = nw_http_cookie_options_get_is_top_level_navigation(v18);
      v58 = *(unsigned __int8 *)(v5 + 264);
      *(_QWORD *)type = MEMORY[0x1E0C809B0];
      *(_QWORD *)&type[8] = 0x40000000;
      *(_QWORD *)&type[16] = ___ZZ30nw_protocol_http_cookie_createENK3__1clEP11nw_protocolS1_P20nw_protocol_metadatabU13block_pointerFv46nw_protocol_plugin_metadata_processor_result_tS3_E_block_invoke;
      v78 = &unk_1E149C3B8;
      v79 = v73;
      v80 = buf;
      v64 = (id *)v15;
      v65 = type;
      v71 = v64[1];
      if (v56)
      {
        v90[0] = v56;
        v89[0] = CFSTR("_kCFHTTPCookiePolicyPropertySiteForCookies");
        v89[1] = CFSTR("_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", is_top_level_navigation);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v90[1] = v59;
        v89[2] = CFSTR("_kCFHTTPCookiePolicyPropertyIsSafeRequest");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v58 >> 1) & 1);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v90[2] = v60;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v90, v89, 3);
        v61 = (void *)objc_claimAutoreleasedReturnValue();

        v62 = *(const void **)v67;
      }
      else
      {
        v61 = 0;
        v62 = *(const void **)v67;
      }
      *(_QWORD *)v86 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v86[8] = 3221225472;
      *(_QWORD *)&v86[16] = __nw_http_cookie_enumerate_block_invoke;
      v87 = &unk_1E14AB1E8;
      v63 = v65;
      v88 = v63;
      objc_msgSend(v71, "_getCookiesForURL:mainDocumentURL:partition:policyProperties:completionHandler:", v62, v69, 0, v61, v86);

      if (v56)
        CFRelease(v56);
      v16 = endpoint;
      if (v69)
        CFRelease(v69);
      _Block_object_dispose(v73, 8);
      CFRelease(v62);
    }
  }
LABEL_21:
  os_release(v16);
LABEL_22:
  if (v15)
LABEL_23:
    os_release(v15);
  if (v14)
    os_release(v14);
  if (v13)
    os_release(v13);
LABEL_28:
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
LABEL_29:
  _Block_object_dispose(buf, 8);
  if ((v85 & 1) != 0)
  {
    if (object)
      os_release(object);
  }
}

void sub_1834F00D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15678(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__15679(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZZ30nw_protocol_http_cookie_createENK3__1clEP11nw_protocolS1_P20nw_protocol_metadatabU13block_pointerFv46nw_protocol_plugin_metadata_processor_result_tS3_E_block_invoke(uint64_t a1, char *__s, const char *a3)
{
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  std::string::size_type size;
  std::string *v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  v6 = strlen(__s);
  std::string::append(&v13, __s, v6);
  std::string::append(&v13, "=", 1uLL);
  v7 = strlen(a3);
  std::string::append(&v13, a3, v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v13.__r_.__value_.__l.__size_;
    if (v13.__r_.__value_.__l.__size_ + v9 > 0x3202A)
    {
LABEL_9:
      operator delete(v13.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (v9 + (unint64_t)HIBYTE(v13.__r_.__value_.__r.__words[2]) > 0x3202A)
      return;
  }
  *(_QWORD *)(v8 + 24) = v9 + size + 2;
  if (v10 >= 0)
    v12 = &v13;
  else
    v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
  nw_http_fields_append_advanced(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), (unint64_t)"Cookie", -1, (char *)v12, 0xFFFFFFFFFFFFFFFFLL, &__block_literal_global_15_15688);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
}

uint64_t ___ZZ30nw_protocol_http_cookie_createENK3__1clEP11nw_protocolS1_P20nw_protocol_metadatabU13block_pointerFv46nw_protocol_plugin_metadata_processor_result_tS3_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return nw_http_field_set_indexing_strategy(a2, 1u);
}

void ___ZL37nw_protocol_http_cookie_get_callbacksv_block_invoke()
{
  qword_1EDCE35D8 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_1EDCE35E0 = nw_protocol_common_get_output_frames;
  qword_1EDCE35F8 = (uint64_t)nw_protocol_common_get_parameters;
  unk_1EDCE3600 = nw_protocol_common_get_path;
  qword_1EDCE3608 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCE3610 = nw_protocol_common_get_remote_endpoint;
  qword_1EDCE3598 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_1EDCE35A0 = nw_protocol_common_connect;
  qword_1EDCE35A8 = (uint64_t)nw_protocol_common_disconnect;
  unk_1EDCE35B0 = nw_protocol_common_connected;
  qword_1EDCE35C8 = (uint64_t)nw_protocol_common_input_available;
  unk_1EDCE35D0 = nw_protocol_common_output_available;
  qword_1EDCE3648 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCE3650 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCE3690 = (uint64_t)nw_protocol_common_input_flush;
  qword_1EDCE35B8 = (uint64_t)nw_protocol_common_disconnected;
  unk_1EDCE35C0 = nw_protocol_common_error;
  qword_1EDCE3680 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_1EDCE3688 = nw_protocol_common_reset;
  qword_1EDCE3668 = (uint64_t)nw_protocol_common_copy_info;
  qword_1EDCE3638 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_1EDCE3640 = nw_protocol_common_input_finished;
  qword_1EDCE3658 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_1EDCE3660 = nw_protocol_common_waiting_for_output;
  qword_1EDCE3618 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCE3620 = nw_protocol_common_unregister_notification;
  qword_1EDCE3628 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCE3630 = nw_protocol_common_updated_path;
  qword_1EDCE35E8 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_1EDCE35F0 = nw_protocol_common_link_state;
  nw_protocol_http_cookie_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  unk_1EDCE3590 = nw_protocol_http_cookie_remove_input_handler;
}

uint64_t nw_protocol_http_cookie_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  _BYTE *handle;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _QWORD v18[6];
  char v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_http_cookie_remove_input_handler";
    v8 = (char *)_os_log_send_and_compose_impl();
    v22 = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &v22, &v21))
      goto LABEL_50;
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (!os_log_type_enabled(v9, v22))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_http_cookie_remove_input_handler";
      v11 = "%{public}s called with null protocol";
LABEL_49:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      goto LABEL_50;
    }
    if (!v21)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (os_log_type_enabled(v9, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_cookie_remove_input_handler";
        v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v22;
    v14 = os_log_type_enabled(v9, v22);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_cookie_remove_input_handler";
        v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    if (!v14)
      goto LABEL_36;
    *(_DWORD *)buf = 136446466;
    v24 = "nw_protocol_http_cookie_remove_input_handler";
    v25 = 2082;
    v26 = backtrace_string;
    v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
    _os_log_impl(&dword_182FBE000, v9, v10, v15, buf, 0x16u);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_http_cookie_remove_input_handler";
    v8 = (char *)_os_log_send_and_compose_impl();
    v22 = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &v22, &v21))
      goto LABEL_50;
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (!os_log_type_enabled(v9, v22))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_http_cookie_remove_input_handler";
      v11 = "%{public}s called with null http_cookie";
      goto LABEL_49;
    }
    if (!v21)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (os_log_type_enabled(v9, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_cookie_remove_input_handler";
        v11 = "%{public}s called with null http_cookie, backtrace limit exceeded";
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v22;
    v16 = os_log_type_enabled(v9, v22);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_cookie_remove_input_handler";
        v11 = "%{public}s called with null http_cookie, no backtrace";
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    if (!v16)
      goto LABEL_36;
    *(_DWORD *)buf = 136446466;
    v24 = "nw_protocol_http_cookie_remove_input_handler";
    v25 = 2082;
    v26 = backtrace_string;
    v15 = "%{public}s called with null http_cookie, dumping backtrace:%{public}s";
    goto LABEL_35;
  }
  if (a2)
  {
    if ((handle[264] & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_http_log::onceToken != -1)
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44194);
      v12 = ghttpLogObj;
      if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v24 = "nw_protocol_http_cookie_remove_input_handler";
        v25 = 2082;
        v26 = handle + 265;
        v27 = 2080;
        v28 = " ";
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 0x40000000;
    v20[2] = ___ZL44nw_protocol_http_cookie_remove_input_handlerP11nw_protocolS0_b_block_invoke;
    v20[3] = &__block_descriptor_tmp_20_15744;
    v20[4] = handle;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = ___ZL44nw_protocol_http_cookie_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
    v18[3] = &__block_descriptor_tmp_21_15745;
    v19 = a3;
    v18[4] = a1;
    v18[5] = handle;
    return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v20, (uint64_t)v18);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_protocol_http_cookie_remove_input_handler";
  v8 = (char *)_os_log_send_and_compose_impl();
  v22 = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &v22, &v21))
    goto LABEL_50;
  if (v22 != OS_LOG_TYPE_FAULT)
  {
    if (!v21)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (os_log_type_enabled(v9, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_cookie_remove_input_handler";
        v11 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v22;
    v17 = os_log_type_enabled(v9, v22);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_cookie_remove_input_handler";
        v11 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_protocol_http_cookie_remove_input_handler";
      v25 = 2082;
      v26 = backtrace_string;
      v15 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
LABEL_36:
    free(backtrace_string);
    goto LABEL_50;
  }
  v9 = __nwlog_obj();
  v10 = v22;
  if (os_log_type_enabled(v9, v22))
  {
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_http_cookie_remove_input_handler";
    v11 = "%{public}s called with null input_protocol";
    goto LABEL_49;
  }
LABEL_50:
  if (v8)
    free(v8);
  return 0;
}

void ___ZL44nw_protocol_http_cookie_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v3 = 136446210;
      v4 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v3, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v1 + 104));
  *(_QWORD *)(v1 + 232) = 0;
}

void ___ZL44nw_protocol_http_cookie_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 48))
    return;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = 0;
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 192) & 1) != 0)
    {
      v2 = *(void **)(v1 + 184);
      if (v2)
        os_release(v2);
    }
    *(_QWORD *)(v1 + 184) = 0;
    if ((*(_BYTE *)(v1 + 176) & 1) != 0)
    {
      v3 = *(void **)(v1 + 168);
      if (v3)
        os_release(v3);
    }
    *(_QWORD *)(v1 + 168) = 0;
    if ((*(_BYTE *)(v1 + 160) & 1) != 0)
    {
      v4 = *(void **)(v1 + 152);
      if (v4)
        os_release(v4);
    }
    free((void *)v1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_http_cookie_destroy";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_cookie_destroy";
      v8 = "%{public}s called with null http_cookie";
      goto LABEL_26;
    }
    if (!v11)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_cookie_destroy";
      v8 = "%{public}s called with null http_cookie, backtrace limit exceeded";
      goto LABEL_26;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v14 = "nw_protocol_http_cookie_destroy";
        v15 = 2082;
        v16 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_27;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_cookie_destroy";
      v8 = "%{public}s called with null http_cookie, no backtrace";
LABEL_26:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_27:
  if (v5)
    free(v5);
}

double __nw_protocol_http_cookie_identifier_block_invoke()
{
  double result;

  strcpy((char *)&nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier, "http_cookie");
  *(_QWORD *)&result = 0x100000005;
  qword_1EDCE3578 = 0x100000005;
  return result;
}

void sub_1834F2290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1834F2EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1834F3548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, objc_super a14)
{
  a14.super_class = (Class)NWConcrete_nw_socks5_connection;
  -[_Unwind_Exception dealloc](&a14, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_socks5_connection_remove_prefer_wifi_request(NWConcrete_nw_socks5_connection *a1)
{
  NWConcrete_nw_socks5_connection *v1;
  NSObject *v2;
  OS_nw_path_evaluator *sc_prefer_wifi_path_evaluator;
  int v4;
  const char *v5;
  __int16 v6;
  NWConcrete_nw_socks5_connection *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1->sc_prefer_wifi_path_evaluator)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 136446466;
      v5 = "nw_socks5_connection_remove_prefer_wifi_request";
      v6 = 2112;
      v7 = v1;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s %@ removing prefer wi-fi request", (uint8_t *)&v4, 0x16u);
    }

    nw_path_evaluator_cancel(v1->sc_prefer_wifi_path_evaluator);
    sc_prefer_wifi_path_evaluator = v1->sc_prefer_wifi_path_evaluator;
    v1->sc_prefer_wifi_path_evaluator = 0;

  }
}

void sub_1834F3708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_socks5_connection_validate_udp_association_block_invoke_2(id *a1)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  nw_protocol_metadata_t v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  _BOOL8 source;
  dispatch_time_t v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  os_unfair_lock_s *v21;
  void *v22;
  os_unfair_lock_s *v23;
  char *v24;
  id v25;
  void *v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  char *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  NSObject *v33;
  id v34;
  uint64_t *v35;
  id v36;
  int v37;
  _QWORD v38[4];
  id v39;
  id v40;
  id v41;
  id v42;
  _QWORD v43[4];
  id v44;
  NSObject *v45;
  NSObject *v46;
  _QWORD block[4];
  NSObject *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  id location;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  void *v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char v62;

  v49 = 0;
  v50 = &v49;
  v51 = 0x2020000000;
  v52 = 0;
  v2 = a1[4];
  if (*((unsigned __int8 *)v2 + 56) != 255 && (char)v2[20] < 0)
  {
    v20 = (void *)v2[4];
    if (v20)
    {
      v21 = v20;
      v59 = 0;
      v60 = &v59;
      v61 = 0x2020000000;
      v62 = 0;
      v22 = (void *)MEMORY[0x1E0C809B0];
      v23 = v21 + 34;
      location = (id)MEMORY[0x1E0C809B0];
      v54 = 3221225472;
      v55 = __nw_connection_is_cancelled_or_failed_block_invoke;
      v56 = &unk_1E14ACE40;
      v58 = &v59;
      v24 = v21;
      v57 = v24;
      os_unfair_lock_lock(v23);
      v55((uint64_t)&location);
      os_unfair_lock_unlock(v23);
      LODWORD(v23) = *((unsigned __int8 *)v60 + 24);

      _Block_object_dispose(&v59, 8);
      if (!(_DWORD)v23)
      {
        v25 = *((id *)a1[4] + 21);
        v26 = v25;
        if (v25)
        {
          v27 = (os_unfair_lock_s *)v25;
          v59 = 0;
          v60 = &v59;
          v61 = 0x2020000000;
          v62 = 0;
          v28 = v27 + 34;
          location = v22;
          v54 = 3221225472;
          v55 = __nw_connection_is_cancelled_or_failed_block_invoke;
          v56 = &unk_1E14ACE40;
          v58 = &v59;
          v29 = v27;
          v57 = v29;
          os_unfair_lock_lock(v28);
          __nw_connection_is_cancelled_or_failed_block_invoke((uint64_t)&location);
          os_unfair_lock_unlock(v28);
          LODWORD(v28) = *((unsigned __int8 *)v60 + 24);

          _Block_object_dispose(&v59, 8);
          if (!(_DWORD)v28)
            *((_BYTE *)v50 + 24) = 1;
        }

      }
    }
  }
  if (*((_BYTE *)v50 + 24))
  {
    v3 = *((id *)a1[4] + 21);
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
    v4 = (id)g_tcp_definition;
    v5 = nw_connection_copy_protocol_metadata(v3, v4);

    if (v5)
    {
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v6 = (id)nw_context_copy_implicit_context::implicit_context;
      v43[0] = MEMORY[0x1E0C809B0];
      v43[1] = 3221225472;
      v43[2] = __nw_socks5_connection_validate_udp_association_block_invoke_4;
      v43[3] = &unk_1E14AAAA0;
      v44 = a1[4];
      v45 = v3;
      v46 = v5;
      nw_queue_context_async_if_needed(v6, v43);

    }
    objc_initWeak(&location, a1[4]);
    v8 = *((id *)a1[4] + 5);
    ++*((_DWORD *)a1[4] + 22);
    v9 = a1[4];
    v10 = v9[10];
    if (v10)
    {
      nw_queue_cancel_source(v10, v7);
      *((_QWORD *)a1[4] + 10) = 0;
      v9 = a1[4];
    }
    v11 = *((_DWORD *)v9 + 22);
    v12 = MEMORY[0x1E0C809B0];
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = __nw_socks5_connection_validate_udp_association_block_invoke_6;
    v38[3] = &unk_1E149C480;
    objc_copyWeak(&v42, &location);
    v39 = a1[5];
    v41 = a1[6];
    v13 = v8;
    v40 = v13;
    v30[0] = v12;
    v30[1] = 3221225472;
    v30[2] = __nw_socks5_connection_validate_udp_association_block_invoke_4_9;
    v30[3] = &unk_1E149C4D0;
    objc_copyWeak(&v36, &location);
    v31 = a1[5];
    v34 = a1[6];
    v14 = v13;
    v32 = v14;
    v35 = &v49;
    v37 = v11;
    v15 = v3;
    v33 = v15;
    source = nw_queue_context_create_source(0, 2, 3, 0, v38, v30);
    v17 = dispatch_time(0x8000000000000000, 5000000000);
    nw_queue_set_timer_values(source, v17, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    nw_queue_activate_source(source, v18);
    *((_QWORD *)a1[4] + 10) = source;

    objc_destroyWeak(&v36);
    objc_destroyWeak(&v42);

    objc_destroyWeak(&location);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_socks5_connection_validate_udp_association_block_invoke_3;
    block[3] = &unk_1E14AC390;
    v19 = a1[5];
    v48 = a1[6];
    dispatch_async(v19, block);
    v15 = v48;
  }

  _Block_object_dispose(&v49, 8);
}

void sub_1834F3C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  objc_destroyWeak((id *)(v4 - 176));
  _Block_object_dispose((const void *)(v4 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_socks5_connection_validate_udp_association_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __nw_socks5_connection_validate_udp_association_block_invoke_4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  const char *v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446722;
    v24 = "nw_socks5_connection_validate_udp_association_block_invoke_4";
    v25 = 2114;
    v26 = v3;
    v27 = 2114;
    v28[0] = v4;
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ enabling keep alives for %{public}@", buf, 0x20u);
  }

  if (nw_tcp_reset_keepalives(*(void **)(a1 + 48), 1, 5, 1, 1))
  {
    v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
    v25 = 2114;
    v26 = v7;
    v27 = 1024;
    LODWORD(v28[0]) = v5;
    v8 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_20;
        v11 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        v25 = 2114;
        v26 = v11;
        v27 = 1024;
        LODWORD(v28[0]) = v5;
        v12 = "%{public}s %{public}@ error enabling keep alives %{darwin.errno}d";
LABEL_18:
        v18 = v9;
        v19 = v10;
        goto LABEL_19;
      }
      if (!v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_20;
        v17 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        v25 = 2114;
        v26 = v17;
        v27 = 1024;
        LODWORD(v28[0]) = v5;
        v12 = "%{public}s %{public}@ error enabling keep alives %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_20:

          if (!v8)
            return;
LABEL_14:
          free(v8);
          return;
        }
        v20 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        v25 = 2114;
        v26 = v20;
        v27 = 1024;
        LODWORD(v28[0]) = v5;
        v12 = "%{public}s %{public}@ error enabling keep alives %{darwin.errno}d, no backtrace";
        v18 = v9;
        v19 = v14;
LABEL_19:
        _os_log_impl(&dword_182FBE000, v18, v19, v12, buf, 0x1Cu);
        goto LABEL_20;
      }
      if (v15)
      {
        v16 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446978;
        v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        v25 = 2114;
        v26 = v16;
        v27 = 1024;
        LODWORD(v28[0]) = v5;
        WORD2(v28[0]) = 2082;
        *(_QWORD *)((char *)v28 + 6) = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s %{public}@ error enabling keep alives %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
      }

      free(backtrace_string);
    }
    if (!v8)
      return;
    goto LABEL_14;
  }
}

void __nw_socks5_connection_validate_udp_association_block_invoke_6(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id *v5;
  _QWORD *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  _QWORD block[4];
  id v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = *(NSObject **)(a1 + 40);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __nw_socks5_connection_validate_udp_association_block_invoke_3_8;
    v9[3] = &unk_1E14ACFD0;
    v5 = &v10;
    v10 = WeakRetained;
    v6 = v9;
    v7 = v4;
  }
  else
  {
    v8 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_socks5_connection_validate_udp_association_block_invoke_2_7;
    block[3] = &unk_1E14AC390;
    v5 = &v12;
    v12 = *(id *)(a1 + 48);
    v6 = block;
    v7 = v8;
  }
  dispatch_async(v7, v6);

}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  nw_protocol_metadata_t v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  _QWORD block[4];
  id v17;
  uint64_t v18;
  _QWORD v19[4];
  id v20;
  id v21;
  NSObject *v22;
  _QWORD v23[4];
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = MEMORY[0x1E0C809B0];
  if (*(unsigned __int8 *)(v2 + 56) != 255 && *(_DWORD *)(a1 + 72) == *(_DWORD *)(v2 + 88))
  {
    v4 = *(void **)(a1 + 40);
    if (v4)
    {
      v5 = v4;
      v26 = 0;
      v27 = &v26;
      v28 = 0x2020000000;
      v29 = 0;
      v6 = v5 + 34;
      v23[0] = v3;
      v23[1] = 3221225472;
      v23[2] = __nw_connection_is_cancelled_or_failed_block_invoke;
      v23[3] = &unk_1E14ACE40;
      v25 = &v26;
      v7 = v5;
      v24 = v7;
      os_unfair_lock_lock(v6);
      __nw_connection_is_cancelled_or_failed_block_invoke((uint64_t)v23);
      os_unfair_lock_unlock(v6);
      LODWORD(v6) = *((unsigned __int8 *)v27 + 24);

      _Block_object_dispose(&v26, 8);
      if (!(_DWORD)v6)
      {
        v8 = *(NSObject **)(a1 + 40);
        if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
          dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
        v9 = (id)g_tcp_definition;
        v10 = nw_connection_copy_protocol_metadata(v8, v9);

        if (nw_context_copy_implicit_context::onceToken[0] != -1)
          dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
        v11 = (id)nw_context_copy_implicit_context::implicit_context;
        v19[0] = v3;
        v19[1] = 3221225472;
        v19[2] = __nw_socks5_connection_validate_udp_association_block_invoke_7;
        v19[3] = &unk_1E14AAAA0;
        v20 = *(id *)(a1 + 32);
        v21 = *(id *)(a1 + 40);
        v12 = v10;
        v22 = v12;
        nw_queue_context_async_if_needed(v11, v19);

        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      }
    }
  }
  block[0] = v3;
  block[1] = 3221225472;
  block[2] = __nw_socks5_connection_validate_udp_association_block_invoke_10;
  block[3] = &unk_1E14A3420;
  v13 = *(NSObject **)(a1 + 48);
  v14 = *(id *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v17 = v14;
  v18 = v15;
  dispatch_async(v13, block);

}

void __nw_socks5_connection_validate_udp_association_block_invoke_4_9(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  int v13;
  _QWORD v14[4];
  id v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = *(NSObject **)(a1 + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_socks5_connection_validate_udp_association_block_invoke_6;
    block[3] = &unk_1E149C4A8;
    v12 = *(_QWORD *)(a1 + 64);
    v5 = &v8;
    v8 = WeakRetained;
    v13 = *(_DWORD *)(a1 + 80);
    v9 = *(id *)(a1 + 48);
    v10 = *(id *)(a1 + 32);
    v11 = *(id *)(a1 + 56);
    dispatch_async(v4, block);

  }
  else
  {
    v6 = *(NSObject **)(a1 + 32);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_socks5_connection_validate_udp_association_block_invoke_5;
    v14[3] = &unk_1E14AC390;
    v5 = &v15;
    v15 = *(id *)(a1 + 56);
    dispatch_async(v6, v14);
  }

}

uint64_t __nw_socks5_connection_validate_udp_association_block_invoke_5(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1834F4538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1834F4564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_socks5_connection_validate_udp_association_block_invoke_7(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  const char *v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446722;
    v24 = "nw_socks5_connection_validate_udp_association_block_invoke_7";
    v25 = 2114;
    v26 = v3;
    v27 = 2114;
    v28[0] = v4;
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ disabling keep alives for %{public}@", buf, 0x20u);
  }

  if (nw_tcp_reset_keepalives(*(void **)(a1 + 48), 0, 0, 0, 0))
  {
    v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
    v25 = 2114;
    v26 = v7;
    v27 = 1024;
    LODWORD(v28[0]) = v5;
    v8 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_20;
        v11 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        v25 = 2114;
        v26 = v11;
        v27 = 1024;
        LODWORD(v28[0]) = v5;
        v12 = "%{public}s %{public}@ error disabling keep alives %{darwin.errno}d";
LABEL_18:
        v18 = v9;
        v19 = v10;
        goto LABEL_19;
      }
      if (!v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_20;
        v17 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        v25 = 2114;
        v26 = v17;
        v27 = 1024;
        LODWORD(v28[0]) = v5;
        v12 = "%{public}s %{public}@ error disabling keep alives %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_20:

          if (!v8)
            return;
LABEL_14:
          free(v8);
          return;
        }
        v20 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        v25 = 2114;
        v26 = v20;
        v27 = 1024;
        LODWORD(v28[0]) = v5;
        v12 = "%{public}s %{public}@ error disabling keep alives %{darwin.errno}d, no backtrace";
        v18 = v9;
        v19 = v14;
LABEL_19:
        _os_log_impl(&dword_182FBE000, v18, v19, v12, buf, 0x1Cu);
        goto LABEL_20;
      }
      if (v15)
      {
        v16 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446978;
        v24 = "nw_socks5_connection_validate_udp_association_block_invoke";
        v25 = 2114;
        v26 = v16;
        v27 = 1024;
        LODWORD(v28[0]) = v5;
        WORD2(v28[0]) = 2082;
        *(_QWORD *)((char *)v28 + 6) = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s %{public}@ error disabling keep alives %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
      }

      free(backtrace_string);
    }
    if (!v8)
      return;
    goto LABEL_14;
  }
}

uint64_t __nw_socks5_connection_validate_udp_association_block_invoke_10(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

uint64_t __nw_socks5_connection_validate_udp_association_block_invoke_2_7(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __nw_socks5_connection_validate_udp_association_block_invoke_3_8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
  if (v3)
  {
    nw_queue_cancel_source(v3, a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = 0;
  }
}

void __nw_socks5_connection_set_cancel_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v2;

}

void __nw_socks5_connection_start_block_invoke(uint64_t a1)
{
  nw_socks5_connection_start_on_queue(*(void **)(a1 + 32), 0);
}

void nw_socks5_connection_start_on_queue(void *a1, void *a2)
{
  nw_connection_t *v4;
  id v5;
  nw_connection_t v6;
  uint64_t v7;
  nw_connection_t *v8;
  NSObject *v9;
  nw_connection_t *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD handler[4];
  nw_connection_t *v16;
  id v17;
  _QWORD v18[4];
  nw_connection_t *v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  nw_connection_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v6 = v4[4];
  v7 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___ZL35nw_socks5_connection_start_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObject_block_invoke;
  v18[3] = &unk_1E14ACFD0;
  v8 = v4;
  v19 = v8;
  nw_connection_set_read_close_handler(v6, v18);
  v9 = v4[4];
  handler[0] = v7;
  handler[1] = 3221225472;
  handler[2] = ___ZL35nw_socks5_connection_start_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObject_block_invoke_139;
  handler[3] = &unk_1E14AD048;
  v10 = v8;
  v16 = v10;
  v11 = v5;
  v17 = v11;
  nw_connection_set_state_changed_handler(v9, handler);
  nw_connection_set_queue(v4[4], v10[5]);
  nw_connection_start(v4[4]);
  v12 = mach_continuous_time();
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  v10[17] = (nw_connection_t)v13;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    v21 = "nw_socks5_connection_start_on_queue";
    v22 = 2114;
    v23 = v10;
    _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}@ started connection", buf, 0x16u);
  }

  if (!v10[2])
    objc_storeStrong((id *)v10 + 2, a1);

}

void sub_1834F4BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void ___ZL35nw_socks5_connection_start_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 56);
  if (v3 != 200)
  {
    if (v3 == 255)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    v5 = *(_QWORD *)(a1 + 32);
    v11 = 136446466;
    v12 = "nw_socks5_connection_start_on_queue_block_invoke";
    v13 = 2114;
    v14 = v5;
    v6 = "%{public}s %{public}@ in connection read close before proxy connection ready, cancelling";
    goto LABEL_11;
  }
  v7 = *(char *)(v2 + 160);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  v8 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v7 < 0)
  {
    if (!v8)
    {
LABEL_12:

      nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
      return;
    }
    v10 = *(_QWORD *)(a1 + 32);
    v11 = 136446466;
    v12 = "nw_socks5_connection_start_on_queue_block_invoke";
    v13 = 2114;
    v14 = v10;
    v6 = "%{public}s %{public}@ in connection read close for associated UDP connection, cancelling";
LABEL_11:
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v11, 0x16u);
    goto LABEL_12;
  }
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v11 = 136446466;
    v12 = "nw_socks5_connection_start_on_queue_block_invoke";
    v13 = 2114;
    v14 = v9;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ ignoring in connection read close event", (uint8_t *)&v11, 0x16u);
  }

}

void ___ZL35nw_socks5_connection_start_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObject_block_invoke_139(uint64_t a1, unsigned int a2, void *a3)
{
  char *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  int v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 56) == 255)
    goto LABEL_34;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5)
      v7 = "unknown";
    else
      v7 = off_1E149DE10[a2];
    v8 = *(_QWORD *)(a1 + 32);
    v25 = 136446722;
    v26 = "nw_socks5_connection_start_on_queue_block_invoke";
    v27 = 2114;
    v28 = v8;
    v29 = 2082;
    v30 = v7;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ in connection event %{public}s", (uint8_t *)&v25, 0x20u);
  }

  if (a2 == 4)
  {
    nw_socks5_connection_remove_prefer_wifi_request(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) |= 2u;
    v9 = *(unsigned __int8 **)(a1 + 32);
    if ((~v9[160] & 3) == 0)
    {
      nw_socks5_connection_cancel_on_queue(v9, 0);
      goto LABEL_34;
    }
    if (!v5)
      goto LABEL_34;
    goto LABEL_13;
  }
  if (v5)
  {
    v9 = *(unsigned __int8 **)(a1 + 32);
LABEL_13:
    v10 = v9[56];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v12 = v11;
    if (v10 == 200)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v25 = 136446722;
        v26 = "nw_socks5_connection_start_on_queue_block_invoke";
        v27 = 2114;
        v28 = v13;
        v29 = 2114;
        v30 = v5;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, "%{public}s %{public}@ ignoring in connection event error %{public}@", (uint8_t *)&v25, 0x20u);
      }

    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v14 = *(_QWORD *)(a1 + 32);
        v25 = 136446722;
        v26 = "nw_socks5_connection_start_on_queue_block_invoke";
        v27 = 2114;
        v28 = v14;
        v29 = 2114;
        v30 = v5;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ in connection event error %{public}@", (uint8_t *)&v25, 0x20u);
      }

      nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), v5);
    }
    goto LABEL_34;
  }
  if (a2 != 3)
    goto LABEL_34;
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(unsigned __int8 *)(v15 + 56);
  if (v16 != 101)
  {
    if (v16 != 1)
      goto LABEL_34;
    *(_BYTE *)(v15 + 56) = 2;
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      goto LABEL_28;
    v18 = *(_QWORD *)(a1 + 32);
    v25 = 136446466;
    v26 = "nw_socks5_connection_start_on_queue_block_invoke";
    v27 = 2114;
    v28 = v18;
    v19 = "%{public}s %{public}@ connection socks connected";
    goto LABEL_27;
  }
  *(_BYTE *)(v15 + 56) = 102;
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    v20 = *(_QWORD *)(a1 + 32);
    v25 = 136446466;
    v26 = "nw_socks5_connection_start_on_queue_block_invoke";
    v27 = 2114;
    v28 = v20;
    v19 = "%{public}s %{public}@ connection shoes connected";
LABEL_27:
    _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_INFO, v19, (uint8_t *)&v25, 0x16u);
  }
LABEL_28:

  v21 = *(_QWORD *)(a1 + 32);
  if (*(char *)(v21 + 160) < 0 && *(_QWORD *)(a1 + 40))
  {
    *(_BYTE *)(v21 + 56) = 103;
    *(_WORD *)(*(_QWORD *)(a1 + 32) + 104) = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 40));
    __nwlog_obj();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      v23 = *(_QWORD *)(a1 + 32);
      v24 = *(unsigned __int16 *)(v23 + 104);
      v25 = 136446722;
      v26 = "nw_socks5_connection_start_on_queue_block_invoke";
      v27 = 2114;
      v28 = v23;
      v29 = 1024;
      LODWORD(v30) = v24;
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_INFO, "%{public}s %{public}@ connection shoes got length %u", (uint8_t *)&v25, 0x1Cu);
    }

    nw_socks5_connection_inner_connection_read_handler_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40), 0, 0, *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 104));
  }
  else
  {
    nw_socks5_connection_inner_connection_read_range_on_queue((NWConcrete_nw_socks5_connection *)v21, 2u, 2u);
  }
LABEL_34:

}

void sub_1834F522C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_socks5_connection_cancel_on_queue(void *a1, void *a2)
{
  unsigned __int8 *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  unsigned __int8 *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  unsigned __int8 *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3[56] != 255)
  {
    if (v4 && !*((_QWORD *)v3 + 19))
      objc_storeStrong((id *)v3 + 19, a2);
    v6 = *((_QWORD *)v3 + 17);
    if (v6)
    {
      v7 = mach_continuous_time();
      if (v7 <= 1)
        v8 = 1;
      else
        v8 = v7;
      v9 = (double)(unint64_t)nw_delta_nanos(v6, v8) * 0.000000001;
    }
    else
    {
      v9 = 0.0;
    }
    v10 = *((_QWORD *)v3 + 16);
    if (*((_QWORD *)v3 + 14))
    {
      v11 = *((_QWORD *)v3 + 15);
      if (v11)
      {
        v12 = mach_continuous_time();
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        v10 += nw_delta_nanos(v11, v13);
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *((_QWORD *)v3 + 23);
      v16 = *((_QWORD *)v3 + 24);
      v17 = *((_QWORD *)v3 + 25);
      v18 = *((_QWORD *)v3 + 26);
      v19 = *((_QWORD *)v3 + 19);
      v20 = *((_QWORD *)v3 + 14);
      *(_DWORD *)buf = 136448514;
      v27 = "nw_socks5_connection_cancel_on_queue";
      v28 = 2114;
      v29 = v3;
      v30 = 2048;
      v31 = v15;
      v32 = 2048;
      v33 = v16;
      v34 = 2048;
      v35 = v17;
      v36 = 2048;
      v37 = v18;
      v38 = 2048;
      v39 = (double)v10 * 0.000000001;
      v40 = 2048;
      v41 = v9;
      v42 = 2114;
      v43 = v19;
      v44 = 2048;
      v45 = v20;
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ outRead %llu, outWrite %llu, inRead %llu, inWrite %llu, busyTime %0.3fs, totalTime %0.3fs, error %{public}@, busyCount %llu", buf, 0x66u);
    }

    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = ___ZL36nw_socks5_connection_cancel_on_queueP31NWConcrete_nw_socks5_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke;
    v24[3] = &unk_1E149FE40;
    v21 = v3;
    v25 = v21;
    nw_socks5_connection_send_reply_on_queue(v21, 0, v24);
    v3[56] = -1;
    v23 = *((_QWORD *)v21 + 10);
    if (v23)
    {
      nw_queue_cancel_source(v23, v22);
      *((_QWORD *)v21 + 10) = 0;
    }

  }
}

void sub_1834F548C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void nw_socks5_connection_inner_connection_read_handler_on_queue(void *a1, void *a2, int a3, int a4, size_t a5)
{
  NWConcrete_nw_socks5_connection *v9;
  NSObject *v10;
  NSObject *v11;
  size_t size;
  id WeakRetained;
  int sc_state;
  id v15;
  int v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  const char *v25;
  NSObject *p_super;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  int v30;
  os_log_type_t v31;
  int v32;
  NSObject *v33;
  int v34;
  unsigned int v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  int v40;
  int v41;
  NSObject *v42;
  NSObject *v43;
  unsigned int v44;
  int sa_family;
  NSObject *v46;
  NSObject *v47;
  int v48;
  nw_endpoint_t address;
  unsigned int v50;
  unsigned int v51;
  NSObject *v52;
  int v53;
  const char *v54;
  NSObject *v55;
  uint32_t v56;
  int v57;
  NSObject *v58;
  id v59;
  id v60;
  char v61;
  void *v62;
  const char *v63;
  char *v64;
  NSObject *v65;
  os_log_type_t sa_len;
  NSObject *v67;
  const char *v68;
  NSObject *v69;
  uint32_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  NSObject *v74;
  uint32_t v75;
  NSObject *v76;
  char *backtrace_string;
  _BOOL4 v78;
  size_t v79;
  char *v80;
  int v81;
  NSObject *v82;
  const char *v83;
  NSObject *v84;
  NSObject *v85;
  NSObject *v86;
  int sc_shoes_request_length_hbo;
  os_log_type_t v88;
  nw_endpoint_t v89;
  char *v90;
  NSObject *v91;
  NSObject *v92;
  const char *logging_description;
  size_t v94;
  NSObject *v95;
  char *byte_pointer;
  const char *v97;
  nw_endpoint_t v98;
  unsigned int v99;
  size_t v100;
  const char *v101;
  size_t v102;
  nw_endpoint_t host;
  unsigned __int8 *v104;
  sockaddr *v105;
  uint64_t v106;
  int v107;
  const char *v108;
  NSObject *v109;
  int sc_out_address_type;
  nw_parameters_t secure_udp;
  void *v112;
  nw_path_t v113;
  Class isa;
  objc_class *v115;
  NSObject *v116;
  unsigned int v117;
  unsigned __int16 v118;
  NSObject *v119;
  NSObject *v120;
  void **p_sc_in_udp_associated_tcp_connection;
  const char *hostname;
  nw_interface_type_t v123;
  NSObject *v124;
  NSObject *v125;
  NSObject *options;
  OS_dispatch_queue *sc_queue;
  NSObject *v128;
  NSObject *v129;
  nw_path_t v130;
  nw_parameters_t secure_tcp;
  void *v132;
  NSObject *v133;
  const char *v134;
  NSObject *v135;
  const char *v136;
  NSObject *v137;
  void *v138;
  NSObject *v139;
  void *v140;
  NSObject *interface;
  id v142;
  NSObject *local_endpoint;
  _BOOL8 host_with_numeric_port;
  os_log_type_t v145;
  NSObject *posix_error;
  const char *domain;
  nw_path_t domaina;
  _QWORD v149[4];
  NWConcrete_nw_socks5_connection *v150;
  id v151;
  size_t v152;
  char v153;
  _QWORD v154[4];
  NWConcrete_nw_socks5_connection *v155;
  id v156;
  _QWORD v157[4];
  NWConcrete_nw_socks5_connection *v158;
  id v159;
  NSObject *v160;
  NSObject *v161;
  _QWORD v162[4];
  NWConcrete_nw_socks5_connection *v163;
  NSObject *v164;
  sockaddr *v165;
  uint64_t *v166;
  _QWORD applier[5];
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  __int16 v171;
  _QWORD completion[4];
  NWConcrete_nw_socks5_connection *v173;
  id v174;
  char __str[4];
  const char *v176;
  __int16 v177;
  NWConcrete_nw_socks5_connection *v178;
  __int16 v179;
  int v180;
  __int16 v181;
  size_t v182;
  __int16 v183;
  nw_endpoint_t v184;
  sockaddr type[16];
  _BYTE buf[261];
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = v10;
  if (v9->sc_state == 255 || (*((_BYTE *)v9 + 160) & 1) != 0)
    goto LABEL_103;
  if (v10)
    size = dispatch_data_get_size(v10);
  else
    size = 0;
  WeakRetained = objc_loadWeakRetained((id *)&v9->sc_parent);
  if (a4 || size < a5)
  {
    if (!a4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        v23 = "not";
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[14] = v9;
        if (a3)
          v23 = "is";
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = size;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = a5;
        *(_WORD *)&buf[42] = 2082;
        *(_QWORD *)&buf[44] = v23;
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ in connection read data len %zu < %zu %{public}s_complete", buf, 0x34u);
      }

      goto LABEL_34;
    }
    if (a4 == 55 && *((char *)v9 + 160) < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 55;
        _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ ignoring error %d", buf, 0x1Cu);
      }

      nw_socks5_connection_inner_connection_read_on_queue(v9);
      goto LABEL_102;
    }
    switch(a4)
    {
      case 6:
      case 32:
      case 49:
      case 50:
      case 51:
      case 53:
      case 54:
      case 57:
      case 60:
      case 61:
      case 65:
      case 96:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = "not";
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          if (a3)
            v25 = "is";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = size;
          *(_WORD *)&buf[32] = 2082;
          *(_QWORD *)&buf[34] = v25;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = a4;
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d", buf, 0x30u);
        }

        goto LABEL_34;
      default:
        __nwlog_obj();
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[14] = v9;
        if (a3)
          v63 = "is";
        else
          v63 = "not";
        *(_QWORD *)&buf[24] = size;
        *(_WORD *)&buf[32] = 2082;
        *(_QWORD *)&buf[34] = v63;
        *(_WORD *)&buf[42] = 1024;
        *(_DWORD *)&buf[44] = a4;
        v64 = (char *)_os_log_send_and_compose_impl();

        type[0].sa_len = 16;
        __str[0] = 0;
        if (!__nwlog_fault(v64, type, __str))
          goto LABEL_212;
        if (type[0].sa_len == 17)
        {
          __nwlog_obj();
          v65 = objc_claimAutoreleasedReturnValue();
          sa_len = type[0].sa_len;
          if (os_log_type_enabled(v65, (os_log_type_t)type[0].sa_len))
          {
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v9;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = size;
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = v63;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = a4;
            _os_log_impl(&dword_182FBE000, v65, sa_len, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d", buf, 0x30u);
          }
        }
        else if (__str[0])
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v65 = objc_claimAutoreleasedReturnValue();
          v145 = type[0].sa_len;
          v78 = os_log_type_enabled(v65, (os_log_type_t)type[0].sa_len);
          if (backtrace_string)
          {
            if (v78)
            {
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v9;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = size;
              *(_WORD *)&buf[32] = 2082;
              *(_QWORD *)&buf[34] = v63;
              *(_WORD *)&buf[42] = 1024;
              *(_DWORD *)&buf[44] = a4;
              *(_WORD *)&buf[48] = 2082;
              *(_QWORD *)&buf[50] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v65, v145, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x3Au);
            }

            free(backtrace_string);
            goto LABEL_212;
          }
          if (v78)
          {
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v9;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = size;
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = v63;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = a4;
            _os_log_impl(&dword_182FBE000, v65, v145, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, no backtrace", buf, 0x30u);
          }
        }
        else
        {
          __nwlog_obj();
          v65 = objc_claimAutoreleasedReturnValue();
          v88 = type[0].sa_len;
          if (os_log_type_enabled(v65, (os_log_type_t)type[0].sa_len))
          {
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v9;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = size;
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = v63;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = a4;
            _os_log_impl(&dword_182FBE000, v65, v88, "%{public}s %{public}@ in connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, backtrace limit exceeded", buf, 0x30u);
          }
        }

LABEL_212:
        if (v64)
          free(v64);
LABEL_34:
        if (v9->sc_state != 200)
        {
LABEL_101:
          nw_socks5_connection_cancel_on_queue(v9, 0);
          goto LABEL_102;
        }
        nw_socks5_connection_increment_busy_on_queue(v9, WeakRetained);
        p_super = &v9->sc_out_connection->super;
        completion[0] = MEMORY[0x1E0C809B0];
        completion[1] = 3221225472;
        completion[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke;
        completion[3] = &unk_1E149C4F8;
        v173 = v9;
        v174 = WeakRetained;
        nw_connection_send(p_super, 0, (nw_content_context_t)&__block_literal_global_3_41726, 1, completion);

LABEL_102:
LABEL_103:

        return;
    }
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v133 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
    {
      v134 = "not";
      *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
      *(_WORD *)&buf[12] = 2114;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[14] = v9;
      if (a3)
        v134 = "is";
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = size;
      *(_WORD *)&buf[32] = 2082;
      *(_QWORD *)&buf[34] = v134;
      _os_log_impl(&dword_182FBE000, v133, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ read %zu bytes %{public}s_complete from inner connection", buf, 0x2Au);
    }

  }
  if (!v11 || !size)
    goto LABEL_102;
  sc_state = v9->sc_state;
  switch(v9->sc_state)
  {
    case 0u:
    case 1u:
    case 7u:
    case 8u:
    case 0x65u:
    case 0x68u:
    case 0x69u:
      goto LABEL_12;
    case 2u:
      *(_WORD *)&type[0].sa_len = 0;
      if (size == 2)
      {
        nw_dispatch_data_copyout(v11, (uint64_t)type, 2);
        if (type[0].sa_len == 5)
        {
          sa_family = type[0].sa_family;
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          v38 = v46;
          if (sa_family)
          {
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v9;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = type[0].sa_len;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = type[0].sa_family;
              _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for version %u nMethods %u", buf, 0x22u);
            }

            v9->sc_state = 3;
            nw_socks5_connection_inner_connection_read_range_on_queue(v9, type[0].sa_family, type[0].sa_family);
            goto LABEL_102;
          }
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            goto LABEL_217;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          v73 = "%{public}s %{public}@ connection received zero nMethods";
          v74 = v38;
          v75 = 22;
        }
        else
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            goto LABEL_217;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = type[0].sa_len;
          v73 = "%{public}s %{public}@ connection received unsupported socks version %u";
          v74 = v38;
          v75 = 28;
        }
      }
      else
      {
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          goto LABEL_217;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = size;
        v73 = "%{public}s %{public}@ connection received unexpected number of bytes %zu";
        v74 = v38;
        v75 = 32;
      }
      _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_ERROR, v73, buf, v75);
      goto LABEL_217;
    case 3u:
      if (size >= 0x100)
      {
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = size;
          _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ connection received unexpected number of bytes %zu", buf, 0x20u);
        }
        goto LABEL_175;
      }
      nw_dispatch_data_copyout(v11, (uint64_t)buf, 255);
      v71 = 0;
      while (buf[v71])
      {
        if (size == ++v71)
        {
          __nwlog_obj();
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)&type[0].sa_len = 136446466;
            *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&type[0].sa_data[10] = 2114;
            *(_QWORD *)&type[0].sa_data[12] = v9;
            _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ unsupported auth methods", &type[0].sa_len, 0x16u);
          }
          goto LABEL_125;
        }
      }
      __nwlog_obj();
      v84 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)&type[0].sa_len = 136446466;
        *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&type[0].sa_data[10] = 2114;
        *(_QWORD *)&type[0].sa_data[12] = v9;
        _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ picking auth method: none", &type[0].sa_len, 0x16u);
      }

      v9->sc_state = 4;
      *(_WORD *)&type[0].sa_len = 5;
      v85 = dispatch_data_create(type, 2uLL, 0, 0);
      nw_socks5_connection_increment_busy_on_queue(v9, WeakRetained);
      v86 = &v9->sc_in_connection->super;
      v154[0] = MEMORY[0x1E0C809B0];
      v154[1] = 3221225472;
      v154[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_154;
      v154[3] = &unk_1E149C4F8;
      v155 = v9;
      v156 = WeakRetained;
      nw_connection_send(v86, v85, (nw_content_context_t)&__block_literal_global_41718, 1, v154);

      goto LABEL_102;
    case 4u:
      *(_DWORD *)&type[0].sa_len = 0;
      if (size != 4)
      {
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          goto LABEL_217;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = size;
        v68 = "%{public}s %{public}@ connection received unexpected number of bytes %zu";
        v69 = v38;
        v70 = 32;
        goto LABEL_182;
      }
      nw_dispatch_data_copyout(v11, (uint64_t)type, 4);
      if (type[0].sa_len != 5)
      {
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          goto LABEL_217;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = type[0].sa_len;
        v68 = "%{public}s %{public}@ connection received unsupported socks version %u";
        goto LABEL_181;
      }
      if (type[0].sa_family != 1)
      {
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          goto LABEL_217;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = type[0].sa_family;
        v68 = "%{public}s %{public}@ connection received unsupported command %u";
        goto LABEL_181;
      }
      if (type[0].sa_data[1] <= 4u && ((1 << type[0].sa_data[1]) & 0x1A) != 0)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = type[0].sa_len;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = type[0].sa_family;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = type[0].sa_data[1];
          _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for version %u command %u addressType %u", buf, 0x28u);
        }

        v34 = type[0].sa_data[1];
        v9->sc_out_address_type = type[0].sa_data[1];
        switch(v34)
        {
          case 1:
            v35 = 4;
            break;
          case 3:
            v35 = 1;
            break;
          case 4:
            v35 = 16;
            break;
          default:
            __nwlog_obj();
            v109 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
            {
              sc_out_address_type = v9->sc_out_address_type;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v9;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = sc_out_address_type;
              _os_log_impl(&dword_182FBE000, v109, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ address type %u not handled", buf, 0x1Cu);
            }

            nw_socks5_connection_cancel_on_queue(v9, 0);
            v35 = 0;
            break;
        }
        v9->sc_state = 5;
        nw_socks5_connection_inner_connection_read_range_on_queue(v9, v35, v35);
        goto LABEL_102;
      }
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = type[0].sa_data[1];
        v68 = "%{public}s %{public}@ connection received unsupported address type %u";
LABEL_181:
        v69 = v38;
        v70 = 28;
LABEL_182:
        _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_ERROR, v68, buf, v70);
        goto LABEL_217;
      }
      goto LABEL_217;
    case 5u:
      v40 = v9->sc_out_address_type;
      if (v40 == 1 || v40 == 4)
      {
        if ((v40 != 1 || size == 4) && (v40 != 4 || size == 16))
          goto LABEL_150;
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = size;
          _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ connection received unexpected number of bytes %zu", buf, 0x20u);
        }
LABEL_175:

        goto LABEL_101;
      }
      if (v40 != 3 || !v9->sc_out_address_domain_length)
      {
        if (size == 1)
        {
          type[0].sa_len = 0;
          nw_dispatch_data_copyout(v11, (uint64_t)type, 1);
          v41 = type[0].sa_len;
          __nwlog_obj();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = v42;
          if (v41)
          {
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v9;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = type[0].sa_len;
              _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request has address length %u", buf, 0x1Cu);
            }

            v44 = type[0].sa_len;
            v9->sc_out_address_domain_length = type[0].sa_len;
            nw_socks5_connection_inner_connection_read_range_on_queue(v9, v44, v44);
          }
          else
          {
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v9;
              _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ address length is zero", buf, 0x16u);
            }
LABEL_125:

            nw_socks5_connection_cancel_on_queue(v9, 0);
          }
          goto LABEL_102;
        }
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = size;
          _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ connection received unexpected number of bytes %zu", buf, 0x20u);
        }
        goto LABEL_175;
      }
LABEL_150:
      if (v40 == 3)
        v79 = size + 1;
      else
        v79 = size;
      if (!v79)
      {
        __nwlog_obj();
        v137 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v137, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "strict_malloc";
        v138 = (void *)_os_log_send_and_compose_impl();

        if (__nwlog_abort((uint64_t)v138))
          goto LABEL_306;
        free(v138);
      }
      v80 = (char *)malloc_type_malloc(v79, 0xF2B69DE5uLL);
      if (v80)
        goto LABEL_155;
      __nwlog_obj();
      v139 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v139, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "strict_malloc";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v79;
      v140 = (void *)_os_log_send_and_compose_impl();

      if (!__nwlog_abort((uint64_t)v140))
      {
        free(v140);
LABEL_155:
        v9->sc_out_address.byte_pointer = v80;
        nw_dispatch_data_copyout(v11, (uint64_t)v80, size);
        v81 = v9->sc_out_address_type;
        if (v81 == 3)
        {
          v9->sc_out_address.byte_pointer[size] = 0;
          v81 = v9->sc_out_address_type;
        }
        switch(v81)
        {
          case 4:
            __nwlog_obj();
            v82 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
            {
              v97 = inet_ntop(2, v9->sc_out_address.byte_pointer, buf, 0x2Eu);
              *(_DWORD *)&type[0].sa_len = 136446722;
              *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&type[0].sa_data[10] = 2114;
              *(_QWORD *)&type[0].sa_data[12] = v9;
              *(_WORD *)&type[1].sa_data[4] = 2082;
              *(_QWORD *)&type[1].sa_data[6] = v97;
              _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for ipv6 %{public}s", &type[0].sa_len, 0x20u);
            }
            break;
          case 3:
            __nwlog_obj();
            v95 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
            {
              byte_pointer = v9->sc_out_address.byte_pointer;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v9;
              *(_WORD *)&buf[22] = 2082;
              *(_QWORD *)&buf[24] = byte_pointer;
              _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for domain %{public}s", buf, 0x20u);
            }

            goto LABEL_224;
          case 1:
            __nwlog_obj();
            v82 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
            {
              v83 = inet_ntop(2, v9->sc_out_address.byte_pointer, (char *)type, 0x10u);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v9;
              *(_WORD *)&buf[22] = 2082;
              *(_QWORD *)&buf[24] = v83;
              _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for ipv4 %{public}s", buf, 0x20u);
            }
            break;
          default:
LABEL_224:
            v9->sc_state = 6;
            nw_socks5_connection_inner_connection_read_range_on_queue(v9, 2u, 2u);
            goto LABEL_102;
        }

        goto LABEL_224;
      }
LABEL_306:
      __break(1u);
      return;
    case 6u:
      *(_WORD *)&type[0].sa_len = 0;
      if (size != 2)
      {
        __nwlog_obj();
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = size;
          _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ connection received unexpected number of bytes %zu", buf, 0x20u);
        }

        nw_socks5_connection_cancel_on_queue(v9, 0);
        goto LABEL_102;
      }
      nw_dispatch_data_copyout(v11, (uint64_t)type, 2);
      __nwlog_obj();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = bswap32(*(unsigned __int16 *)&type[0].sa_len) >> 16;
        _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ client request for port %u", buf, 0x1Cu);
      }

      v48 = v9->sc_out_address_type;
      switch(v48)
      {
        case 4:
          *(_WORD *)buf = 7708;
          *(_WORD *)&buf[2] = *(_WORD *)&type[0].sa_len;
          *(_DWORD *)&buf[4] = 0;
          *(_OWORD *)&buf[8] = *(_OWORD *)v9->sc_out_address.byte_pointer;
          *(_DWORD *)&buf[24] = 0;
          address = nw_endpoint_create_address((const sockaddr *)buf);
          break;
        case 3:
          *(_WORD *)&buf[4] = 0;
          *(_DWORD *)buf = 0;
          snprintf(buf, 6uLL, "%u", bswap32(*(unsigned __int16 *)&type[0].sa_len) >> 16);
          address = nw_endpoint_create_host(v9->sc_out_address.byte_pointer, buf);
          break;
        case 1:
          *(_WORD *)buf = 528;
          *(_WORD *)&buf[2] = *(_WORD *)&type[0].sa_len;
          *(_DWORD *)&buf[4] = *(_DWORD *)v9->sc_out_address.byte_pointer;
          *(_QWORD *)&buf[8] = 0;
          address = nw_endpoint_create_address((const sockaddr *)buf);
          break;
        default:
          v89 = 0;
          goto LABEL_188;
      }
      v89 = address;
LABEL_188:
      v90 = v9->sc_out_address.byte_pointer;
      if (v90)
      {
        free(v90);
        v9->sc_out_address.byte_pointer = 0;
      }
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v92 = v91;
      if (v89)
      {
        if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description(v89);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = logging_description;
          _os_log_impl(&dword_182FBE000, v92, OS_LOG_TYPE_INFO, "%{public}s %{public}@ instantiated endpoint: %{public}s", buf, 0x20u);
        }

        v9->sc_state = 7;
        nw_socks5_connection_connect_outer_on_queue(v9, v89, 0);
      }
      else
      {
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          _os_log_impl(&dword_182FBE000, v92, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed to instantiate endpoint", buf, 0x16u);
        }

        nw_socks5_connection_cancel_on_queue(v9, 0);
      }

      goto LABEL_102;
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
    case 0x52u:
    case 0x53u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
      goto LABEL_102;
    case 0x66u:
      *(_WORD *)&type[0].sa_len = 0;
      if (size == 2)
      {
        nw_dispatch_data_copyout(v11, (uint64_t)type, 2);
        v50 = bswap32(*(unsigned __int16 *)&type[0].sa_len);
        v51 = HIWORD(v50);
        v9->sc_shoes_request_length_hbo = HIWORD(v50);
        __nwlog_obj();
        v52 = objc_claimAutoreleasedReturnValue();
        v38 = v52;
        if (v51 > 3)
        {
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
          {
            sc_shoes_request_length_hbo = v9->sc_shoes_request_length_hbo;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v9;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = sc_shoes_request_length_hbo;
            _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ shoes client request with length %u", buf, 0x1Cu);
          }

          v9->sc_state = 103;
          nw_socks5_connection_inner_connection_read_range_on_queue(v9, v9->sc_shoes_request_length_hbo, v9->sc_shoes_request_length_hbo);
          goto LABEL_102;
        }
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          goto LABEL_217;
        v53 = v9->sc_shoes_request_length_hbo;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v53;
        v54 = "%{public}s %{public}@ connection received invalid shoes request length %u";
        v55 = v38;
        v56 = 28;
      }
      else
      {
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          goto LABEL_217;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = size;
        v54 = "%{public}s %{public}@ shoes_connected connection received unexpected number of bytes %zu";
        v55 = v38;
        v56 = 32;
      }
      _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_ERROR, v54, buf, v56);
      goto LABEL_217;
    case 0x67u:
      if (size != v9->sc_shoes_request_length_hbo)
      {
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          v72 = v9->sc_shoes_request_length_hbo;
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = size;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v72;
          _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ shoes_got_length connection received unexpected number of bytes %zu (expected %u)", buf, 0x26u);
        }
        goto LABEL_175;
      }
      memset(&buf[32], 0, 229);
      if (size >= 0x103)
        v37 = 259;
      else
        v37 = size;
      memset(buf, 0, 32);
      nw_dispatch_data_copyout(v11, (uint64_t)&buf[2], v37);
      switch(buf[2])
      {
        case 1:
        case 4:
          if (size >= (unint64_t)buf[5] + 4)
          {
            LOWORD(v176) = 0;
            *(_DWORD *)__str = 0;
            snprintf(__str, 6uLL, "%u", bswap32(*(unsigned __int16 *)&buf[3]) >> 16);
            memset(type, 0, sizeof(type));
            LODWORD(v94) = buf[5];
            if (buf[5])
            {
              v104 = &buf[6];
              v105 = type;
              v106 = buf[5];
              while (1)
              {
                v107 = *v104;
                v105->sa_len = v107;
                if (!v107)
                  break;
                v105 = (sockaddr *)((char *)v105 + 1);
                ++v104;
                if (!--v106)
                  goto LABEL_250;
              }
            }
            else
            {
              v105 = type;
LABEL_250:
              v105->sa_len = 0;
            }
            host = nw_endpoint_create_host((const char *)type, __str);
            goto LABEL_252;
          }
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            break;
          *(_DWORD *)&type[0].sa_len = 136446722;
          *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(_QWORD *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(_QWORD *)&type[1].sa_data[6] = size;
          v39 = "%{public}s %{public}@ shoes_got_length connection received hostname request too short %zu";
          goto LABEL_207;
        case 2:
        case 5:
          if (size > 0x12)
          {
            *(_QWORD *)&type[0].sa_len = 7708;
            *(_DWORD *)&type[1].sa_data[6] = unk_183BA8C38;
            *(_WORD *)type[0].sa_data = *(_WORD *)&buf[3];
            *(sockaddr *)&type[0].sa_data[6] = *(sockaddr *)&buf[5];
            v98 = nw_endpoint_create_address(type);
            v99 = 19;
            goto LABEL_253;
          }
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            break;
          *(_DWORD *)&type[0].sa_len = 136446722;
          *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(_QWORD *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(_QWORD *)&type[1].sa_data[6] = size;
          v39 = "%{public}s %{public}@ shoes_got_length connection received IPv6 request too short %zu";
          goto LABEL_207;
        case 3:
        case 6:
          if (size > 6)
          {
            type[0] = (sockaddr)xmmword_183C6F0E8;
            *(_WORD *)type[0].sa_data = *(_WORD *)&buf[3];
            *(_DWORD *)&type[0].sa_data[2] = *(_DWORD *)&buf[5];
            v98 = nw_endpoint_create_address(type);
            v99 = 7;
            goto LABEL_253;
          }
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            break;
          *(_DWORD *)&type[0].sa_len = 136446722;
          *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(_QWORD *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(_QWORD *)&type[1].sa_data[6] = size;
          v39 = "%{public}s %{public}@ shoes_got_length connection received IPv4 request too short %zu";
          goto LABEL_207;
        case 7:
        case 8:
          v94 = buf[5];
          if (size >= (unint64_t)buf[5] + 4)
          {
            v100 = strnlen(&buf[6], buf[5]);
            if (v100 >= v94)
            {
              __nwlog_obj();
              v43 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                goto LABEL_125;
              *(_DWORD *)&type[0].sa_len = 136446466;
              *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
              *(_WORD *)&type[0].sa_data[10] = 2114;
              *(_QWORD *)&type[0].sa_data[12] = v9;
              v108 = "%{public}s %{public}@ failed to parse bonjour name";
            }
            else
            {
              v101 = &buf[v100 + 7];
              v102 = strnlen(v101, v94 - (v100 + 1)) + v100 + 1;
              if (v102 >= v94)
              {
                __nwlog_obj();
                v43 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  goto LABEL_125;
                *(_DWORD *)&type[0].sa_len = 136446466;
                *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                *(_WORD *)&type[0].sa_data[10] = 2114;
                *(_QWORD *)&type[0].sa_data[12] = v9;
                v108 = "%{public}s %{public}@ failed to parse bonjour type";
              }
              else
              {
                domain = &buf[v102 + 7];
                if (strnlen(domain, v94 - (v102 + 1)) + v102 + 1 < v94)
                {
                  host = nw_endpoint_create_bonjour_service(&buf[6], v101, domain);
LABEL_252:
                  v98 = host;
                  v99 = v94 + 4;
LABEL_253:
                  if (v98)
                  {
                    *(_QWORD *)&type[0].sa_len = 0;
                    *(_QWORD *)&type[0].sa_data[6] = type;
                    *(_QWORD *)&type[1].sa_len = 0x3032000000;
                    *(_QWORD *)&type[1].sa_data[6] = __Block_byref_object_copy__16041;
                    *(_QWORD *)&type[2].sa_len = __Block_byref_object_dispose__16042;
                    *(_QWORD *)&type[2].sa_data[6] = 0;
                    v168 = 0;
                    v169 = &v168;
                    v170 = 0x2020000000;
                    v171 = 0;
                    if (buf[2] <= 8u && ((1 << buf[2]) & 0x170) != 0 || *((char *)v9 + 160) < 0)
                    {
                      secure_udp = nw_parameters_create_secure_udp(&__block_literal_global_18950, &__block_literal_global_86);
                      v112 = *(void **)(*(_QWORD *)&type[0].sa_data[6] + 40);
                      *(_QWORD *)(*(_QWORD *)&type[0].sa_data[6] + 40) = secure_udp;

                      *((_BYTE *)v9 + 160) |= 0x20u;
                    }
                    else
                    {
                      secure_tcp = nw_parameters_create_secure_tcp(&__block_literal_global_18950, &__block_literal_global_86);
                      v132 = *(void **)(*(_QWORD *)&type[0].sa_data[6] + 40);
                      *(_QWORD *)(*(_QWORD *)&type[0].sa_data[6] + 40) = secure_tcp;

                    }
                    v113 = nw_connection_copy_current_path(&v9->sc_in_connection->super);
                    domaina = v113;
                    if (v113)
                    {
                      isa = v113[28].isa;
                      if (isa)
                      {
                        v115 = isa;
                        applier[0] = MEMORY[0x1E0C809B0];
                        applier[1] = 3221225472;
                        applier[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_145;
                        applier[3] = &unk_1E14AAE28;
                        applier[4] = type;
                        xpc_dictionary_apply(v115, applier);
                      }
                      else
                      {
                        v115 = 0;
                      }

                    }
                    v117 = v9->sc_shoes_request_length_hbo;
                    if (v99 < v117)
                    {
                      v118 = v117 - v99;
                      __nwlog_obj();
                      v119 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__str = 136446722;
                        v176 = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                        v177 = 2114;
                        v178 = v9;
                        v179 = 1024;
                        v180 = v118;
                        _os_log_impl(&dword_182FBE000, v119, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ received shoes tlv(s) with total tlv buffer length %u", (uint8_t *)__str, 0x1Cu);
                      }

                      v162[0] = MEMORY[0x1E0C809B0];
                      v162[1] = 3221225472;
                      v162[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_150;
                      v162[3] = &unk_1E149C520;
                      v163 = v9;
                      v165 = type;
                      v164 = v98;
                      v166 = &v168;
                      nw_shoes_tlv_parser(&buf[v99 + 2], v118, v162);

                    }
                    nw_socks5_server_call_outer_connection_handler(WeakRetained, v98, *(void **)(*(_QWORD *)&type[0].sa_data[6] + 40));
                    if ((*((char *)v9 + 160) & 0x80000000) == 0 || (*((_BYTE *)v9 + 161) & 1) != 0)
                    {
                      __nwlog_obj();
                      v129 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__str = 136447234;
                        v176 = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                        v177 = 2114;
                        v178 = v9;
                        v179 = 1024;
                        v180 = buf[2];
                        v181 = 2048;
                        v182 = size;
                        v183 = 2112;
                        v184 = v98;
                        _os_log_impl(&dword_182FBE000, v129, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ got shoes request type %u inner length %zu to %@", (uint8_t *)__str, 0x30u);
                      }

                      v9->sc_state = 104;
                      v130 = domaina;
                      nw_socks5_connection_connect_outer_on_queue(v9, v98, *(void **)(*(_QWORD *)&type[0].sa_data[6] + 40));
                    }
                    else
                    {
                      *((_BYTE *)v9 + 161) |= 1u;
                      __nwlog_obj();
                      v120 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__str = 136446466;
                        v176 = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                        v177 = 2114;
                        v178 = v9;
                        _os_log_impl(&dword_182FBE000, v120, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ creating udp associated connection", (uint8_t *)__str, 0x16u);
                      }

                      if (*((_WORD *)v169 + 12))
                      {
                        p_sc_in_udp_associated_tcp_connection = (void **)&v9->sc_in_udp_associated_tcp_connection;
                        objc_storeStrong((id *)&v9->sc_in_udp_associated_tcp_connection, v9->sc_in_connection);
                        posix_error = nw_connection_copy_connected_remote_endpoint(v9->sc_in_udp_associated_tcp_connection);
                        hostname = nw_endpoint_get_hostname(posix_error);
                        host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(hostname, *((unsigned __int16 *)v169 + 12));
                        if (host_with_numeric_port)
                        {
                          local_endpoint = nw_connection_copy_connected_local_endpoint(*p_sc_in_udp_associated_tcp_connection);
                          v142 = nw_connection_copy_connected_path(*p_sc_in_udp_associated_tcp_connection);
                          interface = nw_path_copy_interface(v142);
                          v123 = nw_interface_get_type(interface);
                          v124 = nw_parameters_create();
                          v125 = nw_parameters_copy_default_protocol_stack(v124);
                          options = nw_udp_create_options();
                          nw_protocol_stack_set_transport_protocol(v125, options);

                          nw_parameters_set_reuse_local_address(v124, 1);
                          nw_parameters_set_required_interface_type(v124, v123);
                          nw_parameters_set_local_endpoint(v124, local_endpoint);
                          sc_queue = v9->sc_queue;
                          v157[0] = MEMORY[0x1E0C809B0];
                          v157[1] = 3221225472;
                          v157[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_152;
                          v157[3] = &unk_1E149C548;
                          v158 = v9;
                          v159 = (id)host_with_numeric_port;
                          v128 = v124;
                          v160 = v128;
                          v161 = v11;
                          nw_socks5_server_register_udp_associate_request(WeakRetained, v158, v159, sc_queue, v157);

                        }
                        else
                        {
                          local_endpoint = nw_error_create_posix_error(14);
                          nw_socks5_connection_cancel_on_queue(v9, local_endpoint);
                        }

                      }
                      else
                      {
                        posix_error = nw_error_create_posix_error(22);
                        nw_socks5_connection_cancel_on_queue(v9, posix_error);
                      }

                      v130 = domaina;
                    }

                    _Block_object_dispose(&v168, 8);
                    _Block_object_dispose(type, 8);

                  }
                  else
                  {
LABEL_260:
                    __nwlog_obj();
                    v116 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)&type[0].sa_len = 136446978;
                      *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                      *(_WORD *)&type[0].sa_data[10] = 2114;
                      *(_QWORD *)&type[0].sa_data[12] = v9;
                      *(_WORD *)&type[1].sa_data[4] = 1024;
                      *(_DWORD *)&type[1].sa_data[6] = buf[2];
                      *(_WORD *)&type[1].sa_data[10] = 2048;
                      *(_QWORD *)&type[1].sa_data[12] = size;
                      _os_log_impl(&dword_182FBE000, v116, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ shoes_got_length connection received invalid request type %u length %zu", &type[0].sa_len, 0x26u);
                    }

                    nw_socks5_connection_cancel_on_queue(v9, 0);
                  }
                  goto LABEL_102;
                }
                __nwlog_obj();
                v43 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  goto LABEL_125;
                *(_DWORD *)&type[0].sa_len = 136446466;
                *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
                *(_WORD *)&type[0].sa_data[10] = 2114;
                *(_QWORD *)&type[0].sa_data[12] = v9;
                v108 = "%{public}s %{public}@ failed to parse bonjour domain";
              }
            }
            _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, v108, &type[0].sa_len, 0x16u);
            goto LABEL_125;
          }
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            break;
          *(_DWORD *)&type[0].sa_len = 136446722;
          *(_QWORD *)&type[0].sa_data[2] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&type[0].sa_data[10] = 2114;
          *(_QWORD *)&type[0].sa_data[12] = v9;
          *(_WORD *)&type[1].sa_data[4] = 2048;
          *(_QWORD *)&type[1].sa_data[6] = size;
          v39 = "%{public}s %{public}@ shoes_got_length connection received bonjour request too short %zu";
LABEL_207:
          _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_ERROR, v39, &type[0].sa_len, 0x20u);
          break;
        default:
          goto LABEL_260;
      }
LABEL_217:

      nw_socks5_connection_cancel_on_queue(v9, 0);
      goto LABEL_102;
    default:
      if (sc_state == 200)
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v135 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
          {
            v136 = "not";
            *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&buf[12] = 2114;
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[14] = v9;
            if (a3)
              v136 = "is";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = size;
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = v136;
            _os_log_impl(&dword_182FBE000, v135, OS_LOG_TYPE_DEBUG, "%{public}s READY STATE %{public}@ read %zu bytes %{public}s_complete from inner connection", buf, 0x2Au);
          }

        }
        v9->sc_in_connection_bytes_read += size;
        v58 = &__block_literal_global_41718;
        v59 = &__block_literal_global_41718;
        if (!a3 || (*((_BYTE *)v9 + 160) & 0x20) != 0)
        {
          v61 = 0;
        }
        else
        {
          v60 = &__block_literal_global_3_41726;

          v61 = 1;
          v58 = &__block_literal_global_3_41726;
        }
        nw_socks5_connection_increment_busy_on_queue(v9, WeakRetained);
        v67 = &v9->sc_out_connection->super;
        v149[0] = MEMORY[0x1E0C809B0];
        v149[1] = 3221225472;
        v149[2] = ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_155;
        v149[3] = &unk_1E149C570;
        v150 = v9;
        v153 = v61;
        v151 = WeakRetained;
        v152 = size;
        nw_connection_send(v67, v11, v58, 1, v149);

        goto LABEL_102;
      }
      if (sc_state != 255)
        goto LABEL_102;
LABEL_12:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v16 = v9->sc_state;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = size;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v16;
      v17 = (char *)_os_log_send_and_compose_impl();

      type[0].sa_len = 16;
      __str[0] = 0;
      if (!__nwlog_fault(v17, type, __str))
        goto LABEL_99;
      if (type[0].sa_len == 17)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type[0].sa_len;
        if (os_log_type_enabled(v18, (os_log_type_t)type[0].sa_len))
        {
          v20 = v9->sc_state;
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = size;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v20;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u", buf, 0x26u);
        }
      }
      else if (__str[0])
      {
        v27 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v28 = type[0].sa_len;
        v29 = os_log_type_enabled(v18, (os_log_type_t)type[0].sa_len);
        if (v27)
        {
          if (v29)
          {
            v30 = v9->sc_state;
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v9;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = size;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v30;
            *(_WORD *)&buf[38] = 2082;
            *(_QWORD *)&buf[40] = v27;
            _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u, dumping backtrace:%{public}s", buf, 0x30u);
          }

          free(v27);
          goto LABEL_99;
        }
        if (v29)
        {
          v57 = v9->sc_state;
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = size;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v57;
          _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u, no backtrace", buf, 0x26u);
        }
      }
      else
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v31 = type[0].sa_len;
        if (os_log_type_enabled(v18, (os_log_type_t)type[0].sa_len))
        {
          v32 = v9->sc_state;
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = size;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v32;
          _os_log_impl(&dword_182FBE000, v18, v31, "%{public}s %{public}@ inner connection received %zu bytes in invalid state %u, backtrace limit exceeded", buf, 0x26u);
        }
      }

LABEL_99:
      if (v17)
        free(v17);
      goto LABEL_101;
  }
}

void sub_1834F7DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  void *v71;
  void *v72;
  void *v73;
  void *v74;

  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a71, 8);

  _Unwind_Resume(a1);
}

void nw_socks5_connection_inner_connection_read_range_on_queue(NWConcrete_nw_socks5_connection *a1, unsigned int a2, unsigned int a3)
{
  NWConcrete_nw_socks5_connection *v5;
  NWConcrete_nw_connection *sc_in_connection;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  NSObject *v15;
  _QWORD v16[4];
  NWConcrete_nw_socks5_connection *v17;
  unsigned int v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  _BYTE v24[10];
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (a2 - 1 < a3)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
        v23 = 2114;
        *(_QWORD *)v24 = v5;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ reading on inner connection", buf, 0x16u);
      }

    }
    sc_in_connection = v5->sc_in_connection;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___ZL57nw_socks5_connection_inner_connection_read_range_on_queueP31NWConcrete_nw_socks5_connectionjj_block_invoke;
    v16[3] = &unk_1E149C598;
    v17 = v5;
    v18 = a2;
    nw_connection_receive_internal(sc_in_connection, 0, a2, a3, v16);

    goto LABEL_11;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
  v23 = 1024;
  *(_DWORD *)v24 = a2;
  *(_WORD *)&v24[4] = 1024;
  *(_DWORD *)&v24[6] = a3;
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v8, &type, &v19))
    goto LABEL_9;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
      v23 = 1024;
      *(_DWORD *)v24 = a2;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = a3;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s unexpected minBytes %u maxBytes %u", buf, 0x18u);
    }
LABEL_8:

LABEL_9:
    if (!v8)
      goto LABEL_11;
LABEL_10:
    free(v8);
    goto LABEL_11;
  }
  if (!v19)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v14 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
      v23 = 1024;
      *(_DWORD *)v24 = a2;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = a3;
      _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s unexpected minBytes %u maxBytes %u, backtrace limit exceeded", buf, 0x18u);
    }
    goto LABEL_8;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  v12 = type;
  v13 = os_log_type_enabled(v9, type);
  if (!backtrace_string)
  {
    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
      v23 = 1024;
      *(_DWORD *)v24 = a2;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = a3;
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s unexpected minBytes %u maxBytes %u, no backtrace", buf, 0x18u);
    }
    goto LABEL_8;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446978;
    v22 = "nw_socks5_connection_inner_connection_read_range_on_queue";
    v23 = 1024;
    *(_DWORD *)v24 = a2;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = a3;
    v25 = 2082;
    v26 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s unexpected minBytes %u maxBytes %u, dumping backtrace:%{public}s", buf, 0x22u);
  }

  free(backtrace_string);
  if (v8)
    goto LABEL_10;
LABEL_11:

}

void sub_1834F83F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void ___ZL57nw_socks5_connection_inner_connection_read_range_on_queueP31NWConcrete_nw_socks5_connectionjj_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  v9 = a3;
  v10 = a5;
  v11 = v10;
  if (v10)
  {
    v12 = (unsigned int *)v10;
    v13 = v12[3];

  }
  else
  {
    v13 = 0;
  }
  nw_socks5_connection_inner_connection_read_handler_on_queue(*(_QWORD *)(a1 + 32), v14, a4, v13, *(unsigned int *)(a1 + 40));

}

void sub_1834F84A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void nw_socks5_connection_inner_connection_read_on_queue(NWConcrete_nw_socks5_connection *a1)
{
  NWConcrete_nw_socks5_connection *v1;
  NWConcrete_nw_socks5_connection *v2;
  NWConcrete_nw_socks5_connection *v3;
  NWConcrete_nw_connection *sc_in_connection;
  NWConcrete_nw_socks5_connection *v5;
  NSObject *v6;
  _BYTE v7[24];
  void *v8;
  NWConcrete_nw_socks5_connection *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if ((*((_BYTE *)v1 + 160) & 0x20) != 0)
  {
    v3 = v1;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v7 = 136446466;
        *(_QWORD *)&v7[4] = "nw_socks5_connection_inner_connection_read_message_on_queue";
        *(_WORD *)&v7[12] = 2114;
        *(_QWORD *)&v7[14] = v3;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ reading message on inner connection", v7, 0x16u);
      }

    }
    sc_in_connection = v3->sc_in_connection;
    *(_QWORD *)v7 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v7[8] = 3221225472;
    *(_QWORD *)&v7[16] = ___ZL59nw_socks5_connection_inner_connection_read_message_on_queueP31NWConcrete_nw_socks5_connection_block_invoke;
    v8 = &unk_1E14A3048;
    v5 = v3;
    v9 = v5;
    nw_connection_receive_internal(sc_in_connection, 0, 0xFFFFFFFF, 0xFFFFFFFF, v7);

  }
  else
  {
    nw_socks5_connection_inner_connection_read_range_on_queue(v1, 1u, 0xFFFFFFFF);
  }

}

void sub_1834F861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void nw_socks5_connection_increment_busy_on_queue(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  int v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  os_unfair_lock_s *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _QWORD *v21;
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  void *v25;
  os_unfair_lock_s *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = a1;
  v3 = a2;
  v4 = v3;
  if (!v3)
    goto LABEL_19;
  v5 = v3;
  v6 = v5;
  if ((*((_BYTE *)v5 + 136) & 1) != 0)
  {
    v7 = *((_DWORD *)v5 + 33);
    if (v7 != -1)
    {
      *((_DWORD *)v5 + 33) = v7 + 1;
LABEL_12:
      v12 = v6;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_socks5_server_handle_busy_changed_block_invoke;
      v25 = &unk_1E14ACFD0;
      v26 = v12;
      os_unfair_lock_lock(v12 + 6);
      __nw_socks5_server_handle_busy_changed_block_invoke((uint64_t)buf);
      os_unfair_lock_unlock(v12 + 6);

      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_socks5_server_increment_busy";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_socks5_server_increment_busy";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s ss_busy_count overflow", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v18 = type;
        v19 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socks5_server_increment_busy";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s ss_busy_count overflow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v9)
            goto LABEL_12;
          goto LABEL_11;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_socks5_server_increment_busy";
          _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s ss_busy_count overflow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_socks5_server_increment_busy";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s ss_busy_count overflow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v9)
      goto LABEL_12;
LABEL_11:
    free(v9);
    goto LABEL_12;
  }
LABEL_13:

  v13 = v21;
  v14 = v21[14];
  if (!v14)
  {
    v15 = mach_continuous_time();
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    v13 = v21;
    v21[15] = v16;
    v14 = v21[14];
  }
  v13[14] = v14 + 1;
LABEL_19:

}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  _DWORD *v4;
  int v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  id v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 56) == 255)
    goto LABEL_15;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
      v28 = 2114;
      v29 = v9;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}@ out connection write close done", buf, 0x16u);
    }
    goto LABEL_12;
  }
  v4 = v3;
  v5 = v4[3];

  if ((v5 - 6) > 0x3B || ((1 << (v5 - 6)) & 0x8C9B80004000001) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    v28 = 2114;
    v29 = v12;
    v30 = 1024;
    v31 = v5;
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          v16 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v28 = 2114;
          v29 = v16;
          v30 = 1024;
          v31 = v5;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s %{public}@ out connection write close error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v19 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v19)
          {
            v20 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446978;
            v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v28 = 2114;
            v29 = v20;
            v30 = 1024;
            v31 = v5;
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s %{public}@ out connection write close error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v19)
        {
          v23 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v28 = 2114;
          v29 = v23;
          v30 = 1024;
          v31 = v5;
          _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s %{public}@ out connection write close error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v14, type))
        {
          v22 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v28 = 2114;
          v29 = v22;
          v30 = 1024;
          v31 = v5;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s %{public}@ out connection write close error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
LABEL_32:
    if (v13)
      free(v13);
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v27 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    v28 = 2114;
    v29 = v8;
    v30 = 1024;
    v31 = v5;
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ out connection write close error %{darwin.errno}d", buf, 0x1Cu);
  }
LABEL_12:

LABEL_13:
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) |= 1u;
  v10 = *(unsigned __int8 **)(a1 + 32);
  if ((~v10[160] & 3) == 0)
    nw_socks5_connection_cancel_on_queue(v10, v3);
LABEL_15:

}

void sub_1834F8E94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16041(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16042(uint64_t a1)
{

}

uint64_t ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_145(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *data;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  size_t length;

  v4 = a3;
  length = 0;
  data = (const char *)xpc_dictionary_get_data(v4, "data", &length);
  v6 = data;
  v7 = 1;
  if (data && length >= 0xD8)
  {
    v8 = *((unsigned int *)data + 53);
    if (length == v8 + 216
      && !strcmp(data + 16, "com.apple.networkrelay")
      && ((v9 = strcmp(v6 + 48, "CompanionProxyConfig"), (v8 - 0x10000) >= 0xFFFF0001)
        ? (v10 = v9 == 0)
        : (v10 = 0),
          v10))
    {
      nw_parameters_update_with_data(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (uint64_t)(v6 + 216), v8);
      v7 = 0;
    }
    else
    {
      v7 = 1;
    }
  }

  return v7;
}

void sub_1834F8F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_150(uint64_t a1, unsigned __int8 *a2)
{
  id *v4;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  unsigned int v17;
  NSObject *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  unsigned int v36;
  nw_multipath_service_t v37;
  unsigned int v38;
  NSObject *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  nw_interface_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  void *v59;
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  _BYTE v65[14];
  __int16 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id *)&unk_1ECD84000;
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a2;
    if (v6 > 9)
      v7 = "unknown";
    else
      v7 = off_1E1499EB0[v6];
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    v62 = 2114;
    v63 = v8;
    v64 = 2082;
    *(_QWORD *)v65 = v7;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ processing shoes tlv: %{public}s", buf, 0x20u);
  }

  switch(*a2)
  {
    case 1u:
      v9 = *(unsigned __int16 *)(a2 + 1);
      if (v9 != 1024)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v50 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446978;
          v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v62 = 2114;
          v63 = v50;
          v64 = 1024;
          *(_DWORD *)v65 = __rev16(v9);
          *(_WORD *)&v65[4] = 2048;
          *(_QWORD *)&v65[6] = 4;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length (%u != %zu)", buf, 0x26u);
        }
        goto LABEL_78;
      }
      v10 = bswap32(*(_DWORD *)(a2 + 3));
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        v62 = 2114;
        v63 = v12;
        v64 = 1024;
        *(_DWORD *)v65 = v10;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ applying traffic class %u to inner and outer connections", buf, 0x1Cu);
      }

      nw_parameters_set_traffic_class(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v10);
      nw_connection_reset_traffic_class(*(void **)(*(_QWORD *)(a1 + 32) + 32), v10);
      break;
    case 2u:
      v20 = *(unsigned __int16 *)(a2 + 1);
      if (!*(_WORD *)(a2 + 1))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v53 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446978;
          v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v62 = 2114;
          v63 = v53;
          v64 = 1024;
          *(_DWORD *)v65 = __rev16(v20);
          *(_WORD *)&v65[4] = 2048;
          *(_QWORD *)&v65[6] = 1;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length (%u < %zu)", buf, 0x26u);
        }
        goto LABEL_78;
      }
      v21 = a2[3];
      if (v21)
      {
        if ((a2[3] & 0x80) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v22 = (id)gLogObj;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v23 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v23;
            _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ prohibiting expensive networks on outer connection", buf, 0x16u);
          }

          nw_parameters_set_prohibit_expensive(*(nw_parameters_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 1);
          v21 = a2[3];
        }
        if ((v21 & 0x20) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = (id)gLogObj;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            v25 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v25;
            _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ prohibiting wifi networks on outer connection", buf, 0x16u);
          }

          nw_parameters_prohibit_interface_type(*(nw_parameters_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), nw_interface_type_wifi);
          v21 = a2[3];
        }
        if ((v21 & 0x40) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v26 = (id)gLogObj;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            v27 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v27;
            _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ prohibiting cellular networks on outer connection", buf, 0x16u);
          }

          nw_parameters_prohibit_interface_type(*(nw_parameters_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), nw_interface_type_cellular);
          v21 = a2[3];
        }
        if ((v21 & 0x10) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = (id)gLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            v29 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v29;
            _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ prohibiting constrained networks on outer connection", buf, 0x16u);
          }

          nw_parameters_set_prohibit_constrained(*(nw_parameters_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 1);
          v21 = a2[3];
        }
        if ((v21 & 1) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v30 = (id)gLogObj;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            v31 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v31;
            _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requested to prefer wi-fi", buf, 0x16u);
          }

          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) |= 0x40u;
          v21 = a2[3];
        }
        if ((v21 & 2) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v32 = (id)gLogObj;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            v33 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v33;
            _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requested to fetch connected endpoint", buf, 0x16u);
          }

          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 161) |= 2u;
          v21 = a2[3];
        }
        if ((v21 & 4) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v34 = (id)gLogObj;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            v35 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v35;
            _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requested to fetch resolved endpoints", buf, 0x16u);
          }

          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 161) |= 4u;
        }
      }
      break;
    case 3u:
      if (*(_WORD *)(a2 + 1))
      {
        v13 = __rev16(*(unsigned __int16 *)(a2 + 1));
        v14 = malloc_type_calloc(1uLL, v13 + 1, 0xEAFB8F1AuLL);
        if (!v14)
        {
          __nwlog_obj();
          v58 = objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          v61 = "strict_calloc";
          v62 = 2048;
          v63 = 1;
          v64 = 2048;
          *(_QWORD *)v65 = v13 + 1;
          v59 = (void *)_os_log_send_and_compose_impl();

          if (__nwlog_abort((uint64_t)v59))
          {
            __break(1u);
            return;
          }
          free(v59);
          v4 = (id *)&unk_1ECD84000;
        }
        memcpy(v14, a2 + 3, v13);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = v4[463];
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v62 = 2114;
          v63 = v16;
          v64 = 2082;
          *(_QWORD *)v65 = v14;
          _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ setting bundle id on outer connection to %{public}s", buf, 0x20u);
        }

        nw_parameters_set_source_application_by_bundle_id_internal(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), (const char *)v14);
        if (v14)
          free(v14);
      }
      break;
    case 5u:
      v36 = *(unsigned __int16 *)(a2 + 1);
      if (v36 != 768)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v51 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136447234;
          v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v62 = 2114;
          v63 = v51;
          v64 = 2080;
          *(_QWORD *)v65 = "multipath";
          *(_WORD *)&v65[8] = 1024;
          *(_DWORD *)&v65[10] = __rev16(v36);
          v66 = 2048;
          v67 = 3;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length for %s (%u != %zu)", buf, 0x30u);
        }
        goto LABEL_78;
      }
      v37 = a2[3];
      v38 = *((unsigned __int16 *)a2 + 2);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v39 = (id)gLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        v40 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446978;
        v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        v62 = 2114;
        v63 = v40;
        v64 = 1024;
        *(_DWORD *)v65 = v37;
        *(_WORD *)&v65[4] = 1024;
        *(_DWORD *)&v65[6] = __rev16(v38);
        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ setting multipath on outer connection to service: %u/alternate_port: %u", buf, 0x22u);
      }

      nw_parameters_set_multipath_service(*(nw_parameters_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v37);
      nw_endpoint_set_alternate_port(*(void **)(a1 + 40), v38);
      break;
    case 6u:
      v41 = *(unsigned __int16 *)(a2 + 1);
      if (v41 != 512)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v52 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446978;
          v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v62 = 2114;
          v63 = v52;
          v64 = 1024;
          *(_DWORD *)v65 = __rev16(v41);
          *(_WORD *)&v65[4] = 2048;
          *(_QWORD *)&v65[6] = 1;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length (%u < %zu)", buf, 0x26u);
        }
        goto LABEL_78;
      }
      v42 = *(_QWORD *)(a1 + 32);
      if ((*(_BYTE *)(v42 + 161) & 1) == 0)
      {
        *(_BYTE *)(v42 + 160) |= 0x80u;
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = bswap32(*(unsigned __int16 *)(a2 + 3)) >> 16;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v43 = *(_QWORD *)(a1 + 32);
          v44 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
          *(_DWORD *)buf = 136446722;
          v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v62 = 2114;
          v63 = v43;
          v64 = 1024;
          *(_DWORD *)v65 = v44;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requested to create UDP association to inner connection port: %u", buf, 0x1Cu);
        }
        goto LABEL_78;
      }
      break;
    case 9u:
      v17 = bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16;
      if (v17 > 3)
      {
        v45 = *(_DWORD *)(a2 + 3);
        if (!v45)
          return;
        if ((v45 & 1) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v54 = (id)gLogObj;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            v55 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v55;
            _os_log_impl(&dword_182FBE000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requiring interface type wifi on outer connection", buf, 0x16u);
          }

          v48 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          v49 = nw_interface_type_wifi;
        }
        else if ((v45 & 2) != 0)
        {
          __nwlog_obj();
          v56 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            v57 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v57;
            _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requiring interface type cellular on outer connection", buf, 0x16u);
          }

          v48 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          v49 = nw_interface_type_cellular;
        }
        else
        {
          if ((v45 & 4) == 0)
            return;
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            v47 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446466;
            v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v62 = 2114;
            v63 = v47;
            _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ requiring interface type wired on outer connection", buf, 0x16u);
          }

          v48 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          v49 = nw_interface_type_wired;
        }
        nw_parameters_set_required_interface_type(v48, v49);
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v19 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446978;
          v61 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v62 = 2114;
          v63 = v19;
          v64 = 1024;
          *(_DWORD *)v65 = v17;
          *(_WORD *)&v65[4] = 2048;
          *(_QWORD *)&v65[6] = 4;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Invalid TLV length (%u < %zu)", buf, 0x26u);
        }
LABEL_78:

      }
      break;
    default:
      return;
  }
}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_152(uint64_t a1, char a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  nw_connection_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned __int8 *v11;
  id v12;
  int v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 56) != 255)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    v5 = v4;
    if ((a2 & 1) != 0)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v15 = 136446466;
        v16 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        v17 = 2114;
        v18 = v6;
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ successfully registered udp association", (uint8_t *)&v15, 0x16u);
      }

      v7 = nw_connection_create(*(nw_endpoint_t *)(a1 + 40), *(nw_parameters_t *)(a1 + 48));
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(void **)(v8 + 32);
      *(_QWORD *)(v8 + 32) = v7;

      v10 = *(void **)(a1 + 56);
      v11 = (unsigned __int8 *)*(id *)(a1 + 32);
      v12 = v10;
      v13 = v11[56];
      if (v13 != 200 && v13 != 255)
      {
        v11[56] = 101;
        nw_socks5_connection_start_on_queue(v11, v12);
      }

    }
    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v14 = *(_QWORD *)(a1 + 32);
        v15 = 136446466;
        v16 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        v17 = 2114;
        v18 = v14;
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed to register udp association", (uint8_t *)&v15, 0x16u);
      }

      nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
    }
  }
}

void sub_1834FA008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_socks5_connection_connect_outer_on_queue(void *a1, void *a2, void *a3)
{
  unsigned __int8 *v5;
  NSObject *v6;
  nw_parameters_t secure_tcp;
  unsigned int v8;
  NSObject *v9;
  Class isa;
  int v11;
  unsigned int v12;
  NSObject *v13;
  nw_connection_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  NSObject *v19;
  dispatch_queue_t *v20;
  NSObject *v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  _DWORD *v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  id v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  NSObject *v34;
  const char *backtrace_string;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  _QWORD v42[4];
  dispatch_queue_t *v43;
  _BYTE *v44;
  _QWORD handler[4];
  unsigned __int8 *v46;
  char v47;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  dispatch_queue_t *v51;
  __int16 v52;
  NSObject *v53;
  _BYTE v54[24];
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id WeakRetained;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  secure_tcp = a3;
  if (!secure_tcp)
  {
    secure_tcp = nw_parameters_create_secure_tcp(&__block_literal_global_18950, &__block_literal_global_86);
    if (!secure_tcp)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      *(_DWORD *)v54 = 136446210;
      *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
      v31 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      v47 = 0;
      if (__nwlog_fault(v31, buf, &v47))
      {
        if (buf[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v32 = (id)gLogObj;
          v33 = buf[0];
          if (os_log_type_enabled(v32, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)v54 = 136446210;
            *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s nw_parameters_create_secure_tcp failed", v54, 0xCu);
          }
        }
        else if (v47)
        {
          backtrace_string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            v36 = (char *)backtrace_string;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v37 = (id)gLogObj;
            v38 = buf[0];
            if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)v54 = 136446466;
              *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
              *(_WORD *)&v54[12] = 2082;
              *(_QWORD *)&v54[14] = v36;
              _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s nw_parameters_create_secure_tcp failed, dumping backtrace:%{public}s", v54, 0x16u);
            }

            free(v36);
            if (!v31)
              goto LABEL_28;
            goto LABEL_27;
          }
          __nwlog_obj();
          v32 = objc_claimAutoreleasedReturnValue();
          v41 = buf[0];
          if (os_log_type_enabled(v32, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)v54 = 136446210;
            *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
            _os_log_impl(&dword_182FBE000, v32, v41, "%{public}s nw_parameters_create_secure_tcp failed, no backtrace", v54, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v32 = (id)gLogObj;
          v40 = buf[0];
          if (os_log_type_enabled(v32, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)v54 = 136446210;
            *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
            _os_log_impl(&dword_182FBE000, v32, v40, "%{public}s nw_parameters_create_secure_tcp failed, backtrace limit exceeded", v54, 0xCu);
          }
        }

      }
      if (!v31)
      {
LABEL_28:
        v34 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 12);
        nw_socks5_connection_cancel_on_queue(v5, v34);
        v13 = v34;
        goto LABEL_29;
      }
LABEL_27:
      free(v31);
      goto LABEL_28;
    }
  }
  v8 = v5[160];
  v9 = secure_tcp;
  isa = v9[13].isa;
  v11 = *((unsigned __int16 *)isa + 54);
  isa = (Class)((char *)isa + 108);
  v12 = v11 & 0xFFFFFFFD | (*((unsigned __int8 *)isa + 2) << 16);
  *(_WORD *)isa = v11 & 0xFFFD | (v8 >> 1) & 2;
  *((_BYTE *)isa + 2) = BYTE2(v12);

  v13 = v9;
  v13[12].isa = (Class)((unint64_t)v13[12].isa & 0xFFFFFFFFFFFFFF3FLL | 0x80);

  v14 = nw_connection_create(v6, v13);
  v15 = (void *)*((_QWORD *)v5 + 18);
  *((_QWORD *)v5 + 18) = v14;

  if (!*((_QWORD *)v5 + 18))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    *(_DWORD *)v54 = 136446210;
    *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
    v23 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v47 = 0;
    if (__nwlog_fault(v23, buf, &v47))
    {
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v25 = buf[0];
        if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v54 = 136446210;
          *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s nw_connection_create failed", v54, 0xCu);
        }
      }
      else if (v47)
      {
        v27 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v28 = buf[0];
        v29 = os_log_type_enabled(v24, (os_log_type_t)buf[0]);
        if (v27)
        {
          if (v29)
          {
            *(_DWORD *)v54 = 136446466;
            *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
            *(_WORD *)&v54[12] = 2082;
            *(_QWORD *)&v54[14] = v27;
            _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s nw_connection_create failed, dumping backtrace:%{public}s", v54, 0x16u);
          }

          free(v27);
          if (!v23)
            goto LABEL_14;
          goto LABEL_13;
        }
        if (v29)
        {
          *(_DWORD *)v54 = 136446210;
          *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
          _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s nw_connection_create failed, no backtrace", v54, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v39 = buf[0];
        if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v54 = 136446210;
          *(_QWORD *)&v54[4] = "nw_socks5_connection_connect_outer_on_queue";
          _os_log_impl(&dword_182FBE000, v24, v39, "%{public}s nw_connection_create failed, backtrace limit exceeded", v54, 0xCu);
        }
      }

    }
    if (!v23)
    {
LABEL_14:
      v26 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 12);
      nw_socks5_connection_cancel_on_queue(v5, v26);

      goto LABEL_29;
    }
LABEL_13:
    free(v23);
    goto LABEL_14;
  }
  *(_QWORD *)v54 = 0;
  *(_QWORD *)&v54[8] = v54;
  *(_QWORD *)&v54[16] = 0x3032000000;
  v55 = __Block_byref_object_copy__16041;
  v56 = __Block_byref_object_dispose__16042;
  WeakRetained = objc_loadWeakRetained((id *)v5 + 3);
  v16 = *((_QWORD *)v5 + 18);
  v17 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke;
  handler[3] = &unk_1E149FE40;
  v18 = v5;
  v46 = v18;
  nw_connection_set_viability_changed_handler(v16, handler);
  v19 = *((_QWORD *)v5 + 18);
  v42[0] = v17;
  v42[1] = 3221225472;
  v42[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_157;
  v42[3] = &unk_1E149C5E8;
  v20 = v18;
  v43 = v20;
  v44 = v54;
  nw_connection_set_state_changed_handler(v19, v42);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v21 = (id)gLogObj;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v49 = "nw_socks5_connection_connect_outer_on_queue";
    v50 = 2114;
    v51 = v20;
    v52 = 2112;
    v53 = v6;
    _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ connecting to remote %@", buf, 0x20u);
  }

  nw_connection_set_queue(*((nw_connection_t *)v5 + 18), v20[5]);
  nw_socks5_connection_increment_busy_on_queue(v20, *(void **)(*(_QWORD *)&v54[8] + 40));
  nw_connection_start(*((nw_connection_t *)v5 + 18));

  _Block_object_dispose(v54, 8);
LABEL_29:

}

void sub_1834FA844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_154(uint64_t a1, void *a2)
{
  id v3;
  NWConcrete_nw_socks5_connection *v4;
  _DWORD *v5;
  int v6;
  NSObject *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  v4 = *(NWConcrete_nw_socks5_connection **)(a1 + 32);
  if (v4->sc_state != 255)
  {
    if (!v3)
    {
      nw_socks5_connection_inner_connection_read_range_on_queue(v4, 4u, 4u);
      goto LABEL_12;
    }
    v5 = v3;
    v6 = v5[3];

    if ((v6 - 6) <= 0x3B && ((1 << (v6 - 6)) & 0x8C9B80004000001) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
        v27 = 2114;
        v28 = v9;
        v29 = 1024;
        v30 = v6;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d", buf, 0x1Cu);
      }

LABEL_10:
      nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v11 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    v27 = 2114;
    v28 = v11;
    v29 = 1024;
    v30 = v6;
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          v15 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v27 = 2114;
          v28 = v15;
          v29 = 1024;
          v30 = v6;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        v18 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v18)
          {
            v19 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446978;
            v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v27 = 2114;
            v28 = v19;
            v29 = 1024;
            v30 = v6;
            v31 = 2082;
            v32 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v18)
        {
          v22 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v27 = 2114;
          v28 = v22;
          v29 = 1024;
          v30 = v6;
          _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v13, type))
        {
          v21 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v26 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v27 = 2114;
          v28 = v21;
          v29 = 1024;
          v30 = v6;
          _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s %{public}@ write in auth reply error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
LABEL_29:
    if (v12)
      free(v12);
    goto LABEL_10;
  }
LABEL_12:

}

void sub_1834FACC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL59nw_socks5_connection_inner_connection_read_handler_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObjectbim_block_invoke_155(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  NSObject *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 56) == 255)
    goto LABEL_31;
  if (v3)
  {
    v5 = v3;
    v6 = v5[3];

    v7 = *(char *)(*(_QWORD *)(a1 + 32) + 160);
    if (v7 < 0)
    {
      v19 = (v6 - 6);
      if (v19 <= 0x3B)
      {
        if (((1 << (v6 - 6)) & 0x8C9B80004000001) != 0)
        {
LABEL_24:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = (id)gLogObj;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            v22 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446722;
            v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v42 = 2114;
            v43 = v22;
            v44 = 1024;
            LODWORD(v45[0]) = v6;
            _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ write out error %{darwin.errno}d", buf, 0x1Cu);
          }

LABEL_27:
          nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), v5);
          goto LABEL_31;
        }
        if (v19 == 49)
        {
LABEL_6:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v8 = (id)gLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            v9 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446722;
            v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v42 = 2114;
            v43 = v9;
            v44 = 2112;
            v45[0] = v5;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ ignoring write out error %@", buf, 0x20u);
          }

          nw_socks5_connection_inner_connection_read_on_queue(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
          goto LABEL_31;
        }
      }
    }
    else
    {
      if ((v7 & 0x20) != 0 && v6 == 55)
        goto LABEL_6;
      if ((v6 - 6) <= 0x3B && ((1 << (v6 - 6)) & 0x8C9B80004000001) != 0)
        goto LABEL_24;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    v24 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    v42 = 2114;
    v43 = v24;
    v44 = 1024;
    LODWORD(v45[0]) = v6;
    v25 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v25, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          v28 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v42 = 2114;
          v43 = v28;
          v44 = 1024;
          LODWORD(v45[0]) = v6;
          _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s %{public}@ write out error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v31 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v31)
          {
            v32 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446978;
            v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
            v42 = 2114;
            v43 = v32;
            v44 = 1024;
            LODWORD(v45[0]) = v6;
            WORD2(v45[0]) = 2082;
            *(_QWORD *)((char *)v45 + 6) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v26, v30, "%{public}s %{public}@ write out error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v31)
        {
          v35 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v42 = 2114;
          v43 = v35;
          v44 = 1024;
          LODWORD(v45[0]) = v6;
          _os_log_impl(&dword_182FBE000, v26, v30, "%{public}s %{public}@ write out error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v26, type))
        {
          v34 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
          v42 = 2114;
          v43 = v34;
          v44 = 1024;
          LODWORD(v45[0]) = v6;
          _os_log_impl(&dword_182FBE000, v26, v33, "%{public}s %{public}@ write out error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
LABEL_48:
    if (v25)
      free(v25);
    goto LABEL_27;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    v42 = 2114;
    v43 = v11;
    v44 = 2048;
    v45[0] = v12;
    v13 = "%{public}s %{public}@ wrote %zu bytes is_complete into outer connection";
    v14 = v10;
    v15 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_12;
  }
  if (!gLogDatapath)
  {
    *(_QWORD *)(v4 + 192) += *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 32);
    goto LABEL_30;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v36 = *(_QWORD *)(a1 + 32);
    v37 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    v41 = "nw_socks5_connection_inner_connection_read_handler_on_queue_block_invoke";
    v42 = 2114;
    v43 = v36;
    v44 = 2048;
    v45[0] = v37;
    v13 = "%{public}s %{public}@ wrote %zu bytes not_complete into outer connection";
    v14 = v10;
    v15 = OS_LOG_TYPE_DEBUG;
LABEL_12:
    _os_log_impl(&dword_182FBE000, v14, v15, v13, buf, 0x20u);
  }
LABEL_13:

  v16 = *(unsigned __int8 *)(a1 + 56);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192) += *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 32);
  if (!v16)
  {
LABEL_30:
    nw_socks5_connection_inner_connection_read_on_queue((NWConcrete_nw_socks5_connection *)v17);
    goto LABEL_31;
  }
  *(_BYTE *)(v17 + 160) |= 1u;
  v18 = *(unsigned __int8 **)(a1 + 32);
  if ((~v18[160] & 3) == 0)
    nw_socks5_connection_cancel_on_queue(v18, 0);
LABEL_31:

}

void sub_1834FB370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_socks5_connection_decrement_busy_on_queue(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  int v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _QWORD *v23;
  char v24;
  os_log_type_t type;
  _BYTE buf[24];
  void *v27;
  os_unfair_lock_s *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v23 = a1;
  v3 = a2;
  v4 = v3;
  if (!v3)
    goto LABEL_20;
  v5 = v3;
  v6 = v5;
  if ((*((_BYTE *)v5 + 136) & 1) != 0)
  {
    v7 = *((_DWORD *)v5 + 33);
    if (v7)
    {
      *((_DWORD *)v5 + 33) = v7 - 1;
LABEL_12:
      v12 = v6;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_socks5_server_handle_busy_changed_block_invoke;
      v27 = &unk_1E14ACFD0;
      v28 = v12;
      os_unfair_lock_lock(v12 + 6);
      __nw_socks5_server_handle_busy_changed_block_invoke((uint64_t)buf);
      os_unfair_lock_unlock(v12 + 6);

      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_socks5_server_decrement_busy";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_socks5_server_decrement_busy";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s ss_busy_count underflow", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v20 = type;
        v21 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socks5_server_decrement_busy";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s ss_busy_count underflow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v9)
            goto LABEL_12;
          goto LABEL_11;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_socks5_server_decrement_busy";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s ss_busy_count underflow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_socks5_server_decrement_busy";
          _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s ss_busy_count underflow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v9)
      goto LABEL_12;
LABEL_11:
    free(v9);
    goto LABEL_12;
  }
LABEL_13:

  v13 = v23[14];
  if (!v13 || (v14 = v13 - 1, (v23[14] = v14) == 0))
  {
    v15 = v23[15];
    if (v15)
    {
      v16 = mach_continuous_time();
      if (v16 <= 1)
        v17 = 1;
      else
        v17 = v16;
      v18 = v23[16] + nw_delta_nanos(v15, v17);
      v23[15] = 0;
      v23[16] = v18;
    }
  }
LABEL_20:

}

void ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke(uint64_t a1, char a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v7 = 136446466;
      v8 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      v9 = 2114;
      v10 = v4;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ out connection no longer viable, cancelling", (uint8_t *)&v7, 0x16u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) |= 1u;
    v5 = *(void **)(a1 + 32);
    v6 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 50);
    nw_socks5_connection_cancel_on_queue(v5, v6);

  }
}

void sub_1834FB85C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_157(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  int v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  int v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  os_log_type_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  _QWORD access_block[4];
  id v46;
  id v47;
  _QWORD aBlock[4];
  NSObject *v49;
  char v50;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  _QWORD v57[3];

  v57[2] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a2 != 2)
  {
    v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v6)
    {
      nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), v6);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = 0;

    }
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 56) == 255)
    goto LABEL_56;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5)
      v10 = "unknown";
    else
      v10 = off_1E149DE10[a2];
    v11 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v53 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
    v54 = 2114;
    v55 = v11;
    v56 = 2082;
    v57[0] = v10;
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, "%{public}s %{public}@ out connection event %{public}s", buf, 0x20u);
  }

  if (a2 == 4)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) |= 1u;
    v12 = *(unsigned __int8 **)(a1 + 32);
    if ((~v12[160] & 3) == 0)
    {
      nw_socks5_connection_cancel_on_queue(v12, v5);
      goto LABEL_56;
    }
    if (!v5)
      goto LABEL_56;
    goto LABEL_16;
  }
  if (!v5)
  {
    if (a2 != 3)
      goto LABEL_56;
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(unsigned __int8 *)(v18 + 56);
    if (v19 <= 0x67)
    {
      if (v19 == 7)
      {
        *(_BYTE *)(v18 + 56) = 8;
LABEL_50:
        v38 = MEMORY[0x1E0C809B0];
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_158;
        aBlock[3] = &unk_1E149FE40;
        v40 = *(void **)(a1 + 32);
        v39 = (uint64_t *)(a1 + 32);
        v49 = v40;
        v41 = _Block_copy(aBlock);
        v42 = *v39;
        if (*(_BYTE *)(*v39 + 56) == 105 && (*(_BYTE *)(v42 + 161) & 4) != 0)
        {
          v43 = *(NSObject **)(v42 + 144);
          v44 = *(NSObject **)(v42 + 40);
          access_block[0] = v38;
          access_block[1] = 3221225472;
          access_block[2] = ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_159;
          access_block[3] = &unk_1E149C5C0;
          v46 = (id)v42;
          v47 = v41;
          nw_connection_access_establishment_report(v43, v44, access_block);

        }
        else
        {
          nw_socks5_connection_send_reply_on_queue((void *)v42, 1, v41);
        }

        v15 = v49;
        goto LABEL_55;
      }
      if (v19 == 8)
        goto LABEL_56;
    }
    else
    {
      if (v19 == 200 || v19 == 105)
        goto LABEL_56;
      if (v19 == 104)
      {
        *(_BYTE *)(v18 + 56) = 105;
        goto LABEL_50;
      }
    }
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(unsigned __int8 *)(v21 + 56);
    *(_DWORD *)buf = 136446722;
    v53 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
    v54 = 2114;
    v55 = v21;
    v56 = 1024;
    LODWORD(v57[0]) = v22;
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v23, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          v26 = *(_QWORD *)(a1 + 32);
          v27 = *(unsigned __int8 *)(v26 + 56);
          *(_DWORD *)buf = 136446722;
          v53 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          v54 = 2114;
          v55 = v26;
          v56 = 1024;
          LODWORD(v57[0]) = v27;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s %{public}@ out connection ready from unexpected state %u", buf, 0x1Cu);
        }
      }
      else if (v50)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        v30 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v30)
          {
            v31 = *(_QWORD *)(a1 + 32);
            v32 = *(unsigned __int8 *)(v31 + 56);
            *(_DWORD *)buf = 136446978;
            v53 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
            v54 = 2114;
            v55 = v31;
            v56 = 1024;
            LODWORD(v57[0]) = v32;
            WORD2(v57[0]) = 2082;
            *(_QWORD *)((char *)v57 + 6) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s %{public}@ out connection ready from unexpected state %u, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }
        if (v30)
        {
          v36 = *(_QWORD *)(a1 + 32);
          v37 = *(unsigned __int8 *)(v36 + 56);
          *(_DWORD *)buf = 136446722;
          v53 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          v54 = 2114;
          v55 = v36;
          v56 = 1024;
          LODWORD(v57[0]) = v37;
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s %{public}@ out connection ready from unexpected state %u, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v24, type))
        {
          v34 = *(_QWORD *)(a1 + 32);
          v35 = *(unsigned __int8 *)(v34 + 56);
          *(_DWORD *)buf = 136446722;
          v53 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          v54 = 2114;
          v55 = v34;
          v56 = 1024;
          LODWORD(v57[0]) = v35;
          _os_log_impl(&dword_182FBE000, v24, v33, "%{public}s %{public}@ out connection ready from unexpected state %u, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
LABEL_47:
    if (v23)
      free(v23);
    nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
    goto LABEL_50;
  }
  v12 = *(unsigned __int8 **)(a1 + 32);
LABEL_16:
  v13 = v12[56];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  v15 = v14;
  if (v13 == 200)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446722;
      v53 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      v54 = 2114;
      v55 = v16;
      v56 = 2114;
      v57[0] = v5;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ ignoring out connection event error %{public}@", buf, 0x20u);
    }
LABEL_55:

    goto LABEL_56;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v17 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v53 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
    v54 = 2114;
    v55 = v17;
    v56 = 2114;
    v57[0] = v5;
    _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ out connection event error %{public}@", buf, 0x20u);
  }

  nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), v5);
LABEL_56:

}

void sub_1834FBF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_158(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  NSObject *v10;
  NSObject *v11;
  nw_protocol_metadata_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  nw_protocol_options_t options;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 56);
  if (v3 != 255)
  {
    if (!a2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
LABEL_26:

        nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
        return;
      }
      v20 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      v47 = 2114;
      v48 = v20;
      v21 = "%{public}s %{public}@ failed to write reply";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, v21, buf, 0x16u);
      goto LABEL_26;
    }
    if (v3 != 105 && v3 != 8)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
      v24 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      v47 = 2114;
      v48 = v24;
      v21 = "%{public}s %{public}@ wrote reply but ended in bad state";
      goto LABEL_25;
    }
    *(_BYTE *)(v2 + 56) = -56;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      v47 = 2114;
      v48 = v7;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ successfully wrote reply", buf, 0x16u);
    }

    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_BYTE *)(v8 + 160);
    if ((v9 & 0xA0) != 0x20)
      goto LABEL_53;
    v10 = *(NSObject **)(v8 + 32);
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
    v11 = (id)g_tcp_definition;
    v12 = nw_connection_copy_protocol_metadata(v10, v11);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = v13;
    if (!v12)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
        v47 = 2114;
        v48 = v25;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ metadata for inner connection is nil -- unable to setting TCP no delay", buf, 0x16u);
      }

      goto LABEL_48;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v15 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
      v47 = 2114;
      v48 = v15;
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}@ setting TCP no delay on inner connection", buf, 0x16u);
    }

    if (!nw_tcp_set_no_delay(v12, 1))
    {
LABEL_48:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        v39 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
        v47 = 2114;
        v48 = v39;
        _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_INFO, "%{public}s %{public}@ adding UDP framer", buf, 0x16u);
      }

      if (nw_shoes_copy_udp_framer_definition::onceToken != -1)
        dispatch_once(&nw_shoes_copy_udp_framer_definition::onceToken, &__block_literal_global_26791);
      v40 = (id)nw_shoes_copy_udp_framer_definition::definition;
      v41 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
      options = nw_framer_create_options(v40);
      nw_connection_append_and_start_application_protocol(v41, options);

      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_BYTE *)(v8 + 160);
LABEL_53:
      *(_BYTE *)(v8 + 160) = v9 | 0x10;
      nw_socks5_connection_outer_connection_read_on_queue(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
      nw_socks5_connection_inner_connection_read_on_queue(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
      return;
    }
    v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    v18 = v17;
    if (v16 == 22)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v19 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
        v47 = 2114;
        v48 = v19;
        v49 = 1024;
        v50 = 22;
        _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d", buf, 0x1Cu);
      }

      goto LABEL_48;
    }
    v26 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
    v47 = 2114;
    v48 = v26;
    v49 = 1024;
    v50 = v16;
    v27 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v27, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          v30 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          v47 = 2114;
          v48 = v30;
          v49 = 1024;
          v50 = v16;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        v33 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v33)
          {
            v34 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446978;
            v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
            v47 = 2114;
            v48 = v34;
            v49 = 1024;
            v50 = v16;
            v51 = 2082;
            v52 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v32, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_46;
        }
        if (v33)
        {
          v37 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          v47 = 2114;
          v48 = v37;
          v49 = 1024;
          v50 = v16;
          _os_log_impl(&dword_182FBE000, v28, v32, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v28, type))
        {
          v36 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v46 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
          v47 = 2114;
          v48 = v36;
          v49 = 1024;
          v50 = v16;
          _os_log_impl(&dword_182FBE000, v28, v35, "%{public}s %{public}@ error setting TCP no delay on inner connection %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
LABEL_46:
    if (v27)
      free(v27);
    goto LABEL_48;
  }
}

void sub_1834FC6FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL43nw_socks5_connection_connect_outer_on_queueP31NWConcrete_nw_socks5_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke_159(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;

  v5 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 56) != 255)
  {
    objc_storeStrong((id *)(v4 + 176), a2);
    nw_socks5_connection_send_reply_on_queue(*(void **)(a1 + 32), 1, *(void **)(a1 + 40));
  }

}

void sub_1834FC794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_socks5_connection_send_reply_on_queue(void *a1, char a2, void *a3)
{
  NWConcrete_nw_socks5_connection *v5;
  void (**v6)(id, _QWORD);
  int sc_state;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  _BOOL4 is_expensive;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 is_constrained;
  char v15;
  char v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *backtrace_string;
  uint64_t (*v28)(uint64_t, uint64_t);
  NSObject *v29;
  os_log_type_t v30;
  OS_nw_error *v31;
  OS_nw_error *v32;
  OS_nw_error *v33;
  unsigned int v34;
  OS_nw_error *v35;
  int v36;
  int v37;
  char v38;
  int v39;
  char v40;
  int v41;
  char v42;
  char v43;
  int v44;
  int v45;
  id v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  os_log_type_t v50;
  NSObject *v51;
  NSObject *p_super;
  NSObject *v53;
  NSObject *v54;
  char v55;
  char v56;
  const sockaddr *v57;
  int v58;
  NSObject *v59;
  NSObject *v60;
  const sockaddr *address;
  os_log_type_t v62;
  char *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  os_log_type_t v66;
  OS_nw_establishment_report *sc_out_establishment_report;
  uint64_t v68;
  OS_nw_establishment_report *v69;
  _QWORD *v70;
  int v71;
  unsigned __int8 *v72;
  _QWORD *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  _BOOL4 v76;
  unsigned __int16 v77;
  _DWORD *v78;
  unsigned __int16 v79;
  NSObject *v80;
  __int16 v81;
  BOOL v82;
  int v83;
  NSObject *v84;
  __int16 v85;
  unsigned __int8 *v86;
  NSObject *v87;
  NSObject *v88;
  id v89;
  id v90;
  NSObject *v91;
  NSObject *v92;
  id WeakRetained;
  id v94;
  NSObject *v95;
  void *v96;
  void *v97;
  int v98;
  NSObject *v99;
  sockaddr *v100;
  uint64_t v101;
  unsigned __int8 v102;
  _QWORD completion[4];
  NWConcrete_nw_socks5_connection *v104;
  id v105;
  void (**v106)(id, _QWORD);
  _QWORD v107[4];
  NWConcrete_nw_socks5_connection *v108;
  uint64_t *v109;
  _DWORD *v110;
  __int16 v111;
  _QWORD v112[5];
  _QWORD v113[5];
  uint64_t buffer;
  uint64_t *p_buffer;
  uint64_t v116;
  __int16 v117;
  char __src;
  _BYTE v119[24];
  uint64_t (*v120)(uint64_t, uint64_t);
  void (*v121)(uint64_t);
  id v122;
  _BYTE buf[24];
  __int128 v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  sc_state = v5->sc_state;
  if (sc_state == 255 || (*((_BYTE *)v5 + 160) & 8) != 0)
    goto LABEL_105;
  if (!v5->sc_in_connection)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    *(_DWORD *)v119 = 136446466;
    *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
    *(_WORD *)&v119[12] = 2114;
    *(_QWORD *)&v119[14] = v5;
    v18 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(buffer) = 0;
    if (__nwlog_fault(v18, buf, &buffer))
    {
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v20 = buf[0];
        if (os_log_type_enabled(v19, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v119 = 136446466;
          *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
          *(_WORD *)&v119[12] = 2114;
          *(_QWORD *)&v119[14] = v5;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s %{public}@ cannot send reply without inner connection", v119, 0x16u);
        }
      }
      else if ((_BYTE)buffer)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          v28 = (uint64_t (*)(uint64_t, uint64_t))backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v29 = (id)gLogObj;
          v30 = buf[0];
          if (os_log_type_enabled(v29, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)v119 = 136446722;
            *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
            *(_WORD *)&v119[12] = 2114;
            *(_QWORD *)&v119[14] = v5;
            *(_WORD *)&v119[22] = 2082;
            v120 = v28;
            _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s %{public}@ cannot send reply without inner connection, dumping backtrace:%{public}s", v119, 0x20u);
          }

          free(v28);
          if (!v18)
            goto LABEL_105;
          goto LABEL_104;
        }
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v62 = buf[0];
        if (os_log_type_enabled(v19, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v119 = 136446466;
          *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
          *(_WORD *)&v119[12] = 2114;
          *(_QWORD *)&v119[14] = v5;
          _os_log_impl(&dword_182FBE000, v19, v62, "%{public}s %{public}@ cannot send reply without inner connection, no backtrace", v119, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v50 = buf[0];
        if (os_log_type_enabled(v19, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v119 = 136446466;
          *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
          *(_WORD *)&v119[12] = 2114;
          *(_QWORD *)&v119[14] = v5;
          _os_log_impl(&dword_182FBE000, v19, v50, "%{public}s %{public}@ cannot send reply without inner connection, backtrace limit exceeded", v119, 0x16u);
        }
      }

    }
    if (!v18)
    {
LABEL_105:
      v6[2](v6, 0);
LABEL_106:

      return;
    }
LABEL_104:
    free(v18);
    goto LABEL_105;
  }
  if ((sc_state - 101) >= 5)
  {
    if ((sc_state - 7) < 2)
    {
      *(_QWORD *)v119 = 0;
      *(_QWORD *)&v119[8] = v119;
      *(_QWORD *)&v119[16] = 0x3032000000;
      v120 = __Block_byref_object_copy__16041;
      v121 = __Block_byref_object_dispose__16042;
      v122 = 0;
      LOBYTE(buffer) = 5;
      BYTE1(buffer) = a2 ^ 1;
      *(_DWORD *)((char *)&buffer + 2) = 768;
      BYTE6(buffer) = 0;
      v21 = dispatch_data_create(&buffer, 7uLL, 0, 0);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      v23 = v22;
      if ((a2 & 1) != 0)
      {
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          goto LABEL_78;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_send_reply_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        v24 = "%{public}s %{public}@ sending SOCKS success reply";
        v25 = v23;
        v26 = OS_LOG_TYPE_INFO;
      }
      else
      {
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_78;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_send_reply_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        v24 = "%{public}s %{public}@ sending SOCKS failure reply";
        v25 = v23;
        v26 = OS_LOG_TYPE_ERROR;
      }
      _os_log_impl(&dword_182FBE000, v25, v26, v24, buf, 0x16u);
LABEL_78:

      if (v21)
      {
LABEL_153:
        *((_BYTE *)v5 + 160) |= 8u;
        v88 = &__block_literal_global_41718;
        v89 = &__block_literal_global_41718;
        if ((a2 & 1) == 0)
        {
          v90 = &__block_literal_global_3_41726;

          v88 = &__block_literal_global_3_41726;
        }
        v91 = v5->sc_in_connection;
        if (*((char *)v5 + 160) < 0)
        {
          v92 = v5->sc_in_udp_associated_tcp_connection;

          v91 = v92;
        }
        WeakRetained = objc_loadWeakRetained((id *)&v5->sc_parent);
        nw_socks5_connection_increment_busy_on_queue(v5, WeakRetained);
        completion[0] = MEMORY[0x1E0C809B0];
        completion[1] = 3221225472;
        completion[2] = ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_167;
        completion[3] = &unk_1E149C638;
        v104 = v5;
        v94 = WeakRetained;
        v105 = v94;
        v106 = v6;
        nw_connection_send(v91, v21, v88, 1, completion);

        goto LABEL_159;
      }
LABEL_158:
      v6[2](v6, 0);
      v21 = 0;
LABEL_159:
      _Block_object_dispose(v119, 8);

      goto LABEL_106;
    }
    if (v5->sc_state)
    {
LABEL_124:
      *(_QWORD *)v119 = 0;
      *(_QWORD *)&v119[8] = v119;
      *(_QWORD *)&v119[16] = 0x3032000000;
      v120 = __Block_byref_object_copy__16041;
      v121 = __Block_byref_object_dispose__16042;
      v122 = 0;
      goto LABEL_158;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v46 = (id)gLogObj;
    *(_DWORD *)v119 = 136446466;
    *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
    *(_WORD *)&v119[12] = 2114;
    *(_QWORD *)&v119[14] = v5;
    v47 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(buffer) = 0;
    if (__nwlog_fault(v47, buf, &buffer))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = buf[0];
        if (os_log_type_enabled(v48, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v119 = 136446466;
          *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
          *(_WORD *)&v119[12] = 2114;
          *(_QWORD *)&v119[14] = v5;
          _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s %{public}@ cannot send reply from invalid state", v119, 0x16u);
        }
      }
      else if ((_BYTE)buffer)
      {
        v63 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v64 = buf[0];
        v65 = os_log_type_enabled(v48, (os_log_type_t)buf[0]);
        if (v63)
        {
          if (v65)
          {
            *(_DWORD *)v119 = 136446722;
            *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
            *(_WORD *)&v119[12] = 2114;
            *(_QWORD *)&v119[14] = v5;
            *(_WORD *)&v119[22] = 2082;
            v120 = (uint64_t (*)(uint64_t, uint64_t))v63;
            _os_log_impl(&dword_182FBE000, v48, v64, "%{public}s %{public}@ cannot send reply from invalid state, dumping backtrace:%{public}s", v119, 0x20u);
          }

          free(v63);
          goto LABEL_122;
        }
        if (v65)
        {
          *(_DWORD *)v119 = 136446466;
          *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
          *(_WORD *)&v119[12] = 2114;
          *(_QWORD *)&v119[14] = v5;
          _os_log_impl(&dword_182FBE000, v48, v64, "%{public}s %{public}@ cannot send reply from invalid state, no backtrace", v119, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v66 = buf[0];
        if (os_log_type_enabled(v48, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v119 = 136446466;
          *(_QWORD *)&v119[4] = "nw_socks5_connection_send_reply_on_queue";
          *(_WORD *)&v119[12] = 2114;
          *(_QWORD *)&v119[14] = v5;
          _os_log_impl(&dword_182FBE000, v48, v66, "%{public}s %{public}@ cannot send reply from invalid state, backtrace limit exceeded", v119, 0x16u);
        }
      }

    }
LABEL_122:
    if (v47)
      free(v47);
    goto LABEL_124;
  }
  *(_QWORD *)v119 = 0;
  *(_QWORD *)&v119[8] = v119;
  *(_QWORD *)&v119[16] = 0x3032000000;
  v120 = __Block_byref_object_copy__16041;
  v121 = __Block_byref_object_dispose__16042;
  v122 = 0;
  __src = 0;
  if ((a2 & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_socks5_connection_send_reply_on_queue";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v5;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}@ sending SHOES success reply", buf, 0x16u);
    }

    v9 = nw_connection_copy_connected_path(v5->sc_out_connection);
    v10 = v9;
    if (v9)
    {
      is_expensive = nw_path_is_expensive(v9);
      v12 = nw_path_uses_interface_type(v10, nw_interface_type_wifi);
      v13 = nw_path_uses_interface_type(v10, nw_interface_type_cellular);
      is_constrained = nw_path_is_constrained(v10);
      if (is_expensive || v12 || v13 || is_constrained)
      {
        if (is_expensive)
          v15 = 0x80;
        else
          v15 = 0;
        if (v12)
          v15 |= 0x20u;
        if (v13)
          v15 |= 0x40u;
        if (is_constrained)
          v16 = v15 | 0x10;
        else
          v16 = v15;
        __src = v16;
      }
      else
      {
        v16 = 0;
      }
      if ((*((_BYTE *)v5 + 160) & 0x40) != 0)
        nw_socks5_connection_add_prefer_wifi_request(v5);
      v102 = v16;
      if ((*((_BYTE *)v5 + 161) & 2) != 0)
      {
        v59 = nw_connection_copy_connected_remote_endpoint(v5->sc_out_connection);
        v60 = v59;
        if (v59)
          address = nw_endpoint_get_address(v59);
        else
          address = 0;

        v58 = 4 * (v102 != 0);
        v57 = address;
        if (address)
        {
          v45 = 0;
          v58 = (v58 | 3) + address->sa_len;
          v101 = 1;
        }
        else
        {
          v101 = 0;
          v45 = 0;
        }
        goto LABEL_131;
      }

      if (v16)
      {
        v101 = 0;
        v57 = 0;
        v45 = 0;
LABEL_130:
        v58 = 4;
        goto LABEL_131;
      }
    }
    else
    {

      v102 = 0;
    }
    v101 = 0;
    v57 = 0;
    v45 = 0;
    v58 = 0;
  }
  else
  {
    v31 = v5->sc_error;
    v32 = v31;
    if (v31)
    {
      v33 = v31;
      v34 = *((_DWORD *)v33 + 3);

      v35 = v33;
      v36 = *((_DWORD *)v35 + 2);

      v37 = v34 + 71;
      if (v34 + 10055 <= 0xFF)
      {
        v38 = 4;
      }
      else
      {
        v37 = 3;
        v38 = 1;
      }
      if ((v34 & 0xFFFFFF00) == 0xFFFEFF00)
        v39 = v34;
      else
        v39 = 2;
      if ((v34 & 0xFFFFFF00) == 0xFFFEFF00)
        v40 = 3;
      else
        v40 = 1;
      if (v34 >= 0x100)
        v41 = 1;
      else
        v41 = v34;
      if (v34 >= 0x100)
        v42 = 1;
      else
        v42 = 2;
      if (v36 == 1)
      {
        v43 = v42;
      }
      else
      {
        v41 = 0;
        v43 = 1;
      }
      if (v36 == 2)
        v44 = v39;
      else
        v44 = v41;
      if (v36 == 2)
        v43 = v40;
      if (v36 == 3)
        v45 = v37;
      else
        v45 = v44;
      if (v36 == 3)
        v43 = v38;
    }
    else
    {
      v45 = 0;
      v43 = 1;
    }
    BYTE4(v101) = v43;

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v51 = (id)gLogObj;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_socks5_connection_send_reply_on_queue";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v5;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v124) = BYTE4(v101);
      WORD2(v124) = 1024;
      *(_DWORD *)((char *)&v124 + 6) = v45;
      _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ sending SHOES failure reply domain %u code %u", buf, 0x22u);
    }

    p_super = &v5->sc_out_connection->super;
    if (p_super)
    {
      v53 = nw_connection_copy_current_path(p_super);
      v54 = v53;
      if (v53 && nw_path_get_status(v53) == nw_path_status_unsatisfied)
      {
        switch(nw_path_get_reason(v54))
        {
          case 5u:
            v55 = 0x80;
            v56 = 0x80;
            break;
          case 6u:
            v55 = 64;
            v56 = 64;
            break;
          case 0x1Au:
            v55 = 16;
            v56 = 16;
            break;
          case 0x1Bu:
            v55 = 72;
            v56 = 72;
            break;
          case 0x1Cu:
            v55 = 40;
            v56 = 40;
            break;
          default:
            goto LABEL_88;
        }
        v102 = v56;
        __src = v55;

        LODWORD(v101) = 0;
        v57 = 0;
        goto LABEL_130;
      }
LABEL_88:

    }
    v102 = 0;
    LODWORD(v101) = 0;
    v57 = 0;
    v58 = 0;
  }
LABEL_131:
  v100 = (sockaddr *)v57;
  if ((*((_BYTE *)v5 + 161) & 4) != 0 && (sc_out_establishment_report = v5->sc_out_establishment_report) != 0)
  {
    buffer = 0;
    p_buffer = &buffer;
    v116 = 0x2020000000;
    v117 = 0;
    v68 = MEMORY[0x1E0C809B0];
    v113[0] = MEMORY[0x1E0C809B0];
    v113[1] = 3221225472;
    v113[2] = ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke;
    v113[3] = &unk_1E149EDB0;
    v113[4] = v119;
    v69 = sc_out_establishment_report;
    v70 = v113;
    v71 = v45;
    v72 = (unsigned __int8 *)*((_QWORD *)v69 + 9);
    *(_QWORD *)buf = v68;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_establishment_report_enumerate_resolution_reports_block_invoke;
    *(_QWORD *)&v124 = &unk_1E14AC278;
    v73 = v70;
    *((_QWORD *)&v124 + 1) = v73;
    v74 = v72;
    v45 = v71;
    nw_array_apply(v74, (uint64_t)buf);

    v75 = *(unsigned __int8 **)(*(_QWORD *)&v119[8] + 40);
    v112[0] = v68;
    v112[1] = 3221225472;
    v112[2] = ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_3;
    v112[3] = &unk_1E14A8DC0;
    v112[4] = &buffer;
    nw_array_apply(v75, (uint64_t)v112);
    v76 = *((_WORD *)p_buffer + 12) != 0;
    v58 += *((unsigned __int16 *)p_buffer + 12);
    _Block_object_dispose(&buffer, 8);
  }
  else
  {
    v76 = 0;
  }
  v77 = v58 + 4;
  if ((_WORD)v58 == 0xFFFC)
  {
    __nwlog_obj();
    v95 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "strict_malloc";
    v96 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v96))
      goto LABEL_164;
    free(v96);
  }
  v78 = malloc_type_malloc((unsigned __int16)(v58 + 4), 0xF2B69DE5uLL);
  if (v78)
  {
LABEL_137:
    buffer = 0;
    p_buffer = &buffer;
    v116 = 0x2020000000;
    v117 = 0;
    *v78 = (BYTE4(v101) << 16) | (v45 << 24) | (bswap32(v58 + 2) >> 16);
    v79 = *((_WORD *)p_buffer + 12) + 4;
    *((_WORD *)p_buffer + 12) = v79;
    if (v102 && v79 < v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v80 = (id)gLogObj;
      if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_send_reply_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&v124 = "path_flags";
        WORD4(v124) = 1024;
        *(_DWORD *)((char *)&v124 + 10) = v102;
        _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_INFO, "%{public}s %{public}@ sending reply tlv: %{public}s(%#x)", buf, 0x26u);
      }

      v81 = nw_shoes_add_tlv((uint64_t)v78 + *((unsigned __int16 *)p_buffer + 12), (unsigned __int16)(v77 - *((_WORD *)p_buffer + 12)), 4u, 1uLL, &__src);
      v79 = *((_WORD *)p_buffer + 12) + v81;
      *((_WORD *)p_buffer + 12) = v79;
    }
    v82 = v79 >= v77;
    v83 = v101;
    if (v82)
      v83 = 0;
    if (v83 == 1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v84 = (id)gLogObj;
      if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_send_reply_on_queue";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&v124 = "connected_endpoint";
        _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_INFO, "%{public}s %{public}@ sending reply tlv: %{public}s", buf, 0x20u);
      }

      v85 = nw_shoes_add_tlv((uint64_t)v78 + *((unsigned __int16 *)p_buffer + 12), (unsigned __int16)(v77 - *((_WORD *)p_buffer + 12)), 7u, v100->sa_len, v100);
      *((_WORD *)p_buffer + 12) += v85;
    }
    if (v76)
    {
      v86 = *(unsigned __int8 **)(*(_QWORD *)&v119[8] + 40);
      v107[0] = MEMORY[0x1E0C809B0];
      v107[1] = 3221225472;
      v107[2] = ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_166;
      v107[3] = &unk_1E149C610;
      v109 = &buffer;
      v111 = v58 + 4;
      v108 = v5;
      v110 = v78;
      nw_array_apply(v86, (uint64_t)v107);

    }
    v21 = dispatch_data_create(v78, (unsigned __int16)(v58 + 4), 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v87 = (id)gLogObj;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_socks5_connection_send_reply_on_queue";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v5;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&v124 = v21;
      _os_log_impl(&dword_182FBE000, v87, OS_LOG_TYPE_INFO, "%{public}s %{public}@ sending SHOES %@", buf, 0x20u);
    }

    _Block_object_dispose(&buffer, 8);
    if (v21)
      goto LABEL_153;
    goto LABEL_158;
  }
  __nwlog_obj();
  v98 = v45;
  v99 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v99, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "strict_malloc";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = (unsigned __int16)(v58 + 4);
  v97 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v97))
  {
    free(v97);
    v45 = v98;
    goto LABEL_137;
  }
LABEL_164:
  __break(1u);
}

void sub_1834FDA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  _Block_object_dispose((const void *)(v5 - 208), 8);
  _Unwind_Resume(a1);
}

void nw_socks5_connection_add_prefer_wifi_request(NWConcrete_nw_socks5_connection *a1)
{
  NWConcrete_nw_socks5_connection *v1;
  nw_parameters_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  nw_parameters_t v5;
  const char *effective_bundle_id;
  NWConcrete_nw_path_evaluator *evaluator_for_endpoint;
  OS_dispatch_queue *sc_queue;
  _QWORD v9[4];
  id v10;
  id location;

  v1 = a1;
  if (!v1->sc_prefer_wifi_path_evaluator)
  {
    v2 = nw_parameters_create();
    v3 = xpc_array_create(0, 0);
    v4 = xpc_array_create(0, 0);
    xpc_array_set_string(v3, 0xFFFFFFFFFFFFFFFFLL, "com.apple.networkrelay");
    xpc_array_set_string(v4, 0xFFFFFFFFFFFFFFFFLL, "PreferWiFi");
    nw_parameters_set_required_netagent_classes(v2, v3, v4);
    v5 = nw_connection_copy_parameters(&v1->sc_out_connection->super);
    effective_bundle_id = (const char *)nw_parameters_get_effective_bundle_id(v5);
    if (effective_bundle_id)
      nw_parameters_set_account_id(v2, effective_bundle_id);
    evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, v2);
    objc_initWeak(&location, v1);
    sc_queue = v1->sc_queue;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___ZL44nw_socks5_connection_add_prefer_wifi_requestP31NWConcrete_nw_socks5_connection_block_invoke;
    v9[3] = &unk_1E14AC8E0;
    objc_copyWeak(&v10, &location);
    nw_path_evaluator_set_update_handler(evaluator_for_endpoint, sc_queue, v9);
    objc_storeStrong((id *)&v1->sc_prefer_wifi_path_evaluator, evaluator_for_endpoint);
    nw_socks5_connection_assert_prefer_wifi(v1);
    objc_destroyWeak(&v10);
    objc_destroyWeak(&location);

  }
}

void sub_1834FDC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke(uint64_t a1, void *a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_2;
  v3[3] = &unk_1E149ED88;
  v3[4] = *(_QWORD *)(a1 + 32);
  nw_resolution_report_enumerate_endpoints(a2, v3);
  return 0;
}

uint64_t ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  const sockaddr *address;

  v4 = a3;
  address = nw_endpoint_get_address(v4);
  if (address)
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += address->sa_len + 3;

  return 1;
}

void sub_1834FDD88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_166(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  sockaddr *address;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  address = (sockaddr *)nw_endpoint_get_address(v4);
  if (address
    && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) < *(unsigned __int16 *)(a1 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v10 = 136446722;
      v11 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
      v12 = 2114;
      v13 = v7;
      v14 = 2082;
      v15 = "resolved_endpoint";
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ sending reply tlv: %{public}s", (uint8_t *)&v10, 0x20u);
    }

    v8 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += nw_shoes_add_tlv(*(_QWORD *)(a1 + 48) + v8, (unsigned __int16)(*(_WORD *)(a1 + 56) - v8), 8u, address->sa_len, address);
  }

  return 1;
}

void sub_1834FDF08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_167(uint64_t a1, void *a2)
{
  id v3;
  _DWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (!v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_8;
  }
  v4 = v3;
  v5 = v4[3];

  switch(v5)
  {
    case 6:
    case 32:
    case 49:
    case 50:
    case 51:
    case 53:
    case 54:
    case 57:
    case 60:
    case 61:
    case 65:
    case 89:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
        v25 = 2114;
        v26 = v7;
        v27 = 1024;
        v28 = v5;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ write in request reply error %{darwin.errno}d", buf, 0x1Cu);
      }

LABEL_6:
      nw_socks5_connection_cancel_on_queue(*(_QWORD *)(a1 + 32), 0);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 0);
LABEL_8:

      return;
    default:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446722;
      v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
      v25 = 2114;
      v26 = v9;
      v27 = 1024;
      v28 = v5;
      v10 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v21 = 0;
      if (!__nwlog_fault(v10, &type, &v21))
        goto LABEL_25;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          v13 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
          v25 = 2114;
          v26 = v13;
          v27 = 1024;
          v28 = v5;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s %{public}@ write in request reply error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v16)
          {
            v17 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446978;
            v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
            v25 = 2114;
            v26 = v17;
            v27 = 1024;
            v28 = v5;
            v29 = 2082;
            v30 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s %{public}@ write in request reply error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v16)
        {
          v20 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
          v25 = 2114;
          v26 = v20;
          v27 = 1024;
          v28 = v5;
          _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s %{public}@ write in request reply error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          v19 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v24 = "nw_socks5_connection_send_reply_on_queue_block_invoke";
          v25 = 2114;
          v26 = v19;
          v27 = 1024;
          v28 = v5;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s %{public}@ write in request reply error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

LABEL_25:
      if (v10)
        free(v10);
      goto LABEL_6;
  }
}

void sub_1834FE35C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (!v4)
  {
    v5 = nw_array_create();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  nw_array_append(v4, v3);

  return 1;
}

void ___ZL44nw_socks5_connection_add_prefer_wifi_requestP31NWConcrete_nw_socks5_connection_block_invoke(uint64_t a1)
{
  NWConcrete_nw_socks5_connection *WeakRetained;

  WeakRetained = (NWConcrete_nw_socks5_connection *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained->sc_state != 255)
    nw_socks5_connection_assert_prefer_wifi(WeakRetained);

}

void sub_1834FE42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_socks5_connection_assert_prefer_wifi(NWConcrete_nw_socks5_connection *a1)
{
  NWConcrete_nw_socks5_connection *v1;
  os_unfair_lock_s *sc_prefer_wifi_path_evaluator;
  os_unfair_lock_s *v3;
  id *v4;
  NWConcrete_nw_path *v5;
  nw_path_status_t status;
  NSObject *v7;
  nw_path_status_t v8;
  NSObject *v9;
  OS_xpc_object *network_agent_dictionary;
  OS_xpc_object *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  NSObject *v16;
  NSObject *v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  char v22;
  _QWORD applier[5];
  uint8_t buf[48];
  os_log_type_t type[4];
  const char *v26;
  __int16 v27;
  NWConcrete_nw_socks5_connection *v28;
  __int16 v29;
  uint8_t *v30;
  uuid_t uu;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  sc_prefer_wifi_path_evaluator = (os_unfair_lock_s *)v1->sc_prefer_wifi_path_evaluator;
  if (sc_prefer_wifi_path_evaluator)
  {
    v3 = sc_prefer_wifi_path_evaluator + 24;
    v4 = sc_prefer_wifi_path_evaluator;
    os_unfair_lock_lock(v3);
    v5 = (NWConcrete_nw_path *)v4[6];
    os_unfair_lock_unlock(v3);

    status = nw_path_get_status(&v5->super);
    if (status != nw_path_status_satisfied)
    {
      v8 = status;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_assert_prefer_wifi";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v1;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v8;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s %@ waiting to add prefer wi-fi request (%u)", buf, 0x1Cu);
      }

      v1->sc_prefer_wifi_previous_path_status = v8;
      goto LABEL_41;
    }
    if (v1->sc_prefer_wifi_previous_path_status == 1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_socks5_connection_assert_prefer_wifi";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v1;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %@ ignoring path update to add prefer wi-fi request", buf, 0x16u);
      }

      goto LABEL_41;
    }
    v1->sc_prefer_wifi_previous_path_status = 1;
    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    if (v5 && (network_agent_dictionary = v5->network_agent_dictionary) != 0)
    {
      v11 = network_agent_dictionary;
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = ___ZL39nw_socks5_connection_assert_prefer_wifiP31NWConcrete_nw_socks5_connection_block_invoke;
      applier[3] = &__block_descriptor_40_e37_B24__0r_8__NSObject_OS_xpc_object__16l;
      applier[4] = uu;
      xpc_dictionary_apply(v11, applier);
    }
    else
    {
      v11 = 0;
    }
    if (!uuid_is_null(uu))
    {
      memset(buf, 0, 37);
      uuid_unparse(uu, (char *)buf);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)type = 136446722;
        v26 = "nw_socks5_connection_assert_prefer_wifi";
        v27 = 2112;
        v28 = v1;
        v29 = 2080;
        v30 = buf;
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s %@ adding prefer wi-fi request, asserting agent %s", (uint8_t *)type, 0x20u);
      }

      if (!nw_path_agent_action(v5, uu, 131))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)type = 136446722;
          v26 = "nw_socks5_connection_assert_prefer_wifi";
          v27 = 2112;
          v28 = v1;
          v29 = 2080;
          v30 = buf;
          _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s %@ failed to assert prefer wi-fi agent(%s)", (uint8_t *)type, 0x20u);
        }

      }
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_socks5_connection_assert_prefer_wifi";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "com.apple.networkrelay";
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = "PreferWiFi";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v13, type, &v22))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v15 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_assert_prefer_wifi";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "com.apple.networkrelay";
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = "PreferWiFi";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Unable to determine agent uuid for %s/%s", buf, 0x20u);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v19 = type[0];
        v20 = os_log_type_enabled(v14, type[0]);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_socks5_connection_assert_prefer_wifi";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "com.apple.networkrelay";
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = "PreferWiFi";
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s Unable to determine agent uuid for %s/%s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          if (!v13)
            goto LABEL_40;
          goto LABEL_39;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_assert_prefer_wifi";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "com.apple.networkrelay";
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = "PreferWiFi";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s Unable to determine agent uuid for %s/%s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v21 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socks5_connection_assert_prefer_wifi";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "com.apple.networkrelay";
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = "PreferWiFi";
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s Unable to determine agent uuid for %s/%s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v13)
    {
LABEL_40:

LABEL_41:
      goto LABEL_42;
    }
LABEL_39:
    free(v13);
    goto LABEL_40;
  }
LABEL_42:

}

void sub_1834FEAA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 ___ZL39nw_socks5_connection_assert_prefer_wifiP31NWConcrete_nw_socks5_connection_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  __n128 *data;
  __n128 result;
  size_t length;

  length = 0;
  data = (__n128 *)xpc_dictionary_get_data(xdict, "data", &length);
  if (data
    && length >= 0xD8
    && length == data[13].n128_u32[1] + 216
    && !strcmp((const char *)&data[1], "com.apple.networkrelay")
    && !strcmp((const char *)&data[3], "PreferWiFi"))
  {
    result = *data;
    *(__n128 *)*(_QWORD *)(a1 + 32) = *data;
  }
  return result;
}

void nw_socks5_connection_outer_connection_read_on_queue(NWConcrete_nw_socks5_connection *a1)
{
  NWConcrete_nw_socks5_connection *v1;
  NWConcrete_nw_connection *sc_out_connection;
  NWConcrete_nw_socks5_connection *v3;
  NSObject *v4;
  _QWORD v5[4];
  NWConcrete_nw_socks5_connection *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  NWConcrete_nw_socks5_connection *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (gLogDatapath)
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v8 = "nw_socks5_connection_outer_connection_read_on_queue";
      v9 = 2114;
      v10 = v1;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ reading on outer connection", buf, 0x16u);
    }

  }
  sc_out_connection = v1->sc_out_connection;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke;
  v5[3] = &unk_1E14A3048;
  v3 = v1;
  v6 = v3;
  nw_connection_receive_internal(sc_out_connection, 0, 1u, 0xFFFFFFFF, v5);

}

void sub_1834FEC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  size_t size;
  size_t v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  id v21;
  char v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  id v29;
  _QWORD *v30;
  NSObject *v31;
  NSObject *v32;
  id v33;
  id WeakRetained;
  _QWORD *v35;
  NSObject *v36;
  void *v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  char *backtrace_string;
  _BOOL4 v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  const char *v52;
  os_log_type_t v53;
  const char *v54;
  _QWORD v55[4];
  _QWORD *v56;
  id v57;
  size_t v58;
  char v59;
  _QWORD completion[4];
  _QWORD *v61;
  NSObject *v62;
  char v63;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  char *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = v11;
  if (v11)
  {
    v13 = v11;
    v14 = v13[3];

  }
  else
  {
    v14 = 0;
  }
  v15 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v15 + 56) != 255 && (*(_BYTE *)(v15 + 160) & 2) == 0)
  {
    if (v9)
    {
      size = dispatch_data_get_size(v9);
      v17 = size;
      if (!v14 && size)
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v50 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            v51 = *(_QWORD *)(a1 + 32);
            v52 = "not";
            v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
            v67 = 2114;
            *(_DWORD *)buf = 136446978;
            if (a4)
              v52 = "is";
            v68 = v51;
            v69 = 2048;
            v70 = (const char *)v17;
            v71 = 2082;
            v72 = v52;
            _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ read %zu bytes %{public}s_complete from outer connection", buf, 0x2Au);
          }

          v15 = *(_QWORD *)(a1 + 32);
        }
        *(_QWORD *)(v15 + 184) += v17;
        v18 = &__block_literal_global_41718;
        v19 = &__block_literal_global_41718;
        v20 = *(_QWORD *)(a1 + 32);
        if (!a4 || (*(_BYTE *)(v20 + 160) & 0x20) != 0)
        {
          v22 = 0;
        }
        else
        {
          v21 = &__block_literal_global_3_41726;

          v20 = *(_QWORD *)(a1 + 32);
          v22 = 1;
          v18 = &__block_literal_global_3_41726;
        }
        WeakRetained = objc_loadWeakRetained((id *)(v20 + 24));
        nw_socks5_connection_increment_busy_on_queue(*(void **)(a1 + 32), WeakRetained);
        v35 = *(_QWORD **)(a1 + 32);
        v36 = v35[4];
        v55[0] = MEMORY[0x1E0C809B0];
        v55[1] = 3221225472;
        v55[2] = ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke_162;
        v55[3] = &unk_1E149C570;
        v56 = v35;
        v33 = WeakRetained;
        v59 = v22;
        v57 = v33;
        v58 = v17;
        nw_connection_send(v36, v9, v18, 1, v55);

        goto LABEL_30;
      }
      if (v14)
        goto LABEL_16;
    }
    else if (v14)
    {
      v17 = 0;
LABEL_16:
      switch(v14)
      {
        case 6:
        case 32:
        case 49:
        case 50:
        case 51:
        case 53:
        case 54:
        case 57:
        case 60:
        case 61:
        case 65:
        case 96:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v23 = (id)gLogObj;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            v24 = *(_QWORD *)(a1 + 32);
            v25 = "not";
            v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
            *(_DWORD *)buf = 136447234;
            v67 = 2114;
            if (a4)
              v25 = "is";
            v68 = v24;
            v69 = 2048;
            v70 = (const char *)v17;
            v71 = 2082;
            v72 = v25;
            v73 = 1024;
            v74 = v14;
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d", buf, 0x30u);
          }

          goto LABEL_27;
        default:
          __nwlog_obj();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = *(_QWORD *)(a1 + 32);
          v39 = "not";
          v67 = 2114;
          *(_DWORD *)buf = 136447234;
          v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          if (a4)
            v39 = "is";
          v68 = v38;
          v69 = 2048;
          v70 = (const char *)v17;
          v71 = 2082;
          v54 = v39;
          v72 = v39;
          v73 = 1024;
          v74 = v14;
          v40 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v63 = 0;
          if (!__nwlog_fault(v40, &type, &v63))
            goto LABEL_50;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v41 = objc_claimAutoreleasedReturnValue();
            v42 = type;
            if (os_log_type_enabled(v41, type))
            {
              v43 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)buf = 136447234;
              v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
              v67 = 2114;
              v68 = v43;
              v69 = 2048;
              v70 = (const char *)v17;
              v71 = 2082;
              v72 = v54;
              v73 = 1024;
              v74 = v14;
              _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d", buf, 0x30u);
            }
          }
          else if (v63)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v41 = objc_claimAutoreleasedReturnValue();
            v53 = type;
            v45 = os_log_type_enabled(v41, type);
            if (backtrace_string)
            {
              if (v45)
              {
                v46 = *(_QWORD *)(a1 + 32);
                *(_DWORD *)buf = 136447490;
                v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
                v67 = 2114;
                v68 = v46;
                v69 = 2048;
                v70 = (const char *)v17;
                v71 = 2082;
                v72 = v54;
                v73 = 1024;
                v74 = v14;
                v75 = 2082;
                v76 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v41, v53, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x3Au);
              }

              free(backtrace_string);
              goto LABEL_50;
            }
            if (v45)
            {
              v49 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)buf = 136447234;
              v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
              v67 = 2114;
              v68 = v49;
              v69 = 2048;
              v70 = (const char *)v17;
              v71 = 2082;
              v72 = v54;
              v73 = 1024;
              v74 = v14;
              _os_log_impl(&dword_182FBE000, v41, v53, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, no backtrace", buf, 0x30u);
            }
          }
          else
          {
            __nwlog_obj();
            v41 = objc_claimAutoreleasedReturnValue();
            v47 = type;
            if (os_log_type_enabled(v41, type))
            {
              v48 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)buf = 136447234;
              v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
              v67 = 2114;
              v68 = v48;
              v69 = 2048;
              v70 = (const char *)v17;
              v71 = 2082;
              v72 = v54;
              v73 = 1024;
              v74 = v14;
              _os_log_impl(&dword_182FBE000, v41, v47, "%{public}s %{public}@ out connection read error (data len %zu) %{public}s_complete %{darwin.errno}d, backtrace limit exceeded", buf, 0x30u);
            }
          }

LABEL_50:
          if (v40)
            free(v40);
LABEL_27:
          v29 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
          nw_socks5_connection_increment_busy_on_queue(*(void **)(a1 + 32), v29);
          v30 = *(_QWORD **)(a1 + 32);
          v31 = v30[4];
          completion[0] = MEMORY[0x1E0C809B0];
          completion[1] = 3221225472;
          completion[2] = ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke_161;
          completion[3] = &unk_1E149C4F8;
          v61 = v30;
          v32 = v29;
          v62 = v32;
          nw_connection_send(v31, 0, (nw_content_context_t)&__block_literal_global_3_41726, 1, completion);

          v33 = v61;
          v18 = v32;
LABEL_30:

          goto LABEL_31;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *(_QWORD *)(a1 + 32);
      v28 = "not";
      v66 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
      *(_DWORD *)buf = 136446722;
      if (a4)
        v28 = "is";
      v67 = 2114;
      v68 = v27;
      v69 = 2082;
      v70 = v28;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ out connection read data len 0 %{public}s_complete", buf, 0x20u);
    }

    goto LABEL_27;
  }
LABEL_31:

}

void sub_1834FF4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke_161(uint64_t a1, void *a2)
{
  id v3;
  _DWORD *v4;
  int v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  id v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 56) == 255)
    goto LABEL_15;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
      v28 = 2114;
      v29 = v9;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}@ in connection write close done", buf, 0x16u);
    }
    goto LABEL_12;
  }
  v4 = v3;
  v5 = v4[3];

  if ((v5 - 6) > 0x3B || ((1 << (v5 - 6)) & 0x8C9B80004000001) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    v28 = 2114;
    v29 = v12;
    v30 = 1024;
    v31 = v5;
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          v16 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          v28 = 2114;
          v29 = v16;
          v30 = 1024;
          v31 = v5;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s %{public}@ in connection write close error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v19 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v19)
          {
            v20 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446978;
            v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
            v28 = 2114;
            v29 = v20;
            v30 = 1024;
            v31 = v5;
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s %{public}@ in connection write close error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v19)
        {
          v23 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          v28 = 2114;
          v29 = v23;
          v30 = 1024;
          v31 = v5;
          _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s %{public}@ in connection write close error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v14, type))
        {
          v22 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          v28 = 2114;
          v29 = v22;
          v30 = 1024;
          v31 = v5;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s %{public}@ in connection write close error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
LABEL_32:
    if (v13)
      free(v13);
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v27 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    v28 = 2114;
    v29 = v8;
    v30 = 1024;
    v31 = v5;
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ in connection write close error %{darwin.errno}d", buf, 0x1Cu);
  }
LABEL_12:

LABEL_13:
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) |= 2u;
  v10 = *(unsigned __int8 **)(a1 + 32);
  if ((~v10[160] & 3) == 0)
    nw_socks5_connection_cancel_on_queue(v10, 0);
LABEL_15:

}

void sub_1834FF9D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke_162(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 56) == 255)
    goto LABEL_26;
  if (v3)
  {
    v5 = v3;
    v6 = v5[3];

    if (*(char *)(*(_QWORD *)(a1 + 32) + 160) < 0 && v6 == 55)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
        v40 = 2114;
        v41 = v8;
        v42 = 2112;
        v43[0] = v5;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ ignoring write in error %@", buf, 0x20u);
      }

      nw_socks5_connection_outer_connection_read_on_queue(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
      goto LABEL_26;
    }
    if ((v6 - 6) <= 0x3B && ((1 << (v6 - 6)) & 0x8C9B80004000001) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
        v40 = 2114;
        v41 = v20;
        v42 = 1024;
        LODWORD(v43[0]) = v6;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ write in error %{darwin.errno}d", buf, 0x1Cu);
      }

LABEL_22:
      nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
      goto LABEL_26;
    }
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    v40 = 2114;
    v41 = v22;
    v42 = 1024;
    LODWORD(v43[0]) = v6;
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v23, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          v26 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          v40 = 2114;
          v41 = v26;
          v42 = 1024;
          LODWORD(v43[0]) = v6;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s %{public}@ write in error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        v29 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v29)
          {
            v30 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446978;
            v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
            v40 = 2114;
            v41 = v30;
            v42 = 1024;
            LODWORD(v43[0]) = v6;
            WORD2(v43[0]) = 2082;
            *(_QWORD *)((char *)v43 + 6) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s %{public}@ write in error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_43;
        }
        if (v29)
        {
          v33 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          v40 = 2114;
          v41 = v33;
          v42 = 1024;
          LODWORD(v43[0]) = v6;
          _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s %{public}@ write in error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v24, type))
        {
          v32 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          v40 = 2114;
          v41 = v32;
          v42 = 1024;
          LODWORD(v43[0]) = v6;
          _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s %{public}@ write in error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
LABEL_43:
    if (v23)
      free(v23);
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    v40 = 2114;
    v41 = v10;
    v42 = 2048;
    v43[0] = v11;
    v12 = "%{public}s %{public}@ wrote %zu bytes is_complete into inner connection";
    v13 = v9;
    v14 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_11;
  }
  if (!gLogDatapath)
  {
    *(_QWORD *)(v4 + 208) += *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 32);
    goto LABEL_25;
  }
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(_QWORD *)(a1 + 32);
    v35 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    v40 = 2114;
    v41 = v34;
    v42 = 2048;
    v43[0] = v35;
    v12 = "%{public}s %{public}@ wrote %zu bytes not_complete into inner connection";
    v13 = v9;
    v14 = OS_LOG_TYPE_DEBUG;
LABEL_11:
    _os_log_impl(&dword_182FBE000, v13, v14, v12, buf, 0x20u);
  }
LABEL_12:

  v15 = *(unsigned __int8 *)(a1 + 56);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) += *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 32);
  if (!v15)
  {
LABEL_25:
    nw_socks5_connection_outer_connection_read_on_queue((NWConcrete_nw_socks5_connection *)v16);
    goto LABEL_26;
  }
  *(_BYTE *)(v16 + 160) |= 2u;
  v17 = *(unsigned __int8 **)(a1 + 32);
  if ((~v17[160] & 3) == 0)
    nw_socks5_connection_cancel_on_queue(v17, 0);
LABEL_26:

}

void sub_183500018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL59nw_socks5_connection_inner_connection_read_message_on_queueP31NWConcrete_nw_socks5_connection_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  v9 = a3;
  v10 = a5;
  v11 = v10;
  if (v10)
  {
    v12 = (unsigned int *)v10;
    v13 = v12[3];

  }
  else
  {
    v13 = 0;
  }
  nw_socks5_connection_inner_connection_read_handler_on_queue(*(_QWORD *)(a1 + 32), v14, a4, v13, 1);

}

void sub_1835000C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL36nw_socks5_connection_cancel_on_queueP31NWConcrete_nw_socks5_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke(uint64_t a1, char a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    nw_connection_cancel(v5);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 144);
    *(_QWORD *)(v6 + 144) = 0;

    v4 = *(_QWORD *)(a1 + 32);
  }
  if ((*(_BYTE *)(v4 + 160) & 0x90) != 0)
    a2 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZL36nw_socks5_connection_cancel_on_queueP31NWConcrete_nw_socks5_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke_2;
  v8[3] = &unk_1E14ACFD0;
  v9 = (id)v4;
  nw_socks5_connection_drain_and_cancel_in_on_queue(v9, a2, v8);

}

void sub_183500188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void ___ZL36nw_socks5_connection_cancel_on_queueP31NWConcrete_nw_socks5_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke_2(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (void *)v1[2];
  if (v2)
  {
    v1[2] = 0;

    v1 = *(_QWORD **)(a1 + 32);
  }
  v4 = v1;
  v5 = v4[6];
  if (v5)
  {
    v7 = v4;
    (*(void (**)(void))(v5 + 16))();
    v6 = (void *)v7[6];
    v7[6] = 0;

    v4 = v7;
  }

}

void sub_183500208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_socks5_connection_drain_and_cancel_in_on_queue(void *a1, char a2, void *a3)
{
  NWConcrete_nw_socks5_connection *v5;
  void (**v6)(_QWORD);
  NSObject *v7;
  NWConcrete_nw_connection *v8;
  NWConcrete_nw_connection *sc_in_connection;
  NWConcrete_nw_connection *sc_in_udp_associated_tcp_connection;
  NWConcrete_nw_connection *v11;
  NWConcrete_nw_connection *v12;
  _QWORD v13[4];
  NWConcrete_nw_socks5_connection *v14;
  void (**v15)(_QWORD);
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  NWConcrete_nw_socks5_connection *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (!v5->sc_in_connection)
  {
LABEL_8:
    v6[2](v6);
    goto LABEL_9;
  }
  if ((a2 & 1) == 0)
  {
    nw_socks5_connection_remove_prefer_wifi_request(v5);
    nw_connection_cancel(&v5->sc_in_connection->super);
    sc_in_connection = v5->sc_in_connection;
    v5->sc_in_connection = 0;

    sc_in_udp_associated_tcp_connection = v5->sc_in_udp_associated_tcp_connection;
    if (sc_in_udp_associated_tcp_connection)
    {
      v11 = sc_in_udp_associated_tcp_connection;
      nw_connection_cancel_inner(v11, 1);

      v12 = v5->sc_in_udp_associated_tcp_connection;
      v5->sc_in_udp_associated_tcp_connection = 0;

    }
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_socks5_connection_drain_and_cancel_in_on_queue";
    v18 = 2114;
    v19 = v5;
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}@ draining inner", buf, 0x16u);
  }

  v8 = v5->sc_in_connection;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZL49nw_socks5_connection_drain_and_cancel_in_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvvE_block_invoke;
  v13[3] = &unk_1E14A9C38;
  v14 = v5;
  v15 = v6;
  nw_connection_receive_internal(v8, 0, 1u, 0xFFFFFFFF, v13);

LABEL_9:
}

void sub_1835003D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void ___ZL49nw_socks5_connection_drain_and_cancel_in_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvvE_block_invoke(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  NSObject *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  size_t size;
  const char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  size_t v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a5;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v8)
      size = dispatch_data_get_size(v8);
    else
      size = 0;
    v13 = "not_";
    v15 = 136447234;
    v16 = "nw_socks5_connection_drain_and_cancel_in_on_queue_block_invoke";
    v18 = v11;
    v17 = 2114;
    if (a4)
      v13 = "is_";
    v19 = 2048;
    v20 = size;
    v21 = 2082;
    v22 = v13;
    v23 = 2114;
    v24 = v9;
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}@ drained inner %zu bytes %{public}s_complete error %{public}@", (uint8_t *)&v15, 0x34u);
  }

  if (v9)
    v14 = 0;
  else
    v14 = a4 ^ 1u;
  nw_socks5_connection_drain_and_cancel_in_on_queue(*(_QWORD *)(a1 + 32), v14, *(_QWORD *)(a1 + 40));

}

void sub_183500580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_socks5_connection_cancel_block_invoke(uint64_t a1)
{
  nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
}

uint64_t **nw::object::operator new()
{
  uint64_t v0;
  Class Class;
  objc_class *v2;
  const char *v3;
  void (*v4)(void);
  uint64_t v5;
  BOOL v6;
  _QWORD **v7;
  uint64_t **v8;
  uint64_t v9;
  objc_class *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *v15;
  _BOOL4 v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  NSObject *v25;
  char *v26;
  _BOOL4 v27;
  const char *v28;
  _BOOL4 v29;
  char *backtrace_string;
  _BOOL4 v31;
  objc_class *v32;
  uint64_t **Instance;
  _BOOL4 v35;
  _BOOL4 v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&dword_1ECD84F40);
  v0 = qword_1ECD84F20;
  if (!qword_1ECD84F20)
  {
    qword_1ECD84F20 = 72;
    Class = objc_getClass((const char *)nw_string::_class(void)::instance);
    if (Class)
    {
      v2 = Class;
      v3 = sel_registerName("dealloc");
      v4 = imp_implementationWithBlock(&__block_literal_global_16289);
      class_replaceMethod(v2, v3, v4, "");
LABEL_4:
      v0 = qword_1ECD84F20;
      goto LABEL_5;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "init";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v21, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_105;
        *(_DWORD *)buf = 136446210;
        v40 = "init";
        v24 = "%{public}s called with null objc_cls";
        goto LABEL_104;
      }
      if (!v37)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_105;
        *(_DWORD *)buf = 136446210;
        v40 = "init";
        v24 = "%{public}s called with null objc_cls, backtrace limit exceeded";
        goto LABEL_104;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v31 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "init";
          v41 = 2082;
          v42 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null objc_cls, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_105;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "init";
        v24 = "%{public}s called with null objc_cls, no backtrace";
LABEL_104:
        _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
      }
    }
LABEL_105:
    if (v21)
      free(v21);
    goto LABEL_4;
  }
LABEL_5:
  if (v0 != 72)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "get_object_from_pool";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v11, &type, &v37))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v40 = "get_object_from_pool";
      v14 = "%{public}s called with null (m_obj_size == size)";
    }
    else if (v37)
    {
      v15 = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = type;
      v16 = os_log_type_enabled(v12, type);
      if (v15)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "get_object_from_pool";
          v41 = 2082;
          v42 = v15;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null (m_obj_size == size), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v15);
        goto LABEL_55;
      }
      if (!v16)
      {
LABEL_55:
        if (v11)
          free(v11);
        goto LABEL_57;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "get_object_from_pool";
      v14 = "%{public}s called with null (m_obj_size == size), no backtrace";
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v40 = "get_object_from_pool";
      v14 = "%{public}s called with null (m_obj_size == size), backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
    goto LABEL_55;
  }
  v5 = qword_1ECD84F38;
  if (!qword_1ECD84F38)
  {
LABEL_57:
    os_unfair_lock_unlock((os_unfair_lock_t)&dword_1ECD84F40);
    goto LABEL_58;
  }
  v6 = (unint64_t)qword_1ECD84F18 >= 0x48;
  qword_1ECD84F18 -= 72;
  if (!v6)
  {
    if (gLogDatapath)
    {
      v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v40 = "get_object_from_pool";
        v41 = 2082;
        v42 = "m_pool_size";
        v43 = 2048;
        v44 = qword_1ECD84F20;
        v45 = 2048;
        v46 = qword_1ECD84F18;
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }
    }
    qword_1ECD84F18 = 0;
    v5 = qword_1ECD84F38;
  }
  v7 = (_QWORD **)qword_1ECD84F30;
  v8 = *(uint64_t ***)(qword_1ECD84F30 + 16);
  v9 = *(_QWORD *)qword_1ECD84F30;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(qword_1ECD84F30 + 8);
  *v7[1] = v9;
  qword_1ECD84F38 = v5 - 1;
  free(v7);
  os_unfair_lock_unlock((os_unfair_lock_t)&dword_1ECD84F40);
  if (!v8)
  {
LABEL_58:
    v32 = objc_getClass((const char *)nw_string::_class(void)::instance);
    if (v32)
    {
      Instance = (uint64_t **)class_createInstance(v32, 0x48uLL);
      if (Instance)
      {
        v8 = Instance;
        Instance[2] = &nw_string::_class(void)::instance;
        return v8;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v40 = "operator new";
      v17 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (!__nwlog_fault(v17, &type, &v37))
        goto LABEL_99;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "operator new";
          v20 = "%{public}s called with null obj";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v37)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "operator new";
          v20 = "%{public}s called with null obj, backtrace limit exceeded";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      v26 = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v36 = os_log_type_enabled(v18, type);
      if (!v26)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "operator new";
          v20 = "%{public}s called with null obj, no backtrace";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "operator new";
        v41 = 2082;
        v42 = v26;
        v28 = "%{public}s called with null obj, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v40 = "operator new";
      v17 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (!__nwlog_fault(v17, &type, &v37))
        goto LABEL_99;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "operator new";
          v20 = "%{public}s called with null objc_cls";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v37)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "operator new";
          v20 = "%{public}s called with null objc_cls, backtrace limit exceeded";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      v26 = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v35 = os_log_type_enabled(v18, type);
      if (!v26)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "operator new";
          v20 = "%{public}s called with null objc_cls, no backtrace";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (v35)
      {
LABEL_44:
        *(_DWORD *)buf = 136446466;
        v40 = "operator new";
        v41 = 2082;
        v42 = v26;
        v28 = "%{public}s called with null objc_cls, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
    }
LABEL_79:
    free(v26);
    goto LABEL_99;
  }
  if (v8[2] == &nw_string::_class(void)::instance)
  {
    v10 = objc_getClass((const char *)nw_string::_class(void)::instance);
    if (v10)
    {
      objc_constructInstance(v10, v8);
      return v8;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "operator new";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v17, &type, &v37))
      goto LABEL_99;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "operator new";
        v20 = "%{public}s called with null objc_cls";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    if (!v37)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "operator new";
        v20 = "%{public}s called with null objc_cls, backtrace limit exceeded";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v29 = os_log_type_enabled(v18, type);
    if (!v26)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "operator new";
        v20 = "%{public}s called with null objc_cls, no backtrace";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    if (v29)
      goto LABEL_44;
    goto LABEL_79;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "operator new";
  v17 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v17, &type, &v37))
    goto LABEL_99;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v37)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "operator new";
        v20 = "%{public}s called with null (obj->m_cls == cls), backtrace limit exceeded";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v27 = os_log_type_enabled(v18, type);
    if (!v26)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "operator new";
        v20 = "%{public}s called with null (obj->m_cls == cls), no backtrace";
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "operator new";
      v41 = 2082;
      v42 = v26;
      v28 = "%{public}s called with null (obj->m_cls == cls), dumping backtrace:%{public}s";
LABEL_78:
      _os_log_impl(&dword_182FBE000, v18, v19, v28, buf, 0x16u);
      goto LABEL_79;
    }
    goto LABEL_79;
  }
  v18 = __nwlog_obj();
  v19 = type;
  if (os_log_type_enabled(v18, type))
  {
    *(_DWORD *)buf = 136446210;
    v40 = "operator new";
    v20 = "%{public}s called with null (obj->m_cls == cls)";
LABEL_98:
    _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
  }
LABEL_99:
  if (v17)
    free(v17);
  return 0;
}

void ___ZN2nw6object9class_def4initEm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  BOOL v8;
  void (*v9)(_QWORD *);
  _QWORD *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = nw::object::cls(*(uint64_t **)(a2 + 16));
  v4 = nw::object::class_def::lookup_method(v3, nw::object::__destroy_def_instance, qword_1ECD85030);
  if (v5)
    v6 = (v5 & 1 | v4) == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (v4)
    v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
  {
    v9 = (void (*)(_QWORD *))v4;
    v10 = (_QWORD *)(a2 + (v5 >> 1));
    if ((v5 & 1) != 0)
      v9 = *(void (**)(_QWORD *))(*v10 + v9);
    v9(v10);
    return;
  }
  nw::object::cls(*(uint64_t **)(a2 + 16));
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v20 = "bad_method_lookup";
  v21 = 2080;
  v22 = "object::destroy";
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v20 = "bad_method_lookup";
      v21 = 2080;
      v22 = "object::destroy";
      v14 = "%{public}s unable to lookup %s";
      goto LABEL_27;
    }
    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v20 = "bad_method_lookup";
      v21 = 2080;
      v22 = "object::destroy";
      v14 = "%{public}s unable to lookup %s, backtrace limit exceeded";
      goto LABEL_27;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    v13 = type;
    v16 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446722;
        v20 = "bad_method_lookup";
        v21 = 2080;
        v22 = "object::destroy";
        v23 = 2082;
        v24 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s unable to lookup %s, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_28;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v20 = "bad_method_lookup";
      v21 = 2080;
      v22 = "object::destroy";
      v14 = "%{public}s unable to lookup %s, no backtrace";
LABEL_27:
      _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0x16u);
    }
  }
LABEL_28:
  if (v11)
    free(v11);
}

uint64_t NWPBBrowseDescriptorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t result;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  BOOL v52;
  NWPBServiceBrowse *v53;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v12 = (_BYTE *)(a2 + *v8);
      if (*v12)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v14 = v13 & 0x7F;
      if ((v13 & 0x80) == 0)
        goto LABEL_39;
      v15 = *v3;
      v16 = *(_QWORD *)(a2 + v15);
      if (v16 == -1 || v16 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v17 = v16 + 1;
      v18 = *(char *)(*(_QWORD *)(a2 + *v10) + v16);
      *(_QWORD *)(a2 + v15) = v17;
      v14 |= (unint64_t)(v18 & 0x7F) << 7;
      if ((v18 & 0x80000000) == 0)
        goto LABEL_39;
      v19 = *v3;
      v20 = *(_QWORD *)(a2 + v19);
      if (v20 == -1 || v20 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v21 = v20 + 1;
      v22 = *(char *)(*(_QWORD *)(a2 + *v10) + v20);
      *(_QWORD *)(a2 + v19) = v21;
      v14 |= (unint64_t)(v22 & 0x7F) << 14;
      if ((v22 & 0x80000000) == 0)
        goto LABEL_39;
      v23 = *v3;
      v24 = *(_QWORD *)(a2 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v25 = v24 + 1;
      v26 = *(char *)(*(_QWORD *)(a2 + *v10) + v24);
      *(_QWORD *)(a2 + v23) = v25;
      v14 |= (unint64_t)(v26 & 0x7F) << 21;
      if ((v26 & 0x80000000) == 0)
        goto LABEL_39;
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v29 = v28 + 1;
      v30 = *(char *)(*(_QWORD *)(a2 + *v10) + v28);
      *(_QWORD *)(a2 + v27) = v29;
      v14 |= (unint64_t)(v30 & 0x7F) << 28;
      if ((v30 & 0x80000000) == 0)
        goto LABEL_39;
      v31 = *v3;
      v32 = *(_QWORD *)(a2 + v31);
      if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v33 = v32 + 1;
      v34 = *(char *)(*(_QWORD *)(a2 + *v10) + v32);
      *(_QWORD *)(a2 + v31) = v33;
      if ((v34 & 0x80000000) == 0)
        goto LABEL_39;
      v35 = *v3;
      v36 = *(_QWORD *)(a2 + v35);
      if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v37 = v36 + 1;
      v38 = *(char *)(*(_QWORD *)(a2 + *v10) + v36);
      *(_QWORD *)(a2 + v35) = v37;
      if ((v38 & 0x80000000) == 0)
        goto LABEL_39;
      v39 = *v3;
      v40 = *(_QWORD *)(a2 + v39);
      if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v41 = v40 + 1;
      v42 = *(char *)(*(_QWORD *)(a2 + *v10) + v40);
      *(_QWORD *)(a2 + v39) = v41;
      if ((v42 & 0x80000000) == 0)
        goto LABEL_39;
      v43 = *v3;
      v44 = *(_QWORD *)(a2 + v43);
      if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v45 = v44 + 1;
      v46 = *(char *)(*(_QWORD *)(a2 + *v10) + v44);
      *(_QWORD *)(a2 + v43) = v45;
      if ((v46 & 0x80000000) == 0)
        goto LABEL_39;
      v47 = *v3;
      v48 = *(_QWORD *)(a2 + v47);
      if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_37:
        v12 = (_BYTE *)(a2 + *v8);
        goto LABEL_38;
      }
      v49 = v48 + 1;
      v50 = *(char *)(*(_QWORD *)(a2 + *v10) + v48);
      *(_QWORD *)(a2 + v47) = v49;
      if (v50 < 0)
      {
        v14 = 0;
        v51 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_41;
      }
LABEL_39:
      v51 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v14 = 0;
LABEL_41:
      if (v51)
        v52 = 1;
      else
        v52 = (v14 & 7) == 4;
      if (v52)
        return *(_BYTE *)(a2 + *v8) == 0;
      if ((v14 >> 3) == 1)
      {
        v53 = objc_alloc_init(NWPBServiceBrowse);
        objc_storeStrong((id *)(a1 + 8), v53);
        if (!PBReaderPlaceMark() || !NWPBServiceBrowseReadFrom((uint64_t)v53, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v14 = 0;
LABEL_38:
    *v12 = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t __Block_byref_object_copy__16456(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16457(uint64_t a1)
{

}

BOOL ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  id v6;
  _BYTE *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  _BOOL8 result;
  NSObject *v45;
  void *v46;
  NSObject *v47;
  void *v48;

  v6 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
  v7 = *(_BYTE **)(a1 + 40);
  if (v7)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    __nwlog_obj();
    v45 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    v46 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v46);
    if (result)
    {
LABEL_45:
      __break(1u);
      return result;
    }
    free(v46);
    if (a2)
      goto LABEL_3;
  }
  __nwlog_obj();
  v47 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  v48 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v48);
  if (result)
    goto LABEL_45;
  free(v48);
LABEL_3:
  v8 = *a2;
  *v7 = v8;
  if (v8)
  {
    v9 = a2[1];
    v7[1] = v9;
    if (v9)
    {
      v10 = a2[2];
      v7[2] = v10;
      if (v10)
      {
        v11 = a2[3];
        v7[3] = v11;
        if (v11)
        {
          v12 = a2[4];
          v7[4] = v12;
          if (v12)
          {
            v13 = a2[5];
            v7[5] = v13;
            if (v13)
            {
              v14 = a2[6];
              v7[6] = v14;
              if (v14)
              {
                v15 = a2[7];
                v7[7] = v15;
                if (v15)
                {
                  v16 = a2[8];
                  v7[8] = v16;
                  if (v16)
                  {
                    v17 = a2[9];
                    v7[9] = v17;
                    if (v17)
                    {
                      v18 = a2[10];
                      v7[10] = v18;
                      if (v18)
                      {
                        v19 = a2[11];
                        v7[11] = v19;
                        if (v19)
                        {
                          v20 = a2[12];
                          v7[12] = v20;
                          if (v20)
                          {
                            v21 = a2[13];
                            v7[13] = v21;
                            if (v21)
                            {
                              v22 = a2[14];
                              v7[14] = v22;
                              if (v22)
                              {
                                v23 = a2[15];
                                v7[15] = v23;
                                if (v23)
                                {
                                  v24 = a2[16];
                                  v7[16] = v24;
                                  if (v24)
                                  {
                                    v25 = a2[17];
                                    v7[17] = v25;
                                    if (v25)
                                    {
                                      v26 = a2[18];
                                      v7[18] = v26;
                                      if (v26)
                                      {
                                        v27 = a2[19];
                                        v7[19] = v27;
                                        if (v27)
                                        {
                                          v28 = a2[20];
                                          v7[20] = v28;
                                          if (v28)
                                          {
                                            v29 = a2[21];
                                            v7[21] = v29;
                                            if (v29)
                                            {
                                              v30 = a2[22];
                                              v7[22] = v30;
                                              if (v30)
                                              {
                                                v31 = a2[23];
                                                v7[23] = v31;
                                                if (v31)
                                                {
                                                  v32 = a2[24];
                                                  v7[24] = v32;
                                                  if (v32)
                                                  {
                                                    v33 = a2[25];
                                                    v7[25] = v33;
                                                    if (v33)
                                                    {
                                                      v34 = a2[26];
                                                      v7[26] = v34;
                                                      if (v34)
                                                      {
                                                        v35 = a2[27];
                                                        v7[27] = v35;
                                                        if (v35)
                                                        {
                                                          v36 = a2[28];
                                                          v7[28] = v36;
                                                          if (v36)
                                                          {
                                                            v37 = a2[29];
                                                            v7[29] = v37;
                                                            if (v37)
                                                            {
                                                              v38 = a2[30];
                                                              v7[30] = v38;
                                                              if (v38)
                                                              {
                                                                v39 = a2[31];
                                                                v7[31] = v39;
                                                                if (v39)
                                                                {
                                                                  v40 = a2[32];
                                                                  v7[32] = v40;
                                                                  if (v40)
                                                                  {
                                                                    v41 = a2[33];
                                                                    v7[33] = v41;
                                                                    if (v41)
                                                                    {
                                                                      v42 = a2[34];
                                                                      v7[34] = v42;
                                                                      if (v42)
                                                                      {
                                                                        v43 = a2[35];
                                                                        v7[35] = v43;
                                                                        if (v43)
                                                                          v7[36] = 0;
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 0;
}

uint64_t ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_79(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  nw_protocol_definition_t v5;
  _BOOL4 is_equal_unsafe;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 232))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 768))
    {
      v5 = nw_protocol_metadata_copy_definition(v3);
      is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 768));

      if (is_equal_unsafe)
        nw_protocol_metadata_set_original(v4, *(void **)(*(_QWORD *)(a1 + 48) + 232));
    }
  }
  nw_content_context_set_metadata_for_protocol(*(nw_content_context_t *)(a1 + 40), v4);

  return 1;
}

void sub_183501F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_81(uint64_t a1)
{
  nw_mem_buffer_free(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_2_82(uint64_t a1)
{
  nw_mem_buffer_free(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke_85(uint64_t a1, int a2, NSObject *object)
{
  nw_frame_set_metadata(*(_QWORD *)(a1 + 32), object, 0, *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke_87(uint64_t a1, uint64_t a2)
{
  nw_frame_finalize(a2);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return 1;
}

uint64_t nw_flow_replay_add_candidate_output_handler(void *a1, uint64_t a2, uint64_t a3)
{
  NWConcrete_nw_endpoint_handler *v5;
  NWConcrete_nw_endpoint_handler *v6;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v8;
  NWConcrete_nw_endpoint_mode_handler *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t internal;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  NWConcrete_nw_endpoint_handler *v25;
  _BOOL4 v26;
  NSObject *v27;
  const char *id_string;
  const char *v29;
  nw_endpoint_t v30;
  const char *v31;
  const char *v32;
  const char *v33;
  id v34;
  os_log_type_t v35;
  NWConcrete_nw_endpoint_handler *v36;
  _BOOL4 v37;
  NSObject *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  id v42;
  NWConcrete_nw_endpoint_handler *v43;
  _BOOL4 v44;
  NSObject *v45;
  NWConcrete_nw_endpoint_handler *v46;
  NWConcrete_nw_endpoint_handler *v47;
  _BOOL4 v48;
  const char *v49;
  nw_endpoint_t v50;
  const char *logging_description;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  const char *v55;
  void **v56;
  void **v57;
  const char *v58;
  void **v59;
  id v60;
  char *id_str;
  id v62;
  void *v63;
  uint64_t v64;
  const char *v65;
  const char *v66;
  void *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  void *v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  char *backtrace_string;
  os_log_type_t v76;
  _BOOL4 v77;
  void *v78;
  os_log_type_t v79;
  void *v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  void *v84;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  char *v88;
  os_log_type_t v89;
  _BOOL4 v90;
  char *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  char *v94;
  os_log_type_t v95;
  _BOOL4 v96;
  char *v97;
  os_log_type_t v98;
  _BOOL4 v99;
  os_log_type_t v100;
  id v101;
  const char *v102;
  os_log_type_t v103;
  const char *v104;
  char *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  const char *v108;
  os_log_type_t v109;
  const char *v110;
  const char *v111;
  os_log_type_t v113;
  os_log_type_t v114;
  os_log_type_t v115;
  os_log_type_t v116;
  const char *v117;
  NWConcrete_nw_endpoint_mode_handler *v118;
  NWConcrete_nw_endpoint_mode_handler *v119;
  const char *v120;
  NSObject *v121;
  nw_endpoint_t v122;
  const char *v123;
  char v124;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v127;
  __int16 v128;
  void *v129;
  __int16 v130;
  const char *v131;
  __int16 v132;
  void *v133;
  __int16 v134;
  const char *v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  id v139;
  __int16 v140;
  _BYTE v141[18];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v127 = "nw_endpoint_handler_get_mode";
    v68 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (__nwlog_fault(v68, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        v70 = type;
        if (os_log_type_enabled(v69, type))
        {
          *(_DWORD *)buf = 136446210;
          v127 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v124)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        v76 = type;
        v77 = os_log_type_enabled(v69, type);
        if (backtrace_string)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            v127 = "nw_endpoint_handler_get_mode";
            v128 = 2082;
            v129 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v69, v76, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_134;
        }
        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          v127 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v69, v76, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        v100 = type;
        if (os_log_type_enabled(v69, type))
        {
          *(_DWORD *)buf = 136446210;
          v127 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v69, v100, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_134:
    if (v68)
      free(v68);
    mode = 0;
LABEL_137:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v101 = (id)gLogObj;
    if (mode > 5)
      v102 = "unknown-mode";
    else
      v102 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    v128 = 2082;
    v129 = (void *)v102;
    v130 = 2082;
    v131 = "flow";
    v72 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (__nwlog_fault(v72, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v73 = (id)gLogObj;
        v103 = type;
        if (os_log_type_enabled(v73, type))
        {
          if (mode > 5)
            v104 = "unknown-mode";
          else
            v104 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          v128 = 2082;
          v129 = (void *)v104;
          v130 = 2082;
          v131 = "flow";
          _os_log_impl(&dword_182FBE000, v73, v103, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v124)
      {
        v105 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v73 = (id)gLogObj;
        v106 = type;
        v107 = os_log_type_enabled(v73, type);
        if (v105)
        {
          if (v107)
          {
            if (mode > 5)
              v108 = "unknown-mode";
            else
              v108 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            v127 = "nw_flow_replay_add_candidate_output_handler";
            v128 = 2082;
            v129 = (void *)v108;
            v130 = 2082;
            v131 = "flow";
            v132 = 2082;
            v133 = v105;
            _os_log_impl(&dword_182FBE000, v73, v106, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v105);
          if (!v72)
            goto LABEL_171;
          goto LABEL_170;
        }
        if (v107)
        {
          if (mode > 5)
            v111 = "unknown-mode";
          else
            v111 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          v128 = 2082;
          v129 = (void *)v111;
          v130 = 2082;
          v131 = "flow";
          _os_log_impl(&dword_182FBE000, v73, v106, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v73 = (id)gLogObj;
        v109 = type;
        if (os_log_type_enabled(v73, type))
        {
          if (mode > 5)
            v110 = "unknown-mode";
          else
            v110 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          v128 = 2082;
          v129 = (void *)v110;
          v130 = 2082;
          v131 = "flow";
          _os_log_impl(&dword_182FBE000, v73, v109, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
      goto LABEL_168;
    }
    goto LABEL_169;
  }
  mode = v5->mode;

  if (mode != 2)
    goto LABEL_137;
  if (!a2)
  {
    __nwlog_obj();
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    v72 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (!__nwlog_fault(v72, &type, &v124))
      goto LABEL_169;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v74 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s called with null flow_protocol", buf, 0xCu);
      }
    }
    else if (v124)
    {
      v88 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v89 = type;
      v90 = os_log_type_enabled(v73, type);
      if (v88)
      {
        if (v90)
        {
          *(_DWORD *)buf = 136446466;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          v128 = 2082;
          v129 = v88;
          _os_log_impl(&dword_182FBE000, v73, v89, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v88);
        if (!v72)
          goto LABEL_171;
        goto LABEL_170;
      }
      if (v90)
      {
        *(_DWORD *)buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_182FBE000, v73, v89, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v113 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_182FBE000, v73, v113, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_168;
  }
  if (!a3)
  {
    __nwlog_obj();
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    v72 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (!__nwlog_fault(v72, &type, &v124))
      goto LABEL_169;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v79 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_182FBE000, v73, v79, "%{public}s called with null candidate_output_handler", buf, 0xCu);
      }
LABEL_168:

      goto LABEL_169;
    }
    if (!v124)
    {
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v114 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_182FBE000, v73, v114, "%{public}s called with null candidate_output_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_168;
    }
    v91 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v73 = objc_claimAutoreleasedReturnValue();
    v92 = type;
    v93 = os_log_type_enabled(v73, type);
    if (!v91)
    {
      if (v93)
      {
        *(_DWORD *)buf = 136446210;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl(&dword_182FBE000, v73, v92, "%{public}s called with null candidate_output_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_168;
    }
    if (v93)
    {
      *(_DWORD *)buf = 136446466;
      v127 = "nw_flow_replay_add_candidate_output_handler";
      v128 = 2082;
      v129 = v91;
      _os_log_impl(&dword_182FBE000, v73, v92, "%{public}s called with null candidate_output_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v91);
LABEL_169:
    if (!v72)
    {
LABEL_171:
      v16 = 0;
      goto LABEL_172;
    }
LABEL_170:
    free(v72);
    goto LABEL_171;
  }
  v8 = nw_endpoint_handler_copy_flow(v6);
  v9 = v8;
  if (!v8)
  {
    __nwlog_obj();
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v127 = "nw_flow_replay_add_candidate_output_handler";
    v81 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (__nwlog_fault(v81, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v82 = objc_claimAutoreleasedReturnValue();
        v83 = type;
        if (os_log_type_enabled(v82, type))
        {
          *(_DWORD *)buf = 136446210;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v124)
      {
        v94 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v82 = objc_claimAutoreleasedReturnValue();
        v95 = type;
        v96 = os_log_type_enabled(v82, type);
        if (v94)
        {
          if (v96)
          {
            *(_DWORD *)buf = 136446466;
            v127 = "nw_flow_replay_add_candidate_output_handler";
            v128 = 2082;
            v129 = v94;
            _os_log_impl(&dword_182FBE000, v82, v95, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v94);
          goto LABEL_194;
        }
        if (v96)
        {
          *(_DWORD *)buf = 136446210;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          _os_log_impl(&dword_182FBE000, v82, v95, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v82 = objc_claimAutoreleasedReturnValue();
        v115 = type;
        if (os_log_type_enabled(v82, type))
        {
          *(_DWORD *)buf = 136446210;
          v127 = "nw_flow_replay_add_candidate_output_handler";
          _os_log_impl(&dword_182FBE000, v82, v115, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_194:
    if (v81)
      free(v81);
    goto LABEL_75;
  }
  v10 = *((_QWORD *)v8 + 94);
  if (!v10)
  {
    __nwlog_obj();
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v127 = "nw_protocol_utilities_add_input_handler";
    v85 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (__nwlog_fault(v85, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v86 = objc_claimAutoreleasedReturnValue();
        v87 = type;
        if (os_log_type_enabled(v86, type))
        {
          *(_DWORD *)buf = 136446210;
          v127 = "nw_protocol_utilities_add_input_handler";
          _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s called with null input_protocol", buf, 0xCu);
        }
      }
      else if (v124)
      {
        v97 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v86 = objc_claimAutoreleasedReturnValue();
        v98 = type;
        v99 = os_log_type_enabled(v86, type);
        if (v97)
        {
          if (v99)
          {
            *(_DWORD *)buf = 136446466;
            v127 = "nw_protocol_utilities_add_input_handler";
            v128 = 2082;
            v129 = v97;
            _os_log_impl(&dword_182FBE000, v86, v98, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v97);
          goto LABEL_199;
        }
        if (v99)
        {
          *(_DWORD *)buf = 136446210;
          v127 = "nw_protocol_utilities_add_input_handler";
          _os_log_impl(&dword_182FBE000, v86, v98, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v86 = objc_claimAutoreleasedReturnValue();
        v116 = type;
        if (os_log_type_enabled(v86, type))
        {
          *(_DWORD *)buf = 136446210;
          v127 = "nw_protocol_utilities_add_input_handler";
          _os_log_impl(&dword_182FBE000, v86, v116, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_199:
    if (v85)
      free(v85);
    goto LABEL_53;
  }
  v11 = (void *)(a2 + 96);
  if (a2 + 96 == v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v127 = "nw_protocol_utilities_add_input_handler";
    v128 = 2048;
    v129 = v11;
    v18 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v124 = 0;
    if (__nwlog_fault((const char *)v18, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446466;
          v127 = "nw_protocol_utilities_add_input_handler";
          v128 = 2048;
          v129 = v11;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
        }
      }
      else if (v124)
      {
        v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v23 = type;
        v24 = os_log_type_enabled(v19, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446722;
            v127 = "nw_protocol_utilities_add_input_handler";
            v128 = 2048;
            v129 = v11;
            v130 = 2082;
            v131 = v22;
            _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v22);
          if (!v18)
            goto LABEL_53;
LABEL_52:
          free(v18);
          goto LABEL_53;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v127 = "nw_protocol_utilities_add_input_handler";
          v128 = 2048;
          v129 = v11;
          _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v35 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446466;
          v127 = "nw_protocol_utilities_add_input_handler";
          v128 = 2048;
          v129 = v11;
          _os_log_impl(&dword_182FBE000, v19, v35, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
    if (!v18)
      goto LABEL_53;
    goto LABEL_52;
  }
  v12 = *(_QWORD **)(a2 + 120);
  if (!v12 || !*v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v127 = "nw_protocol_utilities_add_input_handler";
      v128 = 2048;
      v129 = (void *)(a2 + 96);
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
    }

    goto LABEL_53;
  }
  if ((nw_protocol_add_input_handler(a2 + 96, v10) & 1) == 0)
  {
LABEL_53:
    v43 = v6;
    v44 = (*((_BYTE *)v43 + 268) & 0x20) == 0;

    if (v44)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v45 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        v46 = v43;

        v47 = v46;
        v48 = (*((_BYTE *)v43 + 268) & 1) == 0;

        if (v48)
          v49 = "";
        else
          v49 = "dry-run ";
        v50 = nw_endpoint_handler_copy_endpoint(v47);
        logging_description = nw_endpoint_get_logging_description(v50);
        v52 = v47;
        v53 = v52;
        v54 = v52[30];
        if (v54 > 5)
          v55 = "unknown-state";
        else
          v55 = off_1E149FC48[v54];
        v123 = v55;

        v56 = v53;
        v57 = v56;
        v58 = "path";
        switch(v6->mode)
        {
          case 0:
            break;
          case 1:
            v58 = "resolver";
            break;
          case 2:
            v58 = nw_endpoint_flow_mode_string(v56[31]);
            break;
          case 3:
            v58 = "proxy";
            break;
          case 4:
            v58 = "fallback";
            break;
          case 5:
            v58 = "transform";
            break;
          default:
            v58 = "unknown-mode";
            break;
        }

        v121 = v45;
        v59 = v57;
        os_unfair_lock_lock((os_unfair_lock_t)v59 + 28);
        v60 = v59[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v59 + 28);

        id_str = v46->id_str;
        v62 = v60;
        v63 = v62;
        v64 = *((_QWORD *)v9 + 94);
        v65 = "invalid";
        if (v64)
        {
          v66 = *(const char **)(v64 + 16);
          if (v66)
            v65 = v66;
        }
        *(_DWORD *)buf = 136448002;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        v128 = 2082;
        v129 = id_str;
        v130 = 2082;
        v131 = v49;
        v132 = 2082;
        v133 = (void *)logging_description;
        v134 = 2082;
        v45 = v121;
        v135 = v123;
        v136 = 2082;
        v137 = v58;
        v138 = 2114;
        v139 = v62;
        v140 = 2082;
        *(_QWORD *)v141 = v65;
        _os_log_impl(&dword_182FBE000, v121, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach protocol %{public}s to replay protocol", buf, 0x52u);

      }
    }
    goto LABEL_75;
  }
  internal = *(_QWORD *)(a2 + 288);
  if (!internal)
  {
    internal = nw_hash_table_create_internal(5u, 8, (const void *(*)(const void *, unsigned int *))nw_replay_hash_get_key, (unsigned int (*)(const void *, unsigned int))nw_replay_hash_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_replay_hash_matches_key, (void (*)(void *))nw_replay_hash_release);
    if (internal)
      *(_DWORD *)(internal + 48) &= ~2u;
    *(_QWORD *)(a2 + 288) = internal;
  }
  type = OS_LOG_TYPE_DEFAULT;
  v14 = nw_hash_table_add_object(internal, a3, (char *)&type);
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    v25 = v6;
    v26 = (*((_BYTE *)v25 + 268) & 0x20) == 0;

    if (v26)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v27 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_endpoint_handler_get_id_string(v25);
        v29 = nw_endpoint_handler_dry_run_string(v25);
        v118 = v9;
        v30 = nw_endpoint_handler_copy_endpoint(v25);
        v31 = nw_endpoint_get_logging_description(v30);
        v32 = nw_endpoint_handler_state_string(v25);
        v33 = nw_endpoint_handler_mode_string(v25);
        v34 = nw_endpoint_handler_copy_current_path(v25);
        *(_DWORD *)buf = 136448258;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        v128 = 2082;
        v129 = (void *)id_string;
        v130 = 2082;
        v131 = v29;
        v132 = 2082;
        v133 = (void *)v31;
        v134 = 2082;
        v135 = v32;
        v136 = 2082;
        v137 = v33;
        v138 = 2114;
        v139 = v34;
        v140 = 1042;
        *(_DWORD *)v141 = 16;
        *(_WORD *)&v141[4] = 2098;
        *(_QWORD *)&v141[6] = a3;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay already has output handler registered for %{public,uuid_t}.16P", buf, 0x58u);

        v9 = v118;
      }

    }
    goto LABEL_75;
  }
  v15 = v14;
  *(_QWORD *)nw_hash_node_get_extra(v14) = 0;
  if ((nw_protocol_add_input_handler(a3, a2 + 96) & 1) == 0)
  {
    v36 = v6;
    v37 = (*((_BYTE *)v36 + 268) & 0x20) == 0;

    if (v37)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v38 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        v39 = nw_endpoint_handler_get_id_string(v36);
        v119 = v9;
        v120 = nw_endpoint_handler_dry_run_string(v36);
        v122 = nw_endpoint_handler_copy_endpoint(v36);
        v117 = nw_endpoint_get_logging_description(v122);
        v40 = nw_endpoint_handler_state_string(v36);
        v41 = nw_endpoint_handler_mode_string(v36);
        v42 = nw_endpoint_handler_copy_current_path(v36);
        *(_DWORD *)buf = 136448258;
        v127 = "nw_flow_replay_add_candidate_output_handler";
        v128 = 2082;
        v129 = (void *)v39;
        v130 = 2082;
        v131 = v120;
        v132 = 2082;
        v133 = (void *)v117;
        v134 = 2082;
        v135 = v40;
        v136 = 2082;
        v137 = v41;
        v138 = 2114;
        v139 = v42;
        v140 = 2048;
        *(_QWORD *)v141 = a2 + 96;
        *(_WORD *)&v141[8] = 2048;
        *(_QWORD *)&v141[10] = a3;
        _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Unable to add input handler using replay protocol %p and protocol %p", buf, 0x5Cu);

        v9 = v119;
      }

    }
    nw_hash_table_remove_node(*(_QWORD *)(a2 + 288), v15);
LABEL_75:
    v16 = 0;
    goto LABEL_76;
  }
  nw_flow_replay_send_initial_data_to_candidates(v6, (nw_flow_protocol *)a2);
  v16 = 1;
LABEL_76:

LABEL_172:
  return v16;
}

void sub_183503708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

BOOL nw_replay_hash_matches_key(const void *a1, const void *a2)
{
  return a1 == a2;
}

void nw_flow_replay_send_initial_data_to_candidates(NWConcrete_nw_endpoint_handler *a1, nw_flow_protocol *a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_handler *v4;
  unsigned int mode;
  char *candidate_output_handlers;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  id v22;
  const char *v23;
  os_log_type_t v24;
  const char *v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  const char *v29;
  os_log_type_t v30;
  const char *v31;
  const char *v32;
  os_log_type_t v33;
  _QWORD v34[4];
  NWConcrete_nw_endpoint_handler *v35;
  nw_flow_protocol *v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_endpoint_handler_get_mode";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v8, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v37)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v40 = "nw_endpoint_handler_get_mode";
            v41 = 2082;
            v42 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_35:
    if (v8)
      free(v8);
    mode = 0;
    goto LABEL_38;
  }
  mode = v3->mode;

  if (mode != 2)
  {
LABEL_38:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (mode > 5)
      v23 = "unknown-mode";
    else
      v23 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v40 = "nw_flow_replay_send_initial_data_to_candidates";
    v41 = 2082;
    v42 = (void *)v23;
    v43 = 2082;
    v44 = "flow";
    v12 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v37))
    {
LABEL_70:
      if (!v12)
        goto LABEL_72;
LABEL_71:
      free(v12);
      goto LABEL_72;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v24 = type;
      if (os_log_type_enabled(v13, type))
      {
        if (mode > 5)
          v25 = "unknown-mode";
        else
          v25 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v40 = "nw_flow_replay_send_initial_data_to_candidates";
        v41 = 2082;
        v42 = (void *)v25;
        v43 = 2082;
        v44 = "flow";
        _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
      goto LABEL_69;
    }
    if (!v37)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v30 = type;
      if (os_log_type_enabled(v13, type))
      {
        if (mode > 5)
          v31 = "unknown-mode";
        else
          v31 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v40 = "nw_flow_replay_send_initial_data_to_candidates";
        v41 = 2082;
        v42 = (void *)v31;
        v43 = 2082;
        v44 = "flow";
        _os_log_impl(&dword_182FBE000, v13, v30, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
      goto LABEL_69;
    }
    v26 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v27 = type;
    v28 = os_log_type_enabled(v13, type);
    if (!v26)
    {
      if (v28)
      {
        if (mode > 5)
          v32 = "unknown-mode";
        else
          v32 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v40 = "nw_flow_replay_send_initial_data_to_candidates";
        v41 = 2082;
        v42 = (void *)v32;
        v43 = 2082;
        v44 = "flow";
        _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
      goto LABEL_69;
    }
    if (v28)
    {
      if (mode > 5)
        v29 = "unknown-mode";
      else
        v29 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446978;
      v40 = "nw_flow_replay_send_initial_data_to_candidates";
      v41 = 2082;
      v42 = (void *)v29;
      v43 = 2082;
      v44 = "flow";
      v45 = 2082;
      v46 = v26;
      _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
    }

    free(v26);
    if (v12)
      goto LABEL_71;
    goto LABEL_72;
  }
  if (a2)
  {
    if (a2->fast_open_frames.tqh_first)
    {
      if (a2->fast_open_frame_finalized_count)
      {
        candidate_output_handlers = (char *)a2->candidate_output_handlers;
        if (candidate_output_handlers)
        {
          v34[0] = MEMORY[0x1E0C809B0];
          v34[1] = 3221225472;
          v34[2] = ___ZL46nw_flow_replay_send_initial_data_to_candidatesP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocol_block_invoke;
          v34[3] = &unk_1E149C860;
          v35 = v4;
          v36 = a2;
          nw_hash_table_apply(candidate_output_handlers, (uint64_t)v34);

        }
      }
    }
    goto LABEL_72;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_flow_replay_send_initial_data_to_candidates";
  v12 = (void *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault((const char *)v12, &type, &v37))
    goto LABEL_70;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_flow_replay_send_initial_data_to_candidates";
      _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null flow_protocol", buf, 0xCu);
    }
LABEL_69:

    goto LABEL_70;
  }
  if (!v37)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_flow_replay_send_initial_data_to_candidates";
      _os_log_impl(&dword_182FBE000, v13, v33, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_69;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v13, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_flow_replay_send_initial_data_to_candidates";
      _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_69;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v40 = "nw_flow_replay_send_initial_data_to_candidates";
    v41 = 2082;
    v42 = v18;
    _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v12)
    goto LABEL_71;
LABEL_72:

}

uint64_t ___ZL46nw_flow_replay_send_initial_data_to_candidatesP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t extra;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  BOOL v25;
  NSObject *v26;
  const char *id_string;
  const char *v28;
  nw_endpoint_t v29;
  id v30;
  int v31;
  void *v32;
  NSObject *v33;
  const char *v34;
  const char *v35;
  nw_endpoint_t v36;
  id v37;
  void *v38;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *logging_description;
  const char *v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t (*v48)(uint64_t, void *);
  void *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  _QWORD v61[2];
  _QWORD v62[2];
  BOOL (*v63)(uint64_t, void *);
  void *v64;
  _QWORD *v65;
  uint64_t *v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t);
  id v73;
  _QWORD v74[3];
  int v75;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  id v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  extra = nw_hash_node_get_extra(a2);
  if (object)
  {
    v6 = *(_QWORD *)(object + 24);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 88) && *(_QWORD *)(v6 + 96))
      {
        v7 = (unsigned int *)extra;
        v8 = *(_QWORD *)(a1 + 40);
        v46 = a1;
        while (1)
        {
          v9 = *(id *)(a1 + 32);
          v10 = v9;
          if (*v7 >= *(_DWORD *)(v8 + 328))
          {

            return 1;
          }
          v74[0] = 0;
          v74[1] = v74;
          v75 = 0;
          v74[2] = 0x2020000000;
          v68 = 0;
          v69 = &v68;
          v70 = 0x3032000000;
          v71 = __Block_byref_object_copy__16456;
          v72 = __Block_byref_object_dispose__16457;
          v73 = 0;
          v62[0] = MEMORY[0x1E0C809B0];
          v62[1] = 3221225472;
          v63 = ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke;
          v64 = &unk_1E149C888;
          v66 = &v68;
          v67 = v7;
          v65 = v74;
          v11 = *(_QWORD *)(v8 + 296);
          do
          {
            if (!v11)
              break;
            v12 = *(_QWORD *)(v11 + 16);
            v13 = ((uint64_t (*)(_QWORD *))v63)(v62);
            v11 = v12;
          }
          while ((v13 & 1) != 0);
          v14 = v69[5];
          if (!v14)
          {
            _Block_object_dispose(&v68, 8);

            _Block_object_dispose(v74, 8);
            return 1;
          }
          v16 = *v7;
          v15 = v7[1];
          v17 = *(_QWORD *)(v14 + 112);
          if (v17)
          {
            if ((*(_WORD *)(v14 + 204) & 0x100) == 0
              || !g_channel_check_validity
              || g_channel_check_validity(v69[5], *(_QWORD *)(v14 + 88)))
            {
              LODWORD(v17) = *(_DWORD *)(v14 + 52);
              v18 = *(unsigned int *)(v14 + 56);
              if ((_DWORD)v17)
                LODWORD(v17) = v17 - (v18 + *(_DWORD *)(v14 + 60));
              v19 = *(_QWORD *)(v14 + 112) + v18;
              goto LABEL_20;
            }
            LODWORD(v17) = 0;
          }
          v19 = 0;
LABEL_20:
          v20 = *(unsigned __int8 *)(v69[5] + 186);
          v21 = (v17 - v15);
          v61[0] = 0;
          v61[1] = v61;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(object + 24) + 88))(object, v8 + 96, 1, v21, 2, v61))
          {
            v57 = 0;
            v58 = &v57;
            v60 = 0;
            v59 = 0x2020000000;
            v47[0] = MEMORY[0x1E0C809B0];
            v47[1] = 3221225472;
            v48 = ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke_88;
            v49 = &unk_1E149C8B0;
            v50 = &v57;
            v55 = v21;
            v52 = v19 + v15;
            v53 = v7;
            v54 = v8;
            v51 = &v68;
            v56 = v20 >> 7;
            v22 = (_QWORD *)v61[0];
            do
            {
              if (!v22)
                break;
              v23 = (_QWORD *)v22[4];
              v24 = v48((uint64_t)v47, v22);
              v22 = v23;
            }
            while ((v24 & 1) != 0);
            a1 = v46;
            if (v61[0])
            {
              if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v10) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v26 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                {
                  id_string = nw_endpoint_handler_get_id_string(v10);
                  v28 = nw_endpoint_handler_dry_run_string(v10);
                  v29 = nw_endpoint_handler_copy_endpoint(v10);
                  logging_description = nw_endpoint_get_logging_description(v29);
                  v42 = nw_endpoint_handler_state_string(v10);
                  v40 = nw_endpoint_handler_mode_string(v10);
                  v30 = nw_endpoint_handler_copy_current_path(v10);
                  v31 = *((_DWORD *)v58 + 6);
                  *(_DWORD *)buf = 136448258;
                  v77 = "nw_flow_replay_send_one_frame";
                  v78 = 2082;
                  v79 = id_string;
                  v32 = v30;
                  v80 = 2082;
                  v81 = v28;
                  v82 = 2082;
                  v83 = logging_description;
                  v84 = 2082;
                  v85 = v42;
                  v86 = 2082;
                  v87 = v40;
                  v88 = 2114;
                  v89 = v30;
                  v90 = 1024;
                  v91 = v31;
                  v92 = 1024;
                  v93 = v21;
                  _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Sending %u/%u early bytes", buf, 0x54u);

                }
              }
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(object + 24) + 96))(object, v61);
            }
            _Block_object_dispose(&v57, 8);
          }
          else
          {
            a1 = v46;
            if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v10) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v33 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
              {
                v34 = nw_endpoint_handler_get_id_string(v10);
                v35 = nw_endpoint_handler_dry_run_string(v10);
                v36 = nw_endpoint_handler_copy_endpoint(v10);
                v45 = nw_endpoint_get_logging_description(v36);
                v43 = nw_endpoint_handler_state_string(v10);
                v41 = nw_endpoint_handler_mode_string(v10);
                v37 = nw_endpoint_handler_copy_current_path(v10);
                *(_DWORD *)buf = 136448002;
                v77 = "nw_flow_replay_send_one_frame";
                v78 = 2082;
                v79 = v34;
                v38 = v37;
                v80 = 2082;
                v81 = v35;
                v82 = 2082;
                v83 = v45;
                v84 = 2082;
                v85 = v43;
                v86 = 2082;
                v87 = v41;
                v88 = 2114;
                v89 = v37;
                v90 = 1024;
                v91 = v21;
                _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Unable to send %u early bytes", buf, 0x4Eu);

              }
            }
          }
          v25 = *v7 > v16;
          _Block_object_dispose(&v68, 8);

          _Block_object_dispose(v74, 8);
          if (v25)
          {
            v8 = *(_QWORD *)(a1 + 40);
            if (*v7 < *(_DWORD *)(v8 + 328))
              continue;
          }
          return 1;
        }
      }
    }
  }
  return 1;
}

void sub_183504610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46)
{
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v49 - 240), 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(_DWORD *)(v5 + 24);
  v7 = **(_DWORD **)(a1 + 48);
  if (v6 == v7)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  else
    *(_DWORD *)(v5 + 24) = v6 + 1;

  return v6 != v7;
}

uint64_t ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke_88(uint64_t a1, void *a2)
{
  _BYTE *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  size_t __n;

  v3 = a2;
  if (nw_frame_uses_external_data((uint64_t)v3))
  {
    v4 = nw_frame_unclaimed_length(v3);
    v6 = v4;
    v7 = *(_DWORD *)(a1 + 72);
    if (v4 < v7)
    {
      if (v4)
      {
        v16 = dispatch_data_create(*(const void **)(a1 + 48), v4, 0, 0);
        nw_frame_set_external_data((uint64_t)v3, v16, 0);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v6;
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) += v6;

      }
      nw_frame_claim((uint64_t)v3, v5, v6, 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v17, v6, 0);
      v10 = v6 >= v7;
    }
    else
    {
      if (v7)
      {
        v8 = dispatch_data_create(*(const void **)(a1 + 48), *(unsigned int *)(a1 + 72), 0, 0);
        nw_frame_set_external_data((uint64_t)v3, v8, 0);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += *(_DWORD *)(a1 + 72);
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) += *(_DWORD *)(a1 + 72);

      }
      **(_QWORD **)(a1 + 56) = (**(_DWORD **)(a1 + 56) + 1);
      nw_frame_claim((uint64_t)v3, v5, *(_DWORD *)(a1 + 72), 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v9, *(_DWORD *)(a1 + 72), 0);
      v3[186] = v3[186] & 0x7F | ((*(_BYTE *)(a1 + 76) != 0) << 7);
      v10 = v6 >= v7;
    }
  }
  else
  {
    LODWORD(__n) = 0;
    v11 = (void *)nw_frame_unclaimed_bytes((uint64_t)v3, &__n);
    v13 = __n;
    v14 = *(_DWORD *)(a1 + 72);
    if (__n < v14)
    {
      v18 = __n;
      if ((_DWORD)__n && v11)
      {
        memcpy(v11, *(const void **)(a1 + 48), __n);
        v18 = __n;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += __n;
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4) += v18;
      }
      nw_frame_claim((uint64_t)v3, v12, v18, 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v19, __n, 0);
    }
    else
    {
      if (v14)
      {
        memcpy(v11, *(const void **)(a1 + 48), *(unsigned int *)(a1 + 72));
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += *(_DWORD *)(a1 + 72);
      }
      **(_QWORD **)(a1 + 56) = (**(_DWORD **)(a1 + 56) + 1);
      nw_frame_claim((uint64_t)v3, v12, *(_DWORD *)(a1 + 72), 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v15, *(_DWORD *)(a1 + 72), 0);
      v3[186] = v3[186] & 0x7F | ((*(_BYTE *)(a1 + 76) != 0) << 7);
    }
    v10 = v13 >= v14;
  }
  v20 = v10;
  nw_frame_inherit_metadata(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), (uint64_t)v3, v20);

  return 1;
}

uint64_t __nw_flow_replay_select_output_handler_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  object = nw_hash_node_get_object(a2);
  if (object == a1[5])
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  else
  {
    v5 = object;
    nw_hash_table_remove_node(*(_QWORD *)(a1[6] + 288), a2);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8);
        if (v7)
          v7(v5, a1[6] + 96, 1);
      }
    }
  }
  return 1;
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_16669()
{
  _BOOL8 result;

  result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

uint64_t __nw_endpoint_flow_cleanup_protocol_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = a2;
  v4 = v3;
  v5 = *((_QWORD *)v3 + 4);
  v6 = (_QWORD *)*((_QWORD *)v3 + 5);
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v6;
    v6 = (_QWORD *)*((_QWORD *)v3 + 5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 280) = v6;
  }
  *v6 = v5;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  nw_frame_finalize((uint64_t)v3);

  return 1;
}

uint64_t __nw_endpoint_flow_cleanup_protocol_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  nw_hash_table_remove_node(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 288), a2);
  v5 = *(_QWORD *)(a1 + 32);
  if (object != *(_QWORD *)(v5 + 128) || (*(_WORD *)(v5 + 332) & 0x800) != 0)
  {
    if (object)
    {
      v7 = *(_QWORD *)(object + 24);
      if (v7)
      {
        v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
        if (v8)
          v8(object, v5 + 96, 1);
      }
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v10 = 136446466;
      v11 = "nw_endpoint_flow_cleanup_protocol_block_invoke_2";
      v12 = 2048;
      v13 = object;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Not tearing down replay selected output handler %p", (uint8_t *)&v10, 0x16u);
    }

  }
  return 1;
}

void nw_flow_passthrough_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*input_finished)(void);
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_finished = (void (*)(void))callbacks->input_finished;
        if (input_finished)
          input_finished();
      }
    }
    return;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_flow_passthrough_input_finished";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_input_finished";
        v9 = "%{public}s called with null protocol";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_flow_passthrough_input_finished";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_input_finished";
        v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_input_finished";
        v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
}

uint64_t nw_flow_connect(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *handle;
  void *v3;

  handle = a1->handle;
  if (handle && (v3 = (void *)handle[20]) != 0)
    return nw_endpoint_flow_connect(v3);
  else
    return 0;
}

uint64_t nw_flow_updated_path()
{
  return 1;
}

uint64_t nw_flow_replay_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  void *v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      if (!a2->output_handler)
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
      return 1;
    }
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_flow_replay_add_input_handler";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_flow_replay_add_input_handler";
          v9 = "%{public}s called with null input_protocol";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      if (!v15)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_flow_replay_add_input_handler";
          v9 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v14 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_flow_replay_add_input_handler";
          v9 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      if (!v14)
        goto LABEL_24;
      *(_DWORD *)buf = 136446466;
      v18 = "nw_flow_replay_add_input_handler";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v7, v8, v13, buf, 0x16u);
LABEL_24:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_flow_replay_add_input_handler";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_flow_replay_add_input_handler";
          v9 = "%{public}s called with null protocol";
LABEL_33:
          _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
        }
LABEL_34:

        goto LABEL_35;
      }
      if (!v15)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_flow_replay_add_input_handler";
          v9 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v12 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_flow_replay_add_input_handler";
          v9 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      if (!v12)
        goto LABEL_24;
      *(_DWORD *)buf = 136446466;
      v18 = "nw_flow_replay_add_input_handler";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
  }
LABEL_35:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_flow_replay_remove_input_handler(nw_protocol *a1, nw_protocol *a2, char a3)
{
  void *handle;
  id v7;
  void *v8;
  unsigned int *v9;
  uint64_t v10;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*remove_input_handler)(void);
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  char *v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  _QWORD v35[6];
  char v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    v7 = *((id *)handle + 20);
    v8 = v7;
    if (v7)
    {
      v9 = (unsigned int *)v7;
      v10 = v9[29];

      if ((_DWORD)v10 == 2)
      {
        if (a2 && a2->output_handler == a1)
          nw_protocol_set_output_handler((uint64_t)a2, 0);
        if (a1->default_input_handler == a2)
        {
          nw_protocol_set_input_handler((uint64_t)a1, 0);
          output_handler = a1->output_handler;
          if (output_handler)
          {
            callbacks = output_handler->callbacks;
            if (callbacks)
            {
              remove_input_handler = (void (*)(void))callbacks->remove_input_handler;
              if (remove_input_handler)
                remove_input_handler();
            }
          }
          else
          {
            v18 = (char *)*((_QWORD *)handle + 36);
            if (v18)
            {
              v35[0] = MEMORY[0x1E0C809B0];
              v35[1] = 3221225472;
              v35[2] = ___ZL35nw_flow_replay_remove_input_handlerP11nw_protocolS0_b_block_invoke;
              v35[3] = &__block_descriptor_49_e23_B16__0__nw_hash_node__8l;
              v35[4] = handle;
              v35[5] = a1;
              v36 = a3;
              nw_hash_table_apply(v18, (uint64_t)v35);
            }
          }
          v16 = 1;
          goto LABEL_19;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          if (v10 > 5)
            v15 = "unknown-mode";
          else
            v15 = off_1E149FC18[v10];
          *(_DWORD *)buf = 136446722;
          v40 = "nw_flow_replay_remove_input_handler";
          v41 = 2082;
          v42 = (void *)v15;
          v43 = 2082;
          v44 = "flow";
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_18:
      v16 = 0;
LABEL_19:

      return v16;
    }
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_flow_replay_remove_input_handler";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v24, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_flow_replay_remove_input_handler";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v37)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v40 = "nw_flow_replay_remove_input_handler";
            v41 = 2082;
            v42 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v31, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_59;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_flow_replay_remove_input_handler";
          _os_log_impl(&dword_182FBE000, v25, v31, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_flow_replay_remove_input_handler";
          _os_log_impl(&dword_182FBE000, v25, v34, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_59:
    if (v24)
      free(v24);
    goto LABEL_18;
  }
  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_flow_replay_remove_input_handler";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v20, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_flow_replay_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v37)
    {
      v27 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v29 = os_log_type_enabled(v21, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_flow_replay_remove_input_handler";
          v41 = 2082;
          v42 = v27;
          _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v27);
        goto LABEL_53;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_flow_replay_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_flow_replay_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v21, v33, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v20)
    free(v20);
  return 0;
}

void sub_183505C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_input_frames)(void);
  NSObject *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_flow_replay_get_input_frames";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v12, &type, &v18))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_flow_replay_get_input_frames";
        v15 = "%{public}s called with null protocol";
LABEL_22:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_flow_replay_get_input_frames";
            v22 = 2082;
            v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v17)
          goto LABEL_23;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_flow_replay_get_input_frames";
        v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_22;
      }
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_flow_replay_get_input_frames";
        v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:

LABEL_24:
    if (v12)
      free(v12);
    return 0;
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      get_input_frames = (uint64_t (*)(void))callbacks->get_input_frames;
      if (get_input_frames)
        return get_input_frames();
    }
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "nw_flow_replay_get_input_frames";
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support get_input_frames", buf, 0xCu);
    }

  }
  return 0;
}

BOOL nw_flow_replay_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  size_t v7;
  void *handle;
  id v10;
  void *v11;
  NWConcrete_nw_endpoint_handler *v12;
  uint64_t mode;
  char *v14;
  int v15;
  char *v16;
  int v17;
  uint64_t v18;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_output_frames)(void);
  NSObject *v22;
  const char *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  _BOOL8 result;
  char *v28;
  _QWORD *v29;
  nw_frame **tqh_last;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  NSObject *v39;
  char *backtrace_string;
  os_log_type_t v41;
  _BOOL4 v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  os_log_type_t v47;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  char *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  os_log_type_t v55;
  char v56;
  os_log_type_t v57;
  os_log_type_t type[8];
  os_log_type_t *v59;
  uint64_t v60;
  char v61;
  _BYTE buf[24];
  const char *v63;
  os_log_type_t *v64;
  void *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
    v32 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v57 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v32, type, &v57))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v57)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v41 = type[0];
        v42 = os_log_type_enabled(v33, type[0]);
        if (backtrace_string)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v33, v41, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_72;
        }
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_182FBE000, v33, v41, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v46 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_182FBE000, v33, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_72:
    if (v32)
      free(v32);
    return 0;
  }
  LODWORD(v7) = a4;
  handle = a1->handle;
  v10 = *((id *)handle + 20);
  v11 = v10;
  if (!v10)
  {
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
    v36 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v57 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v36, type, &v57))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v57)
      {
        v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v44 = type[0];
        v45 = os_log_type_enabled(v37, type[0]);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v43;
            _os_log_impl(&dword_182FBE000, v37, v44, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v43);
          goto LABEL_78;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_182FBE000, v37, v44, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v47 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_182FBE000, v37, v47, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_78:
    if (v36)
      free(v36);
    goto LABEL_37;
  }
  v12 = (NWConcrete_nw_endpoint_handler *)v10;
  mode = v12->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      if (mode > 5)
        v23 = "unknown-mode";
      else
        v23 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v23;
      *(_WORD *)&buf[22] = 2082;
      v63 = "flow";
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }

    goto LABEL_37;
  }
  if (*((_QWORD *)handle + 37))
  {
    if (*((_DWORD *)handle + 82))
    {
      if (*((_QWORD *)handle + 16))
      {
        v14 = (char *)*((_QWORD *)handle + 36);
        if (v14)
        {
          *(_QWORD *)type = 0;
          v59 = type;
          v60 = 0x2020000000;
          v61 = 0;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL56nw_flow_replay_selected_candidate_has_early_data_to_sendP16nw_flow_protocol_block_invoke;
          v63 = (const char *)&unk_1E149C970;
          v64 = type;
          v65 = handle;
          nw_hash_table_apply(v14, (uint64_t)buf);
          v15 = *((unsigned __int8 *)v59 + 24);
          _Block_object_dispose(type, 8);
          if (v15)
          {
            nw_flow_replay_send_initial_data_to_candidates(v12, (nw_flow_protocol *)handle);
            if (*((_QWORD *)handle + 37))
            {
              if (*((_DWORD *)handle + 82))
              {
                if (*((_QWORD *)handle + 16))
                {
                  v16 = (char *)*((_QWORD *)handle + 36);
                  if (v16)
                  {
                    *(_QWORD *)type = 0;
                    v59 = type;
                    v60 = 0x2020000000;
                    v61 = 0;
                    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&buf[8] = 3221225472;
                    *(_QWORD *)&buf[16] = ___ZL56nw_flow_replay_selected_candidate_has_early_data_to_sendP16nw_flow_protocol_block_invoke;
                    v63 = (const char *)&unk_1E149C970;
                    v64 = type;
                    v65 = handle;
                    nw_hash_table_apply(v16, (uint64_t)buf);
                    v17 = *((unsigned __int8 *)v59 + 24);
                    _Block_object_dispose(type, 8);
                    v18 = 0;
                    if (v17)
                      goto LABEL_38;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      get_output_frames = (uint64_t (*)(void))callbacks->get_output_frames;
      if (get_output_frames)
      {
        v18 = get_output_frames();
LABEL_38:

        return v18;
      }
    }
    __nwlog_obj();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
      _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support get_output_frames", buf, 0xCu);
    }

LABEL_37:
    v18 = 0;
    goto LABEL_38;
  }
  *(_DWORD *)type = 0;
  v18 = 0;
  if (nw_frame_array_get_frame_count((uint64_t *)handle + 37, 0, type) > 3 || *(_DWORD *)type > 0x7CFu)
    goto LABEL_38;
  if (2000 - *(_DWORD *)type >= v7)
    v7 = v7;
  else
    v7 = (2000 - *(_DWORD *)type);
  if (!(_DWORD)v7)
    goto LABEL_30;
  v24 = malloc_type_calloc(1uLL, v7, 0xEAFB8F1AuLL);
  if (v24)
    goto LABEL_31;
  __nwlog_obj();
  v25 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = 1;
  *(_WORD *)&buf[22] = 2048;
  v63 = (const char *)v7;
  v26 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
LABEL_30:
    v24 = 0;
LABEL_31:
    v28 = (char *)(id)nw_frame_create(0, (uint64_t)v24, v7, (uint64_t)nw_flow_replay_frame_finalizer, (uint64_t)handle);
    if (v28)
    {
      *((_WORD *)v28 + 102) |= 1u;
      *((_QWORD *)v28 + 2) = 0;
      v29 = (_QWORD *)*((_QWORD *)handle + 38);
      *((_QWORD *)v28 + 3) = v29;
      *v29 = v28;
      *((_QWORD *)handle + 38) = v28 + 16;
      *((_QWORD *)v28 + 4) = 0;
      tqh_last = a6->tqh_last;
      *((_QWORD *)v28 + 5) = tqh_last;
      *tqh_last = (nw_frame *)v28;
      a6->tqh_last = (nw_frame **)(v28 + 32);
      v18 = 1;
LABEL_33:

      goto LABEL_38;
    }
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
    v49 = (char *)_os_log_send_and_compose_impl();

    v57 = OS_LOG_TYPE_ERROR;
    v56 = 0;
    if (__nwlog_fault(v49, &v57, &v56))
    {
      if (v57 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v51 = v57;
        if (os_log_type_enabled(v50, v57))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null additional_reference", buf, 0xCu);
        }
      }
      else if (v56)
      {
        v52 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v53 = v57;
        v54 = os_log_type_enabled(v50, v57);
        if (v52)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v52;
            _os_log_impl(&dword_182FBE000, v50, v53, "%{public}s called with null additional_reference, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v52);
          goto LABEL_96;
        }
        if (v54)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_182FBE000, v50, v53, "%{public}s called with null additional_reference, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v55 = v57;
        if (os_log_type_enabled(v50, v57))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_182FBE000, v50, v55, "%{public}s called with null additional_reference, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_96:
    if (v49)
      free(v49);
    v18 = 0;
    v28 = 0;
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

void sub_1835069C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  nw_flow_protocol *handle;
  NWConcrete_nw_endpoint_handler *v5;
  NWConcrete_nw_endpoint_handler *v6;
  unsigned int *v7;
  uint64_t v8;
  NWConcrete_nw_endpoint_handler *v9;
  nw_frame *tqh_first;
  nw_frame *v11;
  char v12;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*finalize_output_frames)(void);
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  NSObject *v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t, void *);
  void *v39;
  NWConcrete_nw_endpoint_handler *v40;
  _BYTE *v41;
  nw_flow_protocol *v42;
  nw_frame_array_s *v43;
  char v44;
  os_log_type_t type;
  _BYTE buf[24];
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (nw_flow_protocol *)a1->handle;
    v5 = handle->handler;
    v6 = v5;
    if (v5)
    {
      v7 = v5;
      v8 = v7[29];

      if ((_DWORD)v8 == 2)
      {
        if (handle->fast_open_frames.tqh_first)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2020000000;
          LOBYTE(v47) = 0;
          v37[0] = MEMORY[0x1E0C809B0];
          v37[1] = 3221225472;
          v38 = ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
          v39 = &unk_1E149C9C0;
          v42 = handle;
          v43 = a2;
          v9 = v7;
          v40 = v9;
          v41 = buf;
          tqh_first = a2->tqh_first;
          do
          {
            if (!tqh_first)
              break;
            v11 = (nw_frame *)*((_QWORD *)tqh_first + 4);
            v12 = ((uint64_t (*)(_QWORD *))v38)(v37);
            tqh_first = v11;
          }
          while ((v12 & 1) != 0);
          if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
            nw_flow_replay_send_initial_data_to_candidates(v9, handle);

          _Block_object_dispose(buf, 8);
        }
        output_handler = a1->output_handler;
        if (!output_handler)
        {
          v16 = 1;
          goto LABEL_23;
        }
        callbacks = output_handler->callbacks;
        if (callbacks)
        {
          finalize_output_frames = (uint64_t (*)(void))callbacks->finalize_output_frames;
          if (finalize_output_frames)
          {
            v16 = finalize_output_frames();
LABEL_23:

            return v16;
          }
        }
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support finalize_output_frames", buf, 0xCu);
        }

      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          if (v8 > 5)
            v18 = "unknown-mode";
          else
            v18 = off_1E149FC18[v8];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v18;
          *(_WORD *)&buf[22] = 2082;
          v47 = "flow";
          _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_22:
      v16 = 0;
      goto LABEL_23;
    }
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
    v25 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v25, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        v34 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v26, v33, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_63;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v26, v33, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v26, v36, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_63:
    if (v25)
      free(v25);
    goto LABEL_22;
  }
  __nwlog_obj();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
  v21 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (__nwlog_fault(v21, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v44)
    {
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v22, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v29;
          _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        goto LABEL_57;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_flow_replay_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v22, v35, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_57:
  if (v21)
    free(v21);
  return 0;
}

void sub_18350707C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_flow_replay_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*output_finished)(void);
  NSObject *v6;
  nw_protocol_identifier *identifier;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  nw_protocol_identifier *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    output_handler = a1->output_handler;
    if (output_handler)
    {
      callbacks = output_handler->callbacks;
      if (callbacks && (output_finished = (void (*)(void))callbacks->output_finished) != 0)
      {
        output_finished();
      }
      else
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          identifier = (nw_protocol_identifier *)"<null>";
          if (a1->identifier)
            identifier = a1->identifier;
          *(_DWORD *)buf = 136446466;
          v18 = "nw_flow_replay_output_finished";
          v19 = 2082;
          v20 = identifier;
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Protocol %{public}s does not support output finished", buf, 0x16u);
        }

      }
    }
    return;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_flow_replay_output_finished";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v9, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_flow_replay_output_finished";
        v12 = "%{public}s called with null protocol";
LABEL_24:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_flow_replay_output_finished";
            v19 = 2082;
            v20 = (nw_protocol_identifier *)backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (!v14)
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_flow_replay_output_finished";
        v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_24;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_flow_replay_output_finished";
        v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_24;
      }
    }
LABEL_25:

  }
LABEL_26:
  if (v9)
    free(v9);
}

void nw_flow_replay_output_available(nw_protocol *a1, nw_protocol *a2)
{
  nw_flow_protocol *handle;
  NWConcrete_nw_endpoint_handler *v4;
  NWConcrete_nw_endpoint_handler *v5;
  NWConcrete_nw_endpoint_handler *v6;
  uint64_t mode;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*output_available)(void);
  NSObject *v11;
  const char *v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (nw_flow_protocol *)a1->handle;
    v4 = handle->handler;
    v5 = v4;
    if (v4)
    {
      v6 = v4;
      mode = v6->mode;

      if ((_DWORD)mode == 2)
      {
        nw_flow_replay_send_initial_data_to_candidates(v6, handle);
        default_input_handler = a1->default_input_handler;
        if (default_input_handler)
        {
          callbacks = default_input_handler->callbacks;
          if (callbacks)
          {
            output_available = (void (*)(void))callbacks->output_available;
            if (output_available)
              output_available();
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          if (mode > 5)
            v12 = "unknown-mode";
          else
            v12 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v32 = "nw_flow_replay_output_available";
          v33 = 2082;
          v34 = (void *)v12;
          v35 = 2082;
          v36 = "flow";
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_14:

      return;
    }
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_flow_replay_output_available";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_flow_replay_output_available";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "nw_flow_replay_output_available";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_flow_replay_output_available";
          _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_flow_replay_output_available";
          _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_50:
    if (v18)
      free(v18);
    goto LABEL_14;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v32 = "nw_flow_replay_output_available";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (__nwlog_fault(v14, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_flow_replay_output_available";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v29)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v15, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_flow_replay_output_available";
          v33 = 2082;
          v34 = v21;
          _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        goto LABEL_45;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_flow_replay_output_available";
        _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_flow_replay_output_available";
        _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_45:
  if (v14)
    free(v14);
}

void sub_18350792C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_updated_path(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  _QWORD v34[4];
  id v35;
  uint64_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(id *)(v5 + 160);
    v7 = v6;
    if (v6)
    {
      v8 = (unsigned int *)v6;
      v9 = v8[29];

      if ((_DWORD)v9 == 2)
      {
        v10 = *(_QWORD *)(a1 + 32);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(uint64_t (**)(void))(v11 + 168);
            if (v12)
            {
              v13 = v12();
LABEL_17:

              goto LABEL_18;
            }
          }
        }
        else
        {
          v16 = *(char **)(v5 + 288);
          if (v16)
          {
            v34[0] = MEMORY[0x1E0C809B0];
            v34[1] = 3221225472;
            v34[2] = ___ZL27nw_flow_replay_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke;
            v34[3] = &unk_1E149C860;
            v36 = a1;
            v35 = v4;
            nw_hash_table_apply(v16, (uint64_t)v34);

            v13 = 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          if (v9 > 5)
            v15 = "unknown-mode";
          else
            v15 = off_1E149FC18[v9];
          *(_DWORD *)buf = 136446722;
          v40 = "nw_flow_replay_updated_path";
          v41 = 2082;
          v42 = (void *)v15;
          v43 = 2082;
          v44 = "flow";
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_16:
      v13 = 0;
      goto LABEL_17;
    }
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_flow_replay_updated_path";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v23, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_flow_replay_updated_path";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v37)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v31 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            v40 = "nw_flow_replay_updated_path";
            v41 = 2082;
            v42 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_flow_replay_updated_path";
          _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_flow_replay_updated_path";
          _os_log_impl(&dword_182FBE000, v24, v33, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_54:
    if (v23)
      free(v23);
    goto LABEL_16;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_flow_replay_updated_path";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v19, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_flow_replay_updated_path";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v37)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v20, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_flow_replay_updated_path";
          v41 = 2082;
          v42 = v26;
          _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_48;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_flow_replay_updated_path";
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_flow_replay_updated_path";
        _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_48:
  if (v19)
    free(v19);
  v13 = 0;
LABEL_18:

  return v13;
}

void sub_183507F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_connect(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  id v4;
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*connect)(void);
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  _QWORD v32[5];
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    v4 = *((id *)handle + 20);
    v5 = v4;
    if (v4)
    {
      v6 = (unsigned int *)v4;
      v7 = v6[29];

      if ((_DWORD)v7 == 2)
      {
        output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            connect = (uint64_t (*)(void))callbacks->connect;
            if (connect)
            {
              v11 = connect();
LABEL_17:

              return v11;
            }
          }
        }
        else
        {
          v14 = (char *)*((_QWORD *)handle + 36);
          if (v14)
          {
            v32[0] = MEMORY[0x1E0C809B0];
            v32[1] = 3221225472;
            v32[2] = ___ZL22nw_flow_replay_connectP11nw_protocolS0__block_invoke;
            v32[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
            v32[4] = a1;
            nw_hash_table_apply(v14, (uint64_t)v32);
            v11 = 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          if (v7 > 5)
            v13 = "unknown-mode";
          else
            v13 = off_1E149FC18[v7];
          *(_DWORD *)buf = 136446722;
          v36 = "nw_flow_replay_connect";
          v37 = 2082;
          v38 = (void *)v13;
          v39 = 2082;
          v40 = "flow";
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_16:
      v11 = 0;
      goto LABEL_17;
    }
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_flow_replay_connect";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v21, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_flow_replay_connect";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        v29 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_flow_replay_connect";
            v37 = 2082;
            v38 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_flow_replay_connect";
          _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_flow_replay_connect";
          _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_54:
    if (v21)
      free(v21);
    goto LABEL_16;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v36 = "nw_flow_replay_connect";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v17, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_flow_replay_connect";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v33)
    {
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v18, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_flow_replay_connect";
          v37 = 2082;
          v38 = v24;
          _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_48;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_flow_replay_connect";
        _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_flow_replay_connect";
        _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_48:
  if (v17)
    free(v17);
  return 0;
}

void sub_18350853C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_flow_replay_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  id v4;
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*disconnect)(void);
  NSObject *v11;
  const char *v12;
  char *v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  _QWORD v30[5];
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    v4 = *((id *)handle + 20);
    v5 = v4;
    if (v4)
    {
      v6 = (unsigned int *)v4;
      v7 = v6[29];

      if ((_DWORD)v7 == 2)
      {
        output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            disconnect = (void (*)(void))callbacks->disconnect;
            if (disconnect)
              disconnect();
          }
        }
        else
        {
          v13 = (char *)*((_QWORD *)handle + 36);
          if (v13)
          {
            v30[0] = MEMORY[0x1E0C809B0];
            v30[1] = 3221225472;
            v30[2] = ___ZL25nw_flow_replay_disconnectP11nw_protocolS0__block_invoke;
            v30[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
            v30[4] = a1;
            nw_hash_table_apply(v13, (uint64_t)v30);
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          if (v7 > 5)
            v12 = "unknown-mode";
          else
            v12 = off_1E149FC18[v7];
          *(_DWORD *)buf = 136446722;
          v34 = "nw_flow_replay_disconnect";
          v35 = 2082;
          v36 = (void *)v12;
          v37 = 2082;
          v38 = "flow";
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_16:

      return;
    }
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_flow_replay_disconnect";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v19, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_flow_replay_disconnect";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v27 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v34 = "nw_flow_replay_disconnect";
            v35 = 2082;
            v36 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_flow_replay_disconnect";
          _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_flow_replay_disconnect";
          _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_52:
    if (v19)
      free(v19);
    goto LABEL_16;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_flow_replay_disconnect";
  v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v15, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_flow_replay_disconnect";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v31)
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v16, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_flow_replay_disconnect";
          v35 = 2082;
          v36 = v22;
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        goto LABEL_47;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_flow_replay_disconnect";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_flow_replay_disconnect";
        _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_47:
  if (v15)
    free(v15);
}

void sub_183508B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_flow_replay_get_message_properties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  NSObject *v13;
  const char *v14;
  char *v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  _QWORD v32[6];
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (!a3)
      return;
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(id *)(v5 + 160);
    v7 = v6;
    if (v6)
    {
      v8 = (unsigned int *)v6;
      v9 = v8[29];

      if ((_DWORD)v9 == 2)
      {
        v10 = *(_QWORD *)(a1 + 32);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(void (**)(void))(v11 + 248);
            if (v12)
              v12();
          }
        }
        else
        {
          v15 = *(char **)(v5 + 288);
          if (v15)
          {
            v32[0] = MEMORY[0x1E0C809B0];
            v32[1] = 3221225472;
            v32[2] = ___ZL37nw_flow_replay_get_message_propertiesP11nw_protocolS0_P30nw_protocol_message_properties_block_invoke;
            v32[3] = &__block_descriptor_48_e23_B16__0__nw_hash_node__8l;
            v32[4] = a1;
            v32[5] = a3;
            nw_hash_table_apply(v15, (uint64_t)v32);
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          if (v9 > 5)
            v14 = "unknown-mode";
          else
            v14 = off_1E149FC18[v9];
          *(_DWORD *)buf = 136446722;
          v36 = "nw_flow_replay_get_message_properties";
          v37 = 2082;
          v38 = (void *)v14;
          v39 = 2082;
          v40 = "flow";
          _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_17:

      return;
    }
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_flow_replay_get_message_properties";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v21, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_flow_replay_get_message_properties";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        v29 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_flow_replay_get_message_properties";
            v37 = 2082;
            v38 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_53;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_flow_replay_get_message_properties";
          _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_flow_replay_get_message_properties";
          _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_53:
    if (v21)
      free(v21);
    goto LABEL_17;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v36 = "nw_flow_replay_get_message_properties";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v17, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_flow_replay_get_message_properties";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v33)
    {
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v18, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_flow_replay_get_message_properties";
          v37 = 2082;
          v38 = v24;
          _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_45;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_flow_replay_get_message_properties";
        _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_flow_replay_get_message_properties";
        _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_45:
  if (v17)
    free(v17);
}

void sub_183509110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_flow_replay_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
    return a1->output_handler == 0;
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_flow_replay_waiting_for_output";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_flow_replay_waiting_for_output";
        v7 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            v13 = "nw_flow_replay_waiting_for_output";
            v14 = 2082;
            v15 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v9)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_flow_replay_waiting_for_output";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_flow_replay_waiting_for_output";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v4)
    free(v4);
  return 0;
}

uint64_t nw_flow_replay_register_notification(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  id v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  os_log_type_t v37;
  _QWORD v38[7];
  int v39;
  char v40;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(id *)(v9 + 160);
    v11 = v10;
    if (v10)
    {
      v12 = (unsigned int *)v10;
      v13 = v12[29];

      if ((_DWORD)v13 == 2)
      {
        v14 = *(_QWORD *)(a1 + 32);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 24);
          if (v15)
          {
            v16 = *(uint64_t (**)(void))(v15 + 144);
            if (v16)
            {
              v17 = v16();
LABEL_17:

              return v17;
            }
          }
        }
        else
        {
          v20 = *(char **)(v9 + 288);
          if (v20)
          {
            v38[0] = MEMORY[0x1E0C809B0];
            v38[1] = 3221225472;
            v38[2] = ___ZL36nw_flow_replay_register_notificationP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
            v38[3] = &__block_descriptor_60_e23_B16__0__nw_hash_node__8l;
            v39 = a3;
            v38[4] = a1;
            v38[5] = a4;
            v38[6] = a5;
            nw_hash_table_apply(v20, (uint64_t)v38);
            v17 = 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          if (v13 > 5)
            v19 = "unknown-mode";
          else
            v19 = off_1E149FC18[v13];
          *(_DWORD *)buf = 136446722;
          v43 = "nw_flow_replay_register_notification";
          v44 = 2082;
          v45 = (void *)v19;
          v46 = 2082;
          v47 = "flow";
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_16:
      v17 = 0;
      goto LABEL_17;
    }
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v43 = "nw_flow_replay_register_notification";
    v27 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (__nwlog_fault(v27, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_flow_replay_register_notification";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v40)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v43 = "nw_flow_replay_register_notification";
            v44 = 2082;
            v45 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v34, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_flow_replay_register_notification";
          _os_log_impl(&dword_182FBE000, v28, v34, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_flow_replay_register_notification";
          _os_log_impl(&dword_182FBE000, v28, v37, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_54:
    if (v27)
      free(v27);
    goto LABEL_16;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v43 = "nw_flow_replay_register_notification";
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v40 = 0;
  if (__nwlog_fault(v23, &type, &v40))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_flow_replay_register_notification";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v40)
    {
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v24, type);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_flow_replay_register_notification";
          v44 = 2082;
          v45 = v30;
          _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
        goto LABEL_48;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_flow_replay_register_notification";
        _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_flow_replay_register_notification";
        _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_48:
  if (v23)
    free(v23);
  return 0;
}

void sub_18350996C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  _QWORD v34[5];
  int v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(id *)(v5 + 160);
    v7 = v6;
    if (v6)
    {
      v8 = (unsigned int *)v6;
      v9 = v8[29];

      if ((_DWORD)v9 == 2)
      {
        v10 = *(_QWORD *)(a1 + 32);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(uint64_t (**)(void))(v11 + 152);
            if (v12)
            {
              v13 = v12();
LABEL_17:

              return v13;
            }
          }
        }
        else
        {
          v16 = *(char **)(v5 + 288);
          if (v16)
          {
            v34[0] = MEMORY[0x1E0C809B0];
            v34[1] = 3221225472;
            v34[2] = ___ZL38nw_flow_replay_unregister_notificationP11nw_protocolS0_31nw_protocol_notification_type_t_block_invoke;
            v34[3] = &__block_descriptor_44_e23_B16__0__nw_hash_node__8l;
            v34[4] = a1;
            v35 = a3;
            nw_hash_table_apply(v16, (uint64_t)v34);
            v13 = 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          if (v9 > 5)
            v15 = "unknown-mode";
          else
            v15 = off_1E149FC18[v9];
          *(_DWORD *)buf = 136446722;
          v39 = "nw_flow_replay_unregister_notification";
          v40 = 2082;
          v41 = (void *)v15;
          v42 = 2082;
          v43 = "flow";
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_16:
      v13 = 0;
      goto LABEL_17;
    }
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_flow_replay_unregister_notification";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v23, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_flow_replay_unregister_notification";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v31 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            v39 = "nw_flow_replay_unregister_notification";
            v40 = 2082;
            v41 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_flow_replay_unregister_notification";
          _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_flow_replay_unregister_notification";
          _os_log_impl(&dword_182FBE000, v24, v33, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_54:
    if (v23)
      free(v23);
    goto LABEL_16;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_flow_replay_unregister_notification";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (__nwlog_fault(v19, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_flow_replay_unregister_notification";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v36)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v20, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_flow_replay_unregister_notification";
          v40 = 2082;
          v41 = v26;
          _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_48;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_flow_replay_unregister_notification";
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_flow_replay_unregister_notification";
        _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_48:
  if (v19)
    free(v19);
  return 0;
}

void sub_183509F6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_flow_replay_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  id *handle;
  id v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  const char *v11;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*disconnected)(void);
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[4];
  unsigned int *v32;
  nw_protocol *v33;
  nw_protocol *v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (id *)a1->handle;
    v5 = handle[20];
    v6 = v5;
    if (v5)
    {
      v7 = (unsigned int *)v5;
      v8 = v7[29];

      if ((_DWORD)v8 == 2)
      {
        if (a1->output_handler == a2)
        {
          default_input_handler = a1->default_input_handler;
          if (default_input_handler)
          {
            callbacks = default_input_handler->callbacks;
            if (callbacks)
            {
              disconnected = (void (*)(void))callbacks->disconnected;
              if (disconnected)
                disconnected();
            }
          }
        }
        else if (handle[36])
        {
          v9 = handle[23];
          v31[0] = MEMORY[0x1E0C809B0];
          v31[1] = 3221225472;
          v31[2] = ___ZL27nw_flow_replay_disconnectedP11nw_protocolS0__block_invoke;
          v31[3] = &unk_1E14AB088;
          v32 = v7;
          v33 = a2;
          v34 = a1;
          nw_queue_context_async(v9, v31);

        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          if (v8 > 5)
            v11 = "unknown-mode";
          else
            v11 = off_1E149FC18[v8];
          *(_DWORD *)buf = 136446722;
          v38 = "nw_flow_replay_disconnected";
          v39 = 2082;
          v40 = (void *)v11;
          v41 = 2082;
          v42 = "flow";
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

      }
LABEL_17:

      return;
    }
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_flow_replay_disconnected";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v20, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_flow_replay_disconnected";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_flow_replay_disconnected";
            v39 = 2082;
            v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v21, v27, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_53;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_flow_replay_disconnected";
          _os_log_impl(&dword_182FBE000, v21, v27, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_flow_replay_disconnected";
          _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_53:
    if (v20)
      free(v20);
    goto LABEL_17;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v38 = "nw_flow_replay_disconnected";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (__nwlog_fault(v16, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_flow_replay_disconnected";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v35)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v17, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_flow_replay_disconnected";
          v39 = 2082;
          v40 = v23;
          _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_48;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_flow_replay_disconnected";
        _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_flow_replay_disconnected";
        _os_log_impl(&dword_182FBE000, v17, v29, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_48:
  if (v16)
    free(v16);
}

void sub_18350A568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL27nw_flow_replay_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 node;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t *v7;

  v7 = (uint64_t *)nw_endpoint_handler_copy_flow(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
  if (v7)
  {
    v2 = v7[83];
    if (v2)
    {
      node = nw_hash_table_get_node(v7[83], *(_QWORD *)(a1 + 40), 0);
      if (node)
      {
        nw_hash_table_remove_node(v2, node);
        v4 = *(_QWORD *)(a1 + 40);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 24);
          if (v5)
          {
            v6 = *(void (**)(void))(v5 + 8);
            if (v6)
              v6();
          }
        }
      }
    }
  }

}

void sub_18350A618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_flow_replay_unregister_notificationP11nw_protocolS0_31nw_protocol_notification_type_t_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v3;
  void (*v4)(void);

  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v3 = *(_QWORD *)(object + 24);
    if (v3)
    {
      v4 = *(void (**)(void))(v3 + 152);
      if (v4)
        v4();
    }
  }
  return 0;
}

uint64_t ___ZL36nw_flow_replay_register_notificationP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v3;
  void (*v4)(void);

  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v3 = *(_QWORD *)(object + 24);
    if (v3)
    {
      v4 = *(void (**)(void))(v3 + 144);
      if (v4)
        v4();
    }
  }
  return 0;
}

uint64_t ___ZL37nw_flow_replay_get_message_propertiesP11nw_protocolS0_P30nw_protocol_message_properties_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v3;
  void (*v4)(void);

  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v3 = *(_QWORD *)(object + 24);
    if (v3)
    {
      v4 = *(void (**)(void))(v3 + 248);
      if (v4)
        v4();
    }
  }
  return 0;
}

uint64_t ___ZL25nw_flow_replay_disconnectP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v3;
  void (*v4)(void);

  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v3 = *(_QWORD *)(object + 24);
    if (v3)
    {
      v4 = *(void (**)(void))(v3 + 32);
      if (v4)
        v4();
    }
  }
  return 1;
}

uint64_t ___ZL22nw_flow_replay_connectP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v3;
  void (*v4)(void);

  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v3 = *(_QWORD *)(object + 24);
    if (v3)
    {
      v4 = *(void (**)(void))(v3 + 24);
      if (v4)
        v4();
    }
  }
  return 1;
}

uint64_t ___ZL27nw_flow_replay_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v3;
  void (*v4)(void);

  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v3 = *(_QWORD *)(object + 24);
    if (v3)
    {
      v4 = *(void (**)(void))(v3 + 168);
      if (v4)
        v4();
    }
  }
  return 1;
}

uint64_t ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v13[2];
  BOOL (*v14)(uint64_t, void *);
  void *v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  int v22;

  v3 = a2;
  if (nw_frame_get_finalizer_context((uint64_t)v3) == *(_QWORD *)(a1 + 48))
  {
    v4 = v3[4];
    v5 = (_QWORD *)v3[5];
    if (v4)
    {
      *(_QWORD *)(v4 + 40) = v5;
      v5 = (_QWORD *)v3[5];
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
    }
    *v5 = v4;
    v3[4] = 0;
    v3[5] = 0;
    v21[0] = 0;
    v21[1] = v21;
    v22 = 0;
    v21[2] = 0x2020000000;
    v6 = *(_QWORD *)(a1 + 48);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v14 = ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2;
    v15 = &unk_1E149C998;
    v18 = v21;
    v20 = v6;
    v16 = v3;
    v7 = *(id *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v17 = v7;
    v19 = v8;
    v9 = *(_QWORD *)(v6 + 296);
    do
    {
      if (!v9)
        break;
      v10 = *(_QWORD *)(v9 + 16);
      v11 = ((uint64_t (*)(_QWORD *))v14)(v13);
      v9 = v10;
    }
    while ((v11 & 1) != 0);

    _Block_object_dispose(v21, 8);
  }

  return 1;
}

BOOL ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  id v11;
  const char *v12;
  const char *v13;
  nw_endpoint_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  id v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  nw_endpoint_t v24;
  const char *v25;
  const char *v26;
  const char *v27;
  id v28;
  _BOOL8 v29;
  const char *backtrace_string;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  id v41;
  os_log_type_t v42;
  const char *v43;
  const char *v44;
  nw_endpoint_t v45;
  const char *v46;
  const char *v47;
  const char *v48;
  id v49;
  os_log_type_t v50;
  const char *v51;
  const char *v52;
  nw_endpoint_t v53;
  const char *v54;
  const char *v55;
  const char *v56;
  id v57;
  int v58;
  char logging_disabled;
  NSObject *v60;
  const char *v61;
  nw_endpoint_t v62;
  const char *logging_description;
  const char *v64;
  const char *v65;
  id v66;
  int v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  NSObject *log;
  NSObject *loga;
  NSObject *logb;
  NSObject *logc;
  nw_endpoint_t v76;
  int v77;
  const char *id_string;
  id v79;
  id v80;
  char v81;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  const char *v90;
  __int16 v91;
  const char *v92;
  __int16 v93;
  const char *v94;
  __int16 v95;
  id v96;
  __int16 v97;
  char *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(_DWORD *)(v5 + 24);
  v6 = (int *)(v5 + 24);
  v7 = v8;
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 328);
  if (v8 != v9)
  {
    v10 = v7;
LABEL_19:
    *v6 = v10 + 1;
    goto LABEL_20;
  }
  if (*(id *)(a1 + 32) == v3)
  {
    if (gLogDatapath)
    {
      v80 = v3;
      v58 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 328);
      logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40));
      v9 = v58;
      v4 = v80;
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v60 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          v61 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          v62 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          logging_description = nw_endpoint_get_logging_description(v62);
          v64 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          v65 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          v66 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          v67 = nw_frame_unclaimed_length(*(_DWORD **)(a1 + 32));
          *(_DWORD *)buf = 136448002;
          v84 = "nw_flow_replay_finalize_output_frames_block_invoke_2";
          v85 = 2082;
          v86 = id_string;
          v87 = 2082;
          v88 = v61;
          v89 = 2082;
          v90 = logging_description;
          v91 = 2082;
          v92 = v64;
          v93 = 2082;
          v94 = v65;
          v95 = 2114;
          v96 = v66;
          v97 = 1024;
          LODWORD(v98) = v67;
          _os_log_impl(&dword_182FBE000, v60, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received %u early bytes for fast open", buf, 0x4Eu);

        }
        v4 = v80;
        v9 = v58;
      }
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    v6 = (int *)(*(_QWORD *)(a1 + 64) + 328);
    v10 = *v6;
    goto LABEL_19;
  }
  v77 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 328);
  v79 = v3;
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v11 = (id)gconnectionLogObj;
    v12 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
    v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
    v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
    v15 = nw_endpoint_get_logging_description(v14);
    v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
    v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
    v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
    *(_DWORD *)buf = 136447746;
    v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
    v85 = 2082;
    v86 = v12;
    v87 = 2082;
    v88 = v13;
    v89 = 2082;
    v90 = v15;
    v91 = 2082;
    v92 = v16;
    v93 = 2082;
    v94 = v17;
    v95 = 2114;
    v96 = v18;
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if ((__nwlog_fault(v19, &type, &v81) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v20 = (id)gconnectionLogObj;
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          v22 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          v23 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          log = v20;
          v24 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          v68 = v19;
          v25 = nw_endpoint_get_logging_description(v24);
          v26 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          v27 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          v28 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136447746;
          v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
          v85 = 2082;
          v86 = v22;
          v87 = 2082;
          v88 = v23;
          v89 = 2082;
          v90 = v25;
          v91 = 2082;
          v92 = v26;
          v93 = 2082;
          v94 = v27;
          v95 = 2114;
          v96 = v28;
          v20 = log;
          _os_log_impl(&dword_182FBE000, log, v21, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame", buf, 0x48u);

          v19 = v68;
        }
      }
      else if (v81)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          v32 = (char *)backtrace_string;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v33 = (id)gconnectionLogObj;
          v34 = type;
          if (os_log_type_enabled(v33, type))
          {
            v35 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
            v36 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
            loga = v33;
            v37 = v35;
            v69 = v19;
            v76 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
            v38 = nw_endpoint_get_logging_description(v76);
            v39 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
            v40 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
            v41 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
            *(_DWORD *)buf = 136448002;
            v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
            v85 = 2082;
            v86 = v37;
            v87 = 2082;
            v88 = v36;
            v89 = 2082;
            v90 = v38;
            v91 = 2082;
            v92 = v39;
            v93 = 2082;
            v94 = v40;
            v95 = 2114;
            v96 = v41;
            v97 = 2082;
            v98 = v32;
            v33 = loga;
            _os_log_impl(&dword_182FBE000, loga, v34, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame, dumping backtrace:%{public}s", buf, 0x52u);

            v19 = v69;
          }

          free(v32);
          if (!v19)
            goto LABEL_16;
          goto LABEL_15;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v20 = (id)gconnectionLogObj;
        v50 = type;
        if (os_log_type_enabled(v20, type))
        {
          v51 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          v52 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          logc = v20;
          v53 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          v71 = v19;
          v54 = nw_endpoint_get_logging_description(v53);
          v55 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          v56 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          v57 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136447746;
          v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
          v85 = 2082;
          v86 = v51;
          v87 = 2082;
          v88 = v52;
          v89 = 2082;
          v90 = v54;
          v91 = 2082;
          v92 = v55;
          v93 = 2082;
          v94 = v56;
          v95 = 2114;
          v96 = v57;
          v20 = logc;
          _os_log_impl(&dword_182FBE000, logc, v50, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame, no backtrace", buf, 0x48u);

          v19 = v71;
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v20 = (id)gconnectionLogObj;
        v42 = type;
        if (os_log_type_enabled(v20, type))
        {
          v43 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          v44 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          logb = v20;
          v45 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          v70 = v19;
          v46 = nw_endpoint_get_logging_description(v45);
          v47 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          v48 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          v49 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136447746;
          v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
          v85 = 2082;
          v86 = v43;
          v87 = 2082;
          v88 = v44;
          v89 = 2082;
          v90 = v46;
          v91 = 2082;
          v92 = v47;
          v93 = 2082;
          v94 = v48;
          v95 = 2114;
          v96 = v49;
          v20 = logb;
          _os_log_impl(&dword_182FBE000, logb, v42, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame, backtrace limit exceeded", buf, 0x48u);

          v19 = v70;
        }
      }

    }
    if (v19)
LABEL_15:
      free(v19);
  }
LABEL_16:
  nw_frame_finalize(*(_QWORD *)(a1 + 32));
  v4 = v79;
  v9 = v77;
LABEL_20:
  v29 = v7 != v9;

  return v29;
}

void sub_18350B180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void nw_flow_replay_frame_finalizer(void *a1, uint64_t a2, uint64_t a3)
{
  void *buffer;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v7 = a1;
  buffer = (void *)nw_frame_get_buffer((uint64_t)v7, 0);
  if (buffer)
    free(buffer);
  v5 = v7[2];
  v6 = (_QWORD *)v7[3];
  if (v5)
  {
    *(_QWORD *)(v5 + 24) = v6;
    v6 = (_QWORD *)v7[3];
  }
  else
  {
    *(_QWORD *)(a3 + 304) = v6;
  }
  *v6 = v5;
  v7[2] = 0;
  v7[3] = 0;

}

BOOL ___ZL56nw_flow_replay_selected_candidate_has_early_data_to_sendP16nw_flow_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  _DWORD *extra;
  uint64_t v6;
  uint64_t v7;

  object = nw_hash_node_get_object(a2);
  extra = (_DWORD *)nw_hash_node_get_extra(a2);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(v6 + 128);
  if (object == v7 && *extra < *(_DWORD *)(v6 + 328))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return object != v7;
}

uint64_t ___ZL35nw_flow_replay_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD);

  object = nw_hash_node_get_object(a2);
  nw_hash_table_remove_node(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 288), a2);
  if (object)
  {
    v5 = *(_QWORD *)(object + 24);
    if (v5)
    {
      v6 = *(void (**)(uint64_t, _QWORD, _QWORD))(v5 + 8);
      if (v6)
        v6(object, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
    }
  }
  return 1;
}

NWConcrete_nw_endpoint_flow *nw_flow_copy_flow_divert_endpoint(NWConcrete_nw_endpoint_flow *a1)
{
  NWConcrete_nw_endpoint_flow *v2;

  if (a1)
    v2 = a1;
  return a1;
}

uint64_t ___ZL17nw_flow_connectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 1;
}

void ___ZL17nw_flow_connectedP11nw_protocolS0__block_invoke_97(uint64_t a1)
{
  _WORD *v2;
  _DWORD *v3;
  id v4;

  nw_endpoint_handler_handle_failure(*(void **)(a1 + 32));
  v2 = *(_WORD **)(a1 + 32);
  v3 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 50);
  *((_DWORD *)v2 + 20) = 589825;
  v4 = v3;
  nw_endpoint_handler_report(v2, 0, v2 + 40, v3);

}

void sub_18350B468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL26nw_flow_passthrough_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1, NWConcrete_nw_endpoint_handler *a2)
{
  NWConcrete_nw_endpoint_mode_handler *v3;
  NWConcrete_nw_endpoint_mode_handler *v4;
  id v5;
  const char *id_string;
  const char *v7;
  nw_endpoint_t v8;
  const char *logging_description;
  const char *v10;
  const char *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  const char *v17;
  nw_endpoint_t v18;
  const char *v19;
  const char *v20;
  const char *v21;
  id v22;
  const char *backtrace_string;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  nw_endpoint_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  id v32;
  os_log_type_t v33;
  const char *v34;
  const char *v35;
  nw_endpoint_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  id v40;
  os_log_type_t v41;
  const char *v42;
  const char *v43;
  nw_endpoint_t v44;
  const char *v45;
  const char *v46;
  const char *v47;
  id v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  const char *v53;
  char v54;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  id v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = nw_endpoint_handler_copy_flow(a2);
  v4 = v3;
  if (v3)
  {
    nw_protocol_notify((_QWORD *)v3 + 47, *(_QWORD *)(a1 + 40), 22);
    goto LABEL_15;
  }
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) != 0)
    goto LABEL_15;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v5 = (id)gconnectionLogObj;
  id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
  v7 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
  v8 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
  logging_description = nw_endpoint_get_logging_description(v8);
  v10 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
  v11 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
  v12 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
  *(_DWORD *)buf = 136448002;
  v57 = "nw_flow_passthrough_notify_block_invoke";
  v58 = 2082;
  v59 = id_string;
  v60 = 2082;
  v61 = v7;
  v62 = 2082;
  v63 = logging_description;
  v64 = 2082;
  v65 = v10;
  v66 = 2082;
  v67 = v11;
  v68 = 2114;
  v69 = v12;
  v70 = 2048;
  v71 = 0;
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v54 = 0;
  if ((__nwlog_fault(v13, &type, &v54) & 1) == 0)
    goto LABEL_13;
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = (id)gconnectionLogObj;
    v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      v16 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v17 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v18 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      v49 = v13;
      v19 = nw_endpoint_get_logging_description(v18);
      v20 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v21 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v22 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136448002;
      v57 = "nw_flow_passthrough_notify_block_invoke";
      v58 = 2082;
      v59 = v16;
      v60 = 2082;
      v61 = v17;
      v62 = 2082;
      v63 = v19;
      v64 = 2082;
      v65 = v20;
      v66 = 2082;
      v67 = v21;
      v68 = 2114;
      v69 = v22;
      v70 = 2048;
      v71 = 0;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol", buf, 0x52u);

      v13 = v49;
    }
LABEL_12:

LABEL_13:
    if (!v13)
      goto LABEL_15;
LABEL_14:
    free(v13);
    goto LABEL_15;
  }
  if (!v54)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = (id)gconnectionLogObj;
    v33 = type;
    if (os_log_type_enabled(v14, type))
    {
      v34 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v35 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v36 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      v51 = v13;
      v37 = nw_endpoint_get_logging_description(v36);
      v38 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v39 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v40 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136448002;
      v57 = "nw_flow_passthrough_notify_block_invoke";
      v58 = 2082;
      v59 = v34;
      v60 = 2082;
      v61 = v35;
      v62 = 2082;
      v63 = v37;
      v64 = 2082;
      v65 = v38;
      v66 = 2082;
      v67 = v39;
      v68 = 2114;
      v69 = v40;
      v70 = 2048;
      v71 = 0;
      _os_log_impl(&dword_182FBE000, v14, v33, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, backtrace limit exceeded", buf, 0x52u);

      v13 = v51;
    }
    goto LABEL_12;
  }
  backtrace_string = __nw_create_backtrace_string();
  if (!backtrace_string)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = (id)gconnectionLogObj;
    v41 = type;
    if (os_log_type_enabled(v14, type))
    {
      v42 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v43 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v44 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      v52 = v13;
      v45 = nw_endpoint_get_logging_description(v44);
      v46 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v47 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v48 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136448002;
      v57 = "nw_flow_passthrough_notify_block_invoke";
      v58 = 2082;
      v59 = v42;
      v60 = 2082;
      v61 = v43;
      v62 = 2082;
      v63 = v45;
      v64 = 2082;
      v65 = v46;
      v66 = 2082;
      v67 = v47;
      v68 = 2114;
      v69 = v48;
      v70 = 2048;
      v71 = 0;
      _os_log_impl(&dword_182FBE000, v14, v41, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, no backtrace", buf, 0x52u);

      v13 = v52;
    }
    goto LABEL_12;
  }
  v24 = (char *)backtrace_string;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v25 = (id)gconnectionLogObj;
  v26 = type;
  if (os_log_type_enabled(v25, type))
  {
    v27 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
    v53 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
    v28 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
    v50 = v13;
    v29 = nw_endpoint_get_logging_description(v28);
    v30 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
    v31 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
    v32 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
    *(_DWORD *)buf = 136448258;
    v57 = "nw_flow_passthrough_notify_block_invoke";
    v58 = 2082;
    v59 = v27;
    v60 = 2082;
    v61 = v53;
    v62 = 2082;
    v63 = v29;
    v64 = 2082;
    v65 = v30;
    v66 = 2082;
    v67 = v31;
    v68 = 2114;
    v69 = v32;
    v70 = 2048;
    v71 = 0;
    v72 = 2082;
    v73 = v24;
    _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, dumping backtrace:%{public}s", buf, 0x5Cu);

    v13 = v50;
  }

  free(v24);
  if (v13)
    goto LABEL_14;
LABEL_15:

}

void sub_18350BB60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_91(uint64_t a1, NWConcrete_nw_endpoint_handler *a2)
{
  NWConcrete_nw_endpoint_mode_handler *v3;
  NWConcrete_nw_endpoint_mode_handler *v4;
  id v5;
  const char *id_string;
  const char *v7;
  nw_endpoint_t v8;
  const char *logging_description;
  const char *v10;
  const char *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  const char *v17;
  nw_endpoint_t v18;
  const char *v19;
  const char *v20;
  const char *v21;
  id v22;
  const char *backtrace_string;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  nw_endpoint_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  id v32;
  os_log_type_t v33;
  const char *v34;
  const char *v35;
  nw_endpoint_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  id v40;
  os_log_type_t v41;
  const char *v42;
  const char *v43;
  nw_endpoint_t v44;
  const char *v45;
  const char *v46;
  const char *v47;
  id v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  const char *v53;
  char v54;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  id v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = nw_endpoint_handler_copy_flow(a2);
  v4 = v3;
  if (v3)
  {
    nw_protocol_notify((_QWORD *)v3 + 47, *(_QWORD *)(a1 + 40), 22);
    goto LABEL_15;
  }
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) != 0)
    goto LABEL_15;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v5 = (id)gconnectionLogObj;
  id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
  v7 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
  v8 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
  logging_description = nw_endpoint_get_logging_description(v8);
  v10 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
  v11 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
  v12 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
  *(_DWORD *)buf = 136448002;
  v57 = "nw_flow_notify_block_invoke";
  v58 = 2082;
  v59 = id_string;
  v60 = 2082;
  v61 = v7;
  v62 = 2082;
  v63 = logging_description;
  v64 = 2082;
  v65 = v10;
  v66 = 2082;
  v67 = v11;
  v68 = 2114;
  v69 = v12;
  v70 = 2048;
  v71 = 0;
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v54 = 0;
  if ((__nwlog_fault(v13, &type, &v54) & 1) == 0)
    goto LABEL_13;
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = (id)gconnectionLogObj;
    v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      v16 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v17 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v18 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      v49 = v13;
      v19 = nw_endpoint_get_logging_description(v18);
      v20 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v21 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v22 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136448002;
      v57 = "nw_flow_notify_block_invoke";
      v58 = 2082;
      v59 = v16;
      v60 = 2082;
      v61 = v17;
      v62 = 2082;
      v63 = v19;
      v64 = 2082;
      v65 = v20;
      v66 = 2082;
      v67 = v21;
      v68 = 2114;
      v69 = v22;
      v70 = 2048;
      v71 = 0;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol", buf, 0x52u);

      v13 = v49;
    }
LABEL_12:

LABEL_13:
    if (!v13)
      goto LABEL_15;
LABEL_14:
    free(v13);
    goto LABEL_15;
  }
  if (!v54)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = (id)gconnectionLogObj;
    v33 = type;
    if (os_log_type_enabled(v14, type))
    {
      v34 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v35 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v36 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      v51 = v13;
      v37 = nw_endpoint_get_logging_description(v36);
      v38 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v39 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v40 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136448002;
      v57 = "nw_flow_notify_block_invoke";
      v58 = 2082;
      v59 = v34;
      v60 = 2082;
      v61 = v35;
      v62 = 2082;
      v63 = v37;
      v64 = 2082;
      v65 = v38;
      v66 = 2082;
      v67 = v39;
      v68 = 2114;
      v69 = v40;
      v70 = 2048;
      v71 = 0;
      _os_log_impl(&dword_182FBE000, v14, v33, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, backtrace limit exceeded", buf, 0x52u);

      v13 = v51;
    }
    goto LABEL_12;
  }
  backtrace_string = __nw_create_backtrace_string();
  if (!backtrace_string)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = (id)gconnectionLogObj;
    v41 = type;
    if (os_log_type_enabled(v14, type))
    {
      v42 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v43 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v44 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      v52 = v13;
      v45 = nw_endpoint_get_logging_description(v44);
      v46 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v47 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v48 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136448002;
      v57 = "nw_flow_notify_block_invoke";
      v58 = 2082;
      v59 = v42;
      v60 = 2082;
      v61 = v43;
      v62 = 2082;
      v63 = v45;
      v64 = 2082;
      v65 = v46;
      v66 = 2082;
      v67 = v47;
      v68 = 2114;
      v69 = v48;
      v70 = 2048;
      v71 = 0;
      _os_log_impl(&dword_182FBE000, v14, v41, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, no backtrace", buf, 0x52u);

      v13 = v52;
    }
    goto LABEL_12;
  }
  v24 = (char *)backtrace_string;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v25 = (id)gconnectionLogObj;
  v26 = type;
  if (os_log_type_enabled(v25, type))
  {
    v27 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
    v53 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
    v28 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
    v50 = v13;
    v29 = nw_endpoint_get_logging_description(v28);
    v30 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
    v31 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
    v32 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
    *(_DWORD *)buf = 136448258;
    v57 = "nw_flow_notify_block_invoke";
    v58 = 2082;
    v59 = v27;
    v60 = 2082;
    v61 = v53;
    v62 = 2082;
    v63 = v29;
    v64 = 2082;
    v65 = v30;
    v66 = 2082;
    v67 = v31;
    v68 = 2114;
    v69 = v32;
    v70 = 2048;
    v71 = 0;
    v72 = 2082;
    v73 = v24;
    _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol, dumping backtrace:%{public}s", buf, 0x5Cu);

    v13 = v50;
  }

  free(v24);
  if (v13)
    goto LABEL_14;
LABEL_15:

}

void sub_18350C2D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_trainer_bottom_inject_input(uint64_t a1, NSObject *a2, int a3, const void *a4, size_t size, char a6)
{
  uint64_t v7;
  void *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _BOOL8 result;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *v29;
  _BOOL4 v30;
  const char *v31;
  NSObject *v32;
  void *v33;
  _BOOL4 v34;
  char *backtrace_string;
  _BOOL4 v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      v12 = 0;
      v13 = 0;
      if (a4)
      {
        v14 = size;
        if ((_DWORD)size)
        {
          v12 = malloc_type_malloc(size, 0xF2B69DE5uLL);
          if (!v12)
          {
            v32 = __nwlog_obj();
            os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            v40 = "strict_malloc";
            v41 = 2048;
            v42 = (char *)v14;
            v33 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v33);
            if (result)
            {
              __break(1u);
              return result;
            }
            free(v33);
          }
          memcpy(v12, a4, v14);
          v13 = v14;
        }
      }
      v15 = nw_frame_create(0, (uint64_t)v12, v13, (uint64_t)nw_protocol_trainer_frame_finalizer, a1);
      v16 = v15;
      if (a2)
        nw_frame_set_metadata(v15, a2, 1, a3);
      if (v12)
        nw_frame_set_buffer_used_malloc(v16, 1);
      if (v16)
      {
        *(_BYTE *)(v16 + 186) = *(_BYTE *)(v16 + 186) & 0xFC | a6 & 3;
        *(_QWORD *)(v16 + 16) = 0;
        v17 = *(uint64_t **)(v7 + 80);
        *(_QWORD *)(v16 + 24) = v17;
        *v17 = v16;
        *(_QWORD *)(v7 + 80) = v16 + 16;
        *(_QWORD *)(v16 + 32) = 0;
        v18 = v16 + 32;
        v19 = *(uint64_t **)(v7 + 96);
        *(_QWORD *)(v16 + 40) = v19;
        *v19 = v16;
LABEL_13:
        *(_QWORD *)(v7 + 96) = v18;
        return 1;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_frame_set_ecn_flag";
      v25 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (__nwlog_fault(v25, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v26 = __nwlog_obj();
          v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            v40 = "__nw_frame_set_ecn_flag";
            v28 = "%{public}s called with null frame";
LABEL_60:
            _os_log_impl(&dword_182FBE000, v26, v27, v28, buf, 0xCu);
          }
        }
        else if (v37)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          v26 = __nwlog_obj();
          v27 = type;
          v36 = os_log_type_enabled(v26, type);
          if (backtrace_string)
          {
            if (v36)
            {
              *(_DWORD *)buf = 136446466;
              v40 = "__nw_frame_set_ecn_flag";
              v41 = 2082;
              v42 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_61;
          }
          if (v36)
          {
            *(_DWORD *)buf = 136446210;
            v40 = "__nw_frame_set_ecn_flag";
            v28 = "%{public}s called with null frame, no backtrace";
            goto LABEL_60;
          }
        }
        else
        {
          v26 = __nwlog_obj();
          v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            v40 = "__nw_frame_set_ecn_flag";
            v28 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_60;
          }
        }
      }
LABEL_61:
      if (v25)
        free(v25);
      MEMORY[0x10] = 0;
      MEMORY[0x18] = *(_QWORD *)(v7 + 80);
      *MEMORY[0x18] = 0;
      *(_QWORD *)(v7 + 80) = 16;
      v18 = 32;
      MEMORY[0x20] = 0;
      MEMORY[0x28] = *(_QWORD *)(v7 + 96);
      *MEMORY[0x28] = 0;
      goto LABEL_13;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_protocol_trainer_bottom_inject_input";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v21, &type, &v37))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_trainer_bottom_inject_input";
        v24 = "%{public}s called with null trainer";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (!v37)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_trainer_bottom_inject_input";
        v24 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    v29 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v34 = os_log_type_enabled(v22, type);
    if (!v29)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_trainer_bottom_inject_input";
        v24 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_protocol_trainer_bottom_inject_input";
      v41 = 2082;
      v42 = v29;
      v31 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_protocol_trainer_bottom_inject_input";
  v21 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v21, &type, &v37))
    goto LABEL_55;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v37)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_trainer_bottom_inject_input";
        v24 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    v29 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v30 = os_log_type_enabled(v22, type);
    if (!v29)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_trainer_bottom_inject_input";
        v24 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_protocol_trainer_bottom_inject_input";
      v41 = 2082;
      v42 = v29;
      v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
      _os_log_impl(&dword_182FBE000, v22, v23, v31, buf, 0x16u);
    }
LABEL_38:
    free(v29);
    goto LABEL_55;
  }
  v22 = __nwlog_obj();
  v23 = type;
  if (os_log_type_enabled(v22, type))
  {
    *(_DWORD *)buf = 136446210;
    v40 = "nw_protocol_trainer_bottom_inject_input";
    v24 = "%{public}s called with null protocol";
LABEL_54:
    _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
  }
LABEL_55:
  if (v21)
    free(v21);
  return 0;
}

void nw_protocol_trainer_frame_finalizer(nw_frame *a1, BOOL a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_trainer_frame_finalizer";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_trainer_frame_finalizer";
      v10 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_trainer_frame_finalizer";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_35:
        if (!v7)
          return;
        goto LABEL_36;
      }
      if (!v12)
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_trainer_frame_finalizer";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_trainer_frame_finalizer";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_34:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_35;
  }
  v3 = a3[5];
  if (v3)
  {
    nw_frame_free_buffer((uint64_t)a1);
    nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
    v5 = *((_QWORD *)a1 + 2);
    v6 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (v5)
    {
      *(_QWORD *)(v5 + 24) = v6;
      v6 = (_QWORD *)*((_QWORD *)a1 + 3);
    }
    else
    {
      *(_QWORD *)(v3 + 80) = v6;
    }
    *v6 = v5;
    *((_QWORD *)a1 + 2) = 0;
    *((_QWORD *)a1 + 3) = 0;
    os_release(a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_trainer_frame_finalizer";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15))
    goto LABEL_35;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_35;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_trainer_frame_finalizer";
    v10 = "%{public}s called with null trainer";
    goto LABEL_34;
  }
  if (!v15)
  {
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_35;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_trainer_frame_finalizer";
    v10 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_34;
  }
  v13 = (char *)__nw_create_backtrace_string();
  v8 = __nwlog_obj();
  v9 = type;
  v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14)
      goto LABEL_35;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_trainer_frame_finalizer";
    v10 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_34;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_protocol_trainer_frame_finalizer";
    v19 = 2082;
    v20 = v13;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7)
LABEL_36:
    free(v7);
}

uint64_t nw_protocol_trainer_bottom_notify_input(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  void (*v4)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_trainer_bottom_notify_input";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_33;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v13)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_trainer_bottom_notify_input";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10)
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_trainer_bottom_notify_input";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_32;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_protocol_trainer_bottom_notify_input";
        v17 = 2082;
        v18 = backtrace_string;
        v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_22:
        _os_log_impl(&dword_182FBE000, v6, v7, v11, buf, 0x16u);
      }
LABEL_23:
      free(backtrace_string);
      goto LABEL_33;
    }
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_33;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_trainer_bottom_notify_input";
    v8 = "%{public}s called with null protocol";
LABEL_32:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
LABEL_33:
    if (v5)
      free(v5);
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_trainer_bottom_notify_input";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_trainer_bottom_notify_input";
      v8 = "%{public}s called with null trainer";
      goto LABEL_32;
    }
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_trainer_bottom_notify_input";
      v8 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v12 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_protocol_trainer_bottom_notify_input";
        v17 = 2082;
        v18 = backtrace_string;
        v11 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (!v12)
      goto LABEL_33;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_trainer_bottom_notify_input";
    v8 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_32;
  }
  *(_DWORD *)(v2 + 188) = a2;
  result = *(_QWORD *)(a1 + 48);
  if (!result)
    return result;
  v4 = *(void (**)(void))(*(_QWORD *)(result + 24) + 64);
  if (v4)
  {
    v4();
    return 1;
  }
  return 0;
}

uint64_t nw_protocol_trainer_bottom_check_output(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  const char *v19;
  _BOOL4 v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  void *object;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 136);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3802000000;
      v25 = __Block_byref_object_copy__17310;
      v26 = __Block_byref_object_dispose__17311;
      object = 0;
      v28 = -1;
      if (v3)
      {
        if (!*(_QWORD *)(v3 + 112)
          || (*(_WORD *)(v3 + 204) & 0x100) != 0
          && g_channel_check_validity
          && !g_channel_check_validity(v3, *(_QWORD *)(v3 + 88)))
        {
          v7 = 0;
          v9 = 0;
        }
        else
        {
          v6 = *(_DWORD *)(v3 + 52);
          v5 = *(unsigned int *)(v3 + 56);
          if (v6)
            v7 = (v6 - (v5 + *(_DWORD *)(v3 + 60)));
          else
            v7 = 0;
          v9 = *(_QWORD *)(v3 + 112) + v5;
        }
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 0x40000000;
        v21[2] = __nw_protocol_trainer_bottom_check_output_block_invoke;
        v21[3] = &unk_1E149CA48;
        v21[4] = buf;
        nw_frame_foreach_protocol_metadata(v3, 0, (uint64_t)v21);
        v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)&buf[8] + 40), v9, v7);
        v10 = *(_QWORD *)(v3 + 32);
        v11 = *(_QWORD **)(v3 + 40);
        if (v10)
        {
          *(_QWORD *)(v10 + 40) = v11;
          v11 = *(_QWORD **)(v3 + 40);
        }
        else
        {
          *(_QWORD *)(v2 + 144) = v11;
        }
        *v11 = v10;
        *(_QWORD *)(v3 + 32) = 0;
        *(_QWORD *)(v3 + 40) = 0;
        nw_frame_finalize(v3);
      }
      else
      {
        v8 = 0;
      }
      _Block_object_dispose(buf, 8);
      if ((v28 & 1) != 0 && object)
        os_release(object);
      return v8;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v13, &type, &v22))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
        v16 = "%{public}s called with null trainer";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v22)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
        v16 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
        v16 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v19 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v13, &type, &v22))
    goto LABEL_49;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v22)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
        v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v18 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
        v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_38:
      _os_log_impl(&dword_182FBE000, v14, v15, v19, buf, 0x16u);
    }
LABEL_39:
    free(backtrace_string);
    goto LABEL_49;
  }
  v14 = __nwlog_obj();
  v15 = type;
  if (os_log_type_enabled(v14, type))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_check_output";
    v16 = "%{public}s called with null protocol";
LABEL_48:
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
  }
LABEL_49:
  if (v13)
    free(v13);
  return 0;
}

uint64_t __Block_byref_object_copy__17310(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__17311(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t __nw_protocol_trainer_bottom_check_output_block_invoke(uint64_t a1, void *object)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  char v7;
  void *v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (!v4)
  {
    v5 = nw_array_create();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(_BYTE *)(v6 + 48);
    if ((v7 & 1) != 0)
    {
      v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        v7 = *(_BYTE *)(v6 + 48);
      }
    }
    *(_QWORD *)(v6 + 40) = v5;
    *(_BYTE *)(v6 + 48) = v7 | 1;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  nw_array_append(v4, object);
  return 1;
}

uint64_t nw_protocol_trainer_top_check_input(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  const char *v18;
  _BOOL4 v19;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  void *object;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22))
      goto LABEL_46;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        v13 = __nwlog_obj();
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
        v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v17 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (!v17)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
        v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v18 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
        _os_log_impl(&dword_182FBE000, v13, v14, v18, buf, 0x16u);
      }
LABEL_36:
      free(backtrace_string);
      goto LABEL_46;
    }
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
    v15 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
LABEL_46:
    if (v12)
      free(v12);
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
      v15 = "%{public}s called with null trainer";
      goto LABEL_45;
    }
    if (!v22)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
      v15 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v19 = os_log_type_enabled(v13, type);
    if (backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v18 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v19)
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_check_input";
    v15 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_45;
  }
  v3 = *(_QWORD *)(v2 + 120);
  if (!v3)
    return 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3802000000;
  v25 = __Block_byref_object_copy__17310;
  v26 = __Block_byref_object_dispose__17311;
  object = 0;
  v28 = -1;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 0x40000000;
  v21[2] = __nw_protocol_trainer_top_check_input_block_invoke;
  v21[3] = &unk_1E149CA70;
  v21[4] = buf;
  nw_frame_foreach_protocol_metadata(v3, 0, (uint64_t)v21);
  if (!*(_QWORD *)(v3 + 112)
    || (*(_WORD *)(v3 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(v3, *(_QWORD *)(v3 + 88)))
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 52);
    v5 = *(unsigned int *)(v3 + 56);
    if (v6)
      v7 = (v6 - (v5 + *(_DWORD *)(v3 + 60)));
    else
      v7 = 0;
    v8 = *(_QWORD *)(v3 + 112) + v5;
  }
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)&buf[8] + 40), v8, v7);
  v10 = *(_QWORD *)(v3 + 32);
  v11 = *(_QWORD **)(v3 + 40);
  if (v10)
  {
    *(_QWORD *)(v10 + 40) = v11;
    v11 = *(_QWORD **)(v3 + 40);
  }
  else
  {
    *(_QWORD *)(v2 + 128) = v11;
  }
  *v11 = v10;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  nw_frame_finalize(v3);
  _Block_object_dispose(buf, 8);
  if ((v28 & 1) != 0 && object)
    os_release(object);
  return v9;
}

uint64_t __nw_protocol_trainer_top_check_input_block_invoke(uint64_t a1, void *object)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  char v7;
  void *v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (!v4)
  {
    v5 = nw_array_create();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(_BYTE *)(v6 + 48);
    if ((v7 & 1) != 0)
    {
      v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        v7 = *(_BYTE *)(v6 + 48);
      }
    }
    *(_QWORD *)(v6 + 40) = v5;
    *(_BYTE *)(v6 + 48) = v7 | 1;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  nw_array_append(v4, object);
  return 1;
}

BOOL nw_protocol_trainer_top_inject_output(uint64_t a1, NSObject *a2, int a3, const void *a4, size_t size)
{
  uint64_t v6;
  void *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 result;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  const char *v24;
  NSObject *v25;
  void *v26;
  _BOOL4 v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_trainer_top_inject_output";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v18, &type, &v28))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_trainer_top_inject_output";
        v21 = "%{public}s called with null protocol";
LABEL_41:
        _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
      }
LABEL_42:
      if (v18)
        free(v18);
      return 0;
    }
    if (!v28)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_trainer_top_inject_output";
        v21 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = type;
    v23 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_trainer_top_inject_output";
        v21 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_protocol_trainer_top_inject_output";
      v32 = 2082;
      v33 = backtrace_string;
      v24 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v19, v20, v24, buf, 0x16u);
    }
LABEL_32:
    free(backtrace_string);
    goto LABEL_42;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_trainer_top_inject_output";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v18, &type, &v28))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_trainer_top_inject_output";
        v21 = "%{public}s called with null trainer";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (!v28)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_trainer_top_inject_output";
        v21 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = type;
    v27 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_trainer_top_inject_output";
        v21 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_protocol_trainer_top_inject_output";
      v32 = 2082;
      v33 = backtrace_string;
      v24 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  v10 = 0;
  v11 = 0;
  if (a4)
  {
    v12 = size;
    if ((_DWORD)size)
    {
      v10 = malloc_type_malloc(size, 0xF2B69DE5uLL);
      if (!v10)
      {
        v25 = __nwlog_obj();
        os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446466;
        v31 = "strict_malloc";
        v32 = 2048;
        v33 = (char *)v12;
        v26 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v26);
        if (result)
        {
          __break(1u);
          return result;
        }
        free(v26);
      }
      memcpy(v10, a4, v12);
      v11 = v12;
    }
  }
  v13 = nw_frame_create(0, (uint64_t)v10, v11, (uint64_t)nw_protocol_trainer_frame_finalizer, a1);
  v14 = (_QWORD *)v13;
  if (a2)
    nw_frame_set_metadata(v13, a2, 0, a3);
  if (v10)
    nw_frame_set_buffer_used_malloc((uint64_t)v14, 1);
  v14[2] = 0;
  v15 = *(_QWORD **)(v6 + 80);
  v14[3] = v15;
  *v15 = v14;
  *(_QWORD *)(v6 + 80) = v14 + 2;
  v14[4] = 0;
  v16 = *(_QWORD **)(v6 + 112);
  v14[5] = v16;
  *v16 = v14;
  *(_QWORD *)(v6 + 112) = v14 + 4;
  ++*(_DWORD *)(v6 + 192);
  return 1;
}

uint64_t nw_protocol_trainer_top_flush_output(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  _QWORD v18[2];
  uint64_t (*v19)(_QWORD *);
  void *v20;
  _BYTE *v21;
  os_log_type_t *v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t type[8];
  os_log_type_t *v26;
  char v27;
  _BYTE buf[24];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
    v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v10, type, &v27))
      goto LABEL_41;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v27)
      {
        v11 = __nwlog_obj();
        v12 = type[0];
        if (!os_log_type_enabled(v11, type[0]))
          goto LABEL_41;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
        v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_40;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type[0];
      v15 = os_log_type_enabled(v11, type[0]);
      if (!backtrace_string)
      {
        if (!v15)
          goto LABEL_41;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
        v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_40;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
        _os_log_impl(&dword_182FBE000, v11, v12, v16, buf, 0x16u);
      }
LABEL_31:
      free(backtrace_string);
      goto LABEL_41;
    }
    v11 = __nwlog_obj();
    v12 = type[0];
    if (!os_log_type_enabled(v11, type[0]))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
    v13 = "%{public}s called with null protocol";
LABEL_40:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
LABEL_41:
    if (v10)
      free(v10);
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
    v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v10, type, &v27))
      goto LABEL_41;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type[0];
      if (!os_log_type_enabled(v11, type[0]))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
      v13 = "%{public}s called with null trainer";
      goto LABEL_40;
    }
    if (!v27)
    {
      v11 = __nwlog_obj();
      v12 = type[0];
      if (!os_log_type_enabled(v11, type[0]))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
      v13 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type[0];
    v17 = os_log_type_enabled(v11, type[0]);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v16 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    if (!v17)
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_top_flush_output";
    v13 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_40;
  }
  if (!*(_DWORD *)(v2 + 192) || !*(_QWORD *)(v2 + 104))
    return 1;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 88);
    if (v5 && *(_QWORD *)(v4 + 96))
    {
      *(_QWORD *)type = 0;
      v26 = type;
      v5(v3, a1, 1, 0xFFFFFFFFLL);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v29 = 1;
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 0x40000000;
      v19 = (uint64_t (*)(_QWORD *))__nw_protocol_trainer_top_flush_output_block_invoke;
      v20 = &unk_1E149CAC0;
      v21 = buf;
      v22 = type;
      v23 = v2;
      v24 = a1;
      v6 = *(_QWORD *)type;
      do
      {
        if (!v6)
          break;
        v7 = *(_QWORD *)(v6 + 32);
        v8 = v19(v18);
        v6 = v7;
      }
      while ((v8 & 1) != 0);
      v3 = (*(uint64_t (**)(uint64_t, os_log_type_t *))(*(_QWORD *)(v3 + 24) + 96))(v3, type);
      _Block_object_dispose(buf, 8);
      return v3;
    }
    return 0;
  }
  return v3;
}

uint64_t __nw_protocol_trainer_top_flush_output_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *backtrace_string;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  os_log_type_t type;
  _QWORD v36[6];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v4 = *(_QWORD *)(a1[6] + 104);
    if (v4)
    {
      v41 = 0;
      v5 = (void *)nw_frame_unclaimed_bytes(a2, &v41);
      if (!*(_QWORD *)(v4 + 112)
        || (*(_WORD *)(v4 + 204) & 0x100) != 0
        && g_channel_check_validity
        && !g_channel_check_validity(v4, *(_QWORD *)(v4 + 88)))
      {
        v8 = 0;
        v11 = 0;
      }
      else
      {
        v7 = *(_DWORD *)(v4 + 52);
        v6 = *(unsigned int *)(v4 + 56);
        if (v7)
          v8 = v7 - (v6 + *(_DWORD *)(v4 + 60));
        else
          v8 = 0;
        v11 = (const void *)(*(_QWORD *)(v4 + 112) + v6);
      }
      v37 = 0;
      v38 = &v37;
      v39 = 0x2000000000;
      v40 = 0;
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 0x40000000;
      v36[2] = __nw_protocol_trainer_top_flush_output_block_invoke_2;
      v36[3] = &unk_1E149CA98;
      v36[4] = &v37;
      v36[5] = a2;
      nw_frame_foreach_protocol_metadata(v4, 0, (uint64_t)v36);
      if (!*((_BYTE *)v38 + 24) && (!v5 || !v11 || v41 < v8))
      {
        *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
        v24 = *(_QWORD *)(a2 + 32);
        v25 = *(_QWORD **)(a2 + 40);
        if (v24)
        {
          *(_QWORD *)(v24 + 40) = v25;
          v25 = *(_QWORD **)(a2 + 40);
        }
        else
        {
          *(_QWORD *)(a1[5] + 8) = v25;
        }
        *v25 = v24;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = 0;
        nw_frame_finalize(a2);
        v29 = *(_QWORD *)(v4 + 32);
        v30 = *(_QWORD **)(v4 + 40);
        if (v29)
        {
          *(_QWORD *)(v29 + 40) = v30;
          v30 = *(_QWORD **)(v4 + 40);
        }
        else
        {
          *(_QWORD *)(a1[6] + 112) = v30;
        }
        *v30 = v29;
        *(_QWORD *)(v4 + 32) = 0;
        *(_QWORD *)(v4 + 40) = 0;
LABEL_51:
        nw_frame_finalize(v4);
        _Block_object_dispose(&v37, 8);
        return 1;
      }
      if (v5 && v11)
      {
        memcpy(v5, v11, v8);
        nw_frame_claim(a2, v12, v8, 0);
        nw_frame_collapse(a2);
        nw_frame_unclaim(a2, v13, v8, 0);
      }
      v14 = *(_QWORD *)(v4 + 32);
      v15 = *(_QWORD **)(v4 + 40);
      if (v14)
      {
        *(_QWORD *)(v14 + 40) = v15;
        v15 = *(_QWORD **)(v4 + 40);
      }
      else
      {
        *(_QWORD *)(a1[6] + 112) = v15;
      }
      *v15 = v14;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      v16 = a1[6];
      v17 = *(_DWORD *)(v16 + 192);
      *(_DWORD *)(v16 + 192) = v17 - 1;
      if (v17)
        goto LABEL_51;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = *(unsigned int *)(a1[6] + 192);
      *(_DWORD *)buf = 136446978;
      v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
      v44 = 2082;
      v45 = "trainer->injected_output_count";
      v46 = 2048;
      v47 = 1;
      v48 = 2048;
      v49 = v18;
      v19 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v34 = 0;
      if (__nwlog_fault(v19, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = gLogObj;
          v21 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v22 = *(unsigned int *)(a1[6] + 192);
            *(_DWORD *)buf = 136446978;
            v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
            v44 = 2082;
            v45 = "trainer->injected_output_count";
            v46 = 2048;
            v47 = 1;
            v48 = 2048;
            v49 = v22;
            v23 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_47:
            _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x2Au);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = gLogObj;
          v21 = type;
          v27 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v27)
            {
              v28 = *(unsigned int *)(a1[6] + 192);
              *(_DWORD *)buf = 136447234;
              v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
              v44 = 2082;
              v45 = "trainer->injected_output_count";
              v46 = 2048;
              v47 = 1;
              v48 = 2048;
              v49 = v28;
              v50 = 2082;
              v51 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(backtrace_string);
            goto LABEL_48;
          }
          if (v27)
          {
            v32 = *(unsigned int *)(a1[6] + 192);
            *(_DWORD *)buf = 136446978;
            v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
            v44 = 2082;
            v45 = "trainer->injected_output_count";
            v46 = 2048;
            v47 = 1;
            v48 = 2048;
            v49 = v32;
            v23 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_47;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = gLogObj;
          v21 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v31 = *(unsigned int *)(a1[6] + 192);
            *(_DWORD *)buf = 136446978;
            v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
            v44 = 2082;
            v45 = "trainer->injected_output_count";
            v46 = 2048;
            v47 = 1;
            v48 = 2048;
            v49 = v31;
            v23 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_47;
          }
        }
      }
LABEL_48:
      if (v19)
        free(v19);
      *(_DWORD *)(a1[6] + 192) = 0;
      goto LABEL_51;
    }
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD **)(a2 + 40);
  if (v9)
  {
    *(_QWORD *)(v9 + 40) = v10;
    v10 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(a1[5] + 8) = v10;
  }
  *v10 = v9;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t __nw_protocol_trainer_top_flush_output_block_invoke_2(uint64_t a1, NSObject *a2)
{
  nw_frame_set_metadata(*(_QWORD *)(a1 + 40), a2, 0, 1);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

uint64_t nw_protocol_trainer_top_connect(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_top_connect";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_top_connect";
      v7 = "%{public}s called with null protocol";
      goto LABEL_33;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_top_connect";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_top_connect";
      v7 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_trainer_top_connect";
      v16 = 2082;
      v17 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v4)
      return 0;
LABEL_35:
    free(v4);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_top_connect";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_top_connect";
      v7 = "%{public}s called with null trainer";
      goto LABEL_33;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_top_connect";
      v7 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_33;
    }
    v10 = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (v10)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v15 = "nw_protocol_trainer_top_connect";
        v16 = 2082;
        v17 = v10;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v10);
      if (!v4)
        return 0;
      goto LABEL_35;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_top_connect";
      v7 = "%{public}s called with null trainer, no backtrace";
LABEL_33:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(uint64_t (**)(void))(*(_QWORD *)(v1 + 24) + 24);
    if (v2)
      return v2();
  }
  return 0;
}

uint64_t nw_protocol_trainer_top_disconnect(uint64_t a1)
{
  uint64_t result;
  void (*v2)(void);
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_top_disconnect";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v11)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_disconnect";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (!backtrace_string)
      {
        if (!v8)
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_disconnect";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_32;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        v14 = "nw_protocol_trainer_top_disconnect";
        v15 = 2082;
        v16 = backtrace_string;
        v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_22:
        _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
      }
LABEL_23:
      free(backtrace_string);
      goto LABEL_33;
    }
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_33;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_top_disconnect";
    v6 = "%{public}s called with null protocol";
LABEL_32:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
LABEL_33:
    if (v3)
      free(v3);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_top_disconnect";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_top_disconnect";
      v6 = "%{public}s called with null trainer";
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_top_disconnect";
      v6 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v14 = "nw_protocol_trainer_top_disconnect";
        v15 = 2082;
        v16 = backtrace_string;
        v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (!v10)
      goto LABEL_33;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_top_disconnect";
    v6 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_32;
  }
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    return result;
  v2 = *(void (**)(void))(*(_QWORD *)(result + 24) + 32);
  if (v2)
  {
    v2();
    return 1;
  }
  return 0;
}

uint64_t nw_protocol_trainer_top_expect_connected(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 40);
    if (v1)
      return *(_BYTE *)(v1 + 196) & 1;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_top_expect_connected";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_connected";
        v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_connected";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_connected";
        v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_top_expect_connected";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_top_expect_connected";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_connected";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_connected";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_top_expect_connected";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_top_expect_connected";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_trainer_top_expect_disconnected(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 40);
    if (v1)
      return (*(unsigned __int8 *)(v1 + 196) >> 1) & 1;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_top_expect_disconnected";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_disconnected";
        v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_disconnected";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_disconnected";
        v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_top_expect_disconnected";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_top_expect_disconnected";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_disconnected";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_top_expect_disconnected";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_top_expect_disconnected";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_top_expect_disconnected";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_trainer_bottom_expect_disconnect(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 40);
    if (v1)
      return (*(unsigned __int8 *)(v1 + 196) >> 2) & 1;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_bottom_expect_disconnect";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_bottom_expect_disconnect";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_bottom_expect_disconnect";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_bottom_expect_disconnect";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_bottom_expect_disconnect";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_trainer_bottom_expect_reset(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 40);
    if (v1)
      return (*(unsigned __int8 *)(v1 + 196) >> 3) & 1;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_bottom_expect_reset";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_reset";
        v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_reset";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_reset";
        v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_bottom_expect_reset";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_bottom_expect_reset";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_reset";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_expect_reset";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_bottom_expect_reset";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_bottom_expect_reset";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

BOOL nw_protocol_trainer_expect_frames_consumed(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 40);
    if (v1)
      return *(_QWORD *)(v1 + 72) == 0;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_expect_frames_consumed";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_expect_frames_consumed";
        v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_expect_frames_consumed";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_expect_frames_consumed";
        v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_expect_frames_consumed";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_expect_frames_consumed";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_expect_frames_consumed";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_expect_frames_consumed";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_expect_frames_consumed";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_expect_frames_consumed";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

void nw_protocol_trainer_bottom_set_output_style(uint64_t a1, int a2)
{
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *v7;
  _BOOL4 v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      *(_DWORD *)(v2 + 184) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_bottom_set_output_style";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v3, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_set_output_style";
        v6 = "%{public}s called with null trainer";
        goto LABEL_32;
      }
      if (!v11)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_set_output_style";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_trainer_bottom_set_output_style";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v3)
          goto LABEL_34;
        return;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_bottom_set_output_style";
        v6 = "%{public}s called with null trainer, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_bottom_set_output_style";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_bottom_set_output_style";
      v6 = "%{public}s called with null protocol";
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_bottom_set_output_style";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_32;
    }
    v7 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!v7)
    {
      if (!v8)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_bottom_set_output_style";
      v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_bottom_set_output_style";
      v15 = 2082;
      v16 = v7;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v7);
  }
LABEL_33:
  if (v3)
LABEL_34:
    free(v3);
}

void nw_protocol_trainer_set_local(uint64_t a1, void *object)
{
  uint64_t v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_set_local";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_36;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_set_local";
      v7 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_protocol_trainer_set_local";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v4)
          return;
LABEL_37:
        free(v4);
        return;
      }
      if (!v9)
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_set_local";
      v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_set_local";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_36;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if (object)
      v3 = os_retain(object);
    else
      v3 = 0;
    *(_QWORD *)(v2 + 160) = v3;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_trainer_set_local";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_36;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_set_local";
    v7 = "%{public}s called with null trainer";
    goto LABEL_35;
  }
  if (!v12)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_set_local";
    v7 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_35;
  }
  v10 = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11)
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_set_local";
    v7 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_35;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nw_protocol_trainer_set_local";
    v16 = 2082;
    v17 = v10;
    _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4)
    goto LABEL_37;
}

uint64_t *nw_protocol_trainer_top_identifier()
{
  if (nw_protocol_trainer_top_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_trainer_top_identifier::onceToken, &__block_literal_global_17441);
  return &g_trainer_top_protocol_identifier;
}

BOOL __nw_protocol_trainer_top_identifier_block_invoke()
{
  unk_1EDCF130C = 0;
  unk_1EDCF1304 = 0;
  strcpy((char *)&g_trainer_top_protocol_identifier, "trainer_top");
  qword_1EDCF1370 = (uint64_t)nw_protocol_default_get_input_frames;
  unk_1EDCF1378 = nw_protocol_default_get_output_frames;
  qword_1EDCF1380 = (uint64_t)nw_protocol_default_finalize_output_frames;
  unk_1EDCF1388 = nw_protocol_default_link_state;
  qword_1EDCF13E0 = (uint64_t)nw_protocol_default_output_finished;
  unk_1EDCF13E8 = nw_protocol_default_get_output_local;
  qword_1EDCF1330 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_1EDCF1338 = nw_protocol_default_connect;
  qword_1EDCF1420 = (uint64_t)nw_protocol_default_reset;
  unk_1EDCF1428 = nw_protocol_default_input_flush;
  qword_1EDCF13D0 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_1EDCF13D8 = nw_protocol_default_input_finished;
  qword_1EDCF13F0 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCF13F8 = nw_protocol_default_waiting_for_output;
  qword_1EDCF13B0 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCF13B8 = nw_protocol_default_unregister_notification;
  qword_1EDCF13C0 = (uint64_t)nw_protocol_default_notify;
  unk_1EDCF13C8 = nw_protocol_default_updated_path;
  qword_1EDCF1400 = (uint64_t)nw_protocol_default_copy_info;
  unk_1EDCF1408 = nw_protocol_default_add_listen_handler;
  qword_1EDCF1410 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_1EDCF1418 = nw_protocol_default_get_message_properties;
  g_trainer_top_protocol_callbacks = (uint64_t)nw_protocol_default_add_input_handler;
  *(_QWORD *)algn_1EDCF1328 = nw_protocol_trainer_remove_input_handler;
  dword_1EDCF1314 = 0;
  qword_1EDCF1340 = (uint64_t)nw_protocol_default_disconnect;
  unk_1EDCF1348 = nw_protocol_trainer_connected;
  qword_1EDCF1350 = (uint64_t)nw_protocol_trainer_disconnected;
  unk_1EDCF1358 = nw_protocol_default_error;
  qword_1EDCF1360 = (uint64_t)nw_protocol_trainer_input_available;
  unk_1EDCF1368 = nw_protocol_default_output_available;
  qword_1EDCF1390 = (uint64_t)nw_protocol_trainer_get_parameters;
  unk_1EDCF1398 = nw_protocol_trainer_get_path;
  qword_1EDCF13A0 = (uint64_t)nw_protocol_trainer_get_local;
  unk_1EDCF13A8 = nw_protocol_trainer_get_remote;
  qword_1EDCF1318 = 0x100000000;
  return nw_protocol_register_extended(&g_trainer_top_protocol_identifier, (uint64_t)nw_protocol_trainer_top_create);
}

uint64_t nw_protocol_trainer_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  _QWORD *handle;
  nw_protocol *output_handler;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_trainer_remove_input_handler";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v16, &type, &v24))
      goto LABEL_57;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_57;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_trainer_remove_input_handler";
        v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_56;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21)
          goto LABEL_57;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_trainer_remove_input_handler";
        v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_56;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_trainer_remove_input_handler";
        v28 = 2082;
        v29 = backtrace_string;
        v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_46:
        _os_log_impl(&dword_182FBE000, v17, v18, v22, buf, 0x16u);
      }
LABEL_47:
      free(backtrace_string);
      goto LABEL_57;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_57;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_trainer_remove_input_handler";
    v19 = "%{public}s called with null protocol";
LABEL_56:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
LABEL_57:
    if (v16)
      free(v16);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_trainer_remove_input_handler";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v16, &type, &v24))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_57;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_trainer_remove_input_handler";
      v19 = "%{public}s called with null trainer";
      goto LABEL_56;
    }
    if (!v24)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_57;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_trainer_remove_input_handler";
      v19 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_trainer_remove_input_handler";
        v28 = 2082;
        v29 = backtrace_string;
        v22 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v23)
      goto LABEL_57;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_trainer_remove_input_handler";
    v19 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_56;
  }
  if (a2 && a2->output_handler == a1)
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (a1->default_input_handler != a2)
    return 0;
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  output_handler = a1->output_handler;
  if (output_handler)
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
  if (a3)
  {
    while (1)
    {
      v9 = (_QWORD *)handle[9];
      if (!v9)
        break;
      v10 = v9[2];
      v11 = (_QWORD *)v9[3];
      if (v10)
      {
        *(_QWORD *)(v10 + 24) = v11;
        v11 = (_QWORD *)v9[3];
      }
      else
      {
        handle[10] = v11;
      }
      *v11 = v10;
      v9[2] = 0;
      v9[3] = 0;
      if (nw_frame_uses_external_data((uint64_t)v9))
        nw_frame_set_external_data((uint64_t)v9, 0, 0);
      else
        nw_frame_free_buffer((uint64_t)v9);
      nw_frame_reset((uint64_t)v9, 0, 0, 0, 0);
      os_release(v9);
    }
    v12 = (void *)handle[19];
    if (v12)
    {
      os_release(v12);
      handle[19] = 0;
    }
    v13 = (void *)handle[20];
    if (v13)
    {
      os_release(v13);
      handle[20] = 0;
    }
    v14 = (void *)handle[21];
    if (v14)
    {
      os_release(v14);
      handle[21] = 0;
    }
    v15 = (void *)handle[22];
    if (v15)
      os_release(v15);
    a1->handle = 0;
    free(handle);
  }
  return 1;
}

void nw_protocol_trainer_connected(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_connected";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_connected";
      v6 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_trainer_connected";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v3)
          return;
LABEL_35:
        free(v3);
        return;
      }
      if (!v8)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_connected";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_connected";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a1->output_handler == a2)
      handle[196] |= 1u;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_connected";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_34;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_connected";
    v6 = "%{public}s called with null trainer";
    goto LABEL_33;
  }
  if (!v11)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_connected";
    v6 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_33;
  }
  v9 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10)
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_connected";
    v6 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_33;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v14 = "nw_protocol_trainer_connected";
    v15 = 2082;
    v16 = v9;
    _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3)
    goto LABEL_35;
}

void nw_protocol_trainer_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_disconnected";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_disconnected";
      v6 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_trainer_disconnected";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v3)
          return;
LABEL_35:
        free(v3);
        return;
      }
      if (!v8)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_disconnected";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_trainer_disconnected";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a1->output_handler == a2)
      handle[196] |= 2u;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_disconnected";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_34;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_disconnected";
    v6 = "%{public}s called with null trainer";
    goto LABEL_33;
  }
  if (!v11)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_disconnected";
    v6 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_33;
  }
  v9 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10)
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_disconnected";
    v6 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_33;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v14 = "nw_protocol_trainer_disconnected";
    v15 = 2082;
    v16 = v9;
    _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3)
    goto LABEL_35;
}

void nw_protocol_trainer_input_available(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  unsigned int (*get_input_frames)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, _BYTE *);
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  _BYTE *v18;
  void *v19;
  char v20;
  os_log_type_t v21;
  _BYTE buf[22];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
    v7 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &v21, &v20))
      goto LABEL_38;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (!os_log_type_enabled(v8, v21))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
      v10 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = v21;
      v12 = os_log_type_enabled(v8, v21);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v7)
          return;
LABEL_39:
        free(v7);
        return;
      }
      if (!v12)
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (!os_log_type_enabled(v8, v21))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_38;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a2)
    {
      get_input_frames = (unsigned int (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, _BYTE *))a2->callbacks->get_input_frames;
      if (get_input_frames)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        if (get_input_frames(a2, a1, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, buf))
        {
          v15[0] = MEMORY[0x1E0C809B0];
          v15[1] = 0x40000000;
          v16 = ___ZL35nw_protocol_trainer_input_availableP11nw_protocolS0__block_invoke;
          v17 = &__block_descriptor_tmp_20_17495;
          v18 = buf;
          v19 = handle;
          v4 = *(_QWORD *)buf;
          do
          {
            if (!v4)
              break;
            v5 = *(_QWORD *)(v4 + 32);
            v6 = ((uint64_t (*)(_QWORD *))v16)(v15);
            v4 = v5;
          }
          while ((v6 & 1) != 0);
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
  v7 = (char *)_os_log_send_and_compose_impl();
  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &v21, &v20))
    goto LABEL_38;
  if (v21 == OS_LOG_TYPE_FAULT)
  {
    v8 = __nwlog_obj();
    v9 = v21;
    if (!os_log_type_enabled(v8, v21))
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
    v10 = "%{public}s called with null trainer";
    goto LABEL_37;
  }
  if (!v20)
  {
    v8 = __nwlog_obj();
    v9 = v21;
    if (!os_log_type_enabled(v8, v21))
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
    v10 = "%{public}s called with null trainer, backtrace limit exceeded";
    goto LABEL_37;
  }
  v13 = (char *)__nw_create_backtrace_string();
  v8 = __nwlog_obj();
  v9 = v21;
  v14 = os_log_type_enabled(v8, v21);
  if (!v13)
  {
    if (!v14)
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
    v10 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_37;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_input_available";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v13;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7)
    goto LABEL_39;
}

uint64_t nw_protocol_trainer_get_path(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[22];
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_get_path";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_path";
        v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_path";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_path";
        v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_get_path";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_get_path";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_path";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_path";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_get_path";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_get_path";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_trainer_get_parameters(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[21];
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_get_parameters";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_parameters";
        v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_parameters";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_parameters";
        v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_get_parameters";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_get_parameters";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_parameters";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_parameters";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_get_parameters";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_get_parameters";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_trainer_get_local(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[20];
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_get_local";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_local";
        v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_local";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_local";
        v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_get_local";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_get_local";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_local";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_local";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_get_local";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_get_local";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_trainer_get_remote(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[19];
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_get_remote";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_remote";
        v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_remote";
        v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_remote";
        v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_get_remote";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_trainer_get_remote";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_remote";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_trainer_get_remote";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_trainer_get_remote";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_trainer_get_remote";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

BOOL nw_protocol_trainer_top_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  _OWORD *v5;
  void *v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  void *memptr;
  _BYTE out[22];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0xC8uLL, 0x68FF3B34uLL))
  {
    v5 = memptr;
    if (memptr)
    {
LABEL_3:
      v5[6] = 0u;
      v5[7] = 0u;
      v5[8] = 0u;
      v5[9] = 0u;
      *((_QWORD *)v5 + 24) = 0;
      v5[10] = 0u;
      v5[11] = 0u;
      v5[4] = 0u;
      v5[5] = 0u;
      v5[2] = 0u;
      v5[3] = 0u;
      *v5 = 0u;
      v5[1] = 0u;
      *((_QWORD *)v5 + 2) = &g_trainer_top_protocol_identifier;
      *((_QWORD *)v5 + 3) = &g_trainer_top_protocol_callbacks;
      *((_QWORD *)v5 + 5) = v5;
      *((_QWORD *)v5 + 10) = (char *)v5 + 72;
      *((_QWORD *)v5 + 12) = (char *)v5 + 88;
      *((_QWORD *)v5 + 14) = (char *)v5 + 104;
      *((_QWORD *)v5 + 16) = (char *)v5 + 120;
      *((_QWORD *)v5 + 18) = (char *)v5 + 136;
      if (a2)
      {
        *((_QWORD *)v5 + 19) = os_retain(a2);
        if (a3)
        {
LABEL_5:
          v6 = os_retain(a3);
LABEL_8:
          *((_QWORD *)v5 + 21) = v6;
          *(_QWORD *)out = 0;
          *(_QWORD *)&out[8] = 0;
          uuid_generate_random(out);
          *((_QWORD *)v5 + 22) = nw_path_create_static(a2, a3, 1, out, 0, 0, 1, 0, 0, 0, 0);
          *((_DWORD *)v5 + 46) = 0;
          return (BOOL)v5;
        }
      }
      else
      {
        *((_QWORD *)v5 + 19) = 0;
        if (a3)
          goto LABEL_5;
      }
      v6 = 0;
      goto LABEL_8;
    }
  }
  v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  *(_DWORD *)out = 136446722;
  *(_QWORD *)&out[4] = "strict_memalign";
  *(_WORD *)&out[12] = 2048;
  *(_QWORD *)&out[14] = 8;
  v12 = 2048;
  v13 = 200;
  v9 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    v5 = memptr;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t ___ZL35nw_protocol_trainer_input_availableP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD **)(a2 + 40);
  v2 = (_QWORD *)(a2 + 32);
  if (v3)
  {
    *(_QWORD *)(v3 + 40) = v4;
    v4 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v4;
  }
  *v4 = v3;
  *v2 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD **)(v5 + 128);
  *(_QWORD *)(a2 + 40) = v6;
  *v6 = a2;
  *(_QWORD *)(v5 + 128) = v2;
  return 1;
}

uint64_t *nw_protocol_trainer_bottom_identifier()
{
  if (nw_protocol_trainer_bottom_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_trainer_bottom_identifier::onceToken, &__block_literal_global_12_17526);
  return &g_trainer_bottom_protocol_identifier;
}

BOOL __nw_protocol_trainer_bottom_identifier_block_invoke()
{
  unk_1EDCF144F = 0;
  unk_1EDCF1447 = 0;
  strcpy((char *)g_trainer_bottom_protocol_identifier, "trainer_bottom");
  qword_1EDCF14A0 = (uint64_t)nw_protocol_default_input_available;
  unk_1EDCF14A8 = nw_protocol_default_output_available;
  qword_1EDCF14E0 = (uint64_t)nw_protocol_default_get_local;
  unk_1EDCF14E8 = nw_protocol_default_get_remote;
  qword_1EDCF14D0 = (uint64_t)nw_protocol_default_get_parameters;
  unk_1EDCF14D8 = nw_protocol_default_get_path;
  qword_1EDCF1520 = (uint64_t)nw_protocol_default_output_finished;
  unk_1EDCF1528 = nw_protocol_default_get_output_local;
  qword_1EDCF1490 = (uint64_t)nw_protocol_default_disconnected;
  unk_1EDCF1498 = nw_protocol_default_error;
  qword_1EDCF1510 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_1EDCF1518 = nw_protocol_default_input_finished;
  qword_1EDCF1530 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCF1538 = nw_protocol_default_waiting_for_output;
  qword_1EDCF14F0 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCF14F8 = nw_protocol_default_unregister_notification;
  qword_1EDCF1500 = (uint64_t)nw_protocol_default_notify;
  unk_1EDCF1508 = nw_protocol_default_updated_path;
  qword_1EDCF1540 = (uint64_t)nw_protocol_default_copy_info;
  unk_1EDCF1548 = nw_protocol_default_add_listen_handler;
  qword_1EDCF1550 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_1EDCF1558 = nw_protocol_default_get_message_properties;
  g_trainer_bottom_protocol_callbacks = (uint64_t)nw_protocol_trainer_add_input_handler;
  *(_QWORD *)algn_1EDCF1468 = nw_protocol_trainer_remove_input_handler;
  qword_1EDCF14B0 = (uint64_t)nw_protocol_trainer_bottom_get_input_frames;
  unk_1EDCF14B8 = nw_protocol_trainer_bottom_get_output_frames;
  qword_1EDCF14C0 = (uint64_t)nw_protocol_trainer_bottom_finalize_output_frames;
  unk_1EDCF14C8 = nw_protocol_default_link_state;
  byte_1EDCF1457 = 0;
  qword_1EDCF1470 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_1EDCF1478 = nw_protocol_trainer_connect;
  qword_1EDCF1480 = (uint64_t)nw_protocol_trainer_disconnect;
  unk_1EDCF1488 = nw_protocol_default_connected;
  qword_1EDCF1560 = (uint64_t)nw_protocol_trainer_reset;
  unk_1EDCF1568 = nw_protocol_default_input_flush;
  qword_1EDCF1458 = 0x100000000;
  return nw_protocol_register_extended(g_trainer_bottom_protocol_identifier, (uint64_t)nw_protocol_trainer_bottom_create);
}

uint64_t nw_protocol_trainer_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *handle;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
      if (!a2->output_handler)
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
      v4 = mach_continuous_time();
      if (v4 <= 1)
        v5 = 1;
      else
        v5 = v4;
      handle[8] = v5;
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_trainer_add_input_handler";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_trainer_add_input_handler";
        v10 = "%{public}s called with null trainer";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (!v15)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_trainer_add_input_handler";
        v10 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_trainer_add_input_handler";
        v10 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_trainer_add_input_handler";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_trainer_add_input_handler";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15))
    goto LABEL_37;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_trainer_add_input_handler";
        v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_trainer_add_input_handler";
        v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_trainer_add_input_handler";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_182FBE000, v8, v9, v13, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_37;
  }
  v8 = __nwlog_obj();
  v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_trainer_add_input_handler";
    v10 = "%{public}s called with null protocol";
LABEL_36:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
  }
LABEL_37:
  if (v7)
    free(v7);
  return 0;
}

uint64_t nw_protocol_trainer_bottom_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _DWORD *handle;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  _QWORD v22[2];
  uint64_t (*v23)(uint64_t, uint64_t);
  void *v24;
  _BYTE *v25;
  os_log_type_t *v26;
  _DWORD *v27;
  nw_frame_array_s *v28;
  unsigned int v29;
  int v30;
  os_log_type_t type[8];
  os_log_type_t *v32;
  uint64_t v33;
  int v34;
  char v35;
  _BYTE buf[24];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v37 = 0;
      *(_QWORD *)&buf[16] = 0x2000000000;
      *(_QWORD *)type = 0;
      v32 = type;
      v34 = 0;
      v33 = 0x2000000000;
      v7 = handle[47];
      if (v7 >= a5)
        v8 = a5;
      else
        v8 = handle[47];
      if (!v7)
        v8 = a5;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 0x40000000;
      v23 = ___ZL43nw_protocol_trainer_bottom_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      v24 = &unk_1E149CB88;
      v25 = buf;
      v26 = type;
      v29 = v8;
      v30 = a4;
      v27 = handle;
      v28 = a6;
      v9 = *((_QWORD *)handle + 11);
      do
      {
        if (!v9)
          break;
        v10 = *(_QWORD *)(v9 + 32);
        v11 = ((uint64_t (*)(_QWORD *))v23)(v22);
        v9 = v10;
      }
      while ((v11 & 1) != 0);
      v12 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(type, 8);
      _Block_object_dispose(buf, 8);
      return v12;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
    v14 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v14, type, &v35))
      goto LABEL_40;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        v17 = "%{public}s called with null trainer";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (!v35)
    {
      v15 = __nwlog_obj();
      v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        v17 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type[0];
    v21 = os_log_type_enabled(v15, type[0]);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        v17 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v20 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
  v14 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (!__nwlog_fault(v14, type, &v35))
    goto LABEL_40;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v35)
    {
      v15 = __nwlog_obj();
      v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type[0];
    v19 = os_log_type_enabled(v15, type[0]);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v20 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_29:
      _os_log_impl(&dword_182FBE000, v15, v16, v20, buf, 0x16u);
    }
LABEL_30:
    free(backtrace_string);
    goto LABEL_40;
  }
  v15 = __nwlog_obj();
  v16 = type[0];
  if (os_log_type_enabled(v15, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
    v17 = "%{public}s called with null protocol";
LABEL_39:
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
  }
LABEL_40:
  if (v14)
    free(v14);
  return 0;
}

uint64_t nw_protocol_trainer_bottom_get_output_frames(nw_protocol *a1, nw_protocol *a2, int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _QWORD *handle;
  uint64_t v11;
  uint64_t *v12;
  nw_frame **v13;
  uint64_t v14;
  unsigned int i;
  size_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t *v19;
  nw_frame **tqh_last;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *backtrace_string;
  _BOOL4 v27;
  const char *v28;
  _BOOL4 v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (a4 | a3 || a5 != 1)
      {
        v14 = 0;
        if (a5 && a4)
        {
          LODWORD(v14) = 0;
          for (i = 0; i < a4; i += v16)
          {
            if (a4 - i >= 0x2400)
              v16 = 9216;
            else
              v16 = a4 - i;
            v17 = nw_calloc_type<unsigned char>(v16);
            v18 = nw_frame_create(0, v17, v16, (uint64_t)nw_protocol_trainer_frame_finalizer, (uint64_t)a1);
            nw_frame_set_buffer_used_malloc(v18, 1);
            *(_QWORD *)(v18 + 16) = 0;
            v19 = (uint64_t *)handle[10];
            *(_QWORD *)(v18 + 24) = v19;
            *v19 = v18;
            handle[10] = v18 + 16;
            *(_QWORD *)(v18 + 32) = 0;
            tqh_last = a6->tqh_last;
            *(_QWORD *)(v18 + 40) = tqh_last;
            *tqh_last = (nw_frame *)v18;
            a6->tqh_last = (nw_frame **)(v18 + 32);
            v14 = (v14 + 1);
            if (v14 >= a5)
              break;
          }
        }
      }
      else
      {
        v11 = nw_frame_create(0, 0, 0, (uint64_t)nw_protocol_trainer_frame_finalizer, (uint64_t)a1);
        *(_QWORD *)(v11 + 16) = 0;
        v12 = (uint64_t *)handle[10];
        *(_QWORD *)(v11 + 24) = v12;
        *v12 = v11;
        handle[10] = v11 + 16;
        *(_QWORD *)(v11 + 32) = 0;
        v13 = a6->tqh_last;
        *(_QWORD *)(v11 + 40) = v13;
        *v13 = (nw_frame *)v11;
        a6->tqh_last = (nw_frame **)(v11 + 32);
        return 1;
      }
      return v14;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_protocol_trainer_bottom_get_output_frames";
    v22 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v22, &type, &v30))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_protocol_trainer_bottom_get_output_frames";
        v25 = "%{public}s called with null trainer";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (!v30)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_protocol_trainer_bottom_get_output_frames";
        v25 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v23 = __nwlog_obj();
    v24 = type;
    v29 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_protocol_trainer_bottom_get_output_frames";
        v25 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_protocol_trainer_bottom_get_output_frames";
      v34 = 2082;
      v35 = backtrace_string;
      v28 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v33 = "nw_protocol_trainer_bottom_get_output_frames";
  v22 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (!__nwlog_fault(v22, &type, &v30))
    goto LABEL_42;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v30)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_protocol_trainer_bottom_get_output_frames";
        v25 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v23 = __nwlog_obj();
    v24 = type;
    v27 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_protocol_trainer_bottom_get_output_frames";
        v25 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_protocol_trainer_bottom_get_output_frames";
      v34 = 2082;
      v35 = backtrace_string;
      v28 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v23, v24, v28, buf, 0x16u);
    }
LABEL_32:
    free(backtrace_string);
    goto LABEL_42;
  }
  v23 = __nwlog_obj();
  v24 = type;
  if (os_log_type_enabled(v23, type))
  {
    *(_DWORD *)buf = 136446210;
    v33 = "nw_protocol_trainer_bottom_get_output_frames";
    v25 = "%{public}s called with null protocol";
LABEL_41:
    _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
  }
LABEL_42:
  if (v22)
    free(v22);
  return 0;
}

uint64_t nw_protocol_trainer_bottom_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  void *handle;
  nw_frame *tqh_first;
  nw_frame *v4;
  char v5;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  nw_frame_array_s *v18;
  void *v19;
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v16 = ___ZL49nw_protocol_trainer_bottom_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      v17 = &__block_descriptor_tmp_22_17568;
      v18 = a2;
      v19 = handle;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first)
          break;
        v4 = (nw_frame *)*((_QWORD *)tqh_first + 4);
        v5 = ((uint64_t (*)(_QWORD *))v16)(v15);
        tqh_first = v4;
      }
      while ((v5 & 1) != 0);
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &v21, &v20))
      goto LABEL_35;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        v10 = "%{public}s called with null trainer";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v20)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        v10 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = v21;
    v14 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        v10 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
      v24 = 2082;
      v25 = backtrace_string;
      v13 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
  v7 = (char *)_os_log_send_and_compose_impl();
  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &v21, &v20))
    goto LABEL_35;
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = v21;
    v12 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
      v24 = 2082;
      v25 = backtrace_string;
      v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_182FBE000, v8, v9, v13, buf, 0x16u);
    }
LABEL_25:
    free(backtrace_string);
    goto LABEL_35;
  }
  v8 = __nwlog_obj();
  v9 = v21;
  if (os_log_type_enabled(v8, v21))
  {
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
    v10 = "%{public}s called with null protocol";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
  }
LABEL_35:
  if (v7)
    free(v7);
  return 0;
}

uint64_t nw_protocol_trainer_connect(nw_protocol *a1, nw_protocol *a2)
{
  void (*connected)(nw_protocol *, nw_protocol *);
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1->handle)
    {
      if (a2)
      {
        connected = (void (*)(nw_protocol *, nw_protocol *))a2->callbacks->connected;
        if (connected)
          connected(a2, a1);
      }
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_connect";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_connect";
        v7 = "%{public}s called with null trainer";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_connect";
        v7 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_connect";
        v7 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_trainer_connect";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_trainer_connect";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_35;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_connect";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_connect";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_trainer_connect";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_25:
    free(backtrace_string);
    goto LABEL_35;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_connect";
    v7 = "%{public}s called with null protocol";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_35:
  if (v4)
    free(v4);
  return 0;
}

void nw_protocol_trainer_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  void (*disconnected)(nw_protocol *, nw_protocol *);
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_disconnect";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_disconnect";
      v7 = "%{public}s called with null protocol";
      goto LABEL_36;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_disconnect";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_disconnect";
      v7 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_36;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_trainer_disconnect";
      v16 = 2082;
      v17 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_37:
    if (!v4)
      return;
    goto LABEL_38;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_disconnect";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_disconnect";
      v7 = "%{public}s called with null trainer";
      goto LABEL_36;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_disconnect";
      v7 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_36;
    }
    v10 = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (v10)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v15 = "nw_protocol_trainer_disconnect";
        v16 = 2082;
        v17 = v10;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null trainer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v10);
      if (!v4)
        return;
LABEL_38:
      free(v4);
      return;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_trainer_disconnect";
      v7 = "%{public}s called with null trainer, no backtrace";
LABEL_36:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  if (a1->default_input_handler == a2)
  {
    handle[196] |= 4u;
    if (!a2)
      return;
  }
  else if (!a2)
  {
    return;
  }
  disconnected = (void (*)(nw_protocol *, nw_protocol *))a2->callbacks->disconnected;
  if (disconnected)
    disconnected(a2, a1);
}

uint64_t nw_protocol_trainer_reset(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (a1->default_input_handler == a2)
        handle[196] |= 8u;
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_reset";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_reset";
        v7 = "%{public}s called with null trainer";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_reset";
        v7 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_reset";
        v7 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_trainer_reset";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_trainer_reset";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_34;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_reset";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_trainer_reset";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_trainer_reset";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_trainer_reset";
    v7 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_34:
  if (v4)
    free(v4);
  return 0;
}

BOOL nw_protocol_trainer_bottom_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  _OWORD *v5;
  void *v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  void *memptr;
  _BYTE out[22];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0xC8uLL, 0x68FF3B34uLL))
  {
    v5 = memptr;
    if (memptr)
    {
LABEL_3:
      v5[6] = 0u;
      v5[7] = 0u;
      v5[8] = 0u;
      v5[9] = 0u;
      *((_QWORD *)v5 + 24) = 0;
      v5[10] = 0u;
      v5[11] = 0u;
      v5[4] = 0u;
      v5[5] = 0u;
      v5[2] = 0u;
      v5[3] = 0u;
      *v5 = 0u;
      v5[1] = 0u;
      *((_QWORD *)v5 + 2) = &g_trainer_bottom_protocol_identifier;
      *((_QWORD *)v5 + 3) = &g_trainer_bottom_protocol_callbacks;
      *((_QWORD *)v5 + 5) = v5;
      *((_QWORD *)v5 + 10) = (char *)v5 + 72;
      *((_QWORD *)v5 + 12) = (char *)v5 + 88;
      *((_QWORD *)v5 + 14) = (char *)v5 + 104;
      *((_QWORD *)v5 + 16) = (char *)v5 + 120;
      *((_QWORD *)v5 + 18) = (char *)v5 + 136;
      if (a2)
      {
        *((_QWORD *)v5 + 19) = os_retain(a2);
        if (a3)
        {
LABEL_5:
          v6 = os_retain(a3);
LABEL_8:
          *((_QWORD *)v5 + 21) = v6;
          *(_QWORD *)out = 0;
          *(_QWORD *)&out[8] = 0;
          uuid_generate_random(out);
          *((_QWORD *)v5 + 22) = nw_path_create_static(a2, a3, 1, out, 0, 0, 1, 0, 0, 0, 0);
          *((_DWORD *)v5 + 46) = 0;
          return (BOOL)v5;
        }
      }
      else
      {
        *((_QWORD *)v5 + 19) = 0;
        if (a3)
          goto LABEL_5;
      }
      v6 = 0;
      goto LABEL_8;
    }
  }
  v8 = __nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  *(_DWORD *)out = 136446722;
  *(_QWORD *)&out[4] = "strict_memalign";
  *(_WORD *)&out[12] = 2048;
  *(_QWORD *)&out[14] = 8;
  v12 = 2048;
  v13 = 200;
  v9 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    v5 = memptr;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t ___ZL49nw_protocol_trainer_bottom_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD **)(a2 + 40);
  v2 = (_QWORD *)(a2 + 32);
  if (v3)
  {
    *(_QWORD *)(v3 + 40) = v4;
    v4 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v4;
  }
  *v4 = v3;
  *v2 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD **)(v5 + 144);
  *(_QWORD *)(a2 + 40) = v6;
  *v6 = a2;
  *(_QWORD *)(v5 + 144) = v2;
  return 1;
}

uint64_t ___ZL43nw_protocol_trainer_bottom_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) >= *(_DWORD *)(a1 + 64))
    return 0;
  v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + v4) > *(_DWORD *)(a1 + 68))
    return 0;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD **)(a2 + 40);
  v6 = (_QWORD *)(a2 + 32);
  if (v7)
  {
    *(_QWORD *)(v7 + 40) = v8;
    v8 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 96) = v8;
  }
  *v8 = v7;
  *v6 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD **)(v9 + 8);
  *(_QWORD *)(a2 + 40) = v10;
  *v10 = a2;
  *(_QWORD *)(v9 + 8) = v6;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v4;
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return 1;
}

void sub_183516E20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void nw_remote_packet_input_available(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;

  while (1)
  {
    v5 = *(id *)(a1 + 40);
    objc_sync_enter(v5);
    v6 = objc_msgSend(v5, "receiveWindowPacketCount");
    objc_sync_exit(v5);

    if (!(_DWORD)v6)
      break;
    v20 = 0;
    v21 = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id *))(*(_QWORD *)(a2 + 24) + 80))(a2, a1, 1, 0xFFFFFFFFLL, v6, &v20))break;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v20;
    if (v8)
    {
      v9 = (uint64_t)v8;
      do
      {
        v10 = *(void **)(v9 + 32);
        if (!v10 && !*(_QWORD *)(v9 + 40))
          v10 = 0;
        v11 = v10;
        if (*(_QWORD *)(v9 + 112)
          && ((*(_WORD *)(v9 + 204) & 0x100) == 0
           || !g_channel_check_validity
           || g_channel_check_validity(v9, *(_QWORD *)(v9 + 88))))
        {
          v12 = *(_DWORD *)(v9 + 52);
          if (v12)
          {
            v13 = *(unsigned int *)(v9 + 56);
            v14 = v13 + *(_DWORD *)(v9 + 60);
            v15 = (v12 - v14);
            if (v12 != v14)
            {
              v16 = *(_QWORD *)(v9 + 112);
              if (v16)
              {
                objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v16 + v13, v15);
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v7, "addObject:", v17);

              }
            }
          }
        }
        v18 = *(_QWORD *)(v9 + 32);
        v19 = *(_QWORD **)(v9 + 40);
        if (v18)
        {
          *(_QWORD *)(v18 + 40) = v19;
          v19 = *(_QWORD **)(v9 + 40);
        }
        else
        {
          v21 = *(_QWORD *)(v9 + 40);
        }
        *v19 = v18;
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 40) = 0;
        nw_frame_finalize(v9);

        v9 = (uint64_t)v11;
      }
      while (v11);
    }
    objc_msgSend(v5, "delegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sendRemotePackets:", v7);

  }
}

void sub_1835170B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void nw_remote_packet_output_available(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = *(id *)(a1 + 40);
  objc_msgSend(v10, "writeRequests");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v4);
  while (1)
  {
    objc_msgSend(v10, "writeRequests");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");

    if (!v6)
      break;
    objc_msgSend(v10, "writeRequests");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!nw_remote_director_write_request(a1, a2, v8))
    {

      break;
    }
    objc_msgSend(v10, "writeRequests");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "removeObjectAtIndex:", 0);

  }
  objc_sync_exit(v4);

}

void sub_18351735C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18351775C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, objc_super a14)
{
  a14.super_class = (Class)_NWAdvertiser;
  -[_Unwind_Exception dealloc](&a14, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_183518840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v42 - 176), 8);

  _Unwind_Resume(a1);
}

void sub_183518B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_183519078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183519170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_183519824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_listener_copy_description_block_invoke(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  _BOOL8 v4;
  void *v5;
  char *v6;
  char **v7;
  const char *id_string;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *description;
  const char *v13;
  const char *v14;

  v2 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)(*(_QWORD *)(a1 + 32) + 16), 0);
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v3 + 176))
  {
    v4 = nw_path_copy_description(*(void **)(v3 + 176));
    v3 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v3 + 264);
    if (v5)
    {
LABEL_3:
      v6 = (char *)nw_advertise_descriptor_copy_description(v5);
      v3 = *(_QWORD *)(a1 + 32);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    v5 = *(void **)(v3 + 264);
    if (v5)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_6:
  v7 = (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  id_string = nw_listener_get_id_string((void *)v3);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(unsigned int *)(v9 + 128);
  if (v10 > 4)
    v11 = "<unknown>";
  else
    v11 = off_1E149CE68[v10];
  description = nw_endpoint_get_description(*(void **)(v9 + 280));
  v13 = "<NULL>";
  if (v4)
    v14 = (const char *)v4;
  else
    v14 = "<NULL>";
  if (v6)
    v13 = v6;
  asprintf(v7, "[%s %s, local endpoint: %s, parameters: %s, port: %d, path %s, service: %s]", id_string, v11, description, v2, *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 300), v14, v13);
  if (v6)
    free(v6);
  if (v2)
    free(v2);
  if (v4)
    free((void *)v4);
}

uint64_t __Block_byref_object_copy__17841(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17842(uint64_t a1)
{

}

void sub_183519CF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_listener_cancel_complete_on_queue(NWConcrete_nw_listener *a1)
{
  NWConcrete_nw_listener *v1;
  NWConcrete_nw_listener *v2;
  void (**v3)(_QWORD);
  void *v4;
  _QWORD aBlock[4];
  NWConcrete_nw_listener *v6;

  v1 = a1;
  *((_BYTE *)v1 + 302) &= ~1u;
  nw_listener_set_state_on_queue(v1, 4, 0);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL36nw_listener_cancel_complete_on_queueP22NWConcrete_nw_listener_block_invoke;
  aBlock[3] = &unk_1E14ACFD0;
  v2 = v1;
  v6 = v2;
  v3 = (void (**)(_QWORD))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
  v3[2](v3);
  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);

  v4 = (void *)*((_QWORD *)v2 + 32);
  *((_QWORD *)v2 + 32) = 0;

}

void sub_183519DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void nw_listener_reconcile_inboxes_on_queue(NWConcrete_nw_listener *a1)
{
  NWConcrete_nw_listener *v1;
  _BOOL8 v2;
  void *v3;
  nw_path_status_t status;
  _BOOL4 v5;
  void *v6;
  uint64_t v7;
  id socket_inbox_match_on_queue;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  NWConcrete_nw_listener *v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _BOOL8 v21;
  unsigned __int8 *v22;
  uint64_t v23;
  NWConcrete_nw_listener *v24;
  id v25;
  NWConcrete_nw_listener *v26;
  void *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  void *v43;
  NWConcrete_nw_listener *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  NSObject *v47;
  const char *id_string;
  uint64_t (*v49)(uint64_t, uint64_t);
  _DWORD *v50;
  NSObject *v51;
  const char *v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  NWConcrete_nw_listener *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  id *v63;
  unsigned __int8 *v64;
  id v65;
  _DWORD *v66;
  int v67;
  _DWORD *v68;
  unsigned int v69;
  NSObject *v70;
  unsigned __int8 *v71;
  _BOOL8 obj;
  _QWORD v73[4];
  NWConcrete_nw_listener *v74;
  uint64_t *v75;
  _QWORD v76[4];
  NWConcrete_nw_listener *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t);
  void (*v84)(uint64_t);
  id v85;
  _QWORD v86[4];
  NWConcrete_nw_listener *v87;
  _QWORD v88[4];
  NWConcrete_nw_listener *v89;
  id v90;
  _QWORD v91[4];
  NWConcrete_nw_listener *v92;
  _QWORD v93[4];
  id v94;
  _QWORD v95[4];
  NWConcrete_nw_listener *v96;
  id v97;
  id v98;
  _QWORD v99[4];
  NWConcrete_nw_listener *v100;
  _QWORD v101[4];
  NWConcrete_nw_listener *v102;
  _QWORD v103[4];
  NWConcrete_nw_listener *v104;
  id v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  void (*v110)(uint64_t);
  id v111;
  _BYTE buf[24];
  uint64_t (*v113)(uint64_t, uint64_t);
  _BYTE v114[20];
  __int128 v115;
  uint64_t (*v116)(uint64_t, uint64_t, void *);
  void *v117;
  _BYTE *v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  v2 = nw_path_copy_derived_parameters(*((void **)v1 + 22));
  v3 = (void *)*((_QWORD *)v1 + 26);
  *((_QWORD *)v1 + 26) = v2;

  status = nw_path_get_status(*((nw_path_t *)v1 + 22));
  obj = nw_array_create();
  v5 = (status == nw_path_status_satisfied
     || nw_parameters_get_always_open_listener_socket(*((void **)v1 + 26)))
    && !nw_path_listener_uses_nexus_only(*((void **)v1 + 22));
  v106 = 0;
  v107 = &v106;
  v108 = 0x3032000000;
  v109 = __Block_byref_object_copy__17841;
  v110 = __Block_byref_object_dispose__17842;
  v111 = 0;
  v6 = (void *)*((_QWORD *)v1 + 4);
  v7 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    v103[0] = MEMORY[0x1E0C809B0];
    v103[1] = 3221225472;
    v103[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke;
    v103[3] = &unk_1E149CD30;
    v104 = v1;
    v105 = (id)obj;
    nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue(v104, v6, v103);

  }
  else
  {
    socket_inbox_match_on_queue = nw_listener_find_socket_inbox_match_on_queue(v1, *((void **)v1 + 26));
    v9 = (void *)v107[5];
    v107[5] = (uint64_t)socket_inbox_match_on_queue;

    v10 = (void *)v107[5];
    if (v10)
    {
      nw_array_append(obj, v10);
      v5 = 0;
    }
  }
  v11 = nw_parameters_copy_custom_proxy_configs(*((void **)v1 + 2));
  v12 = v11;
  if (!v11 || *((_QWORD *)v11 + 2) == *((_QWORD *)v11 + 3))
  {
    v13 = nw_path_copy_proxy_configs(*((void **)v1 + 22));

    v12 = v13;
  }
  v101[0] = v7;
  v101[1] = 3221225472;
  v101[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_196;
  v101[3] = &unk_1E14AC200;
  v14 = v1;
  v102 = v14;
  nw_array_apply((unsigned __int8 *)v12, (uint64_t)v101);
  if (status != nw_path_status_satisfied
    || (nw_parameters_get_allow_socket_access(*((void **)v1 + 26)) & 1) != 0
    || *((_QWORD *)v1 + 4))
  {
    v15 = 0;
  }
  else
  {
    v42 = nw_array_create();
    v43 = (void *)*((_QWORD *)v1 + 22);
    v99[0] = v7;
    v99[1] = 3221225472;
    v99[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_200;
    v99[3] = &unk_1E149CD80;
    v44 = v14;
    v100 = v44;
    nw_path_enumerate_interface_options(v43, v99);
    v45 = (unsigned __int8 *)nw_path_copy_flows(*((void **)v1 + 22));
    v95[0] = v7;
    v95[1] = 3221225472;
    v95[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_2;
    v95[3] = &unk_1E14AA9F0;
    v96 = v44;
    v97 = (id)obj;
    v15 = (id)v42;
    v98 = v15;
    nw_array_apply(v45, (uint64_t)v95);

  }
  v16 = (uint64_t *)((char *)v14 + 144);
  v17 = *((_QWORD *)v14 + 18);
  if (v17 && *(_QWORD *)(v17 + 24) != *(_QWORD *)(v17 + 16))
  {
    v93[0] = v7;
    v93[1] = 3221225472;
    v93[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3;
    v93[3] = &unk_1E14AC200;
    v18 = (id)obj;
    v94 = v18;
    nw_array_apply((unsigned __int8 *)v17, (uint64_t)v93);
    v19 = nw_array_create_by_removal(*v16, (uint64_t)v18);
    v20 = (unsigned __int8 *)v19;
    if (v19 && *(_QWORD *)(v19 + 24) != *(_QWORD *)(v19 + 16))
    {
      v91[0] = v7;
      v91[1] = 3221225472;
      v91[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_4;
      v91[3] = &unk_1E14AC200;
      v92 = v14;
      nw_array_apply(v20, (uint64_t)v91);

    }
  }
  objc_storeStrong((id *)v14 + 18, (id)obj);
  v71 = (unsigned __int8 *)v15;
  v21 = nw_array_create();
  v22 = (unsigned __int8 *)*((_QWORD *)v14 + 19);
  v88[0] = v7;
  v88[1] = 3221225472;
  v88[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_203;
  v88[3] = &unk_1E14A8D20;
  v23 = v7;
  v24 = v14;
  v89 = v24;
  v25 = (id)v21;
  v90 = v25;
  nw_array_apply(v22, (uint64_t)v88);
  v86[0] = v23;
  v86[1] = 3221225472;
  v86[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3_205;
  v86[3] = &unk_1E14AC200;
  v26 = v24;
  v87 = v26;
  nw_array_apply((unsigned __int8 *)v25, (uint64_t)v86);
  v80 = 0;
  v81 = &v80;
  v82 = 0x3032000000;
  v83 = __Block_byref_object_copy__17841;
  v84 = __Block_byref_object_dispose__17842;
  v85 = 0;
  v27 = (void *)*((_QWORD *)v1 + 4);
  if (v27)
  {
    v28 = v23;
    v76[0] = v23;
    v76[1] = 3221225472;
    v76[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_206;
    v76[3] = &unk_1E149CDD0;
    v77 = v26;
    v78 = &v106;
    v79 = &v80;
    nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue(v77, v27, v76);

    v29 = v71;
    v30 = v28;
    goto LABEL_52;
  }
  v30 = v23;
  v29 = v71;
  if (v5 && !*((_DWORD *)v26 + 74))
  {
    v115 = 0uLL;
    nw_path_get_client_id(*((void **)v1 + 22), &v115);
    v31 = -[nw_listener_inbox_socket initWithParameters:delegate:necpUUID:]([nw_listener_inbox_socket alloc], *((void **)v1 + 26), v26, &v115);
    v32 = (void *)v107[5];
    v107[5] = (uint64_t)v31;

    v33 = (void *)v107[5];
    if (!v33)
    {
      v46 = *((_QWORD *)v1 + 2);
      if (v46 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v46 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v47 = (id)glistenerLogObj;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          id_string = nw_listener_get_id_string(v26);
          v49 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v1 + 26);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_listener_reconcile_inboxes_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = id_string;
          *(_WORD *)&buf[22] = 2114;
          v113 = v49;
          _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] failed to create listener inbox with parameters %{public}@", buf, 0x20u);
        }

      }
      v50 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      v37 = v81[5];
      v81[5] = (uint64_t)v50;
      goto LABEL_43;
    }
    objc_msgSend(v33, "start");
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = (void *)v81[5];
    v81[5] = v34;

    v36 = *((_QWORD *)v1 + 2);
    if (v81[5])
    {
      if (v36 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v36 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v37 = (id)glistenerLogObj;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          v38 = nw_listener_get_id_string(v26);
          v39 = (uint64_t (*)(uint64_t, uint64_t))v81[5];
          v40 = v107[5];
          v41 = *((_QWORD *)v1 + 26);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_listener_reconcile_inboxes_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v38;
          *(_WORD *)&buf[22] = 2114;
          v113 = v39;
          *(_WORD *)v114 = 2114;
          *(_QWORD *)&v114[2] = v40;
          *(_WORD *)&v114[10] = 2114;
          *(_QWORD *)&v114[12] = v41;
          _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Error %{public}@ starting inbox %{public}@. Parameters: %{public}@", buf, 0x34u);
        }
LABEL_43:

      }
    }
    else
    {
      if (v36 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v36 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v51 = (id)glistenerLogObj;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          v52 = nw_listener_get_id_string(v26);
          v53 = (uint64_t (*)(uint64_t, uint64_t))v107[5];
          v54 = *((_QWORD *)v1 + 26);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_listener_reconcile_inboxes_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v52;
          *(_WORD *)&buf[22] = 2114;
          v113 = v53;
          *(_WORD *)v114 = 2114;
          *(_QWORD *)&v114[2] = v54;
          _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] Started inbox %{public}@ with parameters %{public}@", buf, 0x2Au);
        }

      }
      nw_array_append(*v16, (void *)v107[5]);
    }
  }
LABEL_52:
  if ((nw_parameters_get_disable_listener_datapath(*((void **)v1 + 26)) & 1) == 0
    && !v81[5]
    && v29
    && *((_QWORD *)v29 + 3) != *((_QWORD *)v29 + 2))
  {
    v73[0] = v30;
    v73[1] = 3221225472;
    v73[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_208;
    v73[3] = &unk_1E14AB5F0;
    v74 = v26;
    v75 = &v80;
    nw_array_apply(v29, (uint64_t)v73);

  }
  v55 = v26;
  nw_context_assert_queue(*((void **)v1 + 3));
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v113 = __Block_byref_object_copy__17841;
  *(_QWORD *)v114 = __Block_byref_object_dispose__17842;
  *(_QWORD *)&v114[8] = 0;
  v56 = *v16;
  if (!*v16)
    goto LABEL_60;
  if (*(_QWORD *)(v56 + 24) == *(_QWORD *)(v56 + 16))
    goto LABEL_60;
  nw_array_get_object_at_index(v56, 0);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "local_endpoint");
  v58 = objc_claimAutoreleasedReturnValue();
  v59 = *(void **)(*(_QWORD *)&buf[8] + 40);
  *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v58;

  v60 = *(void **)(*(_QWORD *)&buf[8] + 40);
  if (!v60)
  {
LABEL_60:
    v61 = (void *)*((_QWORD *)v1 + 22);
    if (v61)
    {
      v62 = v30;
      v63 = v61;
      v64 = (unsigned __int8 *)v63[9];

      *(_QWORD *)&v115 = v62;
      *((_QWORD *)&v115 + 1) = 3221225472;
      v116 = ___ZL40nw_listener_save_local_endpoint_on_queueP22NWConcrete_nw_listener_block_invoke;
      v117 = &unk_1E14A8DC0;
      v118 = buf;
      nw_array_apply(v64, (uint64_t)&v115);

      v60 = *(void **)(*(_QWORD *)&buf[8] + 40);
    }
    else
    {
      v60 = 0;
    }
  }
  nw_listener_set_local_endpoint_on_queue(v55, v60);
  _Block_object_dispose(buf, 8);

  if ((*((_DWORD *)v55 + 32) - 3) < 2 || (*((_BYTE *)v55 + 302) & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v70 = (id)gLogObj;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_listener_reconcile_inboxes_on_queue";
      _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s Listener already cancelled or failed, not modifying listener state", buf, 0xCu);
    }

    goto LABEL_73;
  }
  v65 = (id)v81[5];
  if (v65)
  {
    v66 = v65;
    v67 = v66[2];

    if (v67 == 1)
    {
      v68 = v66;
      v69 = v68[3];

      if (v69 <= 0x30 && ((1 << v69) & 0x1000000402006) != 0)
      {

        nw_listener_set_state_on_queue(v55, 3, (void *)v81[5]);
LABEL_73:
        nw_listener_stop_advertising_on_queue(v55);
        goto LABEL_74;
      }
    }

  }
  if (!*v16 || *(_QWORD *)(*v16 + 24) == *(_QWORD *)(*v16 + 16))
  {
    nw_listener_set_state_on_queue(v55, 1, (void *)v81[5]);
  }
  else
  {
    nw_listener_set_state_on_queue(v55, 2, 0);
    nw_listener_start_advertising_on_queue(v55);
  }
LABEL_74:
  _Block_object_dispose(&v80, 8);

  _Block_object_dispose(&v106, 8);
}

void sub_18351A938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a68;
  void *v68;
  void *v69;
  void *v70;

  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

id nw_listener_find_socket_inbox_match_on_queue(void *a1, void *a2)
{
  id v3;
  id v4;
  unsigned __int8 *v5;
  void *v6;
  id v7;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v3 = a1;
  v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__17841;
  v17 = __Block_byref_object_dispose__17842;
  v18 = 0;
  v5 = (unsigned __int8 *)*((_QWORD *)v3 + 18);
  if (v5)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___ZL44nw_listener_find_socket_inbox_match_on_queueP22NWConcrete_nw_listenerPU27objcproto16OS_nw_parameters8NSObject_block_invoke;
    v9[3] = &unk_1E14A51E8;
    v10 = v4;
    v11 = v3;
    v12 = &v13;
    nw_array_apply(v5, (uint64_t)v9);

    v6 = (void *)v14[5];
  }
  else
  {
    v6 = 0;
  }
  v7 = v6;
  _Block_object_dispose(&v13, 8);

  return v7;
}

void sub_18351AB4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id socket_inbox_match_on_queue;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  socket_inbox_match_on_queue = nw_listener_find_socket_inbox_match_on_queue(*(void **)(a1 + 32), v3);
  if (socket_inbox_match_on_queue)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v6 = (id)glistenerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        v9 = 136446722;
        v10 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
        v11 = 2082;
        v12 = id_string;
        v13 = 2112;
        v14 = socket_inbox_match_on_queue;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] keeping existing multicast socket inbox: %@", (uint8_t *)&v9, 0x20u);
      }

    }
    nw_array_append(*(_QWORD *)(a1 + 40), socket_inbox_match_on_queue);
  }

  return 1;
}

void sub_18351ACA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD enumerate_block[4];
  id v25;
  id v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v11, &type, &v27))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v11)
          goto LABEL_4;
LABEL_39:
        free(v11);
        goto LABEL_4;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v7)
  {
    nw_context_assert_queue(*((void **)v5 + 3));
    v9 = *((_QWORD *)v5 + 4);
    enumerate_block[0] = MEMORY[0x1E0C809B0];
    enumerate_block[1] = 3221225472;
    enumerate_block[2] = ___ZL66nw_listener_enumerate_multicast_parameters_for_descriptor_on_queueP22NWConcrete_nw_listenerPU33objcproto22OS_nw_group_descriptor8NSObjectU13block_pointerFbPU27objcproto16OS_nw_parametersS1_E_block_invoke;
    enumerate_block[3] = &unk_1E149CDF8;
    v25 = v5;
    v26 = v8;
    nw_group_descriptor_enumerate_endpoints(v9, enumerate_block);

    goto LABEL_4;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (!__nwlog_fault(v11, &type, &v27))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v27)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
    v31 = 2082;
    v32 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_39;
LABEL_4:

}

void sub_18351B1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_196(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  nw_protocol_definition_t v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  _BOOL4 is_equal_unsafe;
  char *identifier;
  int should_proxy_transport_at_level;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  id v39;
  id v40;
  id v41;
  unsigned __int8 *v42;
  NSObject *v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  const char *id_string;
  id v48;
  NSObject *v49;
  NSObject *v50;
  nw_protocol_options_t v51;
  NSObject *v52;
  NSObject *v53;
  nw_connection_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  void *v59;
  NSObject *v60;
  _BOOL8 v61;
  uint64_t v62;
  NSObject *v63;
  const char *v64;
  NSObject *v66;
  NSObject *stack;
  NSObject *v68;
  NSObject *v69;
  NSObject *v70;
  NWConcrete_nw_proxy_config *v71;
  _QWORD handler[4];
  id v73;
  NSObject *v74;
  NSObject *v75;
  _BYTE *v76;
  _QWORD iterate_block[4];
  NSObject *v78;
  char v79;
  os_log_type_t type;
  _BYTE buf[24];
  void *v82;
  NSObject *v83;
  _BYTE *v84;
  _BYTE v85[24];
  uint64_t (*v86)(uint64_t, uint64_t);
  void (*v87)(uint64_t);
  id v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (!v4)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_proxy_config_supports_listeners";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (__nwlog_fault(v16, &type, &v79))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_proxy_config_supports_listeners";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v79)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        v21 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_proxy_config_supports_listeners";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_proxy_config_supports_listeners";
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_proxy_config_supports_listeners";
          _os_log_impl(&dword_182FBE000, v17, v33, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_51:
    if (v16)
      free(v16);
    goto LABEL_53;
  }
  v6 = v4[1];
  if (!v6)
  {
LABEL_53:

    goto LABEL_101;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  LOBYTE(v82) = 0;
  *(_QWORD *)v85 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v85[8] = 3221225472;
  *(_QWORD *)&v85[16] = __nw_proxy_config_supports_listeners_block_invoke;
  v86 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E14A1078;
  v87 = (void (*)(uint64_t))buf;
  nw_dictionary_apply(v6, (uint64_t)v85);
  v7 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) == 0;
  _Block_object_dispose(buf, 8);

  if (v7)
    goto LABEL_101;
  stack = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(*(_QWORD *)(a1 + 32) + 16));
  v69 = nw_protocol_stack_copy_transport_protocol(stack);
  v8 = nw_protocol_options_copy_definition(v69);
  v71 = v5;
  v9 = v8;
  v70 = v9;
  if (!v9)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v85 = 136446210;
    *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
    v23 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v23, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = buf[0];
        if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v85 = 136446210;
          *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null transport_protocol", v85, 0xCu);
        }
      }
      else if (type)
      {
        v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v31 = buf[0];
        v32 = os_log_type_enabled(v24, (os_log_type_t)buf[0]);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)v85 = 136446466;
            *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
            *(_WORD *)&v85[12] = 2082;
            *(_QWORD *)&v85[14] = v30;
            _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s called with null transport_protocol, dumping backtrace:%{public}s", v85, 0x16u);
          }

          free(v30);
          goto LABEL_60;
        }
        if (v32)
        {
          *(_DWORD *)v85 = 136446210;
          *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
          _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s called with null transport_protocol, no backtrace", v85, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v37 = buf[0];
        if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v85 = 136446210;
          *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
          _os_log_impl(&dword_182FBE000, v24, v37, "%{public}s called with null transport_protocol, backtrace limit exceeded", v85, 0xCu);
        }
      }

    }
LABEL_60:
    if (v23)
      free(v23);
    should_proxy_transport_at_level = 0;
    v10 = 0;
    goto LABEL_72;
  }
  v10 = v9;
  if (v5[1])
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_54912);
    v11 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v10, (uint64_t)v11);

    v10 = v70;
    if (is_equal_unsafe)
    {
      if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
      v10 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;

    }
    identifier = nw_protocol_definition_get_identifier(v10);
    if (identifier)
    {
      *(_QWORD *)v85 = 0;
      asprintf((char **)v85, "%s%s", "LISTEN-", identifier);
      should_proxy_transport_at_level = nw_proxy_config_should_proxy_transport_at_level(v71, *(const char **)v85, 0);
      v68 = nw_dictionary_copy_value(v5[1], *(uint64_t *)v85);
      if (*(_QWORD *)v85)
        free(*(void **)v85);
      goto LABEL_73;
    }
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v85 = 136446210;
    *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
    v27 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v27, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = buf[0];
      if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v85 = 136446210;
        *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null transport_identifier", v85, 0xCu);
      }
    }
    else if (type)
    {
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v35 = buf[0];
      v36 = os_log_type_enabled(v28, (os_log_type_t)buf[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)v85 = 136446466;
          *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
          *(_WORD *)&v85[12] = 2082;
          *(_QWORD *)&v85[14] = v34;
          _os_log_impl(&dword_182FBE000, v28, v35, "%{public}s called with null transport_identifier, dumping backtrace:%{public}s", v85, 0x16u);
        }

        free(v34);
        goto LABEL_69;
      }
      if (v36)
      {
        *(_DWORD *)v85 = 136446210;
        *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
        _os_log_impl(&dword_182FBE000, v28, v35, "%{public}s called with null transport_identifier, no backtrace", v85, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v38 = buf[0];
      if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v85 = 136446210;
        *(_QWORD *)&v85[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
        _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s called with null transport_identifier, backtrace limit exceeded", v85, 0xCu);
      }
    }

LABEL_69:
    if (v27)
      free(v27);
  }
  should_proxy_transport_at_level = 0;
LABEL_72:
  v68 = 0;
LABEL_73:

  v39 = nw_proxy_config_copy_endpoint(v71);
  v40 = *(id *)(a1 + 32);
  v41 = v39;
  nw_context_assert_queue(*((void **)v40 + 3));
  *(_QWORD *)v85 = 0;
  *(_QWORD *)&v85[8] = v85;
  *(_QWORD *)&v85[16] = 0x3032000000;
  v86 = __Block_byref_object_copy__17841;
  v87 = __Block_byref_object_dispose__17842;
  v88 = 0;
  v42 = (unsigned __int8 *)*((_QWORD *)v40 + 20);
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZL46nw_listener_copy_proxy_connection_for_endpointP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
  v82 = &unk_1E14AB5F0;
  v43 = v41;
  v83 = v43;
  v84 = v85;
  nw_array_apply(v42, (uint64_t)buf);
  v44 = *(id *)(*(_QWORD *)&v85[8] + 40);

  _Block_object_dispose(v85, 8);
  if (v44)
    goto LABEL_99;
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v45 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v45 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v46 = (id)glistenerLogObj;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)v85 = 136446722;
      *(_QWORD *)&v85[4] = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      *(_WORD *)&v85[12] = 2082;
      *(_QWORD *)&v85[14] = id_string;
      *(_WORD *)&v85[22] = 2112;
      v86 = (uint64_t (*)(uint64_t, uint64_t))v43;
      _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Found listener proxy to %@, creating a new connection", v85, 0x20u);
    }

  }
  v48 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  v49 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v48, 0, 0);

  nw_parameters_set_server_mode(v49, 0);
  nw_parameters_set_proxy_applied(v49, 1);
  v50 = nw_parameters_copy_default_protocol_stack(v49);
  nw_protocol_stack_clear_application_protocols(v50);
  if (should_proxy_transport_at_level == 2)
  {
    nw_protocol_stack_append_application_protocol(v50, v69);
    v51 = nw_protocol_stack_copy_internet_protocol(stack);
    nw_protocol_stack_append_application_protocol(v50, v51);

  }
  else if (should_proxy_transport_at_level == 3)
  {
    nw_protocol_stack_append_application_protocol(v50, v69);
  }
  iterate_block[0] = MEMORY[0x1E0C809B0];
  iterate_block[1] = 3221225472;
  iterate_block[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_197;
  iterate_block[3] = &unk_1E14A9960;
  v52 = v50;
  v78 = v52;
  nw_protocol_stack_iterate_application_protocols(v68, iterate_block);
  v53 = nw_protocol_stack_copy_transport_protocol(v68);
  if (v53)
  {
    nw_protocol_stack_set_original_proxied_transport_protocol(v52, v69);
    nw_protocol_stack_set_transport_protocol(v52, v53);
  }
  v66 = v53;
  v54 = nw_connection_create(v43, v49);
  v55 = *(_QWORD *)(a1 + 32);
  if (v54)
  {
    v56 = *(_QWORD *)(v55 + 160);
    if (!v56)
    {
      v57 = nw_array_create();
      v58 = *(_QWORD *)(a1 + 32);
      v59 = *(void **)(v58 + 160);
      *(_QWORD *)(v58 + 160) = v57;

      v56 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160);
    }
    nw_array_append(v56, v54);
    *(_QWORD *)v85 = 0;
    *(_QWORD *)&v85[8] = v85;
    *(_QWORD *)&v85[16] = 0x3032000000;
    v86 = __Block_byref_object_copy__17841;
    v87 = __Block_byref_object_dispose__17842;
    v88 = 0;
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_198;
    handler[3] = &unk_1E149CD58;
    v73 = *(id *)(a1 + 32);
    v60 = v54;
    v74 = v60;
    v75 = v49;
    v76 = v85;
    nw_connection_set_state_changed_handler(v60, handler);
    v61 = nw_queue_copy_current_workloop();
    nw_connection_set_queue(v60, (dispatch_queue_t)v61);

    nw_connection_start(v60);
    _Block_object_dispose(v85, 8);

  }
  else
  {
    v62 = *(_QWORD *)(v55 + 16);
    if (v62 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v62 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v63 = (id)glistenerLogObj;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        v64 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)v85 = 136446722;
        *(_QWORD *)&v85[4] = "nw_listener_reconcile_inboxes_on_queue_block_invoke_2";
        *(_WORD *)&v85[12] = 2082;
        *(_QWORD *)&v85[14] = v64;
        *(_WORD *)&v85[22] = 2112;
        v86 = (uint64_t (*)(uint64_t, uint64_t))v43;
        _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Failed to create proxy connection to %@", v85, 0x20u);
      }

    }
  }

  if (v54)
LABEL_99:

LABEL_101:
  return 1;
}

void sub_18351BF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_200(uint64_t a1, void *a2, const unsigned __int8 *a3)
{
  _BYTE *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  const char *id_string;
  NWConcrete_nw_path_flow_registration *flow_inner;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  NWConcrete_nw_path_flow_registration *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  _QWORD v31[4];
  _QWORD *v32;
  NWConcrete_nw_path_flow_registration *v33;
  char v34;
  os_log_type_t type;
  _BYTE buf[24];
  __int128 v37;
  _BYTE *v38;
  const unsigned __int8 *v39;
  _BYTE v40[24];
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (uuid_is_null(a3))
    goto LABEL_15;
  v6 = *(id *)(a1 + 32);
  v7 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    v8 = v6;
    nw_context_assert_queue(*((void **)v6 + 3));
    *(_QWORD *)v40 = 0;
    *(_QWORD *)&v40[8] = v40;
    *(_QWORD *)&v40[16] = 0x2020000000;
    v41 = 0;
    v9 = (unsigned __int8 *)v8[19];
    *(_QWORD *)buf = v7;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL45nw_listener_has_flow_for_nexus_agent_on_queueP22NWConcrete_nw_listenerPh_block_invoke;
    *(_QWORD *)&v37 = &unk_1E14AAFC8;
    v39 = a3;
    v10 = v8;
    *((_QWORD *)&v37 + 1) = v10;
    v38 = v40;
    nw_array_apply(v9, (uint64_t)buf);
    LODWORD(v9) = *(_BYTE *)(*(_QWORD *)&v40[8] + 24) == 0;

    _Block_object_dispose(v40, 8);
    if (!(_DWORD)v9)
      goto LABEL_15;
    goto LABEL_4;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v40 = 136446210;
  *(_QWORD *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (__nwlog_fault(v23, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)v40 = 136446210;
        *(_QWORD *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null listener", v40, 0xCu);
      }
    }
    else
    {
      if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        v29 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)v40 = 136446466;
            *(_QWORD *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
            *(_WORD *)&v40[12] = 2082;
            *(_QWORD *)&v40[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null listener, dumping backtrace:%{public}s", v40, 0x16u);
          }

          v7 = MEMORY[0x1E0C809B0];
          free(backtrace_string);
        }
        else
        {
          if (v29)
          {
            *(_DWORD *)v40 = 136446210;
            *(_QWORD *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
            _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null listener, no backtrace", v40, 0xCu);
          }

          v7 = MEMORY[0x1E0C809B0];
        }
        goto LABEL_32;
      }
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)v40 = 136446210;
        *(_QWORD *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
        _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s called with null listener, backtrace limit exceeded", v40, 0xCu);
      }
    }

  }
LABEL_32:
  if (v23)
    free(v23);
LABEL_4:
  *(_OWORD *)v40 = *(_OWORD *)a3;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v11 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v11 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v12 = (id)glistenerLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = id_string;
      *(_WORD *)&buf[22] = 1042;
      LODWORD(v37) = 16;
      WORD2(v37) = 2098;
      *(_QWORD *)((char *)&v37 + 6) = v40;
      HIWORD(v37) = 2114;
      v38 = v5;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] adding flow registration for nexus %{public,uuid_t}.16P on %{public}@", buf, 0x30u);
    }

  }
  flow_inner = nw_path_evaluator_create_flow_inner(*(void **)(*(_QWORD *)(a1 + 32) + 168), 0, 1, 0, 0, v40, 0, 0, 0);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152);
  if (v15
    || (v16 = nw_array_create(),
        v17 = *(_QWORD *)(a1 + 32),
        v18 = *(void **)(v17 + 152),
        *(_QWORD *)(v17 + 152) = v16,
        v18,
        v19 = *(_QWORD **)(a1 + 32),
        (v15 = v19[19]) != 0))
  {
    nw_array_append(v15, flow_inner);
    v19 = *(_QWORD **)(a1 + 32);
  }
  v20 = (void *)v19[3];
  v31[0] = v7;
  v31[1] = 3221225472;
  v31[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_201;
  v31[3] = &unk_1E14ACE68;
  v32 = v19;
  v21 = flow_inner;
  v33 = v21;
  nw_queue_context_async(v20, v31);

LABEL_15:
}

void sub_18351C544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_2(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  id v8;
  id v9;
  unsigned __int8 *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v4 = a3;
  if (nw_path_flow_is_assigned(v4) && (nw_path_flow_is_defunct(v4) & 1) == 0)
  {
    v5 = (_QWORD *)a1[4];
    v6 = (void *)v5[26];
    v7 = v5;
    v8 = v4;
    v9 = v6;
    nw_context_assert_queue((void *)v7[3]);
    v20 = 0;
    v21 = &v20;
    v22 = 0x3032000000;
    v23 = __Block_byref_object_copy__17841;
    v24 = __Block_byref_object_dispose__17842;
    v25 = 0;
    v10 = (unsigned __int8 *)v7[18];
    if (v10)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = ___ZL45nw_listener_find_channel_inbox_match_on_queueP22NWConcrete_nw_listenerPU26objcproto15OS_nw_path_flow8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke;
      v16[3] = &unk_1E14A51E8;
      v17 = v8;
      v18 = v9;
      v19 = &v20;
      nw_array_apply(v10, (uint64_t)v16);

      v11 = (void *)v21[5];
    }
    else
    {
      v11 = 0;
    }
    v12 = v11;
    _Block_object_dispose(&v20, 8);

    if (v12)
    {
      v13 = a1[5];
      v14 = v12;
    }
    else
    {
      v13 = a1[6];
      v14 = v8;
    }
    nw_array_append(v13, v14);

  }
  return 1;
}

void sub_18351C6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  id *v6;
  id *v7;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5 || !v4)
      goto LABEL_9;
    v7 = *(id **)(v5 + 16);
    v6 = *(id **)(v5 + 24);
    if (v7 != v6)
    {
      while (*v7 != v4)
      {
        if (++v7 == v6)
        {
          v7 = *(id **)(v5 + 24);
          break;
        }
      }
    }
    if (v7 == v6)
LABEL_9:
      nw_array_append(v5, v4);
  }

  return 1;
}

void sub_18351C7A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  nw_listener_inbox *v4;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  nw_listener_inbox *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v9 = 136446722;
      v10 = "nw_listener_reconcile_inboxes_on_queue_block_invoke_4";
      v11 = 2082;
      v12 = id_string;
      v13 = 2114;
      v14 = v4;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling retired inbox: %{public}@", (uint8_t *)&v9, 0x20u);
    }

  }
  nw_listener_cancel_inbox_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), v4);

  return 1;
}

void sub_18351C8E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_203(uint64_t a1, uint64_t a2, void *a3)
{
  NWConcrete_nw_path_flow_registration *v4;
  _BYTE *v5;
  char v6;
  void *v7;
  _QWORD v9[4];
  NWConcrete_nw_path_flow_registration *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v4 = a3;
  v5 = nw_path_copy_flow_for_registration(*(NWConcrete_nw_path **)(*(_QWORD *)(a1 + 32) + 176), v4);
  if (!v5 || (v6 = v5[186], v5, (v6 & 4) == 0))
  {
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 176);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_2_204;
    v9[3] = &unk_1E149CDA8;
    v10 = v4;
    v11 = &v12;
    nw_path_enumerate_interface_options(v7, v9);

  }
  if (!*((_BYTE *)v13 + 24))
    nw_array_append(*(_QWORD *)(a1 + 40), v4);

  _Block_object_dispose(&v12, 8);
  return 1;
}

void sub_18351C9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3_205(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v9 = 136446722;
      v10 = "nw_listener_reconcile_inboxes_on_queue_block_invoke_3";
      v11 = 2082;
      v12 = id_string;
      v13 = 2114;
      v14 = v4;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Removing flow registration: %{public}@", (uint8_t *)&v9, 0x20u);
    }

  }
  nw_path_flow_registration_close(v4);
  nw_array_remove_object(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 152), (uint64_t)v4);

  return 1;
}

void sub_18351CB60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_206(uint64_t a1, void *a2)
{
  id v3;
  id socket_inbox_match_on_queue;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  void *v27;
  _DWORD *v28;
  uint64_t v29;
  NSObject *v31;
  const char *v32;
  void *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v45 = 0uLL;
  nw_path_get_client_id(*(void **)(*(_QWORD *)(a1 + 32) + 176), &v45);
  socket_inbox_match_on_queue = nw_listener_find_socket_inbox_match_on_queue(*(void **)(a1 + 32), v3);
  if (socket_inbox_match_on_queue)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v6 = (id)glistenerLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        goto LABEL_25;
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v35 = 136446722;
      v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      v37 = 2082;
      v38 = id_string;
      v39 = 2112;
      v40 = socket_inbox_match_on_queue;
      v8 = "%{public}s [%{public}s] Keeping existing multicast socket inbox: %@";
      v9 = v6;
      v10 = OS_LOG_TYPE_INFO;
      v11 = 32;
LABEL_8:
      _os_log_impl(&dword_182FBE000, v9, v10, v8, (uint8_t *)&v35, v11);
LABEL_25:

    }
  }
  else
  {
    v12 = -[nw_listener_inbox_socket initWithParameters:delegate:necpUUID:]([nw_listener_inbox_socket alloc], v3, *(void **)(a1 + 32), &v45);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

    v15 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (!v15)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v24 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v24 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v25 = (id)glistenerLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          v26 = nw_listener_get_id_string(*(void **)(a1 + 32));
          v27 = *(void **)(*(_QWORD *)(a1 + 32) + 208);
          v35 = 136446722;
          v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          v37 = 2082;
          v38 = v26;
          v39 = 2114;
          v40 = v27;
          _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] failed to create multicast listener inbox with parameters %{public}@", (uint8_t *)&v35, 0x20u);
        }

      }
      v28 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v6 = *(NSObject **)(v29 + 40);
      *(_QWORD *)(v29 + 40) = v28;
      goto LABEL_25;
    }
    objc_msgSend(v15, "setMulticast:", 1);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "start");
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    {
      if (v19 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v19 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v6 = (id)glistenerLogObj;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          goto LABEL_25;
        v20 = nw_listener_get_id_string(*(void **)(a1 + 32));
        v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208);
        v35 = 136447234;
        v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
        v37 = 2082;
        v38 = v20;
        v39 = 2114;
        v40 = v21;
        v41 = 2114;
        v42 = v22;
        v43 = 2114;
        v44 = v23;
        v8 = "%{public}s [%{public}s] Error %{public}@ starting multicast inbox %{public}@. Parameters: %{public}@";
        v9 = v6;
        v10 = OS_LOG_TYPE_ERROR;
        v11 = 52;
        goto LABEL_8;
      }
    }
    else
    {
      if (v19 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v19 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v31 = (id)glistenerLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          v32 = nw_listener_get_id_string(*(void **)(a1 + 32));
          v33 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          v34 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208);
          v35 = 136446978;
          v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          v37 = 2082;
          v38 = v32;
          v39 = 2114;
          v40 = v33;
          v41 = 2114;
          v42 = v34;
          _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] Started multicast inbox %{public}@ with parameters %{public}@", (uint8_t *)&v35, 0x2Au);
        }

      }
      nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    }
  }

  return 1;
}

void sub_18351D000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_208(uint64_t a1, uint64_t a2, void *a3)
{
  id *v4;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  id *v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  id *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint32_t v21;
  uint64_t v22;
  const char *v23;
  id *v24;
  NSObject *v25;
  const char *v26;
  id *v27;
  _BOOL8 v28;
  int v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  id *v35;
  __int16 v36;
  id *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v30 = 136446722;
      v31 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      v32 = 2082;
      v33 = id_string;
      v34 = 2114;
      v35 = v4;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] creating new flow for %{public}@", (uint8_t *)&v30, 0x20u);
    }

  }
  v8 = -[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]((id *)[nw_ip_channel_inbox alloc], *(void **)(*(_QWORD *)(a1 + 32) + 176), v4, *(void **)(*(_QWORD *)(a1 + 32) + 208), *(void **)(a1 + 32));
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "start");
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    {
      if (v13 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v13 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v14 = (id)glistenerLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          goto LABEL_23;
        v15 = nw_listener_get_id_string(*(void **)(a1 + 32));
        v16 = *(id **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208);
        v30 = 136447234;
        v31 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
        v32 = 2082;
        v33 = v15;
        v34 = 2114;
        v35 = v16;
        v36 = 2114;
        v37 = v9;
        v38 = 2114;
        v39 = v17;
        v18 = "%{public}s [%{public}s] Error %{public}@ starting inbox %{public}@. Parameters: %{public}@";
        v19 = v14;
        v20 = OS_LOG_TYPE_ERROR;
        v21 = 52;
LABEL_22:
        _os_log_impl(&dword_182FBE000, v19, v20, v18, (uint8_t *)&v30, v21);
LABEL_23:

      }
    }
    else
    {
      if (v13 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v13 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v25 = (id)glistenerLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = nw_listener_get_id_string(*(void **)(a1 + 32));
          v27 = *(id **)(*(_QWORD *)(a1 + 32) + 208);
          v30 = 136446978;
          v31 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          v32 = 2082;
          v33 = v26;
          v34 = 2114;
          v35 = v9;
          v36 = 2114;
          v37 = v27;
          _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] Started inbox %{public}@ with parameters %{public}@", (uint8_t *)&v30, 0x2Au);
        }

      }
      nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), v9);
    }
  }
  else
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v22 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v22 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v14 = (id)glistenerLogObj;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      v23 = nw_listener_get_id_string(*(void **)(a1 + 32));
      v24 = *(id **)(*(_QWORD *)(a1 + 32) + 208);
      v30 = 136446722;
      v31 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      v32 = 2082;
      v33 = v23;
      v34 = 2114;
      v35 = v24;
      v18 = "%{public}s [%{public}s] Failed to create IP channel flow for %{public}@";
      v19 = v14;
      v20 = OS_LOG_TYPE_DEFAULT;
      v21 = 32;
      goto LABEL_22;
    }
  }
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) == 0;

  return v28;
}

void sub_18351D41C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_listener_save_local_endpoint_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v4 = a3;
  if (nw_path_flow_is_assigned(v4)
    && (nw_path_flow_is_defunct(v4) & 1) == 0
    && (v5 = nw_path_flow_copy_local_endpoint(v4)) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = 0;
  }
  else
  {
    v8 = 1;
  }

  return v8;
}

void nw_listener_set_local_endpoint_on_queue(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  __int16 v6;
  id v7;
  id v8;
  void (**v9)(_QWORD);
  _QWORD aBlock[4];
  id v11;
  id v12;
  __int16 v13;

  v3 = a1;
  v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  if (v4)
  {
    v5 = v4;
    v6 = __rev16(objc_msgSend(v5, "port"));

  }
  else
  {
    v6 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL39nw_listener_set_local_endpoint_on_queueP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
  aBlock[3] = &unk_1E149CE20;
  v7 = v3;
  v11 = v7;
  v8 = v4;
  v12 = v8;
  v13 = v6;
  v9 = (void (**)(_QWORD))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
  v9[2](v9);
  os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);

}

void sub_18351D5B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_listener_set_state_on_queue(void *a1, int a2, void *a3)
{
  unsigned int *v5;
  id v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *id_string;
  char *v25;
  int v26;
  char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  const char *v32;
  const char *backtrace_string;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  NSObject *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  const char *v46;
  uint64_t v47;
  NWConcrete_nw_listener *v48;
  void (**v49)(_QWORD);
  char v50;
  id v51;
  NWConcrete_nw_listener *v52;
  void (**v53)(_QWORD);
  uint64_t v54;
  NSObject *v55;
  NWConcrete_nw_listener *v56;
  char *v57;
  dispatch_qos_class_t v58;
  NSObject *v59;
  dispatch_block_t v60;
  uint64_t v61;
  NSObject *v62;
  NWConcrete_nw_listener *v63;
  char *v64;
  os_log_type_t v65;
  uint64_t v66;
  const char *v67;
  os_log_type_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  char *v72;
  _QWORD v73[4];
  id v74;
  NWConcrete_nw_listener *v75;
  _BYTE *v76;
  int v77;
  _QWORD aBlock[4];
  NWConcrete_nw_listener *v79;
  _BYTE *v80;
  os_log_type_t *v81;
  int v82;
  os_log_type_t type[8];
  os_log_type_t *v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  void (*v87)(uint64_t);
  id v88;
  uint8_t v89[4];
  const char *v90;
  __int16 v91;
  char *v92;
  __int16 v93;
  char *v94;
  __int16 v95;
  id v96;
  _BYTE buf[24];
  void *(*v98)(uint64_t, uint64_t);
  _BYTE v99[20];
  __int16 v100;
  const char *v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  nw_context_assert_queue(*((void **)v5 + 3));
  v7 = v5[32];
  if (v7 < 3 || (v7 == 3 ? (v13 = a2 == 4) : (v13 = 0), v13))
  {
    if (v7 == a2)
    {
      v8 = *((id *)v5 + 17);
      v9 = v6;
      v10 = v9;
      if (v8 && v9)
      {
        if (v8[2] != v9[2])
        {

          goto LABEL_49;
        }
        v11 = v8[3];
        v12 = v9[3];

        if (v11 != v12)
          goto LABEL_49;
      }
      else
      {

        if (v8 != v10)
          goto LABEL_29;
      }
      if ((*((_BYTE *)v5 + 302) & 2) != 0)
      {
        v19 = (void *)*((_QWORD *)v5 + 2);
        if (!v19)
          goto LABEL_98;
        v20 = v19;
        v21 = v20[12];

        if ((v21 & 0x4000000) == 0)
        {
          v22 = *((_QWORD *)v5 + 2);
          if (v22 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v22 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1)
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
            v23 = (id)glistenerLogObj;
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_listener_get_id_string(v5);
              v25 = off_1E149CE68[a2];
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_listener_set_state_on_queue";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = id_string;
              *(_WORD *)&buf[22] = 2082;
              v98 = (void *(*)(uint64_t, uint64_t))v25;
              *(_WORD *)v99 = 2114;
              *(_QWORD *)&v99[2] = v10;
              _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Skipping update for identical state and error (state: %{public}s, error: %{public}@)", buf, 0x2Au);
            }

          }
          goto LABEL_98;
        }
      }
    }
LABEL_29:
    if (!v6 && a2 == 1 && !v5[32])
    {
      v26 = 1;
      goto LABEL_50;
    }
LABEL_49:
    v26 = 0;
    *((_BYTE *)v5 + 302) |= 2u;
LABEL_50:
    v39 = *((_QWORD *)v5 + 2);
    if (v39 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v39 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v40 = (id)glistenerLogObj;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        v41 = v5;
        v42 = v41 + 42;

        v43 = v5[32];
        if (v43 > 4)
          v44 = "<unknown>";
        else
          v44 = off_1E149CE68[v43];
        v45 = off_1E149CE68[a2];
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_listener_set_state_on_queue";
        v46 = "";
        *(_QWORD *)&buf[14] = v42;
        *(_WORD *)&buf[12] = 2082;
        if (v26)
          v46 = ", suppressing client notification";
        *(_WORD *)&buf[22] = 2082;
        v98 = (void *(*)(uint64_t, uint64_t))v44;
        *(_WORD *)v99 = 2082;
        *(_QWORD *)&v99[2] = v45;
        *(_WORD *)&v99[10] = 2114;
        *(_QWORD *)&v99[12] = v6;
        v100 = 2082;
        v101 = v46;
        _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] %{public}s -> %{public}s, error: %{public}@%{public}s", buf, 0x3Eu);
      }

    }
    objc_storeStrong((id *)v5 + 17, a3);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v98 = __Block_byref_object_copy__3;
    *(_QWORD *)v99 = __Block_byref_object_dispose__4;
    *(_QWORD *)&v99[8] = 0;
    *(_QWORD *)type = 0;
    v84 = type;
    v85 = 0x3032000000;
    v86 = __Block_byref_object_copy__17841;
    v87 = __Block_byref_object_dispose__17842;
    v88 = 0;
    v47 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    aBlock[3] = &unk_1E149CCE0;
    v48 = v5;
    v82 = a2;
    v79 = v48;
    v80 = buf;
    v81 = type;
    v49 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v5 + 2);
    v49[2](v49);
    os_unfair_lock_unlock((os_unfair_lock_t)v5 + 2);

    if ((a2 - 3) <= 1)
      nw_listener_teardown_on_queue(v48);
    if (*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
      v50 = v26;
    else
      v50 = 1;
    if ((v50 & 1) == 0)
    {
      v73[0] = v47;
      v73[1] = 3221225472;
      v73[2] = ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2;
      v73[3] = &unk_1E149CD08;
      v76 = buf;
      v77 = a2;
      v51 = v6;
      v74 = v51;
      v52 = v48;
      v75 = v52;
      v53 = (void (**)(_QWORD))_Block_copy(v73);
      if (*((_QWORD *)v84 + 5))
      {
        v54 = *((_QWORD *)v5 + 2);
        if (v54 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v54 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v55 = (id)glistenerLogObj;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            v56 = v52;

            v57 = off_1E149CE68[a2];
            *(_DWORD *)v89 = 136446978;
            v90 = "nw_listener_set_state_on_queue";
            v91 = 2082;
            v92 = (char *)v56 + 42;
            v93 = 2082;
            v94 = v57;
            v95 = 2114;
            v96 = v51;
            _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] reporting state %{public}s (%{public}@)", v89, 0x2Au);
          }

        }
        v58 = *((_DWORD *)v52 + 18);
        v59 = *((id *)v84 + 5);
        v60 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v58, 0, v53);
        dispatch_async(v59, v60);

      }
      else if (nw_context_is_inline(*((void **)v5 + 3)))
      {
        v61 = *((_QWORD *)v5 + 2);
        if (v61 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v61 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v62 = (id)glistenerLogObj;
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            v63 = v52;

            v64 = off_1E149CE68[a2];
            *(_DWORD *)v89 = 136446978;
            v90 = "nw_listener_set_state_on_queue";
            v91 = 2082;
            v92 = (char *)v63 + 42;
            v93 = 2082;
            v94 = v64;
            v95 = 2114;
            v96 = v51;
            _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] reporting state %{public}s (%{public}@) inline", v89, 0x2Au);
          }

        }
        v53[2](v53);
      }

    }
    _Block_object_dispose(type, 8);

    _Block_object_dispose(buf, 8);
    goto LABEL_98;
  }
  v14 = *((_QWORD *)v5 + 2);
  if (!v14 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)))
    goto LABEL_98;
  if (__nwlog_listener_log::onceToken != -1)
    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
  v15 = (id)glistenerLogObj;
  v16 = v5;

  v17 = v5[32];
  if (v17 > 4)
    v18 = "<unknown>";
  else
    v18 = off_1E149CE68[v17];
  v27 = off_1E149CE68[a2];
  *(_DWORD *)buf = 136446978;
  *(_QWORD *)&buf[4] = "nw_listener_set_state_on_queue";
  *(_WORD *)&buf[12] = 2082;
  *(_QWORD *)&buf[14] = (char *)v16 + 42;
  *(_WORD *)&buf[22] = 2082;
  v98 = (void *(*)(uint64_t, uint64_t))v18;
  *(_WORD *)v99 = 2082;
  v72 = v27;
  *(_QWORD *)&v99[2] = v27;
  v28 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v89[0] = 0;
  if (__nwlog_fault(v28, type, v89))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v29 = (id)glistenerLogObj;
      v30 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {

        v31 = v5[32];
        if (v31 > 4)
          v32 = "<unknown>";
        else
          v32 = off_1E149CE68[v31];
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_listener_set_state_on_queue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)v16 + 42;
        *(_WORD *)&buf[22] = 2082;
        v98 = (void *(*)(uint64_t, uint64_t))v32;
        *(_WORD *)v99 = 2082;
        *(_QWORD *)&v99[2] = v72;
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s", buf, 0x2Au);
      }
    }
    else if (v89[0])
    {
      backtrace_string = __nw_create_backtrace_string();
      if (backtrace_string)
      {
        v34 = (char *)backtrace_string;
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v35 = (id)glistenerLogObj;
        v36 = type[0];
        if (os_log_type_enabled(v35, type[0]))
        {

          v37 = v5[32];
          if (v37 > 4)
            v38 = "<unknown>";
          else
            v38 = off_1E149CE68[v37];
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_listener_set_state_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = (char *)v16 + 42;
          *(_WORD *)&buf[22] = 2082;
          v98 = (void *(*)(uint64_t, uint64_t))v38;
          *(_WORD *)v99 = 2082;
          *(_QWORD *)&v99[2] = v72;
          *(_WORD *)&v99[10] = 2082;
          *(_QWORD *)&v99[12] = v34;
          _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s, dumping backtrace:%{public}s", buf, 0x34u);
        }

        free(v34);
        if (v28)
          goto LABEL_97;
        goto LABEL_98;
      }
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v29 = (id)glistenerLogObj;
      v68 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {
        v69 = nw_listener_get_id_string(v16);
        v70 = v5[32];
        if (v70 > 4)
          v71 = "<unknown>";
        else
          v71 = off_1E149CE68[v70];
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_listener_set_state_on_queue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v69;
        *(_WORD *)&buf[22] = 2082;
        v98 = (void *(*)(uint64_t, uint64_t))v71;
        *(_WORD *)v99 = 2082;
        *(_QWORD *)&v99[2] = v72;
        _os_log_impl(&dword_182FBE000, v29, v68, "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s, no backtrace", buf, 0x2Au);
      }
    }
    else
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v29 = (id)glistenerLogObj;
      v65 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {

        v66 = v5[32];
        if (v66 > 4)
          v67 = "<unknown>";
        else
          v67 = off_1E149CE68[v66];
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_listener_set_state_on_queue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)v16 + 42;
        *(_WORD *)&buf[22] = 2082;
        v98 = (void *(*)(uint64_t, uint64_t))v67;
        *(_WORD *)v99 = 2082;
        *(_QWORD *)&v99[2] = v72;
        _os_log_impl(&dword_182FBE000, v29, v65, "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s, backtrace limit exceeded", buf, 0x2Au);
      }
    }

  }
  if (v28)
LABEL_97:
    free(v28);
LABEL_98:

}

void sub_18351E168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v39 - 192), 8);

  _Unwind_Resume(a1);
}

void nw_listener_stop_advertising_on_queue(NWConcrete_nw_listener *a1)
{
  NWConcrete_nw_listener *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NWConcrete_nw_listener *v6;
  void (**v7)(_QWORD);
  _QWORD aBlock[4];
  NWConcrete_nw_listener *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *((id *)v1 + 34);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v11;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v2);
        -[_NWAdvertiser stop](*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v5++));
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL37nw_listener_stop_advertising_on_queueP22NWConcrete_nw_listener_block_invoke;
  aBlock[3] = &unk_1E14ACFD0;
  v6 = v1;
  v9 = v6;
  v7 = (void (**)(_QWORD))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
  v7[2](v7);
  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);

}

void sub_18351E350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void nw_listener_start_advertising_on_queue(NWConcrete_nw_listener *a1)
{
  NWConcrete_nw_listener *v1;
  id *v2;
  id *v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  id v6;
  NWConcrete_nw_listener *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *id_string;
  const char *backtrace_string;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  os_log_type_t v17;
  const char *v18;
  os_log_type_t v19;
  const char *v20;
  _QWORD aBlock[4];
  NWConcrete_nw_listener *v22;
  id *v23;
  _BYTE *v24;
  char v25;
  os_log_type_t type;
  _BYTE buf[24];
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  if (*((_QWORD *)v1 + 33) && *((_DWORD *)v1 + 32) == 2 && (*((_BYTE *)v1 + 302) & 1) == 0 && !*((_QWORD *)v1 + 34))
  {
    v2 = -[_NWAdvertiser initFor:descriptor:parent:parameters:]((id *)[_NWAdvertiser alloc], v1, *((void **)v1 + 33), 0, *((void **)v1 + 26));
    if (v2)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      LOBYTE(v28) = 1;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL38nw_listener_start_advertising_on_queueP22NWConcrete_nw_listener_block_invoke;
      aBlock[3] = &unk_1E14A2D98;
      v22 = v1;
      v3 = v2;
      v23 = v3;
      v24 = buf;
      v4 = (void (**)(_QWORD))_Block_copy(aBlock);
      os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
      v4[2](v4);
      os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);

      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
        -[_NWAdvertiser start]((uint64_t)v3);

      _Block_object_dispose(buf, 8);
      goto LABEL_39;
    }
    v5 = *((_QWORD *)v1 + 2);
    if (!v5 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
    {
LABEL_39:

      goto LABEL_40;
    }
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v6 = (id)glistenerLogObj;
    v7 = v1;

    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_listener_start_advertising_on_queue";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = (char *)v7 + 42;
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v8, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v9 = (id)glistenerLogObj;
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          id_string = nw_listener_get_id_string(v7);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_start_advertising_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = id_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s [%{public}s] Failed to create advertiser", buf, 0x16u);
        }
      }
      else if (v25)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          v13 = (char *)backtrace_string;
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v14 = (id)glistenerLogObj;
          v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            v16 = nw_listener_get_id_string(v7);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_listener_start_advertising_on_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v16;
            *(_WORD *)&buf[22] = 2082;
            v28 = v13;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s [%{public}s] Failed to create advertiser, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v13);
          goto LABEL_37;
        }
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v9 = (id)glistenerLogObj;
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          v20 = nw_listener_get_id_string(v7);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_start_advertising_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v20;
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s [%{public}s] Failed to create advertiser, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v9 = (id)glistenerLogObj;
        v17 = type;
        if (os_log_type_enabled(v9, type))
        {
          v18 = nw_listener_get_id_string(v7);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_start_advertising_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v18;
          _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s [%{public}s] Failed to create advertiser, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
LABEL_37:
    if (v8)
      free(v8);
    goto LABEL_39;
  }
LABEL_40:

}

void sub_18351E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18351EE44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_start_advertising_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  const char *id_string;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  const char *v16;
  os_log_type_t v17;
  const char *v18;
  const char *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  char *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 272))
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (!v3 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
      goto LABEL_15;
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v4 = (id)glistenerLogObj;
    id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
    *(_DWORD *)buf = 136446466;
    v23 = "nw_listener_start_advertising_on_queue_block_invoke";
    v24 = 2082;
    v25 = id_string;
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v6, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v7 = (id)glistenerLogObj;
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          v9 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          v23 = "nw_listener_start_advertising_on_queue_block_invoke";
          v24 = 2082;
          v25 = v9;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s [%{public}s] advertisers already set", buf, 0x16u);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v7 = (id)glistenerLogObj;
        v14 = type;
        v15 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v15)
          {
            v16 = nw_listener_get_id_string(*(void **)(a1 + 32));
            *(_DWORD *)buf = 136446722;
            v23 = "nw_listener_start_advertising_on_queue_block_invoke";
            v24 = 2082;
            v25 = v16;
            v26 = 2082;
            v27 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s [%{public}s] advertisers already set, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          if (!v6)
            goto LABEL_15;
          goto LABEL_14;
        }
        if (v15)
        {
          v19 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          v23 = "nw_listener_start_advertising_on_queue_block_invoke";
          v24 = 2082;
          v25 = v19;
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s [%{public}s] advertisers already set, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v7 = (id)glistenerLogObj;
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          v18 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          v23 = "nw_listener_start_advertising_on_queue_block_invoke";
          v24 = 2082;
          v25 = v18;
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s [%{public}s] advertisers already set, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
    if (!v6)
    {
LABEL_15:
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
      return;
    }
LABEL_14:
    free(v6);
    goto LABEL_15;
  }
  v28[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 1);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 272);
  *(_QWORD *)(v11 + 272) = v10;

}

void sub_18351FC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

id nw_listener_copy_parameters_with_port(void *a1, const char *a2, int a3)
{
  NSObject *v5;
  _BOOL8 v6;
  nw_endpoint_t v7;
  nw_endpoint_t v8;
  NSObject *v9;
  int v10;
  int address_family;
  NSObject *v12;
  int v13;
  id v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  NSObject *host;
  id v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  id v26;
  os_log_type_t v27;
  sockaddr *address;
  const char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *backtrace_string;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  NSObject *v37;
  id v38;
  id v39;
  os_log_type_t v40;
  os_log_type_t v41;
  os_log_type_t v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  os_log_type_t v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  os_log_type_t v54;
  os_log_type_t v55;
  char *v56;
  os_log_type_t v57;
  char v59;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  char *v64;
  __int16 v65;
  char *v66;
  __int16 v67;
  char *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v5, 0, 0);

  v7 = nw_parameters_copy_local_endpoint(v5);
  v8 = v7;
  if (!v7)
  {
    host = nw_endpoint_create_host("::", a2);
    if (host)
    {
LABEL_14:
      nw_parameters_set_local_endpoint((nw_parameters_t)v6, host);

      goto LABEL_49;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v62 = "nw_listener_copy_parameters_with_port";
    v15 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v15, &type, &v59))
      goto LABEL_105;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s nw_endpoint_create_host failed", buf, 0xCu);
      }
    }
    else if (v59)
    {
      backtrace_string = __nw_create_backtrace_string();
      if (backtrace_string)
      {
        v34 = (char *)backtrace_string;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v35 = (id)gLogObj;
        v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_listener_copy_parameters_with_port";
          v63 = 2082;
          v64 = v34;
          _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s nw_endpoint_create_host failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        if (!v15)
          goto LABEL_108;
        goto LABEL_106;
      }
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v50 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_182FBE000, v24, v50, "%{public}s nw_endpoint_create_host failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      v42 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_182FBE000, v24, v42, "%{public}s nw_endpoint_create_host failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_104:

    goto LABEL_105;
  }
  v9 = v7;
  v10 = -[NSObject type](v9, "type");

  if (v10 != 1)
  {
    if (!a3)
      goto LABEL_49;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v62 = "nw_listener_copy_parameters_with_port";
    v63 = 2114;
    v64 = (char *)v9;
    v20 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v20, &type, &v59))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        v62 = "nw_listener_copy_parameters_with_port";
        v63 = 2114;
        v64 = (char *)v9;
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s Local endpoint is not an address: %{public}@", buf, 0x16u);
      }
    }
    else if (v59)
    {
      v29 = __nw_create_backtrace_string();
      if (v29)
      {
        v30 = (char *)v29;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v31 = (id)gLogObj;
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446722;
          v62 = "nw_listener_copy_parameters_with_port";
          v63 = 2114;
          v64 = (char *)v9;
          v65 = 2082;
          v66 = v30;
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s Local endpoint is not an address: %{public}@, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v30);
        if (!v20)
          goto LABEL_108;
        goto LABEL_95;
      }
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        v62 = "nw_listener_copy_parameters_with_port";
        v63 = 2114;
        v64 = (char *)v9;
        _os_log_impl(&dword_182FBE000, v21, v49, "%{public}s Local endpoint is not an address: %{public}@, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      v41 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        v62 = "nw_listener_copy_parameters_with_port";
        v63 = 2114;
        v64 = (char *)v9;
        _os_log_impl(&dword_182FBE000, v21, v41, "%{public}s Local endpoint is not an address: %{public}@, backtrace limit exceeded", buf, 0x16u);
      }
    }
    goto LABEL_93;
  }
  address_family = nw_endpoint_get_address_family(v9);
  if (address_family != 30 && address_family != 2)
  {
    if (!a3)
      goto LABEL_49;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v62 = "nw_listener_copy_parameters_with_port";
    v63 = 2114;
    v64 = (char *)v9;
    v20 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v20, &type, &v59))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      v27 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        v62 = "nw_listener_copy_parameters_with_port";
        v63 = 2114;
        v64 = (char *)v9;
        _os_log_impl(&dword_182FBE000, v21, v27, "%{public}s Local endpoint has unsupported family: %{public}@", buf, 0x16u);
      }
    }
    else if (v59)
    {
      v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      v45 = os_log_type_enabled(v21, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446722;
          v62 = "nw_listener_copy_parameters_with_port";
          v63 = 2114;
          v64 = (char *)v9;
          v65 = 2082;
          v66 = v43;
          _os_log_impl(&dword_182FBE000, v21, v44, "%{public}s Local endpoint has unsupported family: %{public}@, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v43);
        if (!v20)
          goto LABEL_108;
        goto LABEL_95;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        v62 = "nw_listener_copy_parameters_with_port";
        v63 = 2114;
        v64 = (char *)v9;
        _os_log_impl(&dword_182FBE000, v21, v44, "%{public}s Local endpoint has unsupported family: %{public}@, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        v62 = "nw_listener_copy_parameters_with_port";
        v63 = 2114;
        v64 = (char *)v9;
        _os_log_impl(&dword_182FBE000, v21, v54, "%{public}s Local endpoint has unsupported family: %{public}@, backtrace limit exceeded", buf, 0x16u);
      }
    }
LABEL_93:

LABEL_94:
    if (!v20)
      goto LABEL_108;
LABEL_95:
    v56 = (char *)v20;
LABEL_107:
    free(v56);
    goto LABEL_108;
  }
  v12 = v9;
  v13 = -[NSObject port](v12, "port");

  if (!v13)
  {
    address = (sockaddr *)nw_endpoint_get_address(v12);
    host = nw_endpoint_create_address_with_port(&address->sa_len, a2);
    if (host)
      goto LABEL_14;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v39 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v62 = "nw_listener_copy_parameters_with_port";
    v15 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v15, &type, &v59))
      goto LABEL_105;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_182FBE000, v24, v40, "%{public}s nw_endpoint_create_address_with_port failed", buf, 0xCu);
      }
    }
    else if (v59)
    {
      v51 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v52 = type;
      v53 = os_log_type_enabled(v24, type);
      if (v51)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_listener_copy_parameters_with_port";
          v63 = 2082;
          v64 = v51;
          _os_log_impl(&dword_182FBE000, v24, v52, "%{public}s nw_endpoint_create_address_with_port failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v51);
        if (!v15)
          goto LABEL_108;
        goto LABEL_106;
      }
      if (v53)
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_182FBE000, v24, v52, "%{public}s nw_endpoint_create_address_with_port failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v57 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_182FBE000, v24, v57, "%{public}s nw_endpoint_create_address_with_port failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_104;
  }
  if (!strncmp(a2, "0", 2uLL))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v37 = (id)gLogObj;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v62 = "nw_listener_copy_parameters_with_port";
      _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Create with port used port 0, using port from local endpoint", buf, 0xCu);
    }

  }
  else if (a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v62 = "nw_listener_copy_parameters_with_port";
    v63 = 2082;
    v64 = (char *)a2;
    v65 = 2114;
    v66 = (char *)v12;
    v15 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (__nwlog_fault(v15, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446722;
          v62 = "nw_listener_copy_parameters_with_port";
          v63 = 2082;
          v64 = (char *)a2;
          v65 = 2114;
          v66 = (char *)v12;
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s Local endpoint has port set, cannot override to %{public}s: %{public}@", buf, 0x20u);
        }
      }
      else if (v59)
      {
        v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        v48 = os_log_type_enabled(v16, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446978;
            v62 = "nw_listener_copy_parameters_with_port";
            v63 = 2082;
            v64 = (char *)a2;
            v65 = 2114;
            v66 = (char *)v12;
            v67 = 2082;
            v68 = v46;
            _os_log_impl(&dword_182FBE000, v16, v47, "%{public}s Local endpoint has port set, cannot override to %{public}s: %{public}@, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v46);
          if (!v15)
            goto LABEL_108;
          goto LABEL_106;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446722;
          v62 = "nw_listener_copy_parameters_with_port";
          v63 = 2082;
          v64 = (char *)a2;
          v65 = 2114;
          v66 = (char *)v12;
          _os_log_impl(&dword_182FBE000, v16, v47, "%{public}s Local endpoint has port set, cannot override to %{public}s: %{public}@, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v55 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446722;
          v62 = "nw_listener_copy_parameters_with_port";
          v63 = 2082;
          v64 = (char *)a2;
          v65 = 2114;
          v66 = (char *)v12;
          _os_log_impl(&dword_182FBE000, v16, v55, "%{public}s Local endpoint has port set, cannot override to %{public}s: %{public}@, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
LABEL_105:
    if (v15)
    {
LABEL_106:
      v56 = (char *)v15;
      goto LABEL_107;
    }
LABEL_108:
    v38 = 0;
    goto LABEL_109;
  }
LABEL_49:
  v38 = (id)v6;
LABEL_109:

  return v38;
}

void sub_183520B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_183520D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_183520E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_183520F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void _NWAdvertiser_dnssd_handler(_DNSServiceRef_t *a1, int a2, int a3, const char *a4, const char *a5, const char *a6, void *a7)
{
  void **v13;
  uint64_t v14;
  NSObject *v15;
  const char *id_string;
  const char *v17;
  const char *v18;
  const char *v19;
  id WeakRetained;
  void *v21;
  _DWORD *dns_error;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  NSObject *v30;
  nw_endpoint_t bonjour_service;
  uint64_t v32;
  os_unfair_lock_s *v33;
  void (**v34)(_QWORD);
  void *v35;
  dispatch_qos_class_t v36;
  NSObject *v37;
  dispatch_block_t v38;
  void **v39;
  _QWORD block[4];
  NSObject *v41;
  uint64_t *v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *(*v47)(uint64_t, uint64_t);
  void (*v48)(uint64_t);
  id v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  id v55;
  _BYTE buf[24];
  _BYTE v57[32];
  const char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v13 = a7;
  v39 = v13;
  if (v13 && v13[8] == a1)
  {
    nw_context_assert_queue(*((void **)v13[1] + 3));
    v14 = *((_QWORD *)v39[1] + 2);
    if (v14 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v15 = (id)glistenerLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_listener_get_id_string(v39[1]);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "-[_NWAdvertiser handleBonjourUpdateFlags:error:name:type:domain:]";
        v17 = "<NULL>";
        *(_WORD *)&buf[12] = 2082;
        if (a4)
          v18 = a4;
        else
          v18 = "<NULL>";
        *(_QWORD *)&buf[14] = id_string;
        *(_WORD *)&buf[22] = 1024;
        if (a5)
          v19 = a5;
        else
          v19 = "<NULL>";
        *(_DWORD *)v57 = a2;
        if (a6)
          v17 = a6;
        *(_WORD *)&v57[4] = 1024;
        *(_DWORD *)&v57[6] = a3;
        *(_WORD *)&v57[10] = 2082;
        *(_QWORD *)&v57[12] = v18;
        *(_WORD *)&v57[20] = 2082;
        *(_QWORD *)&v57[22] = v19;
        *(_WORD *)&v57[30] = 2082;
        v58 = v17;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] flags=0x%x, error=%d, name=%{public}s, type=%{public}s, domain=%{public}s", buf, 0x40u);
      }

    }
    WeakRetained = objc_loadWeakRetained(v39 + 3);
    v21 = WeakRetained;
    if (a3)
    {
      dns_error = nw_error_create_dns_error(a3);
      v23 = *((_QWORD *)v39[1] + 2);
      if (v23 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v23 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v24 = (id)glistenerLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = nw_listener_get_id_string(v39[1]);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "-[_NWAdvertiser handleBonjourUpdateFlags:error:name:type:domain:]";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v25;
          *(_WORD *)&buf[22] = 2114;
          *(_QWORD *)v57 = dns_error;
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Error advertising bonjour service: %{public}@", buf, 0x20u);
        }

      }
      v26 = v39[1];
      if (a3 == -65570)
      {
        v27 = v26[2];
        if (v27 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v27 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v28 = (id)glistenerLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            v29 = nw_listener_get_id_string(v39[1]);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "-[_NWAdvertiser handleBonjourUpdateFlags:error:name:type:domain:]";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v29;
            _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] advertising denied by policy", buf, 0x16u);
          }

        }
      }
      else
      {
        nw_listener_set_state_on_queue(v26, 3, dns_error);
      }

      v30 = 0;
    }
    else
    {
      v30 = 0;
      if (a4)
      {
        if (a5)
        {
          if (a6)
          {
            if (!WeakRetained)
            {
              bonjour_service = nw_endpoint_create_bonjour_service(a4, a5, a6);
              v30 = bonjour_service;
              if ((a2 & 2) != 0)
              {
                v50 = 0;
                v51 = &v50;
                v52 = 0x3032000000;
                v53 = __Block_byref_object_copy__17841;
                v54 = __Block_byref_object_dispose__17842;
                v55 = 0;
                v44 = 0;
                v45 = &v44;
                v46 = 0x3032000000;
                v47 = __Block_byref_object_copy__3;
                v48 = __Block_byref_object_dispose__4;
                v49 = 0;
                v32 = MEMORY[0x1E0C809B0];
                v33 = (os_unfair_lock_s *)v39[1];
                *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                *(_QWORD *)&buf[8] = 3221225472;
                *(_QWORD *)&buf[16] = __65___NWAdvertiser_handleBonjourUpdateFlags_error_name_type_domain___block_invoke;
                *(_QWORD *)v57 = &unk_1E149CBF0;
                *(_QWORD *)&v57[8] = v39;
                v30 = bonjour_service;
                *(_QWORD *)&v57[16] = v30;
                *(_QWORD *)&v57[24] = &v50;
                v58 = (const char *)&v44;
                v34 = (void (**)(_QWORD))_Block_copy(buf);
                v33 += 2;
                os_unfair_lock_lock(v33);
                v34[2](v34);
                os_unfair_lock_unlock(v33);

                if (v30)
                {
                  if (v45[5])
                  {
                    v35 = (void *)v51[5];
                    if (v35)
                    {
                      v36 = *((_DWORD *)v39[1] + 18);
                      block[0] = v32;
                      block[1] = 3221225472;
                      block[2] = __65___NWAdvertiser_handleBonjourUpdateFlags_error_name_type_domain___block_invoke_2;
                      block[3] = &unk_1E14AB438;
                      v42 = &v44;
                      v41 = v30;
                      v43 = 1;
                      v37 = v35;
                      v38 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v36, 0, block);
                      dispatch_async(v37, v38);

                    }
                  }
                }

                _Block_object_dispose(&v44, 8);
                _Block_object_dispose(&v50, 8);

              }
            }
          }
        }
      }
    }

  }
}

void sub_18352149C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

id *nw_listener_reconcile_advertised_endpoints(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  _QWORD *v9;
  id v10;
  unsigned __int8 *v11;
  id v12;
  void **v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void *v23;
  id *v24;
  id v25;
  _DWORD *v26;
  int v27;
  id *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  _BOOL4 v31;
  unsigned __int8 *v33;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[4];
  id v46;
  id v47;
  _QWORD *v48;
  void **v49;
  uint64_t *v50;
  _BYTE *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t);
  id v62;
  uint8_t v63[128];
  _BYTE buf[24];
  uint64_t (*v65)(uint64_t, uint64_t);
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = v9[2];
  if (v14 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v15 = (id)glistenerLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      v16 = v9;
      v17 = v16 + 42;

      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_listener_reconcile_advertised_endpoints";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2112;
      v65 = (uint64_t (*)(uint64_t, uint64_t))v11;
      LOWORD(v66) = 2112;
      *(_QWORD *)((char *)&v66 + 2) = v12;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Reconciling advertised endpoints %@ for path %@", buf, 0x2Au);
    }

  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v65 = __Block_byref_object_copy__17841;
  *(_QWORD *)&v66 = __Block_byref_object_dispose__17842;
  *((_QWORD *)&v66 + 1) = 0;
  v57 = 0;
  v58 = &v57;
  v59 = 0x3032000000;
  v60 = __Block_byref_object_copy__17841;
  v61 = __Block_byref_object_dispose__17842;
  v62 = 0;
  v53 = 0;
  v54 = &v53;
  v55 = 0x2020000000;
  v56 = 0;
  if (v11)
  {
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 3221225472;
    v45[2] = ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke;
    v45[3] = &unk_1E14AA9A0;
    v50 = &v57;
    v46 = v10;
    v47 = v12;
    v48 = v9;
    v49 = v13;
    v51 = buf;
    v52 = &v53;
    nw_array_apply(v11, (uint64_t)v45);

  }
  if (!v13 || nw_advertise_descriptor_get_type(v13[2]) == 2)
  {
    nw_listener_set_device_id(v9, v54[3]);
    nw_listener_set_authorized_keys(v9, (void *)v58[5]);
  }
  if (v10)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v18 = v10;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v41, v63, 16);
    if (v19)
    {
      v20 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v42 != v20)
            objc_enumerationMutation(v18);
          v22 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * i);
          if ((objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "containsObject:", v22) & 1) == 0)
            -[_NWAdvertiser stop](v22);
        }
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v41, v63, 16);
      }
      while (v19);
    }

  }
  if (!v12)
    goto LABEL_36;
  v23 = *(void **)(*(_QWORD *)&buf[8] + 40);
  if (v23)
  {
    if (objc_msgSend(v23, "count"))
      goto LABEL_36;
  }
  v24 = (id *)v12;
  v25 = v24[6];

  if (!v25 || (v26 = v25, v27 = v26[2], v26, v27 != 2))
  {
LABEL_35:

LABEL_36:
    v28 = (id *)*(id *)(*(_QWORD *)&buf[8] + 40);
    goto LABEL_37;
  }
  v28 = v24;
  v29 = (unsigned __int8 *)v28[9];

  if (!v29)
    goto LABEL_34;
  v35 = 0;
  v36 = &v35;
  v37 = 0x3032000000;
  v38 = __Block_byref_object_copy__17841;
  v39 = __Block_byref_object_dispose__17842;
  v40 = 0;
  v34[1] = 3221225472;
  v34[2] = ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke_192;
  v34[3] = &unk_1E14A8DC0;
  v34[4] = &v35;
  v33 = v29;
  v34[0] = MEMORY[0x1E0C809B0];
  nw_array_apply(v29, (uint64_t)v34);
  v30 = v36[5];
  if (v30)
  {
    nw_listener_set_state_on_queue(v9, 3, (void *)v36[5]);
    v28 = (id *)*(id *)(*(_QWORD *)&buf[8] + 40);
  }
  v31 = v30 == 0;
  _Block_object_dispose(&v35, 8);

  v29 = v33;
  if (v31)
  {
LABEL_34:

    goto LABEL_35;
  }

LABEL_37:
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v57, 8);

  _Block_object_dispose(buf, 8);
  return v28;
}

void sub_183521A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id a50)
{
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;

  _Block_object_dispose(&a15, 8);

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);

  _Block_object_dispose((const void *)(v56 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  const char *bonjour_service_domain;
  const char *bonjour_service_name;
  const char *bonjour_service_type;
  NSObject *bonjour_service;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void **v22;
  id *v23;
  void **v24;
  nw_parameters_t *v25;
  nw_parameters_t v26;
  _BOOL4 v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  id v31;
  uint64_t v32;
  char *v33;
  int v34;
  void *v35;
  char *v36;
  NSObject *v37;
  char *v38;
  uint64_t v39;
  id v40;
  const char *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  const char *v45;
  uint64_t v46;
  NSObject *v47;
  const char *id_string;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  const char *v57;
  os_log_type_t v58;
  const char *v59;
  os_log_type_t v60;
  const char *v61;
  char *backtrace_string;
  _BOOL4 v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  const char *v72;
  int v73;
  uint64_t v74;
  dispatch_time_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  os_log_type_t v80;
  NSObject *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;
  os_log_type_t type;
  os_log_type_t v89[8];
  uint64_t v90;
  void (*v91)(uint64_t);
  void *v92;
  char *v93;
  void **v94;
  uint8_t v95[128];
  uint8_t buf[4];
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  char *v103;
  __int16 v104;
  char *v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = nw_endpoint_copy_public_keys(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v7 = *(void **)(v6 + 40);
    if (v7)
    {
      objc_msgSend(v7, "arrayByAddingObjectsFromArray:", v5);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;
    }
    else
    {
      v11 = v5;
      v10 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v11;
    }

  }
  nw_endpoint_set_txt_record(v4, 0);
  v12 = v4;
  if (nw_endpoint_get_type(v12) == nw_endpoint_type_bonjour_service)
  {
    bonjour_service_domain = nw_endpoint_get_bonjour_service_domain(v12);
    bonjour_service_name = nw_endpoint_get_bonjour_service_name(v12);
    bonjour_service_type = nw_endpoint_get_bonjour_service_type(v12);
    bonjour_service = nw_advertise_descriptor_create_bonjour_service(bonjour_service_name, bonjour_service_type, bonjour_service_domain);
    v17 = nw_endpoint_copy_txt_record(v12);
    nw_advertise_descriptor_set_txt_record_object(bonjour_service, v17);

    nw_advertise_descriptor_set_no_auto_rename(bonjour_service, 1);
    if (bonjour_service)
    {
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v18 = *(id *)(a1 + 32);
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v83, v95, 16);
      if (v19)
      {
        v20 = *(_QWORD *)v84;
        while (2)
        {
          for (i = 0; i != v19; ++i)
          {
            if (*(_QWORD *)v84 != v20)
              objc_enumerationMutation(v18);
            v22 = *(void ***)(*((_QWORD *)&v83 + 1) + 8 * i);
            if (nw_advertise_descriptor_is_equal(bonjour_service, v22[2], 0))
            {
              v24 = v22;
              goto LABEL_58;
            }
          }
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v83, v95, 16);
          if (v19)
            continue;
          break;
        }
      }

      v18 = (id)nw_path_copy_derived_parameters(*(void **)(a1 + 40));
      v23 = -[_NWAdvertiser initFor:descriptor:parent:parameters:]((id *)[_NWAdvertiser alloc], *(void **)(a1 + 48), bonjour_service, *(void **)(a1 + 56), v18);
      if (v23)
      {
        v24 = v23;
        if (!objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count"))
          goto LABEL_50;
        v25 = (nw_parameters_t *)*(id *)(a1 + 48);
        if (!nw_parameters_get_include_peer_to_peer(v25[2])
          || nw_parameters_get_multipath_service(v25[2]) == nw_multipath_service_disabled
          || (v26 = v25[33]) == 0)
        {

          goto LABEL_50;
        }
        v27 = nw_advertise_descriptor_get_type(v26) == 2;

        if (!v27)
        {
LABEL_50:
          v46 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
          if (v46 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v46 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1)
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
            v47 = (id)glistenerLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
            {
              id_string = nw_listener_get_id_string(*(void **)(a1 + 48));
              *(_DWORD *)buf = 136446722;
              v97 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
              v98 = 2082;
              v99 = id_string;
              v100 = 2112;
              v101 = (uint64_t)bonjour_service;
              _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Creating new advertiser for %@", buf, 0x20u);
            }

          }
          -[_NWAdvertiser start](v24);
LABEL_58:

          v49 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
          if (v49)
          {
            objc_msgSend(v49, "arrayByAddingObject:", v24);
          }
          else
          {
            v94 = v24;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v94, 1);
          }
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
          v52 = *(void **)(v51 + 40);
          *(_QWORD *)(v51 + 40) = v50;

          if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = nw_endpoint_get_device_id(v12);
          goto LABEL_83;
        }
        v28 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
        if (v28 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v28 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v29 = (id)glistenerLogObj;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            v30 = nw_listener_get_id_string(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136446466;
            v97 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
            v98 = 2082;
            v99 = v30;
            _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Got new keys, starting advertising timer", buf, 0x16u);
          }

        }
        v31 = *(id *)(a1 + 48);
        nw_context_assert_queue(*((void **)v31 + 3));
        v32 = *((_QWORD *)v31 + 31);
        nw_listener_stop_advertise_timer_on_queue((NWConcrete_nw_listener *)v31);
        *(_QWORD *)v89 = MEMORY[0x1E0C809B0];
        v90 = 3221225472;
        v91 = ___ZL42nw_listener_start_advertise_timer_on_queueP22NWConcrete_nw_listener_block_invoke;
        v92 = &unk_1E14ACFD0;
        v33 = (char *)v31;
        v93 = v33;
        *((_QWORD *)v31 + 31) = nw_queue_context_create_source(0, 2, 3, 0, v89, 0);
        if (v32)
        {
LABEL_106:
          v74 = *((_QWORD *)v31 + 31);
          v75 = dispatch_time(0x8000000000000000, 30000000000);
          nw_queue_set_timer_values(v74, v75, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          nw_queue_activate_source(*((_QWORD *)v31 + 31), v76);
          v77 = *((_QWORD *)v33 + 2);
          if (v77 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v77 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1)
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
            v78 = (id)glistenerLogObj;
            if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446466;
              v97 = "nw_listener_start_advertise_timer_on_queue";
              v98 = 2082;
              v99 = v33 + 42;
              _os_log_impl(&dword_182FBE000, v78, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Started advertise listener timeout", buf, 0x16u);
            }

          }
          goto LABEL_50;
        }
        v34 = (unsigned __int16)(*((_WORD *)v33 + 120))++ + 1;
        if ((v34 & 0x10000) == 0)
        {
LABEL_99:
          v70 = *((_QWORD *)v33 + 2);
          if (v70 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v70 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1)
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
            v71 = (id)glistenerLogObj;
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              v72 = nw_listener_get_id_string(v33);
              v73 = *((unsigned __int16 *)v33 + 120);
              *(_DWORD *)buf = 136446722;
              v97 = "nw_listener_start_advertise_timer_on_queue";
              v98 = 2082;
              v99 = v72;
              v100 = 1024;
              LODWORD(v101) = v73;
              _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Incrementing AWDL usage to %d for timer", buf, 0x1Cu);
            }

          }
          goto LABEL_106;
        }
        __nwlog_obj();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = (char *)*((unsigned __int16 *)v33 + 120);
        *(_DWORD *)buf = 136446978;
        v97 = "nw_listener_start_advertise_timer_on_queue";
        v98 = 2082;
        v99 = "listener->awdl_use_count";
        v100 = 2048;
        v101 = 1;
        v102 = 2048;
        v103 = v36;
        v82 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v87 = 0;
        if (__nwlog_fault(v82, &type, &v87))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v37 = objc_claimAutoreleasedReturnValue();
            v80 = type;
            if (os_log_type_enabled(v37, type))
            {
              v38 = (char *)*((unsigned __int16 *)v33 + 120);
              *(_DWORD *)buf = 136446978;
              v97 = "nw_listener_start_advertise_timer_on_queue";
              v98 = 2082;
              v99 = "listener->awdl_use_count";
              v100 = 2048;
              v101 = 1;
              v102 = 2048;
              v103 = v38;
              _os_log_impl(&dword_182FBE000, v37, v80, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
            }

          }
          else
          {
            if (v87)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v81 = objc_claimAutoreleasedReturnValue();
              v79 = type;
              v64 = os_log_type_enabled(v81, type);
              if (backtrace_string)
              {
                if (v64)
                {
                  v65 = (char *)*((unsigned __int16 *)v33 + 120);
                  *(_DWORD *)buf = 136447234;
                  v97 = "nw_listener_start_advertise_timer_on_queue";
                  v98 = 2082;
                  v99 = "listener->awdl_use_count";
                  v100 = 2048;
                  v101 = 1;
                  v102 = 2048;
                  v103 = v65;
                  v104 = 2082;
                  v105 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v81, v79, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }

                free(backtrace_string);
                goto LABEL_96;
              }
              if (v64)
              {
                v69 = (char *)*((unsigned __int16 *)v33 + 120);
                *(_DWORD *)buf = 136446978;
                v97 = "nw_listener_start_advertise_timer_on_queue";
                v98 = 2082;
                v99 = "listener->awdl_use_count";
                v100 = 2048;
                v101 = 1;
                v102 = 2048;
                v103 = v69;
                _os_log_impl(&dword_182FBE000, v81, v79, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
              }
            }
            else
            {
              __nwlog_obj();
              v66 = objc_claimAutoreleasedReturnValue();
              v67 = type;
              v81 = v66;
              if (os_log_type_enabled(v66, type))
              {
                v68 = (char *)*((unsigned __int16 *)v33 + 120);
                *(_DWORD *)buf = 136446978;
                v97 = "nw_listener_start_advertise_timer_on_queue";
                v98 = 2082;
                v99 = "listener->awdl_use_count";
                v100 = 2048;
                v101 = 1;
                v102 = 2048;
                v103 = v68;
                _os_log_impl(&dword_182FBE000, v81, v67, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
              }
            }

          }
        }
LABEL_96:
        if (v82)
          free(v82);
        *((_WORD *)v33 + 120) = -1;
        goto LABEL_99;
      }
      v39 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      if (!v39 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v39 + 104)))
      {
LABEL_82:

        v24 = 0;
LABEL_83:

        goto LABEL_84;
      }
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v40 = (id)glistenerLogObj;
      v41 = nw_listener_get_id_string(*(void **)(a1 + 48));
      *(_DWORD *)buf = 136446722;
      v97 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
      v98 = 2082;
      v99 = v41;
      v100 = 2112;
      v101 = (uint64_t)bonjour_service;
      v42 = (char *)_os_log_send_and_compose_impl();

      v89[0] = OS_LOG_TYPE_ERROR;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v42, v89, &type))
      {
        if (v89[0] == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v43 = (id)glistenerLogObj;
          v44 = v89[0];
          if (os_log_type_enabled(v43, v89[0]))
          {
            v45 = nw_listener_get_id_string(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136446722;
            v97 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
            v98 = 2082;
            v99 = v45;
            v100 = 2112;
            v101 = (uint64_t)bonjour_service;
            _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s [%{public}s] failed to create advertiser for %@", buf, 0x20u);
          }
        }
        else if (type)
        {
          v53 = __nw_create_backtrace_string();
          if (v53)
          {
            v54 = (char *)v53;
            if (__nwlog_listener_log::onceToken != -1)
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
            v55 = (id)glistenerLogObj;
            v56 = v89[0];
            if (os_log_type_enabled(v55, v89[0]))
            {
              v57 = nw_listener_get_id_string(*(void **)(a1 + 48));
              *(_DWORD *)buf = 136446978;
              v97 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
              v98 = 2082;
              v99 = v57;
              v100 = 2112;
              v101 = (uint64_t)bonjour_service;
              v102 = 2082;
              v103 = v54;
              _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s [%{public}s] failed to create advertiser for %@, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v54);
            goto LABEL_80;
          }
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v43 = (id)glistenerLogObj;
          v60 = v89[0];
          if (os_log_type_enabled(v43, v89[0]))
          {
            v61 = nw_listener_get_id_string(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136446722;
            v97 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
            v98 = 2082;
            v99 = v61;
            v100 = 2112;
            v101 = (uint64_t)bonjour_service;
            _os_log_impl(&dword_182FBE000, v43, v60, "%{public}s [%{public}s] failed to create advertiser for %@, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v43 = (id)glistenerLogObj;
          v58 = v89[0];
          if (os_log_type_enabled(v43, v89[0]))
          {
            v59 = nw_listener_get_id_string(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136446722;
            v97 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
            v98 = 2082;
            v99 = v59;
            v100 = 2112;
            v101 = (uint64_t)bonjour_service;
            _os_log_impl(&dword_182FBE000, v43, v58, "%{public}s [%{public}s] failed to create advertiser for %@, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_80:
      if (v42)
        free(v42);
      goto LABEL_82;
    }
  }
  else
  {

  }
LABEL_84:

  return 1;
}

void sub_1835228F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void nw_listener_set_device_id(void *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  void (**v5)(_QWORD);
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  os_unfair_lock_s *v15;
  uint64_t v16;
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_device_id_block_invoke;
    aBlock[3] = &unk_1E14AA348;
    v16 = a2;
    v15 = v3;
    v5 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v4 + 2);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_listener_set_device_id";
  v7 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_device_id";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v18;
      v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_listener_set_device_id";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_device_id";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_device_id";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_183522CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void nw_listener_set_authorized_keys(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void *v5;
  void (**v6)(_QWORD);
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD aBlock[4];
  id v16;
  os_unfair_lock_s *v17;
  char v18;
  os_log_type_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_authorized_keys_block_invoke;
    aBlock[3] = &unk_1E14ACE68;
    v16 = v4;
    v17 = v3;
    v6 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v6[2](v6);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_listener_set_authorized_keys";
  v8 = (char *)_os_log_send_and_compose_impl();

  v19 = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v8, &v19, &v18))
  {
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_listener_set_authorized_keys";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v19;
      v13 = os_log_type_enabled(v9, v19);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_listener_set_authorized_keys";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_listener_set_authorized_keys";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_listener_set_authorized_keys";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

void sub_183522FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_183523410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  uint64_t v35;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);

  _Block_object_dispose((const void *)(v35 - 256), 8);
  _Unwind_Resume(a1);
}

BOOL ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke_192(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;

  v4 = a3;
  v5 = nw_path_flow_copy_error(v4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) == 0;
  return v8;
}

void __nw_listener_set_authorized_keys_block_invoke(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {

  }
  else
  {
    v3 = gLogFDOverride;

    if (v3 == -1)
      goto LABEL_34;
  }
  v4 = objc_msgSend(*(id *)(a1 + 32), "count");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  if (v4)
  {
    if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v6 = (id)glistenerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 40));
        *(_DWORD *)buf = 136446466;
        v25 = "nw_listener_set_authorized_keys_block_invoke";
        v26 = 2082;
        v27 = id_string;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Resetting authorized keys", buf, 0x16u);
      }

    }
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v8 = *(id *)(a1 + 32);
    v9 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v20, v30, 16);
    if (v9)
    {
      v11 = *(_QWORD *)v21;
      *(_QWORD *)&v10 = 136446722;
      v19 = v10;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v21 != v11)
            objc_enumerationMutation(v8);
          v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
          if (v13)
          {
            v14 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v12);
            if (!nw_path_parameters_get_logging_disabled(*(_QWORD *)(v13 + 104)))
            {
              if (__nwlog_listener_log::onceToken != -1)
                dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
              v15 = (id)glistenerLogObj;
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                v16 = nw_listener_get_id_string(*(void **)(a1 + 40));
                v17 = objc_msgSend(v14, "hash");
                *(_DWORD *)buf = v19;
                v25 = "nw_listener_set_authorized_keys_block_invoke";
                v26 = 2082;
                v27 = v16;
                v28 = 2048;
                v29 = v17;
                _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Authorized key #0x%lx", buf, 0x20u);
              }

            }
          }
          ++v12;
        }
        while (v9 != v12);
        v9 = -[NSObject countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v20, v30, 16);
      }
      while (v9);
    }
  }
  else
  {
    if (!v5 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
      goto LABEL_34;
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v8 = (id)glistenerLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v18 = nw_listener_get_id_string(*(void **)(a1 + 40));
      *(_DWORD *)buf = 136446466;
      v25 = "nw_listener_set_authorized_keys_block_invoke";
      v26 = 2082;
      v27 = v18;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] No keys provided", buf, 0x16u);
    }
  }

LABEL_34:
  if (objc_msgSend(*(id *)(a1 + 32), "count", v19, (_QWORD)v20))
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 216), *(id *)(a1 + 32));
}

void sub_183523904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_listener_set_device_id_block_invoke(uint64_t a1)
{
  const char *v2;
  char *v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *v7;

  v2 = *(const char **)(a1 + 40);
  if (v2)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 232))
    {
      free(*(void **)(*(_QWORD *)(a1 + 32) + 232));
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) = 0;
      v2 = *(const char **)(a1 + 40);
      if (!v2)
      {
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
        v5 = (void *)_os_log_send_and_compose_impl();

        if (__nwlog_abort((uint64_t)v5))
          goto LABEL_11;
        free(v5);
        v2 = 0;
      }
    }
    v3 = strdup(v2);
    if (v3)
    {
LABEL_5:
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) = v3;
      return;
    }
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v7))
    {
      free(v7);
      goto LABEL_5;
    }
LABEL_11:
    __break(1u);
  }
}

void nw_listener_stop_advertise_timer_on_queue(NWConcrete_nw_listener *a1)
{
  NWConcrete_nw_listener *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NWConcrete_nw_listener *v5;
  char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  if (*((_QWORD *)v1 + 31))
  {
    v3 = *((_QWORD *)v1 + 2);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = v1;
        v6 = (char *)v5 + 42;

        v7 = 136446466;
        v8 = "nw_listener_stop_advertise_timer_on_queue";
        v9 = 2082;
        v10 = v6;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Stopping listener timeout", (uint8_t *)&v7, 0x16u);
      }

    }
    nw_queue_cancel_source(*((_QWORD *)v1 + 31), v2);
    *((_QWORD *)v1 + 31) = 0;
  }

}

void sub_183523C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL42nw_listener_start_advertise_timer_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *id_string;
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v2 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v2 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v3 = (id)glistenerLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v5 = 136446466;
      v6 = "nw_listener_start_advertise_timer_on_queue_block_invoke";
      v7 = 2082;
      v8 = id_string;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Advertise listener timeout", (uint8_t *)&v5, 0x16u);
    }

  }
  nw_listener_adjust_awdl_usage_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 248) = 0;
}

void nw_listener_adjust_awdl_usage_on_queue(NWConcrete_nw_listener *a1, int a2)
{
  NWConcrete_nw_listener *v3;
  int v4;
  id v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NWConcrete_nw_listener *v13;
  int v14;
  const char *v15;
  id v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  NWConcrete_nw_listener *v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  NWConcrete_nw_listener *v27;
  NWConcrete_nw_listener *v28;
  uint64_t v29;
  NSObject *v30;
  NWConcrete_nw_listener *v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  nw_context_assert_queue(*((void **)v3 + 3));
  v4 = *((unsigned __int16 *)v3 + 120);
  if (a2)
  {
    *((_WORD *)v3 + 120) = v4 + 1;
    if (((v4 + 1) & 0x10000) == 0)
    {
LABEL_11:
      v11 = *((_QWORD *)v3 + 2);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v11 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v12 = (id)glistenerLogObj;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          goto LABEL_33;
        v13 = v3;

        v14 = *((unsigned __int16 *)v3 + 120);
        *(_DWORD *)buf = 136446722;
        v49 = "nw_listener_adjust_awdl_usage_on_queue";
        v50 = 2082;
        v51 = (char *)v13 + 42;
        v52 = 1024;
        LODWORD(v53) = v14;
        v15 = "%{public}s [%{public}s] Incrementing AWDL usage to %d";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, v15, buf, 0x1Cu);
LABEL_33:

        goto LABEL_34;
      }
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v6 = *((unsigned __int16 *)v3 + 120);
    *(_DWORD *)buf = 136446978;
    v49 = "nw_listener_adjust_awdl_usage_on_queue";
    v50 = 2082;
    v51 = "listener->awdl_use_count";
    v52 = 2048;
    v53 = 1;
    v54 = 2048;
    v55 = v6;
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v7, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          v10 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          v49 = "nw_listener_adjust_awdl_usage_on_queue";
          v50 = 2082;
          v51 = "listener->awdl_use_count";
          v52 = 2048;
          v53 = 1;
          v54 = 2048;
          v55 = v10;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
      }
      else if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v33 = type;
        v34 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v34)
          {
            v35 = *((unsigned __int16 *)v3 + 120);
            *(_DWORD *)buf = 136447234;
            v49 = "nw_listener_adjust_awdl_usage_on_queue";
            v50 = 2082;
            v51 = "listener->awdl_use_count";
            v52 = 2048;
            v53 = 1;
            v54 = 2048;
            v55 = v35;
            v56 = 2082;
            v57 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v33, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(backtrace_string);
          if (!v7)
            goto LABEL_10;
          goto LABEL_9;
        }
        if (v34)
        {
          v44 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          v49 = "nw_listener_adjust_awdl_usage_on_queue";
          v50 = 2082;
          v51 = "listener->awdl_use_count";
          v52 = 2048;
          v53 = 1;
          v54 = 2048;
          v55 = v44;
          _os_log_impl(&dword_182FBE000, v8, v33, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v40 = type;
        if (os_log_type_enabled(v8, type))
        {
          v41 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          v49 = "nw_listener_adjust_awdl_usage_on_queue";
          v50 = 2082;
          v51 = "listener->awdl_use_count";
          v52 = 2048;
          v53 = 1;
          v54 = 2048;
          v55 = v41;
          _os_log_impl(&dword_182FBE000, v8, v40, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
        }
      }

    }
    if (!v7)
    {
LABEL_10:
      *((_WORD *)v3 + 120) = -1;
      goto LABEL_11;
    }
LABEL_9:
    free(v7);
    goto LABEL_10;
  }
  *((_WORD *)v3 + 120) = v4 - 1;
  if ((v4 - 1) >= 0x10000)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    v17 = *((unsigned __int16 *)v3 + 120);
    *(_DWORD *)buf = 136446978;
    v49 = "nw_listener_adjust_awdl_usage_on_queue";
    v50 = 2082;
    v51 = "listener->awdl_use_count";
    v52 = 2048;
    v53 = 1;
    v54 = 2048;
    v55 = v17;
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v18, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          v21 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          v49 = "nw_listener_adjust_awdl_usage_on_queue";
          v50 = 2082;
          v51 = "listener->awdl_use_count";
          v52 = 2048;
          v53 = 1;
          v54 = 2048;
          v55 = v21;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      else if (v46)
      {
        v36 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v37 = type;
        v38 = os_log_type_enabled(v19, type);
        if (v36)
        {
          if (v38)
          {
            v39 = *((unsigned __int16 *)v3 + 120);
            *(_DWORD *)buf = 136447234;
            v49 = "nw_listener_adjust_awdl_usage_on_queue";
            v50 = 2082;
            v51 = "listener->awdl_use_count";
            v52 = 2048;
            v53 = 1;
            v54 = 2048;
            v55 = v39;
            v56 = 2082;
            v57 = v36;
            _os_log_impl(&dword_182FBE000, v19, v37, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(v36);
          if (!v18)
            goto LABEL_25;
          goto LABEL_24;
        }
        if (v38)
        {
          v45 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          v49 = "nw_listener_adjust_awdl_usage_on_queue";
          v50 = 2082;
          v51 = "listener->awdl_use_count";
          v52 = 2048;
          v53 = 1;
          v54 = 2048;
          v55 = v45;
          _os_log_impl(&dword_182FBE000, v19, v37, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v42 = type;
        if (os_log_type_enabled(v19, type))
        {
          v43 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          v49 = "nw_listener_adjust_awdl_usage_on_queue";
          v50 = 2082;
          v51 = "listener->awdl_use_count";
          v52 = 2048;
          v53 = 1;
          v54 = 2048;
          v55 = v43;
          _os_log_impl(&dword_182FBE000, v19, v42, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
        }
      }

    }
    if (!v18)
    {
LABEL_25:
      *((_WORD *)v3 + 120) = 0;
      goto LABEL_26;
    }
LABEL_24:
    free(v18);
    goto LABEL_25;
  }
LABEL_26:
  v22 = *((_QWORD *)v3 + 2);
  if (v22 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v22 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v12 = (id)glistenerLogObj;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      goto LABEL_33;
    v23 = v3;

    v24 = *((unsigned __int16 *)v3 + 120);
    *(_DWORD *)buf = 136446722;
    v49 = "nw_listener_adjust_awdl_usage_on_queue";
    v50 = 2082;
    v51 = (char *)v23 + 42;
    v52 = 1024;
    LODWORD(v53) = v24;
    v15 = "%{public}s [%{public}s] Decrementing AWDL usage to %d";
    goto LABEL_32;
  }
LABEL_34:
  if (!v4 && *((_WORD *)v3 + 120))
  {
    v25 = *((_QWORD *)v3 + 2);
    if (v25 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v25 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v26 = (id)glistenerLogObj;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        v27 = v3;

        *(_DWORD *)buf = 136446466;
        v49 = "nw_listener_adjust_awdl_usage_on_queue";
        v50 = 2082;
        v51 = (char *)v27 + 42;
        _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Start advertising over AWDL", buf, 0x16u);
      }

    }
    v28 = v3;
    nw_context_assert_queue(*((void **)v3 + 3));
    if (*((_DWORD *)v28 + 32) != 2 || (*((_BYTE *)v28 + 302) & 1) != 0)
      goto LABEL_58;
    goto LABEL_57;
  }
  if (v4 && !*((_WORD *)v3 + 120))
  {
    v29 = *((_QWORD *)v3 + 2);
    if (v29 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v29 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v30 = (id)glistenerLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        v31 = v3;

        *(_DWORD *)buf = 136446466;
        v49 = "nw_listener_adjust_awdl_usage_on_queue";
        v50 = 2082;
        v51 = (char *)v31 + 42;
        _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Stop advertising over AWDL", buf, 0x16u);
      }

    }
    v28 = v3;
    nw_context_assert_queue(*((void **)v3 + 3));
    if (*((_DWORD *)v28 + 32) != 2 || (*((_BYTE *)v28 + 302) & 1) != 0)
      goto LABEL_58;
LABEL_57:
    nw_listener_stop_advertising_on_queue(v28);
    nw_listener_start_advertising_on_queue(v28);
LABEL_58:

  }
}

void sub_1835247C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1835249B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183524AA0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void ___ZL37nw_listener_stop_advertising_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 272);
  *(_QWORD *)(v1 + 272) = 0;

}

void ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128) = *(_DWORD *)(a1 + 56);
  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 80));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 64));
}

void nw_listener_teardown_on_queue(NWConcrete_nw_listener *a1)
{
  NWConcrete_nw_listener *v1;
  NWConcrete_nw_listener *v2;
  void *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  void *v6;
  void *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NWConcrete_nw_listener *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, void *);
  void *v17;
  NWConcrete_nw_listener *v18;

  v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  v2 = v1;
  nw_context_assert_queue(*((void **)v1 + 3));
  v3 = (void *)*((_QWORD *)v2 + 18);
  v4 = MEMORY[0x1E0C809B0];
  if (v3)
  {
    v5 = v3;
    v6 = (void *)*((_QWORD *)v2 + 18);
    *((_QWORD *)v2 + 18) = 0;

    v14 = v4;
    v15 = 3221225472;
    v16 = ___ZL39nw_listener_cancel_all_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke;
    v17 = &unk_1E14AC200;
    v18 = v2;
    nw_array_apply(v5, (uint64_t)&v14);

  }
  v13 = v2;
  nw_context_assert_queue(*((void **)v1 + 3));
  v7 = (void *)*((_QWORD *)v13 + 20);
  if (v7)
  {
    v8 = v7;
    v9 = (void *)*((_QWORD *)v13 + 20);
    *((_QWORD *)v13 + 20) = 0;

    v14 = v4;
    v15 = 3221225472;
    v16 = ___ZL49nw_listener_cancel_all_proxy_connections_on_queueP22NWConcrete_nw_listener_block_invoke;
    v17 = &unk_1E14AC200;
    v18 = v13;
    nw_array_apply(v8, (uint64_t)&v14);

  }
  nw_listener_stop_advertising_on_queue(v13);
  v10 = (void *)*((_QWORD *)v13 + 21);
  if (v10)
  {
    nw_path_evaluator_cancel(v10);
    v11 = (void *)*((_QWORD *)v13 + 21);
    *((_QWORD *)v13 + 21) = 0;

  }
  v12 = (void *)*((_QWORD *)v13 + 19);
  *((_QWORD *)v13 + 19) = 0;

  nw_listener_stop_advertise_timer_on_queue(v13);
}

void sub_183524C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)
                                                           + 16))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 32));
}

uint64_t ___ZL39nw_listener_cancel_all_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_listener_inbox *v4;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  nw_listener_inbox *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v9 = 136446722;
      v10 = "nw_listener_cancel_all_inboxes_on_queue_block_invoke";
      v11 = 2082;
      v12 = id_string;
      v13 = 2114;
      v14 = v4;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling all inboxes: %{public}@", (uint8_t *)&v9, 0x20u);
    }

  }
  nw_listener_cancel_inbox_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), v4);

  return 1;
}

void sub_183524E1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL49nw_listener_cancel_all_proxy_connections_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  NSObject *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v9 = 136446722;
      v10 = "nw_listener_cancel_all_proxy_connections_on_queue_block_invoke";
      v11 = 2082;
      v12 = id_string;
      v13 = 2114;
      v14 = v4;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling proxy connection: %{public}@", (uint8_t *)&v9, 0x20u);
    }

  }
  nw_connection_cancel(v4);

  return 1;
}

void sub_183524F6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_listener_cancel_inbox_on_queue(NWConcrete_nw_listener *a1, nw_listener_inbox *a2)
{
  NWConcrete_nw_listener *v3;
  nw_listener_inbox *v4;
  uint64_t v5;
  NSObject *v6;
  NWConcrete_nw_listener *v7;
  char *v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  char *v13;
  __int16 v14;
  nw_listener_inbox *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  if (-[nw_listener_inbox cancel](v4, "cancel"))
  {
    ++*((_DWORD *)v3 + 74);
    v5 = *((_QWORD *)v3 + 2);
    if (v5)
    {
      if (!nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v6 = (id)glistenerLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v7 = v3;
          v8 = (char *)v7 + 42;

          v9 = *((_DWORD *)v3 + 74);
          v10 = 136446978;
          v11 = "nw_listener_cancel_inbox_on_queue";
          v12 = 2082;
          v13 = v8;
          v14 = 2114;
          v15 = v4;
          v16 = 1024;
          v17 = v9;
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Adding deferral for %{public}@ -> %d", (uint8_t *)&v10, 0x26u);
        }

      }
    }
  }

}

void sub_1835250E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL39nw_listener_set_local_endpoint_on_queueP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 288), *(id *)(a1 + 40));
  *(_WORD *)(*(_QWORD *)(a1 + 32) + 300) = *(_WORD *)(a1 + 48);
}

BOOL ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_2_204(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  _BOOL8 result;

  result = nw_path_flow_registration_uses_nexus(*(void **)(a1 + 32), a3);
  if (result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

uint64_t ___ZL45nw_listener_find_channel_inbox_match_on_queueP22NWConcrete_nw_listenerPU26objcproto15OS_nw_path_flow8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v4;
    v6 = *(void **)(a1 + 40);
    v7 = *(id *)(a1 + 32);
    v8 = v6;
    v9 = v8;
    if (!v5)
      goto LABEL_49;
    if (v7)
    {
      if (v8)
      {
        if (nw_parameters_is_equal(v8, *((void **)v5 + 6)))
        {
          v10 = (void *)*((_QWORD *)v5 + 9);
          v11 = v7;
          v12 = v10;
          v13 = v11 == v12;
          if (v11 != v12 && v12)
          {
            if (v11[18] != v12[18])
            {

              goto LABEL_50;
            }
            v13 = v11[19] == v12[19];
          }

          if (v13)
          {
            v14 = 0;
            v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
            v16 = *(void **)(v15 + 40);
            *(_QWORD *)(v15 + 40) = v5;
            v5 = v16;
LABEL_51:

            goto LABEL_52;
          }
LABEL_50:
          v14 = 1;
          goto LABEL_51;
        }
LABEL_49:

        goto LABEL_50;
      }
      __nwlog_obj();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
      v18 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v32 = 0;
      if (!__nwlog_fault(v18, &type, &v32))
        goto LABEL_47;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
            v36 = 2082;
            v37 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v18)
            goto LABEL_49;
          goto LABEL_48;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
      v18 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v32 = 0;
      if (!__nwlog_fault(v18, &type, &v32))
        goto LABEL_47;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null flow", buf, 0xCu);
        }
      }
      else if (v32)
      {
        v23 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v19, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
            v36 = 2082;
            v37 = v23;
            _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v23);
LABEL_47:
          if (!v18)
            goto LABEL_49;
LABEL_48:
          free(v18);
          goto LABEL_49;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "-[nw_ip_channel_inbox matchesFlow:parameters:]";
          _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_47;
  }
  v14 = 1;
LABEL_52:

  return v14;
}

void sub_183525714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t ___ZL45nw_listener_has_flow_for_nexus_agent_on_queueP22NWConcrete_nw_listenerPh_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NWConcrete_nw_path_flow_registration *v4;
  _BYTE *v5;
  char v6;
  uint64_t v7;

  v4 = a3;
  if (!nw_path_flow_registration_uses_nexus(v4, *(const unsigned __int8 **)(a1 + 48))
    || (v5 = nw_path_copy_flow_for_registration(*(NWConcrete_nw_path **)(*(_QWORD *)(a1 + 32) + 176), v4)) != 0
    && (v6 = v5[186], v5, (v6 & 4) != 0))
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

  return v7;
}

void sub_1835257BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_201(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(v1 + 128) - 3) >= 2 && (*(_BYTE *)(v1 + 302) & 1) == 0)
    nw_path_evaluator_force_update(*(void **)(v1 + 168), *(void **)(a1 + 40));
}

uint64_t ___ZL46nw_listener_copy_proxy_connection_for_endpointP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  nw_endpoint_t v6;
  int is_equal;

  v5 = a3;
  v6 = nw_connection_copy_endpoint(v5);
  is_equal = nw_endpoint_is_equal(v6, *(void **)(a1 + 32), 0);
  if (is_equal)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);

  return is_equal ^ 1u;
}

void sub_183525880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_197(uint64_t a1, void *a2)
{
  void *v2;
  NWConcrete_nw_protocol_options *v3;

  v2 = *(void **)(a1 + 32);
  v3 = nw_protocol_options_copy(a2);
  nw_protocol_stack_append_application_protocol(v2, v3);

}

void sub_1835258D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_198(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  uint64_t v6;
  char *v7;
  id *v8;
  NSObject *v9;
  const char *id_string;
  const char *v11;
  uint64_t listener_protocol_on_nw_queue;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  char *v22;
  nw_listener_inbox *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  _DWORD *v33;
  NSObject *v34;
  const char *v35;
  void *v36;
  _DWORD *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *backtrace_string;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  os_log_type_t v50;
  char v51;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  char *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  v7 = (char *)&nw_protocol_http_authentication_identifier::protocol_identifier + 4;
  v8 = (id *)((char *)&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
  if (v6 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v6 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v9 = (id)glistenerLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      if (a2 > 5)
        v11 = "unknown";
      else
        v11 = off_1E149DE10[a2];
      *(_DWORD *)buf = 136446978;
      v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      v55 = 2082;
      v56 = (char *)id_string;
      v57 = 2082;
      v58 = (void *)v11;
      v59 = 2112;
      v60 = v5;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Proxy connection moved to state %{public}s (%@)", buf, 0x2Au);
    }

  }
  if (a2 == 3)
  {
    listener_protocol_on_nw_queue = nw_connection_get_listener_protocol_on_nw_queue(*(void **)(a1 + 40), *(void **)(a1 + 48), 1);
    if (listener_protocol_on_nw_queue)
    {
      v13 = -[nw_listener_inbox_protocol initWithProtocol:delegate:]([nw_listener_inbox_protocol alloc], listener_protocol_on_nw_queue, *(void **)(a1 + 32));
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v15 = *(void **)(v14 + 40);
      *(_QWORD *)(v14 + 40) = v13;

      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
      {
        if (v16 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v16 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v17 = (id)glistenerLogObj;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            v18 = nw_listener_get_id_string(*(void **)(a1 + 32));
            v19 = *(void **)(listener_protocol_on_nw_queue + 16);
            *(_DWORD *)buf = 136446722;
            v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
            v55 = 2082;
            v56 = (char *)v18;
            v57 = 2082;
            v58 = v19;
            _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Created inbox for proxy protocol %{public}s", buf, 0x20u);
          }

        }
        nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
        goto LABEL_77;
      }
      if (v16 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v16 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v34 = (id)glistenerLogObj;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          v35 = nw_listener_get_id_string(*(void **)(a1 + 32));
          v36 = *(void **)(listener_protocol_on_nw_queue + 16);
          *(_DWORD *)buf = 136446722;
          v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          v55 = 2082;
          v56 = (char *)v35;
          v57 = 2082;
          v58 = v36;
          _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Failed to create inbox for %{public}s", buf, 0x20u);
        }

      }
      v32 = *(id *)(a1 + 32);
      v37 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 12);
      nw_listener_set_state_on_queue(v32, 3, v37);

    }
    else
    {
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v29 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v29 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v30 = (id)glistenerLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          v31 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          v55 = 2082;
          v56 = (char *)v31;
          _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener could not find protocol to join in connection", buf, 0x16u);
        }

      }
      v32 = *(id *)(a1 + 32);
      v33 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      nw_listener_set_state_on_queue(v32, 3, v33);

    }
LABEL_76:

    goto LABEL_77;
  }
  if ((a2 & 0xFFFFFFFE) != 4)
    goto LABEL_77;
  v20 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v21 = *(_QWORD **)(a1 + 32);
  if (v20)
  {
    v22 = v21;
    v23 = v20;
    if (v22)
    {
      nw_context_assert_queue(*((void **)v22 + 3));
      if (*((_DWORD *)v22 + 32) != 2 || (v22[302] & 1) != 0)
      {
        v38 = *((_QWORD *)v22 + 2);
        if (v38 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v38 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v39 = (id)glistenerLogObj;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v54 = "nw_listener_teardown_protocol_inbox";
            v55 = 2082;
            v56 = v22 + 42;
            _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener is not ready, ignoring teardown protocol inbox", buf, 0x16u);
          }

        }
      }
      else
      {
        v24 = *((_QWORD *)v22 + 2);
        if (v24 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v24 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v25 = (id)glistenerLogObj;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            v54 = "nw_listener_teardown_protocol_inbox";
            v55 = 2082;
            v56 = v22 + 42;
            _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] tearing down protocol inbox", buf, 0x16u);
          }

        }
        v26 = *((_QWORD *)v22 + 18);
        if (v26 && nw_array_remove_object(v26, (uint64_t)v23))
        {
          v27 = *((_QWORD *)v22 + 2);
          if (v27 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v27 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1)
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
            v28 = (id)glistenerLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446722;
              v54 = "nw_listener_teardown_protocol_inbox";
              v55 = 2082;
              v56 = v22 + 42;
              v57 = 2114;
              v58 = v23;
              _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling protocol inbox: %{public}@", buf, 0x20u);
            }

          }
          nw_listener_resume_inbox((NWConcrete_nw_listener *)v22, v23);
          nw_listener_cancel_inbox_on_queue((NWConcrete_nw_listener *)v22, v23);
        }
      }
LABEL_67:

      v21 = *(_QWORD **)(a1 + 32);
      goto LABEL_68;
    }
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_listener_teardown_protocol_inbox";
    v43 = (char *)_os_log_send_and_compose_impl();

    v7 = (char *)&nw_protocol_http_authentication_identifier::protocol_identifier + 4;
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v43, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v44 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_listener_teardown_protocol_inbox";
          _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null listener", buf, 0xCu);
        }
      }
      else
      {
        if (v51)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = type;
          v49 = os_log_type_enabled(v47, type);
          if (backtrace_string)
          {
            if (v49)
            {
              *(_DWORD *)buf = 136446466;
              v54 = "nw_listener_teardown_protocol_inbox";
              v55 = 2082;
              v56 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
            }

            v8 = (id *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
            v7 = (_BYTE *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
            free(backtrace_string);
          }
          else
          {
            if (v49)
            {
              *(_DWORD *)buf = 136446210;
              v54 = "nw_listener_teardown_protocol_inbox";
              _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s called with null listener, no backtrace", buf, 0xCu);
            }

            v8 = (id *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
            v7 = (_BYTE *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
          }
          goto LABEL_94;
        }
        __nwlog_obj();
        v44 = objc_claimAutoreleasedReturnValue();
        v50 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_listener_teardown_protocol_inbox";
          _os_log_impl(&dword_182FBE000, v44, v50, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
        }
      }

      v7 = (_BYTE *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
    }
LABEL_94:
    if (v43)
      free(v43);
    goto LABEL_67;
  }
LABEL_68:
  if (a2 == 4)
  {
    nw_array_remove_object(v21[20], *(_QWORD *)(a1 + 40));
    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
    v21 = *(_QWORD **)(a1 + 32);
  }
  v40 = v21[2];
  if (v40 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v40 + 104)))
  {
    if (*((_QWORD *)v7 + 255) != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v32 = v8[256];
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      v41 = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446466;
      v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      v55 = 2082;
      v56 = (char *)v41;
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Tore down inbox for proxy protocol", buf, 0x16u);
    }
    goto LABEL_76;
  }
LABEL_77:

}

void sub_1835262D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_listener_resume_inbox(NWConcrete_nw_listener *a1, nw_listener_inbox *a2)
{
  NWConcrete_nw_listener *v3;
  nw_listener_inbox *v4;
  uint64_t v5;
  NSObject *v6;
  NWConcrete_nw_listener *v7;
  char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  nw_listener_inbox *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  -[nw_listener_inbox resume](v4, "resume");
  v5 = *((_QWORD *)v3 + 2);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = v3;
      v8 = (char *)v7 + 42;

      v9 = 136446722;
      v10 = "nw_listener_resume_inbox";
      v11 = 2082;
      v12 = v8;
      v13 = 2114;
      v14 = v4;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] Resumed for %{public}@", (uint8_t *)&v9, 0x20u);
    }

  }
}

void sub_183526460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL66nw_listener_enumerate_multicast_parameters_for_descriptor_on_queueP22NWConcrete_nw_listenerPU33objcproto22OS_nw_group_descriptor8NSObjectU13block_pointerFbPU27objcproto16OS_nw_parametersS1_E_block_invoke(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _BOOL8 v5;
  NSObject *v6;
  nw_interface_t v7;
  nw_interface_t v8;
  uint64_t v9;
  uint64_t v11;
  NSObject *v12;
  const char *id_string;
  int v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  NSObject *v19;
  __int16 v20;
  nw_interface_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(id *)(*(_QWORD *)(a1 + 32) + 208);
  v5 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v4, 0, 0);

  nw_parameters_set_local_endpoint((nw_parameters_t)v5, v3);
  v6 = nw_endpoint_copy_interface(v3);
  v7 = nw_parameters_copy_required_interface((nw_parameters_t)v5);
  v8 = v7;
  if (!v6)
    goto LABEL_5;
  if (!v7 || nw_interface_shallow_compare(v6, v7))
  {
    nw_parameters_require_interface((nw_parameters_t)v5, v6);
LABEL_5:
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

    v5 = 0;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v11 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v11 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v12 = (id)glistenerLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v14 = 136446978;
      v15 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue_block_invoke";
      v16 = 2082;
      v17 = id_string;
      v18 = 2112;
      v19 = v3;
      v20 = 2112;
      v21 = v8;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] skipping multicast group %@, does not match interface %@ required by parameters", (uint8_t *)&v14, 0x2Au);
    }

  }
  v9 = 1;
LABEL_6:

  return v9;
}

void sub_183526658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t ___ZL44nw_listener_find_socket_inbox_match_on_queueP22NWConcrete_nw_listenerPU27objcproto16OS_nw_parameters8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id *v6;
  id v7;
  int is_equal;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *id_string;
  uint64_t v13;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  id *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = (id *)v5;
    v7 = v6[6];
    is_equal = nw_parameters_is_equal(v7, *(void **)(a1 + 32));
    if ((is_equal & 1) != 0)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
    }
    else
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
      if (v10 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v10 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v11 = (id)glistenerLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          id_string = nw_listener_get_id_string(*(void **)(a1 + 40));
          v13 = *(_QWORD *)(a1 + 32);
          v15 = 136447234;
          v16 = "nw_listener_find_socket_inbox_match_on_queue_block_invoke";
          v17 = 2082;
          v18 = id_string;
          v19 = 2114;
          v20 = v6;
          v21 = 2114;
          v22 = v7;
          v23 = 2114;
          v24 = v13;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Ignoring existing socket listener: %{public}@, inbox parameters: (%{public}@) do not match: (%{public}@)", (uint8_t *)&v15, 0x34u);
        }

      }
    }

    v9 = is_equal ^ 1u;
  }
  else
  {
    v9 = 1;
  }

  return v9;
}

void sub_183526840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL36nw_listener_cancel_complete_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 88);
  *(_QWORD *)(v4 + 88) = 0;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 96);
  *(_QWORD *)(v6 + 96) = 0;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 112);
  *(_QWORD *)(v8 + 112) = 0;

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 120);
  *(_QWORD *)(v10 + 120) = 0;

  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(void **)(v12 + 176);
  *(_QWORD *)(v12 + 176) = 0;

}

void sub_183526C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *nw_listener_state_to_string(unsigned int a1)
{
  if (a1 > 4)
    return "<unknown>";
  else
    return off_1E149CE68[a1];
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  NSObject *v1;
  NWConcrete_nw_listener *v2;
  NSObject *v3;
  _BOOL8 v4;
  char *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = parameters;
  nw_allow_use_of_dispatch_internal();
  if (v1)
  {
    v2 = [NWConcrete_nw_listener alloc];
    v3 = v1;
    v4 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v3, 0, 0);

    v5 = -[NWConcrete_nw_listener initWithParameters:multicastDescriptor:](v2, (void *)v4, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_listener_create";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_listener_create";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_listener_create";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_listener_create";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_listener_create";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_3:

  return (nw_listener_t)v5;
}

void sub_183527020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_listener_create_with_launchd_key(void *a1, const char *a2)
{
  NSObject *v3;
  nw_listener_t v4;
  char *v5;
  _BOOL8 result;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  NSObject *v13;
  void *v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  nw_allow_use_of_dispatch_internal();
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_listener_create_with_launchd_key";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v22)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_listener_create_with_launchd_key";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
LABEL_40:
    if (v8)
      free(v8);
    v4 = 0;
    goto LABEL_5;
  }
  if (!a2)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_listener_create_with_launchd_key";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null key", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v22)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null key, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_listener_create_with_launchd_key";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
    goto LABEL_40;
  }
  v4 = nw_listener_create(v3);
  v5 = strdup(a2);
  if (v5)
  {
LABEL_4:
    v4[7].isa = (Class)v5;
LABEL_5:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v25 = "strict_strdup";
  v14 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void sub_18352759C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *nw_listener_create_multicast(void *a1, void *a2, const char *a3)
{
  id v5;
  id v6;
  const char *v7;
  id v8;
  void *v9;
  unsigned __int8 *v10;
  int v11;
  NSObject *v12;
  char *v13;
  uint64_t *v14;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  nw_allow_use_of_dispatch_internal();
  if (!v5)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_listener_create_multicast";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v17, &type, &v30))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_listener_create_multicast";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v17)
          goto LABEL_50;
        goto LABEL_49;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null multicast_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s called with null multicast_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_47;
  }
  if (!v6)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_listener_create_multicast";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v17, &type, &v30))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v30)
    {
      v25 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      v27 = os_log_type_enabled(v18, type);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_listener_create_multicast";
          v34 = 2082;
          v35 = v25;
          _os_log_impl(&dword_182FBE000, v18, v26, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v25);
LABEL_48:
        if (!v17)
        {
LABEL_50:
          v13 = 0;
          goto LABEL_14;
        }
LABEL_49:
        free(v17);
        goto LABEL_50;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_182FBE000, v18, v26, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_182FBE000, v18, v29, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (a3)
    v7 = a3;
  else
    v7 = "0";
  v8 = nw_listener_copy_parameters_with_port(v6, v7, 0);
  v9 = v8;
  if (v8)
  {
    v10 = (unsigned __int8 *)v8;
    v11 = v10[92];

    if (v11 != 2)
    {
      v14 = nw_group_descriptor_copy(v5);
      v13 = -[NWConcrete_nw_listener initWithParameters:multicastDescriptor:]([NWConcrete_nw_listener alloc], v10, v14);

      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v33 = "nw_listener_create_multicast";
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s Cannot create multicast listener with stream mode parameters", buf, 0xCu);
    }

  }
  v13 = 0;
LABEL_13:

LABEL_14:
  return v13;
}

void sub_183527B50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

nw_listener_t nw_listener_create_with_connection(nw_connection_t connection, nw_parameters_t parameters)
{
  NSObject *v4;
  NSObject *v5;
  NWConcrete_nw_listener *v6;
  NSObject *v7;
  _BOOL8 v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  Class isa;
  NSObject *v14;
  NSObject *v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  void *v29;
  os_log_type_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  _QWORD v39[4];
  NSObject *v40;
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  char *v46;
  __int16 v47;
  NSObject *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = connection;
  v5 = parameters;
  nw_allow_use_of_dispatch_internal();
  if (!v4)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_listener_create_with_connection";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v26, &type, &v41))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v44 = "nw_listener_create_with_connection";
          v45 = 2082;
          v46 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v26)
          goto LABEL_68;
        goto LABEL_67;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_65;
  }
  if (!v5)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_listener_create_with_connection";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v26, &type, &v41))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v41)
    {
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v44 = "nw_listener_create_with_connection";
          v45 = 2082;
          v46 = v34;
          _os_log_impl(&dword_182FBE000, v27, v35, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
LABEL_66:
        if (!v26)
        {
LABEL_68:
          v9 = 0;
          goto LABEL_32;
        }
LABEL_67:
        free(v26);
        goto LABEL_68;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_182FBE000, v27, v35, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_182FBE000, v27, v38, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_65:

    goto LABEL_66;
  }
  v6 = [NWConcrete_nw_listener alloc];
  v7 = v5;
  v8 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v7, 0, 0);

  v9 = -[NWConcrete_nw_listener initWithParameters:multicastDescriptor:](v6, (void *)v8, 0);
  if (v9)
  {
    objc_storeStrong((id *)&v9[6].isa, connection);
    v10 = v7;
    v11 = *((id *)v10[13].isa + 17);

    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = __nw_listener_create_with_connection_block_invoke;
    v39[3] = &unk_1E14ACFD0;
    v12 = v4;
    v40 = v12;
    nw_queue_context_async(v11, v39);

    isa = v9[2].isa;
    if (isa && !nw_path_parameters_get_logging_disabled(*((_QWORD *)isa + 13)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v14 = (id)glistenerLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v44 = "nw_listener_create_with_connection";
        v45 = 2082;
        v46 = (char *)&v9[5].isa + 2;
        v47 = 2114;
        v48 = v12;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] created from connection: %{public}@", buf, 0x20u);
      }

    }
    v15 = v9;

    goto LABEL_31;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v44 = "nw_listener_create_with_connection";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v41 = 0;
  if (__nwlog_fault(v17, &type, &v41))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s [nw_listener initWithParameters:] failed", buf, 0xCu);
      }
    }
    else if (v41)
    {
      v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      v21 = type;
      v22 = os_log_type_enabled(v18, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v44 = "nw_listener_create_with_connection";
          v45 = 2082;
          v46 = v20;
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s [nw_listener initWithParameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        if (!v17)
          goto LABEL_31;
        goto LABEL_30;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s [nw_listener initWithParameters:] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s [nw_listener initWithParameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v17)
LABEL_30:
    free(v17);
LABEL_31:

LABEL_32:
  return v9;
}

void sub_183528420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_listener_create_with_connection_block_invoke(uint64_t a1)
{
  void **v1;
  void **v2;
  void *v3;
  NWConcrete_nw_endpoint_handler *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  NSObject *v8;
  int v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = (void **)*(id *)(a1 + 32);
  v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
            v22 = 2082;
            v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_39:
    if (v11)
      free(v11);
    goto LABEL_14;
  }
  nw_context_assert_queue(v1[3]);
  v3 = v2[18];
  if (v3)
  {
    v4 = nw_endpoint_handler_copy_connected_flow_handler(v3);
    if (!v4)
    {
      if (!nw_endpoint_handler_has_connected_flow(v2[18]))
      {
        v7 = v2[2];
        if (v7 && !nw_path_parameters_get_logging_disabled(v7[13]))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v8 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            v9 = *((_DWORD *)v2 + 112);
            *(_DWORD *)buf = 136446466;
            v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
            v22 = 1024;
            LODWORD(v23) = v9;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no available handler", buf, 0x12u);
          }

        }
        v4 = 0;
        goto LABEL_13;
      }
      v4 = v2[18];
    }
    nw_endpoint_flow_pre_attach_protocols(v4, 0);
LABEL_13:

    goto LABEL_14;
  }
  v5 = v2[2];
  if (v5 && !nw_path_parameters_get_logging_disabled(v5[13]))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (NWConcrete_nw_endpoint_handler *)(id)gconnectionLogObj;
    if (os_log_type_enabled(&v4->super, OS_LOG_TYPE_ERROR))
    {
      v6 = *((_DWORD *)v2 + 112);
      *(_DWORD *)buf = 136446466;
      v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
      v22 = 1024;
      LODWORD(v23) = v6;
      _os_log_impl(&dword_182FBE000, &v4->super, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no parent handler", buf, 0x12u);
    }
    goto LABEL_13;
  }
LABEL_14:

}

void sub_1835288F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_listener_allow_new_connection_inline(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD aBlock[4];
  os_unfair_lock_s *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_allow_new_connection_inline_block_invoke;
    aBlock[3] = &unk_1E14ACFD0;
    v13 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_listener_allow_new_connection_inline";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_allow_new_connection_inline";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_listener_allow_new_connection_inline";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_allow_new_connection_inline";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_allow_new_connection_inline";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183528C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_listener_allow_new_connection_inline_block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  NSObject *v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v1 + 128))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_listener_allow_new_connection_inline_block_invoke";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        v7 = "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start";
LABEL_17:
        v11 = v5;
        v12 = v6;
        goto LABEL_18;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        v7 = "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start, backtra"
             "ce limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v9 = type;
      v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_19:

          if (!v4)
            goto LABEL_13;
          goto LABEL_12;
        }
        *(_DWORD *)buf = 136446210;
        v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        v7 = "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start, no backtrace";
        v11 = v5;
        v12 = v9;
LABEL_18:
        _os_log_impl(&dword_182FBE000, v11, v12, v7, buf, 0xCu);
        goto LABEL_19;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        v17 = 2082;
        v18 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4)
    {
LABEL_13:
      v1 = *(_QWORD *)(a1 + 32);
      goto LABEL_14;
    }
LABEL_12:
    free(v4);
    goto LABEL_13;
  }
LABEL_14:
  *(_BYTE *)(v1 + 302) |= 4u;
}

void nw_listener_register_client_demux_options_if_needed(void *a1, void *a2, void *a3)
{
  _QWORD *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  os_log_type_t v28;
  _QWORD v29[4];
  _QWORD *v30;
  id v31;
  id v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_listener_register_client_demux_options_if_needed";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v11, &type, &v33))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_listener_register_client_demux_options_if_needed";
          v37 = 2082;
          v38 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v11)
          goto LABEL_5;
LABEL_56:
        free(v11);
        goto LABEL_5;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_listener_register_client_demux_options_if_needed";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v11, &type, &v33))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null demux_options", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v33)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null demux_options, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null demux_options, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_listener_register_client_demux_options_if_needed";
      v37 = 2082;
      v38 = v21;
      _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null demux_options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v7)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_listener_register_client_demux_options_if_needed";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v11, &type, &v33))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null inbound_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v33)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s called with null inbound_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null inbound_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_listener_register_client_demux_options_if_needed";
      v37 = 2082;
      v38 = v21;
      _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null inbound_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v21);
    if (!v11)
      goto LABEL_5;
    goto LABEL_56;
  }
  v9 = (void *)v5[3];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __nw_listener_register_client_demux_options_if_needed_block_invoke;
  v29[3] = &unk_1E14AAAA0;
  v30 = v5;
  v31 = v8;
  v32 = v6;
  nw_queue_context_async_if_needed(v9, v29);

LABEL_5:
}

void sub_183529638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void __nw_listener_register_client_demux_options_if_needed_block_invoke(uint64_t a1)
{
  id v2;
  unsigned __int8 *v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  unsigned __int8 *v7;
  unsigned __int8 uu[24];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 128) == 2)
  {
    *(_QWORD *)uu = 0;
    *(_QWORD *)&uu[8] = 0;
    v2 = nw_connection_copy_connected_path(*(void **)(a1 + 40));
    nw_path_get_client_id(v2, uu);
    if (!uuid_is_null(uu))
    {
      v3 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 32) + 160);
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = __nw_listener_register_client_demux_options_if_needed_block_invoke_49;
      v5[3] = &unk_1E14A3CF0;
      v6 = *(id *)(a1 + 48);
      v7 = uu;
      nw_array_apply(v3, (uint64_t)v5);

    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uu = 136446210;
      *(_QWORD *)&uu[4] = "nw_listener_register_client_demux_options_if_needed_block_invoke";
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s ignoring client demux options registration", uu, 0xCu);
    }

  }
}

void sub_1835297D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_listener_register_client_demux_options_if_needed_block_invoke_49(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  nw_protocol_metadata_t v7;
  NSObject *v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (nw_protocol_masque_listener_get_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_186);
  if (nw_protocol_masque_listener_get_definition(void)::definition
    && (v5 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition)) != 0)
  {
    v6 = os_retain(v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = nw_connection_copy_protocol_metadata(v4, v6);

  if (v7)
  {
    nw_masque_listener_add_client_demux_pattern(v7, *(_QWORD *)(a1 + 32), *(const unsigned __int8 **)(a1 + 40));
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = 136446210;
      v11 = "nw_listener_register_client_demux_options_if_needed_block_invoke";
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s no metadata for masque listener", (uint8_t *)&v10, 0xCu);
    }

  }
  return 1;
}

void sub_183529944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_listener_set_advertise_descriptor(nw_listener_t listener, nw_advertise_descriptor_t advertise_descriptor)
{
  nw_listener_t v3;
  NSObject *v4;
  Class isa;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  NSObject *v15;
  NSObject *v16;
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = listener;
  v4 = advertise_descriptor;
  if (v3)
  {
    isa = v3[3].isa;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_listener_set_advertise_descriptor_block_invoke;
    v14[3] = &unk_1E14ACE68;
    v15 = v3;
    v16 = v4;
    nw_queue_context_async(isa, v14);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_listener_set_advertise_descriptor";
  v7 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v18;
      v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_listener_set_advertise_descriptor";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_183529C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_descriptor_block_invoke(uint64_t a1)
{
  id v2;
  os_unfair_lock_s *v3;
  NSObject *v4;
  void *v5;
  void (**v6)(_QWORD);
  os_unfair_lock_s *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  BOOL v11;
  NSObject *v12;
  nw_txt_record_t v13;
  nw_txt_record_t v14;
  uint16_t isa;
  Class v16;
  DNSServiceRef *v17;
  DNSServiceErrorType updated;
  void *v19;
  _DWORD *dns_error;
  int *v21;
  uint64_t v22;
  uint64_t aBlock;
  uint64_t v24;
  void (*v25)(uint64_t);
  void *v26;
  os_unfair_lock_s *v27;
  id v28;
  int v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 264);
  v3 = *(os_unfair_lock_s **)(a1 + 32);
  if (v2 || !*(_QWORD *)&v3[68]._os_unfair_lock_opaque)
  {
LABEL_5:
    aBlock = MEMORY[0x1E0C809B0];
    v24 = 3221225472;
    v25 = __nw_listener_set_advertise_descriptor_block_invoke_51;
    v26 = &unk_1E14ACE68;
    v27 = v3;
    v28 = *(id *)(a1 + 40);
    v6 = (void (**)(_QWORD))_Block_copy(&aBlock);
    v7 = v3 + 2;
    os_unfair_lock_lock(v7);
    v6[2](v6);
    os_unfair_lock_unlock(v7);

    v8 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(v8 + 128) == 2 && (*(_BYTE *)(v8 + 302) & 1) == 0)
    {
      if (nw_advertise_descriptor_is_equal(v2, *(void **)(a1 + 40), 1))
      {
        if (!nw_advertise_descriptor_is_equal(v2, *(void **)(a1 + 40), 0))
        {
          v9 = *(void **)(*(_QWORD *)(a1 + 32) + 272);
          if (v9)
          {
            if (objc_msgSend(v9, "count") == 1)
            {
              objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 272), "objectAtIndexedSubscript:", 0);
              v10 = (_QWORD *)objc_claimAutoreleasedReturnValue();
              v11 = v10[8] == 0;

              if (!v11)
              {
                v12 = *(NSObject **)(a1 + 40);
                if (v12)
                {
                  v13 = nw_advertise_descriptor_copy_txt_record_object(v12);
                  v14 = v13;
                  if (v13)
                  {
                    isa = (uint16_t)v13[2].isa;
                    v16 = v13[1].isa;
LABEL_20:
                    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 272), "objectAtIndexedSubscript:", 0, v21, v22, aBlock, v24, v25, v26, v27);
                    v17 = (DNSServiceRef *)objc_claimAutoreleasedReturnValue();
                    updated = DNSServiceUpdateRecord(v17[8], 0, 0, isa, v16, 0);

                    if (updated)
                    {
                      v19 = *(void **)(a1 + 32);
                      dns_error = nw_error_create_dns_error(updated);
                      nw_listener_set_state_on_queue(v19, 3, dns_error);

                    }
                    goto LABEL_16;
                  }
                  isa = 0;
                }
                else
                {
                  isa = 0;
                  v14 = 0;
                }
                v16 = 0;
                goto LABEL_20;
              }
            }
          }
        }
      }
      else
      {
        nw_listener_stop_advertising_on_queue(*(NWConcrete_nw_listener **)(a1 + 32));
        nw_listener_start_advertising_on_queue(*(NWConcrete_nw_listener **)(a1 + 32));
      }
    }
LABEL_16:

    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v29 = 136446210;
  v30 = "nw_listener_set_advertise_descriptor_block_invoke";
  LODWORD(v22) = 12;
  v21 = &v29;
  v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
    v3 = *(os_unfair_lock_s **)(a1 + 32);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_183529F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_descriptor_block_invoke_51(uint64_t a1)
{
  void *v2;
  const char **v3;
  const char **v4;
  int v5;
  uint64_t bonjour_service;
  const char *v7;
  nw_txt_record_t v8;
  void *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  id v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  void *obj;
  void *obja;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 40);
  if (!v2)
  {
    v9 = 0;
    goto LABEL_51;
  }
  v3 = v2;
  v4 = v3;
  v5 = *((_DWORD *)v3 + 2);
  if (v5 == 2)
  {
    nw_advertise_descriptor_create_application_service_with_bundle_id(v3[6], v3[7]);
    bonjour_service = objc_claimAutoreleasedReturnValue();
    if (bonjour_service)
    {
      *(_DWORD *)(bonjour_service + 64) = nw_advertise_descriptor_get_invitation_scope(v4);
      *(_DWORD *)(bonjour_service + 68) = nw_advertise_descriptor_get_invitation_route(v4);
      goto LABEL_29;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v33 = "nw_advertise_descriptor_copy";
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s Failed to allocate copy", buf, 0xCu);
    }
    goto LABEL_23;
  }
  if (v5 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v33 = "nw_advertise_descriptor_copy";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v11, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v33 = "nw_advertise_descriptor_copy";
            v34 = 2082;
            v35 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v11)
            goto LABEL_49;
          goto LABEL_48;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s invalid advertise descriptor type, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s invalid advertise descriptor type, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v11)
      goto LABEL_49;
LABEL_48:
    free(v11);
    goto LABEL_49;
  }
  bonjour_service = (uint64_t)nw_advertise_descriptor_create_bonjour_service(v3[2], v3[3], v3[4]);
  if (!bonjour_service)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v33 = "nw_advertise_descriptor_copy";
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s Failed to allocate copy", buf, 0xCu);
    }
LABEL_23:

LABEL_49:
    obj = 0;
    goto LABEL_50;
  }
  v7 = v4[5];
  if (v7)
    v8 = nw_txt_record_create_with_bytes(*((const uint8_t **)v7 + 1), *((_QWORD *)v7 + 2));
  else
    v8 = 0;
  v18 = *(void **)(bonjour_service + 40);
  *(_QWORD *)(bonjour_service + 40) = v8;

  *(_BYTE *)(bonjour_service + 72) = *(_BYTE *)(bonjour_service + 72) & 0xFE | (_BYTE)v4[9] & 1;
LABEL_29:
  obj = (void *)bonjour_service;
  if (!nw_advertise_descriptor_is_equal(v4, (void *)bonjour_service, 0))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v33 = "nw_advertise_descriptor_copy";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v20, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s deep copy of advertise descriptor doesn't match original", buf, 0xCu);
        }
      }
      else if (v30)
      {
        v23 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v24 = type;
        v25 = os_log_type_enabled(v21, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v33 = "nw_advertise_descriptor_copy";
            v34 = 2082;
            v35 = v23;
            _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s deep copy of advertise descriptor doesn't match original, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v23);
          if (!v20)
            goto LABEL_50;
          goto LABEL_61;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s deep copy of advertise descriptor doesn't match original, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v27 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_182FBE000, v21, v27, "%{public}s deep copy of advertise descriptor doesn't match original, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (v20)
LABEL_61:
      free(v20);
  }
LABEL_50:

  v9 = obj;
LABEL_51:
  obja = v9;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 264), v9);
  if (v2)

}

void sub_18352A71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void nw_listener_set_advertised_endpoint_changed_handler(nw_listener_t listener, nw_listener_advertised_endpoint_changed_handler_t handler)
{
  nw_listener_t v3;
  nw_listener_advertised_endpoint_changed_handler_t v4;
  void (**v5)(_QWORD);
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  NSObject *v15;
  id v16;
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = listener;
  v4 = handler;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_advertised_endpoint_changed_handler_block_invoke;
    aBlock[3] = &unk_1E14ACE18;
    v15 = v3;
    v16 = v4;
    v5 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    v5[2](v5);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_listener_set_advertised_endpoint_changed_handler";
  v7 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_advertised_endpoint_changed_handler";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v18;
      v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_listener_set_advertised_endpoint_changed_handler";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_advertised_endpoint_changed_handler";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_advertised_endpoint_changed_handler";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_18352AA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void __nw_listener_set_advertised_endpoint_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *id_string;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        v9 = 136446466;
        v10 = "nw_listener_set_advertised_endpoint_changed_handler_block_invoke";
        v11 = 2082;
        v12 = id_string;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Cannot set advertise handler after cancel", (uint8_t *)&v9, 0x16u);
      }

    }
  }
  else
  {
    v6 = _Block_copy(*(const void **)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 120);
    *(_QWORD *)(v7 + 120) = v6;

  }
}

id nw_listener_copy_local_endpoint(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  id v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v20 = __Block_byref_object_copy__17841;
    v21 = __Block_byref_object_dispose__17842;
    v22 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_copy_local_endpoint_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    v4 = *(id *)(*(_QWORD *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_listener_copy_local_endpoint";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_copy_local_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_copy_local_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_copy_local_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_copy_local_endpoint";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_18352AF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_listener_copy_local_endpoint_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 280));
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(_QWORD *)(v2 + 40);
  v3 = (id *)(v2 + 40);
  if (!v4)
    objc_storeStrong(v3, *(id *)(*(_QWORD *)(a1 + 32) + 288));
}

void nw_listener_set_new_connection_group_handler(nw_listener_t listener, nw_listener_new_connection_group_handler_t handler)
{
  nw_listener_t v3;
  nw_listener_new_connection_group_handler_t v4;
  void (**v5)(_QWORD);
  NSObject *v6;
  Class isa;
  char *v8;
  char *v9;
  _QWORD v10[4];
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = listener;
  v4 = handler;
  if (nw_parameters_has_multiplexed_protocol_in_stack(v3[2].isa))
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __nw_listener_set_new_connection_group_handler_block_invoke;
    v10[3] = &unk_1E14ACE18;
    v11 = v3;
    v12 = v4;
    v5 = (void (**)(_QWORD))_Block_copy(v10);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    v5[2](v5);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);

    v6 = v11;
LABEL_9:

    goto LABEL_10;
  }
  isa = v3[2].isa;
  if (isa && !nw_path_parameters_get_logging_disabled(*((_QWORD *)isa + 13)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = v3;
      v9 = v8 + 42;

      *(_DWORD *)buf = 136446466;
      v14 = "nw_listener_set_new_connection_group_handler";
      v15 = 2082;
      v16 = v9;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Cannot set a connection group handler without a multiplex protocol", buf, 0x16u);
    }
    goto LABEL_9;
  }
LABEL_10:

}

void sub_18352B154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void __nw_listener_set_new_connection_group_handler_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *id_string;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        v9 = 136446466;
        v10 = "nw_listener_set_new_connection_group_handler_block_invoke";
        v11 = 2082;
        v12 = id_string;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Cannot set new connection group handler after cancel", (uint8_t *)&v9, 0x16u);
      }

    }
  }
  else
  {
    v6 = _Block_copy(*(const void **)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 96);
    *(_QWORD *)(v7 + 96) = v6;

  }
}

void nw_listener_set_new_packet_handler(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void (**v5)(_QWORD);
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  os_unfair_lock_s *v15;
  id v16;
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_new_packet_handler_block_invoke;
    aBlock[3] = &unk_1E14ACE18;
    v15 = v3;
    v16 = v4;
    v5 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_listener_set_new_packet_handler";
  v7 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_new_packet_handler";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v18;
      v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_listener_set_new_packet_handler";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_new_packet_handler";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_new_packet_handler";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_18352B5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void __nw_listener_set_new_packet_handler_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *id_string;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        v9 = 136446466;
        v10 = "nw_listener_set_new_packet_handler_block_invoke";
        v11 = 2082;
        v12 = id_string;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Cannot set new packet handler after cancel", (uint8_t *)&v9, 0x16u);
      }

    }
  }
  else
  {
    v6 = _Block_copy(*(const void **)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 112);
    *(_QWORD *)(v7 + 112) = v6;

  }
}

uint32_t nw_listener_get_new_connection_limit(nw_listener_t listener)
{
  NSObject *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  uint32_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  NSObject *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = listener;
  v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v20 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_get_new_connection_limit_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    v4 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_listener_get_new_connection_limit";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_get_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_get_new_connection_limit";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_get_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_get_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_18352BA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_get_new_connection_limit_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 104);
  return result;
}

void nw_listener_set_new_connection_limit(nw_listener_t listener, uint32_t new_connection_limit)
{
  NSObject *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  NSObject *v6;
  void (**v7)(_QWORD);
  Class isa;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  NSObject *v18;
  _QWORD aBlock[4];
  NSObject *v20;
  _BYTE *v21;
  uint32_t v22;
  char v23;
  os_log_type_t v24;
  _BYTE buf[24];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = listener;
  v4 = (os_unfair_lock_s *)v3;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v5 = MEMORY[0x1E0C809B0];
    v26 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_set_new_connection_limit_block_invoke;
    aBlock[3] = &unk_1E14AB500;
    v21 = buf;
    v6 = v3;
    v20 = v6;
    v22 = new_connection_limit;
    v7 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 2);
    v7[2](v7);
    os_unfair_lock_unlock(v4 + 2);

    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      isa = v6[3].isa;
      v17[0] = v5;
      v17[1] = 3221225472;
      v17[2] = __nw_listener_set_new_connection_limit_block_invoke_2;
      v17[3] = &unk_1E14ACFD0;
      v18 = v6;
      nw_queue_context_async(isa, v17);

    }
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_listener_set_new_connection_limit";
  v10 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v10, &v24, &v23))
  {
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = v24;
      if (os_log_type_enabled(v11, v24))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_set_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = v24;
      v15 = os_log_type_enabled(v11, v24);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_set_new_connection_limit";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_set_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = v24;
      if (os_log_type_enabled(v11, v24))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_set_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v10)
    free(v10);
LABEL_5:

}

void sub_18352BE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  uint64_t v23;

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_set_new_connection_limit_block_invoke(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 104) != v1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24))
    *(_DWORD *)(*(_QWORD *)(result + 32) + 104) = v1;
  return result;
}

void __nw_listener_set_new_connection_limit_block_invoke_2(uint64_t a1)
{
  nw_listener_resume_all_inboxes_if_suspended_on_queue(*(NWConcrete_nw_listener **)(a1 + 32));
}

void nw_listener_resume_all_inboxes_if_suspended_on_queue(NWConcrete_nw_listener *a1)
{
  NWConcrete_nw_listener *v1;
  NWConcrete_nw_listener *v2;
  unsigned __int8 *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  NWConcrete_nw_listener *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 3));
    v3 = (unsigned __int8 *)*((_QWORD *)v2 + 18);
    if (v3)
    {
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = ___ZL52nw_listener_resume_all_inboxes_if_suspended_on_queueP22NWConcrete_nw_listener_block_invoke;
      v12[3] = &unk_1E14AC200;
      v13 = v2;
      nw_array_apply(v3, (uint64_t)v12);

    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v5)
    free(v5);
LABEL_4:

}

void sub_18352C1AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL52nw_listener_resume_all_inboxes_if_suspended_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_listener_inbox *v4;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  nw_listener_inbox *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v6 = (id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v9 = 136446722;
      v10 = "nw_listener_resume_all_inboxes_if_suspended_on_queue_block_invoke";
      v11 = 2082;
      v12 = id_string;
      v13 = 2114;
      v14 = v4;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Resuming inbox %{public}@", (uint8_t *)&v9, 0x20u);
    }

  }
  nw_listener_resume_inbox(*(NWConcrete_nw_listener **)(a1 + 32), v4);

  return 1;
}

void sub_18352C2F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_listener_start_block_invoke_52(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  const char *id_string;
  int v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  void *v19;
  _DWORD *v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  const char *v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  void *v29;
  _DWORD *posix_error;
  os_log_type_t v31;
  const char *v32;
  int v33;
  BOOL logging_disabled;
  char *v35;
  _QWORD *v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t *v43;
  uint64_t listener_protocol_on_nw_queue;
  _QWORD *v45;
  _BOOL8 v46;
  void *v47;
  const char *v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  _BOOL8 v55;
  void *v56;
  int v57;
  uint64_t v58;
  NSObject *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  const char *v65;
  NSObject *v66;
  const char *v67;
  _DWORD *v68;
  uint64_t v69;
  NSObject *v70;
  const char *v71;
  NSObject *v72;
  int v73;
  NWConcrete_nw_path_evaluator *evaluator_for_listener;
  void *v75;
  void *v76;
  _QWORD *v77;
  os_unfair_lock_s *v78;
  uint64_t v79;
  NSObject *v80;
  const char *v81;
  uint64_t v82;
  _DWORD *v83;
  int *v84;
  size_t i;
  BOOL v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  nw_listener_inbox_socket *v90;
  int v91;
  id v92;
  char *v93;
  nw_listener_inbox_socket *v94;
  nw_listener_inbox_socket *v95;
  uint64_t v96;
  NSObject *v97;
  const char *v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  const char *v103;
  uint64_t v104;
  size_t v105;
  NSObject *v106;
  const char *v107;
  uint64_t v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  const char *v113;
  int v114;
  _DWORD *v115;
  _QWORD aBlock[4];
  id v117;
  os_log_type_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  char v128;
  os_log_type_t type[8];
  os_log_type_t *v130;
  uint64_t v131;
  char v132;
  socklen_t v133;
  int v134;
  size_t cnt;
  int *fds;
  _BYTE buf[44];
  size_t v138;
  __int16 v139;
  size_t v140;
  __int16 v141;
  uint64_t v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128))
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (!v3 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
      return;
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v4 = (id)glistenerLogObj;
    id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_listener_start_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = id_string;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = 0;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v6;
    v7 = (void *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v125) = 0;
    if (__nwlog_fault((const char *)v7, type, &v125))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v8 = (id)glistenerLogObj;
        v9 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          v10 = nw_listener_get_id_string(*(void **)(a1 + 32));
          v11 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_listener_start_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 0;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v11;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s [%{public}s] In wrong state for start. Expected %d, got %d.", buf, 0x22u);
        }
      }
      else if ((_BYTE)v125)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v8 = (id)glistenerLogObj;
        v22 = type[0];
        v23 = os_log_type_enabled(v8, type[0]);
        if (backtrace_string)
        {
          if (v23)
          {
            v24 = nw_listener_get_id_string(*(void **)(a1 + 32));
            v25 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_listener_start_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v24;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 0;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v25;
            *(_WORD *)&buf[34] = 2082;
            *(_QWORD *)&buf[36] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s [%{public}s] In wrong state for start. Expected %d, got %d., dumping backtrace:%{public}s", buf, 0x2Cu);
          }

          free(backtrace_string);
          if (!v7)
            return;
LABEL_65:
          free(v7);
          return;
        }
        if (v23)
        {
          v48 = nw_listener_get_id_string(*(void **)(a1 + 32));
          v49 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_listener_start_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v48;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 0;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v49;
          _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s [%{public}s] In wrong state for start. Expected %d, got %d., no backtrace", buf, 0x22u);
        }
      }
      else
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v8 = (id)glistenerLogObj;
        v31 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          v32 = nw_listener_get_id_string(*(void **)(a1 + 32));
          v33 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_listener_start_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v32;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 0;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v33;
          _os_log_impl(&dword_182FBE000, v8, v31, "%{public}s [%{public}s] In wrong state for start. Expected %d, got %d., backtrace limit exceeded", buf, 0x22u);
        }
      }

    }
    if (!v7)
      return;
    goto LABEL_65;
  }
  *(_QWORD *)type = 0;
  v130 = type;
  v131 = 0x2020000000;
  v132 = 0;
  v125 = 0;
  v126 = &v125;
  v127 = 0x2020000000;
  v128 = 0;
  v121 = 0;
  v122 = &v121;
  v123 = 0x2020000000;
  v12 = MEMORY[0x1E0C809B0];
  v124 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_listener_start_block_invoke_53;
  aBlock[3] = &unk_1E149DD80;
  v118 = type;
  v117 = (id)v2;
  v119 = &v125;
  v120 = &v121;
  v13 = (void (**)(_QWORD))_Block_copy(aBlock);
  v14 = (os_unfair_lock_s *)(v2 + 8);
  os_unfair_lock_lock(v14);
  v13[2](v13);
  os_unfair_lock_unlock(v14);

  if (*((_BYTE *)v130 + 24))
  {
    v15 = *(_QWORD *)(a1 + 32);
    if (*((_BYTE *)v126 + 24))
    {
      v16 = *(_QWORD *)(v15 + 16);
      if (v16 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v16 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v17 = (id)glistenerLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v18 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_start_block_invoke_2";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v18;
          _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Started with setting both new connection handler and new connection group handler", buf, 0x16u);
        }

      }
LABEL_22:
      v19 = *(void **)(a1 + 32);
      v20 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      nw_listener_set_state_on_queue(v19, 3, v20);

      goto LABEL_196;
    }
    if (!*(_QWORD *)(v15 + 32))
      goto LABEL_48;
    goto LABEL_47;
  }
  v15 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v15 + 32))
  {
LABEL_47:
    if (!*((_BYTE *)v122 + 24))
    {
      v63 = *(_QWORD *)(v15 + 16);
      if (v63 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v63 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v64 = (id)glistenerLogObj;
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          v65 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_start_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v65;
          _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Started without setting new packet handler", buf, 0x16u);
        }

      }
      goto LABEL_22;
    }
    goto LABEL_48;
  }
  if (!*((_BYTE *)v126 + 24))
  {
    v26 = *(_QWORD *)(v15 + 16);
    if (v26 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v26 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v27 = (id)glistenerLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_listener_start_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v28;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Started without setting either new connection handler or new connection group handler", buf, 0x16u);
      }

    }
    v29 = *(void **)(a1 + 32);
    posix_error = nw_error_create_posix_error(22);
    nw_listener_set_state_on_queue(v29, 3, posix_error);

    goto LABEL_196;
  }
LABEL_48:
  objc_storeStrong((id *)(v15 + 256), (id)v15);
  if (*((_BYTE *)v126 + 24))
    nw_parameters_set_attach_protocol_listener(*(void **)(*(_QWORD *)(a1 + 32) + 16), 0);
  logging_disabled = nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 72) = *(_DWORD *)(a1 + 40);
  v35 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)(*(_QWORD *)(a1 + 32) + 16), 1);
  v36 = *(_QWORD **)(a1 + 32);
  if (v36[6])
  {
    if (!logging_disabled)
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v37 = (id)glistenerLogObj;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = *(_QWORD *)(a1 + 32);
        v39 = *(unsigned __int16 *)(v38 + 40);
        v40 = *(_QWORD *)(v38 + 48);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v39;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v35;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v40;
        _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEFAULT, "[L%u %{public}s] start for connection %@", buf, 0x1Cu);
      }

      v36 = *(_QWORD **)(a1 + 32);
    }
    v41 = v36;
    nw_context_assert_queue((void *)v41[3]);
    v42 = (void *)v41[6];
    v43 = (uint64_t *)v41[2];
    if (v42)
    {
      listener_protocol_on_nw_queue = nw_connection_get_listener_protocol_on_nw_queue(v42, v43, 0);
      if (listener_protocol_on_nw_queue)
      {
        v45 = -[nw_listener_inbox_protocol initWithProtocol:delegate:]([nw_listener_inbox_protocol alloc], listener_protocol_on_nw_queue, v41);
        if (v45)
        {
          v46 = nw_array_create();
          v47 = (void *)v41[18];
          v41[18] = v46;

          nw_array_append(v41[18], v45);
          nw_listener_set_state_on_queue(v41, 2, 0);
LABEL_193:

          goto LABEL_194;
        }
        v79 = v41[2];
        if (v79 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v79 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v80 = (id)glistenerLogObj;
          if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
          {
            v81 = nw_listener_get_id_string(v41);
            v82 = *(_QWORD *)(listener_protocol_on_nw_queue + 16);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_listener_start_connection_on_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v81;
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = v82;
            _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Failed to create inbox for %{public}s", buf, 0x20u);
          }

        }
        v68 = v41;
        v83 = nw_error_create_posix_error(12);
        nw_listener_set_state_on_queue(v68, 3, v83);

      }
      else
      {
        v69 = v41[2];
        if (v69 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v69 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v70 = (id)glistenerLogObj;
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          {
            v71 = nw_listener_get_id_string(v41);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_start_connection_on_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v71;
            _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener could not find protocol to join in connection", buf, 0x16u);
          }

        }
        v45 = v41;
        v68 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
        nw_listener_set_state_on_queue(v45, 3, v68);
      }
    }
    else
    {
      if (v43 && !nw_path_parameters_get_logging_disabled(v43[13]))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v66 = (id)glistenerLogObj;
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          v67 = nw_listener_get_id_string(v41);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_start_connection_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v67;
          _os_log_impl(&dword_182FBE000, v66, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener no longer has connection to join", buf, 0x16u);
        }

      }
      v45 = v41;
      v68 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 57);
      nw_listener_set_state_on_queue(v45, 3, v68);
    }

    goto LABEL_193;
  }
  if (!v36[7])
  {
    if (!logging_disabled)
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v72 = (id)glistenerLogObj;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        v73 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 40);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v73;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v35;
        _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_DEFAULT, "[L%u %{public}s] start", buf, 0x12u);
      }

      v36 = *(_QWORD **)(a1 + 32);
    }
    v41 = v36;
    nw_context_assert_queue((void *)v41[3]);
    nw_listener_set_state_on_queue(v41, 1, 0);
    LODWORD(fds) = 12;
    evaluator_for_listener = nw_path_create_evaluator_for_listener((void *)v41[2], (int *)&fds);
    v75 = (void *)v41[21];
    v41[21] = evaluator_for_listener;

    v76 = (void *)v41[21];
    if (v76)
    {
      *(_QWORD *)buf = v12;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL26nw_listener_start_on_queueP22NWConcrete_nw_listener_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14AC2C8;
      v77 = v41;
      *(_QWORD *)&buf[32] = v77;
      nw_path_evaluator_set_update_handler(v76, 0, buf);
      v78 = nw_path_evaluator_copy_path((os_unfair_lock_s *)v41[21]);
      nw_listener_handle_new_path_on_queue(v77, v78);

      v45 = *(_QWORD **)&buf[32];
    }
    else
    {
      v111 = v41[2];
      if (v111 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v111 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v112 = (id)glistenerLogObj;
        if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
        {
          v113 = nw_listener_get_id_string(v41);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_start_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v113;
          _os_log_impl(&dword_182FBE000, v112, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] nw_path_create_evaluator_for_listener failed", buf, 0x16u);
        }

      }
      v114 = (int)fds;
      v45 = v41;
      v115 = nw_error_create_posix_error(v114);
      nw_listener_set_state_on_queue(v45, 3, v115);

    }
    goto LABEL_193;
  }
  if (!logging_disabled)
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v50 = (id)glistenerLogObj;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      v51 = *(_QWORD *)(a1 + 32);
      v52 = *(unsigned __int16 *)(v51 + 40);
      v53 = *(_QWORD *)(v51 + 56);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v52;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v35;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v53;
      _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEFAULT, "[L%u %{public}s] start for launchd key %{public}s", buf, 0x1Cu);
    }

    v36 = *(_QWORD **)(a1 + 32);
  }
  v54 = v36;
  nw_context_assert_queue(*((void **)v54 + 3));
  v55 = nw_array_create();
  v56 = (void *)*((_QWORD *)v54 + 18);
  *((_QWORD *)v54 + 18) = v55;

  cnt = 0;
  fds = 0;
  v57 = launch_activate_socket(*((const char **)v54 + 7), &fds, &cnt);
  if (v57)
  {
    v58 = *((_QWORD *)v54 + 2);
    if (v58 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v58 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v59 = (id)glistenerLogObj;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        v60 = nw_listener_get_id_string(v54);
        v61 = *((_QWORD *)v54 + 7);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_listener_start_launchd_on_queue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v60;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v61;
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v57;
        _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] launch_activate_socket(%{public}s failed: %{darwin.errno}d", buf, 0x26u);
      }

    }
    v62 = nw_error_create_posix_error(v57);
  }
  else
  {
    v62 = 0;
  }
  v84 = fds;
  if (!fds)
    goto LABEL_178;
  if (!cnt)
    goto LABEL_177;
  for (i = 0; i < cnt; ++i)
  {
    if (v62)
    {
      close(fds[i]);
      continue;
    }
    v133 = 4;
    v134 = 0;
    if (getsockopt(fds[i], 0xFFFF, 4104, &v134, &v133))
      v86 = 0;
    else
      v86 = v134 == 1;
    if (v86)
    {
      v90 = [nw_listener_inbox_socket alloc];
      v91 = fds[i];
      v92 = *((id *)v54 + 2);
      v93 = v54;
      if (v90)
      {
        v94 = -[nw_listener_inbox_socket initWithParameters:delegate:](v90, "initWithParameters:delegate:", v92, v93);
        v95 = v94;
        if (!v94 || v91 < 0)
        {
          v90 = 0;
        }
        else
        {
          v94->_sockfd_from_client = v91;
          v95 = v94;
          v90 = v95;
        }
      }
      else
      {
        v95 = 0;
      }

      if (!v90)
      {
        v62 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 45);
        v101 = *((_QWORD *)v54 + 2);
        if (v101 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v101 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v102 = (id)glistenerLogObj;
          if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
          {
            v103 = nw_listener_get_id_string(v93);
            v104 = *((_QWORD *)v54 + 7);
            v105 = *((_QWORD *)v54 + 2);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_listener_start_launchd_on_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v103;
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = v104;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = i;
            *(_WORD *)&buf[42] = 2114;
            v138 = v105;
            _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Failed to create inbox for %{public}s[%zu] with parameters %{public}@", buf, 0x34u);
          }

        }
        close(fds[i]);
        goto LABEL_174;
      }
      -[nw_listener_inbox_socket start](v90, "start");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v96 = *((_QWORD *)v54 + 2);
      if (v62)
      {
        if (!v96 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v96 + 104)))
          goto LABEL_174;
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v97 = (id)glistenerLogObj;
        if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
        {
          v98 = nw_listener_get_id_string(v93);
          v99 = *((_QWORD *)v54 + 7);
          v100 = *((_QWORD *)v54 + 2);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_listener_start_launchd_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v98;
          *(_WORD *)&buf[22] = 2114;
          *(_QWORD *)&buf[24] = v62;
          *(_WORD *)&buf[32] = 2114;
          *(_QWORD *)&buf[34] = v90;
          *(_WORD *)&buf[42] = 2082;
          v138 = v99;
          v139 = 2048;
          v140 = i;
          v141 = 2114;
          v142 = v100;
          _os_log_impl(&dword_182FBE000, v97, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Error %{public}@ starting inbox %{public}@ for %{public}s[%zu] with parameters %{public}@", buf, 0x48u);
        }
      }
      else
      {
        if (v96 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v96 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1)
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
          v106 = (id)glistenerLogObj;
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
          {
            v107 = nw_listener_get_id_string(v93);
            v108 = *((_QWORD *)v54 + 7);
            v109 = *((_QWORD *)v54 + 2);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_listener_start_launchd_on_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v107;
            *(_WORD *)&buf[22] = 2114;
            *(_QWORD *)&buf[24] = v90;
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = v108;
            *(_WORD *)&buf[42] = 2048;
            v138 = i;
            v139 = 2114;
            v140 = v109;
            _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] Started inbox %{public}@ for %{public}s[%zu] with parameters %{public}@", buf, 0x3Eu);
          }

        }
        -[nw_listener_inbox local_endpoint](v90, "local_endpoint");
        v97 = objc_claimAutoreleasedReturnValue();
        if (v97)
          nw_listener_set_local_endpoint_on_queue(v93, v97);
        nw_array_append(*((_QWORD *)v54 + 18), v90);
      }

LABEL_174:
      continue;
    }
    v87 = *((_QWORD *)v54 + 2);
    if (v87 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v87 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v88 = (id)glistenerLogObj;
      if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
      {
        v89 = *((_QWORD *)v54 + 7);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_listener_start_launchd_on_queue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v54 + 42;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v89;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = i;
        _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] socket %{public}s[%zu] not SOCK_STREAM - not supported", buf, 0x2Au);
      }

    }
    v62 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 45);
    close(fds[i]);
  }
  v84 = fds;
  if (fds)
  {
LABEL_177:
    free(v84);
    fds = 0;
  }
LABEL_178:
  if (!v62)
  {
    v110 = *((_QWORD *)v54 + 18);
    if (v110 && *(_QWORD *)(v110 + 24) != *(_QWORD *)(v110 + 16))
    {
      v62 = 0;
      nw_listener_set_state_on_queue(v54, 2, 0);
      goto LABEL_184;
    }
    v62 = nw_error_create_posix_error(22);
  }
  nw_listener_set_state_on_queue(v54, 3, v62);
LABEL_184:

LABEL_194:
  if (v35)
    free(v35);
LABEL_196:

  _Block_object_dispose(&v121, 8);
  _Block_object_dispose(&v125, 8);
  _Block_object_dispose(type, 8);
}

void sub_18352D8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

_QWORD *__nw_listener_start_block_invoke_53(_QWORD *result)
{
  *(_BYTE *)(*(_QWORD *)(result[5] + 8) + 24) = *(_QWORD *)(result[4] + 88) != 0;
  *(_BYTE *)(*(_QWORD *)(result[6] + 8) + 24) = *(_QWORD *)(result[4] + 96) != 0;
  *(_BYTE *)(*(_QWORD *)(result[7] + 8) + 24) = *(_QWORD *)(result[4] + 112) != 0;
  return result;
}

void ___ZL26nw_listener_start_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  const char *id_string;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v4 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v4 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v5 = (id)glistenerLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      v7 = 136446722;
      v8 = "nw_listener_start_on_queue_block_invoke";
      v9 = 2082;
      v10 = id_string;
      v11 = 2114;
      v12 = v3;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Handling new path %{public}@", (uint8_t *)&v7, 0x20u);
    }

  }
  nw_listener_handle_new_path_on_queue(*(void **)(a1 + 32), v3);

}

void sub_18352DBD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_listener_handle_new_path_on_queue(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void (**v7)(_QWORD);
  char *v8;
  id *v9;
  NSObject *v10;
  NSObject *v11;
  xpc_object_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSObject *v17;
  id v18;
  void *v19;
  Class isa;
  NSObject *v21;
  const char *id_string;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  Class v27;
  int v28;
  int v29;
  uint64_t v30;
  void *v31;
  objc_class *v32;
  void *v33;
  id v34;
  NWConcrete_nw_listener *v35;
  size_t count;
  id v37;
  NSObject *v38;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  Class v52;
  NSObject *v53;
  const char *v54;
  char *v55;
  os_log_type_t v56;
  Class v57;
  const char *v58;
  char *backtrace_string;
  os_log_type_t v60;
  _BOOL4 v61;
  Class v62;
  Class v63;
  const char *v64;
  size_t v65;
  os_log_type_t v66;
  id v67;
  id v68;
  NSObject *v69;
  _QWORD aBlock[4];
  id v71;
  id v72;
  char v73;
  os_log_type_t type;
  _BYTE buf[24];
  __int128 v76;
  id v77;
  id v78;
  NWConcrete_nw_listener *v79;
  uint8_t v80[4];
  const char *v81;
  __int16 v82;
  void *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  if ((*((_DWORD *)v3 + 32) - 1) <= 1 && (*((_BYTE *)v3 + 302) & 1) == 0)
  {
    v5 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL36nw_listener_handle_new_path_on_queueP22NWConcrete_nw_listenerPU21objcproto10OS_nw_path8NSObject_block_invoke;
    aBlock[3] = &unk_1E14ACE68;
    v6 = v3;
    v71 = v6;
    v72 = v4;
    v7 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    v7[2](v7);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);

    if (nw_path_get_status(*((nw_path_t *)v6 + 22)) != nw_path_status_satisfiable)
    {
      nw_listener_clear_trigger_agents_on_queue((NWConcrete_nw_listener *)v6);
LABEL_121:
      nw_listener_reconcile_inboxes_on_queue((NWConcrete_nw_listener *)v6);

      goto LABEL_122;
    }
    v8 = (char *)v6;
    nw_context_assert_queue(*((void **)v3 + 3));
    v9 = (id *)(v8 + 200);
    if (!*((_QWORD *)v8 + 25))
    {

      goto LABEL_14;
    }
    if (*((_QWORD *)v8 + 24))
    {
      v10 = nw_path_copy_inactive_agent_uuids(*((void **)v6 + 22), 0);
      v11 = v10;
      if (v10 && xpc_array_get_count(v10))
      {
        v69 = v11;
        v12 = xpc_array_create(0, 0);
        if (v12)
        {
          v13 = *((id *)v8 + 24);
          v14 = *((_QWORD *)v6 + 22);
          if (v14 && (v15 = *(void **)(v14 + 224)) != 0)
            v16 = v15;
          else
            v16 = 0;
          v33 = (void *)*((_QWORD *)v8 + 25);
          *(_QWORD *)buf = v5;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL42nw_listener_update_trigger_agents_on_queueP22NWConcrete_nw_listener_block_invoke;
          *(_QWORD *)&v76 = &unk_1E149CE48;
          v67 = v13;
          *((_QWORD *)&v76 + 1) = v67;
          v68 = v16;
          v77 = v68;
          v34 = v12;
          v78 = v34;
          v35 = v8;
          v79 = v35;
          xpc_array_apply(v33, buf);
          count = xpc_array_get_count(v34);
          if (count)
          {
            objc_storeStrong((id *)v8 + 25, v12);
            v37 = v68;
            v38 = *((_QWORD *)v8 + 24);
            *((_QWORD *)v8 + 24) = v37;
          }
          else
          {
            nw_listener_clear_trigger_agents_on_queue(v35);
            v43 = *((_QWORD *)v35 + 2);
            if (!v43 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v43 + 104)))
            {
LABEL_61:

              if (!count)
              {
LABEL_31:
                v25 = *((_QWORD *)v8 + 2);
                if (!v25 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v25 + 104)))
                  goto LABEL_121;
                if (__nwlog_listener_log::onceToken != -1)
                  dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
                v17 = (id)glistenerLogObj;
                if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                {
                  v26 = v8;

                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_listener_handle_new_path_on_queue";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v26 + 42;
                  _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] agents failed to become active", buf, 0x16u);
                }
                goto LABEL_120;
              }
LABEL_14:
              v17 = v8;
              nw_context_assert_queue(*((void **)v3 + 3));
              v18 = nw_path_copy_inactive_agent_uuids(*((void **)v6 + 22), 0);
              v19 = v18;
              if (!v18 || !xpc_array_get_count(v18))
                goto LABEL_119;
              if (*v9 || (v27 = v17[23].isa) != 0 && xpc_equal(v27, v19))
              {
                isa = v17[2].isa;
                if (!isa || nw_path_parameters_get_logging_disabled(*((_QWORD *)isa + 13)))
                  goto LABEL_119;
                if (__nwlog_listener_log::onceToken != -1)
                  dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
                v21 = (id)glistenerLogObj;
                if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
                {
                  id_string = nw_listener_get_id_string(v17);
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = id_string;
                  _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Already triggered agents", buf, 0x16u);
                }
                goto LABEL_118;
              }
              nw_listener_clear_trigger_agents_on_queue((NWConcrete_nw_listener *)v17);
              v21 = xpc_array_create(0, 0);
              if (v21)
              {
                v28 = nw_path_evaluator_trigger_agents(v17[21].isa, 0, 0, v21);
                v29 = v28;
                if (v28 == 1)
                {
                  v57 = v17[2].isa;
                  if (!v57 || nw_path_parameters_get_logging_disabled(*((_QWORD *)v57 + 13)))
                    goto LABEL_118;
                  if (__nwlog_listener_log::onceToken != -1)
                    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
                  v53 = (id)glistenerLogObj;
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                  {
                    v58 = nw_listener_get_id_string(v17);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v58;
                    *(_WORD *)&buf[22] = 1024;
                    LODWORD(v76) = 1;
                    WORD2(v76) = 2082;
                    *(_QWORD *)((char *)&v76 + 6) = "cannot satisfy";
                    _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Trigger failed: [%d] %{public}s", buf, 0x26u);
                  }
                }
                else if (v28 || !xpc_array_get_count(v21))
                {
                  v52 = v17[2].isa;
                  if (!v52 || nw_path_parameters_get_logging_disabled(*((_QWORD *)v52 + 13)))
                    goto LABEL_118;
                  if (__nwlog_listener_log::onceToken != -1)
                    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
                  v53 = (id)glistenerLogObj;
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                  {
                    v54 = nw_listener_get_id_string(v17);
                    v55 = off_1E14A9360[v29];
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v54;
                    *(_WORD *)&buf[22] = 1024;
                    LODWORD(v76) = v29;
                    WORD2(v76) = 2082;
                    *(_QWORD *)((char *)&v76 + 6) = v55;
                    _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Trigger failed: [%d] %{public}s", buf, 0x26u);
                  }
                }
                else
                {
                  objc_storeStrong((id *)&v17[23].isa, v19);
                  v30 = *((_QWORD *)v6 + 22);
                  if (v30 && (v31 = *(void **)(v30 + 224)) != 0)
                    v32 = v31;
                  else
                    v32 = 0;
                  v62 = v17[24].isa;
                  v17[24].isa = v32;

                  objc_storeStrong(v9, v21);
                  v63 = v17[2].isa;
                  if (!v63 || nw_path_parameters_get_logging_disabled(*((_QWORD *)v63 + 13)))
                    goto LABEL_118;
                  if (__nwlog_listener_log::onceToken != -1)
                    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
                  v53 = (id)glistenerLogObj;
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                  {
                    v64 = nw_listener_get_id_string(v17);
                    v65 = xpc_array_get_count(v19);
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v64;
                    *(_WORD *)&buf[22] = 2048;
                    *(_QWORD *)&v76 = v65;
                    _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Triggered %zu agents", buf, 0x20u);
                  }
                }

LABEL_118:
LABEL_119:

LABEL_120:
                goto LABEL_121;
              }
              __nwlog_obj();
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_listener_trigger_agents_on_queue";
              v49 = (char *)_os_log_send_and_compose_impl();

              v80[0] = 16;
              type = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v49, v80, &type))
              {
                if (v80[0] == 17)
                {
                  __nwlog_obj();
                  v50 = objc_claimAutoreleasedReturnValue();
                  v51 = v80[0];
                  if (os_log_type_enabled(v50, (os_log_type_t)v80[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s xpc_array_create failed", buf, 0xCu);
                  }
                }
                else if (type)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v50 = objc_claimAutoreleasedReturnValue();
                  v60 = v80[0];
                  v61 = os_log_type_enabled(v50, (os_log_type_t)v80[0]);
                  if (backtrace_string)
                  {
                    if (v61)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v50, v60, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(backtrace_string);
                    goto LABEL_115;
                  }
                  if (v61)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    _os_log_impl(&dword_182FBE000, v50, v60, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v50 = objc_claimAutoreleasedReturnValue();
                  v66 = v80[0];
                  if (os_log_type_enabled(v50, (os_log_type_t)v80[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    _os_log_impl(&dword_182FBE000, v50, v66, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
                  }
                }

              }
LABEL_115:
              if (v49)
                free(v49);
              v21 = 0;
              goto LABEL_118;
            }
            if (__nwlog_listener_log::onceToken != -1)
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
            v38 = (id)glistenerLogObj;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              v44 = nw_listener_get_id_string(v35);
              *(_DWORD *)v80 = 136446466;
              v81 = "nw_listener_update_trigger_agents_on_queue";
              v82 = 2082;
              v83 = (void *)v44;
              _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] all triggered agents updated", v80, 0x16u);
            }
          }

          goto LABEL_61;
        }
        __nwlog_obj();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v80 = 136446210;
        v81 = "nw_listener_update_trigger_agents_on_queue";
        v40 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v73 = 0;
        if (__nwlog_fault(v40, &type, &v73))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v41 = objc_claimAutoreleasedReturnValue();
            v42 = type;
            if (os_log_type_enabled(v41, type))
            {
              *(_DWORD *)v80 = 136446210;
              v81 = "nw_listener_update_trigger_agents_on_queue";
              _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s xpc_array_create failed", v80, 0xCu);
            }
          }
          else if (v73)
          {
            v45 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v41 = objc_claimAutoreleasedReturnValue();
            v46 = type;
            v47 = os_log_type_enabled(v41, type);
            if (v45)
            {
              if (v47)
              {
                *(_DWORD *)v80 = 136446466;
                v81 = "nw_listener_update_trigger_agents_on_queue";
                v82 = 2082;
                v83 = v45;
                _os_log_impl(&dword_182FBE000, v41, v46, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", v80, 0x16u);
              }

              free(v45);
              goto LABEL_98;
            }
            if (v47)
            {
              *(_DWORD *)v80 = 136446210;
              v81 = "nw_listener_update_trigger_agents_on_queue";
              _os_log_impl(&dword_182FBE000, v41, v46, "%{public}s xpc_array_create failed, no backtrace", v80, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v41 = objc_claimAutoreleasedReturnValue();
            v56 = type;
            if (os_log_type_enabled(v41, type))
            {
              *(_DWORD *)v80 = 136446210;
              v81 = "nw_listener_update_trigger_agents_on_queue";
              _os_log_impl(&dword_182FBE000, v41, v56, "%{public}s xpc_array_create failed, backtrace limit exceeded", v80, 0xCu);
            }
          }

        }
LABEL_98:
        if (v40)
          free(v40);

        goto LABEL_14;
      }
      nw_listener_clear_trigger_agents_on_queue((NWConcrete_nw_listener *)v8);
    }
    else
    {
      nw_listener_clear_trigger_agents_on_queue((NWConcrete_nw_listener *)v8);
      v23 = *((_QWORD *)v8 + 2);
      if (!v23 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v23 + 104)))
      {

        goto LABEL_31;
      }
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v11 = (id)glistenerLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v24 = nw_listener_get_id_string(v8);
        *(_DWORD *)v80 = 136446466;
        v81 = "nw_listener_update_trigger_agents_on_queue";
        v82 = 2082;
        v83 = (void *)v24;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] no inactive agent information", v80, 0x16u);
      }
    }

    goto LABEL_31;
  }
LABEL_122:

}

void sub_18352E8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void ___ZL36nw_listener_handle_new_path_on_queueP22NWConcrete_nw_listenerPU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 176), *(id *)(a1 + 40));
}

void nw_listener_clear_trigger_agents_on_queue(NWConcrete_nw_listener *a1)
{
  void *v1;
  void *v2;
  void *v3;
  NWConcrete_nw_listener *v4;

  v4 = a1;
  nw_context_assert_queue(*((void **)v4 + 3));
  v1 = (void *)*((_QWORD *)v4 + 23);
  *((_QWORD *)v4 + 23) = 0;

  v2 = (void *)*((_QWORD *)v4 + 24);
  *((_QWORD *)v4 + 24) = 0;

  v3 = (void *)*((_QWORD *)v4 + 25);
  *((_QWORD *)v4 + 25) = 0;

}

void sub_18352EA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_listener_update_trigger_agents_on_queueP22NWConcrete_nw_listener_block_invoke(xpc_object_t *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  const char *id_string;
  const char *v10;
  const unsigned __int8 *bytes;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t uint64;
  _BYTE v17[37];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (!v4)
  {
    v6 = 0;
LABEL_5:
    v7 = *((_QWORD *)a1[7] + 2);
    if (v7 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v7 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v8 = (id)glistenerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(a1[7]);
        v10 = "<NULL>";
        *(_DWORD *)v17 = 136446722;
        *(_QWORD *)&v17[4] = "nw_listener_update_trigger_agents_on_queue_block_invoke";
        *(_WORD *)&v17[12] = 2082;
        if (v6)
          v10 = v6;
        *(_QWORD *)&v17[14] = id_string;
        *(_WORD *)&v17[22] = 2082;
        *(_QWORD *)&v17[24] = v10;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Invalid value: %{public}s", v17, 0x20u);
      }

    }
    if (v6)
      free(v6);
    goto LABEL_21;
  }
  if (object_getClass(v4) != (Class)MEMORY[0x1E0C813A0])
  {
    v6 = (char *)MEMORY[0x186DB5A08](v5);
    goto LABEL_5;
  }
  memset(v17, 0, sizeof(v17));
  bytes = xpc_uuid_get_bytes(v5);
  uuid_unparse(bytes, v17);
  xpc_dictionary_get_value(a1[4], v17);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_get_value(a1[5], v17);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v13;
  if (v12)
  {
    if (v13)
    {
      uint64 = xpc_dictionary_get_uint64(v12, "generation");
      if (uint64 == xpc_dictionary_get_uint64(v14, "generation"))
        xpc_array_append_value(a1[6], v5);
    }
  }

LABEL_21:
  return 1;
}

void sub_18352EC74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_listener_teardown_protocol_inboxes(void *a1)
{
  void **v1;
  void **v2;
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  void **v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_context(v1[2]);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_listener_teardown_protocol_inboxes_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v13 = v2;
    nw_queue_context_async(v3, v12);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_listener_teardown_protocol_inboxes";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_teardown_protocol_inboxes";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_listener_teardown_protocol_inboxes";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_teardown_protocol_inboxes";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_teardown_protocol_inboxes";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_18352EF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_listener_teardown_protocol_inboxes_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *id_string;
  _QWORD v11[4];
  NSObject *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) != 2 || (*(_BYTE *)(v2 + 302) & 1) != 0)
  {
    v9 = *(_QWORD *)(v2 + 16);
    if (v9 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v9 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v8 = (id)glistenerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136446466;
        v14 = "nw_listener_teardown_protocol_inboxes_block_invoke";
        v15 = 2082;
        v16 = id_string;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener is not ready, ignoring teardown protocol inboxes", buf, 0x16u);
      }
      goto LABEL_18;
    }
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v5 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136446466;
        v14 = "nw_listener_teardown_protocol_inboxes_block_invoke";
        v15 = 2082;
        v16 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] tearing down protocol inboxes", buf, 0x16u);
      }

    }
    v6 = *(_QWORD **)(a1 + 32);
    v7 = v6[18];
    if (v7)
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __nw_listener_teardown_protocol_inboxes_block_invoke_55;
      v11[3] = &unk_1E149CCB8;
      v12 = v6;
      nw_array_remove_objects(v7, (uint64_t)v11);
      v8 = v12;
LABEL_18:

    }
  }
}

uint64_t __nw_listener_teardown_protocol_inboxes_block_invoke_55(uint64_t a1, void *a2)
{
  nw_listener_inbox *v3;
  char isKindOfClass;
  uint64_t v5;
  NSObject *v6;
  const char *id_string;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  nw_listener_inbox *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v6 = (id)glistenerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        v9 = 136446722;
        v10 = "nw_listener_teardown_protocol_inboxes_block_invoke";
        v11 = 2082;
        v12 = id_string;
        v13 = 2114;
        v14 = v3;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancelling protocol inbox: %{public}@", (uint8_t *)&v9, 0x20u);
      }

    }
    nw_listener_resume_inbox(*(NWConcrete_nw_listener **)(a1 + 32), v3);
    nw_listener_cancel_inbox_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), v3);
  }

  return isKindOfClass & 1;
}

void sub_18352F330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_listener_cancel(nw_listener_t listener)
{
  nw_listener_t v1;
  nw_listener_t v2;
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  NSObject *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = listener;
  v2 = v1;
  if (v1)
  {
    v3 = nw_parameters_copy_context(v1[2].isa);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_listener_cancel_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v13 = v2;
    nw_queue_context_async(v3, v12);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_listener_cancel";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_cancel";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_listener_cancel";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_cancel";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_cancel";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_18352F62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_listener_cancel_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  NWConcrete_nw_listener **v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *id_string;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4 || (*(_BYTE *)(v2 + 302) & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 + 16);
    if (v8 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v8 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v9 = (id)glistenerLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        v11 = 136446466;
        v12 = "nw_listener_cancel_block_invoke";
        v13 = 2082;
        v14 = id_string;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Listener is already cancelled, ignoring cancel", (uint8_t *)&v11, 0x16u);
      }

    }
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v5 = nw_listener_get_id_string(*(void **)(a1 + 32));
        v11 = 136446466;
        v12 = "nw_listener_cancel_block_invoke";
        v13 = 2082;
        v14 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] cancel", (uint8_t *)&v11, 0x16u);
      }

    }
    v7 = *(_QWORD *)(a1 + 32);
    v6 = (NWConcrete_nw_listener **)(a1 + 32);
    *(_BYTE *)(v7 + 302) |= 1u;
    nw_listener_resume_all_inboxes_if_suspended_on_queue(*v6);
    nw_listener_teardown_on_queue(*v6);
    if (!*((_DWORD *)*v6 + 74))
      nw_listener_cancel_complete_on_queue(*v6);
  }
}

uint16_t nw_listener_get_port(nw_listener_t listener)
{
  NSObject *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  uint16_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  NSObject *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = listener;
  v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v20 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_get_port_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    v4 = *(_WORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_listener_get_port";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_get_port";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_get_port";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_get_port";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_get_port";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_18352FB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_get_port_block_invoke(uint64_t result)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_WORD *)(*(_QWORD *)(result + 32) + 300);
  return result;
}

id nw_listener_copy_advertise_descriptor(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  id v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v20 = __Block_byref_object_copy__17841;
    v21 = __Block_byref_object_dispose__17842;
    v22 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_copy_advertise_descriptor_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    v4 = *(id *)(*(_QWORD *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_listener_copy_advertise_descriptor";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_copy_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_copy_advertise_descriptor";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_copy_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_copy_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_18352FF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_listener_copy_advertise_descriptor_block_invoke(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 264));
}

id nw_listener_copy_parameters(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[2];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_listener_copy_parameters";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_listener_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_listener_copy_parameters";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_listener_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_listener_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_listener_get_path_uuid_block_invoke(uint64_t a1)
{
  _OWORD *v1;
  void *v2;
  char *v3;

  v1 = *(_OWORD **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 176);
  if (v2)
  {
    v3 = v2;
    *v1 = *(_OWORD *)(v3 + 120);

  }
  else
  {
    uuid_clear(*(unsigned __int8 **)(a1 + 40));
  }
}

void nw_listener_simulate_mDNSResponder_crash(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD aBlock[4];
  os_unfair_lock_s *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_listener_simulate_mDNSResponder_crash_block_invoke;
    aBlock[3] = &unk_1E14ACFD0;
    v13 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_listener_simulate_mDNSResponder_crash";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_simulate_mDNSResponder_crash";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_listener_simulate_mDNSResponder_crash";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_simulate_mDNSResponder_crash";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_listener_simulate_mDNSResponder_crash";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183530524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_listener_simulate_mDNSResponder_crash_block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  DNSServiceRef *v5;
  dnssd_sock_t v6;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 272);
  if (v2 && objc_msgSend(v2, "count") == 1)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 272), "objectAtIndexedSubscript:", 0);
    v3 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v4 = v3[8];

    if (v4)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 272), "objectAtIndexedSubscript:", 0);
      v5 = (DNSServiceRef *)objc_claimAutoreleasedReturnValue();
      v6 = DNSServiceRefSockFD(v5[8]);

      shutdown(v6, 2);
    }
  }
}

void sub_1835305D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_listener_set_advertise_endpoints(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  _QWORD *v15;
  id v16;
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = (void *)v3[3];
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_listener_set_advertise_endpoints_block_invoke;
    v14[3] = &unk_1E14ACE68;
    v15 = v3;
    v16 = v4;
    nw_queue_context_async(v5, v14);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_listener_set_advertise_endpoints";
  v7 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_advertise_endpoints";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v18;
      v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_listener_set_advertise_endpoints";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_advertise_endpoints";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_listener_set_advertise_endpoints";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1835308E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_endpoints_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  id v5;
  const char *id_string;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  id *v18;
  os_unfair_lock_s *v19;
  id *v20;
  void (**v21)(_QWORD);
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  const char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  const char *v28;
  os_log_type_t v29;
  const char *v30;
  os_log_type_t v31;
  const char *v32;
  const char *v33;
  const char *v34;
  _QWORD aBlock[4];
  os_unfair_lock_s *v36;
  id *v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 128);
  if (v3 == 2)
  {
    if (!*(_QWORD *)(v2 + 264))
    {
      v18 = nw_listener_reconcile_advertised_endpoints((void *)v2, *(void **)(v2 + 272), *(void **)(a1 + 40), *(void **)(v2 + 176), 0);
      v19 = *(os_unfair_lock_s **)(a1 + 32);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_listener_set_advertise_endpoints_block_invoke_59;
      aBlock[3] = &unk_1E14ACE68;
      v36 = v19;
      v20 = v18;
      v37 = v20;
      v21 = (void (**)(_QWORD))_Block_copy(aBlock);
      os_unfair_lock_lock(v19 + 2);
      v21[2](v21);
      os_unfair_lock_unlock(v19 + 2);

      return;
    }
    v4 = *(_QWORD *)(v2 + 16);
    if (!v4 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v4 + 104)))
      return;
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v5 = (id)glistenerLogObj;
    id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
    *(_DWORD *)buf = 136446466;
    v41 = "nw_listener_set_advertise_endpoints_block_invoke";
    v42 = 2082;
    v43 = id_string;
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v7, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v8 = (id)glistenerLogObj;
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          v10 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          v41 = "nw_listener_set_advertise_endpoints_block_invoke";
          v42 = 2082;
          v43 = v10;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s [%{public}s] Called on listener with advertise descriptor set", buf, 0x16u);
        }
LABEL_64:

        goto LABEL_65;
      }
      if (!v38)
      {
        if (__nwlog_listener_log::onceToken != -1)
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
        v8 = (id)glistenerLogObj;
        v29 = type;
        if (os_log_type_enabled(v8, type))
        {
          v30 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          v41 = "nw_listener_set_advertise_endpoints_block_invoke";
          v42 = 2082;
          v43 = v30;
          _os_log_impl(&dword_182FBE000, v8, v29, "%{public}s [%{public}s] Called on listener with advertise descriptor set, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_64;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v8 = (id)glistenerLogObj;
      v23 = type;
      v24 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          v33 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          v41 = "nw_listener_set_advertise_endpoints_block_invoke";
          v42 = 2082;
          v43 = v33;
          _os_log_impl(&dword_182FBE000, v8, v23, "%{public}s [%{public}s] Called on listener with advertise descriptor set, no backtrace", buf, 0x16u);
        }
        goto LABEL_64;
      }
      if (v24)
      {
        v25 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136446722;
        v41 = "nw_listener_set_advertise_endpoints_block_invoke";
        v42 = 2082;
        v43 = v25;
        v44 = 2082;
        v45 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v23, "%{public}s [%{public}s] Called on listener with advertise descriptor set, dumping backtrace:%{public}s", buf, 0x20u);
      }
      goto LABEL_47;
    }
LABEL_65:
    if (!v7)
      return;
    goto LABEL_66;
  }
  v11 = *(_QWORD *)(v2 + 16);
  if (v3 > 1)
  {
    if (v11 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v11 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v16 = (id)glistenerLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        v17 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136446466;
        v41 = "nw_listener_set_advertise_endpoints_block_invoke";
        v42 = 2082;
        v43 = v17;
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Ignoring, listener is no longer ready", buf, 0x16u);
      }

    }
    return;
  }
  if (!v11 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v11 + 104)))
    return;
  if (__nwlog_listener_log::onceToken != -1)
    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
  v12 = (id)glistenerLogObj;
  v13 = nw_listener_get_id_string(*(void **)(a1 + 32));
  *(_DWORD *)buf = 136446466;
  v41 = "nw_listener_set_advertise_endpoints_block_invoke";
  v42 = 2082;
  v43 = v13;
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v38 = 0;
  if (!__nwlog_fault(v7, &type, &v38))
    goto LABEL_65;
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v8 = (id)glistenerLogObj;
    v14 = type;
    if (os_log_type_enabled(v8, type))
    {
      v15 = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446466;
      v41 = "nw_listener_set_advertise_endpoints_block_invoke";
      v42 = 2082;
      v43 = v15;
      _os_log_impl(&dword_182FBE000, v8, v14, "%{public}s [%{public}s] Called before listener was ready", buf, 0x16u);
    }
    goto LABEL_64;
  }
  if (!v38)
  {
    if (__nwlog_listener_log::onceToken != -1)
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
    v8 = (id)glistenerLogObj;
    v31 = type;
    if (os_log_type_enabled(v8, type))
    {
      v32 = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446466;
      v41 = "nw_listener_set_advertise_endpoints_block_invoke";
      v42 = 2082;
      v43 = v32;
      _os_log_impl(&dword_182FBE000, v8, v31, "%{public}s [%{public}s] Called before listener was ready, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_64;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  if (__nwlog_listener_log::onceToken != -1)
    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
  v8 = (id)glistenerLogObj;
  v26 = type;
  v27 = os_log_type_enabled(v8, type);
  if (!backtrace_string)
  {
    if (v27)
    {
      v34 = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446466;
      v41 = "nw_listener_set_advertise_endpoints_block_invoke";
      v42 = 2082;
      v43 = v34;
      _os_log_impl(&dword_182FBE000, v8, v26, "%{public}s [%{public}s] Called before listener was ready, no backtrace", buf, 0x16u);
    }
    goto LABEL_64;
  }
  if (v27)
  {
    v28 = nw_listener_get_id_string(*(void **)(a1 + 32));
    *(_DWORD *)buf = 136446722;
    v41 = "nw_listener_set_advertise_endpoints_block_invoke";
    v42 = 2082;
    v43 = v28;
    v44 = 2082;
    v45 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v8, v26, "%{public}s [%{public}s] Called before listener was ready, dumping backtrace:%{public}s", buf, 0x20u);
  }
LABEL_47:

  free(backtrace_string);
  if (v7)
LABEL_66:
    free(v7);
}

void sub_1835310F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_endpoints_block_invoke_59(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 272), *(id *)(a1 + 40));
}

void sub_18353126C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

BOOL NWPBServiceBrowseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  BOOL v54;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v14 = (_BYTE *)(a2 + *v8);
      if (*v14)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0)
        goto LABEL_40;
      v17 = *v3;
      v18 = *(_QWORD *)(a2 + v17);
      if (v18 == -1 || v18 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v19 = v18 + 1;
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v18);
      *(_QWORD *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0)
        goto LABEL_40;
      v21 = *v3;
      v22 = *(_QWORD *)(a2 + v21);
      if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v23 = v22 + 1;
      v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
      *(_QWORD *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_40;
      v25 = *v3;
      v26 = *(_QWORD *)(a2 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v27 = v26 + 1;
      v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
      *(_QWORD *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0)
        goto LABEL_40;
      v29 = *v3;
      v30 = *(_QWORD *)(a2 + v29);
      if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v31 = v30 + 1;
      v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
      *(_QWORD *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0)
        goto LABEL_40;
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v35 = v34 + 1;
      v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
      *(_QWORD *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0)
        goto LABEL_40;
      v37 = *v3;
      v38 = *(_QWORD *)(a2 + v37);
      if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v39 = v38 + 1;
      v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
      *(_QWORD *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0)
        goto LABEL_40;
      v41 = *v3;
      v42 = *(_QWORD *)(a2 + v41);
      if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v43 = v42 + 1;
      v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
      *(_QWORD *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0)
        goto LABEL_40;
      v45 = *v3;
      v46 = *(_QWORD *)(a2 + v45);
      if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v47 = v46 + 1;
      v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
      *(_QWORD *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0)
        goto LABEL_40;
      v49 = *v3;
      v50 = *(_QWORD *)(a2 + v49);
      if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_38:
        v14 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }
      v51 = v50 + 1;
      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
      *(_QWORD *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        v16 = 0;
        v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }
LABEL_40:
      v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v16 = 0;
LABEL_42:
      if (v53)
        v54 = 1;
      else
        v54 = (v16 & 7) == 4;
      if (v54)
        return *(_BYTE *)(a2 + *v8) == 0;
      if ((v16 >> 3) == 2)
      {
        PBReaderReadString();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = 8;
LABEL_4:
        v13 = *(void **)(a1 + v12);
        *(_QWORD *)(a1 + v12) = v11;

        goto LABEL_5;
      }
      if ((v16 >> 3) == 1)
      {
        PBReaderReadString();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = 16;
        goto LABEL_4;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v16 = 0;
LABEL_39:
    *v14 = 1;
    goto LABEL_40;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

char *nw_parameters_copy_description_internal(NWConcrete_nw_parameters *a1, int a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  const char *proxy_bundle_id;
  unint64_t expected_workload;
  unint64_t channel_teardown_delay;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  NWConcrete_nw_parameters *v12;
  int v13;
  char *attributed_bundle;
  char *v15;
  char *v16;
  int v17;
  _BOOL4 private_redacted;
  char *v19;
  __int16 multipath_service;
  OS_nw_endpoint *url_endpoint;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  char *v25;
  __int16 v26;
  OS_nw_endpoint *main_document_url_endpoint;
  const char *v28;
  NWConcrete_nw_protocol_stack *default_stack;
  void *v30;
  const char *v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  const char *v50;
  char *v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  const char *v56;
  id v57;
  uint64_t v58;
  const char *v59;
  id v60;
  uint64_t v61;
  const char *v62;
  id v63;
  uint64_t v64;
  const char *v65;
  id v66;
  uint64_t v67;
  const char *v68;
  id v69;
  uint64_t v70;
  const char *v71;
  id v72;
  uint64_t v73;
  const char *v74;
  id v75;
  uint64_t v76;
  const char *v77;
  id v78;
  uint64_t v79;
  const char *v80;
  id v81;
  uint64_t v82;
  const char *v83;
  id v84;
  uint64_t v85;
  const char *v86;
  id v87;
  uint64_t v88;
  const char *v89;
  id v90;
  uint64_t v91;
  const char *v92;
  id v93;
  uint64_t v94;
  const char *v95;
  id v96;
  uint64_t v97;
  const char *v98;
  unint64_t v99;
  const char *v100;
  NWConcrete_nw_protocol_stack *v101;
  OS_nw_protocol_options *transport_protocol;
  const char *v103;
  id *v104;
  const char *v105;
  const char *v106;
  const char *v107;
  id v108;
  int v109;
  id v110;
  char *identifier;
  int pid;
  NWConcrete_nw_path_parameters *path_parameters;
  const char *v114;
  char *v115;
  char *v116;
  int v117;
  int v118;
  os_log_type_t v119;
  char *v120;
  size_t v121;
  NWConcrete_nw_path_parameters *v122;
  OS_nw_endpoint *local_address;
  const char *v124;
  int v125;
  OS_nw_protocol_options *internet_options;
  const char *v127;
  os_unfair_lock_s *v128;
  os_unfair_lock_s *v129;
  char *v130;
  const char *v131;
  NWConcrete_nw_path_parameters *v132;
  __int16 v133;
  const char *v134;
  const char *v135;
  const char *v136;
  const char *v137;
  const char *v138;
  id v139;
  __int16 v140;
  id v141;
  __int16 v142;
  id v143;
  __int16 v144;
  id v145;
  __int16 v146;
  int prohibit_privacy_proxy;
  const char *v148;
  const char *v149;
  const char *v150;
  const char *v151;
  const char *v152;
  const char *v153;
  id v154;
  NWConcrete_nw_path_parameters **p_path_parameters;
  _BOOL4 v156;
  const char *v157;
  id v158;
  _BOOL4 v159;
  id v160;
  const char *v161;
  const char *v162;
  const char *v163;
  int companion_link_upgrade_preference;
  int companion_preference;
  const char *v166;
  const char *v167;
  const char *v168;
  const char *v170;
  const char *v171;
  const char *v172;
  const char *v173;
  const char *v174;
  const char *v175;
  const char *v176;
  const char *v177;
  const char *v178;
  const char *v179;
  const char *v180;
  const char *v181;
  _BOOL4 prohibit_cellular;
  const char *v183;
  const char *v184;
  const char *v185;
  const char *v186;
  const char *v187;
  const char *v188;
  const char *v189;
  const char *v190;
  const char *v191;
  const char *v192;
  const char *v193;
  const char *v194;
  const char *v195;
  const char *v196;
  const char *v197;
  const char *v198;
  NWConcrete_nw_parameters *v199;
  char *v200;
  char v201[8];
  uint64_t v202;
  _QWORD *(*v203)(uint64_t);
  void *v204;
  char *v205;
  char *v206;
  char v207[40];
  char v208[24];
  uint64_t v209;
  char v210;
  char v211[16];
  uint8_t buf[4];
  const char *v213;
  __int16 v214;
  char *v215;
  char v216[38];
  char v217[128];
  char v218[128];
  char v219[38];
  char v220[39];
  os_log_type_t type[150];
  char __str[144];
  char v223[8];
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v199 = v3;
  if (v3)
  {
    v4 = v3;
    if (v3->e_bundle_id)
    {
      snprintf(__str, 0x90uLL, ", bundle id: %s", v3->e_bundle_id);
      proxy_bundle_id = v4->proxy_bundle_id;
      if (proxy_bundle_id)
        goto LABEL_4;
    }
    else
    {
      __str[0] = 0;
      proxy_bundle_id = v3->proxy_bundle_id;
      if (proxy_bundle_id)
      {
LABEL_4:
        snprintf((char *)type, 0x96uLL, ", proxy bundle id: %s", proxy_bundle_id);
        expected_workload = v4->value.expected_workload;
        if (expected_workload)
          goto LABEL_5;
        goto LABEL_14;
      }
    }
    type[0] = OS_LOG_TYPE_DEFAULT;
    expected_workload = v4->value.expected_workload;
    if (expected_workload)
    {
LABEL_5:
      snprintf(v220, 0x27uLL, ", expected workload: %llu", expected_workload);
      channel_teardown_delay = v4->value.channel_teardown_delay;
      if (channel_teardown_delay)
      {
LABEL_6:
        snprintf(v219, 0x26uLL, ", teardown delay: %llums", channel_teardown_delay);
        goto LABEL_16;
      }
LABEL_15:
      v219[0] = 0;
LABEL_16:
      v12 = v4;
      v13 = *((unsigned __int8 *)&v12->path_parameters->path_value + 30);

      attributed_bundle = v12->path_parameters->attributed_bundle;
      if (v13)
      {
        v15 = attributed_bundle;
        v16 = v15;
        if (v15 && (v17 = *((_DWORD *)v15 + 31), (v17 - 2) >= 2))
        {
          private_redacted = v17 != 1;
        }
        else
        {
          if (nwlog_get_sensitive_redacted::onceToken != -1)
            dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
          private_redacted = nwlog_get_sensitive_redacted::sensitiveRedacted != 0;
        }

        if (!v12->url_endpoint)
          goto LABEL_28;
      }
      else
      {
        private_redacted = nw_context_get_private_redacted(attributed_bundle);
        if (!v12->url_endpoint)
          goto LABEL_28;
      }
      v19 = v12;
      multipath_service = v12->path_parameters->joinable_path_value.multipath_service;

      if ((multipath_service & 0x2000) == 0)
      {
        url_endpoint = v12->url_endpoint;
        if (private_redacted)
        {
          nw_endpoint_get_url_hash(url_endpoint);
          snprintf(v218, 0x80uLL, ", url hash: %s");
        }
        else
        {
          nw_endpoint_get_sanitized_url(url_endpoint);
          snprintf(v218, 0x80uLL, ", url: %s");
        }
        if (!v12->main_document_url_endpoint)
          goto LABEL_42;
LABEL_39:
        v25 = v12;
        v26 = v12->path_parameters->joinable_path_value.multipath_service;

        if ((v26 & 0x2000) == 0)
        {
          main_document_url_endpoint = v12->main_document_url_endpoint;
          if (private_redacted)
          {
            nw_endpoint_get_url_hash(main_document_url_endpoint);
            snprintf(v217, 0x80uLL, ", main document url hash: %s");
          }
          else
          {
            nw_endpoint_get_sanitized_url(main_document_url_endpoint);
            snprintf(v217, 0x80uLL, ", main document url: %s");
          }
          goto LABEL_44;
        }
LABEL_42:
        v217[0] = 0;
LABEL_44:
        if ((*((_QWORD *)&v12->value + 11) & 4) != 0)
          v28 = ", fast-open";
        else
          v28 = "";
        default_stack = v12->default_stack;
        v30 = (void *)nw_protocol_boringssl_copy_definition();
        v198 = v28;
        LODWORD(default_stack) = nw_protocol_stack_includes_protocol(default_stack, v30);

        v31 = ", tls";
        if (!(_DWORD)default_stack)
          v31 = "";
        v197 = v31;
        if ((*((_QWORD *)&v12->value + 11) & 0x40) != 0)
          v32 = "";
        else
          v32 = ", definite";
        v196 = v32;
        v33 = v12;
        v34 = *((_QWORD *)&v12->value + 11);

        v35 = ", server";
        if ((v34 & 0x8000) == 0)
          v35 = "";
        v195 = v35;
        v36 = v33;
        v37 = *((_QWORD *)&v12->value + 11);

        v38 = ", attach protocol listener";
        if ((v37 & 0x400000) == 0)
          v38 = "";
        v194 = v38;
        v39 = v36;
        v40 = *((_QWORD *)&v12->value + 11);

        v41 = ", prohibit joining";
        if ((v40 & 0x800000) == 0)
          v41 = "";
        v193 = v41;
        v42 = v39;
        v43 = *((_QWORD *)&v12->value + 11);

        v44 = ", allow joining fd";
        if ((v43 & 0x1000000) == 0)
          v44 = "";
        v192 = v44;
        v45 = v42;
        v46 = *((_QWORD *)&v12->value + 11);

        v47 = ", allow duplicate updates";
        if ((v46 & 0x4000000) == 0)
          v47 = "";
        v191 = v47;
        v48 = v45;
        v49 = *((_QWORD *)&v12->value + 11);

        v50 = ", don't always open listener socket";
        if ((v49 & 0x8000000) != 0)
          v50 = "";
        v190 = v50;
        v51 = v48;
        v52 = *((_QWORD *)&v12->value + 11);

        v53 = ", never open listener socket";
        if ((v52 & 0x10000000) == 0)
          v53 = "";
        v189 = v53;
        v54 = v51;
        v55 = *((_QWORD *)&v12->value + 11);

        v56 = ", disable listener datapath";
        if ((v55 & 0x20000000) == 0)
          v56 = "";
        v188 = v56;
        v57 = v54;
        v58 = *((_QWORD *)&v12->value + 11);

        v59 = ", requires DNSSEC validation";
        if ((v58 & 0x40000000) == 0)
          v59 = "";
        v187 = v59;
        v60 = v57;
        v61 = *((_QWORD *)&v12->value + 11);

        if ((v61 & 0x100) != 0)
          v62 = ", reuse local address";
        else
          v62 = "";
        v63 = v60;
        v64 = *((_QWORD *)&v12->value + 11);

        if ((v64 & 0x100000000) != 0)
          v65 = ", prohibit encrypted DNS";
        else
          v65 = "";
        v66 = v63;
        v67 = *((_QWORD *)&v12->value + 11);

        v68 = ", block trackers";
        if ((v67 & 0x200000000) == 0)
          v68 = "";
        v181 = v68;
        v69 = v66;
        v70 = *((_QWORD *)&v12->value + 11);

        v71 = ", fail if SVCB received";
        if ((v70 & 0x400000000) == 0)
          v71 = "";
        v179 = v71;
        v72 = v69;
        v73 = *((_QWORD *)&v12->value + 11);

        v74 = ", include ble";
        if ((v73 & 0x800000000) == 0)
          v74 = "";
        v186 = v74;
        v75 = v72;
        v76 = *((_QWORD *)&v12->value + 11);

        v77 = ", screen off";
        if ((v76 & 0x1000000000) == 0)
          v77 = "";
        v185 = v77;
        v78 = v75;
        v79 = *((_QWORD *)&v12->value + 11);

        v80 = ", internet fallback";
        if ((v79 & 0x2000000000) == 0)
          v80 = "";
        v184 = v80;
        v81 = v78;
        v82 = *((_QWORD *)&v12->value + 11);

        v83 = ", minimize logging";
        if ((v82 & 0x4000000000) == 0)
          v83 = "";
        v183 = v83;
        v84 = v81;
        v85 = *((_QWORD *)&v12->value + 11);

        v86 = ", local only";
        if ((v85 & 0x4000) == 0)
          v86 = "";
        v177 = v86;
        v87 = v84;
        v88 = *((_QWORD *)&v12->value + 11);

        v89 = ", stricter path scoping";
        if ((v88 & 0x10000000000) == 0)
          v89 = "";
        v175 = v89;
        v90 = v87;
        v91 = *((_QWORD *)&v12->value + 11);

        if ((v91 & 0x20000000000) != 0)
          v92 = ", allow private access tokens for third party";
        else
          v92 = "";
        v93 = v90;
        v94 = *((_QWORD *)&v12->value + 11);

        if ((v94 & 0x40000000000) != 0)
          v95 = ", using ephemeral configuration";
        else
          v95 = "";
        v96 = v93;
        v97 = *((_QWORD *)&v12->value + 11);

        if ((v97 & 0x80000000000) != 0)
          v98 = ", prevents system http proxy authentication";
        else
          v98 = "";
        v99 = *((unsigned __int8 *)&v12->path_parameters->path_value + 30);
        if (v99 > 2)
        {
          v100 = "unknown";
          if (aUnknown[0])
          {
LABEL_103:
            snprintf(v216, 0x26uLL, ", attribution: %s", v100);
            v101 = v12->default_stack;
            if (v101)
              goto LABEL_104;
            goto LABEL_112;
          }
        }
        else
        {
          v100 = off_1E149D258[v99];
          if (*v100)
            goto LABEL_103;
        }
        v216[0] = 0;
        v101 = v12->default_stack;
        if (v101)
        {
LABEL_104:
          transport_protocol = v101->transport_protocol;
          v103 = "generic";
          if (transport_protocol)
          {
            v104 = transport_protocol;
            v105 = v98;
            v106 = v95;
            v107 = v65;
            v108 = v96;
            v109 = a2;
            v110 = v104[1];

            v103 = "generic";
            identifier = nw_protocol_definition_get_identifier(v110);
            if (identifier)
              v103 = identifier;

            a2 = v109;
            v96 = v108;
            v65 = v107;
            v95 = v106;
            v98 = v105;
          }
          v200 = 0;
          if (a2)
            goto LABEL_109;
          goto LABEL_113;
        }
LABEL_112:
        v103 = "generic";
        v200 = 0;
        if (a2)
        {
LABEL_109:
          nw_path_parameters_copy_verbose_description(v12->path_parameters, (char *)buf);
          asprintf(&v200, "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s, %s", v103, __str, (const char *)type, v217, v218, v220, v219, v198, v197, v196, v195, v194, v193, v192, v191, v190, v189,
            v188,
            v216,
            v187,
            v62,
            v65,
            v181,
            v179,
            v186,
            v185,
            v184,
            v183,
            v177,
            v175,
            v92,
            v95,
            v98,
            (const char *)buf);
LABEL_204:
          v120 = v200;
          goto LABEL_205;
        }
LABEL_113:
        if (v12->path_parameters->process_path_value.pid)
        {
          snprintf(v211, 0x10uLL, ", pid: %d", v12->path_parameters->process_path_value.pid);
          pid = v12->path_parameters->process_path_value.pid;
        }
        else
        {
          pid = 0;
          v211[0] = 0;
        }
        if (pid == getpid())
          v211[0] = 0;
        path_parameters = v12->path_parameters;
        v114 = *(const char **)&path_parameters->joinable_path_value.fallback_mode;
        v210 = 0;
        v209 = 0;
        if (!v114)
          goto LABEL_140;
        v115 = path_parameters->attributed_bundle;
        v116 = v115;
        if (v115 && (v117 = *((_DWORD *)v115 + 31), (v117 - 2) >= 2))
        {
          if (v117 == 1)
          {

            goto LABEL_138;
          }

        }
        else
        {
          if (nwlog_get_sensitive_redacted::onceToken != -1)
            dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
          v118 = nwlog_get_sensitive_redacted::sensitiveRedacted;

          if (!v118)
          {
LABEL_138:
            if (*v114)
            {
              snprintf((char *)buf, 0x91uLL, ", account id: %s", v114);
              goto LABEL_141;
            }
LABEL_140:
            buf[0] = 0;
LABEL_141:
            v122 = v12->path_parameters;
            if (v122->path_value.traffic_class)
            {
              snprintf(v208, 0x18uLL, ", traffic class: %u", v122->path_value.traffic_class);
              v122 = v12->path_parameters;
              local_address = v122->local_address;
              if (!local_address)
                goto LABEL_148;
            }
            else
            {
              v208[0] = 0;
              local_address = v122->local_address;
              if (!local_address)
                goto LABEL_148;
            }
            v125 = *((unsigned __int8 *)local_address + 104);
            v124 = (char *)local_address + 104;
            if (v125)
            {
              snprintf(v207, 0x28uLL, ", interface: %s", v124);
              internet_options = v12->path_parameters->internet_options;
              if (!internet_options)
                goto LABEL_151;
LABEL_149:
              v127 = v103;
              v128 = internet_options;
              *(_QWORD *)v223 = 0;
              v224 = v223;
              v225 = 0x2020000000;
              v226 = 0;
              v129 = v128 + 45;
              *(_QWORD *)v201 = MEMORY[0x1E0C809B0];
              v202 = 3221225472;
              v203 = __nw_endpoint_get_description_block_invoke;
              v204 = &unk_1E14ACE40;
              v130 = v128;
              v205 = v130;
              v206 = v223;
              os_unfair_lock_lock(v129);
              __nw_endpoint_get_description_block_invoke((uint64_t)v201);
              os_unfair_lock_unlock(v129);
              v131 = (const char *)*((_QWORD *)v224 + 3);

              _Block_object_dispose(v223, 8);
              v103 = v127;
              if (v131)
              {
                snprintf(v201, 0x8CuLL, ", local: %s", v131);
LABEL_152:
                v132 = v12->path_parameters;
                if (*(_DWORD *)((char *)&v132->path_value + 31))
                {
                  snprintf(v223, 0x19uLL, ", multipath service: %u", *(_DWORD *)((char *)&v132->path_value + 31));
                  v132 = v12->path_parameters;
                }
                else
                {
                  v223[0] = 0;
                }
                v133 = *((_WORD *)&v132->path_value + 14);
                v134 = ", legacy-socket";
                if ((v133 & 0x10) == 0)
                  v134 = "";
                v178 = v134;
                v180 = v103;
                if ((v133 & 1) != 0)
                  v135 = ", no expensive";
                else
                  v135 = "";
                v136 = ", no constrained";
                if ((v133 & 2) == 0)
                  v136 = "";
                v174 = v136;
                v176 = v135;
                if ((v133 & 4) != 0)
                  v137 = ", allow ultra constrained";
                else
                  v137 = "";
                if ((v133 & 8) != 0)
                  v138 = ", no roaming";
                else
                  v138 = "";
                v172 = v138;
                v173 = v137;
                prohibit_cellular = nw_parameters_get_prohibit_cellular(v96);
                v139 = v96;
                v140 = v12->path_parameters->joinable_path_value.multipath_service;

                v141 = v139;
                v142 = v12->path_parameters->joinable_path_value.multipath_service;

                v143 = v141;
                v144 = *((_WORD *)&v12->path_parameters->path_value + 14);

                v145 = v143;
                v146 = v12->path_parameters->joinable_path_value.multipath_service;

                prohibit_privacy_proxy = nw_parameters_get_prohibit_privacy_proxy(v145);
                if ((v146 & 0x400) != 0)
                  v148 = ", proxy fail closed for unreachable";
                else
                  v148 = "";
                v171 = v148;
                v149 = ", proxy fail closed";
                if ((v144 & 0x40) == 0)
                  v149 = "";
                v170 = v149;
                if ((v142 & 0x200) != 0)
                  v150 = ", no proxy path selection";
                else
                  v150 = "";
                if ((v140 & 0x100) != 0)
                  v151 = ", prefer no proxy";
                else
                  v151 = "";
                if (prohibit_cellular)
                  v152 = ", no cellular";
                else
                  v152 = "";
                if (prohibit_privacy_proxy)
                  v153 = ", prohibit privacy proxy";
                else
                  v153 = "";
                v154 = v145;
                p_path_parameters = &v12->path_parameters;
                v156 = (v12->path_parameters->joinable_path_value.multipath_service & 0x4000) == 0;

                if (v156)
                  v157 = "";
                else
                  v157 = ", known tracker";
                v158 = v154;
                v159 = ((*p_path_parameters)->joinable_path_value.multipath_service & 0x8000) == 0;

                v160 = v158;
                if (((LOWORD((*p_path_parameters)->joinable_path_value.multipath_service) | (BYTE2((*p_path_parameters)->joinable_path_value.multipath_service) << 16)) & 0x10000) != 0)
                  v161 = ", approved app domain";
                else
                  v161 = "";

                v162 = ", third party web content";
                if (v159)
                  v162 = "";
                v163 = ", prefer companion";
                companion_preference = (*p_path_parameters)->path_value.companion_preference;
                companion_link_upgrade_preference = (*p_path_parameters)->path_value.companion_link_upgrade_preference;
                if (companion_preference != 1)
                  v163 = "";
                if (companion_preference == 2)
                  v166 = ", avoid companion";
                else
                  v166 = "";
                v167 = ", bluetooth upgrade";
                if (companion_link_upgrade_preference != 1)
                  v167 = "";
                if (companion_link_upgrade_preference == 2)
                  v168 = ", wi-fi upgrade";
                else
                  v168 = "";
                asprintf(&v200, "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s", v180, __str, (const char *)type, v217, v211, (const char *)buf, v218, v208, v220, v219, v207, v201, v223, v178, v198, v197, v196,
                  v176,
                  v174,
                  v173,
                  v172,
                  v152,
                  v151,
                  v150,
                  v170,
                  v171,
                  v153,
                  v157,
                  v216,
                  v162,
                  v161,
                  v163,
                  v166,
                  v195,
                  v194,
                  v193,
                  v192,
                  v191,
                  v167,
                  v168,
                  v190,
                  v189,
                  v188,
                  v187,
                  v186,
                  v185,
                  v184,
                  v183);
                goto LABEL_204;
              }
LABEL_151:
              v201[0] = 0;
              goto LABEL_152;
            }
LABEL_148:
            v207[0] = 0;
            internet_options = v122->internet_options;
            if (!internet_options)
              goto LABEL_151;
            goto LABEL_149;
          }
        }
        v121 = strlen(*(const char **)&v12->path_parameters->joinable_path_value.fallback_mode);
        v114 = (const char *)&v209;
        __nwlog_salted_hash(*(const void **)&v12->path_parameters->joinable_path_value.fallback_mode, v121, (char *)&v209);
        goto LABEL_138;
      }
LABEL_28:
      v218[0] = 0;
      if (!v12->main_document_url_endpoint)
        goto LABEL_42;
      goto LABEL_39;
    }
LABEL_14:
    v220[0] = 0;
    channel_teardown_delay = v4->value.channel_teardown_delay;
    if (channel_teardown_delay)
      goto LABEL_6;
    goto LABEL_15;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v213 = "nw_parameters_copy_description_internal";
  v9 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  __str[0] = 0;
  if (__nwlog_fault(v9, type, __str))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v213 = "nw_parameters_copy_description_internal";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (__str[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v23 = type[0];
      v24 = os_log_type_enabled(v10, type[0]);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v213 = "nw_parameters_copy_description_internal";
          v214 = 2082;
          v215 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v23, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v9)
          goto LABEL_135;
        goto LABEL_134;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v213 = "nw_parameters_copy_description_internal";
        _os_log_impl(&dword_182FBE000, v10, v23, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v119 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v213 = "nw_parameters_copy_description_internal";
        _os_log_impl(&dword_182FBE000, v10, v119, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v9)
LABEL_134:
    free(v9);
LABEL_135:
  v120 = 0;
LABEL_205:

  return v120;
}

void sub_183532EF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_prohibit_joining_protocols(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[98] >> 7;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_prohibit_joining_protocols";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_prohibit_joining_protocols";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_prohibit_joining_protocols";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_prohibit_joining_protocols";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_prohibit_joining_protocols";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_allow_joining_connected_fd(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 99) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_allow_joining_connected_fd";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_joining_connected_fd";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_allow_joining_connected_fd";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_joining_connected_fd";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_joining_connected_fd";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_allow_duplicate_state_updates(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[99] >> 2) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_allow_duplicate_state_updates";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_duplicate_state_updates";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_allow_duplicate_state_updates";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_duplicate_state_updates";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_duplicate_state_updates";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_always_open_listener_socket(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[99] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_always_open_listener_socket";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_always_open_listener_socket";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_always_open_listener_socket";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_always_open_listener_socket";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_always_open_listener_socket";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_allow_internet_fallback(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[100] >> 5) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_allow_internet_fallback";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_internet_fallback";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_allow_internet_fallback";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_internet_fallback";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_internet_fallback";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_stricter_path_scoping(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 101) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_stricter_path_scoping";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_stricter_path_scoping";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_stricter_path_scoping";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_stricter_path_scoping";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_stricter_path_scoping";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_prevents_system_http_proxy_authentication(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[101] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_path_parameters_copy_verbose_description(NWConcrete_nw_path_parameters *a1, char *a2)
{
  NWConcrete_nw_path_parameters *v3;
  char *attributed_bundle;
  char *v5;
  const char *v6;
  char *v7;
  size_t v8;
  const char *v9;
  unsigned int v10;
  const char *v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  char *v17;
  const char *v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  const char *v24;
  int v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  const char *v30;
  int v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int pid;
  char *v36;
  const char *v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t delegated_upid;
  char *v43;
  const char *v44;
  int v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int traffic_class;
  char *v50;
  const char *v51;
  int v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int uid;
  char *v57;
  const char *v58;
  int v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  const char *v64;
  int v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t required_interface_type;
  const char *v70;
  int required_interface_subtype;
  const char *v72;
  uint64_t next_hop_required_interface_type;
  const char *v74;
  int next_hop_required_interface_subtype;
  const char *v76;
  int v77;
  const char *v78;
  int companion_preference;
  char *v80;
  const char *v81;
  const char *v82;
  int v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  int companion_link_upgrade_preference;
  char *v88;
  const char *v89;
  const char *v90;
  int v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  const char *v96;
  int v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  const char *v102;
  int v103;
  uint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  const char *v108;
  int v109;
  uint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  const char *v114;
  int v115;
  uint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  const char *v120;
  int v121;
  uint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  const char *v126;
  int v127;
  uint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  const char *v132;
  int v133;
  uint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  const char *v138;
  int v139;
  uint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  const char *v144;
  int v145;
  uint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  const char *v150;
  int v151;
  uint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  const char *v156;
  int v157;
  uint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  const char *v162;
  int v163;
  uint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  const char *v168;
  int v169;
  uint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  const char *v174;
  int v175;
  uint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  const char *v180;
  int v181;
  uint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  const char *v186;
  int v187;
  uint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  const char *v192;
  int v193;
  uint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  const char *v198;
  int v199;
  uint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  const char *v204;
  int v205;
  uint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  const char *v210;
  int v211;
  uint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  const char *v216;
  int v217;
  uint64_t *v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  const char *v222;
  int v223;
  uint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  const char *v228;
  int v229;
  uint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  const char *v234;
  int v235;
  uint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  const char *v240;
  int v241;
  uint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  char *v246;
  int v247;
  BOOL v248;
  OS_nw_protocol_options *internet_options;
  char *v250;
  size_t v251;
  os_unfair_lock_s *v252;
  os_unfair_lock_s *v253;
  char *v254;
  const char *v255;
  const char *v256;
  int v257;
  uint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  OS_nw_endpoint *local_address;
  char *v262;
  const char *v263;
  int v264;
  uint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  int v270;
  BOOL v271;
  const char *attribution_context;
  char *v273;
  const char *v274;
  int v275;
  uint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  xpc_object_t *required_interface;
  char *v280;
  const char *v281;
  int v282;
  uint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  const char *v286;
  char *v287;
  const char *v288;
  int v289;
  uint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  int v294;
  char *v295;
  const char *v296;
  int v297;
  uint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  const char *v302;
  int v303;
  uint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  void *v307;
  char *v308;
  const char *v309;
  int v310;
  uint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  void *v314;
  char *v315;
  const char *v316;
  int v317;
  uint64_t *v318;
  unint64_t v319;
  unint64_t v320;
  void *v321;
  char *v322;
  const char *v323;
  int v324;
  uint64_t *v325;
  unint64_t v326;
  unint64_t v327;
  void *v328;
  char *v329;
  const char *v330;
  int v331;
  uint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  void *v335;
  char *v336;
  const char *v337;
  int v338;
  uint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  void *v342;
  char *v343;
  const char *v344;
  int v345;
  uint64_t *v346;
  unint64_t v347;
  unint64_t v348;
  void *v349;
  char *v350;
  const char *v351;
  int v352;
  uint64_t *v353;
  unint64_t v354;
  unint64_t v355;
  void *v356;
  char *v357;
  const char *v358;
  int v359;
  uint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  void *v363;
  char *v364;
  const char *v365;
  int v366;
  uint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  void *v370;
  char *v371;
  const char *v372;
  int v373;
  uint64_t *v374;
  unint64_t v375;
  unint64_t v376;
  void *v377;
  char *v378;
  const char *v379;
  int v380;
  uint64_t *v381;
  unint64_t v382;
  unint64_t v383;
  void *v384;
  char *v385;
  const char *v386;
  int v387;
  uint64_t *v388;
  unint64_t v389;
  unint64_t v390;
  void *v391;
  char *v392;
  const char *v393;
  int v394;
  uint64_t *v395;
  unint64_t v396;
  unint64_t v397;
  void *v398;
  char *v399;
  const char *v400;
  int v401;
  uint64_t *v402;
  unint64_t v403;
  unint64_t v404;
  void *v405;
  char *v406;
  const char *v407;
  int v408;
  uint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  void *v412;
  char *v413;
  const char *v414;
  int v415;
  uint64_t *v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  size_t v420;
  size_t v421;
  uint64_t *v422;
  unint64_t v423;
  unint64_t v424;
  char *v425;
  size_t v426;
  size_t v427;
  uint64_t *v428;
  unint64_t v429;
  unint64_t v430;
  void *v431;
  void *v432;
  void *v433;
  void *v434;
  void *v435;
  void *v436;
  void *v437;
  void *v438;
  void *v439;
  void *v440;
  void *v441;
  void *v442;
  void *v443;
  void *v444;
  void *v445;
  _QWORD v446[7];
  _QWORD v447[7];
  _QWORD v448[7];
  _QWORD v449[7];
  _QWORD v450[7];
  _QWORD v451[7];
  _QWORD v452[7];
  _QWORD v453[7];
  _QWORD v454[7];
  _QWORD v455[7];
  _QWORD v456[7];
  _QWORD v457[7];
  _QWORD v458[7];
  _QWORD v459[7];
  _QWORD v460[7];
  _QWORD applier[7];
  uint64_t v462;
  uint64_t *v463;
  uint64_t v464;
  char v465;
  uint64_t v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t v472;
  char *v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  _QWORD out[8];

  out[7] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v470 = 0;
  v471 = &v470;
  v472 = 0x2020000000;
  v473 = a2;
  v466 = 0;
  v467 = &v466;
  v468 = 0x2020000000;
  v469 = 512;
  v462 = 0;
  v463 = &v462;
  v464 = 0x2020000000;
  v465 = 0;
  attributed_bundle = v3->attributed_bundle;
  if (attributed_bundle)
  {
    v5 = attributed_bundle;
    v6 = (const char *)*((_QWORD *)v5 + 2);

    if (v6)
    {
      v7 = (char *)v471[3];
      v8 = v467[3];
      if (v7 == a2)
        v9 = "";
      else
        v9 = ", ";
      v10 = nw_context_get_privacy_level(v3->attributed_bundle) - 1;
      if (v10 > 3)
        v11 = "unknown";
      else
        v11 = off_1E149A518[v10];
      v12 = snprintf(v7, v8, "%scontext: %s (%s)", v9, v6, v11);
      v13 = v467;
      v14 = v467[3];
      v15 = v14 > v12;
      v16 = v14 - v12;
      if (v15)
      {
        if (v12 >= 1)
        {
          v471[3] += v12;
          v13[3] = v16;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    memset(out, 0, 37);
    uuid_unparse(v3->process_path_value.proc_uuid, (char *)out);
    v17 = (char *)v471[3];
    if (v17 == a2)
      v18 = "";
    else
      v18 = ", ";
    v19 = snprintf(v17, v467[3], "%sproc: %s", v18, (const char *)out);
    v20 = v467;
    v21 = v467[3];
    v15 = v21 > v19;
    v22 = v21 - v19;
    if (v15)
    {
      if (v19 >= 1)
      {
        v471[3] += v19;
        v20[3] = v22;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
    if (!*((_BYTE *)v463 + 24) && uuid_compare(v3->process_path_value.proc_uuid, v3->process_path_value.e_proc_uuid))
    {
      memset(out, 0, 37);
      uuid_unparse(v3->process_path_value.e_proc_uuid, (char *)out);
      v29 = (char *)v471[3];
      if (v29 == a2)
        v30 = "";
      else
        v30 = ", ";
      v31 = snprintf(v29, v467[3], "%seffective proc: %s", v30, (const char *)out);
      v32 = v467;
      v33 = v467[3];
      v15 = v33 > v31;
      v34 = v33 - v31;
      if (v15)
      {
        if (v31 >= 1)
        {
          v471[3] += v31;
          v32[3] = v34;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24) && !uuid_is_null(v3->process_path_value.persona_id))
  {
    memset(out, 0, 37);
    uuid_unparse(v3->process_path_value.persona_id, (char *)out);
    v23 = (char *)v471[3];
    v24 = ", ";
    if (v23 == a2)
      v24 = "";
    v25 = snprintf(v23, v467[3], "%spersona: %s", v24, (const char *)out);
    v26 = v467;
    v27 = v467[3];
    v15 = v27 > v25;
    v28 = v27 - v25;
    if (v15)
    {
      if (v25 >= 1)
      {
        v471[3] += v25;
        v26[3] = v28;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    delegated_upid = v3->process_path_value.delegated_upid;
    if (delegated_upid)
    {
      v43 = (char *)v471[3];
      v44 = ", ";
      if (v43 == a2)
        v44 = "";
      v45 = snprintf(v43, v467[3], "%sdelegated upid: %llu", v44, delegated_upid);
      v46 = v467;
      v47 = v467[3];
      v15 = v47 > v45;
      v48 = v47 - v45;
      if (v15)
      {
        if (v45 >= 1)
        {
          v471[3] += v45;
          v46[3] = v48;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    traffic_class = v3->path_value.traffic_class;
    if (traffic_class)
    {
      v50 = (char *)v471[3];
      v51 = ", ";
      if (v50 == a2)
        v51 = "";
      v52 = snprintf(v50, v467[3], "%straffic class: %u", v51, traffic_class);
      v53 = v467;
      v54 = v467[3];
      v15 = v54 > v52;
      v55 = v54 - v52;
      if (v15)
      {
        if (v52 >= 1)
        {
          v471[3] += v52;
          v53[3] = v55;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    pid = v3->process_path_value.pid;
    if (pid != getpid())
    {
      v36 = (char *)v471[3];
      v37 = "";
      if (v36 != a2)
        v37 = ", ";
      v38 = snprintf(v36, v467[3], "%spid: %d", v37, v3->process_path_value.pid);
      v39 = v467;
      v40 = v467[3];
      v15 = v40 > v38;
      v41 = v40 - v38;
      if (v15)
      {
        if (v38 >= 1)
        {
          v471[3] += v38;
          v39[3] = v41;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    uid = v3->process_path_value.uid;
    if (uid != getuid())
    {
      v57 = (char *)v471[3];
      v58 = "";
      if (v57 != a2)
        v58 = ", ";
      v59 = snprintf(v57, v467[3], "%suid: %u", v58, v3->process_path_value.uid);
      v60 = v467;
      v61 = v467[3];
      v15 = v61 > v59;
      v62 = v61 - v59;
      if (v15)
      {
        if (v59 >= 1)
        {
          v471[3] += v59;
          v60[3] = v62;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    required_interface_type = v3->path_value.required_interface_type;
    if ((_DWORD)required_interface_type)
    {
      if (required_interface_type > 4)
        v70 = "unknown";
      else
        v70 = off_1E14AD0B0[required_interface_type];
      v95 = (char *)v471[3];
      v96 = ", ";
      if (v95 == a2)
        v96 = "";
      v97 = snprintf(v95, v467[3], "%srequired interface type: %s", v96, v70);
      v98 = v467;
      v99 = v467[3];
      v15 = v99 > v97;
      v100 = v99 - v97;
      if (v15)
      {
        if (v97 >= 1)
        {
          v471[3] += v97;
          v98[3] = v100;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    required_interface_subtype = v3->path_value.required_interface_subtype;
    if (required_interface_subtype <= 1001)
    {
      if (!required_interface_subtype)
        goto LABEL_72;
      if (required_interface_subtype == 1001)
      {
        v72 = "wifi_infrastructure";
        goto LABEL_403;
      }
    }
    else
    {
      switch(required_interface_subtype)
      {
        case 1002:
          v72 = "wifi_awdl";
          goto LABEL_403;
        case 4001:
          v72 = "coprocessor";
          goto LABEL_403;
        case 5001:
          v72 = "companion";
LABEL_403:
          v295 = (char *)v471[3];
          v296 = ", ";
          if (v295 == a2)
            v296 = "";
          v297 = snprintf(v295, v467[3], "%srequired interface subtype: %s", v296, v72);
          v298 = v467;
          v299 = v467[3];
          v15 = v299 > v297;
          v300 = v299 - v297;
          if (v15)
          {
            if (v297 >= 1)
            {
              v471[3] += v297;
              v298[3] = v300;
            }
          }
          else
          {
            *(_BYTE *)v471[3] = 0;
            *((_BYTE *)v463 + 24) = 1;
          }
          goto LABEL_72;
      }
    }
    v72 = "unknown";
    goto LABEL_403;
  }
LABEL_72:
  if (!*((_BYTE *)v463 + 24))
  {
    next_hop_required_interface_type = v3->path_value.next_hop_required_interface_type;
    if ((_DWORD)next_hop_required_interface_type)
    {
      if (next_hop_required_interface_type > 4)
        v74 = "unknown";
      else
        v74 = off_1E14AD0B0[next_hop_required_interface_type];
      v101 = (char *)v471[3];
      v102 = ", ";
      if (v101 == a2)
        v102 = "";
      v103 = snprintf(v101, v467[3], "%snext hop interface type: %s", v102, v74);
      v104 = v467;
      v105 = v467[3];
      v15 = v105 > v103;
      v106 = v105 - v103;
      if (v15)
      {
        if (v103 >= 1)
        {
          v471[3] += v103;
          v104[3] = v106;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    next_hop_required_interface_subtype = v3->path_value.next_hop_required_interface_subtype;
    if (next_hop_required_interface_subtype <= 1001)
    {
      if (!next_hop_required_interface_subtype)
        goto LABEL_74;
      if (next_hop_required_interface_subtype == 1001)
      {
        v76 = "wifi_infrastructure";
        goto LABEL_410;
      }
    }
    else
    {
      switch(next_hop_required_interface_subtype)
      {
        case 1002:
          v76 = "wifi_awdl";
          goto LABEL_410;
        case 4001:
          v76 = "coprocessor";
          goto LABEL_410;
        case 5001:
          v76 = "companion";
LABEL_410:
          v301 = (char *)v471[3];
          v302 = ", ";
          if (v301 == a2)
            v302 = "";
          v303 = snprintf(v301, v467[3], "%snext hop interface subtype: %s", v302, v76);
          v304 = v467;
          v305 = v467[3];
          v15 = v305 > v303;
          v306 = v305 - v303;
          if (v15)
          {
            if (v303 >= 1)
            {
              v471[3] += v303;
              v304[3] = v306;
            }
          }
          else
          {
            *(_BYTE *)v471[3] = 0;
            *((_BYTE *)v463 + 24) = 1;
          }
          goto LABEL_74;
      }
    }
    v76 = "unknown";
    goto LABEL_410;
  }
LABEL_74:
  if (!*((_BYTE *)v463 + 24))
  {
    v77 = *(_DWORD *)((char *)&v3->path_value + 31);
    switch(v77)
    {
      case 0:
        break;
      case 1:
        v78 = "handover";
        goto LABEL_381;
      case 2:
        v78 = "interactive";
        goto LABEL_381;
      case 3:
        v78 = "aggregate";
        goto LABEL_381;
      default:
        v78 = "?";
LABEL_381:
        if (v77 == 100)
          v78 = "target-based";
        if (v77 == 101)
          v286 = "pure handover";
        else
          v286 = v78;
        v287 = (char *)v471[3];
        v288 = ", ";
        if (v287 == a2)
          v288 = "";
        v289 = snprintf(v287, v467[3], "%smultipath service: %s", v288, v286);
        v290 = v467;
        v291 = v467[3];
        v15 = v291 > v289;
        v292 = v291 - v289;
        if (v15)
        {
          if (v289 >= 1)
          {
            v471[3] += v289;
            v290[3] = v292;
          }
        }
        else
        {
          *(_BYTE *)v471[3] = 0;
          *((_BYTE *)v463 + 24) = 1;
        }
        break;
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    companion_preference = v3->path_value.companion_preference;
    if (companion_preference)
    {
      v80 = (char *)v471[3];
      v81 = ", ";
      if (v80 == a2)
        v81 = "";
      if (companion_preference == 1)
        v82 = "prefer";
      else
        v82 = "avoid";
      v83 = snprintf(v80, v467[3], "%scompanion preference: %s", v81, v82);
      v84 = v467;
      v85 = v467[3];
      v15 = v85 > v83;
      v86 = v85 - v83;
      if (v15)
      {
        if (v83 >= 1)
        {
          v471[3] += v83;
          v84[3] = v86;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    companion_link_upgrade_preference = v3->path_value.companion_link_upgrade_preference;
    if (companion_link_upgrade_preference)
    {
      v88 = (char *)v471[3];
      v89 = ", ";
      if (v88 == a2)
        v89 = "";
      if (companion_link_upgrade_preference == 1)
        v90 = "bt";
      else
        v90 = "wifi";
      v91 = snprintf(v88, v467[3], "%scompanion link upgrade preference: %s", v89, v90);
      v92 = v467;
      v93 = v467[3];
      v15 = v93 > v91;
      v94 = v93 - v91;
      if (v15)
      {
        if (v91 >= 1)
        {
          v471[3] += v91;
          v92[3] = v94;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24) && (*((_WORD *)&v3->path_value + 14) & 1) != 0)
  {
    v63 = (char *)v471[3];
    v64 = ", ";
    if (v63 == a2)
      v64 = "";
    v65 = snprintf(v63, v467[3], "%sprohibit expensive", v64);
    v66 = v467;
    v67 = v467[3];
    v15 = v67 > v65;
    v68 = v67 - v65;
    if (v15)
    {
      if (v65 >= 1)
      {
        v471[3] += v65;
        v66[3] = v68;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (*((_WORD *)&v3->path_value + 14) & 2) != 0)
  {
    v107 = (char *)v471[3];
    v108 = ", ";
    if (v107 == a2)
      v108 = "";
    v109 = snprintf(v107, v467[3], "%sprohibit constrained", v108);
    v110 = v467;
    v111 = v467[3];
    v15 = v111 > v109;
    v112 = v111 - v109;
    if (v15)
    {
      if (v109 >= 1)
      {
        v471[3] += v109;
        v110[3] = v112;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (*((_WORD *)&v3->path_value + 14) & 4) != 0)
  {
    v113 = (char *)v471[3];
    v114 = ", ";
    if (v113 == a2)
      v114 = "";
    v115 = snprintf(v113, v467[3], "%sallow ultra constrained", v114);
    v116 = v467;
    v117 = v467[3];
    v15 = v117 > v115;
    v118 = v117 - v115;
    if (v15)
    {
      if (v115 >= 1)
      {
        v471[3] += v115;
        v116[3] = v118;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (*((_WORD *)&v3->path_value + 14) & 8) != 0)
  {
    v119 = (char *)v471[3];
    v120 = ", ";
    if (v119 == a2)
      v120 = "";
    v121 = snprintf(v119, v467[3], "%sprohibit roaming", v120);
    v122 = v467;
    v123 = v467[3];
    v15 = v123 > v121;
    v124 = v123 - v121;
    if (v15)
    {
      if (v121 >= 1)
      {
        v471[3] += v121;
        v122[3] = v124;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 2) != 0)
  {
    v125 = (char *)v471[3];
    v126 = ", ";
    if (v125 == a2)
      v126 = "";
    v127 = snprintf(v125, v467[3], "%sno proxy", v126);
    v128 = v467;
    v129 = v467[3];
    v15 = v129 > v127;
    v130 = v129 - v127;
    if (v15)
    {
      if (v127 >= 1)
      {
        v471[3] += v127;
        v128[3] = v130;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 4) != 0)
  {
    v131 = (char *)v471[3];
    v132 = ", ";
    if (v131 == a2)
      v132 = "";
    v133 = snprintf(v131, v467[3], "%sno transport", v132);
    v134 = v467;
    v135 = v467[3];
    v15 = v135 > v133;
    v136 = v135 - v133;
    if (v15)
    {
      if (v133 >= 1)
      {
        v471[3] += v133;
        v134[3] = v136;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 8) != 0)
  {
    v137 = (char *)v471[3];
    v138 = ", ";
    if (v137 == a2)
      v138 = "";
    v139 = snprintf(v137, v467[3], "%suse awdl", v138);
    v140 = v467;
    v141 = v467[3];
    v15 = v141 > v139;
    v142 = v141 - v139;
    if (v15)
    {
      if (v139 >= 1)
      {
        v471[3] += v139;
        v140[3] = v142;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 0x10) != 0)
  {
    v143 = (char *)v471[3];
    v144 = ", ";
    if (v143 == a2)
      v144 = "";
    v145 = snprintf(v143, v467[3], "%suse p2p", v144);
    v146 = v467;
    v147 = v467[3];
    v15 = v147 > v145;
    v148 = v147 - v145;
    if (v15)
    {
      if (v145 >= 1)
      {
        v471[3] += v145;
        v146[3] = v148;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 0x20) != 0)
  {
    v149 = (char *)v471[3];
    v150 = ", ";
    if (v149 == a2)
      v150 = "";
    v151 = snprintf(v149, v467[3], "%sprohibit fallback", v150);
    v152 = v467;
    v153 = v467[3];
    v15 = v153 > v151;
    v154 = v153 - v151;
    if (v15)
    {
      if (v151 >= 1)
      {
        v471[3] += v151;
        v152[3] = v154;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 0x40) != 0)
  {
    v155 = (char *)v471[3];
    v156 = ", ";
    if (v155 == a2)
      v156 = "";
    v157 = snprintf(v155, v467[3], "%sprohibit cellular fallback", v156);
    v158 = v467;
    v159 = v467[3];
    v15 = v159 > v157;
    v160 = v159 - v157;
    if (v15)
    {
      if (v157 >= 1)
      {
        v471[3] += v157;
        v158[3] = v160;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 0x80) != 0)
  {
    v161 = (char *)v471[3];
    v162 = ", ";
    if (v161 == a2)
      v162 = "";
    v163 = snprintf(v161, v467[3], "%sno wake from sleep", v162);
    v164 = v467;
    v165 = v467[3];
    v15 = v165 > v163;
    v166 = v165 - v163;
    if (v15)
    {
      if (v163 >= 1)
      {
        v471[3] += v163;
        v164[3] = v166;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 1) != 0)
  {
    v167 = (char *)v471[3];
    v168 = ", ";
    if (v167 == a2)
      v168 = "";
    v169 = snprintf(v167, v467[3], "%sdiscretionary", v168);
    v170 = v467;
    v171 = v467[3];
    v15 = v171 > v169;
    v172 = v171 - v169;
    if (v15)
    {
      if (v169 >= 1)
      {
        v471[3] += v169;
        v170[3] = v172;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x10) != 0)
  {
    v173 = (char *)v471[3];
    v174 = ", ";
    if (v173 == a2)
      v174 = "";
    v175 = snprintf(v173, v467[3], "%sallow socket access", v174);
    v176 = v467;
    v177 = v467[3];
    v15 = v177 > v175;
    v178 = v177 - v175;
    if (v15)
    {
      if (v175 >= 1)
      {
        v471[3] += v175;
        v176[3] = v178;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x20) != 0)
  {
    v179 = (char *)v471[3];
    v180 = ", ";
    if (v179 == a2)
      v180 = "";
    v181 = snprintf(v179, v467[3], "%sonly primary requires type", v180);
    v182 = v467;
    v183 = v467[3];
    v15 = v183 > v181;
    v184 = v183 - v181;
    if (v15)
    {
      if (v181 >= 1)
      {
        v471[3] += v181;
        v182[3] = v184;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 0x100) != 0)
  {
    v185 = (char *)v471[3];
    v186 = ", ";
    if (v185 == a2)
      v186 = "";
    v187 = snprintf(v185, v467[3], "%sprefer no proxy", v186);
    v188 = v467;
    v189 = v467[3];
    v15 = v189 > v187;
    v190 = v189 - v187;
    if (v15)
    {
      if (v187 >= 1)
      {
        v471[3] += v187;
        v188[3] = v190;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 0x200) != 0)
  {
    v191 = (char *)v471[3];
    v192 = ", ";
    if (v191 == a2)
      v192 = "";
    v193 = snprintf(v191, v467[3], "%sno proxy path selection", v192);
    v194 = v467;
    v195 = v467[3];
    v15 = v195 > v193;
    v196 = v195 - v193;
    if (v15)
    {
      if (v193 >= 1)
      {
        v471[3] += v193;
        v194[3] = v196;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x40) != 0)
  {
    v197 = (char *)v471[3];
    v198 = ", ";
    if (v197 == a2)
      v198 = "";
    v199 = snprintf(v197, v467[3], "%sproxy fail closed", v198);
    v200 = v467;
    v201 = v467[3];
    v15 = v201 > v199;
    v202 = v201 - v199;
    if (v15)
    {
      if (v199 >= 1)
      {
        v471[3] += v199;
        v200[3] = v202;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 0x400) != 0)
  {
    v203 = (char *)v471[3];
    v204 = ", ";
    if (v203 == a2)
      v204 = "";
    v205 = snprintf(v203, v467[3], "%sproxy fail closed for unreachable", v204);
    v206 = v467;
    v207 = v467[3];
    v15 = v207 > v205;
    v208 = v207 - v205;
    if (v15)
    {
      if (v205 >= 1)
      {
        v471[3] += v205;
        v206[3] = v208;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x80) != 0)
  {
    v209 = (char *)v471[3];
    v210 = ", ";
    if (v209 == a2)
      v210 = "";
    v211 = snprintf(v209, v467[3], "%sprohibit privacy proxy", v210);
    v212 = v467;
    v213 = v467[3];
    v15 = v213 > v211;
    v214 = v213 - v211;
    if (v15)
    {
      if (v211 >= 1)
      {
        v471[3] += v211;
        v212[3] = v214;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 0x4000) != 0)
  {
    v215 = (char *)v471[3];
    v216 = ", ";
    if (v215 == a2)
      v216 = "";
    v217 = snprintf(v215, v467[3], "%sknown tracker", v216);
    v218 = v467;
    v219 = v467[3];
    v15 = v219 > v217;
    v220 = v219 - v217;
    if (v15)
    {
      if (v217 >= 1)
      {
        v471[3] += v217;
        v218[3] = v220;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && (v3->joinable_path_value.multipath_service & 0x8000) != 0)
  {
    v221 = (char *)v471[3];
    v222 = ", ";
    if (v221 == a2)
      v222 = "";
    v223 = snprintf(v221, v467[3], "%sthird party web content", v222);
    v224 = v467;
    v225 = v467[3];
    v15 = v225 > v223;
    v226 = v225 - v223;
    if (v15)
    {
      if (v223 >= 1)
      {
        v471[3] += v223;
        v224[3] = v226;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x10000) != 0)
  {
    v227 = (char *)v471[3];
    v228 = ", ";
    if (v227 == a2)
      v228 = "";
    v229 = snprintf(v227, v467[3], "%sapproved app domain", v228);
    v230 = v467;
    v231 = v467[3];
    v15 = v231 > v229;
    v232 = v231 - v229;
    if (v15)
    {
      if (v229 >= 1)
      {
        v471[3] += v229;
        v230[3] = v232;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x20000) != 0)
  {
    v233 = (char *)v471[3];
    v234 = ", ";
    if (v233 == a2)
      v234 = "";
    v235 = snprintf(v233, v467[3], "%senhanced privacy", v234);
    v236 = v467;
    v237 = v467[3];
    v15 = v237 > v235;
    v238 = v237 - v235;
    if (v15)
    {
      if (v235 >= 1)
      {
        v471[3] += v235;
        v236[3] = v238;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x40000) != 0)
  {
    v239 = (char *)v471[3];
    v240 = ", ";
    if (v239 == a2)
      v240 = "";
    v241 = snprintf(v239, v467[3], "%sweb-search", v240);
    v242 = v467;
    v243 = v467[3];
    v15 = v243 > v241;
    v244 = v243 - v241;
    if (v15)
    {
      if (v241 >= 1)
      {
        v471[3] += v241;
        v242[3] = v244;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24) && *(_QWORD *)&v3->joinable_path_value.fallback_mode)
  {
    v245 = v3->attributed_bundle;
    v246 = v245;
    if (v245 && (v247 = *((_DWORD *)v245 + 31), (v247 - 2) >= 2))
    {
      if (v247 == 1)
      {

LABEL_394:
        v293 = snprintf((char *)v471[3], v467[3], "%saccount id: %s");
        goto LABEL_562;
      }

    }
    else
    {
      if (nwlog_get_sensitive_redacted::onceToken != -1)
        dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
      v248 = nwlog_get_sensitive_redacted::sensitiveRedacted == 0;

      if (v248)
        goto LABEL_394;
    }
    LOBYTE(out[1]) = 0;
    out[0] = 0;
    v419 = (char *)v471[3];
    v420 = v467[3];
    v421 = strlen(*(const char **)&v3->joinable_path_value.fallback_mode);
    __nwlog_salted_hash(*(const void **)&v3->joinable_path_value.fallback_mode, v421, (char *)out);
    v293 = snprintf(v419, v420, "%saccount id: %s");
LABEL_562:
    v422 = v467;
    v423 = v467[3];
    v15 = v423 > v293;
    v424 = v423 - v293;
    if (v15)
    {
      if (v293 >= 1)
      {
        v471[3] += v293;
        v422[3] = v424;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    internet_options = v3->internet_options;
    if (internet_options)
    {
      v250 = (char *)v471[3];
      v251 = v467[3];
      v252 = internet_options;
      v474 = 0;
      v475 = &v474;
      v476 = 0x2020000000;
      v477 = 0;
      v253 = v252 + 45;
      out[0] = MEMORY[0x1E0C809B0];
      out[1] = 3221225472;
      out[2] = __nw_endpoint_get_description_block_invoke;
      out[3] = &unk_1E14ACE40;
      v254 = v252;
      out[4] = v254;
      out[5] = &v474;
      os_unfair_lock_lock(v253);
      ((void (*)(_QWORD *))out[2])(out);
      os_unfair_lock_unlock(v253);
      v255 = (const char *)v475[3];

      _Block_object_dispose(&v474, 8);
      v256 = ", ";
      if (v250 == a2)
        v256 = "";
      v257 = snprintf(v250, v251, "%slocal address: %s", v256, v255);
      v258 = v467;
      v259 = v467[3];
      v15 = v259 > v257;
      v260 = v259 - v257;
      if (v15)
      {
        if (v257 >= 1)
        {
          v471[3] += v257;
          v258[3] = v260;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    local_address = v3->local_address;
    if (local_address)
    {
      v262 = (char *)v471[3];
      v263 = ", ";
      if (v262 == a2)
        v263 = "";
      v264 = snprintf(v262, v467[3], "%srequired interface: %s(%u)", v263, (const char *)local_address + 104, *((_DWORD *)local_address + 2));
      v265 = v467;
      v266 = v467[3];
      v15 = v266 > v264;
      v267 = v266 - v264;
      if (v15)
      {
        if (v264 >= 1)
        {
          v471[3] += v264;
          v265[3] = v267;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24) && v3->account_id)
  {
    v268 = v3->attributed_bundle;
    v269 = v268;
    if (v268 && (v270 = *((_DWORD *)v268 + 31), (v270 - 2) >= 2))
    {
      if (v270 == 1)
      {

LABEL_397:
        v294 = snprintf((char *)v471[3], v467[3], "%sattribution context: %s");
        goto LABEL_568;
      }

    }
    else
    {
      if (nwlog_get_sensitive_redacted::onceToken != -1)
        dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
      v271 = nwlog_get_sensitive_redacted::sensitiveRedacted == 0;

      if (v271)
        goto LABEL_397;
    }
    LOBYTE(out[1]) = 0;
    out[0] = 0;
    v425 = (char *)v471[3];
    v426 = v467[3];
    v427 = strlen(v3->account_id);
    __nwlog_salted_hash(v3->account_id, v427, (char *)out);
    v294 = snprintf(v425, v426, "%sattribution context: #%s");
LABEL_568:
    v428 = v467;
    v429 = v467[3];
    v15 = v429 > v294;
    v430 = v429 - v294;
    if (v15)
    {
      if (v294 >= 1)
      {
        v471[3] += v294;
        v428[3] = v430;
      }
    }
    else
    {
      *(_BYTE *)v471[3] = 0;
      *((_BYTE *)v463 + 24) = 1;
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    attribution_context = v3->attribution_context;
    if (attribution_context)
    {
      v273 = (char *)v471[3];
      v274 = ", ";
      if (v273 == a2)
        v274 = "";
      v275 = snprintf(v273, v467[3], "%sattributed bundle: %s", v274, attribution_context);
      v276 = v467;
      v277 = v467[3];
      v15 = v277 > v275;
      v278 = v277 - v275;
      if (v15)
      {
        if (v275 >= 1)
        {
          v471[3] += v275;
          v276[3] = v278;
        }
      }
      else
      {
        *(_BYTE *)v471[3] = 0;
        *((_BYTE *)v463 + 24) = 1;
      }
    }
  }
  if (!*((_BYTE *)v463 + 24))
  {
    required_interface = (xpc_object_t *)v3->required_interface;
    if (required_interface)
    {
      if (*required_interface && xpc_array_get_count(*required_interface))
      {
        v280 = (char *)v471[3];
        v281 = ", ";
        if (v280 == a2)
          v281 = "";
        v282 = snprintf(v280, v467[3], "%sprohibited types: ", v281);
        v283 = v467;
        v284 = v467[3];
        v15 = v284 > v282;
        v285 = v284 - v282;
        if (v15)
        {
          if (v282 >= 1)
          {
            v471[3] += v282;
            v283[3] = v285;
          }
        }
        else
        {
          *(_BYTE *)v471[3] = 0;
          *((_BYTE *)v463 + 24) = 1;
        }
        v307 = *(void **)v3->required_interface;
        applier[0] = MEMORY[0x1E0C809B0];
        applier[1] = 3221225472;
        applier[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke;
        applier[3] = &unk_1E149D108;
        applier[4] = &v470;
        applier[5] = &v466;
        applier[6] = &v462;
        xpc_array_apply(v307, applier);
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v314 = (void *)*((_QWORD *)v3->required_interface + 1);
        if (v314)
        {
          if (xpc_array_get_count(v314))
          {
            v315 = (char *)v471[3];
            v316 = ", ";
            if (v315 == a2)
              v316 = "";
            v317 = snprintf(v315, v467[3], "%sprohibited subtypes: ", v316);
            v318 = v467;
            v319 = v467[3];
            v15 = v319 > v317;
            v320 = v319 - v317;
            if (v15)
            {
              if (v317 >= 1)
              {
                v471[3] += v317;
                v318[3] = v320;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v431 = (void *)*((_QWORD *)v3->required_interface + 1);
            v460[0] = MEMORY[0x1E0C809B0];
            v460[1] = 3221225472;
            v460[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_2;
            v460[3] = &unk_1E149D108;
            v460[4] = &v470;
            v460[5] = &v466;
            v460[6] = &v462;
            xpc_array_apply(v431, v460);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v321 = (void *)*((_QWORD *)v3->required_interface + 2);
        if (v321)
        {
          if (xpc_array_get_count(v321))
          {
            v322 = (char *)v471[3];
            v323 = ", ";
            if (v322 == a2)
              v323 = "";
            v324 = snprintf(v322, v467[3], "%spreferred subtypes: ", v323);
            v325 = v467;
            v326 = v467[3];
            v15 = v326 > v324;
            v327 = v326 - v324;
            if (v15)
            {
              if (v324 >= 1)
              {
                v471[3] += v324;
                v325[3] = v327;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v432 = (void *)*((_QWORD *)v3->required_interface + 2);
            v459[0] = MEMORY[0x1E0C809B0];
            v459[1] = 3221225472;
            v459[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_3;
            v459[3] = &unk_1E149D108;
            v459[4] = &v470;
            v459[5] = &v466;
            v459[6] = &v462;
            xpc_array_apply(v432, v459);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v328 = (void *)*((_QWORD *)v3->required_interface + 3);
        if (v328)
        {
          if (xpc_array_get_count(v328))
          {
            v329 = (char *)v471[3];
            v330 = ", ";
            if (v329 == a2)
              v330 = "";
            v331 = snprintf(v329, v467[3], "%sprohibited interfaces: ", v330);
            v332 = v467;
            v333 = v467[3];
            v15 = v333 > v331;
            v334 = v333 - v331;
            if (v15)
            {
              if (v331 >= 1)
              {
                v471[3] += v331;
                v332[3] = v334;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v433 = (void *)*((_QWORD *)v3->required_interface + 3);
            v458[0] = MEMORY[0x1E0C809B0];
            v458[1] = 3221225472;
            v458[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_4;
            v458[3] = &unk_1E149D108;
            v458[4] = &v470;
            v458[5] = &v466;
            v458[6] = &v462;
            xpc_array_apply(v433, v458);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v335 = (void *)*((_QWORD *)v3->required_interface + 4);
        if (v335)
        {
          if (xpc_array_get_count(v335))
          {
            v336 = (char *)v471[3];
            v337 = ", ";
            if (v336 == a2)
              v337 = "";
            v338 = snprintf(v336, v467[3], "%sprohibited netagent domains: ", v337);
            v339 = v467;
            v340 = v467[3];
            v15 = v340 > v338;
            v341 = v340 - v338;
            if (v15)
            {
              if (v338 >= 1)
              {
                v471[3] += v338;
                v339[3] = v341;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v434 = (void *)*((_QWORD *)v3->required_interface + 4);
            v457[0] = MEMORY[0x1E0C809B0];
            v457[1] = 3221225472;
            v457[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_5;
            v457[3] = &unk_1E149D108;
            v457[4] = &v470;
            v457[5] = &v466;
            v457[6] = &v462;
            xpc_array_apply(v434, v457);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v342 = (void *)*((_QWORD *)v3->required_interface + 5);
        if (v342)
        {
          if (xpc_array_get_count(v342))
          {
            v343 = (char *)v471[3];
            v344 = ", ";
            if (v343 == a2)
              v344 = "";
            v345 = snprintf(v343, v467[3], "%sprohibited netagent types: ", v344);
            v346 = v467;
            v347 = v467[3];
            v15 = v347 > v345;
            v348 = v347 - v345;
            if (v15)
            {
              if (v345 >= 1)
              {
                v471[3] += v345;
                v346[3] = v348;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v435 = (void *)*((_QWORD *)v3->required_interface + 5);
            v456[0] = MEMORY[0x1E0C809B0];
            v456[1] = 3221225472;
            v456[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_6;
            v456[3] = &unk_1E149D108;
            v456[4] = &v470;
            v456[5] = &v466;
            v456[6] = &v462;
            xpc_array_apply(v435, v456);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v349 = (void *)*((_QWORD *)v3->required_interface + 6);
        if (v349)
        {
          if (xpc_array_get_count(v349))
          {
            v350 = (char *)v471[3];
            v351 = ", ";
            if (v350 == a2)
              v351 = "";
            v352 = snprintf(v350, v467[3], "%sprohibited netagent uuids: ", v351);
            v353 = v467;
            v354 = v467[3];
            v15 = v354 > v352;
            v355 = v354 - v352;
            if (v15)
            {
              if (v352 >= 1)
              {
                v471[3] += v352;
                v353[3] = v355;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v436 = (void *)*((_QWORD *)v3->required_interface + 6);
            v455[0] = MEMORY[0x1E0C809B0];
            v455[1] = 3221225472;
            v455[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_7;
            v455[3] = &unk_1E149D108;
            v455[4] = &v470;
            v455[5] = &v466;
            v455[6] = &v462;
            xpc_array_apply(v436, v455);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v356 = (void *)*((_QWORD *)v3->required_interface + 7);
        if (v356)
        {
          if (xpc_array_get_count(v356))
          {
            v357 = (char *)v471[3];
            v358 = ", ";
            if (v357 == a2)
              v358 = "";
            v359 = snprintf(v357, v467[3], "%srequired netagent domains: ", v358);
            v360 = v467;
            v361 = v467[3];
            v15 = v361 > v359;
            v362 = v361 - v359;
            if (v15)
            {
              if (v359 >= 1)
              {
                v471[3] += v359;
                v360[3] = v362;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v437 = (void *)*((_QWORD *)v3->required_interface + 7);
            v454[0] = MEMORY[0x1E0C809B0];
            v454[1] = 3221225472;
            v454[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_8;
            v454[3] = &unk_1E149D108;
            v454[4] = &v470;
            v454[5] = &v466;
            v454[6] = &v462;
            xpc_array_apply(v437, v454);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v363 = (void *)*((_QWORD *)v3->required_interface + 8);
        if (v363)
        {
          if (xpc_array_get_count(v363))
          {
            v364 = (char *)v471[3];
            v365 = ", ";
            if (v364 == a2)
              v365 = "";
            v366 = snprintf(v364, v467[3], "%srequired netagent types: ", v365);
            v367 = v467;
            v368 = v467[3];
            v15 = v368 > v366;
            v369 = v368 - v366;
            if (v15)
            {
              if (v366 >= 1)
              {
                v471[3] += v366;
                v367[3] = v369;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v438 = (void *)*((_QWORD *)v3->required_interface + 8);
            v453[0] = MEMORY[0x1E0C809B0];
            v453[1] = 3221225472;
            v453[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_9;
            v453[3] = &unk_1E149D108;
            v453[4] = &v470;
            v453[5] = &v466;
            v453[6] = &v462;
            xpc_array_apply(v438, v453);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v370 = (void *)*((_QWORD *)v3->required_interface + 9);
        if (v370)
        {
          if (xpc_array_get_count(v370))
          {
            v371 = (char *)v471[3];
            v372 = ", ";
            if (v371 == a2)
              v372 = "";
            v373 = snprintf(v371, v467[3], "%srequired netagent uuids: ", v372);
            v374 = v467;
            v375 = v467[3];
            v15 = v375 > v373;
            v376 = v375 - v373;
            if (v15)
            {
              if (v373 >= 1)
              {
                v471[3] += v373;
                v374[3] = v376;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v439 = (void *)*((_QWORD *)v3->required_interface + 9);
            v452[0] = MEMORY[0x1E0C809B0];
            v452[1] = 3221225472;
            v452[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_10;
            v452[3] = &unk_1E149D108;
            v452[4] = &v470;
            v452[5] = &v466;
            v452[6] = &v462;
            xpc_array_apply(v439, v452);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v377 = (void *)*((_QWORD *)v3->required_interface + 10);
        if (v377)
        {
          if (xpc_array_get_count(v377))
          {
            v378 = (char *)v471[3];
            v379 = ", ";
            if (v378 == a2)
              v379 = "";
            v380 = snprintf(v378, v467[3], "%spreferred netagent domains: ", v379);
            v381 = v467;
            v382 = v467[3];
            v15 = v382 > v380;
            v383 = v382 - v380;
            if (v15)
            {
              if (v380 >= 1)
              {
                v471[3] += v380;
                v381[3] = v383;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v440 = (void *)*((_QWORD *)v3->required_interface + 10);
            v451[0] = MEMORY[0x1E0C809B0];
            v451[1] = 3221225472;
            v451[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_11;
            v451[3] = &unk_1E149D108;
            v451[4] = &v470;
            v451[5] = &v466;
            v451[6] = &v462;
            xpc_array_apply(v440, v451);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v384 = (void *)*((_QWORD *)v3->required_interface + 11);
        if (v384)
        {
          if (xpc_array_get_count(v384))
          {
            v385 = (char *)v471[3];
            v386 = ", ";
            if (v385 == a2)
              v386 = "";
            v387 = snprintf(v385, v467[3], "%spreferred netagent types: ", v386);
            v388 = v467;
            v389 = v467[3];
            v15 = v389 > v387;
            v390 = v389 - v387;
            if (v15)
            {
              if (v387 >= 1)
              {
                v471[3] += v387;
                v388[3] = v390;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v441 = (void *)*((_QWORD *)v3->required_interface + 11);
            v450[0] = MEMORY[0x1E0C809B0];
            v450[1] = 3221225472;
            v450[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_12;
            v450[3] = &unk_1E149D108;
            v450[4] = &v470;
            v450[5] = &v466;
            v450[6] = &v462;
            xpc_array_apply(v441, v450);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v391 = (void *)*((_QWORD *)v3->required_interface + 12);
        if (v391)
        {
          if (xpc_array_get_count(v391))
          {
            v392 = (char *)v471[3];
            v393 = ", ";
            if (v392 == a2)
              v393 = "";
            v394 = snprintf(v392, v467[3], "%spreferred netagent uuids: ", v393);
            v395 = v467;
            v396 = v467[3];
            v15 = v396 > v394;
            v397 = v396 - v394;
            if (v15)
            {
              if (v394 >= 1)
              {
                v471[3] += v394;
                v395[3] = v397;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v442 = (void *)*((_QWORD *)v3->required_interface + 12);
            v449[0] = MEMORY[0x1E0C809B0];
            v449[1] = 3221225472;
            v449[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_13;
            v449[3] = &unk_1E149D108;
            v449[4] = &v470;
            v449[5] = &v466;
            v449[6] = &v462;
            xpc_array_apply(v442, v449);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v398 = (void *)*((_QWORD *)v3->required_interface + 13);
        if (v398)
        {
          if (xpc_array_get_count(v398))
          {
            v399 = (char *)v471[3];
            v400 = ", ";
            if (v399 == a2)
              v400 = "";
            v401 = snprintf(v399, v467[3], "%savoided netagent domains: ", v400);
            v402 = v467;
            v403 = v467[3];
            v15 = v403 > v401;
            v404 = v403 - v401;
            if (v15)
            {
              if (v401 >= 1)
              {
                v471[3] += v401;
                v402[3] = v404;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v443 = (void *)*((_QWORD *)v3->required_interface + 13);
            v448[0] = MEMORY[0x1E0C809B0];
            v448[1] = 3221225472;
            v448[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_14;
            v448[3] = &unk_1E149D108;
            v448[4] = &v470;
            v448[5] = &v466;
            v448[6] = &v462;
            xpc_array_apply(v443, v448);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v405 = (void *)*((_QWORD *)v3->required_interface + 14);
        if (v405)
        {
          if (xpc_array_get_count(v405))
          {
            v406 = (char *)v471[3];
            v407 = ", ";
            if (v406 == a2)
              v407 = "";
            v408 = snprintf(v406, v467[3], "%savoided netagent types: ", v407);
            v409 = v467;
            v410 = v467[3];
            v15 = v410 > v408;
            v411 = v410 - v408;
            if (v15)
            {
              if (v408 >= 1)
              {
                v471[3] += v408;
                v409[3] = v411;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v444 = (void *)*((_QWORD *)v3->required_interface + 14);
            v447[0] = MEMORY[0x1E0C809B0];
            v447[1] = 3221225472;
            v447[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_15;
            v447[3] = &unk_1E149D108;
            v447[4] = &v470;
            v447[5] = &v466;
            v447[6] = &v462;
            xpc_array_apply(v444, v447);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24))
      {
        v412 = (void *)*((_QWORD *)v3->required_interface + 15);
        if (v412)
        {
          if (xpc_array_get_count(v412))
          {
            v413 = (char *)v471[3];
            v414 = ", ";
            if (v413 == a2)
              v414 = "";
            v415 = snprintf(v413, v467[3], "%savoided netagent uuids: ", v414);
            v416 = v467;
            v417 = v467[3];
            v15 = v417 > v415;
            v418 = v417 - v415;
            if (v15)
            {
              if (v415 >= 1)
              {
                v471[3] += v415;
                v416[3] = v418;
              }
            }
            else
            {
              *(_BYTE *)v471[3] = 0;
              *((_BYTE *)v463 + 24) = 1;
            }
            v445 = (void *)*((_QWORD *)v3->required_interface + 15);
            v446[0] = MEMORY[0x1E0C809B0];
            v446[1] = 3221225472;
            v446[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_16;
            v446[3] = &unk_1E149D108;
            v446[4] = &v470;
            v446[5] = &v466;
            v446[6] = &v462;
            xpc_array_apply(v445, v446);
          }
        }
      }
      if (!*((_BYTE *)v463 + 24) && *((_QWORD *)v3->required_interface + 16))
      {
        v308 = (char *)v471[3];
        v309 = ", ";
        if (v308 == a2)
          v309 = "";
        v310 = snprintf(v308, v467[3], "%shas demux", v309);
        v311 = v467;
        v312 = v467[3];
        v15 = v312 > v310;
        v313 = v312 - v310;
        if (v15)
        {
          if (v310 >= 1)
          {
            v471[3] += v310;
            v311[3] = v313;
          }
        }
        else
        {
          *(_BYTE *)v471[3] = 0;
          *((_BYTE *)v463 + 24) = 1;
        }
      }
    }
  }
  _Block_object_dispose(&v462, 8);
  _Block_object_dispose(&v466, 8);
  _Block_object_dispose(&v470, 8);

}

void sub_183537228(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose(&STACK[0x3A0], 8);
  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Block_object_dispose((const void *)(v2 - 208), 8);

  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_prefer_no_proxy(nw_parameters_t parameters)
{
  nw_parameters_t v1;
  nw_parameters_t v2;
  _BOOL4 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = parameters;
  v2 = v1;
  if (v1)
  {
    v3 = HIBYTE(*((unsigned __int16 *)v1[13].isa + 54)) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_prefer_no_proxy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_prefer_no_proxy";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_prefer_no_proxy";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_prefer_no_proxy";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_prefer_no_proxy";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  LOBYTE(v3) = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_no_proxy_path_selection(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 108) >> 9) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_no_proxy_path_selection";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_proxy_path_selection";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_no_proxy_path_selection";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_proxy_path_selection";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_no_proxy_path_selection";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_privacy_proxy_fail_closed(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 100) >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_privacy_proxy_fail_closed";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_privacy_proxy_fail_closed";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_privacy_proxy_fail_closed";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_privacy_proxy_fail_closed";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_privacy_proxy_fail_closed";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 108) >> 10) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke(_QWORD *a1, uint64_t a2, xpc_object_t xuint)
{
  unsigned int value;
  const char *v6;
  const char *v7;
  int v8;

  value = xpc_uint64_get_value(xuint);
  if (value > 4)
    v6 = "unknown";
  else
    v6 = off_1E14AD0B0[value];
  v7 = ", ";
  if (!a2)
    v7 = "";
  v8 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v7, v6);
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v8)
  {
    **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
  else if (v8 >= 1)
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v8;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v8;
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_2(_QWORD *a1, uint64_t a2, xpc_object_t xuint)
{
  int value;
  const char *v6;
  const char *v7;
  int v8;

  value = xpc_uint64_get_value(xuint);
  if (value <= 1001)
  {
    if (!value)
    {
      v6 = "other";
      goto LABEL_13;
    }
    if (value == 1001)
    {
      v6 = "wifi_infrastructure";
      goto LABEL_13;
    }
  }
  else
  {
    switch(value)
    {
      case 1002:
        v6 = "wifi_awdl";
        goto LABEL_13;
      case 4001:
        v6 = "coprocessor";
        goto LABEL_13;
      case 5001:
        v6 = "companion";
        goto LABEL_13;
    }
  }
  v6 = "unknown";
LABEL_13:
  v7 = ", ";
  if (!a2)
    v7 = "";
  v8 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v7, v6);
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v8)
  {
    **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
  else if (v8 >= 1)
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v8;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v8;
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_3(_QWORD *a1, uint64_t a2, xpc_object_t xuint)
{
  int value;
  const char *v6;
  const char *v7;
  int v8;

  value = xpc_uint64_get_value(xuint);
  if (value <= 1001)
  {
    if (!value)
    {
      v6 = "other";
      goto LABEL_13;
    }
    if (value == 1001)
    {
      v6 = "wifi_infrastructure";
      goto LABEL_13;
    }
  }
  else
  {
    switch(value)
    {
      case 1002:
        v6 = "wifi_awdl";
        goto LABEL_13;
      case 4001:
        v6 = "coprocessor";
        goto LABEL_13;
      case 5001:
        v6 = "companion";
        goto LABEL_13;
    }
  }
  v6 = "unknown";
LABEL_13:
  v7 = ", ";
  if (!a2)
    v7 = "";
  v8 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v7, v6);
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v8)
  {
    **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
  else if (v8 >= 1)
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v8;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v8;
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_4(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  const char *string;
  uint64_t uint64;
  const char *v8;
  const char *v9;
  int v10;
  _BOOL8 v11;

  v5 = a3;
  string = xpc_dictionary_get_string(v5, "name");
  uint64 = xpc_dictionary_get_uint64(v5, "index");
  v8 = ", ";
  if (!a2)
    v8 = "";
  v9 = "?";
  if (string)
    v9 = string;
  v10 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s(%llu)", v8, v9, uint64);
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v10)
  {
    **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
  else if (v10 >= 1)
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v10;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v10;
  }
  v11 = *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;

  return v11;
}

void sub_1835381FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_5(_QWORD *a1, uint64_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *v6;
  int v7;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_6(_QWORD *a1, uint64_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *v6;
  int v7;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_7(_QWORD *a1, uint64_t a2, xpc_object_t xuuid)
{
  const unsigned __int8 *bytes;
  const char *v6;
  int v7;
  char out[40];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    memset(out, 0, 37);
    uuid_unparse(bytes, out);
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, out);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_8(_QWORD *a1, uint64_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *v6;
  int v7;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_9(_QWORD *a1, uint64_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *v6;
  int v7;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_10(_QWORD *a1, uint64_t a2, xpc_object_t xuuid)
{
  const unsigned __int8 *bytes;
  const char *v6;
  int v7;
  char out[40];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    memset(out, 0, 37);
    uuid_unparse(bytes, out);
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, out);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_11(_QWORD *a1, uint64_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *v6;
  int v7;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_12(_QWORD *a1, uint64_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *v6;
  int v7;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_13(_QWORD *a1, uint64_t a2, xpc_object_t xuuid)
{
  const unsigned __int8 *bytes;
  const char *v6;
  int v7;
  char out[40];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    memset(out, 0, 37);
    uuid_unparse(bytes, out);
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, out);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_14(_QWORD *a1, uint64_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *v6;
  int v7;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_15(_QWORD *a1, uint64_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *v6;
  int v7;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, string_ptr);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_16(_QWORD *a1, uint64_t a2, xpc_object_t xuuid)
{
  const unsigned __int8 *bytes;
  const char *v6;
  int v7;
  char out[40];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    memset(out, 0, 37);
    uuid_unparse(bytes, out);
    v6 = ", ";
    if (!a2)
      v6 = "";
    v7 = snprintf(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), "%s%s", v6, out);
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    else if (v7 >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

BOOL __nw_protocol_stack_includes_protocol_block_invoke(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4;
  _BOOL4 is_equal_unsafe;
  _BOOL8 v6;

  v4 = nw_protocol_options_copy_definition(options);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(*(_QWORD *)(a1 + 32), (uint64_t)v4);
  if (is_equal_unsafe)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v6 = !is_equal_unsafe;

  return v6;
}

void sub_183538F04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _nw_parameters_configure_protocol_disable_block_invoke()
{
  id v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  char *backtrace_string;
  os_log_type_t v5;
  _BOOL4 v6;
  os_log_type_t v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
  v1 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1)
      return;
    goto LABEL_7;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, v3, "%{public}s _nw_parameters_configure_protocol_disable called directly", buf, 0xCu);
    }
LABEL_5:

    goto LABEL_6;
  }
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v7 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, v7, "%{public}s _nw_parameters_configure_protocol_disable called directly, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_5;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  v5 = type;
  v6 = os_log_type_enabled(v2, type);
  if (!backtrace_string)
  {
    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, v5, "%{public}s _nw_parameters_configure_protocol_disable called directly, no backtrace", buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (v6)
  {
    *(_DWORD *)buf = 136446466;
    v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
    v12 = 2082;
    v13 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v2, v5, "%{public}s _nw_parameters_configure_protocol_disable called directly, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v1)
LABEL_7:
    free(v1);
}

void _nw_parameters_configure_protocol_default_configuration_block_invoke_2()
{
  id v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  char *backtrace_string;
  os_log_type_t v5;
  _BOOL4 v6;
  os_log_type_t v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
  v1 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1)
      return;
    goto LABEL_7;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
      _os_log_impl(&dword_182FBE000, v2, v3, "%{public}s _nw_parameters_configure_protocol_default_configuration called directly", buf, 0xCu);
    }
LABEL_5:

    goto LABEL_6;
  }
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v7 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
      _os_log_impl(&dword_182FBE000, v2, v7, "%{public}s _nw_parameters_configure_protocol_default_configuration called directly, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_5;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  v5 = type;
  v6 = os_log_type_enabled(v2, type);
  if (!backtrace_string)
  {
    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
      _os_log_impl(&dword_182FBE000, v2, v5, "%{public}s _nw_parameters_configure_protocol_default_configuration called directly, no backtrace", buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (v6)
  {
    *(_DWORD *)buf = 136446466;
    v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
    v12 = 2082;
    v13 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v2, v5, "%{public}s _nw_parameters_configure_protocol_default_configuration called directly, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v1)
LABEL_7:
    free(v1);
}

void _nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3()
{
  id v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  char *backtrace_string;
  os_log_type_t v5;
  _BOOL4 v6;
  os_log_type_t v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
  v1 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1)
      return;
    goto LABEL_7;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
      _os_log_impl(&dword_182FBE000, v2, v3, "%{public}s _nw_parameters_configure_sec_protocol_default_configuration called directly", buf, 0xCu);
    }
LABEL_5:

    goto LABEL_6;
  }
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    v7 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
      _os_log_impl(&dword_182FBE000, v2, v7, "%{public}s _nw_parameters_configure_sec_protocol_default_configuration called directly, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_5;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  v5 = type;
  v6 = os_log_type_enabled(v2, type);
  if (!backtrace_string)
  {
    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
      _os_log_impl(&dword_182FBE000, v2, v5, "%{public}s _nw_parameters_configure_sec_protocol_default_configuration called directly, no backtrace", buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (v6)
  {
    *(_DWORD *)buf = 136446466;
    v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
    v12 = 2082;
    v13 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v2, v5, "%{public}s _nw_parameters_configure_sec_protocol_default_configuration called directly, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v1)
LABEL_7:
    free(v1);
}

NWConcrete_nw_protocol_stack *nw_protocol_stack_create_empty()
{
  return objc_alloc_init(NWConcrete_nw_protocol_stack);
}

uint64_t __nw_protocol_stack_copy_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  NWConcrete_nw_protocol_options *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = nw_protocol_options_copy(a3);
  nw_array_append(v3, v4);

  return 1;
}

BOOL nw_protocol_options_are_persistent(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  _DWORD *v4;
  _BOOL8 v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_options_copy_definition";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v8, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_protocol_options_copy_definition";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v26 = "nw_protocol_options_copy_definition";
            v27 = 2082;
            v28 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_protocol_options_copy_definition";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_protocol_options_copy_definition";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v8)
      free(v8);
    goto LABEL_23;
  }
  v3 = v1[1];

  if (v3)
  {
    v4 = v3;

    v5 = v4[10] == 5;
    goto LABEL_4;
  }
LABEL_23:
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_protocol_options_are_persistent";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v16, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_options_are_persistent";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v17, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_protocol_options_are_persistent";
          v27 = 2082;
          v28 = v19;
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
        goto LABEL_39;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_options_are_persistent";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_options_are_persistent";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_39:
  if (v16)
    free(v16);
  v4 = 0;
  v5 = 0;
LABEL_4:

  return v5;
}

uint64_t __nw_protocol_stack_iterate_application_protocols_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 1;
}

BOOL __nw_protocol_stack_insert_application_protocol_before_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;

  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = a1[4] == a3;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a2;
  return v3 == 0;
}

BOOL __nw_protocol_stack_insert_application_protocol_before_block_invoke_2(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;

  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = a1[4] == a3;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a2;
  return v3 == 0;
}

void nw_protocol_stack_remove_protocol(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  id *v11;
  id v12;
  void *v13;
  void *v14;
  id *v15;
  id v16;
  void *v17;
  void *v18;
  id *v19;
  id v20;
  void *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  void *v36;
  _QWORD v37[4];
  id v38;
  id v39;
  _BYTE *v40;
  _QWORD v41[4];
  id v42;
  id v43;
  _BYTE *v44;
  char v45;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t);
  id v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v36 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v23, &type, &v45))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v45)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v23)
          goto LABEL_19;
LABEL_54:
        free(v23);
        goto LABEL_19;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
        _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
        _os_log_impl(&dword_182FBE000, v24, v34, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (v4)
  {
    v5 = (void *)*((_QWORD *)v3 + 1);
    v6 = MEMORY[0x1E0C809B0];
    if (v5)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v48 = __Block_byref_object_copy__19149;
      v49 = __Block_byref_object_dispose__19150;
      v50 = v5;
      v7 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      v41[0] = v6;
      v41[1] = 3221225472;
      v41[2] = __nw_protocol_stack_remove_protocol_block_invoke;
      v41[3] = &unk_1E14A51E8;
      v42 = v36;
      v44 = buf;
      v43 = v3;
      nw_array_apply(v7, (uint64_t)v41);
      objc_storeStrong((id *)v3 + 1, *(id *)(*(_QWORD *)&buf[8] + 40));

      _Block_object_dispose(buf, 8);
    }
    v8 = (void *)*((_QWORD *)v3 + 2);
    if (v8)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v48 = __Block_byref_object_copy__19149;
      v49 = __Block_byref_object_dispose__19150;
      v50 = v8;
      v9 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
      v37[0] = v6;
      v37[1] = 3221225472;
      v37[2] = __nw_protocol_stack_remove_protocol_block_invoke_2;
      v37[3] = &unk_1E14A51E8;
      v38 = v36;
      v40 = buf;
      v39 = v3;
      nw_array_apply(v9, (uint64_t)v37);
      objc_storeStrong((id *)v3 + 2, *(id *)(*(_QWORD *)&buf[8] + 40));

      _Block_object_dispose(buf, 8);
    }
    v10 = (void *)*((_QWORD *)v3 + 3);
    if (v10)
    {
      v11 = v10;
      v12 = v11[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v36, (uint64_t)v12))
      {
        v13 = (void *)*((_QWORD *)v3 + 3);
        *((_QWORD *)v3 + 3) = 0;

      }
    }
    v14 = (void *)*((_QWORD *)v3 + 4);
    if (v14)
    {
      v15 = v14;
      v16 = v15[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v36, (uint64_t)v16))
      {
        v17 = (void *)*((_QWORD *)v3 + 4);
        *((_QWORD *)v3 + 4) = 0;

      }
    }
    v18 = (void *)*((_QWORD *)v3 + 6);
    if (v18)
    {
      v19 = v18;
      v20 = v19[1];

      if (nw_protocol_definition_is_equal_unsafe((uint64_t)v36, (uint64_t)v20))
      {
        v21 = (void *)*((_QWORD *)v3 + 6);
        *((_QWORD *)v3 + 6) = 0;

      }
    }
    goto LABEL_19;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v45 = 0;
  if (!__nwlog_fault(v23, &type, &v45))
    goto LABEL_53;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    if (os_log_type_enabled(v24, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
      _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null definition", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (!v45)
  {
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    v35 = type;
    if (os_log_type_enabled(v24, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
      _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_52;
  }
  v31 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v24 = objc_claimAutoreleasedReturnValue();
  v32 = type;
  v33 = os_log_type_enabled(v24, type);
  if (!v31)
  {
    if (v33)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
      _os_log_impl(&dword_182FBE000, v24, v32, "%{public}s called with null definition, no backtrace", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (v33)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_remove_protocol";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v31;
    _os_log_impl(&dword_182FBE000, v24, v32, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v31);
  if (v23)
    goto LABEL_54;
LABEL_19:

}

void sub_18353A420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19149(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19150(uint64_t a1)
{

}

BOOL __nw_protocol_stack_remove_protocol_block_invoke(uint64_t *a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_definition_t v5;
  _BOOL4 is_equal_unsafe;
  _BOOL8 v7;
  uint64_t v8;
  void *v9;

  v4 = a3;
  v5 = nw_protocol_options_copy_definition(v4);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(a1[4], (uint64_t)v5);
  if (is_equal_unsafe)
  {
    v7 = nw_array_duplicate_array_without_object(*(_QWORD *)(a1[5] + 8), v4);
    v8 = *(_QWORD *)(a1[6] + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
  return !is_equal_unsafe;
}

void sub_18353A4E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL __nw_protocol_stack_remove_protocol_block_invoke_2(uint64_t *a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_definition_t v5;
  _BOOL4 is_equal_unsafe;
  _BOOL8 v7;
  uint64_t v8;
  void *v9;

  v4 = a3;
  v5 = nw_protocol_options_copy_definition(v4);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(a1[4], (uint64_t)v5);
  if (is_equal_unsafe)
  {
    v7 = nw_array_duplicate_array_without_object(*(_QWORD *)(a1[5] + 16), v4);
    v8 = *(_QWORD *)(a1[6] + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
  return !is_equal_unsafe;
}

void sub_18353A584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_definition_t v5;
  _BOOL8 v6;
  uint64_t v7;
  void *v8;
  unsigned __int8 *v9;
  id v10;
  uint64_t v11;
  __int128 v13;
  _QWORD v14[4];
  NSObject *v15;
  __int128 v16;

  v4 = a3;
  v5 = nw_protocol_options_copy_definition(v4);
  if (nw_protocol_definition_is_equal_unsafe(*(_QWORD *)(a1 + 32), (uint64_t)v5)
    || nw_protocol_definition_is_equal_unsafe(*(_QWORD *)(a1 + 40), (uint64_t)v5))
  {
    v6 = nw_array_create();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    v9 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 48) + 8);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_protocol_stack_replace_protocol_block_invoke_2;
    v14[3] = &unk_1E14A51E8;
    v15 = v4;
    v13 = *(_OWORD *)(a1 + 56);
    v10 = (id)v13;
    v16 = v13;
    nw_array_apply(v9, (uint64_t)v14);

    v11 = 0;
  }
  else
  {
    v11 = 1;
  }

  return v11;
}

void sub_18353A6A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke_4(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;

  v4 = a3;
  v5 = v4;
  if ((id)a1[4] == v4)
    v5 = (void *)a1[5];
  nw_array_append(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), v5);

  return 1;
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke_2(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;

  v4 = a3;
  v5 = v4;
  if ((id)a1[4] == v4)
    v5 = (void *)a1[5];
  nw_array_append(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), v5);

  return 1;
}

void nw_protocol_stack_replace_protocol_with_handle(void *a1, uint64_t a2, void *a3)
{
  id *v5;
  id v6;
  void *v7;
  id v8;
  unsigned __int8 *v9;
  void *v10;
  id v11;
  unsigned __int8 *v12;
  void *v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  _QWORD v37[4];
  id *v38;
  id v39;
  _BYTE *v40;
  uint64_t v41;
  _QWORD v42[4];
  id *v43;
  id v44;
  _BYTE *v45;
  uint64_t v46;
  char v47;
  os_log_type_t v48;
  _BYTE buf[24];
  uint64_t (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t);
  id v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
    v24 = (char *)_os_log_send_and_compose_impl();

    v48 = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v24, &v48, &v47))
      goto LABEL_54;
    if (v48 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = v48;
      if (os_log_type_enabled(v25, v48))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v30 = v48;
      v31 = os_log_type_enabled(v25, v48);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_54:
        if (!v24)
          goto LABEL_20;
LABEL_55:
        free(v24);
        goto LABEL_20;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
        _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v35 = v48;
      if (os_log_type_enabled(v25, v48))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
        _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_53:

    goto LABEL_54;
  }
  if (v6)
  {
    v8 = v5[1];
    if (v8)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v50 = __Block_byref_object_copy__19149;
      v51 = __Block_byref_object_dispose__19150;
      v52 = v8;
      v9 = (unsigned __int8 *)v5[1];
      v42[0] = MEMORY[0x1E0C809B0];
      v42[1] = 3221225472;
      v42[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke;
      v42[3] = &unk_1E149CF60;
      v45 = buf;
      v46 = a2;
      v43 = v5;
      v44 = v7;
      nw_array_apply(v9, (uint64_t)v42);
      v10 = *(void **)(*(_QWORD *)&buf[8] + 40);
      if (v10)
        objc_storeStrong(v5 + 1, v10);

      _Block_object_dispose(buf, 8);
    }
    v11 = v5[2];
    if (v11)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v50 = __Block_byref_object_copy__19149;
      v51 = __Block_byref_object_dispose__19150;
      v52 = v11;
      v12 = (unsigned __int8 *)v5[2];
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 3221225472;
      v37[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke_3;
      v37[3] = &unk_1E149CF60;
      v40 = buf;
      v41 = a2;
      v38 = v5;
      v39 = v7;
      nw_array_apply(v12, (uint64_t)v37);
      v13 = *(void **)(*(_QWORD *)&buf[8] + 40);
      if (v13)
        objc_storeStrong(v5 + 2, v13);

      _Block_object_dispose(buf, 8);
    }
    v14 = v5[3];
    if (v14)
    {
      v15 = v14;
      v16 = v15[2];

      if (v16 == a2)
        objc_storeStrong(v5 + 3, a3);
    }
    v17 = v5[4];
    if (v17)
    {
      v18 = v17;
      v19 = v18[2];

      if (v19 == a2)
        objc_storeStrong(v5 + 4, a3);
    }
    v20 = v5[6];
    if (v20)
    {
      v21 = v20;
      v22 = v21[2];

      if (v22 == a2)
        objc_storeStrong(v5 + 6, a3);
    }
    goto LABEL_20;
  }
  __nwlog_obj();
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
  v24 = (char *)_os_log_send_and_compose_impl();

  v48 = OS_LOG_TYPE_ERROR;
  v47 = 0;
  if (!__nwlog_fault(v24, &v48, &v47))
    goto LABEL_54;
  if (v48 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    v28 = v48;
    if (os_log_type_enabled(v25, v48))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
      _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null new_options", buf, 0xCu);
    }
    goto LABEL_53;
  }
  if (!v47)
  {
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    v36 = v48;
    if (os_log_type_enabled(v25, v48))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
      _os_log_impl(&dword_182FBE000, v25, v36, "%{public}s called with null new_options, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_53;
  }
  v32 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v25 = objc_claimAutoreleasedReturnValue();
  v33 = v48;
  v34 = os_log_type_enabled(v25, v48);
  if (!v32)
  {
    if (v34)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
      _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null new_options, no backtrace", buf, 0xCu);
    }
    goto LABEL_53;
  }
  if (v34)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v32;
    _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null new_options, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v32);
  if (v24)
    goto LABEL_55;
LABEL_20:

}

BOOL __nw_protocol_stack_replace_protocol_with_handle_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t protocol_handle;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 *v10;
  id v11;
  __int128 v13;
  _QWORD v14[4];
  id v15;
  __int128 v16;

  v4 = a3;
  protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  v6 = *(_QWORD *)(a1 + 56);
  if (protocol_handle == v6)
  {
    v7 = nw_array_create();
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    v10 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 32) + 8);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke_2;
    v14[3] = &unk_1E14A51E8;
    v15 = v4;
    v13 = *(_OWORD *)(a1 + 40);
    v11 = (id)v13;
    v16 = v13;
    nw_array_apply(v10, (uint64_t)v14);

  }
  return protocol_handle != v6;
}

BOOL __nw_protocol_stack_replace_protocol_with_handle_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t protocol_handle;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 *v10;
  id v11;
  __int128 v13;
  _QWORD v14[4];
  id v15;
  __int128 v16;

  v4 = a3;
  protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  v6 = *(_QWORD *)(a1 + 56);
  if (protocol_handle == v6)
  {
    v7 = nw_array_create();
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    v10 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 32) + 16);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke_4;
    v14[3] = &unk_1E14A51E8;
    v15 = v4;
    v13 = *(_OWORD *)(a1 + 40);
    v11 = (id)v13;
    v16 = v13;
    nw_array_apply(v10, (uint64_t)v14);

  }
  return protocol_handle != v6;
}

uint64_t __nw_protocol_stack_replace_protocol_with_handle_block_invoke_4(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;

  v4 = a3;
  v5 = v4;
  if ((id)a1[4] == v4)
    v5 = (void *)a1[5];
  nw_array_append(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), v5);

  return 1;
}

uint64_t __nw_protocol_stack_replace_protocol_with_handle_block_invoke_2(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;

  v4 = a3;
  v5 = v4;
  if ((id)a1[4] == v4)
    v5 = (void *)a1[5];
  nw_array_append(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), v5);

  return 1;
}

uint64_t __nw_protocol_stack_is_equal_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t is_equal;

  v5 = a3;
  nw_array_get_object_at_index(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  is_equal = nw_protocol_option_is_equal(v5, v6);
  if ((is_equal & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

  return is_equal;
}

void sub_18353B0EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_is_equal_block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t is_equal;

  v5 = a3;
  nw_array_get_object_at_index(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  is_equal = nw_protocol_option_is_equal(v5, v6);
  if ((is_equal & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

  return is_equal;
}

void sub_18353B17C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_get_hash_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) ^= nw_protocol_options_get_hash(v4);

  return 1;
}

void sub_18353B1D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_get_hash_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) ^= nw_protocol_options_get_hash(v4);

  return 1;
}

void sub_18353B228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *nw_parameters_copy_description(NWConcrete_nw_parameters *a1)
{
  return nw_parameters_copy_description_internal(a1, 0);
}

id *nw_parameters_create_empty_stack()
{
  NWConcrete_nw_parameters *v0;
  NWConcrete_nw_protocol_stack *v1;
  id *v2;

  v0 = [NWConcrete_nw_parameters alloc];
  v1 = objc_alloc_init(NWConcrete_nw_protocol_stack);
  v2 = -[NWConcrete_nw_parameters initWithStack:]((id *)&v0->super.isa, v1);

  return v2;
}

void sub_18353B290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_application_service(void)
{
  nw_parameters_t v0;

  v0 = nw_parameters_create();
  nw_parameters_set_always_open_listener_socket(v0, 0);
  nw_parameters_set_data_mode(v0, 2u);
  *((_WORD *)v0[13].isa + 50) |= 0x100u;
  return v0;
}

void sub_18353B2E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_always_open_listener_socket(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x8000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFF7FFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_always_open_listener_socket";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_always_open_listener_socket";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_always_open_listener_socket";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_always_open_listener_socket";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_always_open_listener_socket";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_tfo(void *a1, _BOOL4 a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_parameters *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_tcp_options(v3, 1);
    v6 = v5;
    if (v5)
    {
      v7 = 4;
      if (!a2)
        v7 = 0;
      *((_QWORD *)&v4->value + 11) = *((_QWORD *)&v4->value + 11) & 0xFFFFFFFFFFFFFFFBLL | v7;
      nw_tcp_options_set_enable_fast_open(v5, a2);
    }

    goto LABEL_7;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_parameters_set_tfo";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_parameters_set_tfo";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_parameters_set_tfo";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_parameters_set_tfo";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_parameters_set_tfo";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v9)
    free(v9);
LABEL_7:

}

void sub_18353B868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

OS_nw_protocol_options *nw_parameters_copy_tcp_options(NWConcrete_nw_parameters *a1, int a2)
{
  NWConcrete_nw_parameters *v3;
  NWConcrete_nw_protocol_stack *default_stack;
  OS_nw_protocol_options *transport_protocol;
  id *v6;
  id v7;
  id v8;
  BOOL is_equal_unsafe;
  OS_nw_protocol_options *v10;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_stack *v12;
  OS_nw_protocol_options *v13;
  NSObject *v14;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  default_stack = v3->default_stack;
  if (default_stack)
  {
    transport_protocol = default_stack->transport_protocol;
    if (transport_protocol && (v6 = transport_protocol, v7 = v6[1], v6, v7))
    {
      if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
        dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
      v8 = (id)g_tcp_definition;
      is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

      if (!is_equal_unsafe)
      {
        v10 = 0;
LABEL_16:

        goto LABEL_17;
      }
    }
    else
    {
      if (a2)
      {
        if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
          dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
        options = nw_protocol_create_options((void *)g_tcp_definition);
        v12 = v3->default_stack;
        v13 = v12->transport_protocol;
        v12->transport_protocol = (OS_nw_protocol_options *)options;

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_parameters_copy_tcp_options";
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s TCP-specific parameter set without transport protocol specified, inferring TCP", buf, 0xCu);
        }

      }
      v7 = 0;
    }
    v10 = v3->default_stack->transport_protocol;
    goto LABEL_16;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_parameters_copy_tcp_options";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_copy_tcp_options";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null parameters->default_stack", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_parameters_copy_tcp_options";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null parameters->default_stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_34;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_copy_tcp_options";
        _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null parameters->default_stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_copy_tcp_options";
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null parameters->default_stack, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_34:
  if (v17)
    free(v17);
  v10 = 0;
LABEL_17:

  return v10;
}

void sub_18353BC6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_add_protocol_stack_member_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = a3;
  if (*(_DWORD *)(a1 + 48) == a2)
    nw_array_append(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
  nw_array_append(*(_QWORD *)(a1 + 32), v5);

  return 1;
}

NSObject *nw_parameters_create_quic_connection(void *a1)
{
  void (**v1)(id, NWConcrete_nw_protocol_options *);
  void (**v2)(id, NWConcrete_nw_protocol_options *);
  NSObject *v3;
  NSObject *v4;
  nw_parameters_t v5;
  NWConcrete_nw_protocol_options *options;
  id *v7;
  id *v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  void *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  char v50;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_parameters_create_quic_connection";
    v29 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v29, &type, &v50))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null configure_quic_connection", buf, 0xCu);
      }
    }
    else if (v50)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_parameters_create_quic_connection";
          v54 = 2082;
          v55 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_98;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null configure_quic_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_182FBE000, v30, v44, "%{public}s called with null configure_quic_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_97:

    goto LABEL_98;
  }
  if (v1 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
  {
    if (networkd_settings_get_BOOL((const char *)nw_setting_disable_quic))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = (id)gLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s QUIC is disabled, cannot create QUIC connection", buf, 0xCu);
      }

      goto LABEL_7;
    }
    v5 = nw_parameters_create();
    if (v5)
    {
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_54912);
      options = nw_protocol_create_options((void *)nw_protocol_copy_quic_connection_definition::quic_definition);
      nw_protocol_options_set_prohibit_joining(options);
      if (options)
      {
        v7 = v5[19].isa;
        v8 = v7;
        if (v7)
        {
          objc_storeStrong(v7 + 3, options);
          if (v2 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
            v2[2](v2, options);
          BYTE4(v5[11].isa) = 2;
          v4 = v5;
LABEL_16:

LABEL_57:
          goto LABEL_58;
        }
        __nwlog_obj();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        v41 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v50 = 0;
        if (__nwlog_fault(v41, &type, &v50))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v42 = objc_claimAutoreleasedReturnValue();
            v43 = type;
            if (os_log_type_enabled(v42, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_parameters_create_quic_connection";
              _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s called with null stack", buf, 0xCu);
            }
          }
          else if (v50)
          {
            v46 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v42 = objc_claimAutoreleasedReturnValue();
            v47 = type;
            v48 = os_log_type_enabled(v42, type);
            if (v46)
            {
              if (v48)
              {
                *(_DWORD *)buf = 136446466;
                v53 = "nw_parameters_create_quic_connection";
                v54 = 2082;
                v55 = v46;
                _os_log_impl(&dword_182FBE000, v42, v47, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v46);
              goto LABEL_111;
            }
            if (v48)
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_parameters_create_quic_connection";
              _os_log_impl(&dword_182FBE000, v42, v47, "%{public}s called with null stack, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v42 = objc_claimAutoreleasedReturnValue();
            v49 = type;
            if (os_log_type_enabled(v42, type))
            {
              *(_DWORD *)buf = 136446210;
              v53 = "nw_parameters_create_quic_connection";
              _os_log_impl(&dword_182FBE000, v42, v49, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_111:
        if (v41)
          free(v41);
        v4 = 0;
        goto LABEL_16;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v53 = "nw_parameters_create_quic_connection";
      v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v50 = 0;
      if (__nwlog_fault(v14, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_parameters_create_quic_connection";
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s nw_quic_create_connection_options failed", buf, 0xCu);
          }
        }
        else if (v50)
        {
          v20 = __nw_create_backtrace_string();
          if (v20)
          {
            v21 = (char *)v20;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v22 = (id)gLogObj;
            v23 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)buf = 136446466;
              v53 = "nw_parameters_create_quic_connection";
              v54 = 2082;
              v55 = v21;
              _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s nw_quic_create_connection_options failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v21);
            if (!v14)
              goto LABEL_56;
            goto LABEL_55;
          }
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v26 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_parameters_create_quic_connection";
            _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s nw_quic_create_connection_options failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v25 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_parameters_create_quic_connection";
            _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s nw_quic_create_connection_options failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v14)
      {
LABEL_56:
        v4 = 0;
        goto LABEL_57;
      }
LABEL_55:
      free(v14);
      goto LABEL_56;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_parameters_create_quic_connection";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v10, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_parameters_create_quic_connection";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }
      else if (v50)
      {
        v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v18 = type;
        v19 = os_log_type_enabled(v11, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_parameters_create_quic_connection";
            v54 = 2082;
            v55 = v17;
            _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v17);
          if (!v10)
            goto LABEL_47;
          goto LABEL_46;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_parameters_create_quic_connection";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_parameters_create_quic_connection";
          _os_log_impl(&dword_182FBE000, v11, v24, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v10)
    {
LABEL_47:
      v4 = 0;
LABEL_58:

      goto LABEL_59;
    }
LABEL_46:
    free(v10);
    goto LABEL_47;
  }
  __nwlog_obj();
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v53 = "nw_parameters_create_quic_connection";
  v29 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v50 = 0;
  if (__nwlog_fault(v29, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v50)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      v39 = os_log_type_enabled(v30, type);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_parameters_create_quic_connection";
          v54 = 2082;
          v55 = v37;
          _os_log_impl(&dword_182FBE000, v30, v38, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        if (!v29)
          goto LABEL_7;
        goto LABEL_99;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_182FBE000, v30, v38, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_182FBE000, v30, v45, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_97;
  }
LABEL_98:
  if (v29)
LABEL_99:
    free(v29);
LABEL_7:
  v4 = 0;
LABEL_59:

  return v4;
}

void sub_18353C9C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

NSObject *nw_parameters_create_quic_stream(void *a1, void *a2)
{
  void (**v3)(id, NWConcrete_nw_protocol_options *);
  void (**v4)(id, id);
  void (**v5)(id, id);
  NSObject *v6;
  NSObject *v7;
  nw_parameters_t v8;
  NWConcrete_nw_protocol_options *options;
  id *v10;
  id *v11;
  id v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  void *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  void *v36;
  os_log_type_t v37;
  void *v38;
  os_log_type_t v39;
  void *v40;
  os_log_type_t v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  char *backtrace_string;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  _BOOL4 v49;
  os_log_type_t v50;
  _BOOL4 v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  os_log_type_t v56;
  os_log_type_t v57;
  os_log_type_t v58;
  os_log_type_t v59;
  char *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  os_log_type_t v63;
  char v64;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v67;
  __int16 v68;
  char *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (!v4)
    {
      __nwlog_obj();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v67 = "nw_parameters_create_quic_stream";
      v33 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v64 = 0;
      if (!__nwlog_fault(v33, &type, &v64))
        goto LABEL_134;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s called with null configure_quic_connection", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (!v64)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v57 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v34, v57, "%{public}s called with null configure_quic_connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      v47 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v34, v46, "%{public}s called with null configure_quic_connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v47)
      {
        *(_DWORD *)buf = 136446466;
        v67 = "nw_parameters_create_quic_stream";
        v68 = 2082;
        v69 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v34, v46, "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_103;
    }
    if (v3 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
    {
      __nwlog_obj();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v67 = "nw_parameters_create_quic_stream";
      v33 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v64 = 0;
      if (!__nwlog_fault(v33, &type, &v64))
        goto LABEL_134;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v34, v39, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (!v64)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v58 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v34, v58, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      v49 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v34, v48, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446466;
        v67 = "nw_parameters_create_quic_stream";
        v68 = 2082;
        v69 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v34, v48, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_103;
    }
    if (v4 != (void (**)(id, id))&__block_literal_global_18950)
    {
      if (networkd_settings_get_BOOL((const char *)nw_setting_disable_quic))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s QUIC is disabled, cannot create QUIC stream", buf, 0xCu);
        }

        goto LABEL_9;
      }
      v8 = nw_parameters_create();
      if (v8)
      {
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
        options = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        if (options)
        {
          v10 = v8[19].isa;
          v11 = v10;
          if (v10)
          {
            objc_storeStrong(v10 + 3, options);
            if (v3 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
              v3[2](v3, options);
            if (v5 != (void (**)(id, id))&__block_literal_global_86)
            {
              v12 = nw_quic_stream_copy_shared_connection_options(options);
              v5[2](v5, v12);

            }
            BYTE4(v8[11].isa) = 2;
            v8[12].isa = (Class)((unint64_t)v8[12].isa | 0x400000);
            v7 = v8;
LABEL_20:

LABEL_61:
            goto LABEL_62;
          }
          __nwlog_obj();
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          v53 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v64 = 0;
          if (__nwlog_fault(v53, &type, &v64))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v54 = objc_claimAutoreleasedReturnValue();
              v55 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)buf = 136446210;
                v67 = "nw_parameters_create_quic_stream";
                _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null stack", buf, 0xCu);
              }
            }
            else if (v64)
            {
              v60 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v54 = objc_claimAutoreleasedReturnValue();
              v61 = type;
              v62 = os_log_type_enabled(v54, type);
              if (v60)
              {
                if (v62)
                {
                  *(_DWORD *)buf = 136446466;
                  v67 = "nw_parameters_create_quic_stream";
                  v68 = 2082;
                  v69 = v60;
                  _os_log_impl(&dword_182FBE000, v54, v61, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v60);
                goto LABEL_147;
              }
              if (v62)
              {
                *(_DWORD *)buf = 136446210;
                v67 = "nw_parameters_create_quic_stream";
                _os_log_impl(&dword_182FBE000, v54, v61, "%{public}s called with null stack, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v54 = objc_claimAutoreleasedReturnValue();
              v63 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)buf = 136446210;
                v67 = "nw_parameters_create_quic_stream";
                _os_log_impl(&dword_182FBE000, v54, v63, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_147:
          if (v53)
            free(v53);
          v7 = 0;
          goto LABEL_20;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v67 = "nw_parameters_create_quic_stream";
        v18 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v64 = 0;
        if (__nwlog_fault(v18, &type, &v64))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v19 = (id)gLogObj;
            v20 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)buf = 136446210;
              v67 = "nw_parameters_create_quic_stream";
              _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s nw_quic_create_stream_options failed", buf, 0xCu);
            }
          }
          else if (v64)
          {
            v24 = __nw_create_backtrace_string();
            if (v24)
            {
              v25 = (char *)v24;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v26 = (id)gLogObj;
              v27 = type;
              if (os_log_type_enabled(v26, type))
              {
                *(_DWORD *)buf = 136446466;
                v67 = "nw_parameters_create_quic_stream";
                v68 = 2082;
                v69 = v25;
                _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s nw_quic_create_stream_options failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v25);
              if (!v18)
                goto LABEL_60;
              goto LABEL_59;
            }
            __nwlog_obj();
            v19 = objc_claimAutoreleasedReturnValue();
            v30 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)buf = 136446210;
              v67 = "nw_parameters_create_quic_stream";
              _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s nw_quic_create_stream_options failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v19 = (id)gLogObj;
            v29 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)buf = 136446210;
              v67 = "nw_parameters_create_quic_stream";
              _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s nw_quic_create_stream_options failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v18)
        {
LABEL_60:
          v7 = 0;
          goto LABEL_61;
        }
LABEL_59:
        free(v18);
        goto LABEL_60;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v67 = "nw_parameters_create_quic_stream";
      v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v64 = 0;
      if (__nwlog_fault(v14, &type, &v64))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_parameters_create_quic_stream";
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s nw_parameters_create failed", buf, 0xCu);
          }
        }
        else if (v64)
        {
          v21 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v22 = type;
          v23 = os_log_type_enabled(v15, type);
          if (v21)
          {
            if (v23)
            {
              *(_DWORD *)buf = 136446466;
              v67 = "nw_parameters_create_quic_stream";
              v68 = 2082;
              v69 = v21;
              _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v21);
            if (!v14)
              goto LABEL_51;
            goto LABEL_50;
          }
          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_parameters_create_quic_stream";
            _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v28 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v67 = "nw_parameters_create_quic_stream";
            _os_log_impl(&dword_182FBE000, v15, v28, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v14)
      {
LABEL_51:
        v7 = 0;
LABEL_62:

        goto LABEL_63;
      }
LABEL_50:
      free(v14);
      goto LABEL_51;
    }
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v67 = "nw_parameters_create_quic_stream";
    v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (__nwlog_fault(v33, &type, &v64))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v34, v41, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
        }
LABEL_133:

        goto LABEL_134;
      }
      if (!v64)
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v59 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v34, v59, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v50 = type;
      v51 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_182FBE000, v34, v50, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v51)
      {
        *(_DWORD *)buf = 136446466;
        v67 = "nw_parameters_create_quic_stream";
        v68 = 2082;
        v69 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v34, v50, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_103:

      free(backtrace_string);
      if (!v33)
        goto LABEL_9;
      goto LABEL_135;
    }
  }
  else
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v67 = "nw_parameters_create_quic_stream";
    v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (!__nwlog_fault(v33, &type, &v64))
      goto LABEL_134;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_parameters_create_quic_stream";
        _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s called with null configure_quic_stream", buf, 0xCu);
      }
      goto LABEL_133;
    }
    if (!v64)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v56 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_parameters_create_quic_stream";
        _os_log_impl(&dword_182FBE000, v34, v56, "%{public}s called with null configure_quic_stream, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_133;
    }
    v42 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    v43 = type;
    v44 = os_log_type_enabled(v34, type);
    if (!v42)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_parameters_create_quic_stream";
        _os_log_impl(&dword_182FBE000, v34, v43, "%{public}s called with null configure_quic_stream, no backtrace", buf, 0xCu);
      }
      goto LABEL_133;
    }
    if (v44)
    {
      *(_DWORD *)buf = 136446466;
      v67 = "nw_parameters_create_quic_stream";
      v68 = 2082;
      v69 = v42;
      _os_log_impl(&dword_182FBE000, v34, v43, "%{public}s called with null configure_quic_stream, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v42);
  }
LABEL_134:
  if (v33)
LABEL_135:
    free(v33);
LABEL_9:
  v7 = 0;
LABEL_63:

  return v7;
}

void sub_18353DAF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_quic(nw_parameters_configure_protocol_block_t configure_quic)
{
  nw_parameters_configure_protocol_block_t v1;
  void (**v2)(_QWORD, _QWORD);
  NSObject *v3;
  NSObject *v4;
  nw_parameters_t v5;
  NWConcrete_nw_protocol_options *options;
  id *v7;
  id *v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  void *v34;
  os_log_type_t v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *backtrace_string;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  _BOOL4 v43;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  os_log_type_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  os_log_type_t v54;
  char v55;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v1 = configure_quic;
  v2 = (void (**)(_QWORD, _QWORD))v1;
  if (v1)
  {
    if (v1 == &__block_literal_global_18950)
    {
      __nwlog_obj();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v58 = "nw_parameters_create_quic";
      v29 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v55 = 0;
      if (!__nwlog_fault(v29, &type, &v55))
        goto LABEL_113;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
        }
        goto LABEL_112;
      }
      if (!v55)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v49 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_182FBE000, v30, v49, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      v41 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_182FBE000, v30, v40, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
        }
        goto LABEL_112;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        v58 = "nw_parameters_create_quic";
        v59 = 2082;
        v60 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v40, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_88;
    }
    if (v1 != &__block_literal_global_86)
    {
      if (networkd_settings_get_BOOL((const char *)nw_setting_disable_quic))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v3 = (id)gLogObj;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s QUIC is disabled, cannot create QUIC parameters", buf, 0xCu);
        }

        goto LABEL_8;
      }
      v5 = nw_parameters_create();
      if (v5)
      {
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
        options = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        if (options)
        {
          v7 = v5[19].isa;
          v8 = v7;
          if (v7)
          {
            objc_storeStrong(v7 + 3, options);
            ((void (**)(_QWORD, NWConcrete_nw_protocol_options *))v2)[2](v2, options);
            BYTE4(v5[11].isa) = 2;
            v5[12].isa = (Class)((unint64_t)v5[12].isa | 0x400000);
            v4 = v5;
LABEL_15:

LABEL_56:
            goto LABEL_57;
          }
          __nwlog_obj();
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_quic";
          v45 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v55 = 0;
          if (__nwlog_fault(v45, &type, &v55))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v46 = objc_claimAutoreleasedReturnValue();
              v47 = type;
              if (os_log_type_enabled(v46, type))
              {
                *(_DWORD *)buf = 136446210;
                v58 = "nw_parameters_create_quic";
                _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null stack", buf, 0xCu);
              }
            }
            else if (v55)
            {
              v51 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v46 = objc_claimAutoreleasedReturnValue();
              v52 = type;
              v53 = os_log_type_enabled(v46, type);
              if (v51)
              {
                if (v53)
                {
                  *(_DWORD *)buf = 136446466;
                  v58 = "nw_parameters_create_quic";
                  v59 = 2082;
                  v60 = v51;
                  _os_log_impl(&dword_182FBE000, v46, v52, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v51);
                goto LABEL_126;
              }
              if (v53)
              {
                *(_DWORD *)buf = 136446210;
                v58 = "nw_parameters_create_quic";
                _os_log_impl(&dword_182FBE000, v46, v52, "%{public}s called with null stack, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v46 = objc_claimAutoreleasedReturnValue();
              v54 = type;
              if (os_log_type_enabled(v46, type))
              {
                *(_DWORD *)buf = 136446210;
                v58 = "nw_parameters_create_quic";
                _os_log_impl(&dword_182FBE000, v46, v54, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_126:
          if (v45)
            free(v45);
          v4 = 0;
          goto LABEL_15;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_quic";
        v14 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v55 = 0;
        if (__nwlog_fault(v14, &type, &v55))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v15 = (id)gLogObj;
            v16 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)buf = 136446210;
              v58 = "nw_parameters_create_quic";
              _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s nw_quic_create_stream_options failed", buf, 0xCu);
            }
          }
          else if (v55)
          {
            v20 = __nw_create_backtrace_string();
            if (v20)
            {
              v21 = (char *)v20;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v22 = (id)gLogObj;
              v23 = type;
              if (os_log_type_enabled(v22, type))
              {
                *(_DWORD *)buf = 136446466;
                v58 = "nw_parameters_create_quic";
                v59 = 2082;
                v60 = v21;
                _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s nw_quic_create_stream_options failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v21);
              if (!v14)
                goto LABEL_55;
              goto LABEL_54;
            }
            __nwlog_obj();
            v15 = objc_claimAutoreleasedReturnValue();
            v26 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)buf = 136446210;
              v58 = "nw_parameters_create_quic";
              _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s nw_quic_create_stream_options failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v15 = (id)gLogObj;
            v25 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)buf = 136446210;
              v58 = "nw_parameters_create_quic";
              _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s nw_quic_create_stream_options failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v14)
        {
LABEL_55:
          v4 = 0;
          goto LABEL_56;
        }
LABEL_54:
        free(v14);
        goto LABEL_55;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v58 = "nw_parameters_create_quic";
      v10 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v55 = 0;
      if (__nwlog_fault(v10, &type, &v55))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            v58 = "nw_parameters_create_quic";
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s nw_parameters_create failed", buf, 0xCu);
          }
        }
        else if (v55)
        {
          v17 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v18 = type;
          v19 = os_log_type_enabled(v11, type);
          if (v17)
          {
            if (v19)
            {
              *(_DWORD *)buf = 136446466;
              v58 = "nw_parameters_create_quic";
              v59 = 2082;
              v60 = v17;
              _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v17);
            if (!v10)
              goto LABEL_46;
            goto LABEL_45;
          }
          if (v19)
          {
            *(_DWORD *)buf = 136446210;
            v58 = "nw_parameters_create_quic";
            _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v24 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            v58 = "nw_parameters_create_quic";
            _os_log_impl(&dword_182FBE000, v11, v24, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v10)
      {
LABEL_46:
        v4 = 0;
LABEL_57:

        goto LABEL_58;
      }
LABEL_45:
      free(v10);
      goto LABEL_46;
    }
    __nwlog_obj();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_parameters_create_quic";
    v29 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (__nwlog_fault(v29, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration))", buf, 0xCu);
        }
LABEL_112:

        goto LABEL_113;
      }
      if (!v55)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v50 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_182FBE000, v30, v50, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      v43 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v58 = "nw_parameters_create_quic";
          _os_log_impl(&dword_182FBE000, v30, v42, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), no backtrace", buf, 0xCu);
        }
        goto LABEL_112;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        v58 = "nw_parameters_create_quic";
        v59 = 2082;
        v60 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v42, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_88:

      free(backtrace_string);
      if (!v29)
        goto LABEL_8;
      goto LABEL_114;
    }
  }
  else
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_parameters_create_quic";
    v29 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_113;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_quic";
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null configure_quic", buf, 0xCu);
      }
      goto LABEL_112;
    }
    if (!v55)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_quic";
        _os_log_impl(&dword_182FBE000, v30, v48, "%{public}s called with null configure_quic, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_112;
    }
    v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v30 = objc_claimAutoreleasedReturnValue();
    v37 = type;
    v38 = os_log_type_enabled(v30, type);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_parameters_create_quic";
        _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null configure_quic, no backtrace", buf, 0xCu);
      }
      goto LABEL_112;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      v58 = "nw_parameters_create_quic";
      v59 = 2082;
      v60 = v36;
      _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null configure_quic, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v36);
  }
LABEL_113:
  if (v29)
LABEL_114:
    free(v29);
LABEL_8:
  v4 = 0;
LABEL_58:

  return v4;
}

void sub_18353EA10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_parameters_set_migrating_peer_to_peer(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_DWORD *)(*((_QWORD *)v1 + 13) + 103) = 2;
    *(_WORD *)(*((_QWORD *)v1 + 13) + 108) |= 0x20u;
    *((_QWORD *)v1 + 12) |= 0x10000004000uLL;
    goto LABEL_3;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_parameters_set_migrating_peer_to_peer";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_set_migrating_peer_to_peer";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_parameters_set_migrating_peer_to_peer";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_set_migrating_peer_to_peer";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parameters_set_migrating_peer_to_peer";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v4)
    free(v4);
LABEL_3:

}

void nw_parameters_set_local_only(nw_parameters_t parameters, BOOL local_only)
{
  _BOOL4 v2;
  nw_parameters_t v3;
  nw_parameters_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v2 = local_only;
  v20 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (v3)
  {
    v5 = 0x4000;
    if (!v2)
      v5 = 0;
    v3[12].isa = (Class)((unint64_t)v3[12].isa & 0xFFFFFFFFFFFFBFFFLL | v5);
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_local_only";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_local_only";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_local_only";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_local_only";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_local_only";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_stricter_path_scoping(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x10000000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFEFFFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_stricter_path_scoping";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_stricter_path_scoping";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_stricter_path_scoping";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_stricter_path_scoping";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_stricter_path_scoping";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

nw_parameters_t nw_parameters_create_peer_to_peer_migrating_quic(void *a1)
{
  id v1;
  void *v2;
  nw_parameters_t quic;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v6, &type, &v23))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null configure_quic", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (!v23)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_182FBE000, v7, v20, "%{public}s called with null configure_quic, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    v15 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null configure_quic, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null configure_quic, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(backtrace_string);
    goto LABEL_54;
  }
  if (v1 == &__block_literal_global_18950)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v6, &type, &v23))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (!v23)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_182FBE000, v7, v21, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (v1 != &__block_literal_global_86)
  {
    quic = nw_parameters_create_quic(v1);
    nw_parameters_set_migrating_peer_to_peer(quic);
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v6, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration))", buf, 0xCu);
      }
LABEL_53:

      goto LABEL_54;
    }
    if (!v23)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_182FBE000, v7, v22, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
LABEL_54:
  if (v6)
    free(v6);
  quic = 0;
LABEL_5:

  return quic;
}

void sub_18353F90C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSObject *nw_parameters_create_quic_stream_with_tls_fallback(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  void (**v10)(id, NWConcrete_nw_protocol_options *);
  void (**v11)(id, id);
  void (**v12)(id, NWConcrete_nw_protocol_options *);
  nw_parameters_t v13;
  void *v14;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_options *v16;
  NWConcrete_nw_protocol_options *v17;
  id *v18;
  NWConcrete_nw_protocol_options *v19;
  NWConcrete_nw_protocol_transform *v20;
  NWConcrete_nw_protocol_transform *v21;
  NWConcrete_nw_protocol_transform *v22;
  id *v23;
  id v24;
  NWConcrete_nw_protocol_transform *v25;
  NWConcrete_nw_protocol_transform *v26;
  NWConcrete_nw_protocol_transform *v27;
  NWConcrete_nw_protocol_transform *v28;
  NWConcrete_nw_protocol_options *v29;
  NWConcrete_nw_protocol_transform *v30;
  _BOOL8 v31;
  Class isa;
  NSObject *v33;
  id v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  id v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  id v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  id v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  const char *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  os_log_type_t v62;
  id v63;
  char *v64;
  NSObject *v65;
  os_log_type_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  os_log_type_t v71;
  id v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  _BOOL4 v79;
  os_log_type_t v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  os_log_type_t v85;
  os_log_type_t v86;
  os_log_type_t v87;
  os_log_type_t v88;
  void (**v89)(id, NWConcrete_nw_protocol_options *);
  void *v91;
  char *v92;
  NSObject *v93;
  os_log_type_t v94;
  void *v95;
  os_log_type_t v96;
  void *v97;
  os_log_type_t v98;
  void *v99;
  os_log_type_t v100;
  void *v101;
  os_log_type_t v102;
  void *v103;
  os_log_type_t v104;
  void *v105;
  os_log_type_t v106;
  char *backtrace_string;
  NSObject *v108;
  os_log_type_t v109;
  _BOOL4 v110;
  os_log_type_t v111;
  _BOOL4 v112;
  os_log_type_t v113;
  _BOOL4 v114;
  os_log_type_t v115;
  _BOOL4 v116;
  os_log_type_t v117;
  _BOOL4 v118;
  os_log_type_t v119;
  _BOOL4 v120;
  os_log_type_t v121;
  _BOOL4 v122;
  void *v123;
  char *v124;
  NSObject *v125;
  os_log_type_t v126;
  os_log_type_t v127;
  os_log_type_t v128;
  os_log_type_t v129;
  os_log_type_t v130;
  os_log_type_t v131;
  os_log_type_t v132;
  os_log_type_t v133;
  char *v134;
  NSObject *v135;
  os_log_type_t v136;
  _BOOL4 v137;
  os_log_type_t v138;
  NSObject *log;
  id *v140;
  NWConcrete_nw_protocol_options *v141;
  id v142;
  NWConcrete_nw_protocol_options *v143;
  void *v144;
  id v145;
  void (**v146)(id, NWConcrete_nw_protocol_options *);
  char v147;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v150;
  __int16 v151;
  char *v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v145 = a4;
  v12 = a5;
  v146 = v12;
  v144 = v9;
  if (v9)
  {
    if (v12)
    {
      if (v10)
      {
        if (v11)
        {
          if (v10 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
          {
            __nwlog_obj();
            v101 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            v92 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v147 = 0;
            if (__nwlog_fault(v92, &type, &v147))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v93 = objc_claimAutoreleasedReturnValue();
                v102 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v93, v102, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
                }
                goto LABEL_255;
              }
              if (!v147)
              {
                __nwlog_obj();
                v93 = objc_claimAutoreleasedReturnValue();
                v131 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v93, v131, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_255;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v108 = objc_claimAutoreleasedReturnValue();
              v117 = type;
              v118 = os_log_type_enabled(v108, type);
              if (backtrace_string)
              {
                if (v118)
                {
                  *(_DWORD *)buf = 136446466;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  v151 = 2082;
                  v152 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v108, v117, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
                }
                goto LABEL_226;
              }
              if (v118)
              {
                *(_DWORD *)buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_182FBE000, v108, v117, "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
              }
              goto LABEL_281;
            }
          }
          else if (v11 == (void (**)(id, id))&__block_literal_global_18950)
          {
            __nwlog_obj();
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            v92 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v147 = 0;
            if (__nwlog_fault(v92, &type, &v147))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v93 = objc_claimAutoreleasedReturnValue();
                v104 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v93, v104, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
                }
                goto LABEL_255;
              }
              if (!v147)
              {
                __nwlog_obj();
                v93 = objc_claimAutoreleasedReturnValue();
                v132 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v93, v132, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_255;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v108 = objc_claimAutoreleasedReturnValue();
              v119 = type;
              v120 = os_log_type_enabled(v108, type);
              if (backtrace_string)
              {
                if (v120)
                {
                  *(_DWORD *)buf = 136446466;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  v151 = 2082;
                  v152 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v108, v119, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
                }
                goto LABEL_226;
              }
              if (v120)
              {
                *(_DWORD *)buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_182FBE000, v108, v119, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
              }
LABEL_281:

            }
          }
          else
          {
            if (v12 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
            {
              v13 = nw_parameters_create();
              if (v13)
              {
                v14 = (void *)nw_protocol_boringssl_copy_definition();
                options = nw_protocol_create_options(v14);

                if (options)
                {
                  v16 = options;
                  v143 = v16;
                  if (v9 != &__block_literal_global_88)
                    (*((void (**)(id, NWConcrete_nw_protocol_options *))v9 + 2))(v9, v16);
                  if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
                    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
                  v17 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
                  if (v17)
                  {
                    v18 = v13[19].isa;
                    v140 = v18;
                    if (v18)
                    {
                      objc_storeStrong(v18 + 3, v17);
                      if (v10 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
                        v10[2](v10, v17);
                      v142 = nw_quic_stream_copy_shared_connection_options(v17);
                      nw_quic_connection_set_sec_protocol_options(v142, v143);
                      if (v11 != (void (**)(id, id))&__block_literal_global_86)
                        v11[2](v11, v142);
                      if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
                        dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
                      v19 = nw_protocol_create_options((void *)g_tcp_definition);
                      v141 = v19;
                      if (v19)
                      {
                        if (v146 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
                          v146[2](v146, v19);
                        v20 = objc_alloc_init(NWConcrete_nw_protocol_transform);
                        if (v20)
                        {
                          v21 = objc_alloc_init(NWConcrete_nw_protocol_transform);
                          v22 = v21;
                          if (v21)
                          {
                            if (v145)
                            {
                              v23 = v21;
                              v24 = v145;
                              objc_storeStrong(v23 + 4, a4);

                            }
                            v25 = v20;
                            *((_BYTE *)v25 + 8) |= 2u;

                            nw_protocol_transform_append_protocol(v25, 3, v17);
                            v26 = v25;
                            v26->fallback_mode = 2;

                            v27 = v26;
                            *((_BYTE *)v25 + 8) |= 0x10u;

                            v28 = v22;
                            *((_BYTE *)v28 + 8) |= 2u;

                            v29 = nw_protocol_options_copy(v143);
                            nw_protocol_transform_append_protocol(v28, 4, v29);

                            nw_protocol_transform_append_protocol(v28, 3, v141);
                            v30 = v28;
                            *((_BYTE *)v28 + 8) |= 0x10u;

                            v31 = nw_array_create();
                            isa = v13[20].isa;
                            v13[20].isa = (Class)v31;

                            nw_array_append((uint64_t)v13[20].isa, v27);
                            nw_array_append((uint64_t)v13[20].isa, v30);
                            BYTE4(v13[11].isa) = 2;
                            v33 = v13;
LABEL_149:

                            goto LABEL_150;
                          }
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          v72 = (id)gLogObj;
                          *(_DWORD *)buf = 136446210;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          v73 = (char *)_os_log_send_and_compose_impl();

                          type = OS_LOG_TYPE_ERROR;
                          v147 = 0;
                          if (__nwlog_fault(v73, &type, &v147))
                          {
                            if (type == OS_LOG_TYPE_FAULT)
                            {
                              __nwlog_obj();
                              v74 = objc_claimAutoreleasedReturnValue();
                              v75 = type;
                              if (os_log_type_enabled(v74, type))
                              {
                                *(_DWORD *)buf = 136446210;
                                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                                _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                              }
                            }
                            else
                            {
                              if (v147)
                              {
                                v81 = (char *)__nw_create_backtrace_string();
                                __nwlog_obj();
                                v82 = objc_claimAutoreleasedReturnValue();
                                v83 = type;
                                log = v82;
                                v84 = os_log_type_enabled(v82, type);
                                if (v81)
                                {
                                  if (v84)
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                                    v151 = 2082;
                                    v152 = v81;
                                    _os_log_impl(&dword_182FBE000, log, v83, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                                  }

                                  free(v81);
                                }
                                else
                                {
                                  if (v84)
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                                    _os_log_impl(&dword_182FBE000, log, v83, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
                                  }

                                }
                                goto LABEL_146;
                              }
                              __nwlog_obj();
                              v74 = objc_claimAutoreleasedReturnValue();
                              v88 = type;
                              if (os_log_type_enabled(v74, type))
                              {
                                *(_DWORD *)buf = 136446210;
                                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                                _os_log_impl(&dword_182FBE000, v74, v88, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                              }
                            }

                          }
LABEL_146:
                          if (v73)
                            free(v73);
                          v33 = 0;
                          goto LABEL_149;
                        }
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v63 = (id)gLogObj;
                        *(_DWORD *)buf = 136446210;
                        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        v64 = (char *)_os_log_send_and_compose_impl();

                        type = OS_LOG_TYPE_ERROR;
                        v147 = 0;
                        if (__nwlog_fault(v64, &type, &v147))
                        {
                          if (type == OS_LOG_TYPE_FAULT)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            v65 = (id)gLogObj;
                            v66 = type;
                            if (os_log_type_enabled(v65, type))
                            {
                              *(_DWORD *)buf = 136446210;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                            }
LABEL_75:

                            goto LABEL_137;
                          }
                          if (!v147)
                          {
                            __nwlog_obj();
                            v65 = objc_claimAutoreleasedReturnValue();
                            v87 = type;
                            if (os_log_type_enabled(v65, type))
                            {
                              *(_DWORD *)buf = 136446210;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              _os_log_impl(&dword_182FBE000, v65, v87, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                            }
                            goto LABEL_75;
                          }
                          v76 = (char *)__nw_create_backtrace_string();
                          __nwlog_obj();
                          v77 = objc_claimAutoreleasedReturnValue();
                          v78 = type;
                          v79 = os_log_type_enabled(v77, type);
                          if (v76)
                          {
                            if (v79)
                            {
                              *(_DWORD *)buf = 136446466;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              v151 = 2082;
                              v152 = v76;
                              _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                            }

                            free(v76);
                            if (!v64)
                              goto LABEL_139;
                            goto LABEL_138;
                          }
                          if (v79)
                          {
                            *(_DWORD *)buf = 136446210;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
                          }

                        }
LABEL_137:
                        if (!v64)
                        {
LABEL_139:
                          v33 = 0;
LABEL_150:

                          goto LABEL_151;
                        }
LABEL_138:
                        free(v64);
                        goto LABEL_139;
                      }
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v54 = (id)gLogObj;
                      *(_DWORD *)buf = 136446210;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      v55 = (char *)_os_log_send_and_compose_impl();

                      type = OS_LOG_TYPE_ERROR;
                      v147 = 0;
                      if (__nwlog_fault(v55, &type, &v147))
                      {
                        if (type == OS_LOG_TYPE_FAULT)
                        {
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          v56 = (id)gLogObj;
                          v57 = type;
                          if (os_log_type_enabled(v56, type))
                          {
                            *(_DWORD *)buf = 136446210;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s nw_tcp_create_options failed", buf, 0xCu);
                          }
LABEL_61:

                          goto LABEL_128;
                        }
                        if (!v147)
                        {
                          __nwlog_obj();
                          v56 = objc_claimAutoreleasedReturnValue();
                          v86 = type;
                          if (os_log_type_enabled(v56, type))
                          {
                            *(_DWORD *)buf = 136446210;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            _os_log_impl(&dword_182FBE000, v56, v86, "%{public}s nw_tcp_create_options failed, backtrace limit exceeded", buf, 0xCu);
                          }
                          goto LABEL_61;
                        }
                        v67 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        v68 = objc_claimAutoreleasedReturnValue();
                        v69 = type;
                        v70 = os_log_type_enabled(v68, type);
                        if (v67)
                        {
                          if (v70)
                          {
                            *(_DWORD *)buf = 136446466;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            v151 = 2082;
                            v152 = v67;
                            _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s nw_tcp_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
                          }

                          free(v67);
                          if (!v55)
                            goto LABEL_130;
                          goto LABEL_129;
                        }
                        if (v70)
                        {
                          *(_DWORD *)buf = 136446210;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s nw_tcp_create_options failed, no backtrace", buf, 0xCu);
                        }

                      }
LABEL_128:
                      if (!v55)
                      {
LABEL_130:
                        v33 = 0;
LABEL_151:

LABEL_152:
                        goto LABEL_153;
                      }
LABEL_129:
                      free(v55);
                      goto LABEL_130;
                    }
                    __nwlog_obj();
                    v123 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    v124 = (char *)_os_log_send_and_compose_impl();

                    type = OS_LOG_TYPE_ERROR;
                    v147 = 0;
                    if (__nwlog_fault(v124, &type, &v147))
                    {
                      if (type == OS_LOG_TYPE_FAULT)
                      {
                        __nwlog_obj();
                        v125 = objc_claimAutoreleasedReturnValue();
                        v126 = type;
                        if (os_log_type_enabled(v125, type))
                        {
                          *(_DWORD *)buf = 136446210;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          _os_log_impl(&dword_182FBE000, v125, v126, "%{public}s called with null stack", buf, 0xCu);
                        }
                      }
                      else
                      {
                        if (v147)
                        {
                          v134 = (char *)__nw_create_backtrace_string();
                          __nwlog_obj();
                          v135 = objc_claimAutoreleasedReturnValue();
                          v136 = type;
                          v137 = os_log_type_enabled(v135, type);
                          if (v134)
                          {
                            if (v137)
                            {
                              *(_DWORD *)buf = 136446466;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              v151 = 2082;
                              v152 = v134;
                              _os_log_impl(&dword_182FBE000, v135, v136, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
                            }

                            free(v134);
                          }
                          else
                          {
                            if (v137)
                            {
                              *(_DWORD *)buf = 136446210;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              _os_log_impl(&dword_182FBE000, v135, v136, "%{public}s called with null stack, no backtrace", buf, 0xCu);
                            }

                          }
                          goto LABEL_288;
                        }
                        __nwlog_obj();
                        v125 = objc_claimAutoreleasedReturnValue();
                        v138 = type;
                        if (os_log_type_enabled(v125, type))
                        {
                          *(_DWORD *)buf = 136446210;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          _os_log_impl(&dword_182FBE000, v125, v138, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
                        }
                      }

                    }
LABEL_288:
                    if (v124)
                      free(v124);
                    v33 = 0;
                    goto LABEL_152;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v46 = (id)gLogObj;
                  *(_DWORD *)buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  v47 = (char *)_os_log_send_and_compose_impl();

                  type = OS_LOG_TYPE_ERROR;
                  v147 = 0;
                  if (__nwlog_fault(v47, &type, &v147))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v48 = (id)gLogObj;
                      v49 = type;
                      if (os_log_type_enabled(v48, type))
                      {
                        *(_DWORD *)buf = 136446210;
                        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s nw_quic_create_stream_options failed", buf, 0xCu);
                      }
                    }
                    else if (v147)
                    {
                      v58 = __nw_create_backtrace_string();
                      if (v58)
                      {
                        v59 = (char *)v58;
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v60 = (id)gLogObj;
                        v61 = type;
                        if (os_log_type_enabled(v60, type))
                        {
                          *(_DWORD *)buf = 136446466;
                          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          v151 = 2082;
                          v152 = v59;
                          _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s nw_quic_create_stream_options failed, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v59);
                        if (!v47)
                          goto LABEL_121;
                        goto LABEL_120;
                      }
                      __nwlog_obj();
                      v48 = objc_claimAutoreleasedReturnValue();
                      v85 = type;
                      if (os_log_type_enabled(v48, type))
                      {
                        *(_DWORD *)buf = 136446210;
                        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        _os_log_impl(&dword_182FBE000, v48, v85, "%{public}s nw_quic_create_stream_options failed, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v48 = (id)gLogObj;
                      v80 = type;
                      if (os_log_type_enabled(v48, type))
                      {
                        *(_DWORD *)buf = 136446210;
                        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        _os_log_impl(&dword_182FBE000, v48, v80, "%{public}s nw_quic_create_stream_options failed, backtrace limit exceeded", buf, 0xCu);
                      }
                    }

                  }
                  if (!v47)
                  {
LABEL_121:
                    v33 = 0;
LABEL_153:

                    goto LABEL_154;
                  }
LABEL_120:
                  free(v47);
                  goto LABEL_121;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v38 = (id)gLogObj;
                *(_DWORD *)buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                v39 = (char *)_os_log_send_and_compose_impl();

                type = OS_LOG_TYPE_ERROR;
                v147 = 0;
                if (__nwlog_fault(v39, &type, &v147))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v40 = (id)gLogObj;
                    v41 = type;
                    if (os_log_type_enabled(v40, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s nw_tls_create_options failed", buf, 0xCu);
                    }
LABEL_39:

                    goto LABEL_105;
                  }
                  if (!v147)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v40 = (id)gLogObj;
                    v71 = type;
                    if (os_log_type_enabled(v40, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      _os_log_impl(&dword_182FBE000, v40, v71, "%{public}s nw_tls_create_options failed, backtrace limit exceeded", buf, 0xCu);
                    }
                    goto LABEL_39;
                  }
                  v50 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v51 = (id)gLogObj;
                  v52 = type;
                  v53 = os_log_type_enabled(v51, type);
                  if (v50)
                  {
                    if (v53)
                    {
                      *(_DWORD *)buf = 136446466;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      v151 = 2082;
                      v152 = v50;
                      _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s nw_tls_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v50);
                    if (!v39)
                      goto LABEL_107;
                    goto LABEL_106;
                  }
                  if (v53)
                  {
                    *(_DWORD *)buf = 136446210;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s nw_tls_create_options failed, no backtrace", buf, 0xCu);
                  }

                }
LABEL_105:
                if (!v39)
                {
LABEL_107:
                  v33 = 0;
LABEL_154:

                  goto LABEL_155;
                }
LABEL_106:
                free(v39);
                goto LABEL_107;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v34 = (id)gLogObj;
              *(_DWORD *)buf = 136446210;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              v35 = (char *)_os_log_send_and_compose_impl();

              type = OS_LOG_TYPE_ERROR;
              v147 = 0;
              if (__nwlog_fault(v35, &type, &v147))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v36 = (id)gLogObj;
                  v37 = type;
                  if (os_log_type_enabled(v36, type))
                  {
                    *(_DWORD *)buf = 136446210;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s nw_parameters_create failed", buf, 0xCu);
                  }
LABEL_34:

                  goto LABEL_85;
                }
                if (!v147)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v36 = (id)gLogObj;
                  v62 = type;
                  if (os_log_type_enabled(v36, type))
                  {
                    *(_DWORD *)buf = 136446210;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    _os_log_impl(&dword_182FBE000, v36, v62, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
                  }
                  goto LABEL_34;
                }
                v42 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v43 = (id)gLogObj;
                v44 = type;
                v45 = os_log_type_enabled(v43, type);
                if (v42)
                {
                  if (v45)
                  {
                    *(_DWORD *)buf = 136446466;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    v151 = 2082;
                    v152 = v42;
                    _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v42);
                  if (!v35)
                    goto LABEL_87;
                  goto LABEL_86;
                }
                if (v45)
                {
                  *(_DWORD *)buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
                }

              }
LABEL_85:
              if (!v35)
              {
LABEL_87:
                v33 = 0;
LABEL_155:

                v89 = v146;
                goto LABEL_156;
              }
LABEL_86:
              free(v35);
              goto LABEL_87;
            }
            __nwlog_obj();
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            v92 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v147 = 0;
            if (__nwlog_fault(v92, &type, &v147))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v93 = objc_claimAutoreleasedReturnValue();
                v106 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v93, v106, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
                }
LABEL_255:

                goto LABEL_227;
              }
              if (!v147)
              {
                __nwlog_obj();
                v93 = objc_claimAutoreleasedReturnValue();
                v133 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v93, v133, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_255;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v108 = objc_claimAutoreleasedReturnValue();
              v121 = type;
              v122 = os_log_type_enabled(v108, type);
              if (backtrace_string)
              {
                if (v122)
                {
                  *(_DWORD *)buf = 136446466;
                  v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  v151 = 2082;
                  v152 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v108, v121, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
                }
LABEL_226:

                free(backtrace_string);
                goto LABEL_227;
              }
              if (v122)
              {
                *(_DWORD *)buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_182FBE000, v108, v121, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
              }
              goto LABEL_281;
            }
          }
        }
        else
        {
          __nwlog_obj();
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          v92 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v147 = 0;
          if (__nwlog_fault(v92, &type, &v147))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v93 = objc_claimAutoreleasedReturnValue();
              v100 = type;
              if (os_log_type_enabled(v93, type))
              {
                *(_DWORD *)buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_182FBE000, v93, v100, "%{public}s called with null configure_quic_connection", buf, 0xCu);
              }
              goto LABEL_255;
            }
            if (!v147)
            {
              __nwlog_obj();
              v93 = objc_claimAutoreleasedReturnValue();
              v130 = type;
              if (os_log_type_enabled(v93, type))
              {
                *(_DWORD *)buf = 136446210;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl(&dword_182FBE000, v93, v130, "%{public}s called with null configure_quic_connection, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_255;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v108 = objc_claimAutoreleasedReturnValue();
            v115 = type;
            v116 = os_log_type_enabled(v108, type);
            if (backtrace_string)
            {
              if (v116)
              {
                *(_DWORD *)buf = 136446466;
                v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                v151 = 2082;
                v152 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v108, v115, "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s", buf, 0x16u);
              }
              goto LABEL_226;
            }
            if (v116)
            {
              *(_DWORD *)buf = 136446210;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              _os_log_impl(&dword_182FBE000, v108, v115, "%{public}s called with null configure_quic_connection, no backtrace", buf, 0xCu);
            }
            goto LABEL_281;
          }
        }
      }
      else
      {
        __nwlog_obj();
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
        v92 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v147 = 0;
        if (__nwlog_fault(v92, &type, &v147))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v93 = objc_claimAutoreleasedReturnValue();
            v98 = type;
            if (os_log_type_enabled(v93, type))
            {
              *(_DWORD *)buf = 136446210;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              _os_log_impl(&dword_182FBE000, v93, v98, "%{public}s called with null configure_quic_stream", buf, 0xCu);
            }
            goto LABEL_255;
          }
          if (!v147)
          {
            __nwlog_obj();
            v93 = objc_claimAutoreleasedReturnValue();
            v129 = type;
            if (os_log_type_enabled(v93, type))
            {
              *(_DWORD *)buf = 136446210;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              _os_log_impl(&dword_182FBE000, v93, v129, "%{public}s called with null configure_quic_stream, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_255;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v108 = objc_claimAutoreleasedReturnValue();
          v113 = type;
          v114 = os_log_type_enabled(v108, type);
          if (backtrace_string)
          {
            if (v114)
            {
              *(_DWORD *)buf = 136446466;
              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
              v151 = 2082;
              v152 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v108, v113, "%{public}s called with null configure_quic_stream, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_226;
          }
          if (v114)
          {
            *(_DWORD *)buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            _os_log_impl(&dword_182FBE000, v108, v113, "%{public}s called with null configure_quic_stream, no backtrace", buf, 0xCu);
          }
          goto LABEL_281;
        }
      }
    }
    else
    {
      __nwlog_obj();
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
      v92 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v147 = 0;
      if (__nwlog_fault(v92, &type, &v147))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v93 = objc_claimAutoreleasedReturnValue();
          v96 = type;
          if (os_log_type_enabled(v93, type))
          {
            *(_DWORD *)buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            _os_log_impl(&dword_182FBE000, v93, v96, "%{public}s called with null configure_tcp_fallback", buf, 0xCu);
          }
          goto LABEL_255;
        }
        if (!v147)
        {
          __nwlog_obj();
          v93 = objc_claimAutoreleasedReturnValue();
          v128 = type;
          if (os_log_type_enabled(v93, type))
          {
            *(_DWORD *)buf = 136446210;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            _os_log_impl(&dword_182FBE000, v93, v128, "%{public}s called with null configure_tcp_fallback, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_255;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v108 = objc_claimAutoreleasedReturnValue();
        v111 = type;
        v112 = os_log_type_enabled(v108, type);
        if (backtrace_string)
        {
          if (v112)
          {
            *(_DWORD *)buf = 136446466;
            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            v151 = 2082;
            v152 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v108, v111, "%{public}s called with null configure_tcp_fallback, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_226;
        }
        if (v112)
        {
          *(_DWORD *)buf = 136446210;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          _os_log_impl(&dword_182FBE000, v108, v111, "%{public}s called with null configure_tcp_fallback, no backtrace", buf, 0xCu);
        }
        goto LABEL_281;
      }
    }
  }
  else
  {
    __nwlog_obj();
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
    v92 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v147 = 0;
    if (__nwlog_fault(v92, &type, &v147))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v93 = objc_claimAutoreleasedReturnValue();
        v94 = type;
        if (os_log_type_enabled(v93, type))
        {
          *(_DWORD *)buf = 136446210;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          _os_log_impl(&dword_182FBE000, v93, v94, "%{public}s called with null configure_security", buf, 0xCu);
        }
        goto LABEL_255;
      }
      if (!v147)
      {
        __nwlog_obj();
        v93 = objc_claimAutoreleasedReturnValue();
        v127 = type;
        if (os_log_type_enabled(v93, type))
        {
          *(_DWORD *)buf = 136446210;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          _os_log_impl(&dword_182FBE000, v93, v127, "%{public}s called with null configure_security, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_255;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v108 = objc_claimAutoreleasedReturnValue();
      v109 = type;
      v110 = os_log_type_enabled(v108, type);
      if (backtrace_string)
      {
        if (v110)
        {
          *(_DWORD *)buf = 136446466;
          v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
          v151 = 2082;
          v152 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v108, v109, "%{public}s called with null configure_security, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_226;
      }
      if (v110)
      {
        *(_DWORD *)buf = 136446210;
        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v108, v109, "%{public}s called with null configure_security, no backtrace", buf, 0xCu);
      }
      goto LABEL_281;
    }
  }
LABEL_227:
  v89 = v146;
  if (v92)
    free(v92);
  v33 = 0;
LABEL_156:

  return v33;
}

void sub_183541B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

NSObject *nw_parameters_create_secure_tcp_or_quic_stream(void *a1, void *a2, void *a3, void *a4)
{
  return nw_parameters_create_quic_stream_with_tls_fallback(a1, a2, a3, 0, a4);
}

nw_parameters_t nw_parameters_create_custom_ip(uint8_t custom_ip_protocol_number, nw_parameters_configure_protocol_block_t configure_ip)
{
  void (**v3)(nw_parameters_configure_protocol_block_t, _QWORD);
  void (**v4)(nw_parameters_configure_protocol_block_t, _QWORD);
  nw_parameters_t v5;
  NWConcrete_nw_protocol_options *options;
  id *v7;
  id *v8;
  NSObject *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  char v49;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  char *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = configure_ip;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_parameters_create_custom_ip";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v28, &type, &v49))
      goto LABEL_96;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null configure_ip", buf, 0xCu);
      }
    }
    else if (v49)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      v35 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "nw_parameters_create_custom_ip";
          v53 = 2082;
          v54 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null configure_ip, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v28)
          goto LABEL_98;
        goto LABEL_97;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null configure_ip, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_182FBE000, v29, v46, "%{public}s called with null configure_ip, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_95;
  }
  if (v3 == (void (**)(nw_parameters_configure_protocol_block_t, _QWORD))&__block_literal_global_18950)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_parameters_create_custom_ip";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v28, &type, &v49))
      goto LABEL_96;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v49)
    {
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v29, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "nw_parameters_create_custom_ip";
          v53 = 2082;
          v54 = v36;
          _os_log_impl(&dword_182FBE000, v29, v37, "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
LABEL_96:
        if (!v28)
        {
LABEL_98:
          v9 = 0;
          goto LABEL_52;
        }
LABEL_97:
        free(v28);
        goto LABEL_98;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_182FBE000, v29, v37, "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_182FBE000, v29, v47, "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_95:

    goto LABEL_96;
  }
  v5 = nw_parameters_create();
  if (v5)
  {
    options = nw_custom_ip_create_options(custom_ip_protocol_number);
    if (options)
    {
      v7 = v5[19].isa;
      v8 = v7;
      if (v7)
      {
        objc_storeStrong(v7 + 3, options);
        if (v4 != (void (**)(nw_parameters_configure_protocol_block_t, _QWORD))&__block_literal_global_86)
          ((void (**)(nw_parameters_configure_protocol_block_t, id))v4)[2](v4, v8[6]);
        BYTE4(v5[11].isa) = 1;
        v9 = v5;
LABEL_9:

LABEL_50:
        goto LABEL_51;
      }
      __nwlog_obj();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v52 = "nw_parameters_create_custom_ip";
      v40 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v49 = 0;
      if (__nwlog_fault(v40, &type, &v49))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)buf = 136446210;
            v52 = "nw_parameters_create_custom_ip";
            _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v49)
        {
          v43 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v41 = objc_claimAutoreleasedReturnValue();
          v44 = type;
          v45 = os_log_type_enabled(v41, type);
          if (v43)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446466;
              v52 = "nw_parameters_create_custom_ip";
              v53 = 2082;
              v54 = v43;
              _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v43);
            goto LABEL_105;
          }
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            v52 = "nw_parameters_create_custom_ip";
            _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v41 = objc_claimAutoreleasedReturnValue();
          v48 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)buf = 136446210;
            v52 = "nw_parameters_create_custom_ip";
            _os_log_impl(&dword_182FBE000, v41, v48, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_105:
      if (v40)
        free(v40);
      v9 = 0;
      goto LABEL_9;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v52 = "nw_parameters_create_custom_ip";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (__nwlog_fault(v15, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_parameters_create_custom_ip";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s nw_custom_ip_create_options failed", buf, 0xCu);
        }
      }
      else if (v49)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v16, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "nw_parameters_create_custom_ip";
            v53 = 2082;
            v54 = v21;
            _os_log_impl(&dword_182FBE000, v16, v22, "%{public}s nw_custom_ip_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          if (!v15)
            goto LABEL_49;
          goto LABEL_48;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_parameters_create_custom_ip";
          _os_log_impl(&dword_182FBE000, v16, v22, "%{public}s nw_custom_ip_create_options failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_parameters_create_custom_ip";
          _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s nw_custom_ip_create_options failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v15)
    {
LABEL_49:
      v9 = 0;
      goto LABEL_50;
    }
LABEL_48:
    free(v15);
    goto LABEL_49;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v52 = "nw_parameters_create_custom_ip";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v49 = 0;
  if (__nwlog_fault(v11, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }
    else if (v49)
    {
      v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "nw_parameters_create_custom_ip";
          v53 = 2082;
          v54 = v18;
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
        if (!v11)
          goto LABEL_40;
        goto LABEL_39;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v24 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v11)
LABEL_39:
    free(v11);
LABEL_40:
  v9 = 0;
LABEL_51:

LABEL_52:
  return v9;
}

void sub_183542810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

char *nw_parameters_copy_extended_description(NWConcrete_nw_parameters *a1)
{
  return nw_parameters_copy_description_internal(a1, 1);
}

nw_parameters_t nw_parameters_copy(nw_parameters_t parameters)
{
  NSObject *v1;
  _BOOL8 v2;

  v1 = parameters;
  v2 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v1, 0, 0);

  return (nw_parameters_t)v2;
}

void sub_183542890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_copy_connected(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  v2 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v1, 1, 0);

  return v2;
}

void sub_1835428E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_shallow_copy(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  v2 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v1, 0, 1);

  return v2;
}

void sub_183542940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_privacy_context(nw_parameters_t parameters, nw_privacy_context_t privacy_context)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = privacy_context;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_parameters_set_privacy_context";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_privacy_context";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_parameters_set_privacy_context";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7)
          goto LABEL_4;
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_privacy_context";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_privacy_context";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    nw_parameters_set_context(v3, v4);
    goto LABEL_4;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_set_privacy_context";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_privacy_context";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null privacy_context", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_privacy_context";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null privacy_context, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_parameters_set_privacy_context";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null privacy_context, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_parameters_set_privacy_context";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null privacy_context, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_39;
LABEL_4:

}

void sub_183542E04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
  nw_parameters_t v3;
  nw_interface_t v4;
  nw_interface_t v5;
  unsigned int isa;
  id v7;
  NWConcrete_nw_interface *v8;
  _BOOL4 v9;
  Class v10;
  NWConcrete_nw_interface *v11;
  NWConcrete_nw_interface *v12;
  void *v13;
  Class v14;
  void *v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = interface;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      isa = v4[1].isa;
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v7 = (id)nw_context_copy_implicit_context::implicit_context;
      v8 = nw_path_copy_interface_with_generation(v7, isa, 0);

      v9 = nw_interface_shallow_compare(v8, v5);
      v10 = v3[13].isa;
      if (v9)
        v11 = v8;
      else
        v11 = (NWConcrete_nw_interface *)v5;
      v12 = v11;
      v13 = (void *)*((_QWORD *)v10 + 21);
      *((_QWORD *)v10 + 21) = v12;

    }
    else
    {
      v14 = v3[13].isa;
      v15 = (void *)*((_QWORD *)v14 + 21);
      *((_QWORD *)v14 + 21) = 0;

    }
    goto LABEL_10;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_parameters_require_interface";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_require_interface";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_parameters_require_interface";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_require_interface";
        _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_require_interface";
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v17)
    free(v17);
LABEL_10:

}

void sub_183543144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_parameters_set_required_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
  nw_parameters_t v3;
  nw_parameters_t v4;
  Class isa;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (v3)
  {
    isa = v3[13].isa;
    if ((*((_WORD *)isa + 50) & 0x100) != 0)
      *((_DWORD *)isa + 23) = interface_type;
    else
      *((_DWORD *)isa + 19) = interface_type;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_required_interface_type";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_required_interface_type";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_required_interface_type";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_required_interface_type";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_required_interface_type";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_next_hop_required_interface_type(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((_QWORD *)v3 + 13) + 92) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_next_hop_required_interface_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_next_hop_required_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_next_hop_required_interface_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_next_hop_required_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_next_hop_required_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_required_interface_subtype(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    if ((*(_WORD *)(v5 + 100) & 0x100) != 0)
      *(_DWORD *)(v5 + 96) = a2;
    else
      *(_DWORD *)(v5 + 80) = a2;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_required_interface_subtype";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_required_interface_subtype";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_parameters_set_next_hop_required_interface_subtype(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((_QWORD *)v3 + 13) + 96) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_next_hop_required_interface_subtype";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_next_hop_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_next_hop_required_interface_subtype";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_next_hop_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_next_hop_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_only_primary_requires_type(void *a1, int a2)
{
  id v3;
  void *v4;
  __int16 v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 32;
    else
      v5 = 0;
    *(_WORD *)(*((_QWORD *)v3 + 13) + 100) = *(_WORD *)(*((_QWORD *)v3 + 13) + 100) & 0xFFDF | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_only_primary_requires_type";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_only_primary_requires_type";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_only_primary_requires_type";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_only_primary_requires_type";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_only_primary_requires_type";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_parameters_add_custom_proxy_config(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_parameters_add_custom_proxy_config";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_add_custom_proxy_config";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_parameters_add_custom_proxy_config";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v10)
          goto LABEL_6;
LABEL_41:
        free(v10);
        goto LABEL_6;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_add_custom_proxy_config";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_add_custom_proxy_config";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    v6 = v3[22];
    if (!v6)
    {
      v7 = nw_array_create();
      v8 = (void *)v3[22];
      v3[22] = v7;

      v6 = v3[22];
    }
    nw_array_append(v6, v5);
    goto LABEL_6;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_parameters_add_custom_proxy_config";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_parameters_add_custom_proxy_config";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null config", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v23)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_parameters_add_custom_proxy_config";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_parameters_add_custom_proxy_config";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null config, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_parameters_add_custom_proxy_config";
    v27 = 2082;
    v28 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_41;
LABEL_6:

}

void nw_parameters_clear_custom_proxy_configs(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)*((_QWORD *)v1 + 22);
    *((_QWORD *)v1 + 22) = 0;

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_parameters_clear_custom_proxy_configs";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_parameters_clear_custom_proxy_configs";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_parameters_clear_custom_proxy_configs";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_parameters_clear_custom_proxy_configs";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_parameters_clear_custom_proxy_configs";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void nw_parameters_set_proxy_configuration(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  xpc_object_t objects;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  objects = v4;
  if (v3)
  {
    if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E0C812F8])
    {
      v7 = xpc_array_create(&objects, 1uLL);
      v8 = v7;
      if (v7)
      {
        v9 = nw_proxy_configs_create_with_schema_array(v7);
        v10 = (void *)v3[22];
        v3[22] = v9;

      }
      v5 = objects;
    }
    else
    {
      v6 = (void *)v3[22];
      v3[22] = 0;

    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_parameters_set_proxy_configuration";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_proxy_configuration";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_parameters_set_proxy_configuration";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_proxy_configuration";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_parameters_set_proxy_configuration";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v12)
    free(v12);
LABEL_8:

}

void sub_1835448D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id nw_parameters_copy_custom_proxy_configs(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  id combined_array;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_context_copy_proxy_configs(*(void **)(v1[13] + 136));
    v4 = v3;
    v5 = (void *)v2[22];
    if (v3)
      combined_array = nw_array_create_combined_array(v3, v5);
    else
      combined_array = v5;
    v7 = combined_array;

    goto LABEL_6;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_parameters_copy_custom_proxy_configs";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_parameters_copy_custom_proxy_configs";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_parameters_copy_custom_proxy_configs";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_parameters_copy_custom_proxy_configs";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_parameters_copy_custom_proxy_configs";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_6:

  return v7;
}

void sub_183544BC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_effective_proxy_config(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 23, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_effective_proxy_config";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_effective_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_effective_proxy_config";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_effective_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_effective_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

id nw_parameters_copy_effective_proxy_config(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[23];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_copy_effective_proxy_config";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_effective_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_copy_effective_proxy_config";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_effective_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_effective_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_effective_audit_token(void *a1, __int128 *a2)
{
  char *v3;
  void *v4;
  __int128 v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *a2;
    *(_OWORD *)(v3 + 56) = a2[1];
    *(_OWORD *)(v3 + 40) = v5;
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_effective_audit_token";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_effective_audit_token";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_effective_audit_token";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_effective_audit_token";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_effective_audit_token";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void nw_parameters_set_proxy_bundle_id(void *a1, const char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v14;
  void *v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_parameters_set_proxy_bundle_id";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_set_proxy_bundle_id";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_parameters_set_proxy_bundle_id";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_set_proxy_bundle_id";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_set_proxy_bundle_id";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_27:
    if (v8)
      free(v8);
    goto LABEL_8;
  }
  v5 = (void *)v3[15];
  if (v5)
  {
    free(v5);
    v4[15] = 0;
  }
  if (!a2 || strlen(a2) - 1 > 0x3FE)
    goto LABEL_8;
  v6 = strdup(a2);
  if (v6)
  {
LABEL_7:
    v4[15] = v6;
LABEL_8:

    return;
  }
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v20 = "strict_strdup";
  v15 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v15))
  {
    free(v15);
    goto LABEL_7;
  }
  __break(1u);
}

BOOL nw_parameters_get_proxy_bundle_id(void *a1)
{
  id v1;
  _QWORD *v2;
  NSObject *v3;
  void *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_parameters_get_proxy_bundle_id";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v14, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_parameters_get_proxy_bundle_id";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v26 = "nw_parameters_get_proxy_bundle_id";
            v27 = 2082;
            v28 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_parameters_get_proxy_bundle_id";
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_parameters_get_proxy_bundle_id";
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v14)
      free(v14);
    v11 = 0;
    goto LABEL_21;
  }
  if (*((_QWORD *)v1 + 15))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (void *)v2[15];
      *(_DWORD *)buf = 136446466;
      v26 = "nw_parameters_get_proxy_bundle_id";
      v27 = 2080;
      v28 = v4;
      v5 = "%{public}s Using configured proxy bundle ID %s";
      v6 = v3;
      v7 = 22;
LABEL_18:
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  v8 = (const char *)*((_QWORD *)v1 + 14);
  if (v8)
  {
    *((_QWORD *)v1 + 15) = 0;
  }
  else
  {
    if (nw_parameters_copy_self_proxy_bundle_id(void)::onceToken[0] != -1)
      dispatch_once(nw_parameters_copy_self_proxy_bundle_id(void)::onceToken, &__block_literal_global_376);
    v8 = (const char *)v2[14];
    v2[15] = 0;
    if (!v8)
    {
      if (nw_utilities_get_self_bundle_id::onceToken != -1)
        dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
      v8 = (const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string;
      if (!nw_utilities_get_self_bundle_id::bundle_identifier_string)
        goto LABEL_20;
    }
  }
  if (strlen(v8) - 1 > 0x3FE)
  {
LABEL_16:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v2[14];
      *(_DWORD *)buf = 136446722;
      v26 = "nw_parameters_get_proxy_bundle_id";
      v27 = 2080;
      v28 = (void *)v8;
      v29 = 2080;
      v30 = v10;
      v5 = "%{public}s Using set bundle ID %s (effective %s)";
      v6 = v3;
      v7 = 32;
      goto LABEL_18;
    }
LABEL_19:

LABEL_20:
    v11 = v2[15];
LABEL_21:

    return v11;
  }
  v9 = strdup(v8);
  if (v9)
  {
LABEL_15:
    v2[15] = v9;
    goto LABEL_16;
  }
  __nwlog_obj();
  v21 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v26 = "strict_strdup";
  v22 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v22);
  if (!result)
  {
    free(v22);
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

void ___ZL39nw_parameters_copy_self_proxy_bundle_idv_block_invoke()
{
  if (nw_utilities_get_self_bundle_id::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
}

void nw_parameters_set_source_application_by_external_bundle_id(void *a1, const char *a2)
{
  nw_parameters_set_source_application_by_bundle_id_internal(a1, a2);
}

uint64_t nw_parameters_get_effective_process_name(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  __int128 v7;
  BOOL v11;
  __int128 *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  _BOOL8 v17;
  int v18;
  _BOOL8 v19;
  pid_t v20;
  int v21;
  _BOOL8 v23;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  __int128 v33[4];
  os_log_type_t type[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE uu[32];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[14];
    if (!v3)
    {
      v4 = v1;
      if (uuid_is_null((const unsigned __int8 *)(v4[13] + 24)))
      {

      }
      else
      {
        v18 = uuid_compare((const unsigned __int8 *)(v4[13] + 24), (const unsigned __int8 *)(v4[13] + 8));

        if (v18)
        {
          *(_OWORD *)uu = *(_OWORD *)(v4[13] + 24);
          if (!uuid_is_null(uu))
          {
            v19 = nw_utilities_copy_bundle_id_for_uuid(uu);
            if (v19)
            {
              nw_parameters_set_effective_bundle_id(v4, (const char *)v19);
              free((void *)v19);
            }
          }
        }
      }
      *(_OWORD *)type = 0u;
      v35 = 0u;
      if (nw_copy_current_audit_token(type))
      {
        v5 = v4;
        v6 = v5;
        v7 = *(_OWORD *)(v5 + 56);
        *(_OWORD *)uu = *(_OWORD *)(v5 + 40);
        *(_OWORD *)&uu[16] = v7;
        if (*(_QWORD *)uu | *(_QWORD *)&uu[8] | (unint64_t)v7 | *((_QWORD *)&v7 + 1))
        {
          v11 = *((_QWORD *)v5 + 5) == *(_QWORD *)type
             && *((_QWORD *)v5 + 6) == *(_QWORD *)&type[8]
             && *((_QWORD *)v5 + 7) == (_QWORD)v35
             && *((_QWORD *)v5 + 8) == *((_QWORD *)&v35 + 1);

          if (!v11)
          {
            v12 = (__int128 *)(v6 + 40);
            v36 = 0u;
            v37 = 0u;
            v13 = v6;
            v14 = v13;
            v15 = v12[1];
            *(_OWORD *)uu = *v12;
            *(_OWORD *)&uu[16] = v15;
            if (*(_QWORD *)uu | *(_QWORD *)&uu[8] | (unint64_t)v15 | *((_QWORD *)&v15 + 1))
            {
              v16 = v12[1];
              v36 = *v12;
              v37 = v16;
            }

            v33[2] = v36;
            v33[3] = v37;
            if ((unint64_t)v36 | *((_QWORD *)&v36 + 1) | (unint64_t)v37 | *((_QWORD *)&v37 + 1))
            {
              v33[0] = v36;
              v33[1] = v37;
              v17 = nw_utilities_copy_bundle_id_for_audit_token(v33);
              if (v17)
              {
                nw_parameters_set_effective_bundle_id(v14, (const char *)v17);
                free((void *)v17);
              }
            }
          }
        }
        else
        {

        }
      }
      v20 = getpid();
      v21 = *(_DWORD *)(v4[13] + 64);
      if (v21 >= 1 && v21 != v20)
      {
        v23 = nw_utilities_copy_bundle_id_for_pid(v21);
        if (v23)
        {
          nw_parameters_set_effective_bundle_id(v4, (const char *)v23);
          free((void *)v23);
        }
      }
      v3 = v2[14];
      if (!v3)
      {
        if (nw_utilities_get_self_name::onceToken != -1)
          dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44028);
        v3 = nw_utilities_get_self_name::name;
      }
    }
    goto LABEL_40;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)uu = 136446210;
  *(_QWORD *)&uu[4] = "nw_parameters_get_effective_process_name";
  v26 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v36) = 0;
  if (__nwlog_fault(v26, type, &v36))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)uu = 136446210;
        *(_QWORD *)&uu[4] = "nw_parameters_get_effective_process_name";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null parameters", uu, 0xCu);
      }
    }
    else if ((_BYTE)v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v30 = type[0];
      v31 = os_log_type_enabled(v27, type[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)uu = 136446466;
          *(_QWORD *)&uu[4] = "nw_parameters_get_effective_process_name";
          *(_WORD *)&uu[12] = 2082;
          *(_QWORD *)&uu[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null parameters, dumping backtrace:%{public}s", uu, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_57;
      }
      if (v31)
      {
        *(_DWORD *)uu = 136446210;
        *(_QWORD *)&uu[4] = "nw_parameters_get_effective_process_name";
        _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null parameters, no backtrace", uu, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v32 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)uu = 136446210;
        *(_QWORD *)&uu[4] = "nw_parameters_get_effective_process_name";
        _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null parameters, backtrace limit exceeded", uu, 0xCu);
      }
    }

  }
LABEL_57:
  if (v26)
    free(v26);
  v3 = 0;
LABEL_40:

  return v3;
}

void sub_183546094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_application_id(void *a1, void *a2)
{
  char *v3;
  id v4;
  void *v5;
  __int128 v6;
  _QWORD *v7;
  const char *v8;
  char *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  NSObject *v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t type[4];
  const char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  char *v30;
  unsigned __int8 v31[16];
  unsigned __int8 uu[16];
  uint8_t buf[40];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
    v11 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    uu[0] = 0;
    if (!__nwlog_fault(v11, type, uu))
      goto LABEL_49;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (uu[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v18 = type[0];
      v19 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v11)
          goto LABEL_12;
LABEL_50:
        free(v11);
        goto LABEL_12;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
        _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v23 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
        _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  if (v4)
  {
    memset(buf, 0, 32);
    nw_application_id_get_audit_token(v4, buf);
    if (*(_QWORD *)buf | *(_QWORD *)&buf[8] | *(_QWORD *)&buf[16] | *(_QWORD *)&buf[24])
    {
      v6 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v3 + 40) = *(_OWORD *)buf;
      *(_OWORD *)(v3 + 56) = v6;
    }
    memset(uu, 0, sizeof(uu));
    nw_application_id_get_uuid(v5, uu);
    if (!uuid_is_null(uu))
      *(_OWORD *)(*((_QWORD *)v3 + 13) + 24) = *(_OWORD *)uu;
    v7 = v5;
    v8 = (const char *)v7[10];

    if (v8)
      nw_parameters_set_effective_bundle_id(v3, v8);
    v9 = v7;
    *(_OWORD *)v31 = *(_OWORD *)(v9 + 88);

    if (!uuid_is_null(v31))
      *(_OWORD *)(*((_QWORD *)v3 + 13) + 40) = *(_OWORD *)v31;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)type = 136446722;
        v26 = "nw_parameters_set_application_id";
        v27 = 2112;
        v28 = v9;
        v29 = 2112;
        v30 = v3;
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s set %@ on %@", (uint8_t *)type, 0x20u);
      }

    }
    goto LABEL_12;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
  v11 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  uu[0] = 0;
  if (!__nwlog_fault(v11, type, uu))
    goto LABEL_49;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type[0];
    if (os_log_type_enabled(v12, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null application_id", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!uu[0])
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v24 = type[0];
    if (os_log_type_enabled(v12, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
      _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v21 = type[0];
  v22 = os_log_type_enabled(v12, type[0]);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
      _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_parameters_set_application_id";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v11)
    goto LABEL_50;
LABEL_12:

}

void sub_1835466B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_persona(void *a1, _OWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_OWORD *)(*((_QWORD *)v3 + 13) + 40) = *a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_persona";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_persona";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_persona";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_persona";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_persona";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

BOOL nw_parameters_copy_application_id(void *a1)
{
  id v1;
  void *v2;
  char *v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  id v7;
  NSObject *v8;
  const char *v9;
  void *v10;
  char *v11;
  char *v12;
  _BOOL8 result;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  NSObject *v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  __int128 v26[4];
  _BYTE buf[38];
  unsigned __int8 uu[16];
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_copy_application_id";
    v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v29) = 16;
    uu[0] = 0;
    if (__nwlog_fault(v15, &v29, uu))
    {
      if (v29 == 17)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = v29;
        if (os_log_type_enabled(v16, (os_log_type_t)v29))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_copy_application_id";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (uu[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v20 = v29;
        v21 = os_log_type_enabled(v16, (os_log_type_t)v29);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_parameters_copy_application_id";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v20, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_copy_application_id";
          _os_log_impl(&dword_182FBE000, v16, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v25 = v29;
        if (os_log_type_enabled(v16, (os_log_type_t)v29))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_copy_application_id";
          _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_51:
    if (v15)
      free(v15);
    v7 = 0;
    goto LABEL_26;
  }
  v29 = 0u;
  v30 = 0u;
  v3 = (char *)v1;
  v4 = v3;
  v5 = *(_OWORD *)(v3 + 56);
  *(_OWORD *)buf = *(_OWORD *)(v3 + 40);
  *(_OWORD *)&buf[16] = v5;
  if (*(_QWORD *)buf | *(_QWORD *)&buf[8] | (unint64_t)v5 | *((_QWORD *)&v5 + 1))
  {
    v6 = *(_OWORD *)(v3 + 56);
    v29 = *(_OWORD *)(v3 + 40);
    v30 = v6;
  }

  v26[2] = v29;
  v26[3] = v30;
  if ((unint64_t)v29 | *((_QWORD *)&v29 + 1) | (unint64_t)v30 | *((_QWORD *)&v30 + 1))
  {
    v26[0] = v29;
    v26[1] = v30;
    v7 = (id)nw_application_id_create_with_audit_token(v26);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_parameters_copy_application_id";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v7;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s getting application ID %@ from parameters audit token", buf, 0x16u);
      }

    }
  }
  else
  {
    v7 = 0;
  }
  *(_OWORD *)uu = *(_OWORD *)(*((_QWORD *)v4 + 13) + 24);
  if (!uuid_is_null(uu))
  {
    if (v7)
    {
      v7 = v7;
      *((_OWORD *)v7 + 1) = *(_OWORD *)uu;

      if (!gLogDatapath)
        goto LABEL_15;
    }
    else
    {
      v7 = (id)nw_application_id_create_with_uuid(uu);
      if (!gLogDatapath)
        goto LABEL_15;
    }
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_parameters_copy_application_id";
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 1040;
      *(_DWORD *)&buf[24] = 16;
      *(_WORD *)&buf[28] = 2096;
      *(_QWORD *)&buf[30] = uu;
      _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s getting application ID %@ from parameters UUID: %{uuid_t}.16P", buf, 0x26u);
    }

  }
LABEL_15:
  v9 = (const char *)*((_QWORD *)v4 + 14);
  if (!v9)
    goto LABEL_23;
  if (!v7)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v7 = (id)-[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]([NWConcrete_nw_application_id alloc], buf, 0, v9, 0);
    if (gLogDatapath)
    {
LABEL_32:
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_parameters_copy_application_id";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v7;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = v9;
        _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s getting application ID %@ from parameters bundle ID: %s", buf, 0x20u);
      }

    }
LABEL_23:
    *(_OWORD *)buf = *(_OWORD *)(*((_QWORD *)v4 + 13) + 40);
    if (v7)
    {
      if (!uuid_is_null(buf))
      {
        v12 = (char *)v7;
        *(_OWORD *)(v12 + 88) = *(_OWORD *)buf;

      }
    }
LABEL_26:

    return (BOOL)v7;
  }
  v7 = v7;
  v10 = (void *)*((_QWORD *)v7 + 10);
  if (v10)
  {
    free(v10);
    *((_QWORD *)v7 + 10) = 0;
  }
  v11 = strdup(v9);
  if (v11)
  {
LABEL_20:
    *((_QWORD *)v7 + 10) = v11;
    *((_BYTE *)v7 + 104) = 0;
    nw_application_id_validate_bundle_id((NWConcrete_nw_application_id *)v7);

    if (gLogDatapath)
      goto LABEL_32;
    goto LABEL_23;
  }
  __nwlog_obj();
  v22 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "strict_strdup";
  v23 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v23);
  if (!result)
  {
    free(v23);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

void sub_183546F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_get_persona(void *a1, _OWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(*((_QWORD *)v3 + 13) + 40);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_persona";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_persona";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_persona";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_persona";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_persona";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_main_document_url(void *a1, const char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  nw_endpoint_t url;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2 && *a2)
    {
      url = nw_endpoint_create_url(a2);
      v6 = (void *)v4[26];
      v4[26] = url;
    }
    else
    {
      v6 = (void *)v3[26];
      v3[26] = 0;
    }

    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_parameters_set_main_document_url";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_main_document_url";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_parameters_set_main_document_url";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_main_document_url";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_parameters_set_main_document_url";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v8)
    free(v8);
LABEL_7:

}

void sub_1835474FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const char *nw_parameters_get_main_document_url(void *a1)
{
  NSObject **v1;
  NSObject **v2;
  NSObject *v3;
  const char *url;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_parameters_get_main_document_url";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_parameters_get_main_document_url";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_parameters_get_main_document_url";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_parameters_get_main_document_url";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_parameters_get_main_document_url";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v6)
      free(v6);
    goto LABEL_22;
  }
  v3 = v1[26];
  if (!v3)
  {
LABEL_22:
    url = 0;
    goto LABEL_23;
  }
  url = nw_endpoint_get_url(v3);
LABEL_23:

  return url;
}

void sub_1835477AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFTypeRef nw_parameters_copy_main_document_cfurl(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  CFTypeRef v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_parameters_copy_main_document_cfurl";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_parameters_copy_main_document_cfurl";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_parameters_copy_main_document_cfurl";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_parameters_copy_main_document_cfurl";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_parameters_copy_main_document_cfurl";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v6)
      free(v6);
    goto LABEL_22;
  }
  v3 = (void *)*((_QWORD *)v1 + 26);
  if (!v3)
  {
LABEL_22:
    v4 = 0;
    goto LABEL_23;
  }
  v4 = nw_endpoint_copy_cfurl(v3);
LABEL_23:

  return v4;
}

void sub_183547A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_delegated_unique_pid(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)(*((_QWORD *)v3 + 13) + 56) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_delegated_unique_pid";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_delegated_unique_pid";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_delegated_unique_pid";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_delegated_unique_pid";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_delegated_unique_pid";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_required_address_family(void *a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  id *v6;
  id v7;
  id v8;
  _BOOL4 is_equal_unsafe;
  nw_ip_version_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_parameters_set_required_address_family";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_parameters_set_required_address_family";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_parameters_set_required_address_family";
            v23 = 2082;
            v24 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_parameters_set_required_address_family";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_parameters_set_required_address_family";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_29:
    if (v12)
      free(v12);
    goto LABEL_12;
  }
  v5 = *(void **)(v3[19] + 48);
  if (v5)
  {
    v6 = v5;
    v7 = v6[1];

    if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
    v8 = (id)g_ip_definition;
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

    if (!is_equal_unsafe)
      goto LABEL_11;
    if (a2 == 2)
    {
      v10 = nw_ip_version_4;
    }
    else
    {
      if (a2 != 30)
      {
LABEL_11:

        goto LABEL_12;
      }
      v10 = nw_ip_version_6;
    }
    nw_ip_options_set_version(*(nw_protocol_options_t *)(v4[19] + 48), v10);
    goto LABEL_11;
  }
LABEL_12:

}

void sub_18354802C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_local_address_preference(void *a1, nw_ip_local_address_preference_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  id *v6;
  id v7;
  id v8;
  _BOOL4 is_equal_unsafe;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *(void **)(v3[19] + 48);
    if (v5)
    {
      v6 = v5;
      v7 = v6[1];

      if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
        dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
      v8 = (id)g_ip_definition;
      is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

      if (is_equal_unsafe)
        nw_ip_options_set_local_address_preference(*(nw_protocol_options_t *)(v4[19] + 48), a2);

    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_parameters_set_local_address_preference";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_parameters_set_local_address_preference";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_parameters_set_local_address_preference";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_parameters_set_local_address_preference";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_parameters_set_local_address_preference";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v11)
    free(v11);
LABEL_8:

}

void sub_183548360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_parameters_get_upper_transport_protocol_options_block_invoke(uint64_t a1, void *a2)
{
  id v4;
  nw_protocol_definition_t v5;
  _BOOL4 is_equal_unsafe;
  NSObject *options;

  options = a2;
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
  v4 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  v5 = nw_protocol_options_copy_definition(options);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, (uint64_t)v5);

  if (is_equal_unsafe)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);

}

void sub_18354843C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
  _BOOL4 v2;
  nw_parameters_t v3;
  nw_parameters_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v2 = reuse_local_address;
  v20 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (v3)
  {
    v5 = 256;
    if (!v2)
      v5 = 0;
    v3[12].isa = (Class)((unint64_t)v3[12].isa & 0xFFFFFFFFFFFFFEFFLL | v5);
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_reuse_local_address";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_reuse_local_address";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_reuse_local_address";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_reuse_local_address";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_reuse_local_address";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

const char *nw_data_mode_to_string(unsigned int a1)
{
  if (a1 > 3)
    return "unknown";
  else
    return off_1E149D238[a1];
}

void nw_parameters_set_expected_workload(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_QWORD *)v3 + 9) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_expected_workload";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_expected_workload";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_expected_workload";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_expected_workload";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_expected_workload";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_parameters_get_expected_workload(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 9);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_expected_workload";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_expected_workload";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_expected_workload";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_expected_workload";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_expected_workload";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_channel_teardown_delay(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_QWORD *)v3 + 10) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_channel_teardown_delay";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_channel_teardown_delay";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_channel_teardown_delay";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_channel_teardown_delay";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_channel_teardown_delay";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_parameters_get_channel_teardown_delay(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 10);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_channel_teardown_delay";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_channel_teardown_delay";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_channel_teardown_delay";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_channel_teardown_delay";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_channel_teardown_delay";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_channel_demux_options(void *a1, void *a2)
{
  unsigned __int8 *v3;
  id v4;
  void *v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  void *v10;
  xpc_object_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  NSObject *v30;
  void *v31;
  os_log_type_t v32;
  os_log_type_t v33;
  _QWORD applier[4];
  unsigned __int8 *v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_parameters_set_channel_demux_options";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v19, &type, &v36))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_parameters_set_channel_demux_options";
          v40 = 2082;
          v41 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_56:
        if (!v19)
        {
LABEL_19:

          return;
        }
LABEL_57:
        free(v19);
        goto LABEL_19;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_55:

    goto LABEL_56;
  }
  if (!v4)
  {
    v15 = *(_QWORD *)(*((_QWORD *)v3 + 13) + 176);
    if (v15)
    {
      objc_storeStrong((id *)(v15 + 128), 0);
      v16 = *(_QWORD *)(*((_QWORD *)v3 + 13) + 176);
      v17 = *(void **)(v16 + 136);
      *(_QWORD *)(v16 + 136) = 0;

    }
    goto LABEL_19;
  }
  if (nw_protocol_demux_copy_definition::onceToken != -1)
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
  if (!nw_protocol_demux_copy_definition::definition)
  {
    if (nw_protocol_options_matches_definition(v5, 0))
      goto LABEL_9;
    goto LABEL_21;
  }
  v6 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
  v7 = nw_protocol_options_matches_definition(v5, v6);
  if (v6)
    os_release(v6);
  if (!v7)
  {
LABEL_21:
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_parameters_set_channel_demux_options";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v19, &type, &v36))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null nw_protocol_options_is_demux(demux_options)", buf, 0xCu);
      }
    }
    else if (v36)
    {
      v27 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v29 = os_log_type_enabled(v20, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_parameters_set_channel_demux_options";
          v40 = 2082;
          v41 = (uint64_t)v27;
          _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null nw_protocol_options_is_demux(demux_options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v27);
        if (!v19)
          goto LABEL_19;
        goto LABEL_57;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null nw_protocol_options_is_demux(demux_options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_182FBE000, v20, v33, "%{public}s called with null nw_protocol_options_is_demux(demux_options), backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_55;
  }
LABEL_9:
  v8 = *(_QWORD *)(*((_QWORD *)v3 + 13) + 176);
  if (v8)
    goto LABEL_12;
  v9 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v9)
  {
LABEL_11:
    *(_QWORD *)(*((_QWORD *)v3 + 13) + 176) = v9;
    v8 = *(_QWORD *)(*((_QWORD *)v3 + 13) + 176);
LABEL_12:
    objc_storeStrong((id *)(v8 + 128), a2);
    if (!uuid_is_null(v3 + 8))
    {
      v10 = *(void **)(*(_QWORD *)(*((_QWORD *)v3 + 13) + 176) + 136);
      if (!v10)
      {
        v11 = xpc_array_create(0, 0);
        v12 = *(_QWORD *)(*((_QWORD *)v3 + 13) + 176);
        v13 = *(void **)(v12 + 136);
        *(_QWORD *)(v12 + 136) = v11;

        v10 = *(void **)(*(_QWORD *)(*((_QWORD *)v3 + 13) + 176) + 136);
      }
      xpc_array_set_uuid(v10, 0xFFFFFFFFFFFFFFFFLL, v3 + 8);
      v14 = (void *)*((_QWORD *)v3 + 17);
      if (v14)
      {
        applier[0] = MEMORY[0x1E0C809B0];
        applier[1] = 3221225472;
        applier[2] = __nw_parameters_set_channel_demux_options_block_invoke;
        applier[3] = &unk_1E14AC908;
        v35 = v3;
        xpc_array_apply(v14, applier);

      }
    }
    goto LABEL_19;
  }
  __nwlog_obj();
  v30 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v39 = "strict_calloc";
  v40 = 2048;
  v41 = 1;
  v42 = 2048;
  v43 = 144;
  v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    v9 = 0;
    goto LABEL_11;
  }
  __break(1u);
}

void sub_183549860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_set_channel_demux_options_block_invoke(uint64_t a1, int a2, xpc_object_t value)
{
  xpc_array_append_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) + 176) + 136), value);
  return 1;
}

void nw_parameters_set_proc_uuid(void *a1, _OWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_OWORD *)(*((_QWORD *)v3 + 13) + 8) = *a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_proc_uuid";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_proc_uuid";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_proc_uuid";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_proc_uuid";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_proc_uuid";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_parent_id_inner(NWConcrete_nw_parameters *a1, const unsigned __int8 *a2, int a3)
{
  NWConcrete_nw_parameters *v5;
  NWConcrete_nw_parameters *v6;
  OS_nw_interface *required_interface;
  void *v8;
  xpc_object_t v9;
  OS_nw_interface *v10;
  void *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_parameters_set_parent_id_inner";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_set_parent_id_inner";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_parameters_set_parent_id_inner";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v13)
          goto LABEL_9;
LABEL_44:
        free(v13);
        goto LABEL_9;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_set_parent_id_inner";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_parameters_set_parent_id_inner";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (a2)
  {
    *(_OWORD *)v5->value.parent_id = *(_OWORD *)a2;
    if (a3)
    {
      required_interface = v5->path_parameters->required_interface;
      if (required_interface)
      {
        if (*((_QWORD *)required_interface + 16))
        {
          v8 = (void *)*((_QWORD *)required_interface + 17);
          if (!v8)
          {
            v9 = xpc_array_create(0, 0);
            v10 = v6->path_parameters->required_interface;
            v11 = (void *)*((_QWORD *)v10 + 17);
            *((_QWORD *)v10 + 17) = v9;

            v8 = (void *)*((_QWORD *)v6->path_parameters->required_interface + 17);
          }
          xpc_array_set_uuid(v8, 0xFFFFFFFFFFFFFFFFLL, a2);
        }
      }
    }
    goto LABEL_9;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_parameters_set_parent_id_inner";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (!__nwlog_fault(v13, &type, &v26))
    goto LABEL_43;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_parameters_set_parent_id_inner";
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null parent_id", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (!v26)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_parameters_set_parent_id_inner";
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null parent_id, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_42;
  }
  v21 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  v22 = type;
  v23 = os_log_type_enabled(v14, type);
  if (!v21)
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_parameters_set_parent_id_inner";
      _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null parent_id, no backtrace", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (v23)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_parameters_set_parent_id_inner";
    v30 = 2082;
    v31 = v21;
    _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null parent_id, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v21);
  if (v13)
    goto LABEL_44;
LABEL_9:

}

void sub_18354A04C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_parent_id(NWConcrete_nw_parameters *a1, const unsigned __int8 *a2)
{
  nw_parameters_set_parent_id_inner(a1, a2, 1);
}

void nw_parameters_add_parent_id(void *a1, const unsigned __int8 *a2)
{
  const unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *v5;
  xpc_object_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  xpc_object_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (unsigned __int8 *)v3;
  if (!v3)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_parameters_add_parent_id";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27))
      goto LABEL_47;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_add_parent_id";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_parameters_add_parent_id";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_47:
        if (!v14)
          goto LABEL_13;
LABEL_48:
        free(v14);
        goto LABEL_13;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_add_parent_id";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_add_parent_id";
        _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_46:

    goto LABEL_47;
  }
  if (a2)
  {
    if (uuid_is_null(v3 + 8))
    {
      *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
    }
    else
    {
      v5 = (void *)*((_QWORD *)v4 + 17);
      if (!v5)
      {
        v6 = xpc_array_create(0, 0);
        v7 = (void *)*((_QWORD *)v4 + 17);
        *((_QWORD *)v4 + 17) = v6;

        v5 = (void *)*((_QWORD *)v4 + 17);
      }
      xpc_array_set_uuid(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    }
    v8 = *(_QWORD *)(*((_QWORD *)v4 + 13) + 176);
    if (v8 && *(_QWORD *)(v8 + 128))
    {
      v9 = *(void **)(v8 + 136);
      if (!v9)
      {
        v10 = xpc_array_create(0, 0);
        v11 = *(_QWORD *)(*((_QWORD *)v4 + 13) + 176);
        v12 = *(void **)(v11 + 136);
        *(_QWORD *)(v11 + 136) = v10;

        v9 = *(void **)(*(_QWORD *)(*((_QWORD *)v4 + 13) + 176) + 136);
      }
      xpc_array_set_uuid(v9, 0xFFFFFFFFFFFFFFFFLL, a2);
    }
    goto LABEL_13;
  }
  __nwlog_obj();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_parameters_add_parent_id";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (!__nwlog_fault(v14, &type, &v27))
    goto LABEL_47;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_parameters_add_parent_id";
      _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null parent_id", buf, 0xCu);
    }
    goto LABEL_46;
  }
  if (!v27)
  {
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_parameters_add_parent_id";
      _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s called with null parent_id, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_46;
  }
  v22 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v15 = objc_claimAutoreleasedReturnValue();
  v23 = type;
  v24 = os_log_type_enabled(v15, type);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_parameters_add_parent_id";
      _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null parent_id, no backtrace", buf, 0xCu);
    }
    goto LABEL_46;
  }
  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    v30 = "nw_parameters_add_parent_id";
    v31 = 2082;
    v32 = v22;
    _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null parent_id, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v22);
  if (v14)
    goto LABEL_48;
LABEL_13:

}

void sub_18354A5A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_get_parent_id(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_parameters_get_parent_id";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_get_parent_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_get_parent_id";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_get_parent_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_get_parent_id";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 8);
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_get_parent_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_parent_id";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null destination", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_parent_id";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null destination, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_get_parent_id";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null destination, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_parameters_get_parent_id";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null destination, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

uint64_t __nw_parameters_iterate_parent_ids_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  const uint8_t *bytes;
  uint64_t v8;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 32);
    bytes = xpc_uuid_get_bytes(v4);
    v8 = (*(uint64_t (**)(uint64_t, const uint8_t *))(v6 + 16))(v6, bytes);
  }
  else
  {
    v8 = 1;
  }

  return v8;
}

void sub_18354AAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_dry_run(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFFFFELL | a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_dry_run";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_dry_run";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_dry_run";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_dry_run";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_dry_run";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_prohibit_expensive(nw_parameters_t parameters, BOOL prohibit_expensive)
{
  __int16 v2;
  nw_parameters_t v3;
  nw_parameters_t v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v2 = prohibit_expensive;
  v19 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (v3)
  {
    *((_WORD *)v3[13].isa + 50) = *((_WORD *)v3[13].isa + 50) & 0xFFFE | v2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_prohibit_expensive";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_prohibit_expensive";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_prohibit_expensive";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_prohibit_expensive";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_prohibit_expensive";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_parameters_set_allow_ultra_constrained(void *a1, int a2)
{
  id v3;
  void *v4;
  __int16 v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 4;
    else
      v5 = 0;
    *(_WORD *)(*((_QWORD *)v3 + 13) + 100) = *(_WORD *)(*((_QWORD *)v3 + 13) + 100) & 0xFFFB | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_allow_ultra_constrained";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_ultra_constrained";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_allow_ultra_constrained";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_ultra_constrained";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_ultra_constrained";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

uint64_t nw_parameters_get_allow_ultra_constrained(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 100) >> 2) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_allow_ultra_constrained";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_ultra_constrained";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_allow_ultra_constrained";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_ultra_constrained";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_allow_ultra_constrained";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_prohibit_roaming(void *a1, int a2)
{
  id v3;
  void *v4;
  __int16 v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 8;
    else
      v5 = 0;
    *(_WORD *)(*((_QWORD *)v3 + 13) + 100) = *(_WORD *)(*((_QWORD *)v3 + 13) + 100) & 0xFFF7 | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_prohibit_roaming";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_roaming";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_prohibit_roaming";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_roaming";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_prohibit_roaming";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_parameters_clear_prohibited_interface_types(nw_parameters_t parameters)
{
  nw_parameters_t v1;
  nw_parameters_t v2;
  void **v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = parameters;
  v2 = v1;
  if (v1)
  {
    v3 = (void **)*((_QWORD *)v1[13].isa + 22);
    if (v3)
    {
      v4 = *v3;
      *v3 = 0;

    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_clear_prohibited_interface_types";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_clear_prohibited_interface_types";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_clear_prohibited_interface_types";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_clear_prohibited_interface_types";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_clear_prohibited_interface_types";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_4:

}

void nw_parameters_iterate_prohibited_interface_types(nw_parameters_t parameters, nw_parameters_iterate_interface_types_block_t iterate_block)
{
  nw_parameters_t v3;
  nw_parameters_iterate_interface_types_block_t v4;
  void *v5;
  void **v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD applier[4];
  id v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = iterate_block;
  v5 = v4;
  if (v3)
  {
    v6 = (void **)*((_QWORD *)v3[13].isa + 22);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        applier[0] = MEMORY[0x1E0C809B0];
        applier[1] = 3221225472;
        applier[2] = __nw_parameters_iterate_prohibited_interface_types_block_invoke;
        applier[3] = &unk_1E14A4E60;
        v17 = v4;
        xpc_array_apply(v7, applier);

      }
    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_parameters_iterate_prohibited_interface_types";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_parameters_iterate_prohibited_interface_types";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_parameters_iterate_prohibited_interface_types";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_parameters_iterate_prohibited_interface_types";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_parameters_iterate_prohibited_interface_types";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void sub_18354BD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_iterate_prohibited_interface_types_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;

  v4 = a3;
  xpc_uint64_get_value(v4);
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  return v5;
}

void sub_18354BDEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_interface_subtypes(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_32:
    if (v11)
      free(v11);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v3[13] + 176))
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      v23 = (uint64_t)&__block_descriptor_tmp_86211;
      v24 = MEMORY[0x1E0C81398];
      if (xpc_array_apply(v5, applier))
      {
        v7 = xpc_retain(v5);
LABEL_12:
        v8 = *(_QWORD *)(v3[13] + 176);
        v9 = *(void **)(v8 + 8);
        *(_QWORD *)(v8 + 8) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v23 = 144;
  v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18354C200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_preferred_interface_subtypes(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_interface_subtypes";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_interface_subtypes";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_interface_subtypes";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_interface_subtypes";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_interface_subtypes";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_32:
    if (v11)
      free(v11);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v3[13] + 176))
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      v23 = (uint64_t)&__block_descriptor_tmp_86211;
      v24 = MEMORY[0x1E0C81398];
      if (xpc_array_apply(v5, applier))
      {
        v7 = xpc_retain(v5);
LABEL_12:
        v8 = *(_QWORD *)(v3[13] + 176);
        v9 = *(void **)(v8 + 16);
        *(_QWORD *)(v8 + 16) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v23 = 144;
  v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18354C61C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_prohibit_interface(nw_parameters_t parameters, nw_interface_t interface)
{
  nw_parameters_t v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  xpc_object_t *v8;
  void *v9;
  xpc_object_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  NSObject *v32;
  void *v33;
  void *v34;
  os_log_type_t v35;
  os_log_type_t v36;
  os_log_type_t v37;
  os_log_type_t v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = interface;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_parameters_prohibit_interface";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v14, &type, &v43))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "nw_parameters_prohibit_interface";
          v47 = 2082;
          v48 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v14)
          goto LABEL_12;
LABEL_73:
        free(v14);
        goto LABEL_12;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_182FBE000, v15, v36, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_71:

    goto LABEL_72;
  }
  if (!v4)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_parameters_prohibit_interface";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v14, &type, &v43))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v43)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v15, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "nw_parameters_prohibit_interface";
          v47 = 2082;
          v48 = (uint64_t)v26;
          _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        if (!v14)
          goto LABEL_12;
        goto LABEL_73;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_182FBE000, v15, v37, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_71;
  }
  v6 = nw_interface_copy_dictionary(v4);
  if (!v6)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_parameters_prohibit_interface";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null interface_dictionary", buf, 0xCu);
      }
    }
    else if (v43)
    {
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v21, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "nw_parameters_prohibit_interface";
          v47 = 2082;
          v48 = (uint64_t)v29;
          _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null interface_dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
LABEL_83:
        if (!v20)
          goto LABEL_11;
LABEL_84:
        free(v20);
        goto LABEL_11;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null interface_dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_182FBE000, v21, v38, "%{public}s called with null interface_dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_82:

    goto LABEL_83;
  }
  v7 = *((_QWORD *)v3[13].isa + 22);
  if (v7)
  {
    v8 = *(xpc_object_t **)(v7 + 24);
    if (!v8)
      goto LABEL_9;
    goto LABEL_10;
  }
  v9 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v9)
  {
LABEL_8:
    *((_QWORD *)v3[13].isa + 22) = v9;
    v8 = *(xpc_object_t **)(*((_QWORD *)v3[13].isa + 22) + 24);
    if (!v8)
    {
LABEL_9:
      v10 = xpc_array_create(v8, 0);
      v11 = *((_QWORD *)v3[13].isa + 22);
      v12 = *(void **)(v11 + 24);
      *(_QWORD *)(v11 + 24) = v10;

      v8 = *(xpc_object_t **)(*((_QWORD *)v3[13].isa + 22) + 24);
      if (v8)
        goto LABEL_10;
      __nwlog_obj();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v46 = "nw_parameters_prohibit_interface";
      v20 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (!__nwlog_fault(v20, &type, &v43))
        goto LABEL_83;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_parameters_prohibit_interface";
          _os_log_impl(&dword_182FBE000, v21, v35, "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces", buf, 0xCu);
        }
      }
      else if (v43)
      {
        v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v40 = type;
        v41 = os_log_type_enabled(v21, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            v46 = "nw_parameters_prohibit_interface";
            v47 = 2082;
            v48 = (uint64_t)v39;
            _os_log_impl(&dword_182FBE000, v21, v40, "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v39);
          if (!v20)
            goto LABEL_11;
          goto LABEL_84;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_parameters_prohibit_interface";
          _os_log_impl(&dword_182FBE000, v21, v40, "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_parameters_prohibit_interface";
          _os_log_impl(&dword_182FBE000, v21, v42, "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_82;
    }
LABEL_10:
    xpc_array_set_value(v8, 0xFFFFFFFFFFFFFFFFLL, v6);
LABEL_11:

LABEL_12:
    return;
  }
  __nwlog_obj();
  v32 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v46 = "strict_calloc";
  v47 = 2048;
  v48 = 1;
  v49 = 2048;
  v50 = 144;
  v33 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v33))
  {
    free(v33);
    goto LABEL_8;
  }
  __break(1u);
}

void sub_18354D040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_clear_prohibited_interfaces(nw_parameters_t parameters)
{
  nw_parameters_t v1;
  nw_parameters_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = parameters;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1[13].isa + 22);
    if (v3)
    {
      v4 = *(void **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;

    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_clear_prohibited_interfaces";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_clear_prohibited_interfaces";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_clear_prohibited_interfaces";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_clear_prohibited_interfaces";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_clear_prohibited_interfaces";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_4:

}

void nw_parameters_iterate_prohibited_interfaces(nw_parameters_t parameters, nw_parameters_iterate_interfaces_block_t iterate_block)
{
  nw_parameters_t v3;
  nw_parameters_iterate_interfaces_block_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD applier[4];
  id v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = iterate_block;
  v5 = v4;
  if (v3)
  {
    v6 = *((_QWORD *)v3[13].isa + 22);
    if (v6)
    {
      v7 = *(void **)(v6 + 24);
      if (v7)
      {
        applier[0] = MEMORY[0x1E0C809B0];
        applier[1] = 3221225472;
        applier[2] = __nw_parameters_iterate_prohibited_interfaces_block_invoke;
        applier[3] = &unk_1E14A4E60;
        v17 = v4;
        xpc_array_apply(v7, applier);

      }
    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_parameters_iterate_prohibited_interfaces";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_parameters_iterate_prohibited_interfaces";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_parameters_iterate_prohibited_interfaces";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_parameters_iterate_prohibited_interfaces";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_parameters_iterate_prohibited_interfaces";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void sub_18354D5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_iterate_prohibited_interfaces_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NWConcrete_nw_interface *v4;
  uint64_t v5;

  v4 = nw_interface_create_from_dictionary(a3);
  if (v4)
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  else
    v5 = 1;

  return v5;
}

void sub_18354D66C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_interfaces(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interfaces";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interfaces";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interfaces";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interfaces";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interfaces";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_32:
    if (v11)
      free(v11);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v3[13] + 176))
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      v23 = (uint64_t)&__block_descriptor_tmp_86211;
      v24 = MEMORY[0x1E0C812F8];
      if (xpc_array_apply(v5, applier))
      {
        v7 = xpc_retain(v5);
LABEL_12:
        v8 = *(_QWORD *)(v3[13] + 176);
        v9 = *(void **)(v8 + 24);
        *(_QWORD *)(v8 + 24) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v23 = 144;
  v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18354DA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_netagent_classes(void *a1, void *a2, void *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  Class Class;
  objc_class *v10;
  size_t count;
  xpc_object_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  xpc_object_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  NSObject *v30;
  void *v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)v7;
  if (!v5)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_classes";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_classes";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_classes";
          _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_classes";
          _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_40:
    if (v24)
      free(v24);
    goto LABEL_15;
  }
  if (*(_QWORD *)(v5[13] + 176))
  {
    if (v6)
    {
LABEL_4:
      Class = object_getClass((id)v6);
      if (v8)
      {
        v10 = (objc_class *)MEMORY[0x1E0C812C8];
        if (Class == (Class)MEMORY[0x1E0C812C8] && object_getClass(v8) == v10)
        {
          count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v10
              && (*(_QWORD *)applier = MEMORY[0x1E0C809B0],
                  *(_QWORD *)&applier[8] = 0x40000000,
                  *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  v36 = (uint64_t)&__block_descriptor_tmp_86211,
                  v37 = MEMORY[0x1E0C81390],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              v12 = xpc_retain((xpc_object_t)v6);
            }
            else
            {
              v12 = 0;
            }
            v18 = *(_QWORD *)(v5[13] + 176);
            v19 = *(void **)(v18 + 32);
            *(_QWORD *)(v18 + 32) = v12;

            if (object_getClass(v8) == v10
              && (*(_QWORD *)applier = MEMORY[0x1E0C809B0],
                  *(_QWORD *)&applier[8] = 0x40000000,
                  *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  v36 = (uint64_t)&__block_descriptor_tmp_86211,
                  v37 = MEMORY[0x1E0C81390],
                  xpc_array_apply(v8, applier)))
            {
              v20 = xpc_retain(v8);
            }
            else
            {
              v20 = 0;
            }
            v21 = *(_QWORD *)(v5[13] + 176);
            v22 = *(void **)(v21 + 40);
            *(_QWORD *)(v21 + 40) = v20;

            goto LABEL_15;
          }
        }
      }
    }
LABEL_14:
    v14 = *(_QWORD *)(v5[13] + 176);
    v15 = *(void **)(v14 + 32);
    *(_QWORD *)(v14 + 32) = 0;

    v16 = *(_QWORD *)(v5[13] + 176);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = 0;

    goto LABEL_15;
  }
  if (!(v6 | v7))
  {
LABEL_15:

    return;
  }
  v13 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v13)
  {
LABEL_13:
    *(_QWORD *)(v5[13] + 176) = v13;
    if (v6)
      goto LABEL_4;
    goto LABEL_14;
  }
  __nwlog_obj();
  v30 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v36 = 144;
  v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_13;
  }
  __break(1u);
}

void sub_18354DFA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_netagent_uuids(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_32:
    if (v11)
      free(v11);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v3[13] + 176))
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      v23 = (uint64_t)&__block_descriptor_tmp_86211;
      v24 = MEMORY[0x1E0C813A0];
      if (xpc_array_apply(v5, applier))
      {
        v7 = xpc_retain(v5);
LABEL_12:
        v8 = *(_QWORD *)(v3[13] + 176);
        v9 = *(void **)(v8 + 48);
        *(_QWORD *)(v8 + 48) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v23 = 144;
  v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18354E3C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

size_t nw_parameters_get_agent_preference(NWConcrete_nw_parameters *a1, const char *a2, const char *a3)
{
  NWConcrete_nw_parameters *v3;
  OS_nw_interface *required_interface;
  void *v5;
  size_t count;
  size_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  BOOL v14;
  size_t v15;
  OS_nw_interface *v16;
  void *v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  const char *string;
  const char *v23;
  const char *v24;
  BOOL v25;

  v3 = a1;
  required_interface = v3->path_parameters->required_interface;
  if (!required_interface)
    goto LABEL_30;
  v5 = (void *)*((_QWORD *)required_interface + 10);
  if (!v5 || !*((_QWORD *)required_interface + 11))
    goto LABEL_16;
  count = xpc_array_get_count(v5);
  v7 = xpc_array_get_count(*((xpc_object_t *)v3->path_parameters->required_interface + 11));
  v8 = 88;
  if (count < v7)
    v8 = 80;
  v9 = xpc_array_get_count(*(xpc_object_t *)((char *)v3->path_parameters->required_interface + v8));
  if (!v9)
  {
LABEL_16:
    v16 = v3->path_parameters->required_interface;
    v17 = (void *)*((_QWORD *)v16 + 13);
    if (v17 && *((_QWORD *)v16 + 14))
    {
      v18 = xpc_array_get_count(v17);
      v19 = xpc_array_get_count(*((xpc_object_t *)v3->path_parameters->required_interface + 14));
      v20 = 112;
      if (v18 < v19)
        v20 = 104;
      v15 = xpc_array_get_count(*(xpc_object_t *)((char *)v3->path_parameters->required_interface + v20));
      if (v15)
      {
        v21 = 0;
        while (1)
        {
          string = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 13), v21);
          v23 = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 14), v21);
          v24 = v23;
          v25 = !string || v23 == 0;
          if (!v25 && !strcmp("com.apple.networkrelay", string) && !strcmp("CompanionProxy", v24))
            break;
          if (v15 == ++v21)
            goto LABEL_30;
        }
        v15 = 2;
      }
      goto LABEL_31;
    }
LABEL_30:
    v15 = 0;
    goto LABEL_31;
  }
  v10 = 0;
  while (1)
  {
    v11 = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 10), v10);
    v12 = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 11), v10);
    v13 = v12;
    v14 = !v11 || v12 == 0;
    if (!v14 && !strcmp("com.apple.networkrelay", v11) && !strcmp("CompanionProxy", v13))
      break;
    if (v9 == ++v10)
      goto LABEL_16;
  }
  v15 = 1;
LABEL_31:

  return v15;
}

void sub_18354E5E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_avoided_netagent_classes(void *a1, void *a2, void *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Class Class;
  objc_class *v15;
  size_t count;
  xpc_object_t v17;
  uint64_t v18;
  void *v19;
  xpc_object_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  NSObject *v30;
  void *v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)v7;
  if (!v5)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_classes";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_classes";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_classes";
          _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_classes";
          _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_39:
    if (v24)
      free(v24);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(v5[13] + 176);
  if (v9)
  {
LABEL_6:
    v11 = *(void **)(v9 + 104);
    *(_QWORD *)(v9 + 104) = 0;

    v12 = *(_QWORD *)(v5[13] + 176);
    v13 = *(void **)(v12 + 112);
    *(_QWORD *)(v12 + 112) = 0;

    if (v6)
    {
      Class = object_getClass((id)v6);
      if (v8)
      {
        v15 = (objc_class *)MEMORY[0x1E0C812C8];
        if (Class == (Class)MEMORY[0x1E0C812C8] && object_getClass(v8) == v15)
        {
          count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v15
              && (*(_QWORD *)applier = MEMORY[0x1E0C809B0],
                  *(_QWORD *)&applier[8] = 0x40000000,
                  *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  v36 = (uint64_t)&__block_descriptor_tmp_86211,
                  v37 = MEMORY[0x1E0C81390],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              v17 = xpc_retain((xpc_object_t)v6);
            }
            else
            {
              v17 = 0;
            }
            v18 = *(_QWORD *)(v5[13] + 176);
            v19 = *(void **)(v18 + 104);
            *(_QWORD *)(v18 + 104) = v17;

            if (object_getClass(v8) == v15
              && (*(_QWORD *)applier = MEMORY[0x1E0C809B0],
                  *(_QWORD *)&applier[8] = 0x40000000,
                  *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  v36 = (uint64_t)&__block_descriptor_tmp_86211,
                  v37 = MEMORY[0x1E0C81390],
                  xpc_array_apply(v8, applier)))
            {
              v20 = xpc_retain(v8);
            }
            else
            {
              v20 = 0;
            }
            v21 = *(_QWORD *)(v5[13] + 176);
            v22 = *(void **)(v21 + 112);
            *(_QWORD *)(v21 + 112) = v20;

          }
        }
      }
    }
    goto LABEL_20;
  }
  if (!(v6 | v7))
  {
LABEL_20:

    return;
  }
  v10 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v10)
  {
LABEL_5:
    *(_QWORD *)(v5[13] + 176) = v10;
    v9 = *(_QWORD *)(v5[13] + 176);
    goto LABEL_6;
  }
  __nwlog_obj();
  v30 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v36 = 144;
  v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_18354EB0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_required_interface_type(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(_DWORD *)(*((_QWORD *)v1 + 13) + 76) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_has_required_interface_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_required_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_has_required_interface_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_required_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_required_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_parameters_has_required_interface_subtype(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(_DWORD *)(*((_QWORD *)v1 + 13) + 80) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_has_required_interface_subtype";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_has_required_interface_subtype";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_required_interface_subtype";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_require_netagent_uuid(void *a1, const unsigned __int8 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  xpc_object_t *v6;
  void *v7;
  xpc_object_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  NSObject *v18;
  void *v19;
  void *v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_parameters_require_netagent_uuid";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v12, &type, &v27))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_require_netagent_uuid";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_parameters_require_netagent_uuid";
          v31 = 2082;
          v32 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v12)
          goto LABEL_9;
LABEL_46:
        free(v12);
        goto LABEL_9;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_require_netagent_uuid";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_require_netagent_uuid";
        _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  v5 = *(_QWORD *)(v3[13] + 176);
  if (v5)
  {
    v6 = *(xpc_object_t **)(v5 + 72);
    if (!v6)
      goto LABEL_7;
    goto LABEL_8;
  }
  v7 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v7)
  {
LABEL_6:
    *(_QWORD *)(v4[13] + 176) = v7;
    v6 = *(xpc_object_t **)(*(_QWORD *)(v4[13] + 176) + 72);
    if (!v6)
    {
LABEL_7:
      v8 = xpc_array_create(v6, 0);
      v9 = *(_QWORD *)(v4[13] + 176);
      v10 = *(void **)(v9 + 72);
      *(_QWORD *)(v9 + 72) = v8;

      v6 = *(xpc_object_t **)(*(_QWORD *)(v4[13] + 176) + 72);
      if (v6)
        goto LABEL_8;
      __nwlog_obj();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v30 = "nw_parameters_require_netagent_uuid";
      v12 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (!__nwlog_fault(v12, &type, &v27))
        goto LABEL_45;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_parameters_require_netagent_uuid";
          _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids", buf, 0xCu);
        }
      }
      else if (v27)
      {
        v23 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v13, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_parameters_require_netagent_uuid";
            v31 = 2082;
            v32 = (uint64_t)v23;
            _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v23);
          if (!v12)
            goto LABEL_9;
          goto LABEL_46;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_parameters_require_netagent_uuid";
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_parameters_require_netagent_uuid";
          _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_44;
    }
LABEL_8:
    xpc_array_set_uuid(v6, 0xFFFFFFFFFFFFFFFFLL, a2);
LABEL_9:

    return;
  }
  __nwlog_obj();
  v18 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v30 = "strict_calloc";
  v31 = 2048;
  v32 = 1;
  v33 = 2048;
  v34 = 144;
  v19 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v19))
  {
    free(v19);
    goto LABEL_6;
  }
  __break(1u);
}

void sub_18354F644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_required_netagent_uuids(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_uuids";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_32:
    if (v11)
      free(v11);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v3[13] + 176))
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      v23 = (uint64_t)&__block_descriptor_tmp_86211;
      v24 = MEMORY[0x1E0C813A0];
      if (xpc_array_apply(v5, applier))
      {
        v7 = xpc_retain(v5);
LABEL_12:
        v8 = *(_QWORD *)(v3[13] + 176);
        v9 = *(void **)(v8 + 72);
        *(_QWORD *)(v8 + 72) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v23 = 144;
  v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18354FA60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_preferred_netagent_uuids(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_netagent_uuids";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_preferred_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_32:
    if (v11)
      free(v11);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v3[13] + 176))
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      v23 = (uint64_t)&__block_descriptor_tmp_86211;
      v24 = MEMORY[0x1E0C813A0];
      if (xpc_array_apply(v5, applier))
      {
        v7 = xpc_retain(v5);
LABEL_12:
        v8 = *(_QWORD *)(v3[13] + 176);
        v9 = *(void **)(v8 + 96);
        *(_QWORD *)(v8 + 96) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v23 = 144;
  v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18354FE7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_avoided_netagent_uuids(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_uuids";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_avoided_netagent_uuids";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_32:
    if (v11)
      free(v11);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v3[13] + 176))
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      v23 = (uint64_t)&__block_descriptor_tmp_86211;
      v24 = MEMORY[0x1E0C813A0];
      if (xpc_array_apply(v5, applier))
      {
        v7 = xpc_retain(v5);
LABEL_12:
        v8 = *(_QWORD *)(v3[13] + 176);
        v9 = *(void **)(v8 + 120);
        *(_QWORD *)(v8 + 120) = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v23 = 144;
  v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_183550298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_service_class(nw_parameters_t parameters, nw_service_class_t service_class)
{
  nw_parameters_t v3;
  nw_parameters_t v4;
  Class isa;
  int v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_parameters_set_service_class";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_parameters_set_service_class";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_parameters_set_service_class";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v8)
          goto LABEL_11;
LABEL_46:
        free(v8);
        goto LABEL_11;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_parameters_set_service_class";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_parameters_set_service_class";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (service_class < 0xFF)
  {
    BYTE6(v3[11].isa) = service_class;
    switch(service_class)
    {
      case nw_service_class_best_effort:
        *((_DWORD *)v3[13].isa + 18) = 0;
        goto LABEL_11;
      case nw_service_class_background:
        isa = v3[13].isa;
        v6 = 200;
        goto LABEL_10;
      case nw_service_class_interactive_video:
        isa = v3[13].isa;
        v6 = 700;
        goto LABEL_10;
      case nw_service_class_interactive_voice:
        isa = v3[13].isa;
        v6 = 800;
        goto LABEL_10;
      case nw_service_class_responsive_data:
        isa = v3[13].isa;
        v6 = 300;
        goto LABEL_10;
      case nw_service_class_signaling:
        isa = v3[13].isa;
        v6 = 10002;
LABEL_10:
        *((_DWORD *)isa + 18) = v6;
        break;
      default:
        goto LABEL_11;
    }
    goto LABEL_11;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_parameters_set_service_class";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_45;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parameters_set_service_class";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX)", buf, 0xCu);
    }
    goto LABEL_44;
  }
  if (!v21)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parameters_set_service_class";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_44;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parameters_set_service_class";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX), no backtrace", buf, 0xCu);
    }
    goto LABEL_44;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_parameters_set_service_class";
    v25 = 2082;
    v26 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_46;
LABEL_11:

}

nw_service_class_t nw_parameters_get_service_class(nw_parameters_t parameters)
{
  nw_parameters_t v1;
  nw_parameters_t v2;
  nw_service_class_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = parameters;
  v2 = v1;
  if (v1)
  {
    v3 = BYTE6(v1[11].isa);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_service_class";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_service_class";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_service_class";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_service_class";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_service_class";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = nw_service_class_best_effort;
LABEL_3:

  return v3;
}

void nw_parameters_set_multipath_force_enable(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x2000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFDFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_multipath_force_enable";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_multipath_force_enable";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_multipath_force_enable";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_multipath_force_enable";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_multipath_force_enable";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

uint64_t nw_parameters_get_multipath_force_enable(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[99] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_multipath_force_enable";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_multipath_force_enable";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_multipath_force_enable";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_multipath_force_enable";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_multipath_force_enable";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_is_fallback(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x10000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFEFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_is_fallback";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_is_fallback";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_is_fallback";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_is_fallback";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_is_fallback";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

