void sub_183217654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t __nw_listener_start_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 128) == 0;
  return result;
}

void __nw_listener_set_state_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *id_string;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1)
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44199);
      v4 = (id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        v9 = 136446466;
        v10 = "nw_listener_set_state_changed_handler_block_invoke";
        v11 = 2082;
        v12 = id_string;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Cannot set state changed handler after cancel", (uint8_t *)&v9, 0x16u);
      }

    }
  }
  else
  {
    v6 = _Block_copy(*(const void **)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 80);
    *(_QWORD *)(v7 + 80) = v6;

  }
}

void __nw_listener_set_queue_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  NSObject *v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_listener_set_queue_block_invoke";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_listener_set_queue_block_invoke";
        v7 = "%{public}s Error in client: nw_listener_set_queue called after nw_listener_start";
LABEL_17:
        v11 = v5;
        v12 = v6;
        goto LABEL_18;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_listener_set_queue_block_invoke";
        v7 = "%{public}s Error in client: nw_listener_set_queue called after nw_listener_start, backtrace limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v9 = type;
      v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_19:

          if (!v4)
            goto LABEL_13;
          goto LABEL_12;
        }
        *(_DWORD *)buf = 136446210;
        v16 = "nw_listener_set_queue_block_invoke";
        v7 = "%{public}s Error in client: nw_listener_set_queue called after nw_listener_start, no backtrace";
        v11 = v5;
        v12 = v9;
LABEL_18:
        _os_log_impl(&dword_182FBE000, v11, v12, v7, buf, 0xCu);
        goto LABEL_19;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_listener_set_queue_block_invoke";
        v17 = 2082;
        v18 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s Error in client: nw_listener_set_queue called after nw_listener_start, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4)
    {
LABEL_13:
      v2 = *(_QWORD *)(a1 + 32);
      goto LABEL_14;
    }
LABEL_12:
    free(v4);
    goto LABEL_13;
  }
LABEL_14:
  objc_storeStrong((id *)(v2 + 64), *(id *)(a1 + 40));
}

uint64_t NWActivity.parentActivity.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[4];

  v1 = (uint64_t)nw_activity_copy_parent_activity(*(void **)(v0 + 16));
  if (v1)
  {
    v3[3] = swift_getObjectType();
    v3[0] = v1;
    v1 = swift_allocObject();
    NWActivity.init(_:)((uint64_t)v3);
  }
  return v1;
}

id nw_activity_copy_parent_activity(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[7];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_activity_copy_parent_activity";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_activity_copy_parent_activity";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_activity_copy_parent_activity";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_activity_copy_parent_activity";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_activity_copy_parent_activity";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t NWActivity.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  void *v3;
  unsigned int label;
  uint64_t result;
  void *v6;
  _BYTE v7[32];

  sub_18321887C(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDB9D0);
  if (swift_dynamicCast())
  {
    v1[2] = v6;
    v3 = (void *)swift_unknownObjectRetain();
    v1[3] = nw_activity_get_domain(v3);
    label = nw_activity_get_label(v6);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_2(a1);
    v1[4] = label;
    return (uint64_t)v1;
  }
  else
  {
    result = sub_183B91F5C();
    __break(1u);
  }
  return result;
}

uint64_t nw_activity_get_label(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((v1[33] & 2) == 0)
    {
      v3 = v1[26];
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    v22 = "nw_activity_get_label";
    v23 = 2082;
    v24 = "Cannot get label from lightweight representation of an activity";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_activity_get_label";
          v23 = 2082;
          v24 = "Cannot get label from lightweight representation of an activity";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446722;
            v22 = "nw_activity_get_label";
            v23 = 2082;
            v24 = "Cannot get label from lightweight representation of an activity";
            v25 = 2082;
            v26 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          goto LABEL_37;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_activity_get_label";
          v23 = 2082;
          v24 = "Cannot get label from lightweight representation of an activity";
          _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_activity_get_label";
          v23 = 2082;
          v24 = "Cannot get label from lightweight representation of an activity";
          _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
      }
      goto LABEL_36;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_activity_get_label";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_activity_get_label";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (v19)
      {
        v11 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_activity_get_label";
            v23 = 2082;
            v24 = v11;
            _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          goto LABEL_37;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_activity_get_label";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_activity_get_label";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_36:

    }
  }
LABEL_37:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_4:

  return v3;
}

uint64_t nw_activity_get_domain(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((v1[33] & 2) == 0)
    {
      v3 = v1[27];
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    v22 = "nw_activity_get_domain";
    v23 = 2082;
    v24 = "Cannot get domain from lightweight representation of an activity";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_activity_get_domain";
          v23 = 2082;
          v24 = "Cannot get domain from lightweight representation of an activity";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446722;
            v22 = "nw_activity_get_domain";
            v23 = 2082;
            v24 = "Cannot get domain from lightweight representation of an activity";
            v25 = 2082;
            v26 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          goto LABEL_37;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_activity_get_domain";
          v23 = 2082;
          v24 = "Cannot get domain from lightweight representation of an activity";
          _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_activity_get_domain";
          v23 = 2082;
          v24 = "Cannot get domain from lightweight representation of an activity";
          _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
      }
      goto LABEL_36;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_activity_get_domain";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_activity_get_domain";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (v19)
      {
        v11 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_activity_get_domain";
            v23 = 2082;
            v24 = v11;
            _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          goto LABEL_37;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_activity_get_domain";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_activity_get_domain";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_36:

    }
  }
LABEL_37:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_4:

  return v3;
}

uint64_t __swift_destroy_boxed_opaque_existential_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_18321887C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t nw_dispatch_data_copyout_from_offset(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD applier[8];
  os_log_type_t type[8];
  os_log_type_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE buf[24];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v19 = 0;
    *(_QWORD *)type = 0;
    v14 = type;
    v15 = 0x2000000000;
    v16 = a4;
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 0x40000000;
    applier[2] = __nw_dispatch_data_copyout_from_offset_block_invoke;
    applier[3] = &unk_1E14A3470;
    applier[4] = type;
    applier[5] = buf;
    applier[6] = a3;
    applier[7] = a2;
    dispatch_data_apply(a1, applier);
    v4 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(type, 8);
    _Block_object_dispose(buf, 8);
    return v4;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_dispatch_data_copyout_from_offset";
  v6 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v6, type, &v17))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type[0];
      if (os_log_type_enabled(v7, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_dispatch_data_copyout_from_offset";
        v9 = "%{public}s called with null data";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = type[0];
      v11 = os_log_type_enabled(v7, type[0]);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_dispatch_data_copyout_from_offset";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_dispatch_data_copyout_from_offset";
        v9 = "%{public}s called with null data, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v7 = __nwlog_obj();
      v8 = type[0];
      if (os_log_type_enabled(v7, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_dispatch_data_copyout_from_offset";
        v9 = "%{public}s called with null data, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v6)
    free(v6);
  return 0;
}

BOOL __nw_dispatch_data_copyout_from_offset_block_invoke(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  BOOL v11;
  unint64_t v12;
  size_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (a5 + a3 <= v5)
    return 1;
  v7 = a1[6];
  v8 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v9 = v7 > v8;
  v10 = v7 - v8;
  if (!v9)
    return 0;
  v11 = v5 >= a3;
  v12 = v5 - a3;
  if (!v11)
    v12 = 0;
  if (v10 >= a5 - v12)
    v13 = a5 - v12;
  else
    v13 = v10;
  memcpy((void *)(a1[7] + v8), (const void *)(a4 + v12), v13);
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v13;
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) += v13;
  return *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) < a1[6];
}

void __39__nw_listener_inbox_socket_description__block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *description;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  CFStringRef v8;
  uint64_t v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  if (!v3)
  {
    description = nw_endpoint_get_description(*(void **)(v2 + 32));
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(v5 + 40);
    if (v6)
      v7 = (const char *)(v6 + 104);
    else
      v7 = "<NULL>";
    v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("socket: %d, endpoint: %s, interface: %s"), *(unsigned int *)(v5 + 80), description, v7);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(v9 + 24);
    *(_QWORD *)(v9 + 24) = v8;

    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3);
}

uint64_t _s7Network11NWInterfaceV13InterfaceTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_183218DD8 + 4 * byte_183BA1687[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_183218E0C + 4 * byte_183BA1682[v4]))();
}

uint64_t sub_183218E0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183218E14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183218E1CLL);
  return result;
}

uint64_t sub_183218E28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183218E30);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_183218E34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183218E3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

size_t nw_log_ring_copyout(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a3)
    {
      v4 = (char *)a1 + 17;
      *a2 = 1;
      v5 = a2 + 1;
      v6 = a3 - 1;
      if (a1[*((_BYTE *)a1 + 16) == 0] <= (unint64_t)(a3 - 1))
      {
        if (*((_BYTE *)a1 + 16))
        {
          v11 = a1[1];
          v12 = *a1 - v11;
          memcpy(v5, &v4[v11], v12);
        }
        else
        {
          v12 = 0;
        }
        memcpy(&v5[v12], v4, a1[1]);
        v8 = a1[1] + v12;
      }
      else
      {
        v7 = a1[1];
        if (v6 >= v7)
          v8 = a1[1];
        else
          v8 = a3 - 1;
        memcpy(&v5[v6 - v8], &v4[v7 - v8], v8);
        if (v6 > v7 && *((_BYTE *)a1 + 16))
        {
          v9 = *a1;
          if (v6 - v8 >= *a1 - a1[1])
            v10 = *a1 - a1[1];
          else
            v10 = v6 - v8;
          memcpy(v5, &v4[v9 - v10], v10);
          v8 += v10;
        }
      }
      return v8 + 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_log_ring_copyout";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_log_ring_copyout";
        v17 = "%{public}s called with null maxLength";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (!v22)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_log_ring_copyout";
        v17 = "%{public}s called with null maxLength, backtrace limit exceeded";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_log_ring_copyout";
        v17 = "%{public}s called with null maxLength, no backtrace";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_log_ring_copyout";
      v26 = 2082;
      v27 = backtrace_string;
      v20 = "%{public}s called with null maxLength, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_log_ring_copyout";
  v14 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v14, &type, &v22))
    goto LABEL_46;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v22)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_log_ring_copyout";
        v17 = "%{public}s called with null bufferOut, backtrace limit exceeded";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v19 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_log_ring_copyout";
        v17 = "%{public}s called with null bufferOut, no backtrace";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_log_ring_copyout";
      v26 = 2082;
      v27 = backtrace_string;
      v20 = "%{public}s called with null bufferOut, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v15, v16, v20, buf, 0x16u);
    }
LABEL_36:
    free(backtrace_string);
    goto LABEL_46;
  }
  v15 = __nwlog_obj();
  v16 = type;
  if (os_log_type_enabled(v15, type))
  {
    *(_DWORD *)buf = 136446210;
    v25 = "nw_log_ring_copyout";
    v17 = "%{public}s called with null bufferOut";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
  }
LABEL_46:
  if (v14)
    free(v14);
  return 0;
}

uint64_t _s7Network10NWListenerC5StateO2eeoiySbAE_AEtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  int v11;

  v2 = *((unsigned __int8 *)a1 + 4);
  v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  v5 = v2 >> 6;
  if (!v5)
  {
    if (((v4 >> 38) & 3) != 0)
      return 0;
    LODWORD(v7) = BYTE4(v4);
    if (HIDWORD(v3))
    {
      if (HIDWORD(v3) == 1)
        return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
      return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
    }
LABEL_25:
    if (!(_DWORD)v7)
    {
      v11 = sub_183B915F0();
      if (v11 == sub_183B915F0())
        return 1;
    }
    return 0;
  }
  if (v5 == 1)
  {
    if (((v4 >> 38) & 3) != 1)
      return 0;
    v6 = HIDWORD(v3) & 0x3F;
    v7 = HIDWORD(v4) & 0x3F;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 1)
        return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
      return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
    }
    goto LABEL_25;
  }
  v10 = 0x8000000000;
  if (v3 == 0x8000000000 || (v10 = 0x8000000001, v3 == 0x8000000001))
  {
    if ((v4 & 0xFFFFFFFFFFLL) == v10)
      return 1;
  }
  else if ((v4 & 0xFFFFFFFFFFLL) == 0x8000000002)
  {
    return 1;
  }
  return 0;
}

id nw_agent_client_copy_endpoint(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[4];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_agent_client_copy_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_agent_client_copy_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null client, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t tcp_connection_get_socket(void *a1, int a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t os_unfair_lock_opaque;
  NSObject *v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  NSObject *v16;
  os_log_type_t v17;
  int connected_socket;
  char v19;
  NSObject *v20;
  char *v21;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v26 = "tcp_connection_get_socket";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v8, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v26 = "tcp_connection_get_socket";
        v11 = "%{public}s called with null connection";
LABEL_25:
        v16 = v9;
        v17 = v10;
        goto LABEL_26;
      }
      if (!v23)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v26 = "tcp_connection_get_socket";
        v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_25;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_27:

          if (!v8)
            goto LABEL_22;
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        v26 = "tcp_connection_get_socket";
        v11 = "%{public}s called with null connection, no backtrace";
        v16 = v9;
        v17 = v14;
LABEL_26:
        _os_log_impl(&dword_182FBE000, v16, v17, v11, buf, 0xCu);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "tcp_connection_get_socket";
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8)
    {
LABEL_22:
      os_unfair_lock_opaque = 0xFFFFFFFFLL;
      goto LABEL_37;
    }
LABEL_21:
    free(v8);
    goto LABEL_22;
  }
  if (*(_QWORD *)&v3[4]._os_unfair_lock_opaque)
  {
    os_unfair_lock_lock(v3 + 30);
    os_unfair_lock_opaque = v4[29]._os_unfair_lock_opaque;
    if ((_DWORD)os_unfair_lock_opaque == -1)
    {
      if (SBYTE2(v4[39]._os_unfair_lock_opaque) < 0)
      {
        connected_socket = nw_connection_get_connected_socket(*(void **)&v4[4]._os_unfair_lock_opaque);
        if (connected_socket >= -1)
        {
          os_unfair_lock_opaque = dup(connected_socket);
          v4[29]._os_unfair_lock_opaque = os_unfair_lock_opaque;
          goto LABEL_31;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "tcp_connection_get_socket";
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s Cannot get socket on a connection for which client socket access is disallowed.", buf, 0xCu);
        }

      }
      os_unfair_lock_opaque = 0xFFFFFFFFLL;
    }
LABEL_31:
    if (a2)
      v19 = 8;
    else
      v19 = 0;
    HIBYTE(v4[39]._os_unfair_lock_opaque) = HIBYTE(v4[39]._os_unfair_lock_opaque) & 0xF7 | v19;
    os_unfair_lock_unlock(v4 + 30);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(char **)&v4[24]._os_unfair_lock_opaque;
      *(_DWORD *)buf = 136446978;
      v26 = "tcp_connection_get_socket";
      v27 = 2048;
      v28 = v21;
      v29 = 1024;
      v30 = os_unfair_lock_opaque;
      v31 = 1024;
      v32 = a2;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %llu dupfd: %d, takeownership: %{BOOL}d", buf, 0x22u);
    }

    goto LABEL_37;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v26 = "tcp_connection_get_socket";
    _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
  }

  os_unfair_lock_opaque = 0xFFFFFFFFLL;
LABEL_37:

  return os_unfair_lock_opaque;
}

uint64_t nw_connection_get_connected_socket(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v19 = -1;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_get_connected_socket_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v14 = v1;
    v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_get_connected_socket_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_get_connected_socket";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_get_connected_socket";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_get_connected_socket";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_get_connected_socket";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_get_connected_socket";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0xFFFFFFFFLL;
LABEL_3:

  return v3;
}

void __nw_connection_get_connected_socket_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  int v5;
  id v6;
  char os_unfair_lock_opaque;
  NWConcrete_nw_parameters *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  char *v12;
  uint64_t v13;
  id v14;
  int v15;
  const char *v16;
  void *v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  id v22;
  int v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  const char *backtrace_string;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  os_log_type_t v37;
  int v38;
  os_log_type_t v39;
  int v40;
  os_log_type_t v41;
  int v42;
  os_log_type_t v43;
  int v44;
  _QWORD v45[5];
  char v46;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v6 = nw_endpoint_handler_copy_connected_socket_wrapper(*(void **)(v2 + 144));
    if (!v6)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v9 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v9 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v11 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          v49 = "nw_connection_get_connected_socket_block_invoke";
          v50 = 1024;
          v51 = v11;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection has no connected socket", buf, 0x12u);
        }

      }
      v4 = 0;
      goto LABEL_75;
    }
    v4 = (os_unfair_lock_s *)v6;
    os_unfair_lock_lock(v4 + 3);
    os_unfair_lock_opaque = v4[6]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v4 + 3);

    v8 = *(NWConcrete_nw_parameters **)(*(_QWORD *)(a1 + 32) + 16);
    if ((os_unfair_lock_opaque & 1) == 0)
    {
      if ((nw_parameters_get_allow_socket_access(v8) & 1) != 0)
      {
        v45[0] = MEMORY[0x1E0C809B0];
        v45[1] = 3221225472;
        v45[2] = __nw_connection_get_connected_socket_block_invoke_12;
        v45[3] = &unk_1E14AB578;
        v45[4] = *(_QWORD *)(a1 + 40);
        nw_fd_wrapper_get_fd(v4, v45);
LABEL_75:

        return;
      }
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (!v21 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v21 + 104)))
        goto LABEL_75;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v22 = (id)gconnectionLogObj;
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v49 = "nw_connection_get_connected_socket_block_invoke";
      v50 = 1024;
      v51 = v23;
      v12 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v46 = 0;
      if (__nwlog_fault(v12, &type, &v46))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v24 = (id)gconnectionLogObj;
          v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            v26 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v49 = "nw_connection_get_connected_socket_block_invoke";
            v50 = 1024;
            v51 = v26;
            _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s [C%u] parameters do not allow socket access", buf, 0x12u);
          }
        }
        else if (v46)
        {
          backtrace_string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            v33 = (char *)backtrace_string;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v34 = (id)gconnectionLogObj;
            v35 = type;
            if (os_log_type_enabled(v34, type))
            {
              v36 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
              *(_DWORD *)buf = 136446722;
              v49 = "nw_connection_get_connected_socket_block_invoke";
              v50 = 1024;
              v51 = v36;
              v52 = 2082;
              v53 = v33;
              _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s [C%u] parameters do not allow socket access, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v33);
            if (!v12)
              goto LABEL_75;
            goto LABEL_74;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v24 = (id)gconnectionLogObj;
          v43 = type;
          if (os_log_type_enabled(v24, type))
          {
            v44 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v49 = "nw_connection_get_connected_socket_block_invoke";
            v50 = 1024;
            v51 = v44;
            _os_log_impl(&dword_182FBE000, v24, v43, "%{public}s [C%u] parameters do not allow socket access, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v24 = (id)gconnectionLogObj;
          v41 = type;
          if (os_log_type_enabled(v24, type))
          {
            v42 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v49 = "nw_connection_get_connected_socket_block_invoke";
            v50 = 1024;
            v51 = v42;
            _os_log_impl(&dword_182FBE000, v24, v41, "%{public}s [C%u] parameters do not allow socket access, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
LABEL_73:
      if (!v12)
        goto LABEL_75;
LABEL_74:
      free(v12);
      goto LABEL_75;
    }
    v12 = nw_parameters_copy_description_internal(v8, 1);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (!v13 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v13 + 104)))
      goto LABEL_73;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = (id)gconnectionLogObj;
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
    if (v12)
      v16 = v12;
    else
      v16 = "";
    *(_DWORD *)buf = 136446722;
    v49 = "nw_connection_get_connected_socket_block_invoke";
    v50 = 1024;
    v51 = v15;
    v52 = 2082;
    v53 = v16;
    v17 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault((const char *)v17, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v18 = (id)gconnectionLogObj;
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          v20 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446722;
          v49 = "nw_connection_get_connected_socket_block_invoke";
          v50 = 1024;
          v51 = v20;
          v52 = 2082;
          v53 = v16;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s [C%u] socket is guarded. parameters: %{public}s", buf, 0x1Cu);
        }
      }
      else if (v46)
      {
        v27 = __nw_create_backtrace_string();
        if (v27)
        {
          v28 = (char *)v27;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v29 = (id)gconnectionLogObj;
          v30 = type;
          if (os_log_type_enabled(v29, type))
          {
            v31 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446978;
            v49 = "nw_connection_get_connected_socket_block_invoke";
            v50 = 1024;
            v51 = v31;
            v52 = 2082;
            v53 = v16;
            v54 = 2082;
            v55 = v28;
            _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s [C%u] socket is guarded. parameters: %{public}s, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(v28);
          if (!v17)
            goto LABEL_73;
LABEL_72:
          free(v17);
          goto LABEL_73;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v18 = (id)gconnectionLogObj;
        v39 = type;
        if (os_log_type_enabled(v18, type))
        {
          v40 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446722;
          v49 = "nw_connection_get_connected_socket_block_invoke";
          v50 = 1024;
          v51 = v40;
          v52 = 2082;
          v53 = v16;
          _os_log_impl(&dword_182FBE000, v18, v39, "%{public}s [C%u] socket is guarded. parameters: %{public}s, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v18 = (id)gconnectionLogObj;
        v37 = type;
        if (os_log_type_enabled(v18, type))
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446722;
          v49 = "nw_connection_get_connected_socket_block_invoke";
          v50 = 1024;
          v51 = v38;
          v52 = 2082;
          v53 = v16;
          _os_log_impl(&dword_182FBE000, v18, v37, "%{public}s [C%u] socket is guarded. parameters: %{public}s, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
    if (!v17)
      goto LABEL_73;
    goto LABEL_72;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (os_unfair_lock_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v49 = "nw_connection_get_connected_socket_block_invoke";
      v50 = 1024;
      v51 = v5;
      _os_log_impl(&dword_182FBE000, (os_log_t)v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_get_connected_socket on unconnected nw_connection", buf, 0x12u);
    }
    goto LABEL_75;
  }
}

void sub_18321A7C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_fd_wrapper_get_fd(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  uint64_t (**v4)(_QWORD);
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_fd_wrapper_get_fd";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_fd_wrapper_get_fd";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null wrapper", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_fd_wrapper_get_fd";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null wrapper, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_fd_wrapper_get_fd";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null wrapper, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_fd_wrapper_get_fd";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null wrapper, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v8)
      free(v8);
    goto LABEL_5;
  }
  os_unfair_lock_lock(v3 + 3);
  if ((v3[2]._os_unfair_lock_opaque & 0x80000000) != 0)
  {
    os_unfair_lock_unlock(v3 + 3);
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v5 = v4[2](v4);
  os_unfair_lock_unlock(v3 + 3);
LABEL_6:

  return v5;
}

void sub_18321AAB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_connected_socket_wrapper(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 28);
    if (v2[29]._os_unfair_lock_opaque == 2)
      v3 = nw_endpoint_flow_copy_connected_socket_wrapper(*(void **)&v2[62]._os_unfair_lock_opaque);
    else
      v3 = 0;
    os_unfair_lock_unlock(v2 + 28);
    goto LABEL_6;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_copy_connected_socket_wrapper";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_6:

  return v3;
}

void sub_18321AD88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_endpoint_flow_copy_connected_socket_wrapper(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  id v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 220);
    if ((v2[8]._os_unfair_lock_opaque & 2) != 0 || (v2[8]._os_unfair_lock_opaque & 0x100) != 0)
    {
      v3 = *(id *)&v2[222]._os_unfair_lock_opaque;
    }
    else
    {
      if (!*(_QWORD *)&v2[234]._os_unfair_lock_opaque)
      {
        v4 = 0;
        goto LABEL_8;
      }
      v3 = (id)nw_endpoint_handler_copy_connected_socket_wrapper();
    }
    v4 = v3;
LABEL_8:
    os_unfair_lock_unlock(v2 + 220);
    goto LABEL_9;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_flow_copy_connected_socket_wrapper";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_9:

  return v4;
}

void sub_18321B070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_network_agent_ctl_copy_received_agent_message(int a1, _BYTE *a2)
{
  ssize_t v4;
  ssize_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  const char *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  char *v15;
  _BOOL4 v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint32_t v20;
  int64_t v21;
  ssize_t v22;
  ssize_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  int v28;
  _BOOL4 v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint32_t v35;
  NSObject *v36;
  os_log_type_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint32_t v40;
  int v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  char *v45;
  _BOOL4 v46;
  char *v48;
  _BOOL4 v49;
  NSObject *v50;
  os_log_type_t v51;
  uint32_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  char v56;
  os_log_type_t v57[8];
  uint64_t v58;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  _BYTE v63[28];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_network_agent_ctl_copy_received_agent_message";
    v6 = _os_log_send_and_compose_impl();
    v57[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v6, v57, &type))
      goto LABEL_78;
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      v53 = __nwlog_obj();
      v54 = v57[0];
      if (!os_log_type_enabled(v53, v57[0]))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v9 = "%{public}s called with null no_message_available";
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v53 = __nwlog_obj();
      v54 = v57[0];
      v55 = os_log_type_enabled(v53, v57[0]);
      if (backtrace_string)
      {
        if (!v55)
        {
LABEL_64:
          free(backtrace_string);
          if (!v6)
            return 0;
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446466;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 2082;
        *(_QWORD *)v63 = backtrace_string;
        v32 = "%{public}s called with null no_message_available, dumping backtrace:%{public}s";
        v33 = v53;
        v34 = v54;
        v35 = 22;
        goto LABEL_63;
      }
      if (!v55)
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v9 = "%{public}s called with null no_message_available, no backtrace";
    }
    else
    {
      v53 = __nwlog_obj();
      v54 = v57[0];
      if (!os_log_type_enabled(v53, v57[0]))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v9 = "%{public}s called with null no_message_available, backtrace limit exceeded";
    }
    v38 = v53;
    v39 = v54;
    v40 = 12;
    goto LABEL_77;
  }
  *a2 = 0;
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v61 = "nw_network_agent_ctl_copy_received_agent_message";
    v62 = 1024;
    *(_DWORD *)v63 = a1;
    v6 = _os_log_send_and_compose_impl();
    v57[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v6, v57, &type))
      goto LABEL_78;
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = v57[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v57[0]))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 1024;
      *(_DWORD *)v63 = a1;
      v9 = "%{public}s Trying to read from invalid network agent socket %d";
    }
    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = v57[0];
      v16 = os_log_type_enabled((os_log_t)gLogObj, v57[0]);
      if (v15)
      {
        if (!v16)
          goto LABEL_35;
        *(_DWORD *)buf = 136446722;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 1024;
        *(_DWORD *)v63 = a1;
        *(_WORD *)&v63[4] = 2082;
        *(_QWORD *)&v63[6] = v15;
        v17 = "%{public}s Trying to read from invalid network agent socket %d, dumping backtrace:%{public}s";
        v18 = v10;
        v19 = v11;
        v20 = 28;
        goto LABEL_34;
      }
      if (!v16)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 1024;
      *(_DWORD *)v63 = a1;
      v9 = "%{public}s Trying to read from invalid network agent socket %d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = v57[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v57[0]))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 1024;
      *(_DWORD *)v63 = a1;
      v9 = "%{public}s Trying to read from invalid network agent socket %d, backtrace limit exceeded";
    }
    v38 = v10;
    v39 = v11;
LABEL_50:
    v40 = 18;
LABEL_77:
    _os_log_impl(&dword_182FBE000, v38, v39, v9, buf, v40);
    goto LABEL_78;
  }
  *(_QWORD *)v57 = 0;
  v58 = 0;
  v4 = recv(a1, v57, 0x10uLL, 2);
  if (v4 <= 15)
  {
    v5 = v4;
    if ((v4 & 0x8000000000000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 2048;
      *(_QWORD *)v63 = v5;
      *(_WORD *)&v63[8] = 2048;
      *(_QWORD *)&v63[10] = 16;
      v6 = _os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v56 = 0;
      if (!__nwlog_fault((const char *)v6, &type, &v56))
        goto LABEL_78;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = gLogObj;
        v8 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_78;
        *(_DWORD *)buf = 136446722;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 2048;
        *(_QWORD *)v63 = v5;
        *(_WORD *)&v63[8] = 2048;
        *(_QWORD *)&v63[10] = 16;
        v9 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd)";
LABEL_73:
        v38 = v7;
        v39 = v8;
        v40 = 32;
        goto LABEL_77;
      }
      if (!v56)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = gLogObj;
        v8 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_78;
        *(_DWORD *)buf = 136446722;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 2048;
        *(_QWORD *)v63 = v5;
        *(_WORD *)&v63[8] = 2048;
        *(_QWORD *)&v63[10] = 16;
        v9 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd), backtrace limit exceeded";
        goto LABEL_73;
      }
      v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      v29 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v15)
      {
        if (!v29)
          goto LABEL_78;
        *(_DWORD *)buf = 136446722;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 2048;
        *(_QWORD *)v63 = v5;
        *(_WORD *)&v63[8] = 2048;
        *(_QWORD *)&v63[10] = 16;
        v9 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd), no backtrace";
        goto LABEL_73;
      }
      if (!v29)
      {
LABEL_35:
        free(v15);
        if (!v6)
          return 0;
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446978;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 2048;
      *(_QWORD *)v63 = v5;
      *(_WORD *)&v63[8] = 2048;
      *(_QWORD *)&v63[10] = 16;
      *(_WORD *)&v63[18] = 2082;
      *(_QWORD *)&v63[20] = v15;
      v17 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd), dumping backtrace:%{public}s";
      v18 = v7;
      v19 = v8;
      v20 = 42;
LABEL_34:
      _os_log_impl(&dword_182FBE000, v18, v19, v17, buf, v20);
      goto LABEL_35;
    }
    v28 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v28 == 35)
    {
      v6 = 0;
      *a2 = 1;
      return v6;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v61 = "nw_network_agent_ctl_copy_received_agent_message";
    v62 = 1024;
    *(_DWORD *)v63 = v28;
    v6 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v56 = 0;
    if (!__nwlog_fault((const char *)v6, &type, &v56))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = gLogObj;
      v37 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 1024;
      *(_DWORD *)v63 = v28;
      v9 = "%{public}s Read network agent message header failed %{darwin.errno}d";
      goto LABEL_94;
    }
    if (v56)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = type;
      v44 = os_log_type_enabled(v36, type);
      if (backtrace_string)
      {
        if (!v44)
          goto LABEL_64;
        *(_DWORD *)buf = 136446722;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 1024;
        *(_DWORD *)v63 = v28;
        *(_WORD *)&v63[4] = 2082;
        *(_QWORD *)&v63[6] = backtrace_string;
        v32 = "%{public}s Read network agent message header failed %{darwin.errno}d, dumping backtrace:%{public}s";
        v33 = v36;
        v34 = v37;
        v35 = 28;
        goto LABEL_63;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 1024;
        *(_DWORD *)v63 = v28;
        v9 = "%{public}s Read network agent message header failed %{darwin.errno}d, no backtrace";
        goto LABEL_94;
      }
    }
    else
    {
      v36 = __nwlog_obj();
      v37 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446466;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 1024;
        *(_DWORD *)v63 = v28;
        v9 = "%{public}s Read network agent message header failed %{darwin.errno}d, backtrace limit exceeded";
LABEL_94:
        v38 = v36;
        v39 = v37;
        goto LABEL_50;
      }
    }
LABEL_78:
    if (!v6)
      return 0;
LABEL_79:
    free((void *)v6);
    return 0;
  }
  v12 = HIDWORD(v58);
  if (HIDWORD(v58) >= 0x10E9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    v61 = "nw_network_agent_ctl_copy_received_agent_message";
    v62 = 1024;
    *(_DWORD *)v63 = v12;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = 4328;
    v6 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v56 = 0;
    if (!__nwlog_fault((const char *)v6, &type, &v56))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446722;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 1024;
      *(_DWORD *)v63 = v12;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = 4328;
      v9 = "%{public}s kernel returned invalid message payload length %u > %u";
LABEL_76:
      v38 = v13;
      v39 = v14;
      v40 = 24;
      goto LABEL_77;
    }
    if (!v56)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446722;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 1024;
      *(_DWORD *)v63 = v12;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = 4328;
      v9 = "%{public}s kernel returned invalid message payload length %u > %u, backtrace limit exceeded";
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = gLogObj;
    v14 = type;
    v31 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v31)
        goto LABEL_78;
      *(_DWORD *)buf = 136446722;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 1024;
      *(_DWORD *)v63 = v12;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = 4328;
      v9 = "%{public}s kernel returned invalid message payload length %u > %u, no backtrace";
      goto LABEL_76;
    }
    if (!v31)
      goto LABEL_64;
    *(_DWORD *)buf = 136446978;
    v61 = "nw_network_agent_ctl_copy_received_agent_message";
    v62 = 1024;
    *(_DWORD *)v63 = v12;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = 4328;
    *(_WORD *)&v63[10] = 2082;
    *(_QWORD *)&v63[12] = backtrace_string;
    v32 = "%{public}s kernel returned invalid message payload length %u > %u, dumping backtrace:%{public}s";
    v33 = v13;
    v34 = v14;
    v35 = 34;
LABEL_63:
    _os_log_impl(&dword_182FBE000, v33, v34, v32, buf, v35);
    goto LABEL_64;
  }
  v21 = HIDWORD(v58) + 16;
  v6 = nw_calloc_type<unsigned char>(v21);
  v22 = recv(a1, (void *)v6, v12 + 16, 0);
  if (v22 < v21)
  {
    v23 = v22;
    if ((v22 & 0x8000000000000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 2048;
      *(_QWORD *)v63 = v23;
      *(_WORD *)&v63[8] = 2048;
      *(_QWORD *)&v63[10] = v21;
      v24 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v56 = 0;
      if (!__nwlog_fault(v24, &type, &v56))
        goto LABEL_104;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = gLogObj;
        v26 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_104;
        *(_DWORD *)buf = 136446722;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 2048;
        *(_QWORD *)v63 = v23;
        *(_WORD *)&v63[8] = 2048;
        *(_QWORD *)&v63[10] = v21;
        v27 = "%{public}s Not enough bytes available to read network agent message (%zd < %zd)";
LABEL_97:
        v50 = v25;
        v51 = v26;
        v52 = 32;
LABEL_103:
        _os_log_impl(&dword_182FBE000, v50, v51, v27, buf, v52);
        goto LABEL_104;
      }
      if (!v56)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (!os_log_type_enabled(v25, type))
          goto LABEL_104;
        *(_DWORD *)buf = 136446722;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 2048;
        *(_QWORD *)v63 = v23;
        *(_WORD *)&v63[8] = 2048;
        *(_QWORD *)&v63[10] = v21;
        v27 = "%{public}s Not enough bytes available to read network agent message (%zd < %zd), backtrace limit exceeded";
        goto LABEL_97;
      }
      v45 = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v46 = os_log_type_enabled(v25, type);
      if (!v45)
      {
        if (!v46)
          goto LABEL_104;
        *(_DWORD *)buf = 136446722;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 2048;
        *(_QWORD *)v63 = v23;
        *(_WORD *)&v63[8] = 2048;
        *(_QWORD *)&v63[10] = v21;
        v27 = "%{public}s Not enough bytes available to read network agent message (%zd < %zd), no backtrace";
        goto LABEL_97;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446978;
        v61 = "nw_network_agent_ctl_copy_received_agent_message";
        v62 = 2048;
        *(_QWORD *)v63 = v23;
        *(_WORD *)&v63[8] = 2048;
        *(_QWORD *)&v63[10] = v21;
        *(_WORD *)&v63[18] = 2082;
        *(_QWORD *)&v63[20] = v45;
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s Not enough bytes available to read network agent message (%zd < %zd), dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v45);
LABEL_104:
      if (!v24)
        goto LABEL_106;
      goto LABEL_105;
    }
    v41 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    v61 = "nw_network_agent_ctl_copy_received_agent_message";
    v62 = 2048;
    *(_QWORD *)v63 = v12 + 16;
    *(_WORD *)&v63[8] = 1024;
    *(_DWORD *)&v63[10] = v41;
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v56 = 0;
    if (!__nwlog_fault(v24, &type, &v56))
      goto LABEL_104;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v42 = __nwlog_obj();
      v43 = type;
      if (!os_log_type_enabled(v42, type))
        goto LABEL_104;
      *(_DWORD *)buf = 136446722;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 2048;
      *(_QWORD *)v63 = v21;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v41;
      v27 = "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d";
    }
    else if (v56)
    {
      v48 = (char *)__nw_create_backtrace_string();
      v42 = __nwlog_obj();
      v43 = type;
      v49 = os_log_type_enabled(v42, type);
      if (v48)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446978;
          v61 = "nw_network_agent_ctl_copy_received_agent_message";
          v62 = 2048;
          *(_QWORD *)v63 = v21;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v41;
          *(_WORD *)&v63[14] = 2082;
          *(_QWORD *)&v63[16] = v48;
          _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v48);
        if (!v24)
        {
LABEL_106:
          if (!v6)
            return v6;
          goto LABEL_79;
        }
LABEL_105:
        free(v24);
        goto LABEL_106;
      }
      if (!v49)
        goto LABEL_104;
      *(_DWORD *)buf = 136446722;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 2048;
      *(_QWORD *)v63 = v21;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v41;
      v27 = "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d, no backtrace";
    }
    else
    {
      v42 = __nwlog_obj();
      v43 = type;
      if (!os_log_type_enabled(v42, type))
        goto LABEL_104;
      *(_DWORD *)buf = 136446722;
      v61 = "nw_network_agent_ctl_copy_received_agent_message";
      v62 = 2048;
      *(_QWORD *)v63 = v21;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v41;
      v27 = "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d, backtrace limit exceeded";
    }
    v50 = v42;
    v51 = v43;
    v52 = 28;
    goto LABEL_103;
  }
  return v6;
}

uint64_t NWActivity.token.getter()
{
  uint64_t v0;
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = 0uLL;
  nw_activity_get_token(*(void **)(v0 + 16), &v2);
  return sub_183B91488();
}

void nw_activity_get_token(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_activity_get_token";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_activity_get_token";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_activity_get_token";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_activity_get_token";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_activity_get_token";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if ((v3[132] & 4) != 0)
  {
    *a2 = *(_OWORD *)(v3 + 8);
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446466;
  v22 = "nw_activity_get_token";
  v23 = 2082;
  v24 = "Cannot get token before activation";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_activity_get_token";
      v23 = 2082;
      v24 = "Cannot get token before activation";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_activity_get_token";
      v23 = 2082;
      v24 = "Cannot get token before activation";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_activity_get_token";
      v23 = 2082;
      v24 = "Cannot get token before activation";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446722;
    v22 = "nw_activity_get_token";
    v23 = 2082;
    v24 = "Cannot get token before activation";
    v25 = 2082;
    v26 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void nw_protocol_instance_async(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_instance_async";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_protocol_instance_async";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v7)
          goto LABEL_5;
LABEL_56:
        free(v7);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  v5 = (void *)v3[15];
  if (!v5)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_instance_async";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null instance->context", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_182FBE000, v8, v23, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v17 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v8, type);
    if (!v17)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_protocol_instance_async";
      v29 = 2082;
      v30 = v17;
      _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v4)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_instance_async";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null block", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_182FBE000, v8, v24, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v17 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v8, type);
    if (!v17)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_instance_async";
        _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null block, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_protocol_instance_async";
      v29 = 2082;
      v30 = v17;
      _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v17);
    if (!v7)
      goto LABEL_5;
    goto LABEL_56;
  }
  nw_queue_context_async(v5, v4);
LABEL_5:

}

void sub_18321CD24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void tcp_connection_set_proxies(void *a1, void *a2)
{
  void **v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  NSObject *v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v21 = "tcp_connection_set_proxies";
    v9 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault((const char *)v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_23;
        *(_DWORD *)buf = 136446210;
        v21 = "tcp_connection_set_proxies";
        v12 = "%{public}s called with null connection";
LABEL_21:
        v16 = v10;
        v17 = v11;
        goto LABEL_22;
      }
      if (!v18)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_23;
        *(_DWORD *)buf = 136446210;
        v21 = "tcp_connection_set_proxies";
        v12 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v14 = type;
      v15 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_23:

          if (!v9)
            goto LABEL_25;
LABEL_24:
          free(v9);
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        v21 = "tcp_connection_set_proxies";
        v12 = "%{public}s called with null connection, no backtrace";
        v16 = v10;
        v17 = v14;
LABEL_22:
        _os_log_impl(&dword_182FBE000, v16, v17, v12, buf, 0xCu);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "tcp_connection_set_proxies";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v9)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (v4)
  {
    if (object_getClass(v4) == (Class)MEMORY[0x1E0C812F8] && !xpc_dictionary_get_count(v5))
    {
      nw_parameters_set_no_proxy(v3[6], 1);
      goto LABEL_25;
    }
    v6 = v3[6];
    v7 = v5;
  }
  else
  {
    nw_parameters_set_no_proxy(v3[6], 0);
    v6 = v3[6];
    v7 = 0;
  }
  nw_parameters_set_proxy_configuration(v6, v7);
LABEL_25:

}

void nw_parameters_set_no_proxy(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 2;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFFFD;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_no_proxy";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_proxy";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_no_proxy";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_proxy";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_proxy";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void tcp_connection_set_event_handler(void *a1, const void *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v19 = "tcp_connection_set_event_handler";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (!os_log_type_enabled(v8, type))
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v19 = "tcp_connection_set_event_handler";
        v10 = "%{public}s called with null connection";
LABEL_17:
        v14 = v8;
        v15 = v9;
        goto LABEL_18;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (!os_log_type_enabled(v8, type))
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v19 = "tcp_connection_set_event_handler";
        v10 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v12 = type;
      v13 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_19:

          if (!v7)
            goto LABEL_14;
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        v19 = "tcp_connection_set_event_handler";
        v10 = "%{public}s called with null connection, no backtrace";
        v14 = v8;
        v15 = v12;
LABEL_18:
        _os_log_impl(&dword_182FBE000, v14, v15, v10, buf, 0xCu);
        goto LABEL_19;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "tcp_connection_set_event_handler";
        v20 = 2082;
        v21 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v7)
      goto LABEL_14;
LABEL_13:
    free(v7);
    goto LABEL_14;
  }
  v4 = _Block_copy(a2);
  v5 = (void *)v3[8];
  v3[8] = v4;

LABEL_14:
}

void tcp_connection_set_cancel_handler(void *a1, const void *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v19 = "tcp_connection_set_cancel_handler";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (!os_log_type_enabled(v8, type))
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v19 = "tcp_connection_set_cancel_handler";
        v10 = "%{public}s called with null connection";
LABEL_17:
        v14 = v8;
        v15 = v9;
        goto LABEL_18;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (!os_log_type_enabled(v8, type))
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v19 = "tcp_connection_set_cancel_handler";
        v10 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_17;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v12 = type;
      v13 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_19:

          if (!v7)
            goto LABEL_14;
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        v19 = "tcp_connection_set_cancel_handler";
        v10 = "%{public}s called with null connection, no backtrace";
        v14 = v8;
        v15 = v12;
LABEL_18:
        _os_log_impl(&dword_182FBE000, v14, v15, v10, buf, 0xCu);
        goto LABEL_19;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "tcp_connection_set_cancel_handler";
        v20 = 2082;
        v21 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v7)
      goto LABEL_14;
LABEL_13:
    free(v7);
    goto LABEL_14;
  }
  v4 = _Block_copy(a2);
  v5 = (void *)v3[9];
  v3[9] = v4;

LABEL_14:
}

id tcp_connection_copy_parameters(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v18 = "tcp_connection_copy_parameters";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v18 = "tcp_connection_copy_parameters";
        v8 = "%{public}s called with null connection";
LABEL_18:
        v13 = v6;
        v14 = v7;
        goto LABEL_19;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v18 = "tcp_connection_copy_parameters";
        v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v10 = type;
      v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_20:

          if (!v5)
            goto LABEL_14;
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        v18 = "tcp_connection_copy_parameters";
        v8 = "%{public}s called with null connection, no backtrace";
        v13 = v6;
        v14 = v10;
LABEL_19:
        _os_log_impl(&dword_182FBE000, v13, v14, v8, buf, 0xCu);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v18 = "tcp_connection_copy_parameters";
        v19 = 2082;
        v20 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
    {
LABEL_14:
      v3 = 0;
      goto LABEL_15;
    }
LABEL_13:
    free(v5);
    goto LABEL_14;
  }
  os_unfair_lock_lock(v1 + 30);
  v3 = *(id *)&v2[12]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 30);
LABEL_15:

  return v3;
}

void tcp_connection_allow_client_socket_access(void *a1, int a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  char v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  NSObject *v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v20 = "tcp_connection_allow_client_socket_access";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v7, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (!os_log_type_enabled(v8, type))
          goto LABEL_26;
        *(_DWORD *)buf = 136446210;
        v20 = "tcp_connection_allow_client_socket_access";
        v10 = "%{public}s called with null connection";
LABEL_24:
        v15 = v8;
        v16 = v9;
        goto LABEL_25;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (!os_log_type_enabled(v8, type))
          goto LABEL_26;
        *(_DWORD *)buf = 136446210;
        v20 = "tcp_connection_allow_client_socket_access";
        v10 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_24;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (!v14)
        {
LABEL_26:

          if (!v7)
            goto LABEL_21;
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        v20 = "tcp_connection_allow_client_socket_access";
        v10 = "%{public}s called with null connection, no backtrace";
        v15 = v8;
        v16 = v13;
LABEL_25:
        _os_log_impl(&dword_182FBE000, v15, v16, v10, buf, 0xCu);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v20 = "tcp_connection_allow_client_socket_access";
        v21 = 2082;
        v22 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v7)
      goto LABEL_21;
LABEL_20:
    free(v7);
    goto LABEL_21;
  }
  if ((v3[39]._os_unfair_lock_opaque & 0x10000000) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "tcp_connection_allow_client_socket_access";
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called before tcp_connection_start", buf, 0xCu);
    }

  }
  else
  {
    os_unfair_lock_lock(v3 + 30);
    if (a2)
      v5 = 0x80;
    else
      v5 = 0;
    BYTE2(v4[39]._os_unfair_lock_opaque) = v5 & 0x80 | BYTE2(v4[39]._os_unfair_lock_opaque) & 0x7F;
    nw_parameters_set_allow_socket_access(*(void **)&v4[12]._os_unfair_lock_opaque, a2);
    os_unfair_lock_unlock(v4 + 30);
  }
LABEL_21:

}

void nw_parameters_set_allow_socket_access(void *a1, int a2)
{
  id v3;
  void *v4;
  __int16 v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 16;
    else
      v5 = 0;
    *(_WORD *)(*((_QWORD *)v3 + 13) + 100) = *(_WORD *)(*((_QWORD *)v3 + 13) + 100) & 0xFFEF | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_allow_socket_access";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_socket_access";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_allow_socket_access";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_socket_access";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_allow_socket_access";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void __tcp_connection_start_block_invoke_29(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  int v7;
  int v8;
  void *v9;
  _DWORD *v10;
  int v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  unsigned __int8 *v20;
  id v21;
  void *v22;
  unsigned __int8 *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;

  v26 = a2;
  v27 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 120));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 156) == 255)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 120));
    v12 = 0;
    goto LABEL_42;
  }
  v5 = *(void **)(v4 + 32);
  if (v5)
  {
    v6 = v5;
    v7 = v6[94];

    v8 = v7 == 1;
    v9 = v26;
    if (v26)
    {
LABEL_4:
      v10 = v9;
      v11 = v10[94] == 1;

      goto LABEL_8;
    }
  }
  else
  {
    v8 = 0;
    v9 = v26;
    if (v26)
      goto LABEL_4;
  }
  v11 = 0;
LABEL_8:
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), a2);
  v13 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v13 + 159) & 1) != 0)
  {
    v16 = tcp_connection_quality_from_path(*(void **)(a1 + 32), v26);
    if (*(_QWORD *)(v13 + 128) == v16)
    {
      v14 = 0;
    }
    else
    {
      v17 = "connection quality changed";
      if (v16 == 2)
        v17 = "connection quality changed to normal";
      if (v16 == 1)
        v18 = "connection quality changed to bad";
      else
        v18 = v17;
      *(_QWORD *)(v13 + 128) = v16;
      v14 = tcp_connection_fillout_event_locked((void *)v13, (uint64_t)&v29, 1073741833, 0, 0, (uint64_t)v18);
    }
    v13 = *(_QWORD *)(a1 + 32);
    if (v8 == v11)
    {
      v15 = 0;
      if (v14)
        goto LABEL_27;
    }
    else
    {
      if (v11)
        v19 = "conditions satisfied";
      else
        v19 = "conditions not satisfied";
      v15 = tcp_connection_fillout_event_locked(*(void **)(a1 + 32), (uint64_t)&v27, 1073741826, 0, 0, (uint64_t)v19);
      v13 = *(_QWORD *)(a1 + 32);
      if (v14)
        goto LABEL_27;
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  if (!v15)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 120));
    v12 = 0;
    goto LABEL_35;
  }
LABEL_27:
  v12 = _Block_copy(*(const void **)(v13 + 64));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 120));
  if (!v14)
  {
LABEL_35:
    if (!v15)
      goto LABEL_42;
    goto LABEL_36;
  }
  v20 = (unsigned __int8 *)*(id *)(a1 + 32);
  v21 = v12;
  v12 = v21;
  v22 = v29;
  if (v21 && v20[156] != 255)
    (*((void (**)(id, _QWORD, void *))v21 + 2))(v21, v30, v29);
  if (v22)
    free(v22);

  if (v15)
  {
LABEL_36:
    v23 = (unsigned __int8 *)*(id *)(a1 + 32);
    v24 = v12;
    v12 = v24;
    v25 = v27;
    if (v24 && v23[156] != 255)
      (*((void (**)(id, _QWORD, void *))v24 + 2))(v24, v28, v27);
    if (v25)
      free(v25);

  }
LABEL_42:

}

void tcp_connection_set_usage_model(void *a1, int a2)
{
  _DWORD *v3;
  id v4;
  NSObject *v5;
  char *v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  NSObject *v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v20 = "tcp_connection_set_usage_model";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v20 = "tcp_connection_set_usage_model";
        v11 = "%{public}s called with null connection";
LABEL_23:
        v15 = v9;
        v16 = v10;
        goto LABEL_24;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v20 = "tcp_connection_set_usage_model";
        v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_23;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v13 = type;
      v14 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v14)
        {
LABEL_25:

          if (!v8)
            goto LABEL_20;
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        v20 = "tcp_connection_set_usage_model";
        v11 = "%{public}s called with null connection, no backtrace";
        v15 = v9;
        v16 = v13;
LABEL_24:
        _os_log_impl(&dword_182FBE000, v15, v16, v11, buf, 0xCu);
        goto LABEL_25;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v20 = "tcp_connection_set_usage_model";
        v21 = 2082;
        v22 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8)
      goto LABEL_20;
LABEL_19:
    free(v8);
    goto LABEL_20;
  }
  v3[31] = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = (char *)*((_QWORD *)v4 + 12);
    *(_DWORD *)buf = 136446722;
    v20 = "tcp_connection_set_usage_model";
    v21 = 2048;
    v22 = v6;
    v23 = 1024;
    v24 = a2;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %llu setting usage model to %d", buf, 0x1Cu);
  }

  if (*((_DWORD *)v4 + 31) == 1)
  {
    if (tcp_connection_is_first_party_onceToken != -1)
      dispatch_once(&tcp_connection_is_first_party_onceToken, &__block_literal_global_31943);
    if ((tcp_connection_is_first_party_is_first_party & 1) == 0)
      nw_parameters_set_no_fallback(*((void **)v4 + 6), 1);
  }
LABEL_20:

}

void nw_parameters_set_no_fallback(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 32;
    else
      v9 = 0;
    v10 = v8 & 0xFFFFFFDF;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_no_fallback";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_fallback";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_no_fallback";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_fallback";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_no_fallback";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nw_parameters_set_expired_dns_behavior(nw_parameters_t parameters, nw_parameters_expired_dns_behavior_t expired_dns_behavior)
{
  nw_parameters_t v3;
  nw_parameters_t v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_parameters_set_expired_dns_behavior";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_expired_dns_behavior";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_expired_dns_behavior";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_expired_dns_behavior";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_expired_dns_behavior";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (expired_dns_behavior < 0xFF)
  {
    HIBYTE(v3[11].isa) = expired_dns_behavior;
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_expired_dns_behavior";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_expired_dns_behavior";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX)", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_expired_dns_behavior";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_parameters_set_expired_dns_behavior";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX), no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_parameters_set_expired_dns_behavior";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void __nw_path_get_sysctls_region_block_invoke()
{
  id v0;
  int v1;
  int v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  NSObject *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  _DWORD *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  NSObject *v67;
  NSObject *v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v75;
  NSObject *v76;
  NSObject *v77;
  NSObject *v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  NSObject *v82;
  NSObject *v83;
  NSObject *v84;
  NSObject *v85;
  NSObject *v86;
  NSObject *v87;
  NSObject *v88;
  NSObject *v89;
  NSObject *v90;
  NSObject *v91;
  NSObject *v92;
  NSObject *v93;
  NSObject *v94;
  NSObject *v95;
  NSObject *v96;
  NSObject *v97;
  NSObject *v98;
  char *backtrace_string;
  os_log_type_t v100;
  _BOOL4 v101;
  os_log_type_t v102;
  NSObject *v103;
  void *v104;
  os_log_type_t type[8];
  char v106;
  uint64_t v107;
  uint8_t buf[4];
  const char *v109;
  __int16 v110;
  _BYTE v111[20];
  __int16 v112;
  char *v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v0 = (id)nw_context_copy_implicit_context::implicit_context;
  v1 = nw_path_shared_necp_fd(v0);

  if (v1 < 0)
    return;
  v107 = 0;
  if (!necp_client_action())
  {
    nw_path_get_sysctls_region::sysctls_region = v107;
    goto LABEL_17;
  }
  v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446978;
  v109 = "nw_path_get_sysctls_region_block_invoke";
  v110 = 1024;
  *(_DWORD *)v111 = v1;
  *(_WORD *)&v111[4] = 2048;
  *(_QWORD *)&v111[6] = 8;
  *(_WORD *)&v111[14] = 1024;
  *(_DWORD *)&v111[16] = v2;
  v4 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v106 = 0;
  if (!__nwlog_fault(v4, type, &v106))
  {
LABEL_10:
    if (!v4)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v6 = type[0];
    if (os_log_type_enabled(v5, type[0]))
    {
      *(_DWORD *)buf = 136446978;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      v110 = 1024;
      *(_DWORD *)v111 = v1;
      *(_WORD *)&v111[4] = 2048;
      *(_QWORD *)&v111[6] = 8;
      *(_WORD *)&v111[14] = 1024;
      *(_DWORD *)&v111[16] = v2;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d", buf, 0x22u);
    }
LABEL_9:

    goto LABEL_10;
  }
  if (!v106)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v102 = type[0];
    if (os_log_type_enabled(v5, type[0]))
    {
      *(_DWORD *)buf = 136446978;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      v110 = 1024;
      *(_DWORD *)v111 = v1;
      *(_WORD *)&v111[4] = 2048;
      *(_QWORD *)&v111[6] = 8;
      *(_WORD *)&v111[14] = 1024;
      *(_DWORD *)&v111[16] = v2;
      _os_log_impl(&dword_182FBE000, v5, v102, "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d, backtrace limit exceeded", buf, 0x22u);
    }
    goto LABEL_9;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  v100 = type[0];
  v101 = os_log_type_enabled(v5, type[0]);
  if (!backtrace_string)
  {
    if (v101)
    {
      *(_DWORD *)buf = 136446978;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      v110 = 1024;
      *(_DWORD *)v111 = v1;
      *(_WORD *)&v111[4] = 2048;
      *(_QWORD *)&v111[6] = 8;
      *(_WORD *)&v111[14] = 1024;
      *(_DWORD *)&v111[16] = v2;
      _os_log_impl(&dword_182FBE000, v5, v100, "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d, no backtrace", buf, 0x22u);
    }
    goto LABEL_9;
  }
  if (v101)
  {
    *(_DWORD *)buf = 136447234;
    v109 = "nw_path_get_sysctls_region_block_invoke";
    v110 = 1024;
    *(_DWORD *)v111 = v1;
    *(_WORD *)&v111[4] = 2048;
    *(_QWORD *)&v111[6] = 8;
    *(_WORD *)&v111[14] = 1024;
    *(_DWORD *)&v111[16] = v2;
    v112 = 2082;
    v113 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v5, v100, "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x2Cu);
  }

  free(backtrace_string);
  if (v4)
LABEL_11:
    free(v4);
LABEL_12:
  if (nw_path_get_sysctls_region::sysctls_region)
  {
    if (*(_DWORD *)nw_path_get_sysctls_region::sysctls_region == 3)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v8 = *(_DWORD *)nw_path_get_sysctls_region::sysctls_region;
    *(_DWORD *)buf = 136446722;
    v109 = "nw_path_get_sysctls_region_block_invoke";
    v110 = 1024;
    *(_DWORD *)v111 = v8;
    *(_WORD *)&v111[4] = 1024;
    *(_DWORD *)&v111[6] = 3;
    v9 = "%{public}s sysctls_region version: %u, expected: %u, synthesizing from sysctlbyname";
    v10 = v7;
    v11 = OS_LOG_TYPE_ERROR;
    v12 = 24;
    goto LABEL_19;
  }
LABEL_17:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    v109 = "nw_path_get_sysctls_region_block_invoke";
    v9 = "%{public}s synthesizing sysctls_region from sysctlbyname";
    v10 = v7;
    v11 = OS_LOG_TYPE_DEBUG;
    v12 = 12;
LABEL_19:
    _os_log_impl(&dword_182FBE000, v10, v11, v9, buf, v12);
  }
LABEL_20:

  v13 = malloc_type_calloc(1uLL, 0x158uLL, 0xEAFB8F1AuLL);
  if (!v13)
  {
    __nwlog_obj();
    v103 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v103, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v109 = "strict_calloc";
    v110 = 2048;
    *(_QWORD *)v111 = 1;
    *(_WORD *)&v111[8] = 2048;
    *(_QWORD *)&v111[10] = 344;
    v104 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v104))
    {
      __break(1u);
      return;
    }
    free(v104);
  }
  nw_path_get_sysctls_region::sysctls_region = (uint64_t)v13;
  *v13 = 3;
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.bg_target_qdelay", v13 + 1, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.bg_target_qdelay failed. Using default value: 40", buf, 0xCu);
    }

    v13[1] = 40;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.bg_allowed_increase", v13 + 2, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.bg_allowed_increase failed. Using default value: 8", buf, 0xCu);
    }

    v13[2] = 8;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.bg_tether_shift", v13 + 3, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.bg_tether_shift failed. Using default value: 1", buf, 0xCu);
    }

    v13[3] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.bg_ss_fltsz", v13 + 4, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.bg_ss_fltsz failed. Using default value: 2", buf, 0xCu);
    }

    v13[4] = 2;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.use_newreno", v13 + 5, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.use_newreno failed. Using default value: 0", buf, 0xCu);
    }

    v13[5] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_tcp_friendliness", v13 + 6, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_tcp_friendliness failed. Using default value: 0", buf, 0xCu);
    }

    v13[6] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_fast_convergence", v13 + 7, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_fast_convergence failed. Using default value: 0", buf, 0xCu);
    }

    v13[7] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_use_minrtt", v13 + 8, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_use_minrtt failed. Using default value: 0", buf, 0xCu);
    }

    v13[8] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.delayed_ack", v13 + 9, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.delayed_ack failed. Using default value: 3", buf, 0xCu);
    }

    v13[9] = 3;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.recvbg", v13 + 10, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.recvbg failed. Using default value: 0", buf, 0xCu);
    }

    v13[10] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.drop_synfin", v13 + 11, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = (id)gLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.drop_synfin failed. Using default value: 1", buf, 0xCu);
    }

    v13[11] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.slowlink_wsize", v13 + 12, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.slowlink_wsize failed. Using default value: 8192", buf, 0xCu);
    }

    v13[12] = 0x2000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.maxseg_unacked", v13 + 13, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.maxseg_unacked failed. Using default value: 8", buf, 0xCu);
    }

    v13[13] = 8;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.rfc3465", v13 + 14, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = (id)gLogObj;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rfc3465 failed. Using default value: 1", buf, 0xCu);
    }

    v13[14] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.rfc3465_lim2", v13 + 15, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v28 = (id)gLogObj;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rfc3465_lim2 failed. Using default value: 1", buf, 0xCu);
    }

    v13[15] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.recv_allowed_iaj", v13 + 16, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v29 = (id)gLogObj;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.recv_allowed_iaj failed. Using default value: 5", buf, 0xCu);
    }

    v13[16] = 5;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.doautorcvbuf", v13 + 17, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = (id)gLogObj;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.doautorcvbuf failed. Using default value: 1", buf, 0xCu);
    }

    v13[17] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.autorcvbufmax", v13 + 18, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.autorcvbufmax failed. Using default value: 2 * 1024 * 1024", buf, 0xCu);
    }

    v13[18] = 0x200000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.rcvsspktcnt", v13 + 19, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v32 = (id)gLogObj;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rcvsspktcnt failed. Using default value: 512", buf, 0xCu);
    }

    v13[19] = 512;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.path_mtu_discovery", v13 + 20, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v33 = (id)gLogObj;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.path_mtu_discovery failed. Using default value: 1", buf, 0xCu);
    }

    v13[20] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.local_slowstart_flightsize", v13 + 21, (size_t *)type, 0, 0)
    || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = (id)gLogObj;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.local_slowstart_flightsize failed. Using default value: 8", buf, 0xCu);
    }

    v13[21] = 8;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.ecn_setup_percentage", v13 + 22, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v35 = (id)gLogObj;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ecn_setup_percentage failed. Using default value: 50", buf, 0xCu);
    }

    v13[22] = 50;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.ecn_initiate_out", v13 + 23, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = (id)gLogObj;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ecn_initiate_out failed. Using default value: 0", buf, 0xCu);
    }

    v13[23] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.ecn_negotiate_in", v13 + 24, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v37 = (id)gLogObj;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ecn_negotiate_in failed. Using default value: 0", buf, 0xCu);
    }

    v13[24] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.packetchain", v13 + 25, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = (id)gLogObj;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.packetchain failed. Using default value: 50", buf, 0xCu);
    }

    v13[25] = 50;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.socket_unlocked_on_output", v13 + 26, (size_t *)type, 0, 0)
    || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v39 = (id)gLogObj;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.socket_unlocked_on_output failed. Using default value: 1", buf, 0xCu);
    }

    v13[26] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.min_iaj_win", v13 + 27, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = (id)gLogObj;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.min_iaj_win failed. Using default value: 16", buf, 0xCu);
    }

    v13[27] = 16;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.acc_iaj_react_limit", v13 + 28, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v41 = (id)gLogObj;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.acc_iaj_react_limit failed. Using default value: 200", buf, 0xCu);
    }

    v13[28] = 200;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.autosndbufinc", v13 + 29, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v42 = (id)gLogObj;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.autosndbufinc failed. Using default value: 8 * 1024", buf, 0xCu);
    }

    v13[29] = 0x2000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.autosndbufmax", v13 + 30, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.autosndbufmax failed. Using default value: 2 * 1024 * 1024", buf, 0xCu);
    }

    v13[30] = 0x200000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.rtt_recvbg", v13 + 31, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v44 = (id)gLogObj;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rtt_recvbg failed. Using default value: 1", buf, 0xCu);
    }

    v13[31] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.recv_throttle_minwin", v13 + 32, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v45 = (id)gLogObj;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.recv_throttle_minwin failed. Using default value: 16 * 1024", buf, 0xCu);
    }

    v13[32] = 0x4000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.enable_tlp", v13 + 33, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v46 = (id)gLogObj;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.enable_tlp failed. Using default value: 1", buf, 0xCu);
    }

    v13[33] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.sack", v13 + 34, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v47 = (id)gLogObj;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.sack failed. Using default value: 1", buf, 0xCu);
    }

    v13[34] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.sack_maxholes", v13 + 35, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v48 = (id)gLogObj;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.sack_maxholes failed. Using default value: 128", buf, 0xCu);
    }

    v13[35] = 128;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.sack_globalmaxholes", v13 + 36, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v49 = (id)gLogObj;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.sack_globalmaxholes failed. Using default value: 65536", buf, 0xCu);
    }

    v13[36] = 0x10000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.mssdflt", v13 + 37, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v50 = (id)gLogObj;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.mssdflt failed. Using default value: 512", buf, 0xCu);
    }

    v13[37] = 512;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.v6mssdflt", v13 + 38, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v51 = (id)gLogObj;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.v6mssdflt failed. Using default value: 1024", buf, 0xCu);
    }

    v13[38] = 1024;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.fastopen_backlog", v13 + 39, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v52 = (id)gLogObj;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.fastopen_backlog failed. Using default value: 10", buf, 0xCu);
    }

    v13[39] = 10;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.fastopen", v13 + 40, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v53 = (id)gLogObj;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.fastopen failed. Using default value: 0x3", buf, 0xCu);
    }

    v13[40] = 3;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.minmss", v13 + 41, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v54 = (id)gLogObj;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v54, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.minmss failed. Using default value: 216", buf, 0xCu);
    }

    v13[41] = 216;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.icmp_may_rst", v13 + 42, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v55 = (id)gLogObj;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.icmp_may_rst failed. Using default value: 1", buf, 0xCu);
    }

    v13[42] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.rtt_min", v13 + 43, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v56 = (id)gLogObj;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rtt_min failed. Using default value: 100", buf, 0xCu);
    }

    v13[43] = 100;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.rexmt_slop", v13 + 44, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v57 = (id)gLogObj;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rexmt_slop failed. Using default value: 200", buf, 0xCu);
    }

    v13[44] = 200;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.randomize_ports", v13 + 45, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v58 = (id)gLogObj;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.randomize_ports failed. Using default value: 0", buf, 0xCu);
    }

    v13[45] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.win_scale_factor", v13 + 46, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v59 = (id)gLogObj;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.win_scale_factor failed. Using default value: 3", buf, 0xCu);
    }

    v13[46] = 3;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.keepinit", v13 + 47, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v60 = (id)gLogObj;
    if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v60, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.keepinit failed. Using default value: 75 * 1000", buf, 0xCu);
    }

    v13[47] = 75000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.keepidle", v13 + 48, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v61 = (id)gLogObj;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.keepidle failed. Using default value: 120 * 60 * 1000", buf, 0xCu);
    }

    v13[48] = 7200000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.keepintvl", v13 + 49, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v62 = (id)gLogObj;
    if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.keepintvl failed. Using default value: 75 * 1000", buf, 0xCu);
    }

    v13[49] = 75000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.keepcnt", v13 + 50, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v63 = (id)gLogObj;
    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.keepcnt failed. Using default value: 8", buf, 0xCu);
    }

    v13[50] = 8;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.msl", v13 + 51, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v64 = (id)gLogObj;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.msl failed. Using default value: 15 * 1000", buf, 0xCu);
    }

    v13[51] = 15000;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.max_persist_timeout", v13 + 52, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v65 = (id)gLogObj;
    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.max_persist_timeout failed. Using default value: 0", buf, 0xCu);
    }

    v13[52] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.always_keepalive", v13 + 53, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v66 = (id)gLogObj;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v66, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.always_keepalive failed. Using default value: 0", buf, 0xCu);
    }

    v13[53] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.timer_fastmode_idlemax", v13 + 54, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v67 = (id)gLogObj;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.timer_fastmode_idlemax failed. Using default value: 10", buf, 0xCu);
    }

    v13[54] = 10;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.broken_peer_syn_rexmit_thres", v13 + 55, (size_t *)type, 0, 0)
    || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v68 = (id)gLogObj;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v68, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.broken_peer_syn_rexmit_thres failed. Using default value: 10", buf, 0xCu);
    }

    v13[55] = 10;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.pmtud_blackhole_detection", v13 + 56, (size_t *)type, 0, 0)
    || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v69 = (id)gLogObj;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.pmtud_blackhole_detection failed. Using default value: 1", buf, 0xCu);
    }

    v13[56] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.pmtud_blackhole_mss", v13 + 57, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v70 = (id)gLogObj;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.pmtud_blackhole_mss failed. Using default value: 1200", buf, 0xCu);
    }

    v13[57] = 1200;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.sendspace", v13 + 58, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v71 = (id)gLogObj;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.sendspace failed. Using default value: 1448*256", buf, 0xCu);
    }

    v13[58] = 370688;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.recvspace", v13 + 59, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v72 = (id)gLogObj;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.recvspace failed. Using default value: 1448*384", buf, 0xCu);
    }

    v13[59] = 556032;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.microuptime_init", v13 + 60, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = (id)gLogObj;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.microuptime_init failed. Using default value: 0", buf, 0xCu);
    }

    v13[60] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.now_init", v13 + 61, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v74 = (id)gLogObj;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.now_init failed. Using default value: 0", buf, 0xCu);
    }

    v13[61] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.challengeack_limit", v13 + 62, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v75 = (id)gLogObj;
    if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v75, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.challengeack_limit failed. Using default value: 10", buf, 0xCu);
    }

    v13[62] = 10;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.do_rfc5961", v13 + 63, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v76 = (id)gLogObj;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.do_rfc5961 failed. Using default value: 1", buf, 0xCu);
    }

    v13[63] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.init_rtt_from_cache", v13 + 64, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v77 = (id)gLogObj;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v77, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.init_rtt_from_cache failed. Using default value: 1", buf, 0xCu);
    }

    v13[64] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.autotunereorder", v13 + 65, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v78 = (id)gLogObj;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v78, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.autotunereorder failed. Using default value: 1", buf, 0xCu);
    }

    v13[65] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.do_ack_compression", v13 + 66, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v79 = (id)gLogObj;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.do_ack_compression failed. Using default value: 1", buf, 0xCu);
    }

    v13[66] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.ack_compression_rate", v13 + 67, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v80 = (id)gLogObj;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ack_compression_rate failed. Using default value: 5", buf, 0xCu);
    }

    v13[67] = 5;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.do_better_lr", v13 + 68, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v81 = (id)gLogObj;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.do_better_lr failed. Using default value: 1", buf, 0xCu);
    }

    v13[68] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_minor_fixes", v13 + 69, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v82 = (id)gLogObj;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_minor_fixes failed. Using default value: 1", buf, 0xCu);
    }

    v13[69] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_rfc_compliant", v13 + 70, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v83 = (id)gLogObj;
    if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_rfc_compliant failed. Using default value: 1", buf, 0xCu);
    }

    v13[70] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.aggressive_rcvwnd_inc", v13 + 71, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v84 = (id)gLogObj;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.aggressive_rcvwnd_inc failed. Using default value: 1", buf, 0xCu);
    }

    v13[71] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.ack_strategy", v13 + 72, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v85 = (id)gLogObj;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ack_strategy failed. Using default value: 1", buf, 0xCu);
    }

    v13[72] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.flow_control_response", v13 + 73, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v86 = (id)gLogObj;
    if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.flow_control_response failed. Using default value: 1", buf, 0xCu);
    }

    v13[73] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.randomize_timestamps", v13 + 74, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v87 = (id)gLogObj;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v87, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.randomize_timestamps failed. Using default value: 1", buf, 0xCu);
    }

    v13[74] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.ledbat_plus_plus", v13 + 75, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v88 = (id)gLogObj;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ledbat_plus_plus failed. Using default value: 1", buf, 0xCu);
    }

    v13[75] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.use_ledbat", v13 + 76, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v89 = (id)gLogObj;
    if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v89, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.use_ledbat failed. Using default value: 0", buf, 0xCu);
    }

    v13[76] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.rledbat", v13 + 77, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v90 = (id)gLogObj;
    if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rledbat failed. Using default value: 1", buf, 0xCu);
    }

    v13[77] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.use_min_curr_rtt", v13 + 78, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v91 = (id)gLogObj;
    if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.use_min_curr_rtt failed. Using default value: 1", buf, 0xCu);
    }

    v13[78] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.fin_timeout", v13 + 79, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v92 = (id)gLogObj;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v92, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.fin_timeout failed. Using default value: 30", buf, 0xCu);
    }

    v13[79] = 30;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.accurate_ecn", v13 + 80, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v93 = (id)gLogObj;
    if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v93, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.accurate_ecn failed. Using default value: 0", buf, 0xCu);
    }

    v13[80] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.tso", v13 + 81, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v94 = (id)gLogObj;
    if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v94, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.tso failed. Using default value: 1", buf, 0xCu);
    }

    v13[81] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.awdl_rtobase", v13 + 82, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v95 = (id)gLogObj;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.awdl_rtobase failed. Using default value: 100", buf, 0xCu);
    }

    v13[82] = 100;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.rack", v13 + 83, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v96 = (id)gLogObj;
    if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rack failed. Using default value: 1", buf, 0xCu);
    }

    v13[83] = 1;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("net.inet.tcp.l4s", v13 + 84, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v97 = (id)gLogObj;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v97, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.l4s failed. Using default value: 0", buf, 0xCu);
    }

    v13[84] = 0;
  }
  *(_QWORD *)type = 4;
  if (sysctlbyname("kern.ipc.throttle_best_effort", v13 + 85, (size_t *)type, 0, 0) || *(_QWORD *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v98 = (id)gLogObj;
    if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname kern.ipc.throttle_best_effort failed. Using default value: 0", buf, 0xCu);
    }

    v13[85] = 0;
  }
  nw_path_get_sysctls_region::sysctls_region = (uint64_t)v13;
}

void sub_1832230F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void tcp_connection_set_no_cellular(void *a1, int a2)
{
  void **v3;
  void **v4;
  id v5;
  xpc_object_t v6;
  id v7;
  void *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  xpc_object_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  _QWORD applier[4];
  id v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v24 = "tcp_connection_set_no_cellular";
    v8 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_26;
        *(_DWORD *)buf = 136446210;
        v24 = "tcp_connection_set_no_cellular";
        v11 = "%{public}s called with null connection";
LABEL_24:
        v17 = v9;
        v18 = v10;
        goto LABEL_25;
      }
      if (!v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_26;
        *(_DWORD *)buf = 136446210;
        v24 = "tcp_connection_set_no_cellular";
        v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_24;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v13 = type;
      v14 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v14)
        {
LABEL_26:

          if (!v8)
            goto LABEL_28;
LABEL_27:
          free(v8);
          goto LABEL_28;
        }
        *(_DWORD *)buf = 136446210;
        v24 = "tcp_connection_set_no_cellular";
        v11 = "%{public}s called with null connection, no backtrace";
        v17 = v9;
        v18 = v13;
LABEL_25:
        _os_log_impl(&dword_182FBE000, v17, v18, v11, buf, 0xCu);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "tcp_connection_set_no_cellular";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (nw_parameters_get_prohibit_cellular(v3[6]) != a2)
  {
    v5 = nw_parameters_copy_prohibited_interface_types(v4[6]);
    v6 = v5;
    if (!a2)
    {
      if (v5)
      {
        v15 = xpc_array_create(0, 0);
        if (v15)
        {
          applier[0] = MEMORY[0x1E0C809B0];
          applier[1] = 3221225472;
          applier[2] = __tcp_connection_set_no_cellular_block_invoke;
          applier[3] = &unk_1E14AC908;
          v20 = v15;
          v16 = v15;
          xpc_array_apply(v6, applier);

          nw_parameters_set_prohibited_interface_types(v4[6], v16);
        }
      }
      goto LABEL_21;
    }
    if (v5 || (v6 = xpc_array_create(0, 0)) != 0)
    {
      xpc_array_set_uint64(v6, 0xFFFFFFFFFFFFFFFFLL, 2uLL);
      nw_parameters_set_prohibited_interface_types(v4[6], v6);
LABEL_21:

    }
  }
LABEL_28:

}

BOOL nw_path_listener_uses_nexus_only(void *a1)
{
  id *v1;
  id *v2;
  _BOOL8 v3;
  _QWORD *v4;
  uint64_t v5;
  nw_interface_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_path_listener_uses_nexus_only";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_path_listener_uses_nexus_only";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_path_listener_uses_nexus_only";
            v28 = 2082;
            v29 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_path_listener_uses_nexus_only";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_path_listener_uses_nexus_only";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_36:
    if (v9)
      free(v9);
    goto LABEL_3;
  }
  if ((*((_BYTE *)v1 + 475) & 1) == 0)
  {
LABEL_3:
    v3 = 0;
    goto LABEL_12;
  }
  if (*((_BYTE *)v1 + 386))
    goto LABEL_11;
  v4 = v1[2];
  if (v4)
  {
    v5 = v4[12];

    if ((v5 & 0x10000000) == 0)
      goto LABEL_7;
LABEL_11:
    v3 = 1;
    goto LABEL_12;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_parameters_get_never_open_listener_socket";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v16, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_get_never_open_listener_socket";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v24)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v17, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_parameters_get_never_open_listener_socket";
          v28 = 2082;
          v29 = v20;
          _os_log_impl(&dword_182FBE000, v17, v21, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_49;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_get_never_open_listener_socket";
        _os_log_impl(&dword_182FBE000, v17, v21, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_get_never_open_listener_socket";
        _os_log_impl(&dword_182FBE000, v17, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_49:
  if (v16)
    free(v16);
LABEL_7:
  if (*((_DWORD *)v2 + 94) != 1)
    goto LABEL_3;
  v6 = nw_parameters_copy_required_interface((nw_parameters_t)v2[2]);
  v3 = v6 && !*((_DWORD *)v2 + 80) && nw_path_uses_nexus_internal((NWConcrete_nw_path *)v2, 1);

LABEL_12:
  return v3;
}

void sub_183223988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_disable_listener_datapath(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[99] >> 5) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_disable_listener_datapath";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_disable_listener_datapath";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_disable_listener_datapath";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_disable_listener_datapath";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_disable_listener_datapath";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_array_create_by_removal(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void *v8;
  void **v9;
  void **v10;

  if (!a1)
    return nw_array_create();
  v4 = nw_array_create();
  v5 = v4;
  if (a2)
  {
    v7 = *(void ***)(a1 + 16);
    v6 = *(void ***)(a1 + 24);
    while (v7 != v6)
    {
      v8 = *v7;
      if (*v7)
      {
        v10 = *(void ***)(a2 + 16);
        v9 = *(void ***)(a2 + 24);
        if (v10 != v9)
        {
          while (*v10 != v8)
          {
            if (++v10 == v9)
            {
              v10 = *(void ***)(a2 + 24);
              break;
            }
          }
        }
        if (v10 == v9)
          nw_array_append(v5, v8);
      }
      ++v7;
    }
  }
  else if (v4 == a1)
  {
    return a1;
  }
  else
  {
    std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v4 + 16, *(void ***)(a1 + 16), *(void ***)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
  }
  return v5;
}

void sub_1832240C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_channel_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol *v4;
  nw_protocol_callbacks *callbacks;
  void (*disconnected)(nw_protocol *, nw_protocol *);
  void *v7;
  nw_protocol_callbacks *v8;
  nw_protocol_callbacks *v9;
  nw_protocol_callbacks *v10;
  nw_protocol_callbacks *v11;
  void (**v12)(_QWORD);
  const void *v13;
  nw_protocol_callbacks *v14;
  nw_protocol_callbacks *v15;
  void (**v16)(_QWORD);
  const void *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  char *backtrace_string;
  _BOOL4 v22;
  const char *v23;
  _BOOL4 v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_channel_disconnect";
    v4 = (nw_protocol *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v25))
      goto LABEL_61;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_channel_disconnect";
        v20 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
        goto LABEL_60;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v22 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (!v22)
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_channel_disconnect";
        v20 = "%{public}s called with null channel_protocol, no backtrace";
        goto LABEL_60;
      }
      if (!v22)
      {
LABEL_50:
        free(backtrace_string);
        if (!v4)
          return;
LABEL_32:
        free(v4);
        return;
      }
      *(_DWORD *)buf = 136446466;
      v28 = "nw_channel_disconnect";
      v29 = 2082;
      v30 = backtrace_string;
      v23 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
LABEL_49:
      _os_log_impl(&dword_182FBE000, v18, v19, v23, buf, 0x16u);
      goto LABEL_50;
    }
    v18 = __nwlog_obj();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_61;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_channel_disconnect";
    v20 = "%{public}s called with null channel_protocol";
LABEL_60:
    _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
LABEL_61:
    if (!v4)
      return;
    goto LABEL_32;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_channel_disconnect";
    v4 = (nw_protocol *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v25))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_channel_disconnect";
      v20 = "%{public}s called with null channel";
      goto LABEL_60;
    }
    if (!v25)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_channel_disconnect";
      v20 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v24 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (!v24)
        goto LABEL_50;
      *(_DWORD *)buf = 136446466;
      v28 = "nw_channel_disconnect";
      v29 = 2082;
      v30 = backtrace_string;
      v23 = "%{public}s called with null channel, dumping backtrace:%{public}s";
      goto LABEL_49;
    }
    if (!v24)
      goto LABEL_61;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_channel_disconnect";
    v20 = "%{public}s called with null channel, no backtrace";
    goto LABEL_60;
  }
  v4 = a2;
  if (a2)
  {
    callbacks = a2->callbacks;
    if (callbacks)
    {
      disconnected = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnected;
      if (disconnected)
      {
        v7 = a2->handle;
        if (v7 == &nw_protocol_ref_counted_handle)
        {
          v8 = a2[1].callbacks;
          if (v8)
            a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
        }
        if (handle == &nw_protocol_ref_counted_handle)
        {
          v9 = a1[1].callbacks;
          if (v9)
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v9->add_input_handler + 1);
          disconnected(a2, a1);
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            v10 = a1[1].callbacks;
            if (v10)
            {
              v11 = (nw_protocol_callbacks *)((char *)v10 - 1);
              a1[1].callbacks = v11;
              if (!v11)
              {
                v12 = *(void (***)(_QWORD))a1[1].flow_id;
                if (v12)
                {
                  *(_QWORD *)a1[1].flow_id = 0;
                  v12[2](v12);
                  _Block_release(v12);
                }
                if ((a1[1].flow_id[8] & 1) != 0)
                {
                  v13 = *(const void **)a1[1].flow_id;
                  if (v13)
                    _Block_release(v13);
                }
                free(a1);
              }
            }
          }
        }
        else
        {
          disconnected(a2, a1);
        }
        if (v7 == &nw_protocol_ref_counted_handle && v4->handle == &nw_protocol_ref_counted_handle)
        {
          v14 = v4[1].callbacks;
          if (v14)
          {
            v15 = (nw_protocol_callbacks *)((char *)v14 - 1);
            v4[1].callbacks = v15;
            if (!v15)
            {
              v16 = *(void (***)(_QWORD))v4[1].flow_id;
              if (v16)
              {
                *(_QWORD *)v4[1].flow_id = 0;
                v16[2](v16);
                _Block_release(v16);
              }
              if ((v4[1].flow_id[8] & 1) != 0)
              {
                v17 = *(const void **)v4[1].flow_id;
                if (v17)
                  _Block_release(v17);
              }
              goto LABEL_32;
            }
          }
        }
      }
    }
  }
}

uint64_t nw_path_is_listener(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 475) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_is_listener";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_listener";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_is_listener";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_listener";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_listener";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_agent_client_copy_parameters(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[5];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_agent_client_copy_parameters";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_agent_client_copy_parameters";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null client, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_is_equal(void *a1, void *a2)
{
  char *v3;
  char *v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  BOOL v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD v25[4];
  id v26;
  uint64_t *v27;
  _QWORD v28[4];
  id v29;
  uint64_t *v30;
  _QWORD v31[4];
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
  {
    if (memcmp(v3 + 8, v4 + 8, 0x60uLL))
      goto LABEL_42;
    v7 = nw_parameters_copy_path_parameters(v3, 0);
    v8 = nw_parameters_copy_path_parameters(v5, 0);
    v9 = nw_path_parameters_are_equal(v7, v8, 0);

    if (!v9)
      goto LABEL_42;
    v10 = (const char *)*((_QWORD *)v3 + 14);
    v11 = (const char *)*((_QWORD *)v5 + 14);
    if (v10 != v11 && v10 && v11)
    {
      if (strcmp(v10, v11))
        goto LABEL_42;
    }
    else if (v10 != v11)
    {
      goto LABEL_42;
    }
    v12 = (const char *)*((_QWORD *)v3 + 15);
    v13 = (const char *)*((_QWORD *)v5 + 15);
    if (v12 != v13 && v12 && v13)
    {
      if (strcmp(v12, v13))
        goto LABEL_42;
    }
    else if (v12 != v13)
    {
      goto LABEL_42;
    }
    if (!nw_endpoint_is_equal(*((void **)v3 + 25), *((void **)v5 + 25), 0)
      || !nw_endpoint_is_equal(*((void **)v3 + 26), *((void **)v5 + 26), 0)
      || !nw_xpc_objects_equal(*((void **)v3 + 16), *((void **)v5 + 16))
      || !nw_xpc_objects_equal(*((void **)v3 + 17), *((void **)v5 + 17)))
    {
      goto LABEL_42;
    }
    v14 = *((_QWORD *)v3 + 20);
    v15 = *((_QWORD *)v5 + 20);
    if (v14 == v15)
      goto LABEL_46;
    v6 = 0;
    if (v14 && v15)
    {
      if (*(_QWORD *)(v14 + 24) - *(_QWORD *)(v14 + 16) != *(_QWORD *)(v15 + 24) - *(_QWORD *)(v15 + 16))
        goto LABEL_42;
      v34 = 0;
      v35 = &v34;
      v36 = 0x2020000000;
      v37 = 1;
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __nw_parameters_is_equal_block_invoke;
      v31[3] = &unk_1E14AB5F0;
      v16 = (unsigned __int8 *)v14;
      v32 = v5;
      v33 = &v34;
      nw_array_apply(v16, (uint64_t)v31);
      v6 = *((unsigned __int8 *)v35 + 24);

      _Block_object_dispose(&v34, 8);
      if ((_DWORD)v6)
      {
LABEL_46:
        v17 = *((_QWORD *)v3 + 22);
        v18 = *((_QWORD *)v5 + 22);
        if (v17 == v18)
          goto LABEL_47;
        v6 = 0;
        if (v17 && v18)
        {
          v19 = (unsigned __int8 *)*((_QWORD *)v3 + 22);
          if (*(_QWORD *)(v17 + 24) - *(_QWORD *)(v17 + 16) != *(_QWORD *)(v18 + 24) - *(_QWORD *)(v18 + 16))
            goto LABEL_42;
          v34 = 0;
          v35 = &v34;
          v36 = 0x2020000000;
          v37 = 0;
          v28[0] = MEMORY[0x1E0C809B0];
          v28[1] = 3221225472;
          v28[2] = __nw_parameters_is_equal_block_invoke_2;
          v28[3] = &unk_1E14AB5F0;
          v29 = v5;
          v30 = &v34;
          nw_array_apply(v19, (uint64_t)v28);
          v20 = *((unsigned __int8 *)v35 + 24);

          _Block_object_dispose(&v34, 8);
          v6 = 0;
          if (!v20)
          {
LABEL_47:
            if (!nw_proxy_config_is_equal(*((void **)v3 + 23), *((void **)v5 + 23))
              || !nw_proxy_config_is_equal(*((void **)v3 + 24), *((void **)v5 + 24))
              || !nw_protocol_stack_is_equal(*((void **)v3 + 19), *((void **)v5 + 19), 0))
            {
              goto LABEL_42;
            }
            v21 = *((_QWORD *)v3 + 21);
            v22 = *((_QWORD *)v5 + 21);
            if (v21 == v22)
              goto LABEL_48;
            v6 = 0;
            if (v21 && v22)
            {
              if (*(_QWORD *)(v21 + 24) - *(_QWORD *)(v21 + 16) != *(_QWORD *)(v22 + 24) - *(_QWORD *)(v22 + 16))
                goto LABEL_42;
              v34 = 0;
              v35 = &v34;
              v36 = 0x2020000000;
              v37 = 0;
              v25[0] = MEMORY[0x1E0C809B0];
              v25[1] = 3221225472;
              v25[2] = __nw_parameters_is_equal_block_invoke_3;
              v25[3] = &unk_1E14AB5F0;
              v26 = v5;
              v27 = &v34;
              nw_array_apply((unsigned __int8 *)v21, (uint64_t)v25);
              v23 = *((unsigned __int8 *)v35 + 24);

              _Block_object_dispose(&v34, 8);
              v6 = 0;
              if (!v23)
              {
LABEL_48:
                if (nw_dispatch_data_is_equal(*((dispatch_data_t *)v3 + 18), *((NSObject **)v5 + 18)))
                {
                  v6 = nw_xpc_objects_equal(*((void **)v3 + 27), *((void **)v5 + 27));
                  goto LABEL_43;
                }
LABEL_42:
                v6 = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_43:

  return v6;
}

void sub_183224ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t nw_proxy_config_is_equal(void *a1, void *a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t is_equal;
  uint64_t v7;
  uint64_t v8;
  size_t count;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  unsigned int v22;
  int v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD v35[4];
  unsigned __int16 *v36;
  uint64_t *v37;
  _QWORD v38[4];
  unsigned __int16 *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    is_equal = 1;
    goto LABEL_29;
  }
  is_equal = 0;
  if (v3 && v4)
  {
    v7 = *((_QWORD *)v3 + 1);
    v8 = *((_QWORD *)v5 + 1);
    if (v7 == v8)
      goto LABEL_9;
    is_equal = 0;
    if (v7 && v8)
    {
      count = nw_dictionary_get_count(v7);
      if (count != nw_dictionary_get_count(*((_QWORD *)v5 + 1)))
        goto LABEL_27;
      v41 = 0;
      v42 = &v41;
      v43 = 0x2020000000;
      v44 = 0;
      v10 = *((_QWORD *)v3 + 1);
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3221225472;
      v38[2] = __nw_proxy_config_is_equal_block_invoke;
      v38[3] = &unk_1E14AB4B0;
      v39 = v5;
      v40 = &v41;
      nw_dictionary_apply(v10, (uint64_t)v38);
      v11 = *((unsigned __int8 *)v42 + 24);

      _Block_object_dispose(&v41, 8);
      is_equal = 0;
      if (!v11)
      {
LABEL_9:
        v12 = *((_QWORD *)v3 + 6);
        v13 = *((_QWORD *)v5 + 6);
        if (v12 == v13)
          goto LABEL_33;
        is_equal = 0;
        if (v12 && v13)
        {
          if (*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16) != *(_QWORD *)(v13 + 24) - *(_QWORD *)(v13 + 16))
            goto LABEL_27;
          v41 = 0;
          v42 = &v41;
          v43 = 0x2020000000;
          v44 = 0;
          v35[0] = MEMORY[0x1E0C809B0];
          v35[1] = 3221225472;
          v35[2] = __nw_proxy_config_is_equal_block_invoke_2;
          v35[3] = &unk_1E14AB5F0;
          v36 = v5;
          v37 = &v41;
          nw_array_apply((unsigned __int8 *)v12, (uint64_t)v35);
          v14 = *((unsigned __int8 *)v42 + 24);

          _Block_object_dispose(&v41, 8);
          is_equal = 0;
          if (!v14)
          {
LABEL_33:
            v15 = (void *)*((_QWORD *)v5 + 2);
            v16 = *((id *)v3 + 2);
            v17 = v15;
            v18 = v17;
            v19 = v16 == v17;
            if (v16 != v17 && v16 && v17)
              v19 = xpc_equal(v16, v17);

            if (!v19)
              goto LABEL_27;
            if (!nw_unordered_xpc_array_is_equal(*((xpc_object_t *)v3 + 3), *((xpc_object_t *)v5 + 3)))
              goto LABEL_27;
            if (!nw_unordered_xpc_array_is_equal(*((xpc_object_t *)v3 + 4), *((xpc_object_t *)v5 + 4)))
              goto LABEL_27;
            v20 = (void *)*((_QWORD *)v3 + 13);
            v21 = (void *)*((_QWORD *)v5 + 13);
            if (v20 != v21 && !nw_authentication_credential_is_equal(v20, v21))
              goto LABEL_27;
            if (*((_DWORD *)v3 + 38) != *((_DWORD *)v5 + 38))
              goto LABEL_27;
            if (*((_DWORD *)v3 + 39) != *((_DWORD *)v5 + 39))
              goto LABEL_27;
            if (v3[84] != v5[84])
              goto LABEL_27;
            v22 = *((unsigned __int8 *)v5 + 170) ^ *((unsigned __int8 *)v3 + 170);
            if ((v22 & 7) != 0)
              goto LABEL_27;
            is_equal = 0;
            if (v22 <= 0x3F)
            {
              v24 = *((unsigned __int8 *)v5 + 171) ^ *((unsigned __int8 *)v3 + 171);
              if (!(v24 & 0x20 | v22 & 0x38))
              {
                is_equal = 0;
                if ((v24 & 0xFFFFFFDF) == 0 && *((_DWORD *)v3 + 40) == *((_DWORD *)v5 + 40))
                {
                  if (((*((_BYTE *)v5 + 172) ^ *((_BYTE *)v3 + 172)) & 3) != 0
                    || uuid_compare((const unsigned __int8 *)v3 + 56, (const unsigned __int8 *)v5 + 56)
                    || uuid_compare((const unsigned __int8 *)v3 + 72, (const unsigned __int8 *)v5 + 72)
                    || !nw_proxy_config_is_equal(*((_QWORD *)v3 + 11), *((_QWORD *)v5 + 11)))
                  {
                    goto LABEL_27;
                  }
                  v25 = (void *)*((_QWORD *)v3 + 15);
                  v26 = (void *)*((_QWORD *)v5 + 15);
                  if (v25 != v26)
                  {
                    is_equal = 0;
                    if (!v25 || !v26)
                      goto LABEL_29;
                    if (!xpc_equal(v25, v26))
                      goto LABEL_27;
                  }
                  v27 = (void *)*((_QWORD *)v3 + 16);
                  v28 = (void *)*((_QWORD *)v5 + 16);
                  if (v27 != v28)
                  {
                    is_equal = 0;
                    if (!v27 || !v28)
                      goto LABEL_29;
                    if (!xpc_equal(v27, v28))
                      goto LABEL_27;
                  }
                  v29 = (void *)*((_QWORD *)v3 + 17);
                  v30 = (void *)*((_QWORD *)v5 + 17);
                  if (v29 != v30)
                  {
                    is_equal = 0;
                    if (!v29 || !v30)
                      goto LABEL_29;
                    if (!xpc_equal(v29, v30))
                      goto LABEL_27;
                  }
                  v31 = (void *)*((_QWORD *)v3 + 18);
                  v32 = (void *)*((_QWORD *)v5 + 18);
                  if (v31 != v32)
                  {
                    is_equal = 0;
                    if (!v31 || !v32)
                      goto LABEL_29;
                    if (!xpc_equal(v31, v32))
                      goto LABEL_27;
                  }
                  v33 = (void *)*((_QWORD *)v3 + 14);
                  v34 = (void *)*((_QWORD *)v5 + 14);
                  if (v33 == v34)
                  {
LABEL_58:
                    is_equal = nw_endpoint_is_equal(*((void **)v3 + 5), *((void **)v5 + 5), 0);
                    goto LABEL_29;
                  }
                  is_equal = 0;
                  if (v33 && v34)
                  {
                    if (xpc_equal(v33, v34))
                      goto LABEL_58;
LABEL_27:
                    is_equal = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_29:

  return is_equal;
}

void sub_1832252EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_stack_is_equal(void *a1, void *a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t is_equal;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v16[4];
  _QWORD *v17;
  uint64_t *v18;
  int v19;
  _QWORD v20[4];
  _QWORD *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  is_equal = v5 == v6;
  if (v5 != v6 && v5 && v6)
  {
    v9 = v5[1];
    v10 = v6[1];
    if (v9 == v10)
      goto LABEL_9;
    is_equal = 0;
    if (v9 && v10)
    {
      if (*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16) != *(_QWORD *)(v10 + 24) - *(_QWORD *)(v10 + 16))
        goto LABEL_17;
      v24 = 0;
      v25 = &v24;
      v26 = 0x2020000000;
      v27 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_protocol_stack_is_equal_block_invoke;
      v20[3] = &unk_1E149CF88;
      v23 = a3;
      v21 = v6;
      v22 = &v24;
      nw_array_apply((unsigned __int8 *)v9, (uint64_t)v20);
      v11 = *((unsigned __int8 *)v25 + 24);

      _Block_object_dispose(&v24, 8);
      is_equal = 0;
      if (!v11)
      {
LABEL_9:
        v12 = v5[2];
        v13 = v7[2];
        if (v12 == v13)
          goto LABEL_21;
        is_equal = 0;
        if (v12 && v13)
        {
          if (*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16) != *(_QWORD *)(v13 + 24) - *(_QWORD *)(v13 + 16))
            goto LABEL_17;
          v24 = 0;
          v25 = &v24;
          v26 = 0x2020000000;
          v27 = 0;
          v16[0] = MEMORY[0x1E0C809B0];
          v16[1] = 3221225472;
          v16[2] = __nw_protocol_stack_is_equal_block_invoke_2;
          v16[3] = &unk_1E149CF88;
          v19 = a3;
          v17 = v7;
          v18 = &v24;
          nw_array_apply((unsigned __int8 *)v12, (uint64_t)v16);
          v14 = *((unsigned __int8 *)v25 + 24);

          _Block_object_dispose(&v24, 8);
          is_equal = 0;
          if (!v14)
          {
LABEL_21:
            if (nw_protocol_option_is_equal((void *)v5[3], (void *)v7[3])
              && nw_protocol_option_is_equal((void *)v5[5], (void *)v7[5]))
            {
              is_equal = nw_protocol_option_is_equal((void *)v5[6], (void *)v7[6]);
              goto LABEL_18;
            }
LABEL_17:
            is_equal = 0;
          }
        }
      }
    }
  }
LABEL_18:

  return is_equal;
}

void sub_183225524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_dispatch_data_is_equal(dispatch_data_t data, NSObject *a2)
{
  _BOOL8 v2;
  size_t size;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v2 = data == a2;
  if (data != a2 && data && a2)
  {
    size = dispatch_data_get_size(data);
    if (size == dispatch_data_get_size(a2))
    {
      v8 = 0;
      v9 = &v8;
      v10 = 0x2000000000;
      v11 = 1;
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 0x40000000;
      v7[2] = __nw_dispatch_data_is_equal_block_invoke;
      v7[3] = &unk_1E14A3500;
      v7[4] = &v8;
      v7[5] = a2;
      dispatch_data_apply(data, v7);
      v2 = *((_BYTE *)v9 + 24) != 0;
      _Block_object_dispose(&v8, 8);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void nw_protocol_ipv4_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t default_input_handler;
  uint64_t v4;
  void (*v5)(uint64_t, nw_protocol *);
  void *v6;
  uint64_t v7;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v9;
  nw_protocol_callbacks *v10;
  void (**v11)(_QWORD);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  const void *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_ipv4_disconnected";
    default_input_handler = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v24))
      goto LABEL_59;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_ipv4_disconnected";
        v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_58;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21)
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_ipv4_disconnected";
        v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_58;
      }
      if (!v21)
      {
LABEL_48:
        free(backtrace_string);
        if (!default_input_handler)
          return;
LABEL_30:
        free((void *)default_input_handler);
        return;
      }
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_ipv4_disconnected";
      v28 = 2082;
      v29 = backtrace_string;
      v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_182FBE000, v17, v18, v22, buf, 0x16u);
      goto LABEL_48;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_ipv4_disconnected";
    v19 = "%{public}s called with null protocol";
LABEL_58:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
LABEL_59:
    if (!default_input_handler)
      return;
    goto LABEL_30;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_ipv4_disconnected";
    default_input_handler = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v24))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_ipv4_disconnected";
      v19 = "%{public}s called with null ipv4";
      goto LABEL_58;
    }
    if (!v24)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_ipv4_disconnected";
      v19 = "%{public}s called with null ipv4, backtrace limit exceeded";
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (!v23)
        goto LABEL_48;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_ipv4_disconnected";
      v28 = 2082;
      v29 = backtrace_string;
      v22 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_47;
    }
    if (!v23)
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_ipv4_disconnected";
    v19 = "%{public}s called with null ipv4, no backtrace";
    goto LABEL_58;
  }
  a1[2].identifier = 0;
  default_input_handler = (uint64_t)a1->default_input_handler;
  if (default_input_handler)
  {
    v4 = *(_QWORD *)(default_input_handler + 24);
    if (v4)
    {
      v5 = *(void (**)(uint64_t, nw_protocol *))(v4 + 48);
      if (v5)
      {
        v6 = *(void **)(default_input_handler + 40);
        if (v6 == &nw_protocol_ref_counted_handle)
        {
          v7 = *(_QWORD *)(default_input_handler + 88);
          if (v7)
            *(_QWORD *)(default_input_handler + 88) = v7 + 1;
        }
        callbacks = a1[1].callbacks;
        if (callbacks)
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        v5(default_input_handler, a1);
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          v9 = a1[1].callbacks;
          if (v9)
          {
            v10 = (nw_protocol_callbacks *)((char *)v9 - 1);
            a1[1].callbacks = v10;
            if (!v10)
            {
              v11 = *(void (***)(_QWORD))a1[1].flow_id;
              if (v11)
              {
                *(_QWORD *)a1[1].flow_id = 0;
                v11[2](v11);
                _Block_release(v11);
              }
              if ((a1[1].flow_id[8] & 1) != 0)
              {
                v12 = *(const void **)a1[1].flow_id;
                if (v12)
                  _Block_release(v12);
              }
              free(a1);
            }
          }
        }
        if (v6 == &nw_protocol_ref_counted_handle
          && *(_UNKNOWN **)(default_input_handler + 40) == &nw_protocol_ref_counted_handle)
        {
          v13 = *(_QWORD *)(default_input_handler + 88);
          if (v13)
          {
            v14 = v13 - 1;
            *(_QWORD *)(default_input_handler + 88) = v14;
            if (!v14)
            {
              v15 = *(void (***)(_QWORD))(default_input_handler + 64);
              if (v15)
              {
                *(_QWORD *)(default_input_handler + 64) = 0;
                v15[2](v15);
                _Block_release(v15);
              }
              if ((*(_BYTE *)(default_input_handler + 72) & 1) != 0)
              {
                v16 = *(const void **)(default_input_handler + 64);
                if (v16)
                  _Block_release(v16);
              }
              goto LABEL_30;
            }
          }
        }
      }
    }
  }
}

void nw_establishment_report_get_accurate_ecn_state(void *a1, _DWORD *a2, _DWORD *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[6];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  os_log_type_t type[8];
  os_log_type_t *v37;
  uint64_t v38;
  int v39;
  _BYTE buf[24];
  void *v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v32) = 0;
    if (!__nwlog_fault(v13, type, &v32))
      goto LABEL_55;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if ((_BYTE)v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type[0];
      v22 = os_log_type_enabled(v14, type[0]);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v13)
          goto LABEL_5;
LABEL_56:
        free(v13);
        goto LABEL_5;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v32) = 0;
    if (!__nwlog_fault(v13, type, &v32))
      goto LABEL_55;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null client_accurate_ecn_state", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!(_BYTE)v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null client_accurate_ecn_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = type[0];
    v25 = os_log_type_enabled(v14, type[0]);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null client_accurate_ecn_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null client_accurate_ecn_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v32) = 0;
    if (!__nwlog_fault(v13, type, &v32))
      goto LABEL_55;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null server_accurate_ecn_state", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!(_BYTE)v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null server_accurate_ecn_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = type[0];
    v27 = os_log_type_enabled(v14, type[0]);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null server_accurate_ecn_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_establishment_report_get_accurate_ecn_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null server_accurate_ecn_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v23);
    if (!v13)
      goto LABEL_5;
    goto LABEL_56;
  }
  *(_QWORD *)type = 0;
  v37 = type;
  v39 = 0;
  v38 = 0x2020000000;
  v32 = 0;
  v33 = &v32;
  v35 = 0;
  v34 = 0x2020000000;
  v7 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __nw_establishment_report_get_accurate_ecn_state_block_invoke;
  v31[3] = &unk_1E14AAD48;
  v31[4] = type;
  v31[5] = &v32;
  v8 = v5;
  v9 = v31;
  v10 = (unsigned __int8 *)v8[8];
  *(_QWORD *)buf = v7;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = __nw_establishment_report_enumerate_protocol_l4s_state_block_invoke;
  v41 = &unk_1E14AC278;
  v11 = v9;
  v42 = v11;
  nw_array_apply(v10, (uint64_t)buf);

  *a2 = *((_DWORD *)v37 + 6);
  *a3 = *((_DWORD *)v33 + 6);
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(type, 8);
LABEL_5:

}

void NWListener.init(using:on:)(uint64_t a1, unsigned __int16 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  int v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  NSObject *v12;
  uint64_t v13;
  nw_listener_t v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  nw_parameters_t parameters[2];

  v4 = v2;
  v6 = *a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB5F0);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 192) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 155) = 0u;
  *(_QWORD *)(v7 + 176) = 0;
  *(_DWORD *)(v7 + 184) = 0;
  *(_WORD *)(v7 + 188) = 128;
  v4[2] = v7;
  if (v6)
  {
    parameters[0] = 0;
    parameters[1] = (nw_parameters_t)0xE000000000000000;
    sub_183B91F14();
    v8 = (os_unfair_lock_s *)0xE000000000000000;
    v9 = *(os_unfair_lock_s **)(a1 + 16);
    v10 = v9 + 4;
    v11 = v9 + 6;
    os_unfair_lock_lock(v9 + 6);
    sub_183226978(v10, parameters);
    if (!v3)
    {
      os_unfair_lock_unlock(v11);
      v12 = parameters[0];
      v13 = sub_183B91758();
      swift_bridgeObjectRelease();
      v14 = nw_listener_create_with_port((const char *)(v13 + 32), v12);
      swift_unknownObjectRelease();
      swift_release();
      if (v14)
      {
LABEL_4:
        v4[3] = v14;
        v4[4] = a1;
        return;
      }
      goto LABEL_7;
    }
    os_unfair_lock_unlock(v11);
    __break(1u);
  }
  else
  {
    v15 = *(os_unfair_lock_s **)(a1 + 16);
    v16 = v15 + 4;
    v8 = v15 + 6;
    os_unfair_lock_lock(v15 + 6);
    sub_183226978(v16, parameters);
    if (!v3)
    {
      os_unfair_lock_unlock(v8);
      v14 = nw_listener_create(parameters[0]);
      swift_unknownObjectRelease();
      if (v14)
        goto LABEL_4;
LABEL_7:
      sub_18323C200();
      swift_allocError();
      *(_DWORD *)v17 = 22;
      *(_BYTE *)(v17 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_deallocPartialClassInstance();
      return;
    }
  }
  os_unfair_lock_unlock(v8);
  __break(1u);
}

nw_listener_t nw_listener_create_with_port(const char *port, nw_parameters_t parameters)
{
  NSObject *v3;
  id v4;
  char *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  nw_allow_use_of_dispatch_internal();
  if (port)
  {
    if (v3)
    {
      v4 = nw_listener_copy_parameters_with_port(v3, port, 1);
      if (v4)
        v5 = -[NWConcrete_nw_listener initWithParameters:multicastDescriptor:]([NWConcrete_nw_listener alloc], v4, 0);
      else
        v5 = 0;

      goto LABEL_7;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_listener_create_with_port";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v20)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_listener_create_with_port";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_listener_create_with_port";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null port", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v20)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null port, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null port, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_listener_create_with_port";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null port, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
  }
LABEL_40:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_7:

  return (nw_listener_t)v5;
}

void sub_18322695C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_183226978@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

void sub_18322743C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void __nw_agent_create_block_invoke_2(uint64_t a1)
{
  NWConcrete_nw_agent *WeakRetained;

  WeakRetained = (NWConcrete_nw_agent *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *((_QWORD *)WeakRetained + 106) == *(_QWORD *)(a1 + 32))
  {
    while (nw_agent_read_message_on_queue(WeakRetained))
      ;
  }

}

void sub_1832274D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_183228B4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path *nw_path_copy_path_for_tlv(_OWORD *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  id v11;
  nw_parameters_t v12;
  nw_parameters_t v13;
  NWConcrete_nw_path *browse;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  id v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  id v23;
  os_log_type_t v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char v31;
  os_log_type_t v32;
  os_log_type_t v33;
  id v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  id v38;
  os_log_type_t v39;
  os_log_type_t v41;
  _BOOL4 v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  void *v56;
  os_log_type_t v57;
  void *v58;
  os_log_type_t v59;
  char *backtrace_string;
  os_log_type_t v61;
  _BOOL4 v62;
  os_log_type_t v63;
  _BOOL4 v64;
  char *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  os_log_type_t v68;
  os_log_type_t v69;
  os_log_type_t v70;
  char v71;
  os_log_type_t type;
  __int16 v73;
  unsigned __int16 v74;
  char v75;
  id v76;
  id v77;
  id obj;
  os_log_type_t v79[8];
  uint8_t buf[4];
  const char *v81;
  __int16 v82;
  char *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  if (!v11)
  {
    __nwlog_obj();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v81 = "nw_path_copy_path_for_tlv";
    v53 = (char *)_os_log_send_and_compose_impl();

    v79[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(obj) = 0;
    if (!__nwlog_fault(v53, v79, &obj))
      goto LABEL_157;
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v55 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_156;
    }
    if (!(_BYTE)obj)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v68 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v54, v68, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_156;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v54 = objc_claimAutoreleasedReturnValue();
    v61 = v79[0];
    v62 = os_log_type_enabled(v54, v79[0]);
    if (!backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v54, v61, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_156;
    }
    if (v62)
    {
      *(_DWORD *)buf = 136446466;
      v81 = "nw_path_copy_path_for_tlv";
      v82 = 2082;
      v83 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v54, v61, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_132;
  }
  if (!a3)
  {
    __nwlog_obj();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v81 = "nw_path_copy_path_for_tlv";
    v53 = (char *)_os_log_send_and_compose_impl();

    v79[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(obj) = 0;
    if (!__nwlog_fault(v53, v79, &obj))
      goto LABEL_157;
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v57 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v54, v57, "%{public}s called with null parameters_buffer", buf, 0xCu);
      }
      goto LABEL_156;
    }
    if (!(_BYTE)obj)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v69 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v54, v69, "%{public}s called with null parameters_buffer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_156;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v54 = objc_claimAutoreleasedReturnValue();
    v63 = v79[0];
    v64 = os_log_type_enabled(v54, v79[0]);
    if (!backtrace_string)
    {
      if (v64)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v54, v63, "%{public}s called with null parameters_buffer, no backtrace", buf, 0xCu);
      }
      goto LABEL_156;
    }
    if (v64)
    {
      *(_DWORD *)buf = 136446466;
      v81 = "nw_path_copy_path_for_tlv";
      v82 = 2082;
      v83 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v54, v63, "%{public}s called with null parameters_buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_132:

    free(backtrace_string);
    if (!v53)
      goto LABEL_159;
    goto LABEL_158;
  }
  if (!a4)
  {
    __nwlog_obj();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v81 = "nw_path_copy_path_for_tlv";
    v53 = (char *)_os_log_send_and_compose_impl();

    v79[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(obj) = 0;
    if (!__nwlog_fault(v53, v79, &obj))
      goto LABEL_157;
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v59 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v54, v59, "%{public}s called with null parameters_buffer_size", buf, 0xCu);
      }
    }
    else if ((_BYTE)obj)
    {
      v65 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v66 = v79[0];
      v67 = os_log_type_enabled(v54, v79[0]);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446466;
          v81 = "nw_path_copy_path_for_tlv";
          v82 = 2082;
          v83 = v65;
          _os_log_impl(&dword_182FBE000, v54, v66, "%{public}s called with null parameters_buffer_size, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v65);
LABEL_157:
        if (!v53)
        {
LABEL_159:
          browse = 0;
          goto LABEL_70;
        }
LABEL_158:
        free(v53);
        goto LABEL_159;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v54, v66, "%{public}s called with null parameters_buffer_size, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v70 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v54, v70, "%{public}s called with null parameters_buffer_size, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_156:

    goto LABEL_157;
  }
  v12 = nw_parameters_create();
  v13 = v12;
  if (v12)
  {
    nw_parameters_set_context(v12, v11);
    obj = 0;
    *(_QWORD *)v79 = 0;
    v76 = 0;
    v77 = 0;
    v75 = 0;
    v74 = 0;
    v73 = 0;
    if ((nw_path_parse_necp_parameters(v13, (void **)v79, &obj, &v77, &v76, &v75, &v74, (char *)&v73 + 1, &v73, a3, a4) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v81 = "nw_path_copy_path_for_tlv";
      v16 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v71 = 0;
      if (!__nwlog_fault(v16, &type, &v71))
        goto LABEL_65;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v81 = "nw_path_copy_path_for_tlv";
          _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s nw_path_parse_necp_parameters failed", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (!v71)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v33 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v81 = "nw_path_copy_path_for_tlv";
          _os_log_impl(&dword_182FBE000, v17, v33, "%{public}s nw_path_parse_necp_parameters failed, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_64;
      }
      v28 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = (id)gLogObj;
      v29 = type;
      v30 = os_log_type_enabled(v17, type);
      if (!v28)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v81 = "nw_path_copy_path_for_tlv";
          _os_log_impl(&dword_182FBE000, v17, v29, "%{public}s nw_path_parse_necp_parameters failed, no backtrace", buf, 0xCu);
        }
        goto LABEL_64;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v81 = "nw_path_copy_path_for_tlv";
        v82 = 2082;
        v83 = v28;
        _os_log_impl(&dword_182FBE000, v17, v29, "%{public}s nw_path_parse_necp_parameters failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_33;
    }
    if (v77)
    {
      browse = nw_path_create_browse(v77, v13);
      if (!browse)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        v16 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v71 = 0;
        if (!__nwlog_fault(v16, &type, &v71))
          goto LABEL_65;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = (id)gLogObj;
          v18 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v81 = "nw_path_copy_path_for_tlv";
            _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s nw_path_create_browse failed", buf, 0xCu);
          }
          goto LABEL_64;
        }
        if (!v71)
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v49 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v81 = "nw_path_copy_path_for_tlv";
            _os_log_impl(&dword_182FBE000, v17, v49, "%{public}s nw_path_create_browse failed, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_64;
        }
        v28 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        v42 = os_log_type_enabled(v17, type);
        if (!v28)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446210;
            v81 = "nw_path_copy_path_for_tlv";
            _os_log_impl(&dword_182FBE000, v17, v41, "%{public}s nw_path_create_browse failed, no backtrace", buf, 0xCu);
          }
          goto LABEL_64;
        }
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          v81 = "nw_path_copy_path_for_tlv";
          v82 = 2082;
          v83 = v28;
          _os_log_impl(&dword_182FBE000, v17, v41, "%{public}s nw_path_create_browse failed, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_33:

        free(v28);
        if (!v16)
          goto LABEL_67;
        goto LABEL_66;
      }
    }
    else
    {
      browse = nw_path_create(*(void **)v79, v13);
      if (!browse)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v38 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        v16 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v71 = 0;
        if (!__nwlog_fault(v16, &type, &v71))
          goto LABEL_65;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = (id)gLogObj;
          v39 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v81 = "nw_path_copy_path_for_tlv";
            _os_log_impl(&dword_182FBE000, v17, v39, "%{public}s nw_path_create failed", buf, 0xCu);
          }
        }
        else if (v71)
        {
          v46 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v47 = type;
          v48 = os_log_type_enabled(v17, type);
          if (v46)
          {
            if (v48)
            {
              *(_DWORD *)buf = 136446466;
              v81 = "nw_path_copy_path_for_tlv";
              v82 = 2082;
              v83 = v46;
              _os_log_impl(&dword_182FBE000, v17, v47, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v46);
            if (!v16)
              goto LABEL_67;
            goto LABEL_66;
          }
          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            v81 = "nw_path_copy_path_for_tlv";
            _os_log_impl(&dword_182FBE000, v17, v47, "%{public}s nw_path_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v51 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v81 = "nw_path_copy_path_for_tlv";
            _os_log_impl(&dword_182FBE000, v17, v51, "%{public}s nw_path_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_64:

LABEL_65:
        if (!v16)
        {
LABEL_67:
          browse = 0;
          goto LABEL_68;
        }
LABEL_66:
        free(v16);
        goto LABEL_67;
      }
    }
    objc_storeStrong((id *)&browse->group_descriptor, obj);
    objc_storeStrong((id *)&browse->advertise_descriptor, v76);
    v31 = *((_BYTE *)browse + 475) & 0xFC | v75;
    browse->custom_ethertype = v74;
    browse->custom_ip_protocol = HIBYTE(v73);
    *((_BYTE *)browse + 475) = v31 | (2 * v73);
    *(_OWORD *)browse->client_id = *a1;
    if (!a5 || !a6 || nw_path_parse_necp_result(browse, a5, a6))
    {
      nw_path_snapshot_path(browse);
LABEL_68:

      goto LABEL_69;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v81 = "nw_path_copy_path_for_tlv";
    v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v71 = 0;
    if (__nwlog_fault(v35, &type, &v71))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v81 = "nw_path_copy_path_for_tlv";
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s nw_path_parse_necp_result failed", buf, 0xCu);
        }
      }
      else if (v71)
      {
        v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        v45 = os_log_type_enabled(v36, type);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v81 = "nw_path_copy_path_for_tlv";
            v82 = 2082;
            v83 = v43;
            _os_log_impl(&dword_182FBE000, v36, v44, "%{public}s nw_path_parse_necp_result failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v43);
          goto LABEL_102;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v81 = "nw_path_copy_path_for_tlv";
          _os_log_impl(&dword_182FBE000, v36, v44, "%{public}s nw_path_parse_necp_result failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v50 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v81 = "nw_path_copy_path_for_tlv";
          _os_log_impl(&dword_182FBE000, v36, v50, "%{public}s nw_path_parse_necp_result failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_102:
    if (v35)
      free(v35);

    goto LABEL_67;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v19 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v81 = "nw_path_copy_path_for_tlv";
  v20 = (char *)_os_log_send_and_compose_impl();

  v79[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(obj) = 0;
  if (__nwlog_fault(v20, v79, &obj))
  {
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      v22 = v79[0];
      if (os_log_type_enabled(v21, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }
    else if ((_BYTE)obj)
    {
      v25 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      v26 = v79[0];
      v27 = os_log_type_enabled(v21, v79[0]);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v81 = "nw_path_copy_path_for_tlv";
          v82 = 2082;
          v83 = v25;
          _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v25);
        if (!v20)
          goto LABEL_61;
        goto LABEL_60;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      v32 = v79[0];
      if (os_log_type_enabled(v21, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v20)
LABEL_60:
    free(v20);
LABEL_61:
  browse = 0;
LABEL_69:

LABEL_70:
  return browse;
}

void sub_183229EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

uint64_t nw_path_parse_necp_parameters(void *a1, void **a2, id *a3, id *a4, id *a5, _BYTE *a6, _WORD *a7, char *a8, _BYTE *a9, uint64_t a10, unint64_t a11)
{
  const unsigned __int8 *v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  unint64_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  uint64_t v25;
  int v26;
  size_t v27;
  id v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  BOOL v38;
  NSObject *v39;
  NSObject *v40;
  int v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  nw_endpoint_t v47;
  NSObject *v48;
  NSObject *v49;
  __int128 v50;
  __int128 v51;
  NWConcrete_nw_protocol_options *v52;
  int v53;
  NSObject *v54;
  uint64_t v55;
  id v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  NWConcrete_nw_interface *v60;
  xpc_object_t v61;
  void *v62;
  id v63;
  __int128 v64;
  __int128 v65;
  NSObject *v66;
  uint64_t v67;
  xpc_object_t v68;
  __int128 v69;
  __int128 v70;
  xpc_object_t v71;
  void *v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  char *v82;
  unsigned int v83;
  uint64_t v84;
  NSObject *v85;
  NSObject *v86;
  uint64_t v87;
  nw_endpoint_t v88;
  NSObject *v89;
  id v90;
  const char *v91;
  NSObject *v92;
  os_log_type_t v93;
  int v94;
  NSObject *v95;
  int v96;
  NSObject *v97;
  char v98;
  NSObject *v99;
  nw_protocol_options_t v100;
  _BOOL4 v101;
  NSObject *options;
  id v103;
  os_log_type_t v104;
  id v105;
  os_log_type_t v106;
  id v107;
  os_log_type_t v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  __int128 v113;
  __int128 v114;
  NSObject *v115;
  uint64_t v116;
  char v117;
  NSObject *v118;
  void *v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  __int128 v123;
  void *v124;
  void *v125;
  NWConcrete_nw_protocol_options *deserialized_options;
  unsigned int v127;
  unsigned int v128;
  NSObject *v129;
  NSObject *v130;
  NWConcrete_nw_protocol_options *v131;
  int v132;
  NSObject *v133;
  NSObject *v134;
  NSObject *v135;
  NSObject *v136;
  NSObject *v137;
  NSObject *v138;
  NSObject *v139;
  NSObject *v140;
  NSObject *v141;
  NSObject *v142;
  Class v143;
  __int16 v144;
  NSObject *v145;
  NSObject *v146;
  Class v147;
  __int16 v148;
  NSObject *v149;
  Class v150;
  __int16 v151;
  NSObject *v152;
  int v153;
  NSObject *v154;
  id v155;
  os_log_type_t v156;
  id v157;
  os_log_type_t v158;
  unsigned int v159;
  uint64_t v160;
  xpc_object_t v161;
  NSObject *v162;
  NSObject *v163;
  Class isa;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  id v168;
  os_log_type_t v169;
  NSObject *v170;
  NSObject *v171;
  Class v172;
  uint64_t v173;
  NSObject *v174;
  NSObject *v175;
  uint64_t v176;
  NSObject *v177;
  uint64_t v178;
  void *v179;
  char *v180;
  NSObject *v181;
  os_log_type_t v182;
  void *v183;
  char *v184;
  NSObject *v185;
  os_log_type_t v186;
  char *v187;
  _BOOL4 v188;
  char *v189;
  os_log_type_t v190;
  _BOOL4 v191;
  char *v192;
  os_log_type_t v193;
  _BOOL4 v194;
  os_log_type_t v195;
  _BOOL4 v196;
  os_log_type_t v197;
  _BOOL4 v198;
  void *v199;
  os_log_type_t v200;
  os_log_type_t v201;
  _BOOL4 v202;
  os_log_type_t v203;
  _BOOL4 v204;
  os_log_type_t v205;
  _BOOL4 v206;
  os_log_type_t v207;
  _BOOL4 v208;
  os_log_type_t v209;
  os_log_type_t v210;
  os_log_type_t v211;
  os_log_type_t v212;
  os_log_type_t v213;
  NSObject *p_super;
  os_log_type_t v215;
  os_log_type_t v216;
  os_log_type_t v217;
  void *v218;
  os_log_type_t v219;
  void *v220;
  os_log_type_t v221;
  NSObject *v222;
  id v223;
  char *v224;
  NSObject *v225;
  os_log_type_t v226;
  char *v227;
  os_log_type_t v228;
  _BOOL4 v229;
  os_log_type_t v230;
  char *v231;
  NSObject *v232;
  NSObject *v233;
  uint64_t v234;
  void *v235;
  char *v236;
  NSObject *v237;
  os_log_type_t v238;
  char *v239;
  os_log_type_t v240;
  _BOOL4 v241;
  os_log_type_t v242;
  char *v243;
  os_log_type_t v244;
  _BOOL4 v245;
  char *v246;
  os_log_type_t v247;
  _BOOL4 v248;
  char *v249;
  os_log_type_t v250;
  _BOOL4 v251;
  char *v252;
  os_log_type_t v253;
  _BOOL4 v254;
  NSObject *v255;
  void *v256;
  char *v257;
  NSObject *v258;
  os_log_type_t v259;
  void *v260;
  char *v261;
  NSObject *v262;
  os_log_type_t v263;
  void *v264;
  char *v265;
  NSObject *v266;
  os_log_type_t v267;
  void *v268;
  char *v269;
  NSObject *v270;
  os_log_type_t v271;
  void *v272;
  char *v273;
  NSObject *v274;
  os_log_type_t v275;
  void *v276;
  char *v277;
  NSObject *v278;
  os_log_type_t v279;
  os_log_type_t v280;
  char *v281;
  _BOOL4 v282;
  char *v283;
  os_log_type_t v284;
  _BOOL4 v285;
  char *v286;
  os_log_type_t v287;
  _BOOL4 v288;
  char *v289;
  os_log_type_t v290;
  _BOOL4 v291;
  void *v292;
  char *v293;
  NSObject *v294;
  os_log_type_t v295;
  char *v296;
  os_log_type_t v297;
  _BOOL4 v298;
  char *v299;
  os_log_type_t v300;
  _BOOL4 v301;
  char *v302;
  os_log_type_t v303;
  _BOOL4 v304;
  char *v305;
  os_log_type_t v306;
  _BOOL4 v307;
  os_log_type_t v308;
  os_log_type_t v309;
  os_log_type_t v310;
  os_log_type_t v311;
  void *v312;
  char *v313;
  NSObject *v314;
  os_log_type_t v315;
  os_log_type_t v316;
  os_log_type_t v317;
  void *v318;
  size_t v319;
  size_t v320;
  char *v321;
  NSObject *v322;
  os_log_type_t v323;
  size_t v324;
  size_t v325;
  char *v326;
  os_log_type_t v327;
  _BOOL4 v328;
  size_t v329;
  size_t v330;
  void *v331;
  char *v332;
  NSObject *v333;
  os_log_type_t v334;
  os_log_type_t v335;
  size_t v336;
  size_t v337;
  char *v338;
  os_log_type_t v339;
  _BOOL4 v340;
  size_t v341;
  size_t v342;
  os_log_type_t v343;
  void *v344;
  size_t v345;
  size_t v346;
  NSObject *v347;
  os_log_type_t v348;
  size_t v349;
  size_t v350;
  char *v351;
  os_log_type_t v352;
  _BOOL4 v353;
  size_t v354;
  size_t v355;
  void *v356;
  char *v357;
  NSObject *v358;
  os_log_type_t v359;
  os_log_type_t v360;
  size_t v361;
  size_t v362;
  char *v363;
  os_log_type_t v364;
  _BOOL4 v365;
  size_t v366;
  size_t v367;
  os_log_type_t v368;
  void *v369;
  size_t v370;
  size_t v371;
  NSObject *v372;
  os_log_type_t v373;
  size_t v374;
  size_t v375;
  char *v376;
  os_log_type_t v377;
  _BOOL4 v378;
  size_t v379;
  size_t v380;
  void *v381;
  char *v382;
  NSObject *v383;
  os_log_type_t v384;
  os_log_type_t v385;
  size_t v386;
  size_t v387;
  char *v388;
  os_log_type_t v389;
  _BOOL4 v390;
  size_t v391;
  size_t v392;
  os_log_type_t v393;
  void *v394;
  size_t v395;
  size_t v396;
  NSObject *v397;
  os_log_type_t v398;
  size_t v399;
  size_t v400;
  char *v401;
  os_log_type_t v402;
  _BOOL4 v403;
  size_t v404;
  size_t v405;
  void *v406;
  char *v407;
  NSObject *v408;
  os_log_type_t v409;
  os_log_type_t v410;
  size_t v411;
  size_t v412;
  char *v413;
  os_log_type_t v414;
  _BOOL4 v415;
  size_t v416;
  size_t v417;
  os_log_type_t v418;
  char *v419;
  os_log_type_t v420;
  _BOOL4 v421;
  char *v422;
  os_log_type_t v423;
  _BOOL4 v424;
  os_log_type_t v425;
  os_log_type_t v426;
  os_log_type_t v427;
  os_log_type_t v428;
  os_log_type_t v429;
  os_log_type_t v430;
  os_log_type_t v431;
  os_log_type_t v432;
  NSObject *v433;
  NSObject *v434;
  NSObject *v435;
  NSObject *v436;
  NSObject *v437;
  NSObject *v438;
  NSObject *v439;
  NSObject *v440;
  NSObject *v441;
  NSObject *v442;
  NSObject *v443;
  NSObject *v444;
  NSObject *v445;
  NSObject *v446;
  NSObject *v447;
  NSObject *v448;
  NSObject *v449;
  NSObject *v450;
  NSObject *v451;
  NSObject *v452;
  NSObject *v453;
  NSObject *v454;
  NSObject *v455;
  NSObject *v456;
  NSObject *v457;
  NSObject *v458;
  NSObject *v459;
  NSObject *v460;
  NSObject *v461;
  NSObject *v462;
  NSObject *v463;
  NSObject *v464;
  NSObject *v465;
  os_log_type_t v466;
  os_log_type_t v467;
  _BOOL4 v468;
  os_log_type_t v469;
  id v470;
  char *v471;
  NSObject *v472;
  os_log_type_t v473;
  const char *v474;
  char *v475;
  NSObject *v476;
  os_log_type_t v477;
  os_log_type_t v478;
  os_log_type_t v479;
  nw_parameters_t v480;
  id *v481;
  NSObject *v482;
  NWConcrete_nw_protocol_options *v483;
  id *v484;
  id v485;
  id *v486;
  id v487;
  id v488;
  _BOOL4 v489;
  NSObject *v490;
  NSObject *v491;
  int v492;
  const sockaddr *address;
  NSObject *v494;
  void **v495;
  id v496;
  int v497;
  const sockaddr *v498;
  nw_endpoint_t v499;
  void *v500;
  NSObject *v501;
  NSObject *v502;
  uint64_t v503;
  xpc_object_t v504;
  id v505;
  char *v506;
  NSObject *v507;
  os_log_type_t v508;
  char *v509;
  os_log_type_t v510;
  _BOOL4 v511;
  os_log_type_t v512;
  void *v514;
  os_log_type_t v515;
  void *v516;
  os_log_type_t v517;
  void *v518;
  os_log_type_t v519;
  char *backtrace_string;
  os_log_type_t v521;
  _BOOL4 v522;
  os_log_type_t v523;
  _BOOL4 v524;
  os_log_type_t v525;
  _BOOL4 v526;
  void *v527;
  char *v528;
  NSObject *v529;
  os_log_type_t v530;
  char *v531;
  os_log_type_t v532;
  _BOOL4 v533;
  os_log_type_t v534;
  os_log_type_t v535;
  os_log_type_t v536;
  os_log_type_t v537;
  os_log_type_t v538;
  os_log_type_t type;
  _BYTE *v540;
  char v541;
  _WORD *v542;
  char *v543;
  uint64_t v544;
  uint64_t v548;
  uint64_t v549;
  size_t v550;
  char *v551;
  void **v552;
  nw_endpoint_t v553;
  NWConcrete_nw_protocol_options *v554;
  nw_parameters_t parameters;
  char v556;
  int v557;
  __int16 v558;
  int v559;
  __int16 v560;
  os_log_type_t v561;
  uint8_t buf[64];
  int v563;
  _BYTE uu[24];
  size_t v565;
  __int16 v566;
  char *v567;
  uint64_t v568;

  v568 = *MEMORY[0x1E0C80C00];
  parameters = a1;
  if (!parameters)
  {
    __nwlog_obj();
    v514 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
    v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v559) = 0;
    if (__nwlog_fault(v17, uu, &v559))
    {
      if (uu[0] == 17)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v515 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_182FBE000, v18, v515, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (!(_BYTE)v559)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v534 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_182FBE000, v18, v534, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_24;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v521 = uu[0];
      v522 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
      if (!backtrace_string)
      {
        if (v522)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_182FBE000, v18, v521, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (v522)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v521, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    goto LABEL_25;
  }
  if (!a10)
  {
    __nwlog_obj();
    v516 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
    v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v559) = 0;
    if (__nwlog_fault(v17, uu, &v559))
    {
      if (uu[0] == 17)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v517 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_182FBE000, v18, v517, "%{public}s called with null buffer", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (!(_BYTE)v559)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v535 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_182FBE000, v18, v535, "%{public}s called with null buffer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_24;
      }
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v523 = uu[0];
      v524 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
      if (!v21)
      {
        if (v524)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_182FBE000, v18, v523, "%{public}s called with null buffer, no backtrace", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (v524)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v21;
        _os_log_impl(&dword_182FBE000, v18, v523, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  if (!a11)
  {
    __nwlog_obj();
    v518 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
    v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v559) = 0;
    if (__nwlog_fault(v17, uu, &v559))
    {
      if (uu[0] == 17)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v519 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_182FBE000, v18, v519, "%{public}s called with null buffer_length", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (!(_BYTE)v559)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v536 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_182FBE000, v18, v536, "%{public}s called with null buffer_length, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_24;
      }
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v525 = uu[0];
      v526 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
      if (!v21)
      {
        if (v526)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_182FBE000, v18, v525, "%{public}s called with null buffer_length, no backtrace", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (v526)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v21;
        _os_log_impl(&dword_182FBE000, v18, v525, "%{public}s called with null buffer_length, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_16;
    }
LABEL_25:
    if (!v17)
    {
LABEL_27:
      v25 = 0;
      goto LABEL_1184;
    }
LABEL_26:
    free(v17);
    goto LABEL_27;
  }
  if (a11 <= 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a11;
    v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v559) = 0;
    if (!__nwlog_fault(v17, uu, &v559))
      goto LABEL_25;
    if (uu[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      v19 = uu[0];
      if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a11;
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s NECP buffer too short %zu", buf, 0x16u);
      }
LABEL_24:

      goto LABEL_25;
    }
    if (!(_BYTE)v559)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      v24 = uu[0];
      if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a11;
        _os_log_impl(&dword_182FBE000, v18, v24, "%{public}s NECP buffer too short %zu, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_24;
    }
    v21 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    v22 = uu[0];
    v23 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a11;
        _os_log_impl(&dword_182FBE000, v18, v22, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
      }
      goto LABEL_24;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a11;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v21;
      _os_log_impl(&dword_182FBE000, v18, v22, "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s", buf, 0x20u);
    }
LABEL_16:

    free(v21);
    if (!v17)
      goto LABEL_27;
    goto LABEL_26;
  }
  v542 = a7;
  v543 = a8;
  v552 = a2;
  v560 = 0;
  v559 = 0;
  v558 = 0;
  v557 = 0;
  if (a11 == 5)
  {
    v548 = 0;
    v549 = 0;
    v553 = 0;
    v554 = 0;
    v550 = 0;
    v551 = 0;
    v544 = 0;
    v541 = 0;
    v20 = 0;
    goto LABEL_1124;
  }
  v540 = a6;
  v548 = 0;
  v549 = 0;
  v541 = 0;
  v544 = 0;
  v553 = 0;
  v554 = 0;
  v550 = 0;
  v551 = 0;
  v20 = 0;
  while (1)
  {
    v26 = *(unsigned __int8 *)(a10 + v20);
    v27 = *(unsigned int *)(a10 + 1 + v20);
    if ((_DWORD)v27)
    {
      if (v27 <= 0xFFFFFFF9 && a11 >= v27 + 5 && a11 - (v27 + 5) >= v20)
      {
        v36 = (char *)(a10 + 5 + v20);
        goto LABEL_57;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v29 = (id)gLogObj;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v20;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = a11;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v27;
      v30 = (void *)_os_log_send_and_compose_impl();

      uu[0] = 16;
      v561 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v30, uu, &v561))
      {
        if (uu[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          v32 = uu[0];
          if (os_log_type_enabled(v31, (os_log_type_t)uu[0]))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v20;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = a11;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v27;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
          }
        }
        else if (v561)
        {
          v33 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          v34 = uu[0];
          v35 = os_log_type_enabled(v31, (os_log_type_t)uu[0]);
          if (v33)
          {
            if (v35)
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v20;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = a11;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v27;
              *(_WORD *)&buf[38] = 2082;
              *(_QWORD *)&buf[40] = v33;
              _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
            }

            free(v33);
            if (!v30)
              goto LABEL_56;
LABEL_55:
            free(v30);
            goto LABEL_56;
          }
          if (v35)
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v20;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = a11;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v27;
            _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          v37 = uu[0];
          if (os_log_type_enabled(v31, (os_log_type_t)uu[0]))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v20;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = a11;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v27;
            _os_log_impl(&dword_182FBE000, v31, v37, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
          }
        }

      }
      if (v30)
        goto LABEL_55;
    }
LABEL_56:
    v36 = 0;
LABEL_57:
    v20 += v27 + 5;
    if (v20 > a11)
      break;
    if ((_DWORD)v27)
      v38 = v36 == 0;
    else
      v38 = 1;
    if (!v38)
    {
      switch(v26)
      {
        case 1:
          if ((_DWORD)v27 == 16)
            goto LABEL_64;
          if (v27 >= 0x11)
          {
            __nwlog_obj();
            v434 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v434, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl(&dword_182FBE000, v434, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_64:
            v39 = parameters;
            *(_OWORD *)((char *)parameters[13].isa + 24) = *(_OWORD *)v36;

          }
          break;
        case 2:
          if ((_DWORD)v27 == 16)
            goto LABEL_170;
          if (v27 >= 0x11)
          {
            __nwlog_obj();
            v449 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v449, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl(&dword_182FBE000, v449, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_170:
            v89 = parameters;
            *(_OWORD *)((char *)parameters[13].isa + 8) = *(_OWORD *)v36;

          }
          break;
        case 3:
        case 12:
        case 13:
        case 37:
          break;
        case 4:
          if (v36[(v27 - 1)])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v90 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            v561 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v91, uu, &v561))
              goto LABEL_898;
            if (uu[0] == 17)
            {
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v93 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_182FBE000, v92, v93, "%{public}s NECP_CLIENT_PARAMETER_ACCOUNT of length %u not NULL-terminated", buf, 0x12u);
              }
              goto LABEL_897;
            }
            if (v561)
            {
              v189 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v190 = uu[0];
              v191 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
              if (v189)
              {
                if (v191)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v189;
                  _os_log_impl(&dword_182FBE000, v92, v190, "%{public}s NECP_CLIENT_PARAMETER_ACCOUNT of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
                }

                free(v189);
                goto LABEL_898;
              }
              if (v191)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_182FBE000, v92, v190, "%{public}s NECP_CLIENT_PARAMETER_ACCOUNT of length %u not NULL-terminated, no backtrace", buf, 0x12u);
              }
            }
            else
            {
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v210 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_182FBE000, v92, v210, "%{public}s NECP_CLIENT_PARAMETER_ACCOUNT of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
              }
            }
            goto LABEL_897;
          }
          nw_parameters_set_account_id(parameters, v36);
          break;
        case 6:
          if ((_DWORD)v27 == 4)
            goto LABEL_98;
          if (v27 >= 5)
          {
            __nwlog_obj();
            v441 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v441, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 4;
              _os_log_impl(&dword_182FBE000, v441, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_98:
            v53 = *(_DWORD *)v36;
            v54 = parameters;
            *((_DWORD *)parameters[13].isa + 16) = v53;

          }
          break;
        case 7:
          if ((_DWORD)v27 == 4)
            goto LABEL_178;
          if (v27 >= 5)
          {
            __nwlog_obj();
            v450 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v450, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 7;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 4;
              _os_log_impl(&dword_182FBE000, v450, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_178:
            v94 = *(_DWORD *)v36;
            v95 = parameters;
            *((_DWORD *)parameters[13].isa + 17) = v94;

          }
          break;
        case 9:
          if (v27 <= 0x18)
          {
            bzero(&buf[v27], 24 - v27);
            memcpy(buf, v36, v27);
            v40 = nw_interface_create_with_name((char *)buf);
            if (v40)
              nw_parameters_require_interface(parameters, v40);
            goto LABEL_417;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v155 = (id)gLogObj;
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 9;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v27;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 3032;
          v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v561))
            goto LABEL_898;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v156 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 9;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3032;
              _os_log_impl(&dword_182FBE000, v92, v156, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
            }
            goto LABEL_897;
          }
          if (v561)
          {
            v192 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v201 = uu[0];
            v202 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v192)
            {
              if (v202)
              {
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 9;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                *(_WORD *)&buf[24] = 2080;
                *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = 3032;
                *(_WORD *)&buf[40] = 2082;
                *(_QWORD *)&buf[42] = v192;
                _os_log_impl(&dword_182FBE000, v92, v201, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
              }
              goto LABEL_422;
            }
            if (v202)
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 9;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3032;
              _os_log_impl(&dword_182FBE000, v92, v201, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
            }
          }
          else
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v215 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 9;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3032;
              _os_log_impl(&dword_182FBE000, v92, v215, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
            }
          }
          goto LABEL_897;
        case 10:
          if ((_DWORD)v27 == 4)
            goto LABEL_180;
          if (v27 >= 5)
          {
            __nwlog_obj();
            v451 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v451, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 10;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 4;
              _os_log_impl(&dword_182FBE000, v451, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_180:
            v96 = *(_DWORD *)v36;
            v97 = parameters;
            *((_DWORD *)parameters[13].isa + 18) = v96;

          }
          break;
        case 11:
          if ((_DWORD)v27 != 2 && (_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v465 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v465, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 11;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_182FBE000, v465, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          v98 = *v36;
          if (!*v36)
            break;
          v99 = nw_parameters_copy_default_protocol_stack(parameters);
          v100 = nw_protocol_stack_copy_transport_protocol(v99);
          v101 = v100 == 0;

          if (!v101)
            goto LABEL_465;
          if (v98 == 6)
          {
            options = nw_tcp_create_options();
          }
          else
          {
            if (v98 != 17)
              goto LABEL_465;
            options = nw_udp_create_options();
          }
          v222 = options;
          nw_protocol_stack_set_transport_protocol(v99, options);

LABEL_465:
          v541 = v98;
          break;
        case 33:
          v55 = (v27 - 1);
          if (v36[v55])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v56 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            v57 = (char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            v561 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v57, uu, &v561))
            {
              if (uu[0] == 17)
              {
                __nwlog_obj();
                v58 = objc_claimAutoreleasedReturnValue();
                v59 = uu[0];
                if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER of length %u not NULL-terminated", buf, 0x12u);
                }
                goto LABEL_468;
              }
              if (v561 == OS_LOG_TYPE_DEFAULT)
              {
                __nwlog_obj();
                v58 = objc_claimAutoreleasedReturnValue();
                v209 = uu[0];
                if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  _os_log_impl(&dword_182FBE000, v58, v209, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
                }
                goto LABEL_468;
              }
              v187 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v58 = objc_claimAutoreleasedReturnValue();
              type = uu[0];
              v188 = os_log_type_enabled(v58, (os_log_type_t)uu[0]);
              if (!v187)
              {
                if (v188)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  _os_log_impl(&dword_182FBE000, v58, type, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER of length %u not NULL-terminated, no backtrace", buf, 0x12u);
                }
                goto LABEL_468;
              }
              if (v188)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v187;
                _os_log_impl(&dword_182FBE000, v58, type, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v187);
            }
            goto LABEL_469;
          }
          if (!v552)
            goto LABEL_471;
          if (*v552)
          {
            nw_endpoint_set_tracker_owner(*v552, v36);
            goto LABEL_471;
          }
          __nwlog_obj();
          v218 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          v57 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v57, uu, &v561))
            goto LABEL_469;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v58 = objc_claimAutoreleasedReturnValue();
            v219 = uu[0];
            if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v58, v219, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT", buf, 0xCu);
            }
            goto LABEL_468;
          }
          if (v561 == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v58 = objc_claimAutoreleasedReturnValue();
            v316 = uu[0];
            if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v58, v316, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, backtrace limit exceeded", buf, 0xCu);
            }
LABEL_468:

LABEL_469:
            if (!v57)
              goto LABEL_471;
LABEL_470:
            free(v57);
            goto LABEL_471;
          }
          v281 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v58 = objc_claimAutoreleasedReturnValue();
          v538 = uu[0];
          v282 = os_log_type_enabled(v58, (os_log_type_t)uu[0]);
          if (!v281)
          {
            if (v282)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v58, v538, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, no backtrace", buf, 0xCu);
            }
            goto LABEL_468;
          }
          if (v282)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v281;
            _os_log_impl(&dword_182FBE000, v58, v538, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v281);
          if (v57)
            goto LABEL_470;
LABEL_471:
          if (!v36[v55])
          {
            nw_parameters_set_attributed_bundle_identifier(parameters, v36);
            goto LABEL_492;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v223 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          v224 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v224, uu, &v561))
            goto LABEL_490;
          if (uu[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v225 = (id)gLogObj;
            v226 = uu[0];
            if (os_log_type_enabled(v225, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_182FBE000, v225, v226, "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated", buf, 0x12u);
            }
          }
          else if (v561)
          {
            v227 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v225 = objc_claimAutoreleasedReturnValue();
            v228 = uu[0];
            v229 = os_log_type_enabled(v225, (os_log_type_t)uu[0]);
            if (v227)
            {
              if (v229)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v227;
                _os_log_impl(&dword_182FBE000, v225, v228, "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v227);
              if (v224)
                goto LABEL_491;
              goto LABEL_492;
            }
            if (v229)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_182FBE000, v225, v228, "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            __nwlog_obj();
            v225 = objc_claimAutoreleasedReturnValue();
            v230 = uu[0];
            if (os_log_type_enabled(v225, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_182FBE000, v225, v230, "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
            }
          }

LABEL_490:
          if (v224)
LABEL_491:
            free(v224);
LABEL_492:
          if (v553)
          {
            if ((_DWORD)v27 != 16)
            {
              if (v27 < 0x11)
                break;
              __nwlog_obj();
              v433 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v433, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v26;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = 16;
                _os_log_impl(&dword_182FBE000, v433, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
              }

            }
            v231 = v553;
            *(_OWORD *)(v231 + 28) = *(_OWORD *)v36;
            v553 = (nw_endpoint_t)v231;

            v232 = parameters;
            v233 = v232;
            v234 = *((_QWORD *)parameters[13].isa + 22);
            if (v234)
            {
              v161 = *(id *)(v234 + 72);

              if (v161)
                goto LABEL_502;
            }
            else
            {

            }
            v161 = xpc_array_create(0, 0);
            if (v161)
            {
LABEL_502:
              xpc_array_set_uuid(v161, 0xFFFFFFFFFFFFFFFFLL, (const unsigned __int8 *)v36);
              nw_parameters_set_required_netagent_uuids(v233, v161);
              goto LABEL_315;
            }
            __nwlog_obj();
            v235 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            v236 = (char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            v561 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v236, uu, &v561))
              goto LABEL_597;
            if (uu[0] == 17)
            {
              __nwlog_obj();
              v237 = objc_claimAutoreleasedReturnValue();
              v238 = uu[0];
              if (os_log_type_enabled(v237, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_182FBE000, v237, v238, "%{public}s xpc_array_create failed", buf, 0xCu);
              }
              goto LABEL_596;
            }
            if (v561)
            {
              v239 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v237 = objc_claimAutoreleasedReturnValue();
              v240 = uu[0];
              v241 = os_log_type_enabled(v237, (os_log_type_t)uu[0]);
              if (v239)
              {
                if (v241)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v239;
                  _os_log_impl(&dword_182FBE000, v237, v240, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v239);
                goto LABEL_597;
              }
              if (v241)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_182FBE000, v237, v240, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v237 = objc_claimAutoreleasedReturnValue();
              v242 = uu[0];
              if (os_log_type_enabled(v237, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_182FBE000, v237, v242, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
              }
            }
LABEL_596:

LABEL_597:
            if (v236)
              free(v236);
            v161 = 0;
            goto LABEL_315;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v174 = (id)gLogObj;
          if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            _os_log_impl(&dword_182FBE000, v174, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint agent to", buf, 0xCu);
          }
LABEL_499:

          v553 = 0;
          break;
        case 34:
          if (!v36[(v27 - 1)])
          {
            nw_parameters_set_attribution_context(parameters, v36);
            break;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v103 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v561))
            goto LABEL_898;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v104 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_182FBE000, v92, v104, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated", buf, 0x12u);
            }
            goto LABEL_897;
          }
          if (v561)
          {
            v192 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v193 = uu[0];
            v194 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v192)
            {
              if (v194)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v192;
                _os_log_impl(&dword_182FBE000, v92, v193, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
              }
              goto LABEL_422;
            }
            if (v194)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_182FBE000, v92, v193, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v211 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_182FBE000, v92, v211, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
            }
          }
          goto LABEL_897;
        case 35:
          if (v36[(v27 - 1)])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v105 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            v561 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v91, uu, &v561))
              goto LABEL_898;
            if (uu[0] == 17)
            {
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v106 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_182FBE000, v92, v106, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated", buf, 0x12u);
              }
              goto LABEL_897;
            }
            if (v561)
            {
              v192 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v195 = uu[0];
              v196 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
              if (v192)
              {
                if (v196)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v192;
                  _os_log_impl(&dword_182FBE000, v92, v195, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
                }
                goto LABEL_422;
              }
              if (v196)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_182FBE000, v92, v195, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated, no backtrace", buf, 0x12u);
              }
            }
            else
            {
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v212 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_182FBE000, v92, v212, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
              }
            }
            goto LABEL_897;
          }
          if (!v552)
            break;
          if (*v552)
          {
            nw_endpoint_set_known_tracker_name(*v552, v36);
            break;
          }
          __nwlog_obj();
          v220 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v561))
            goto LABEL_898;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v221 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v92, v221, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT", buf, 0xCu);
            }
            goto LABEL_897;
          }
          if (v561 == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v317 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v92, v317, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_897;
          }
          v283 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v92 = objc_claimAutoreleasedReturnValue();
          v284 = uu[0];
          v285 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
          if (!v283)
          {
            if (v285)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v92, v284, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, no backtrace", buf, 0xCu);
            }
            goto LABEL_897;
          }
          if (v285)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v283;
            _os_log_impl(&dword_182FBE000, v92, v284, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v283);
          if (v91)
            goto LABEL_899;
          break;
        case 36:
          v55 = (v27 - 1);
          goto LABEL_471;
        case 42:
          if (!v36[(v27 - 1)])
          {
            nw_parameters_set_url(parameters, v36);
            break;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v107 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v561))
            goto LABEL_898;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v108 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_182FBE000, v92, v108, "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated", buf, 0x12u);
            }
            goto LABEL_897;
          }
          if (v561)
          {
            v192 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v197 = uu[0];
            v198 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v192)
            {
              if (v198)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v192;
                _os_log_impl(&dword_182FBE000, v92, v197, "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
              }
              goto LABEL_422;
            }
            if (v198)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_182FBE000, v92, v197, "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v213 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_182FBE000, v92, v213, "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
            }
          }
          goto LABEL_897;
        case 100:
          if (v27 <= 0x18)
          {
            bzero(&buf[v27], 24 - v27);
            memcpy(buf, v36, v27);
            v60 = nw_interface_create_with_name((char *)buf);
            v61 = v60;
            if (!v60)
              goto LABEL_117;
            v62 = nw_interface_copy_dictionary(v60);
            if (v62)
            {
              v63 = nw_parameters_copy_prohibited_interfaces(parameters);
              if (v63 || (v63 = xpc_array_create(0, 0)) != 0)
              {
                xpc_array_append_value(v63, v62);
                nw_parameters_set_prohibited_interfaces(parameters, v63);
                goto LABEL_115;
              }
              __nwlog_obj();
              v292 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              v293 = (char *)_os_log_send_and_compose_impl();

              v561 = OS_LOG_TYPE_ERROR;
              v556 = 0;
              if (__nwlog_fault(v293, &v561, &v556))
              {
                if (v561 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v294 = objc_claimAutoreleasedReturnValue();
                  v295 = v561;
                  if (os_log_type_enabled(v294, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v294, v295, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_957;
                }
                if (v556)
                {
                  v419 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v294 = objc_claimAutoreleasedReturnValue();
                  v420 = v561;
                  v421 = os_log_type_enabled(v294, v561);
                  if (v419)
                  {
                    if (v421)
                    {
                      *(_DWORD *)uu = 136446466;
                      *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(_QWORD *)&uu[14] = v419;
                      _os_log_impl(&dword_182FBE000, v294, v420, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v419);
                    goto LABEL_958;
                  }
                  if (v421)
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v294, v420, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v294 = objc_claimAutoreleasedReturnValue();
                  v431 = v561;
                  if (os_log_type_enabled(v294, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v294, v431, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_957:

              }
LABEL_958:
              if (v293)
                free(v293);
              v63 = 0;
LABEL_115:

            }
            goto LABEL_117;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v157 = (id)gLogObj;
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 100;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v27;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 3248;
          v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v561))
            goto LABEL_898;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v158 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 100;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3248;
              _os_log_impl(&dword_182FBE000, v92, v158, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
            }
          }
          else if (v561)
          {
            v192 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v203 = uu[0];
            v204 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v192)
            {
              if (v204)
              {
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 100;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                *(_WORD *)&buf[24] = 2080;
                *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = 3248;
                *(_WORD *)&buf[40] = 2082;
                *(_QWORD *)&buf[42] = v192;
                _os_log_impl(&dword_182FBE000, v92, v203, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
              }
LABEL_422:

              free(v192);
              if (v91)
                goto LABEL_899;
              break;
            }
            if (v204)
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 100;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3248;
              _os_log_impl(&dword_182FBE000, v92, v203, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
            }
          }
          else
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v216 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 100;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3248;
              _os_log_impl(&dword_182FBE000, v92, v216, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
            }
          }
LABEL_897:

LABEL_898:
          if (v91)
          {
LABEL_899:
            v82 = (char *)v91;
LABEL_900:
            free(v82);
            break;
          }
          break;
        case 101:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v452 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v452, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 101;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_182FBE000, v452, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          v109 = *v36;
          if ((v109 - 1) > 5)
            v110 = 0;
          else
            v110 = dword_183C6F140[v109 - 1];
          v159 = v109 - 3;
          if (v159 <= 4)
          {
            v160 = dword_183C6F158[v159];
            if ((_DWORD)v160)
            {
              if ((_DWORD)v160 == 1002)
              {
                ++HIDWORD(v549);
                break;
              }
              v40 = nw_parameters_copy_prohibited_interface_subtypes(parameters);
              if (v40 || (v40 = xpc_array_create(0, 0)) != 0)
              {
                xpc_array_set_uint64(v40, 0xFFFFFFFFFFFFFFFFLL, v160);
                nw_parameters_set_prohibited_interface_subtypes(parameters, v40);
                goto LABEL_417;
              }
              __nwlog_obj();
              v312 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              v313 = (char *)_os_log_send_and_compose_impl();

              uu[0] = 16;
              v561 = OS_LOG_TYPE_DEFAULT;
              if (!__nwlog_fault(v313, uu, &v561))
                goto LABEL_964;
              if (uu[0] == 17)
              {
                __nwlog_obj();
                v314 = objc_claimAutoreleasedReturnValue();
                v315 = uu[0];
                if (os_log_type_enabled(v314, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  _os_log_impl(&dword_182FBE000, v314, v315, "%{public}s xpc_array_create failed", buf, 0xCu);
                }
                goto LABEL_963;
              }
              if (v561)
              {
                v422 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v314 = objc_claimAutoreleasedReturnValue();
                v423 = uu[0];
                v424 = os_log_type_enabled(v314, (os_log_type_t)uu[0]);
                if (v422)
                {
                  if (v424)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v422;
                    _os_log_impl(&dword_182FBE000, v314, v423, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v422);
                  goto LABEL_964;
                }
                if (v424)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  _os_log_impl(&dword_182FBE000, v314, v423, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v314 = objc_claimAutoreleasedReturnValue();
                v432 = uu[0];
                if (os_log_type_enabled(v314, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  _os_log_impl(&dword_182FBE000, v314, v432, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
                }
              }
LABEL_963:

LABEL_964:
              if (v313)
                free(v313);
              v40 = 0;
              goto LABEL_417;
            }
          }
          if (!v110)
            break;
          v161 = nw_parameters_copy_prohibited_interface_types(parameters);
          if (v161 || (v161 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uint64(v161, 0xFFFFFFFFFFFFFFFFLL, v110);
            nw_parameters_set_prohibited_interface_types(parameters, v161);
            goto LABEL_315;
          }
          __nwlog_obj();
          v256 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          v257 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v257, uu, &v561))
            goto LABEL_916;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v258 = objc_claimAutoreleasedReturnValue();
            v259 = uu[0];
            if (os_log_type_enabled(v258, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v258, v259, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_915:

            goto LABEL_916;
          }
          if (v561 == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v258 = objc_claimAutoreleasedReturnValue();
            v425 = uu[0];
            if (os_log_type_enabled(v258, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v258, v425, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_915;
          }
          v286 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v258 = objc_claimAutoreleasedReturnValue();
          v287 = uu[0];
          v288 = os_log_type_enabled(v258, (os_log_type_t)uu[0]);
          if (!v286)
          {
            if (v288)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v258, v287, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_915;
          }
          if (v288)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v286;
            _os_log_impl(&dword_182FBE000, v258, v287, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v286);
LABEL_916:
          if (v257)
            free(v257);
          v161 = 0;
LABEL_315:

          break;
        case 102:
          if ((_DWORD)v27 == 16)
            goto LABEL_244;
          if (v27 < 0x11)
            break;
          __nwlog_obj();
          v460 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v460, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 102;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_182FBE000, v460, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_244:
          *(_OWORD *)uu = *(_OWORD *)v36;
          if (uuid_is_null(uu))
            break;
          v40 = nw_parameters_copy_prohibited_netagent_uuids(parameters);
          if (v40 || (v40 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_prohibited_netagent_uuids(parameters, v40);
            goto LABEL_417;
          }
          __nwlog_obj();
          v276 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          v277 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v277, &v561, &v556))
            goto LABEL_946;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v278 = objc_claimAutoreleasedReturnValue();
            v279 = v561;
            if (os_log_type_enabled(v278, v561))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v278, v279, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_945:

            goto LABEL_946;
          }
          if (!v556)
          {
            __nwlog_obj();
            v278 = objc_claimAutoreleasedReturnValue();
            v430 = v561;
            if (os_log_type_enabled(v278, v561))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v278, v430, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_945;
          }
          v305 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v278 = objc_claimAutoreleasedReturnValue();
          v306 = v561;
          v307 = os_log_type_enabled(v278, v561);
          if (!v305)
          {
            if (v307)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v278, v306, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_945;
          }
          if (v307)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v305;
            _os_log_impl(&dword_182FBE000, v278, v306, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v305);
LABEL_946:
          if (v277)
            free(v277);
          v40 = 0;
LABEL_417:

          break;
        case 103:
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 64)
            goto LABEL_119;
          if (v27 < 0x41)
            break;
          __nwlog_obj();
          v442 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v442, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uu = 136446978;
            *(_QWORD *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 103;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v565) = 1024;
            *(_DWORD *)((char *)&v565 + 2) = 64;
            _os_log_impl(&dword_182FBE000, v442, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
          }

LABEL_119:
          v64 = *((_OWORD *)v36 + 1);
          *(_OWORD *)buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v64;
          v65 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&buf[48] = v65;
          v66 = parameters;
          v67 = *((_QWORD *)parameters[13].isa + 22);
          if (v67)
            v68 = *(id *)(v67 + 32);
          else
            v68 = 0;

          v175 = v66;
          v176 = *((_QWORD *)parameters[13].isa + 22);
          if (v176)
            v71 = *(id *)(v176 + 40);
          else
            v71 = 0;

          if (v68)
            goto LABEL_768;
          v68 = xpc_array_create(0, 0);
          if (v68)
            goto LABEL_768;
          __nwlog_obj();
          v179 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uu = 136446210;
          *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
          v180 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v180, &v561, &v556))
            goto LABEL_765;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v181 = objc_claimAutoreleasedReturnValue();
            v182 = v561;
            if (os_log_type_enabled(v181, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v181, v182, "%{public}s xpc_array_create failed", uu, 0xCu);
            }
LABEL_764:

            goto LABEL_765;
          }
          if (!v556)
          {
            __nwlog_obj();
            v181 = objc_claimAutoreleasedReturnValue();
            v310 = v561;
            if (os_log_type_enabled(v181, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v181, v310, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
            }
            goto LABEL_764;
          }
          v249 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v181 = objc_claimAutoreleasedReturnValue();
          v250 = v561;
          v251 = os_log_type_enabled(v181, v561);
          if (!v249)
          {
            if (v251)
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v181, v250, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }
            goto LABEL_764;
          }
          if (v251)
          {
            *(_DWORD *)uu = 136446466;
            *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(_QWORD *)&uu[14] = v249;
            _os_log_impl(&dword_182FBE000, v181, v250, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(v249);
LABEL_765:
          if (v180)
            free(v180);
          v68 = 0;
LABEL_768:
          if (!v71)
          {
            v71 = xpc_array_create(0, 0);
            if (!v71)
            {
              __nwlog_obj();
              v381 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              v382 = (char *)_os_log_send_and_compose_impl();

              v561 = OS_LOG_TYPE_ERROR;
              v556 = 0;
              if (__nwlog_fault(v382, &v561, &v556))
              {
                if (v561 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v383 = objc_claimAutoreleasedReturnValue();
                  v384 = v561;
                  if (os_log_type_enabled(v383, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v383, v384, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_864;
                }
                if (v556)
                {
                  v388 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v383 = objc_claimAutoreleasedReturnValue();
                  v389 = v561;
                  v390 = os_log_type_enabled(v383, v561);
                  if (v388)
                  {
                    if (v390)
                    {
                      *(_DWORD *)uu = 136446466;
                      *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(_QWORD *)&uu[14] = v388;
                      _os_log_impl(&dword_182FBE000, v383, v389, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v388);
                    goto LABEL_865;
                  }
                  if (v390)
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v383, v389, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v383 = objc_claimAutoreleasedReturnValue();
                  v393 = v561;
                  if (os_log_type_enabled(v383, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v383, v393, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_864:

              }
LABEL_865:
              if (v382)
                free(v382);
              v71 = 0;
              goto LABEL_875;
            }
          }
          if (!v68)
            goto LABEL_875;
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(v71, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_prohibited_netagent_classes(v175, v68, v71);
            goto LABEL_875;
          }
          __nwlog_obj();
          v369 = (void *)objc_claimAutoreleasedReturnValue();
          v370 = strnlen((const char *)buf, 0x20uLL);
          v371 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)uu = 136446722;
          *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(_QWORD *)&uu[14] = v370;
          *(_WORD *)&uu[22] = 2048;
          v565 = v371;
          v321 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v321, &v561, &v556))
            goto LABEL_800;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v372 = objc_claimAutoreleasedReturnValue();
            v373 = v561;
            if (os_log_type_enabled(v372, v561))
            {
              v374 = strnlen((const char *)buf, 0x20uLL);
              v375 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v374;
              *(_WORD *)&uu[22] = 2048;
              v565 = v375;
              _os_log_impl(&dword_182FBE000, v372, v373, "%{public}s invalid prohibited netagent string lengths %zu %zu", uu, 0x20u);
            }
LABEL_799:

            goto LABEL_800;
          }
          if (!v556)
          {
            __nwlog_obj();
            v372 = objc_claimAutoreleasedReturnValue();
            v385 = v561;
            if (os_log_type_enabled(v372, v561))
            {
              v386 = strnlen((const char *)buf, 0x20uLL);
              v387 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v386;
              *(_WORD *)&uu[22] = 2048;
              v565 = v387;
              _os_log_impl(&dword_182FBE000, v372, v385, "%{public}s invalid prohibited netagent string lengths %zu %zu, backtrace limit exceeded", uu, 0x20u);
            }
            goto LABEL_799;
          }
          v376 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v372 = objc_claimAutoreleasedReturnValue();
          v377 = v561;
          v378 = os_log_type_enabled(v372, v561);
          if (!v376)
          {
            if (v378)
            {
              v391 = strnlen((const char *)buf, 0x20uLL);
              v392 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v391;
              *(_WORD *)&uu[22] = 2048;
              v565 = v392;
              _os_log_impl(&dword_182FBE000, v372, v377, "%{public}s invalid prohibited netagent string lengths %zu %zu, no backtrace", uu, 0x20u);
            }
            goto LABEL_799;
          }
          if (v378)
          {
            v379 = strnlen((const char *)buf, 0x20uLL);
            v380 = strnlen((const char *)&buf[32], 0x20uLL);
            *(_DWORD *)uu = 136446978;
            *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2048;
            *(_QWORD *)&uu[14] = v379;
            *(_WORD *)&uu[22] = 2048;
            v565 = v380;
            v566 = 2082;
            v567 = v376;
            _os_log_impl(&dword_182FBE000, v372, v377, "%{public}s invalid prohibited netagent string lengths %zu %zu, dumping backtrace:%{public}s", uu, 0x2Au);
          }

          free(v376);
LABEL_800:
          if (v321)
LABEL_844:
            free(v321);
LABEL_875:

          break;
        case 111:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v453 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v453, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 111;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_182FBE000, v453, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          v111 = *v36 - 1;
          if (v111 > 5)
            v112 = 0;
          else
            v112 = dword_183C6F140[v111];
          v162 = parameters;
          v163 = v162;
          isa = parameters[13].isa;
          v165 = 92;
          if ((*((_WORD *)isa + 50) & 0x100) == 0)
            v165 = 76;
          *(_DWORD *)((char *)isa + v165) = v112;

          v166 = *v36 - 3;
          if (v166 > 4)
            v167 = 0;
          else
            v167 = dword_183C6F158[v166];
          v171 = v163;
          v172 = parameters[13].isa;
          v173 = 96;
          if ((*((_WORD *)v172 + 50) & 0x100) == 0)
            v173 = 80;
          *(_DWORD *)((char *)v172 + v173) = v167;

          break;
        case 112:
          if ((_DWORD)v27 == 16)
            goto LABEL_122;
          if (v27 < 0x11)
            break;
          __nwlog_obj();
          v443 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v443, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 112;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_182FBE000, v443, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_122:
          *(_OWORD *)uu = *(_OWORD *)v36;
          if (uuid_is_null(uu))
            break;
          v40 = nw_parameters_copy_required_netagent_uuids(parameters);
          if (v40 || (v40 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_required_netagent_uuids(parameters, v40);
            goto LABEL_417;
          }
          __nwlog_obj();
          v268 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          v269 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v269, &v561, &v556))
            goto LABEL_934;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v270 = objc_claimAutoreleasedReturnValue();
            v271 = v561;
            if (os_log_type_enabled(v270, v561))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v270, v271, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_933:

            goto LABEL_934;
          }
          if (!v556)
          {
            __nwlog_obj();
            v270 = objc_claimAutoreleasedReturnValue();
            v428 = v561;
            if (os_log_type_enabled(v270, v561))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v270, v428, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_933;
          }
          v299 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v270 = objc_claimAutoreleasedReturnValue();
          v300 = v561;
          v301 = os_log_type_enabled(v270, v561);
          if (!v299)
          {
            if (v301)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v270, v300, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_933;
          }
          if (v301)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v299;
            _os_log_impl(&dword_182FBE000, v270, v300, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v299);
LABEL_934:
          if (v269)
            free(v269);
          v40 = 0;
          goto LABEL_417;
        case 113:
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 64)
            goto LABEL_214;
          if (v27 < 0x41)
            break;
          __nwlog_obj();
          v454 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v454, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uu = 136446978;
            *(_QWORD *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 113;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v565) = 1024;
            *(_DWORD *)((char *)&v565 + 2) = 64;
            _os_log_impl(&dword_182FBE000, v454, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
          }

LABEL_214:
          v113 = *((_OWORD *)v36 + 1);
          *(_OWORD *)buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v113;
          v114 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&buf[48] = v114;
          v115 = parameters;
          v116 = *((_QWORD *)parameters[13].isa + 22);
          if (v116)
            v68 = *(id *)(v116 + 56);
          else
            v68 = 0;

          v177 = v115;
          v178 = *((_QWORD *)parameters[13].isa + 22);
          if (v178)
            v71 = *(id *)(v178 + 64);
          else
            v71 = 0;

          if (v68)
            goto LABEL_811;
          v68 = xpc_array_create(0, 0);
          if (v68)
            goto LABEL_811;
          __nwlog_obj();
          v183 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uu = 136446210;
          *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
          v184 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v184, &v561, &v556))
            goto LABEL_808;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v185 = objc_claimAutoreleasedReturnValue();
            v186 = v561;
            if (os_log_type_enabled(v185, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v185, v186, "%{public}s xpc_array_create failed", uu, 0xCu);
            }
LABEL_807:

            goto LABEL_808;
          }
          if (!v556)
          {
            __nwlog_obj();
            v185 = objc_claimAutoreleasedReturnValue();
            v311 = v561;
            if (os_log_type_enabled(v185, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v185, v311, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
            }
            goto LABEL_807;
          }
          v252 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v185 = objc_claimAutoreleasedReturnValue();
          v253 = v561;
          v254 = os_log_type_enabled(v185, v561);
          if (!v252)
          {
            if (v254)
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v185, v253, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }
            goto LABEL_807;
          }
          if (v254)
          {
            *(_DWORD *)uu = 136446466;
            *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(_QWORD *)&uu[14] = v252;
            _os_log_impl(&dword_182FBE000, v185, v253, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(v252);
LABEL_808:
          if (v184)
            free(v184);
          v68 = 0;
LABEL_811:
          if (!v71)
          {
            v71 = xpc_array_create(0, 0);
            if (!v71)
            {
              __nwlog_obj();
              v406 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              v407 = (char *)_os_log_send_and_compose_impl();

              v561 = OS_LOG_TYPE_ERROR;
              v556 = 0;
              if (__nwlog_fault(v407, &v561, &v556))
              {
                if (v561 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v408 = objc_claimAutoreleasedReturnValue();
                  v409 = v561;
                  if (os_log_type_enabled(v408, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v408, v409, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_871;
                }
                if (v556)
                {
                  v413 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v408 = objc_claimAutoreleasedReturnValue();
                  v414 = v561;
                  v415 = os_log_type_enabled(v408, v561);
                  if (v413)
                  {
                    if (v415)
                    {
                      *(_DWORD *)uu = 136446466;
                      *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(_QWORD *)&uu[14] = v413;
                      _os_log_impl(&dword_182FBE000, v408, v414, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v413);
                    goto LABEL_872;
                  }
                  if (v415)
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v408, v414, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v408 = objc_claimAutoreleasedReturnValue();
                  v418 = v561;
                  if (os_log_type_enabled(v408, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v408, v418, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_871:

              }
LABEL_872:
              if (v407)
                free(v407);
              v71 = 0;
              goto LABEL_875;
            }
          }
          if (!v68)
            goto LABEL_875;
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(v71, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_required_netagent_classes(v177, v68, v71);
            goto LABEL_875;
          }
          __nwlog_obj();
          v394 = (void *)objc_claimAutoreleasedReturnValue();
          v395 = strnlen((const char *)buf, 0x20uLL);
          v396 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)uu = 136446722;
          *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(_QWORD *)&uu[14] = v395;
          *(_WORD *)&uu[22] = 2048;
          v565 = v396;
          v321 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v321, &v561, &v556))
            goto LABEL_843;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v397 = objc_claimAutoreleasedReturnValue();
            v398 = v561;
            if (os_log_type_enabled(v397, v561))
            {
              v399 = strnlen((const char *)buf, 0x20uLL);
              v400 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v399;
              *(_WORD *)&uu[22] = 2048;
              v565 = v400;
              _os_log_impl(&dword_182FBE000, v397, v398, "%{public}s invalid required netagent string lengths %zu %zu", uu, 0x20u);
            }
LABEL_842:

            goto LABEL_843;
          }
          if (!v556)
          {
            __nwlog_obj();
            v397 = objc_claimAutoreleasedReturnValue();
            v410 = v561;
            if (os_log_type_enabled(v397, v561))
            {
              v411 = strnlen((const char *)buf, 0x20uLL);
              v412 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v411;
              *(_WORD *)&uu[22] = 2048;
              v565 = v412;
              _os_log_impl(&dword_182FBE000, v397, v410, "%{public}s invalid required netagent string lengths %zu %zu, backtrace limit exceeded", uu, 0x20u);
            }
            goto LABEL_842;
          }
          v401 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v397 = objc_claimAutoreleasedReturnValue();
          v402 = v561;
          v403 = os_log_type_enabled(v397, v561);
          if (!v401)
          {
            if (v403)
            {
              v416 = strnlen((const char *)buf, 0x20uLL);
              v417 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v416;
              *(_WORD *)&uu[22] = 2048;
              v565 = v417;
              _os_log_impl(&dword_182FBE000, v397, v402, "%{public}s invalid required netagent string lengths %zu %zu, no backtrace", uu, 0x20u);
            }
            goto LABEL_842;
          }
          if (v403)
          {
            v404 = strnlen((const char *)buf, 0x20uLL);
            v405 = strnlen((const char *)&buf[32], 0x20uLL);
            *(_DWORD *)uu = 136446978;
            *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2048;
            *(_QWORD *)&uu[14] = v404;
            *(_WORD *)&uu[22] = 2048;
            v565 = v405;
            v566 = 2082;
            v567 = v401;
            _os_log_impl(&dword_182FBE000, v397, v402, "%{public}s invalid required netagent string lengths %zu %zu, dumping backtrace:%{public}s", uu, 0x2Au);
          }

          free(v401);
LABEL_843:
          if (!v321)
            goto LABEL_875;
          goto LABEL_844;
        case 122:
          if ((_DWORD)v27 == 16)
            goto LABEL_127;
          if (v27 < 0x11)
            break;
          __nwlog_obj();
          v444 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v444, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 122;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_182FBE000, v444, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_127:
          *(_OWORD *)uu = *(_OWORD *)v36;
          if (uuid_is_null(uu))
            break;
          v40 = nw_parameters_copy_preferred_netagent_uuids(parameters);
          if (v40 || (v40 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_preferred_netagent_uuids(parameters, v40);
            goto LABEL_417;
          }
          __nwlog_obj();
          v272 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          v273 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v273, &v561, &v556))
            goto LABEL_940;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v274 = objc_claimAutoreleasedReturnValue();
            v275 = v561;
            if (os_log_type_enabled(v274, v561))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v274, v275, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_939:

            goto LABEL_940;
          }
          if (!v556)
          {
            __nwlog_obj();
            v274 = objc_claimAutoreleasedReturnValue();
            v429 = v561;
            if (os_log_type_enabled(v274, v561))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v274, v429, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_939;
          }
          v302 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v274 = objc_claimAutoreleasedReturnValue();
          v303 = v561;
          v304 = os_log_type_enabled(v274, v561);
          if (!v302)
          {
            if (v304)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v274, v303, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_939;
          }
          if (v304)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v302;
            _os_log_impl(&dword_182FBE000, v274, v303, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v302);
LABEL_940:
          if (v273)
            free(v273);
          v40 = 0;
          goto LABEL_417;
        case 123:
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 64)
            goto LABEL_132;
          if (v27 < 0x41)
            break;
          __nwlog_obj();
          v445 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v445, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uu = 136446978;
            *(_QWORD *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 123;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v565) = 1024;
            *(_DWORD *)((char *)&v565 + 2) = 64;
            _os_log_impl(&dword_182FBE000, v445, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
          }

LABEL_132:
          v69 = *((_OWORD *)v36 + 1);
          *(_OWORD *)buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v69;
          v70 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&buf[48] = v70;
          v68 = nw_parameters_copy_preferred_netagent_domains(parameters);
          v71 = nw_parameters_copy_preferred_netagent_types(parameters);
          if (v68)
            goto LABEL_682;
          v68 = xpc_array_create(0, 0);
          if (v68)
            goto LABEL_682;
          __nwlog_obj();
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uu = 136446210;
          *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
          v73 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v73, &v561, &v556))
            goto LABEL_679;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v74 = objc_claimAutoreleasedReturnValue();
            v75 = v561;
            if (os_log_type_enabled(v74, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s xpc_array_create failed", uu, 0xCu);
            }
LABEL_678:

            goto LABEL_679;
          }
          if (!v556)
          {
            __nwlog_obj();
            v74 = objc_claimAutoreleasedReturnValue();
            v308 = v561;
            if (os_log_type_enabled(v74, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v74, v308, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
            }
            goto LABEL_678;
          }
          v243 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v74 = objc_claimAutoreleasedReturnValue();
          v244 = v561;
          v245 = os_log_type_enabled(v74, v561);
          if (!v243)
          {
            if (v245)
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v74, v244, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }
            goto LABEL_678;
          }
          if (v245)
          {
            *(_DWORD *)uu = 136446466;
            *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(_QWORD *)&uu[14] = v243;
            _os_log_impl(&dword_182FBE000, v74, v244, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(v243);
LABEL_679:
          if (v73)
            free(v73);
          v68 = 0;
LABEL_682:
          if (!v71)
          {
            v71 = xpc_array_create(0, 0);
            if (!v71)
            {
              __nwlog_obj();
              v331 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              v332 = (char *)_os_log_send_and_compose_impl();

              v561 = OS_LOG_TYPE_ERROR;
              v556 = 0;
              if (__nwlog_fault(v332, &v561, &v556))
              {
                if (v561 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v333 = objc_claimAutoreleasedReturnValue();
                  v334 = v561;
                  if (os_log_type_enabled(v333, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v333, v334, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_850;
                }
                if (v556)
                {
                  v338 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v333 = objc_claimAutoreleasedReturnValue();
                  v339 = v561;
                  v340 = os_log_type_enabled(v333, v561);
                  if (v338)
                  {
                    if (v340)
                    {
                      *(_DWORD *)uu = 136446466;
                      *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(_QWORD *)&uu[14] = v338;
                      _os_log_impl(&dword_182FBE000, v333, v339, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v338);
                    goto LABEL_851;
                  }
                  if (v340)
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v333, v339, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v333 = objc_claimAutoreleasedReturnValue();
                  v343 = v561;
                  if (os_log_type_enabled(v333, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v333, v343, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_850:

              }
LABEL_851:
              if (v332)
                free(v332);
              v71 = 0;
              goto LABEL_875;
            }
          }
          if (!v68)
            goto LABEL_875;
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(v71, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_preferred_netagent_classes(parameters, v68, v71);
            goto LABEL_875;
          }
          __nwlog_obj();
          v318 = (void *)objc_claimAutoreleasedReturnValue();
          v319 = strnlen((const char *)buf, 0x20uLL);
          v320 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)uu = 136446722;
          *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(_QWORD *)&uu[14] = v319;
          *(_WORD *)&uu[22] = 2048;
          v565 = v320;
          v321 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v321, &v561, &v556))
            goto LABEL_714;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v322 = objc_claimAutoreleasedReturnValue();
            v323 = v561;
            if (os_log_type_enabled(v322, v561))
            {
              v324 = strnlen((const char *)buf, 0x20uLL);
              v325 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v324;
              *(_WORD *)&uu[22] = 2048;
              v565 = v325;
              _os_log_impl(&dword_182FBE000, v322, v323, "%{public}s invalid preferred netagent string lengths %zu %zu", uu, 0x20u);
            }
LABEL_713:

            goto LABEL_714;
          }
          if (!v556)
          {
            __nwlog_obj();
            v322 = objc_claimAutoreleasedReturnValue();
            v335 = v561;
            if (os_log_type_enabled(v322, v561))
            {
              v336 = strnlen((const char *)buf, 0x20uLL);
              v337 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v336;
              *(_WORD *)&uu[22] = 2048;
              v565 = v337;
              _os_log_impl(&dword_182FBE000, v322, v335, "%{public}s invalid preferred netagent string lengths %zu %zu, backtrace limit exceeded", uu, 0x20u);
            }
            goto LABEL_713;
          }
          v326 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v322 = objc_claimAutoreleasedReturnValue();
          v327 = v561;
          v328 = os_log_type_enabled(v322, v561);
          if (!v326)
          {
            if (v328)
            {
              v341 = strnlen((const char *)buf, 0x20uLL);
              v342 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v341;
              *(_WORD *)&uu[22] = 2048;
              v565 = v342;
              _os_log_impl(&dword_182FBE000, v322, v327, "%{public}s invalid preferred netagent string lengths %zu %zu, no backtrace", uu, 0x20u);
            }
            goto LABEL_713;
          }
          if (v328)
          {
            v329 = strnlen((const char *)buf, 0x20uLL);
            v330 = strnlen((const char *)&buf[32], 0x20uLL);
            *(_DWORD *)uu = 136446978;
            *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2048;
            *(_QWORD *)&uu[14] = v329;
            *(_WORD *)&uu[22] = 2048;
            v565 = v330;
            v566 = 2082;
            v567 = v326;
            _os_log_impl(&dword_182FBE000, v322, v327, "%{public}s invalid preferred netagent string lengths %zu %zu, dumping backtrace:%{public}s", uu, 0x2Au);
          }

          free(v326);
LABEL_714:
          if (!v321)
            goto LABEL_875;
          goto LABEL_844;
        case 124:
          if ((_DWORD)v27 == 16)
            goto LABEL_66;
          if (v27 < 0x11)
            break;
          __nwlog_obj();
          v435 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v435, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 124;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_182FBE000, v435, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_66:
          *(_OWORD *)uu = *(_OWORD *)v36;
          if (uuid_is_null(uu))
            break;
          v40 = nw_parameters_copy_avoided_netagent_uuids(parameters);
          if (v40 || (v40 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_avoided_netagent_uuids(parameters, v40);
            goto LABEL_417;
          }
          __nwlog_obj();
          v264 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          v265 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v265, &v561, &v556))
            goto LABEL_928;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v266 = objc_claimAutoreleasedReturnValue();
            v267 = v561;
            if (os_log_type_enabled(v266, v561))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v266, v267, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_927:

            goto LABEL_928;
          }
          if (!v556)
          {
            __nwlog_obj();
            v266 = objc_claimAutoreleasedReturnValue();
            v427 = v561;
            if (os_log_type_enabled(v266, v561))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v266, v427, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_927;
          }
          v296 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v266 = objc_claimAutoreleasedReturnValue();
          v297 = v561;
          v298 = os_log_type_enabled(v266, v561);
          if (!v296)
          {
            if (v298)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v266, v297, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_927;
          }
          if (v298)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v296;
            _os_log_impl(&dword_182FBE000, v266, v297, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v296);
LABEL_928:
          if (v265)
            free(v265);
          v40 = 0;
          goto LABEL_417;
        case 125:
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 64)
            goto LABEL_140;
          if (v27 < 0x41)
            break;
          __nwlog_obj();
          v446 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v446, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uu = 136446978;
            *(_QWORD *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 125;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v565) = 1024;
            *(_DWORD *)((char *)&v565 + 2) = 64;
            _os_log_impl(&dword_182FBE000, v446, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
          }

LABEL_140:
          v76 = *((_OWORD *)v36 + 1);
          *(_OWORD *)buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v76;
          v77 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&buf[48] = v77;
          v68 = nw_parameters_copy_avoided_netagent_domains(parameters);
          v71 = nw_parameters_copy_avoided_netagent_types(parameters);
          if (v68)
            goto LABEL_725;
          v68 = xpc_array_create(0, 0);
          if (v68)
            goto LABEL_725;
          __nwlog_obj();
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uu = 136446210;
          *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
          v79 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v79, &v561, &v556))
            goto LABEL_722;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v80 = objc_claimAutoreleasedReturnValue();
            v81 = v561;
            if (os_log_type_enabled(v80, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s xpc_array_create failed", uu, 0xCu);
            }
LABEL_721:

            goto LABEL_722;
          }
          if (!v556)
          {
            __nwlog_obj();
            v80 = objc_claimAutoreleasedReturnValue();
            v309 = v561;
            if (os_log_type_enabled(v80, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v80, v309, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
            }
            goto LABEL_721;
          }
          v246 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          v247 = v561;
          v248 = os_log_type_enabled(v80, v561);
          if (!v246)
          {
            if (v248)
            {
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v80, v247, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }
            goto LABEL_721;
          }
          if (v248)
          {
            *(_DWORD *)uu = 136446466;
            *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(_QWORD *)&uu[14] = v246;
            _os_log_impl(&dword_182FBE000, v80, v247, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(v246);
LABEL_722:
          if (v79)
            free(v79);
          v68 = 0;
LABEL_725:
          if (!v71)
          {
            v71 = xpc_array_create(0, 0);
            if (!v71)
            {
              __nwlog_obj();
              v356 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)uu = 136446210;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              v357 = (char *)_os_log_send_and_compose_impl();

              v561 = OS_LOG_TYPE_ERROR;
              v556 = 0;
              if (__nwlog_fault(v357, &v561, &v556))
              {
                if (v561 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v358 = objc_claimAutoreleasedReturnValue();
                  v359 = v561;
                  if (os_log_type_enabled(v358, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v358, v359, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_857;
                }
                if (v556)
                {
                  v363 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v358 = objc_claimAutoreleasedReturnValue();
                  v364 = v561;
                  v365 = os_log_type_enabled(v358, v561);
                  if (v363)
                  {
                    if (v365)
                    {
                      *(_DWORD *)uu = 136446466;
                      *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(_QWORD *)&uu[14] = v363;
                      _os_log_impl(&dword_182FBE000, v358, v364, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v363);
                    goto LABEL_858;
                  }
                  if (v365)
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v358, v364, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v358 = objc_claimAutoreleasedReturnValue();
                  v368 = v561;
                  if (os_log_type_enabled(v358, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_182FBE000, v358, v368, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_857:

              }
LABEL_858:
              if (v357)
                free(v357);
              v71 = 0;
              goto LABEL_875;
            }
          }
          if (!v68)
            goto LABEL_875;
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(v71, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_avoided_netagent_classes(parameters, v68, v71);
            goto LABEL_875;
          }
          __nwlog_obj();
          v344 = (void *)objc_claimAutoreleasedReturnValue();
          v345 = strnlen((const char *)buf, 0x20uLL);
          v346 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)uu = 136446722;
          *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(_QWORD *)&uu[14] = v345;
          *(_WORD *)&uu[22] = 2048;
          v565 = v346;
          v321 = (char *)_os_log_send_and_compose_impl();

          v561 = OS_LOG_TYPE_ERROR;
          v556 = 0;
          if (!__nwlog_fault(v321, &v561, &v556))
            goto LABEL_757;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v347 = objc_claimAutoreleasedReturnValue();
            v348 = v561;
            if (os_log_type_enabled(v347, v561))
            {
              v349 = strnlen((const char *)buf, 0x20uLL);
              v350 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v349;
              *(_WORD *)&uu[22] = 2048;
              v565 = v350;
              _os_log_impl(&dword_182FBE000, v347, v348, "%{public}s invalid avoided netagent string lengths %zu %zu", uu, 0x20u);
            }
LABEL_756:

            goto LABEL_757;
          }
          if (!v556)
          {
            __nwlog_obj();
            v347 = objc_claimAutoreleasedReturnValue();
            v360 = v561;
            if (os_log_type_enabled(v347, v561))
            {
              v361 = strnlen((const char *)buf, 0x20uLL);
              v362 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v361;
              *(_WORD *)&uu[22] = 2048;
              v565 = v362;
              _os_log_impl(&dword_182FBE000, v347, v360, "%{public}s invalid avoided netagent string lengths %zu %zu, backtrace limit exceeded", uu, 0x20u);
            }
            goto LABEL_756;
          }
          v351 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v347 = objc_claimAutoreleasedReturnValue();
          v352 = v561;
          v353 = os_log_type_enabled(v347, v561);
          if (!v351)
          {
            if (v353)
            {
              v366 = strnlen((const char *)buf, 0x20uLL);
              v367 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(_QWORD *)&uu[14] = v366;
              *(_WORD *)&uu[22] = 2048;
              v565 = v367;
              _os_log_impl(&dword_182FBE000, v347, v352, "%{public}s invalid avoided netagent string lengths %zu %zu, no backtrace", uu, 0x20u);
            }
            goto LABEL_756;
          }
          if (v353)
          {
            v354 = strnlen((const char *)buf, 0x20uLL);
            v355 = strnlen((const char *)&buf[32], 0x20uLL);
            *(_DWORD *)uu = 136446978;
            *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2048;
            *(_QWORD *)&uu[14] = v354;
            *(_WORD *)&uu[22] = 2048;
            v565 = v355;
            v566 = 2082;
            v567 = v351;
            _os_log_impl(&dword_182FBE000, v347, v352, "%{public}s invalid avoided netagent string lengths %zu %zu, dumping backtrace:%{public}s", uu, 0x2Au);
          }

          free(v351);
LABEL_757:
          if (!v321)
            goto LABEL_875;
          goto LABEL_844;
        case 140:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v455 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v455, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 140;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_182FBE000, v455, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          v117 = *v36;
          v118 = parameters;
          *((_BYTE *)parameters[13].isa + 107) = v117;

          break;
        case 150:
          if ((_DWORD)v27 == 16)
            goto LABEL_219;
          if (v27 >= 0x11)
          {
            __nwlog_obj();
            v456 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v456, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 150;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl(&dword_182FBE000, v456, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_219:
            nw_parameters_add_parent_id(parameters, (const unsigned __int8 *)v36);
          }
          break;
        case 151:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v457 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v457, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 151;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_182FBE000, v457, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          nw_parameters_set_data_mode(parameters, *v36);
          break;
        case 152:
          if ((_DWORD)v27 == 4)
            goto LABEL_71;
          if (v27 < 5)
          {
            v41 = 0;
          }
          else
          {
            __nwlog_obj();
            v436 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v436, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 152;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 4;
              _os_log_impl(&dword_182FBE000, v436, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_71:
            v41 = *(_DWORD *)v36;
            if ((*(_DWORD *)v36 & 1) != 0)
            {
              v42 = parameters;
              parameters[12].isa = (Class)((unint64_t)parameters[12].isa | 1);

            }
            if ((v41 & 2) != 0)
            {
              v43 = parameters;
              *((_WORD *)parameters[13].isa + 54) |= 8u;

            }
            if ((v41 & 4) != 0)
            {
              v44 = parameters;
              *((_WORD *)parameters[13].isa + 54) |= 0x10u;

            }
            if ((v41 & 0x10) != 0)
            {
              v45 = parameters;
              parameters[12].isa = (Class)((unint64_t)parameters[12].isa | 0x800000000);

            }
          }
          HIDWORD(v549) += v41 << 28 >> 31;
          LODWORD(v548) = v548 | ((v41 & 0x40) >> 6);
          if ((v41 & 0x20) != 0)
          {
            v46 = parameters;
            parameters[12].isa = (Class)((unint64_t)parameters[12].isa | 0x1000000000);

          }
          break;
        case 154:
          if ((_DWORD)v27 == 6)
            goto LABEL_148;
          if (v27 >= 7)
          {
            __nwlog_obj();
            v447 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v447, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 154;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 6;
              _os_log_impl(&dword_182FBE000, v447, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_148:
            v559 = *(_DWORD *)v36;
            v560 = *((_WORD *)v36 + 2);
          }
          BYTE4(v544) = 1;
          break;
        case 155:
          if ((_DWORD)v27 == 6)
            goto LABEL_223;
          if (v27 >= 7)
          {
            __nwlog_obj();
            v458 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v458, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 155;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 6;
              _os_log_impl(&dword_182FBE000, v458, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_223:
            v557 = *(_DWORD *)v36;
            v558 = *((_WORD *)v36 + 2);
          }
          LOBYTE(v544) = 1;
          break;
        case 156:
          goto LABEL_492;
        case 157:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v461 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v461, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 157;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_182FBE000, v461, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          v127 = *v36 - 1;
          if (v127 > 5)
            v128 = 0;
          else
            v128 = dword_183C6F140[v127];
          v170 = parameters;
          *((_DWORD *)parameters[13].isa + 23) = v128;

          break;
        case 158:
          if (!v553)
          {
            __nwlog_obj();
            v174 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v174, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint device id to", buf, 0xCu);
            }
            goto LABEL_499;
          }
          *(_QWORD *)buf = 0;
          asprintf((char **)buf, "%.*s", v27, v36);
          nw_endpoint_set_device_id(v553, *(const char **)buf);
          v82 = *(char **)buf;
          if (*(_QWORD *)buf)
            goto LABEL_900;
          break;
        case 159:
          if (v553)
          {
            objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v36, v27);
            v119 = (void *)objc_claimAutoreleasedReturnValue();
            nw_endpoint_append_public_key(v553, v119);

            break;
          }
          __nwlog_obj();
          v174 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            _os_log_impl(&dword_182FBE000, v174, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply public key to", buf, 0xCu);
          }
          goto LABEL_499;
        case 160:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v448 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v448, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 160;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_182FBE000, v448, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          v83 = *v36 - 3;
          if (v83 > 4 || *v36 == 5)
            break;
          v84 = dword_183C6F158[v83];
          v85 = parameters;
          v86 = v85;
          v87 = *((_QWORD *)parameters[13].isa + 22);
          if (v87)
          {
            v61 = *(id *)(v87 + 16);

            if (v61)
              goto LABEL_441;
          }
          else
          {

          }
          v61 = xpc_array_create(0, 0);
          if (v61)
          {
LABEL_441:
            xpc_array_set_uint64(v61, 0xFFFFFFFFFFFFFFFFLL, v84);
            nw_parameters_set_preferred_interface_subtypes(v86, v61);
            goto LABEL_117;
          }
          __nwlog_obj();
          v260 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          v261 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v261, uu, &v561))
            goto LABEL_922;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v262 = objc_claimAutoreleasedReturnValue();
            v263 = uu[0];
            if (os_log_type_enabled(v262, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v262, v263, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_921:

            goto LABEL_922;
          }
          if (v561 == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v262 = objc_claimAutoreleasedReturnValue();
            v426 = uu[0];
            if (os_log_type_enabled(v262, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v262, v426, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_921;
          }
          v289 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v262 = objc_claimAutoreleasedReturnValue();
          v290 = uu[0];
          v291 = os_log_type_enabled(v262, (os_log_type_t)uu[0]);
          if (!v289)
          {
            if (v291)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_182FBE000, v262, v290, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_921;
          }
          if (v291)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v289;
            _os_log_impl(&dword_182FBE000, v262, v290, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v289);
LABEL_922:
          if (v261)
            free(v261);
          v61 = 0;
LABEL_117:

          break;
        case 200:
          v47 = nw_path_copy_endpoint_from_tlv(200, v27, v36);

          v48 = v47;
          v553 = v48;
          if (v48)
            nw_parameters_set_local_endpoint(parameters, v48);

          break;
        case 201:
          if (v552 && !*v552)
          {
            v88 = nw_path_copy_endpoint_from_tlv(201, v27, v36);

            v553 = v88;
            if (v553)
              objc_storeStrong(v552, v88);

          }
          break;
        case 202:
          if (!a4 || *a4)
            break;
          v40 = nw_path_copy_browse_descriptor_from_tlv(v27, (unsigned __int8 *)v36, v15);
          if (v40)
            objc_storeStrong(a4, v40);
          goto LABEL_417;
        case 203:
          v550 = v27;
          v551 = v36;
          break;
        case 204:
          if (!a5 || *a5)
            break;
          v40 = nw_path_copy_advertise_descriptor_from_tlv(v27, (uint64_t)v36, v15);
          if (v40)
            objc_storeStrong(a5, v40);
          goto LABEL_417;
        case 205:
          if (!a3 || *a3)
            break;
          v40 = nw_path_copy_group_descriptor_from_tlv(v27, (uint64_t)v36, v15);
          if (v40)
            objc_storeStrong(a3, v40);
          goto LABEL_417;
        case 210:
          if ((_DWORD)v27 == 8)
            goto LABEL_233;
          if (v27 >= 9)
          {
            __nwlog_obj();
            v459 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v459, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 210;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 8;
              _os_log_impl(&dword_182FBE000, v459, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_233:
            v120 = *(_QWORD *)v36;
            v121 = parameters;
            *((_QWORD *)parameters[13].isa + 7) = v120;

          }
          break;
        case 220:
          if (v27 <= 2)
            break;
          __nwlog_obj();
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 220;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = 2;
            _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }
          goto LABEL_417;
        case 221:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v462 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v462, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 221;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_182FBE000, v462, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          if (*v36 == 253)
          {
            v129 = parameters;
            v130 = parameters[19].isa;

            if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
              dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
            v131 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
            nw_protocol_stack_set_transport_protocol(v130, &v131->super);

          }
          break;
        case 222:
          if (v27 < 0x2A)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v168 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            v561 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v91, uu, &v561))
              goto LABEL_898;
            if (uu[0] == 17)
            {
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v169 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_182FBE000, v92, v169, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u", buf, 0x12u);
              }
              goto LABEL_897;
            }
            if (v561)
            {
              v192 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v205 = uu[0];
              v206 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
              if (v192)
              {
                if (v206)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v192;
                  _os_log_impl(&dword_182FBE000, v92, v205, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, dumping backtrace:%{public}s", buf, 0x1Cu);
                }
                goto LABEL_422;
              }
              if (v206)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_182FBE000, v92, v205, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, no backtrace", buf, 0x12u);
              }
            }
            else
            {
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v217 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_182FBE000, v92, v217, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, backtrace limit exceeded", buf, 0x12u);
              }
            }
          }
          else
          {
            v122 = *((unsigned __int16 *)v36 + 20);
            if (v122 + 42 == v27)
            {
              v123 = *((_OWORD *)v36 + 1);
              *(_OWORD *)buf = *(_OWORD *)v36;
              *(_OWORD *)&buf[16] = v123;
              *(_QWORD *)&buf[32] = *((_QWORD *)v36 + 4);
              v124 = nw_protocol_copy_definition_for_identifier(buf);
              v125 = v124;
              if (v124)
              {
                if (*((_WORD *)v36 + 20))
                  deserialized_options = nw_protocol_create_deserialized_options(v124, (uint64_t)(v36 + 42), *((unsigned __int16 *)v36 + 20));
                else
                  deserialized_options = nw_protocol_create_options(v124);
                p_super = &deserialized_options->super;
                if (deserialized_options)
                {
                  v255 = nw_parameters_copy_default_protocol_stack(parameters);
                  nw_protocol_stack_append_application_protocol(v255, p_super);
                }
                else
                {
                  __nwlog_obj();
                  v255 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)uu = 136446466;
                    *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                    *(_WORD *)&uu[12] = 2112;
                    *(_QWORD *)&uu[14] = v125;
                    _os_log_impl(&dword_182FBE000, v255, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to deserialize options for %@", uu, 0x16u);
                  }
                }

              }
              else
              {
                __nwlog_obj();
                p_super = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uu = 136446466;
                  *(_QWORD *)&uu[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&uu[12] = 2080;
                  *(_QWORD *)&uu[14] = buf;
                  _os_log_impl(&dword_182FBE000, p_super, OS_LOG_TYPE_DEFAULT, "%{public}s No protocol definition registered for \"%s\"", uu, 0x16u);
                }
              }

              break;
            }
            __nwlog_obj();
            v199 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v122;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            v561 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v91, uu, &v561))
              goto LABEL_898;
            if (uu[0] == 17)
            {
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v200 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v122;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl(&dword_182FBE000, v92, v200, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u)", buf, 0x18u);
              }
              goto LABEL_897;
            }
            if (v561)
            {
              v192 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v207 = uu[0];
              v208 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
              if (v192)
              {
                if (v208)
                {
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v122;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v27;
                  *(_WORD *)&buf[24] = 2082;
                  *(_QWORD *)&buf[26] = v192;
                  _os_log_impl(&dword_182FBE000, v92, v207, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), dumping backtrace:%{public}s", buf, 0x22u);
                }
                goto LABEL_422;
              }
              if (v208)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v122;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl(&dword_182FBE000, v92, v207, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), no backtrace", buf, 0x18u);
              }
            }
            else
            {
              __nwlog_obj();
              v92 = objc_claimAutoreleasedReturnValue();
              v280 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v122;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl(&dword_182FBE000, v92, v280, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), backtrace limit exceeded", buf, 0x18u);
              }
            }
          }
          goto LABEL_897;
        case 230:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v437 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v437, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 230;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_182FBE000, v437, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          nw_parameters_set_local_address_preference(parameters, (nw_ip_local_address_preference_t)*v36);
          break;
        case 231:
          if ((_DWORD)v27 == 16)
            goto LABEL_92;
          __nwlog_obj();
          v438 = objc_claimAutoreleasedReturnValue();
          v439 = v438;
          if (v27 >= 0x11)
          {
            if (os_log_type_enabled(v438, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl(&dword_182FBE000, v439, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_92:
            v49 = parameters;
            *(_OWORD *)((char *)parameters[13].isa + 40) = *(_OWORD *)v36;

            break;
          }
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 231;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v27;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 3800;
          v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          v561 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v561))
            goto LABEL_898;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v466 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3800;
              _os_log_impl(&dword_182FBE000, v92, v466, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
            }
            goto LABEL_897;
          }
          if (v561)
          {
            v192 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v467 = uu[0];
            v468 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v192)
            {
              if (v468)
              {
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 231;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                *(_WORD *)&buf[24] = 2080;
                *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = 3800;
                *(_WORD *)&buf[40] = 2082;
                *(_QWORD *)&buf[42] = v192;
                _os_log_impl(&dword_182FBE000, v92, v467, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
              }
              goto LABEL_422;
            }
            if (v468)
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3800;
              _os_log_impl(&dword_182FBE000, v92, v467, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
            }
          }
          else
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            v469 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3800;
              _os_log_impl(&dword_182FBE000, v92, v469, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
            }
          }
          goto LABEL_897;
        case 233:
          if ((_DWORD)v27 == 2)
            goto LABEL_292;
          if (v27 >= 3)
          {
            __nwlog_obj();
            v464 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v464, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 233;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 2;
              _os_log_impl(&dword_182FBE000, v464, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_292:
            v153 = *(unsigned __int16 *)v36;
            v154 = parameters;
            *((_DWORD *)parameters[13].isa + 24) = v153;

          }
          break;
        case 250:
          if ((_DWORD)v27 == 4)
            goto LABEL_257;
          if (v27 < 5)
          {
            v132 = 0;
            if (!a9)
              goto LABEL_267;
LABEL_265:
            if ((v132 & 0x800) != 0)
              *a9 = 1;
            goto LABEL_267;
          }
          __nwlog_obj();
          v463 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v463, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 250;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = 4;
            _os_log_impl(&dword_182FBE000, v463, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_257:
          v132 = *(_DWORD *)v36;
          if ((*(_DWORD *)v36 & 1) != 0)
          {
            v133 = parameters;
            *(_DWORD *)((char *)parameters[13].isa + 103) = 2;

          }
          if ((v132 & 0x100) != 0)
          {
            v134 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 0x20u;

          }
          if (v540 && (v132 & 8) != 0)
            *v540 = 1;
          if (a9)
            goto LABEL_265;
LABEL_267:
          if ((v132 & 4) != 0)
          {
            v135 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 1u;

          }
          if ((v132 & 0x1000) != 0)
          {
            v136 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 2u;

          }
          if ((v132 & 0x4000000) != 0)
          {
            v137 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 4u;

          }
          if ((v132 & 0x20000) != 0)
          {
            v138 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 0x10u;

          }
          if ((v132 & 0x10000) != 0)
          {
            v139 = parameters;
            *((_WORD *)parameters[13].isa + 54) |= 0x4000u;

          }
          if ((v132 & 0x40000) != 0)
          {
            v140 = parameters;
            *((_BYTE *)parameters[13].isa + 102) = 2;

          }
          if ((v132 & 0x80000) != 0)
          {
            v141 = parameters;
            *((_WORD *)parameters[13].isa + 54) |= 0x8000u;

          }
          if ((v132 & 0x200000) != 0)
          {
            v142 = parameters;
            v143 = parameters[13].isa;
            v144 = *((_WORD *)v143 + 54);
            v143 = (Class)((char *)v143 + 108);
            *((_BYTE *)v143 + 2) |= 1u;
            *(_WORD *)v143 = v144;

          }
          if ((v132 & 0x800000) != 0)
          {
            v145 = parameters;
            parameters[12].isa = (Class)((unint64_t)parameters[12].isa | 0x100);

          }
          if ((v132 & 0x1000000) != 0)
          {
            v146 = parameters;
            v147 = parameters[13].isa;
            v148 = *((_WORD *)v147 + 54);
            v147 = (Class)((char *)v147 + 108);
            *((_BYTE *)v147 + 2) |= 2u;
            *(_WORD *)v147 = v148;

          }
          if ((v132 & 0x2000000) != 0)
          {
            v149 = parameters;
            v150 = parameters[13].isa;
            v151 = *((_WORD *)v150 + 54);
            v150 = (Class)((char *)v150 + 108);
            *((_BYTE *)v150 + 2) |= 4u;
            *(_WORD *)v150 = v151;

          }
          HIDWORD(v548) |= (unsigned __int16)(v132 & 0x200) >> 9;
          LODWORD(v549) = v549 | ((unsigned __int16)(v132 & 0x400) >> 10);
          if ((v132 & 0x4000) != 0)
          {
            v152 = parameters;
            *((_DWORD *)parameters[13].isa + 21) = 0;
            parameters[12].isa = (Class)((unint64_t)parameters[12].isa & 0xFFFFFFFFFFFF7F3FLL | 0x8080);

          }
          break;
        case 251:
          v563 = 0;
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 68)
            goto LABEL_94;
          if (v27 >= 0x45)
          {
            __nwlog_obj();
            v440 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v440, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uu = 136446978;
              *(_QWORD *)&uu[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&uu[12] = 1024;
              *(_DWORD *)&uu[14] = 251;
              *(_WORD *)&uu[18] = 1024;
              *(_DWORD *)&uu[20] = v27;
              LOWORD(v565) = 1024;
              *(_DWORD *)((char *)&v565 + 2) = 68;
              _os_log_impl(&dword_182FBE000, v440, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
            }

LABEL_94:
            v50 = *((_OWORD *)v36 + 3);
            *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
            *(_OWORD *)&buf[48] = v50;
            v563 = *((_DWORD *)v36 + 16);
            v51 = *((_OWORD *)v36 + 1);
            *(_OWORD *)buf = *(_OWORD *)v36;
            *(_OWORD *)&buf[16] = v51;
            v52 = v554;
            if (!v554)
              v52 = nw_demux_create_options();
            v554 = v52;
            nw_demux_options_add_pattern(v52, *(__int16 *)buf, *(unsigned __int16 *)&buf[2], (uint64_t)&buf[36], (uint64_t)&buf[4]);
          }
          break;
        default:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v40 = (id)gLogObj;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v26;
            _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_ERROR, "%{public}s Received unknown client parameter TLV (type %d)", buf, 0x12u);
          }
          goto LABEL_417;
      }
    }
    if (v20 >= a11 - 5)
      goto LABEL_1124;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v470 = (id)gLogObj;
  *(_DWORD *)buf = 136446978;
  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v27;
  *(_WORD *)&buf[18] = 2048;
  *(_QWORD *)&buf[20] = v20;
  *(_WORD *)&buf[28] = 2048;
  *(_QWORD *)&buf[30] = a11;
  v471 = (char *)_os_log_send_and_compose_impl();

  uu[0] = 16;
  v561 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v471, uu, &v561))
    goto LABEL_1122;
  if (uu[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v472 = (id)gLogObj;
    v473 = uu[0];
    if (os_log_type_enabled(v472, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a11;
      _os_log_impl(&dword_182FBE000, v472, v473, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)", buf, 0x26u);
    }
    goto LABEL_1121;
  }
  if (v561 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v472 = (id)gLogObj;
    v478 = uu[0];
    if (os_log_type_enabled(v472, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a11;
      _os_log_impl(&dword_182FBE000, v472, v478, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x26u);
    }
    goto LABEL_1121;
  }
  v474 = __nw_create_backtrace_string();
  if (!v474)
  {
    __nwlog_obj();
    v472 = objc_claimAutoreleasedReturnValue();
    v479 = uu[0];
    if (os_log_type_enabled(v472, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a11;
      _os_log_impl(&dword_182FBE000, v472, v479, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x26u);
    }
LABEL_1121:

LABEL_1122:
    if (!v471)
      goto LABEL_1124;
    goto LABEL_1123;
  }
  v475 = (char *)v474;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v476 = (id)gLogObj;
  v477 = uu[0];
  if (os_log_type_enabled(v476, (os_log_type_t)uu[0]))
  {
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v27;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v20;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = a11;
    *(_WORD *)&buf[38] = 2082;
    *(_QWORD *)&buf[40] = v475;
    _os_log_impl(&dword_182FBE000, v476, v477, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x30u);
  }

  free(v475);
  if (v471)
LABEL_1123:
    free(v471);
LABEL_1124:
  if (v20 == a11)
    goto LABEL_1125;
  __nwlog_obj();
  v527 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = v20;
  *(_WORD *)&buf[22] = 2048;
  *(_QWORD *)&buf[24] = a11;
  v528 = (char *)_os_log_send_and_compose_impl();

  uu[0] = 16;
  v561 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v528, uu, &v561))
  {
    if (uu[0] == 17)
    {
      __nwlog_obj();
      v529 = objc_claimAutoreleasedReturnValue();
      v530 = uu[0];
      if (os_log_type_enabled(v529, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = a11;
        _os_log_impl(&dword_182FBE000, v529, v530, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
      }
      goto LABEL_1248;
    }
    if (v561)
    {
      v531 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v529 = objc_claimAutoreleasedReturnValue();
      v532 = uu[0];
      v533 = os_log_type_enabled(v529, (os_log_type_t)uu[0]);
      if (v531)
      {
        if (v533)
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v20;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = a11;
          *(_WORD *)&buf[32] = 2082;
          *(_QWORD *)&buf[34] = v531;
          _os_log_impl(&dword_182FBE000, v529, v532, "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v531);
        goto LABEL_1249;
      }
      if (v533)
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = a11;
        _os_log_impl(&dword_182FBE000, v529, v532, "%{public}s cursor has unexpected value %zu != %zu, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      __nwlog_obj();
      v529 = objc_claimAutoreleasedReturnValue();
      v537 = uu[0];
      if (os_log_type_enabled(v529, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = a11;
        _os_log_impl(&dword_182FBE000, v529, v537, "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded", buf, 0x20u);
      }
    }
LABEL_1248:

  }
LABEL_1249:
  if (v528)
    free(v528);
LABEL_1125:
  v480 = parameters;
  if (((v542 != 0) & BYTE4(v548)) == 1)
    *v542 = 0;
  if ((v549 & 1) != 0)
  {
    if (v543)
      *v543 = v541;
    v481 = parameters;
    v482 = v481[19];

    v483 = nw_custom_ip_create_options(v541);
    nw_protocol_stack_set_transport_protocol(v482, &v483->super);

    v480 = parameters;
  }
  if ((v548 & 1) != 0)
  {
    v484 = v480;
    v485 = v484[19];

    if (v485)
    {
      v486 = (id *)v485;
      v487 = v486[3];

      if (v487)
      {
        v488 = v487;
        if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
          dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
        v489 = nw_protocol_options_matches_definition(v488, (void *)g_udp_definition);

        if (v489)
          nw_udp_options_set_no_metadata(v488, 1);
      }

    }
    v480 = parameters;
  }
  if ((v544 & 0x100000000) != 0)
  {
    v490 = v480;
    v491 = *((id *)v490[13].isa + 20);

    if (v491)
    {
      v491 = v491;
      v492 = -[NSObject type](v491, "type");

      if (v492 == 1)
      {
        address = nw_endpoint_get_address(v491);
        v494 = nw_endpoint_create_address_with_ethernet(address, &v559);

        v491 = v494;
        nw_parameters_set_local_endpoint(v490, v494);
      }
    }

    v480 = parameters;
  }
  v495 = v552;
  if (v552 != 0 && (v544 & 1) != 0)
  {
    if (*v552)
    {
      v496 = *v552;
      v497 = objc_msgSend(v496, "type");

      v480 = parameters;
      v495 = v552;
      if (v497 == 1)
      {
        v498 = nw_endpoint_get_address((nw_endpoint_t)*v552);
        v499 = nw_endpoint_create_address_with_ethernet(v498, &v557);
        v500 = *v552;
        *v552 = v499;

        v480 = parameters;
        v495 = v552;
      }
    }
  }
  if (v495 && v551 && v550)
    nw_endpoint_set_signature(*v495, v551, v550);
  if (SHIDWORD(v549) < 1)
    goto LABEL_1181;
  v501 = v480;
  v502 = v501;
  v503 = *((_QWORD *)v501[13].isa + 22);
  if (!v503)
  {

    goto LABEL_1158;
  }
  v504 = *(id *)(v503 + 8);

  if (v504)
  {
LABEL_1159:
    xpc_array_set_uint64(v504, 0xFFFFFFFFFFFFFFFFLL, 0x3EAuLL);
    nw_parameters_set_prohibited_interface_subtypes(v502, v504);
    goto LABEL_1180;
  }
LABEL_1158:
  v504 = xpc_array_create(0, 0);
  if (v504)
    goto LABEL_1159;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v505 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
  v506 = (char *)_os_log_send_and_compose_impl();

  uu[0] = 16;
  v561 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v506, uu, &v561))
    goto LABEL_1177;
  if (uu[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v507 = (id)gLogObj;
    v508 = uu[0];
    if (os_log_type_enabled(v507, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
      _os_log_impl(&dword_182FBE000, v507, v508, "%{public}s xpc_array_create failed", buf, 0xCu);
    }
    goto LABEL_1176;
  }
  if (v561 == OS_LOG_TYPE_DEFAULT)
  {
    __nwlog_obj();
    v507 = objc_claimAutoreleasedReturnValue();
    v512 = uu[0];
    if (os_log_type_enabled(v507, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
      _os_log_impl(&dword_182FBE000, v507, v512, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_1176;
  }
  v509 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v507 = objc_claimAutoreleasedReturnValue();
  v510 = uu[0];
  v511 = os_log_type_enabled(v507, (os_log_type_t)uu[0]);
  if (!v509)
  {
    if (v511)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
      _os_log_impl(&dword_182FBE000, v507, v510, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
    }
LABEL_1176:

LABEL_1177:
    if (!v506)
      goto LABEL_1179;
    goto LABEL_1178;
  }
  if (v511)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_parameters";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v509;
    _os_log_impl(&dword_182FBE000, v507, v510, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v509);
  if (v506)
LABEL_1178:
    free(v506);
LABEL_1179:
  v504 = 0;
LABEL_1180:

  v480 = parameters;
LABEL_1181:
  if (v554)
    nw_parameters_set_channel_demux_options(v480, v554);

  v25 = 1;
LABEL_1184:

  return v25;
}

void sub_183232F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  void *v47;
  void *v48;
  void *v49;

  _Unwind_Resume(a1);
}

BOOL nw_path_copy_path_for_client(uint64_t a1)
{
  id v2;
  _BOOL8 v3;

  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v2 = (id)nw_context_copy_implicit_context::implicit_context;
  v3 = nw_path_copy_path_for_client_with_context(a1);

  return v3;
}

void sub_1832331AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_required_netagent_classes(void *a1, void *a2, void *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Class Class;
  objc_class *v15;
  size_t count;
  xpc_object_t v17;
  uint64_t v18;
  void *v19;
  xpc_object_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  NSObject *v30;
  void *v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)v7;
  if (!v5)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_classes";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_classes";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_classes";
          _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_required_netagent_classes";
          _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_39:
    if (v24)
      free(v24);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(v5[13] + 176);
  if (v9)
  {
LABEL_6:
    v11 = *(void **)(v9 + 56);
    *(_QWORD *)(v9 + 56) = 0;

    v12 = *(_QWORD *)(v5[13] + 176);
    v13 = *(void **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = 0;

    if (v6)
    {
      Class = object_getClass((id)v6);
      if (v8)
      {
        v15 = (objc_class *)MEMORY[0x1E0C812C8];
        if (Class == (Class)MEMORY[0x1E0C812C8] && object_getClass(v8) == v15)
        {
          count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v15
              && (*(_QWORD *)applier = MEMORY[0x1E0C809B0],
                  *(_QWORD *)&applier[8] = 0x40000000,
                  *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  v36 = (uint64_t)&__block_descriptor_tmp_86211,
                  v37 = MEMORY[0x1E0C81390],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              v17 = xpc_retain((xpc_object_t)v6);
            }
            else
            {
              v17 = 0;
            }
            v18 = *(_QWORD *)(v5[13] + 176);
            v19 = *(void **)(v18 + 56);
            *(_QWORD *)(v18 + 56) = v17;

            if (object_getClass(v8) == v15
              && (*(_QWORD *)applier = MEMORY[0x1E0C809B0],
                  *(_QWORD *)&applier[8] = 0x40000000,
                  *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  v36 = (uint64_t)&__block_descriptor_tmp_86211,
                  v37 = MEMORY[0x1E0C81390],
                  xpc_array_apply(v8, applier)))
            {
              v20 = xpc_retain(v8);
            }
            else
            {
              v20 = 0;
            }
            v21 = *(_QWORD *)(v5[13] + 176);
            v22 = *(void **)(v21 + 64);
            *(_QWORD *)(v21 + 64) = v20;

          }
        }
      }
    }
    goto LABEL_20;
  }
  if (!(v6 | v7))
  {
LABEL_20:

    return;
  }
  v10 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v10)
  {
LABEL_5:
    *(_QWORD *)(v5[13] + 176) = v10;
    v9 = *(_QWORD *)(v5[13] + 176);
    goto LABEL_6;
  }
  __nwlog_obj();
  v30 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v36 = 144;
  v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_1832336BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_interface_types(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  xpc_object_t v7;
  void **v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE applier[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_types";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_types";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_types";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_types";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_parameters_set_prohibited_interface_types";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_32:
    if (v11)
      free(v11);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v3[13] + 176))
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      v23 = (uint64_t)&__block_descriptor_tmp_86211;
      v24 = MEMORY[0x1E0C81398];
      if (xpc_array_apply(v5, applier))
      {
        v7 = xpc_retain(v5);
LABEL_12:
        v8 = *(void ***)(v3[13] + 176);
        v9 = *v8;
        *v8 = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v23 = 144;
  v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_183233AE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_parameters_set_account_id(void *a1, const char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v14;
  void *v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_parameters_set_account_id";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_set_account_id";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_parameters_set_account_id";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_set_account_id";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_set_account_id";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_27:
    if (v8)
      free(v8);
    goto LABEL_8;
  }
  v5 = *(void **)(v3[13] + 112);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(v4[13] + 112) = 0;
  }
  if (!a2 || strlen(a2) - 1 > 0x3FE)
    goto LABEL_8;
  v6 = strdup(a2);
  if (v6)
  {
LABEL_7:
    *(_QWORD *)(v4[13] + 112) = v6;
LABEL_8:

    return;
  }
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v20 = "strict_strdup";
  v15 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v15))
  {
    free(v15);
    goto LABEL_7;
  }
  __break(1u);
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  void (**v3)(nw_parameters_configure_protocol_block_t, NWConcrete_nw_protocol_options *);
  void (**v4)(nw_parameters_configure_protocol_block_t, NWConcrete_nw_protocol_options *);
  void (**v5)(nw_parameters_configure_protocol_block_t, NWConcrete_nw_protocol_options *);
  nw_parameters_t v6;
  void *v7;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_options *v9;
  NSObject *v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  id v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  os_log_type_t v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  os_log_type_t v37;
  os_log_type_t v38;
  void *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  void *v44;
  os_log_type_t v45;
  void *v46;
  os_log_type_t v47;
  char *backtrace_string;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  _BOOL4 v52;
  char *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  os_log_type_t v56;
  os_log_type_t v57;
  os_log_type_t v58;
  char v59;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  char *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = configure_dtls;
  v4 = configure_udp;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v62 = "nw_parameters_create_secure_udp";
    v41 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v41, &type, &v59))
      goto LABEL_130;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s called with null configure_dtls", buf, 0xCu);
      }
      goto LABEL_129;
    }
    if (!v59)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v56 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v42, v56, "%{public}s called with null configure_dtls, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_129;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v42 = objc_claimAutoreleasedReturnValue();
    v49 = type;
    v50 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v42, v49, "%{public}s called with null configure_dtls, no backtrace", buf, 0xCu);
      }
      goto LABEL_129;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      v62 = "nw_parameters_create_secure_udp";
      v63 = 2082;
      v64 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v42, v49, "%{public}s called with null configure_dtls, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_105;
  }
  if (!v4)
  {
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v62 = "nw_parameters_create_secure_udp";
    v41 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v41, &type, &v59))
      goto LABEL_130;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v42, v45, "%{public}s called with null configure_udp", buf, 0xCu);
      }
      goto LABEL_129;
    }
    if (!v59)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v57 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v42, v57, "%{public}s called with null configure_udp, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_129;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v42 = objc_claimAutoreleasedReturnValue();
    v51 = type;
    v52 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v42, v51, "%{public}s called with null configure_udp, no backtrace", buf, 0xCu);
      }
      goto LABEL_129;
    }
    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      v62 = "nw_parameters_create_secure_udp";
      v63 = 2082;
      v64 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v42, v51, "%{public}s called with null configure_udp, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_105:

    free(backtrace_string);
    if (!v41)
      goto LABEL_132;
    goto LABEL_131;
  }
  if (v4 == (void (**)(nw_parameters_configure_protocol_block_t, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
  {
    __nwlog_obj();
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v62 = "nw_parameters_create_secure_udp";
    v41 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v41, &type, &v59))
      goto LABEL_130;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v42, v47, "%{public}s called with null (configure_udp != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v59)
    {
      v53 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      v55 = os_log_type_enabled(v42, type);
      if (v53)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_parameters_create_secure_udp";
          v63 = 2082;
          v64 = v53;
          _os_log_impl(&dword_182FBE000, v42, v54, "%{public}s called with null (configure_udp != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v53);
LABEL_130:
        if (!v41)
        {
LABEL_132:
          v10 = 0;
          goto LABEL_80;
        }
LABEL_131:
        free(v41);
        goto LABEL_132;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v42, v54, "%{public}s called with null (configure_udp != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v58 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v42, v58, "%{public}s called with null (configure_udp != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_129:

    goto LABEL_130;
  }
  v6 = nw_parameters_create();
  if (v6)
  {
    if (v3 == (void (**)(nw_parameters_configure_protocol_block_t, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
      goto LABEL_11;
    v7 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v7);

    if (options)
    {
      if (nw_parameters_add_protocol_stack_member(v6, 4, 0, options))
      {
        if (v3 != (void (**)(nw_parameters_configure_protocol_block_t, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
          v3[2](v3, options);

LABEL_11:
        if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
          dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
        v9 = nw_protocol_create_options((void *)g_udp_definition);
        if (v9)
        {
          if (nw_parameters_add_protocol_stack_member(v6, 3, 0, v9))
          {
            if (v5 != (void (**)(nw_parameters_configure_protocol_block_t, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
              v5[2](v5, v9);
            BYTE4(v6[11].isa) = 1;
            v10 = v6;
            goto LABEL_78;
          }
LABEL_77:
          v10 = 0;
LABEL_78:

          goto LABEL_79;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        v23 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v59 = 0;
        if (__nwlog_fault(v23, &type, &v59))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v24 = (id)gLogObj;
            v25 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              v62 = "nw_parameters_create_secure_udp";
              _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s nw_udp_create_options failed", buf, 0xCu);
            }
          }
          else if (v59)
          {
            v31 = __nw_create_backtrace_string();
            if (v31)
            {
              v32 = (char *)v31;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v33 = (id)gLogObj;
              v34 = type;
              if (os_log_type_enabled(v33, type))
              {
                *(_DWORD *)buf = 136446466;
                v62 = "nw_parameters_create_secure_udp";
                v63 = 2082;
                v64 = v32;
                _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s nw_udp_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v32);
              if (!v23)
                goto LABEL_77;
              goto LABEL_76;
            }
            __nwlog_obj();
            v24 = objc_claimAutoreleasedReturnValue();
            v38 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              v62 = "nw_parameters_create_secure_udp";
              _os_log_impl(&dword_182FBE000, v24, v38, "%{public}s nw_udp_create_options failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v24 = (id)gLogObj;
            v36 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              v62 = "nw_parameters_create_secure_udp";
              _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s nw_udp_create_options failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v23)
          goto LABEL_77;
LABEL_76:
        free(v23);
        goto LABEL_77;
      }
      goto LABEL_70;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v62 = "nw_parameters_create_secure_udp";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (__nwlog_fault(v19, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_parameters_create_secure_udp";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s nw_tls_create_options failed", buf, 0xCu);
        }
      }
      else if (v59)
      {
        v26 = __nw_create_backtrace_string();
        if (v26)
        {
          v27 = (char *)v26;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = (id)gLogObj;
          v29 = type;
          if (os_log_type_enabled(v28, type))
          {
            *(_DWORD *)buf = 136446466;
            v62 = "nw_parameters_create_secure_udp";
            v63 = 2082;
            v64 = v27;
            _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s nw_tls_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v27);
          if (!v19)
            goto LABEL_70;
          goto LABEL_69;
        }
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_parameters_create_secure_udp";
          _os_log_impl(&dword_182FBE000, v20, v37, "%{public}s nw_tls_create_options failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v35 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_parameters_create_secure_udp";
          _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s nw_tls_create_options failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v19)
    {
LABEL_70:

      goto LABEL_71;
    }
LABEL_69:
    free(v19);
    goto LABEL_70;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v62 = "nw_parameters_create_secure_udp";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v59 = 0;
  if (__nwlog_fault(v12, &type, &v59))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }
    else if (v59)
    {
      v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_parameters_create_secure_udp";
          v63 = 2082;
          v64 = v15;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        if (!v12)
          goto LABEL_71;
        goto LABEL_58;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v30 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_182FBE000, v13, v30, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v12)
LABEL_58:
    free(v12);
LABEL_71:
  v10 = 0;
LABEL_79:

LABEL_80:
  return v10;
}

void sub_183234D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_interface_create_with_index(unsigned int a1)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint32_t v5;
  int v7;
  NSObject *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  void *v20;
  os_log_type_t v21;
  char *backtrace_string;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  _QWORD v29[2];
  os_log_type_t v30[25];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_interface_create_with_index";
    v10 = (char *)_os_log_send_and_compose_impl();

    v30[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v10, v30, &type))
    {
      if (v30[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = v30[0];
        if (!os_log_type_enabled(v11, v30[0]))
          goto LABEL_30;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_interface_create_with_index";
        v13 = "%{public}s called with null interface_index";
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = v30[0];
        v23 = os_log_type_enabled(v11, v30[0]);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_interface_create_with_index";
            v28 = 2082;
            v29[0] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null interface_index, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }
        if (!v23)
          goto LABEL_30;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_interface_create_with_index";
        v13 = "%{public}s called with null interface_index, no backtrace";
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = v30[0];
        if (!os_log_type_enabled(v11, v30[0]))
          goto LABEL_30;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_interface_create_with_index";
        v13 = "%{public}s called with null interface_index, backtrace limit exceeded";
      }
      v17 = v11;
      v18 = v21;
      v19 = 12;
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if (a1 >= 0x7FFFFFFF)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
LABEL_6:

      return 0;
    }
    *(_DWORD *)buf = 136446722;
    v27 = "nw_interface_create_with_index";
    v28 = 1024;
    LODWORD(v29[0]) = a1;
    WORD2(v29[0]) = 1024;
    *(_DWORD *)((char *)v29 + 6) = 0x7FFFFFFF;
    v3 = "%{public}s refusing to create an interface with index %u too high (>=%u)";
    v4 = v2;
    v5 = 24;
LABEL_5:
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, v3, buf, v5);
    goto LABEL_6;
  }
  if (!if_indextoname(a1, (char *)v30))
  {
    v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "nw_interface_create_with_index";
      v28 = 1024;
      LODWORD(v29[0]) = a1;
      WORD2(v29[0]) = 1024;
      *(_DWORD *)((char *)v29 + 6) = v7;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s if_indextoname failed for interface index %u: %{darwin.errno}d", buf, 0x18u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v2 = v9;
    if (v7 == 6)
    {
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_6;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_interface_create_with_index";
      v28 = 1024;
      LODWORD(v29[0]) = 6;
      v3 = "%{public}s if_indextoname %{darwin.errno}d";
      v4 = v2;
      v5 = 18;
      goto LABEL_5;
    }
    *(_DWORD *)buf = 136446466;
    v27 = "nw_interface_create_with_index";
    v28 = 1024;
    LODWORD(v29[0]) = v7;
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v10, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_interface_create_with_index";
          v28 = 1024;
          LODWORD(v29[0]) = v7;
          v13 = "%{public}s if_indextoname %{darwin.errno}d";
LABEL_27:
          v17 = v11;
          v18 = v12;
LABEL_28:
          v19 = 18;
LABEL_29:
          _os_log_impl(&dword_182FBE000, v17, v18, v13, buf, v19);
        }
      }
      else
      {
        if (v24)
        {
          v14 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v15 = type;
          v16 = os_log_type_enabled(v11, type);
          if (v14)
          {
            if (v16)
            {
              *(_DWORD *)buf = 136446722;
              v27 = "nw_interface_create_with_index";
              v28 = 1024;
              LODWORD(v29[0]) = v7;
              WORD2(v29[0]) = 2082;
              *(_QWORD *)((char *)v29 + 6) = v14;
              _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s if_indextoname %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v14);
            goto LABEL_31;
          }
          if (!v16)
            goto LABEL_30;
          *(_DWORD *)buf = 136446466;
          v27 = "nw_interface_create_with_index";
          v28 = 1024;
          LODWORD(v29[0]) = v7;
          v13 = "%{public}s if_indextoname %{darwin.errno}d, no backtrace";
          v17 = v11;
          v18 = v15;
          goto LABEL_28;
        }
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_interface_create_with_index";
          v28 = 1024;
          LODWORD(v29[0]) = v7;
          v13 = "%{public}s if_indextoname %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_27;
        }
      }
LABEL_30:

    }
LABEL_31:
    if (v10)
      free(v10);
    return 0;
  }
  return nw_interface_create_with_index_and_name(a1, (unsigned __int8 *)v30);
}

_DWORD *nw_error_create_posix_error(int a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
    return -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, a1);
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_error_create_posix_error";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_error_create_posix_error";
        v6 = "%{public}s called with null error_code";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_error_create_posix_error";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null error_code, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_error_create_posix_error";
        v6 = "%{public}s called with null error_code, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_error_create_posix_error";
        v6 = "%{public}s called with null error_code, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
  return 0;
}

void *nw_endpoint_copy(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)objc_msgSend(v1, "copyEndpoint");
    nw_endpoint_copy_properties(v2, v3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_copy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_copy";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183235940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_context_128k_buffer_manager(void *a1)
{
  NWConcrete_nw_context *v1;
  NWConcrete_nw_context *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = v1;
    v3 = nw_context_copy_globals_context(v1);

    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 148);
    if (!v4)
    {
      *(_QWORD *)(*(_QWORD *)(v3 + 32) + 148) = nw_mem_buffer_manager_initialize(*(NSObject **)(v3 + 8), aNwcontextbuffe_3, dword_1EDCDF3D8, (unsigned __int16)word_1EDCDF3DC);
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 148);
    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_context_128k_buffer_manager";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_context_128k_buffer_manager";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_context_128k_buffer_manager";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_context_128k_buffer_manager";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_context_128k_buffer_manager";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v7)
    free(v7);
  v3 = 0;
  v4 = 0;
LABEL_4:

  return v4;
}

void sub_183235C24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_report_symptom_on_nw_queue(void *a1, int a2, void *a3, int a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  char *v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  _WORD v28[17];

  *(_QWORD *)&v28[13] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  if (v7)
  {
    nw_context_assert_queue(*((void **)v7 + 3));
    if (v8)
    {
      v9 = v8;
      os_unfair_lock_lock((os_unfair_lock_t)v9 + 28);
      v10 = *((id *)v9 + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)v9 + 28);

      if (!v10)
        goto LABEL_15;
LABEL_8:
      nw_connection_report_symptom_internal_on_nw_queue(a2, *((void **)v7 + 1), *((void **)v7 + 2), v10, 0, 0, 0, 0, a4, *((_DWORD *)v7 + 126));
      v11 = *((_QWORD *)v7 + 2);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v11 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v13 = *((_DWORD *)v7 + 112);
          v14 = off_1E14AB160[a2 - 421889];
          *(_DWORD *)buf = 136446722;
          v26 = "nw_connection_report_symptom_on_nw_queue";
          v27 = 1024;
          *(_DWORD *)v28 = v13;
          v28[2] = 2082;
          *(_QWORD *)&v28[3] = v14;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, "%{public}s [C%u] reported %{public}s symptom", buf, 0x1Cu);
        }

      }
      goto LABEL_15;
    }
    if ((*((_BYTE *)v7 + 109) & 0x40) != 0)
    {
      v10 = (id)nw_endpoint_handler_copy_connected_path(*((void **)v7 + 18));
      if (v10)
        goto LABEL_8;
    }
    else
    {
      v10 = 0;
    }
LABEL_15:

    goto LABEL_16;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_report_symptom_on_nw_queue";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v16, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_report_symptom_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_connection_report_symptom_on_nw_queue";
          v27 = 2082;
          *(_QWORD *)v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_33;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_report_symptom_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_report_symptom_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_33:
  if (v16)
    free(v16);
LABEL_16:

}

void sub_183236024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_connection_report_symptom_internal_on_nw_queue(int a1, void *a2, void *a3, void *a4, uint64_t a5, const unsigned __int8 *a6, uint64_t a7, int a8, int a9, int a10)
{
  id v15;
  id v16;
  id v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  pid_t v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  char *v27;
  id v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  id v32;
  os_log_type_t v33;
  _QWORD *v34;
  _QWORD *v35;
  const char *v36;
  NSObject *v37;
  NWConcrete_nw_path *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  NWConcrete_nw_path *v43;
  id *v44;
  id v45;
  id *v46;
  id v47;
  os_unfair_lock_s *v48;
  os_unfair_lock_s *v49;
  char *v50;
  const char *v51;
  NSObject *v52;
  char *v53;
  const char *v54;
  char *v55;
  os_log_type_t v56;
  int v57;
  os_log_type_t v58;
  os_log_type_t v59;
  os_log_type_t v60;
  void *v61;
  os_log_type_t v62;
  void *v63;
  os_log_type_t v64;
  char *backtrace_string;
  os_log_type_t v66;
  _BOOL4 v67;
  os_log_type_t v68;
  _BOOL4 v69;
  os_log_type_t v70;
  os_log_type_t v71;
  void *v73;
  _QWORD v74[6];
  int v75;
  uint64_t v76;
  uint8_t buf[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[40];
  unsigned __int8 *v82;
  unsigned __int8 uu[16];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v76 = a7;
  v75 = a8;
  v73 = v15;
  if (!v15)
  {
    __nwlog_obj();
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    v29 = (char *)_os_log_send_and_compose_impl();

    v81[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v29, v81, uu))
      goto LABEL_87;
    if (v81[0] == 17)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v62 = v81[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v81[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v30, v62, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!uu[0])
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v70 = v81[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v81[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v30, v70, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v40 = objc_claimAutoreleasedReturnValue();
    v66 = v81[0];
    v67 = os_log_type_enabled(v40, (os_log_type_t)v81[0]);
    if (backtrace_string)
    {
      if (v67)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v40, v66, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
LABEL_87:
      if (!v29)
        goto LABEL_89;
LABEL_88:
      free(v29);
      goto LABEL_89;
    }
    if (v67)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      _os_log_impl(&dword_182FBE000, v40, v66, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
LABEL_121:

    goto LABEL_87;
  }
  if (!v16)
  {
    __nwlog_obj();
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    v29 = (char *)_os_log_send_and_compose_impl();

    v81[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v29, v81, uu))
      goto LABEL_87;
    if (v81[0] == 17)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v64 = v81[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v81[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v30, v64, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_86;
    }
    if (!uu[0])
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v71 = v81[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v81[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v30, v71, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    v55 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v40 = objc_claimAutoreleasedReturnValue();
    v68 = v81[0];
    v69 = os_log_type_enabled(v40, (os_log_type_t)v81[0]);
    if (v55)
    {
      if (v69)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v55;
        _os_log_impl(&dword_182FBE000, v40, v68, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_71;
    }
    if (v69)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      _os_log_impl(&dword_182FBE000, v40, v68, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
    goto LABEL_121;
  }
  v18 = v16;
  v19 = *(id *)(v18[13] + 136);

  nw_context_assert_queue(v19);
  if (!v17 && (a1 - 421890) <= 9 && ((1 << (a1 - 2)) & 0x307) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = off_1E14AB110[a1 - 421890];
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v27;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s symptom reported when no path found", buf, 0x16u);
    }

    goto LABEL_89;
  }
  if (nw_connection_get_symptom_reporter_handle::once[0] != -1)
    dispatch_once(nw_connection_get_symptom_reporter_handle::once, &__block_literal_global_77956);
  if (nw_connection_get_symptom_reporter_handle::symptom_reporter)
  {
    v20 = symptom_new();
    if (v20)
    {
      v21 = getpid();
      v22 = v18;
      v23 = *(_DWORD *)(v18[13] + 64);

      if (v23 < 1 || v23 == v21)
      {
        v34 = v22;
        if (uuid_is_null((const unsigned __int8 *)(v18[13] + 24)))
        {
          v25 = 8;
          goto LABEL_28;
        }
        v57 = uuid_compare((const unsigned __int8 *)(v18[13] + 24), (const unsigned __int8 *)(v18[13] + 8));

        if (!v57)
        {
          v25 = 8;
LABEL_29:
          v35 = v22;
          v80 = *(_OWORD *)(v18[13] + v25);

          v78 = 0u;
          v79 = 0u;
          memset(buf, 0, sizeof(buf));
          if (proc_pidinfo(v21, 13, 1uLL, buf, 64) == 64)
          {
            v36 = (const char *)&buf[16];
            if (!v17)
            {
LABEL_49:
              symptom_set_qualifier();
              symptom_set_additional_qualifier();
              if (v36 && strlen(v36))
                symptom_set_additional_qualifier();
              if (a9)
                symptom_set_additional_qualifier();
              if (a10)
                symptom_set_additional_qualifier();
              v48 = v73;
              *(_QWORD *)uu = 0;
              *(_QWORD *)&uu[8] = uu;
              v84 = 0x2020000000;
              v85 = 0;
              v49 = v48 + 45;
              *(_QWORD *)v81 = MEMORY[0x1E0C809B0];
              *(_QWORD *)&v81[8] = 3221225472;
              *(_QWORD *)&v81[16] = __nw_endpoint_get_description_block_invoke;
              *(_QWORD *)&v81[24] = &unk_1E14ACE40;
              v50 = v48;
              *(_QWORD *)&v81[32] = v50;
              v82 = uu;
              os_unfair_lock_lock(v49);
              __nw_endpoint_get_description_block_invoke((uint64_t)v81);
              os_unfair_lock_unlock(v49);
              v51 = *(const char **)(*(_QWORD *)&uu[8] + 24);

              _Block_object_dispose(uu, 8);
              if (v51 && strlen(v51))
                symptom_set_additional_qualifier();
              if (a1 == 421899)
              {
                symptom_set_additional_qualifier();
                symptom_set_additional_qualifier();
              }
              else if (a1 == 421898)
              {
                symptom_set_qualifier();
                if (a6)
                {
                  memset(v81, 0, 37);
                  uuid_unparse(a6, v81);
                  strlen(v81);
                  symptom_set_additional_qualifier();
                }
              }
              symptom_send();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v52 = (id)gLogObj;
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
              {
                v53 = off_1E14AB160[a1 - 421889];
                *(_DWORD *)v81 = 136446722;
                *(_QWORD *)&v81[4] = "nw_connection_report_symptom_internal_on_nw_queue";
                *(_WORD *)&v81[12] = 2082;
                *(_QWORD *)&v81[14] = v53;
                *(_WORD *)&v81[22] = 1024;
                *(_DWORD *)&v81[24] = a1;
                _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_DEBUG, "%{public}s Symptom sent: %{public}s(%#x)", v81, 0x1Cu);
              }

              goto LABEL_89;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v37 = (id)gLogObj;
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v81 = 136446466;
              *(_QWORD *)&v81[4] = "nw_connection_report_symptom_internal_on_nw_queue";
              *(_WORD *)&v81[12] = 1024;
              *(_DWORD *)&v81[14] = v21;
              _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_ERROR, "%{public}s Failed to convert from PID (%d) to process name", v81, 0x12u);
            }

            v36 = 0;
            if (!v17)
              goto LABEL_49;
          }
          v38 = (NWConcrete_nw_path *)v17;
          nw_path_network_is_satisfied_update_reason(v38, 0);

          symptom_set_qualifier();
          memset(uu, 0, sizeof(uu));
          v43 = v38;
          *(_OWORD *)uu = *(_OWORD *)v43->flow_registration_id;

          if (!uuid_is_null(uu))
          {
            memset(v81, 0, 37);
            uuid_unparse(uu, v81);
            strlen(v81);
            symptom_set_additional_qualifier();
          }
          v44 = v43;
          v45 = v44[2];

          if (v45)
          {
            v46 = (id *)v45;
            v47 = v46[23];

            if (v47)
            {
              *(_QWORD *)v81 = 0;
              *(_QWORD *)&v81[8] = v81;
              *(_QWORD *)&v81[16] = 0x2020000000;
              v81[24] = 0;
              v74[0] = MEMORY[0x1E0C809B0];
              v74[1] = 3221225472;
              v74[2] = __nw_connection_report_symptom_internal_on_nw_queue_block_invoke;
              v74[3] = &unk_1E14AADD8;
              v74[4] = v81;
              v74[5] = v20;
              nw_proxy_config_enumerate_endpoints(v47, v74);
              _Block_object_dispose(v81, 8);
            }

          }
          goto LABEL_49;
        }
      }
      v24 = v22;
      v21 = *(_DWORD *)(v18[13] + 64);
      v25 = 24;
LABEL_28:

      goto LABEL_29;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v32 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    v29 = (char *)_os_log_send_and_compose_impl();

    v81[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v29, v81, uu))
      goto LABEL_87;
    if (v81[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      v33 = v81[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v81[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s symptom_new failed", buf, 0xCu);
      }
LABEL_86:

      goto LABEL_87;
    }
    if (!uu[0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      v59 = v81[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v81[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v30, v59, "%{public}s symptom_new failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_86;
    }
    v54 = __nw_create_backtrace_string();
    if (!v54)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v60 = v81[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v81[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v30, v60, "%{public}s symptom_new failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_86;
    }
    v55 = (char *)v54;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = (id)gLogObj;
    v56 = v81[0];
    if (os_log_type_enabled(v40, (os_log_type_t)v81[0]))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v55;
      _os_log_impl(&dword_182FBE000, v40, v56, "%{public}s symptom_new failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_71:

    free(v55);
    if (!v29)
      goto LABEL_89;
    goto LABEL_88;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v28 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
  v29 = (char *)_os_log_send_and_compose_impl();

  v81[0] = 16;
  uu[0] = 0;
  if (!__nwlog_fault(v29, v81, uu))
    goto LABEL_87;
  if (v81[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = (id)gLogObj;
    v31 = v81[0];
    if (os_log_type_enabled(v30, (os_log_type_t)v81[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s nw_connection_get_symptom_reporter_handle failed", buf, 0xCu);
    }
    goto LABEL_86;
  }
  if (!uu[0])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = (id)gLogObj;
    v58 = v81[0];
    if (os_log_type_enabled(v30, (os_log_type_t)v81[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      _os_log_impl(&dword_182FBE000, v30, v58, "%{public}s nw_connection_get_symptom_reporter_handle failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_86;
  }
  v39 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v40 = (id)gLogObj;
  v41 = v81[0];
  v42 = os_log_type_enabled(v40, (os_log_type_t)v81[0]);
  if (!v39)
  {
    if (v42)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
      _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s nw_connection_get_symptom_reporter_handle failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_121;
  }
  if (v42)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_connection_report_symptom_internal_on_nw_queue";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v39;
    _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s nw_connection_get_symptom_reporter_handle failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v39);
  if (v29)
    goto LABEL_88;
LABEL_89:

}

void sub_183237034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  _Block_object_dispose((const void *)(v22 - 192), 8);

  _Unwind_Resume(a1);
}

void nw_channel_close(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  void *v21;
  _BOOL8 globals_for_channel;
  uint64_t v23;
  __int16 *v24;
  __int16 v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  _BOOL8 v31;
  void **v32;
  void **v33;
  void *v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  const char *v39;
  char *backtrace_string;
  _BOOL4 v41;
  char v42;
  uint8_t v43[4];
  const char *v44;
  __int16 v45;
  uint8_t *v46;
  __int16 v47;
  int v48;
  uint8_t buf[32];
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 280);
    if (v3 && *(_DWORD *)(v3 + 40))
    {
      v4 = *(_QWORD *)(a1 + 152);
      if (!v4 || *(_DWORD *)(v4 + 124) != 4)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_channel_close";
          _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s Cannot close channel, input client table is non-empty", buf, 0xCu);
        }
      }
      return;
    }
    if (_nw_signposts_once != -1)
      dispatch_once(&_nw_signposts_once, &__block_literal_global_65);
    if (_nw_signposts_enabled && kdebug_is_enabled())
    {
      kdebug_trace();
      v6 = *(_QWORD *)(a1 + 192);
      if (!v6)
      {
LABEL_14:
        v7 = *(_QWORD *)(a1 + 200);
        if (v7)
        {
          nw_queue_cancel_source(v7, a2);
          *(_QWORD *)(a1 + 200) = 0;
        }
        v8 = *(_QWORD *)(a1 + 184);
        if (v8)
        {
          nw_queue_cancel_source(v8, a2);
          *(_QWORD *)(a1 + 184) = 0;
        }
        v9 = *(_QWORD *)(a1 + 168);
        if (v9)
        {
          nw_queue_cancel_source(*(_QWORD *)(a1 + 168), a2);
          *(_QWORD *)(a1 + 168) = 0;
          if ((*(_WORD *)(a1 + 444) & 8) != 0)
          {
            nw_queue_resume_source(v9, a2);
            v10 = *(unsigned __int16 *)(a1 + 444);
            v11 = v10 & 0xFFFFFFF7 | (*(unsigned __int8 *)(a1 + 446) << 16);
            *(_WORD *)(a1 + 444) = v10 & 0xFFF7;
            *(_BYTE *)(a1 + 446) = BYTE2(v11);
          }
        }
        v12 = *(_QWORD *)(a1 + 176);
        if (v12)
        {
          nw_queue_cancel_source(*(_QWORD *)(a1 + 176), a2);
          *(_QWORD *)(a1 + 176) = 0;
          if ((*(_WORD *)(a1 + 444) & 0x10) != 0)
          {
            nw_queue_resume_source(v12, v13);
            v14 = *(unsigned __int16 *)(a1 + 444);
            v15 = v14 & 0xFFFFFFEF | (*(unsigned __int8 *)(a1 + 446) << 16);
            *(_WORD *)(a1 + 444) = v14 & 0xFFEF;
            *(_BYTE *)(a1 + 446) = BYTE2(v15);
          }
        }
        v50 = 0u;
        memset(buf, 0, sizeof(buf));
        v16 = *(_DWORD *)(a1 + 428);
        uuid_unparse((const unsigned __int8 *)(a1 + 88), (char *)buf);
        snprintf((char *)&v50 + 4, 0xCuLL, "-%u", v16);
        if (*(_QWORD *)(a1 + 136))
        {
          v17 = *(NSObject **)(a1 + 208);
          if (v17)
          {
            dispatch_group_leave(v17);
          }
          else
          {
            v18 = *(_QWORD *)(a1 + 152);
            if (!v18 || *(_DWORD *)(v18 + 124) != 4)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v19 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
              {
                v20 = *(_DWORD *)(a1 + 432);
                *(_DWORD *)v43 = 136446722;
                v44 = "nw_channel_close";
                v45 = 2082;
                v46 = buf;
                v47 = 1024;
                v48 = v20;
                _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s Channel destroyed with key: %{public}s and fd: %d", v43, 0x1Cu);
              }
            }
            os_channel_destroy();
          }
          *(_QWORD *)(a1 + 136) = 0;
        }
        if (*(_QWORD *)(a1 + 144))
        {
          os_channel_attr_destroy();
          *(_QWORD *)(a1 + 144) = 0;
        }
        v21 = *(void **)(a1 + 152);
        if (!v21)
          goto LABEL_53;
        globals_for_channel = nw_context_get_globals_for_channel(v21);
        v23 = globals_for_channel;
        v24 = (__int16 *)(a1 + 444);
        v25 = *(_WORD *)(a1 + 444);
        if ((v25 & 0x2000) != 0)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 16));
          v26 = (unsigned __int16)*v24;
          if ((v26 & 0x2000) != 0)
          {
            v27 = v26 & 0xFFFFDFFF | (*(unsigned __int8 *)(a1 + 446) << 16);
            *v24 = v26 & 0xDFFF;
            *(_BYTE *)(a1 + 446) = BYTE2(v27);
            nw_dictionary_set_value(*(_QWORD *)v23, (const char *)buf, 0);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 16));
          v25 = *v24;
        }
        if ((v25 & 0x4000) == 0)
          goto LABEL_53;
        os_unfair_lock_lock((os_unfair_lock_t)(v23 + 20));
        v28 = (unsigned __int16)*v24;
        if ((v28 & 0x4000) != 0)
        {
          v29 = v28 & 0xFFFFBFFF | (*(unsigned __int8 *)(a1 + 446) << 16);
          *v24 = v28 & 0xBFFF;
          *(_BYTE *)(a1 + 446) = BYTE2(v29);
          v30 = *(_QWORD **)(v23 + 8);
          if (!v30 || v30[2] == v30[3])
          {
            v31 = nw_array_create();
          }
          else
          {
            v31 = nw_array_create();
            std::vector<nw_object_wrapper_t>::reserve(v31 + 16, ((uint64_t)(v30[3] - v30[2]) >> 3) - 1);
            v32 = (void **)v30[2];
            v33 = (void **)v30[3];
            if (v32 == v33)
            {
              *(_QWORD *)(v23 + 8) = v31;
LABEL_51:
              os_release(v30);
              goto LABEL_52;
            }
            do
            {
              if (*v32 != (void *)a1)
                nw_array_append(v31, *v32);
              ++v32;
            }
            while (v32 != v33);
          }
          *(_QWORD *)(v23 + 8) = v31;
          if (v30)
            goto LABEL_51;
        }
LABEL_52:
        os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 20));
LABEL_53:
        v34 = *(void **)(a1 + 16);
        if (v34)
        {
          free(v34);
          *(_QWORD *)(a1 + 16) = 0;
        }
        *(_DWORD *)(a1 + 424) = 0;
        v35 = *(void **)(a1 + 160);
        if (v35)
        {
          if ((*(_WORD *)(a1 + 444) & 0x20) == 0 || (nw_nexus_remove_instance(), (v35 = *(void **)(a1 + 160)) != 0))
          {
            os_release(v35);
            *(_QWORD *)(a1 + 160) = 0;
          }
        }
        return;
      }
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 192);
      if (!v6)
        goto LABEL_14;
    }
    nw_queue_cancel_source(v6, a2);
    *(_QWORD *)(a1 + 192) = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_channel_close";
  v36 = (char *)_os_log_send_and_compose_impl();
  v43[0] = 16;
  v42 = 0;
  if (__nwlog_fault(v36, v43, &v42))
  {
    if (v43[0] == 17)
    {
      v37 = __nwlog_obj();
      v38 = v43[0];
      if (!os_log_type_enabled(v37, (os_log_type_t)v43[0]))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_channel_close";
      v39 = "%{public}s called with null channel";
      goto LABEL_75;
    }
    if (!v42)
    {
      v37 = __nwlog_obj();
      v38 = v43[0];
      if (!os_log_type_enabled(v37, (os_log_type_t)v43[0]))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_channel_close";
      v39 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v37 = __nwlog_obj();
    v38 = v43[0];
    v41 = os_log_type_enabled(v37, (os_log_type_t)v43[0]);
    if (backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_channel_close";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_76;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_channel_close";
      v39 = "%{public}s called with null channel, no backtrace";
LABEL_75:
      _os_log_impl(&dword_182FBE000, v37, v38, v39, buf, 0xCu);
    }
  }
LABEL_76:
  if (v36)
    free(v36);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t __nw_connection_get_symptom_reporter_handle_block_invoke()
{
  uint64_t result;

  result = symptom_framework_init();
  nw_connection_get_symptom_reporter_handle::symptom_reporter = result;
  return result;
}

uint64_t ___ZL33nw_endpoint_remove_inactive_edgesP22NWConcrete_nw_endpoint_block_invoke_2(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  int is_active;
  uint64_t result;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_endpoint_edge_is_active";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_endpoint_edge_is_active";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null edge", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_endpoint_edge_is_active";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_endpoint_edge_is_active";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null edge, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_endpoint_edge_is_active";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v8)
      free(v8);
    return 1;
  }
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 48));
  if (!WeakRetained)
    return 1;
  v4 = WeakRetained;
  is_active = nw_endpoint_is_active(WeakRetained, 0);

  result = 1;
  if (is_active)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return 0;
  }
  return result;
}

void sub_183237A74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_6(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 208));
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_4(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 208));
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_2(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 208));
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  void *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  char out[56];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  memset(out, 0, 48);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v3 = *(_DWORD *)(v2 + 428);
  uuid_unparse((const unsigned __int8 *)(v2 + 88), out);
  snprintf(&out[36], 0xCuLL, "-%u", v3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 152);
  if (!v4 || *(_DWORD *)(v4 + 124) != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 432);
      *(_DWORD *)buf = 136446722;
      v9 = "nw_channel_create_block_invoke";
      v10 = 2082;
      v11 = out;
      v12 = 1024;
      v13 = v6;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s Channel destroyed with key: %{public}s and fd: %d", buf, 0x1Cu);
    }
  }
  os_channel_destroy();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 136) = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 432) = -1;
  v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v7)
  {
    os_release(v7);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
}

void nw_channel_release_frame_array(uint64_t a1, uint64_t *a2)
{
  _WORD *v4;
  _QWORD *v5;
  _QWORD *metadata;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = (_WORD *)(a1 + 444);
  while (1)
  {
    v5 = (_QWORD *)*a2;
    if (!*a2)
      break;
    if ((*v4 & 0x1000) != 0)
    {
      metadata = (_QWORD *)nw_frame_get_metadata(*a2);
      if (metadata)
      {
        v7 = metadata;
        if (*metadata)
        {
          if (*(_QWORD *)(a1 + 136) && os_channel_packet_free())
            nw_channel_check_defunct(a1);
          *v7 = 0;
          v7[1] = 0;
        }
      }
    }
    v8 = v5[2];
    v9 = (_QWORD *)v5[3];
    if (v8)
    {
      *(_QWORD *)(v8 + 24) = v9;
      v9 = (_QWORD *)v5[3];
    }
    else
    {
      a2[1] = (uint64_t)v9;
    }
    *v9 = v8;
    v5[2] = 0;
    v5[3] = 0;
    os_release(v5);
  }
}

void nw_protocol_default_error(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*error)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        error = (void (*)(void))callbacks->error;
        if (error)
          error();
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_default_error";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_error";
      v8 = "%{public}s called with null protocol";
      goto LABEL_19;
    }
    if (!v11)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_error";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v14 = "nw_protocol_default_error";
        v15 = 2082;
        v16 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_20;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_error";
      v8 = "%{public}s called with null protocol, no backtrace";
LABEL_19:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_20:
  if (v5)
    free(v5);
}

uint64_t nw_channel_check_defunct(uint64_t a1)
{
  uint64_t result;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v12 = "nw_channel_check_defunct";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v9 = 0;
    if (__nwlog_fault(v3, &type, &v9))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v12 = "nw_channel_check_defunct";
          v6 = "%{public}s called with null channel";
LABEL_26:
          _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
        }
      }
      else if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v4 = __nwlog_obj();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_channel_check_defunct";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_27;
        }
        if (v8)
        {
          *(_DWORD *)buf = 136446210;
          v12 = "nw_channel_check_defunct";
          v6 = "%{public}s called with null channel, no backtrace";
          goto LABEL_26;
        }
      }
      else
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v12 = "nw_channel_check_defunct";
          v6 = "%{public}s called with null channel, backtrace limit exceeded";
          goto LABEL_26;
        }
      }
    }
LABEL_27:
    if (v3)
      free(v3);
    return 0;
  }
  if (*(_QWORD *)(a1 + 136))
  {
    if (((*(unsigned __int16 *)(a1 + 444) | (*(unsigned __int8 *)(a1 + 446) << 16)) & 0x80000) == 0)
    {
      result = os_channel_is_defunct();
      if (!(_DWORD)result)
        return result;
      nw_channel_handle_defunct(a1);
    }
  }
  else
  {
    if (_nw_signposts_once != -1)
      dispatch_once(&_nw_signposts_once, &__block_literal_global_65);
    if (_nw_signposts_enabled)
    {
      if (kdebug_is_enabled())
        kdebug_trace();
    }
  }
  return 1;
}

void nw_flow_error(nw_protocol *a1, nw_protocol *a2, unsigned int a3)
{
  nw_protocol *v5;
  id *handle;
  id v7;
  void *v8;
  NWConcrete_nw_endpoint_handler *v9;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v11;
  _DWORD *dns_error;
  NSObject *v13;
  const char *v14;
  id v15;
  void *v16;
  NWConcrete_nw_endpoint_handler *v17;
  char v18;
  NSObject *v19;
  NWConcrete_nw_endpoint_handler *v20;
  NWConcrete_nw_endpoint_handler *v21;
  char v22;
  const char *v23;
  nw_endpoint_t v24;
  const char *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  const char *v29;
  id v30;
  id v31;
  NWConcrete_nw_endpoint_handler *v32;
  char v33;
  NWConcrete_nw_endpoint_handler *v34;
  NWConcrete_nw_endpoint_handler *v35;
  char v36;
  const char *v37;
  nw_endpoint_t v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  const char *v42;
  char *id_str;
  void **v44;
  void **v45;
  NWConcrete_nw_endpoint_mode_handler *v46;
  const char *v47;
  void **v48;
  void **v49;
  const char *v50;
  void **v51;
  id v52;
  const char *name;
  id v54;
  void **v55;
  id v56;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*error)(void);
  void *v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  char *backtrace_string;
  os_log_type_t v65;
  _BOOL4 v66;
  nw_endpoint_t v67;
  const char *v68;
  const char *v69;
  const char *v70;
  id v71;
  void *v72;
  const char *v73;
  id v74;
  nw_endpoint_t v75;
  const char *v76;
  const char *v77;
  const char *v78;
  id v79;
  os_log_type_t v80;
  NWConcrete_nw_endpoint_mode_handler *v81;
  NWConcrete_nw_endpoint_mode_handler *v82;
  NWConcrete_nw_endpoint_mode_handler *v83;
  const char *v84;
  char *v85;
  const char *v86;
  nw_endpoint_t v87;
  const char *v88;
  const char *logging_description;
  const char *v90;
  const char *v91;
  nw_protocol *v92;
  nw_protocol *v93;
  NSObject *log;
  NSObject *loga;
  const char *logb;
  const char *logc;
  nw_protocol *v98;
  char v99;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v102;
  __int16 v103;
  void *v104;
  __int16 v105;
  const char *v106;
  __int16 v107;
  const char *v108;
  __int16 v109;
  const char *v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  id v114;
  __int16 v115;
  const char *v116;
  __int16 v117;
  id v118;
  uint64_t v119;

  v5 = a1;
  v119 = *MEMORY[0x1E0C80C00];
  handle = (id *)a1->handle;
  v7 = handle[20];
  v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v102 = "nw_flow_error";
    v61 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v99 = 0;
    if (__nwlog_fault(v61, &type, &v99))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v62 = objc_claimAutoreleasedReturnValue();
        v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v102 = "nw_flow_error";
          _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v99)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v62 = objc_claimAutoreleasedReturnValue();
        v65 = type;
        v66 = os_log_type_enabled(v62, type);
        if (backtrace_string)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446466;
            v102 = "nw_flow_error";
            v103 = 2082;
            v104 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v62, v65, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_94;
        }
        if (v66)
        {
          *(_DWORD *)buf = 136446210;
          v102 = "nw_flow_error";
          _os_log_impl(&dword_182FBE000, v62, v65, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v62 = objc_claimAutoreleasedReturnValue();
        v80 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v102 = "nw_flow_error";
          _os_log_impl(&dword_182FBE000, v62, v80, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_94:
    if (v61)
      free(v61);
    goto LABEL_64;
  }
  v9 = (NWConcrete_nw_endpoint_handler *)v7;
  mode = v9->mode;

  if ((_DWORD)mode == 2)
  {
    v11 = nw_endpoint_handler_copy_flow(v9);
    v98 = a2;
    if (a3)
    {
      if (a3 >> 8 == 16776959)
      {
        dns_error = nw_error_create_dns_error(a3);
      }
      else if (a3 + 9899 > 0x63)
      {
        dns_error = nw_error_create_posix_error(a3);
      }
      else
      {
        dns_error = nw_error_create_tls_error(a3);
      }
      v30 = handle[40];
      handle[40] = dns_error;

      v31 = handle[40];
      if (v31)
      {
        objc_storeStrong((id *)v11 + 109, v31);
        *((_BYTE *)v11 + 36) &= ~2u;
      }
      if (!nw_endpoint_handler_get_minimize_logging(v9))
      {
        v32 = v9;
        v33 = *((_BYTE *)v32 + 268);

        if ((v33 & 0x20) != 0)
          goto LABEL_59;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          loga = v19;
          v34 = v32;

          v35 = v34;
          v36 = *((_BYTE *)v32 + 268);

          if ((v36 & 1) != 0)
            v37 = "dry-run ";
          else
            v37 = "";
          v38 = nw_endpoint_handler_copy_endpoint(v35);
          logging_description = nw_endpoint_get_logging_description(v38);
          v39 = v35;
          v40 = v39;
          v41 = v39[30];
          v92 = v5;
          if (v41 > 5)
            v42 = "unknown-state";
          else
            v42 = off_1E149FC48[v41];
          v84 = v42;
          v86 = v37;
          id_str = v34->id_str;

          v44 = v40;
          v45 = v44;
          v87 = v38;
          v46 = v11;
          v47 = "path";
          switch(v9->mode)
          {
            case 0:
              break;
            case 1:
              v47 = "resolver";
              break;
            case 2:
              v47 = nw_endpoint_flow_mode_string(v44[31]);
              break;
            case 3:
              v47 = "proxy";
              break;
            case 4:
              v47 = "fallback";
              break;
            case 5:
              v47 = "transform";
              break;
            default:
              v47 = "unknown-mode";
              break;
          }

          v51 = v45;
          os_unfair_lock_lock((os_unfair_lock_t)v51 + 28);
          v52 = v51[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v51 + 28);

          name = "?";
          if (v98 && v98->identifier)
            name = v98->identifier->name;
          v11 = v46;
          v19 = loga;
          v54 = handle[40];
          *(_DWORD *)buf = 136448258;
          v102 = "nw_flow_error";
          v103 = 2082;
          v104 = id_str;
          v105 = 2082;
          v106 = v86;
          v107 = 2082;
          v108 = logging_description;
          v109 = 2082;
          v110 = v84;
          v111 = 2082;
          v112 = v47;
          v113 = 2114;
          v114 = v52;
          v115 = 2082;
          v116 = name;
          v117 = 2114;
          v118 = v54;
          _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output protocol (%{public}s) sent error: %{public}@", buf, 0x5Cu);

          v5 = v92;
        }
        goto LABEL_58;
      }
      if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          v93 = v5;
          v82 = v11;
          logb = nw_endpoint_handler_get_id_string(v9);
          v90 = nw_endpoint_handler_dry_run_string(v9);
          v67 = nw_endpoint_handler_copy_endpoint(v9);
          v68 = nw_endpoint_get_logging_description(v67);
          v69 = nw_endpoint_handler_state_string(v9);
          v70 = nw_endpoint_handler_mode_string(v9);
          v71 = nw_endpoint_handler_copy_current_path(v9);
          v72 = v71;
          v73 = "?";
          if (v98 && v98->identifier)
            v73 = v98->identifier->name;
          v74 = handle[40];
          *(_DWORD *)buf = 136448258;
          v102 = "nw_flow_error";
          v103 = 2082;
          v104 = (void *)logb;
          v105 = 2082;
          v106 = v90;
          v107 = 2082;
          v108 = v68;
          v109 = 2082;
          v110 = v69;
          v111 = 2082;
          v112 = v70;
          v113 = 2114;
          v114 = v71;
          v115 = 2082;
          v116 = v73;
          v117 = 2114;
          v118 = v74;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output protocol (%{public}s) sent error: %{public}@", buf, 0x5Cu);

          v11 = v82;
          v5 = v93;

        }
LABEL_58:

      }
    }
    else
    {
      v15 = handle[40];
      handle[40] = 0;

      v16 = (void *)*((_QWORD *)v11 + 109);
      *((_QWORD *)v11 + 109) = 0;

      *((_BYTE *)v11 + 36) &= ~2u;
      if (!nw_endpoint_handler_get_minimize_logging(v9))
      {
        v17 = v9;
        v18 = *((_BYTE *)v17 + 268);

        if ((v18 & 0x20) != 0)
          goto LABEL_59;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          log = v19;
          v81 = v11;
          v20 = v17;

          v21 = v20;
          v22 = *((_BYTE *)v17 + 268);

          if ((v22 & 1) != 0)
            v23 = "dry-run ";
          else
            v23 = "";
          v24 = nw_endpoint_handler_copy_endpoint(v21);
          v25 = nw_endpoint_get_logging_description(v24);
          v88 = v23;
          v85 = v20->id_str;
          v26 = v21;
          v27 = v26;
          v28 = v26[30];
          if (v28 > 5)
            v29 = "unknown-state";
          else
            v29 = off_1E149FC48[v28];

          v48 = v27;
          v49 = v48;
          v50 = "path";
          switch(v9->mode)
          {
            case 0:
              break;
            case 1:
              v50 = "resolver";
              break;
            case 2:
              v50 = nw_endpoint_flow_mode_string(v48[31]);
              break;
            case 3:
              v50 = "proxy";
              break;
            case 4:
              v50 = "fallback";
              break;
            case 5:
              v50 = "transform";
              break;
            default:
              v50 = "unknown-mode";
              break;
          }

          v55 = v49;
          os_unfair_lock_lock((os_unfair_lock_t)v55 + 28);
          v56 = v55[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v55 + 28);

          *(_DWORD *)buf = 136447746;
          v102 = "nw_flow_error";
          v103 = 2082;
          v104 = v85;
          v105 = 2082;
          v106 = v88;
          v107 = 2082;
          v108 = v25;
          v109 = 2082;
          v110 = v29;
          v111 = 2082;
          v112 = v50;
          v113 = 2114;
          v114 = v56;
          v19 = log;
          _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output protocol cleared error", buf, 0x48u);

          v11 = v81;
        }
        goto LABEL_58;
      }
      if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
      {
        v83 = v11;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          logc = nw_endpoint_handler_get_id_string(v9);
          v91 = nw_endpoint_handler_dry_run_string(v9);
          v75 = nw_endpoint_handler_copy_endpoint(v9);
          v76 = nw_endpoint_get_logging_description(v75);
          v77 = nw_endpoint_handler_state_string(v9);
          v78 = nw_endpoint_handler_mode_string(v9);
          v79 = nw_endpoint_handler_copy_current_path(v9);
          *(_DWORD *)buf = 136447746;
          v102 = "nw_flow_error";
          v103 = 2082;
          v104 = (void *)logc;
          v105 = 2082;
          v106 = v91;
          v107 = 2082;
          v108 = v76;
          v109 = 2082;
          v110 = v77;
          v111 = 2082;
          v112 = v78;
          v113 = 2114;
          v114 = v79;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output protocol cleared error", buf, 0x48u);

          v11 = v83;
        }
        goto LABEL_58;
      }
    }
LABEL_59:
    default_input_handler = v5->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        error = (void (*)(void))callbacks->error;
        if (error)
          error();
      }
    }

    goto LABEL_64;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5)
      v14 = "unknown-mode";
    else
      v14 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v102 = "nw_flow_error";
    v103 = 2082;
    v104 = (void *)v14;
    v105 = 2082;
    v106 = "flow";
    _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_64:
}

void sub_1832395C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

xpc_object_t NWUtilsCreateXPCArrayFromNSArray(void *a1, void *a2)
{
  id v3;
  id v4;
  xpc_object_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  char isKindOfClass;
  void *XPCArrayFromNSArray;
  id v14;
  char v15;
  NSObject *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  id v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = xpc_array_create(0, 0);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v6);
        v11 = *(id *)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0)
        {
          XPCArrayFromNSArray = (void *)NWUtilsCreateXPCArrayFromNSArray(v3, v11);
          if (XPCArrayFromNSArray)
            goto LABEL_14;
        }
        else
        {
          v14 = v11;
          objc_opt_class();
          v15 = objc_opt_isKindOfClass();

          if ((v15 & 1) != 0)
          {
            XPCArrayFromNSArray = (void *)NWUtilsCreateXPCDictionaryFromNSDictionary(v14);
            if (XPCArrayFromNSArray)
              goto LABEL_14;
          }
          else
          {
            XPCArrayFromNSArray = (void *)NWUtilsCreateXPCObjectFromSimpleNSObject(v3, v14);
            if (XPCArrayFromNSArray)
            {
LABEL_14:
              xpc_array_append_value(v5, XPCArrayFromNSArray);
              goto LABEL_6;
            }
          }
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v23 = "NWUtilsCreateXPCArrayFromNSArray";
          v24 = 2114;
          v25 = v11;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s Could not create xpc object for %{public}@", buf, 0x16u);
        }

LABEL_6:
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v8);
  }

  return v5;
}

void sub_18323A0BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18323A798(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18323BC78()
{
  nw_protocol_definition_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v0 = nw_protocol_copy_ws_definition();
  type metadata accessor for NWProtocolDefinition();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 32) = v0;
  v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  v3 = sub_183B916E0();
  v5 = v4;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v5;
  off_1EDCDC4B8 = (_UNKNOWN *)v1;
  return result;
}

uint64_t static NWProtocolWebSocket.definition.getter()
{
  if (qword_1EDCDC4B0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t static NWProtocolWebSocket.Version.== infix(_:_:)()
{
  return 1;
}

uint64_t NWProtocolWebSocket.Version.hash(into:)()
{
  return sub_183B9225C();
}

uint64_t NWProtocolWebSocket.Version.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t sub_18323BDB4()
{
  return 1;
}

uint64_t sub_18323BDBC()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t sub_18323BDFC()
{
  return sub_183B9225C();
}

uint64_t sub_18323BE20()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

Network::NWProtocolWebSocket::Opcode_optional __swiftcall NWProtocolWebSocket.Opcode.init(rawValue:)(Network::NWProtocolWebSocket::Opcode_optional rawValue)
{
  _BYTE *v1;

  if (rawValue.value > 0xAu)
    *v1 = 6;
  else
    *v1 = byte_183B9E996[rawValue.value];
  return rawValue;
}

unint64_t NWProtocolWebSocket.Opcode.rawValue.getter()
{
  _BYTE *v0;

  return 0xA0908020100uLL >> (8 * *v0);
}

BOOL sub_18323BEA8(_BYTE *a1, _BYTE *a2)
{
  return (0xA0908020100uLL >> (8 * *a1)) == (0xA0908020100uLL >> (8 * *a2));
}

uint64_t sub_18323BEE0()
{
  sub_183B92250();
  sub_183B92268();
  return sub_183B9228C();
}

uint64_t sub_18323BF34()
{
  return sub_183B92268();
}

uint64_t sub_18323BF70()
{
  sub_183B92250();
  sub_183B92268();
  return sub_183B9228C();
}

Network::NWProtocolWebSocket::Opcode_optional sub_18323BFC0(Swift::UInt8 *a1)
{
  return NWProtocolWebSocket.Opcode.init(rawValue:)(*a1);
}

void sub_18323BFC8(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0xA0908020100uLL >> (8 * *v1);
}

Network::NWProtocolWebSocket::CloseCode::Defined_optional __swiftcall NWProtocolWebSocket.CloseCode.Defined.init(rawValue:)(Swift::UInt16 rawValue)
{
  _BYTE *v1;

  if ((unsigned __int16)(rawValue - 1000) > 0xFu)
    *v1 = 12;
  else
    *v1 = byte_183B9EA10[(__int16)(rawValue - 1000)];
  return (Network::NWProtocolWebSocket::CloseCode::Defined_optional)rawValue;
}

uint64_t NWProtocolWebSocket.CloseCode.Defined.rawValue.getter()
{
  char *v0;

  return word_183B9E9EC[*v0];
}

BOOL sub_18323C030(char *a1, char *a2)
{
  return word_183B9E9EC[*a1] == word_183B9E9EC[*a2];
}

uint64_t sub_18323C054()
{
  sub_183B92250();
  sub_183B92274();
  return sub_183B9228C();
}

uint64_t sub_18323C0A0()
{
  return sub_183B92274();
}

uint64_t sub_18323C0D4()
{
  sub_183B92250();
  sub_183B92274();
  return sub_183B9228C();
}

Network::NWProtocolWebSocket::CloseCode::Defined_optional sub_18323C11C(Swift::UInt16 *a1)
{
  return NWProtocolWebSocket.CloseCode.Defined.init(rawValue:)(*a1);
}

void sub_18323C124(_WORD *a1@<X8>)
{
  char *v1;

  *a1 = word_183B9E9EC[*v1];
}

uint64_t NWProtocolWebSocket.CloseCode.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  unsigned __int8 v5;

  if ((unsigned __int16)(result - 1000) > 0x7CFu)
  {
    if ((unsigned __int16)(result - 3000) < 0x3E8u)
    {
      v3 = 1;
      goto LABEL_8;
    }
    if ((unsigned __int16)(result - 4000) < 0x3E8u)
    {
      v3 = 2;
      goto LABEL_8;
    }
  }
  else
  {
    NWProtocolWebSocket.CloseCode.Defined.init(rawValue:)(result);
    result = v5;
    if (v5 != 12)
    {
      v3 = 0;
LABEL_8:
      *(_WORD *)a2 = result;
      *(_BYTE *)(a2 + 2) = v3;
      return result;
    }
  }
  sub_18323C200();
  swift_allocError();
  *(_DWORD *)v4 = 22;
  *(_BYTE *)(v4 + 4) = 0;
  return swift_willThrow();
}

unint64_t sub_18323C200()
{
  unint64_t result;

  result = qword_1EDCD7AF0;
  if (!qword_1EDCD7AF0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWError, &type metadata for NWError);
    atomic_store(result, (unint64_t *)&qword_1EDCD7AF0);
  }
  return result;
}

uint64_t sub_18323C24C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 24);
  return result;
}

void sub_18323C290(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_BYTE *)(v3 + 24) = v2;
  nw_ws_options_set_auto_reply_ping(*(nw_protocol_options_t *)(v3 + 16), v2);
}

uint64_t sub_18323C2DC()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

void sub_18323C30C(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 24) = a1;
  nw_ws_options_set_auto_reply_ping(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

void (*sub_18323C354(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_18323C394;
}

void sub_18323C394(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    nw_ws_options_set_auto_reply_ping(*(nw_protocol_options_t *)(*(_QWORD *)(a1 + 24) + 16), *(_BYTE *)(*(_QWORD *)(a1 + 24) + 24));
}

uint64_t sub_18323C3D4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 32);
  return result;
}

void sub_18323C418(size_t *a1, uint64_t *a2)
{
  size_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 32) = v2;
  nw_ws_options_set_maximum_message_size(*(nw_protocol_options_t *)(v3 + 16), v2);
}

uint64_t sub_18323C464()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 32);
}

void sub_18323C494(size_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  nw_ws_options_set_maximum_message_size(*(nw_protocol_options_t *)(v1 + 16), a1);
}

void (*sub_18323C4DC(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_18323C51C;
}

void sub_18323C51C(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    nw_ws_options_set_maximum_message_size(*(nw_protocol_options_t *)(*(_QWORD *)(a1 + 24) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32));
}

uint64_t sub_18323C55C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 40);
  return result;
}

void sub_18323C5A0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_BYTE *)(v3 + 40) = v2;
  nw_ws_options_set_skip_handshake(*(nw_protocol_options_t *)(v3 + 16), v2);
}

uint64_t sub_18323C5EC()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

void sub_18323C61C(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 40) = a1;
  nw_ws_options_set_skip_handshake(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

void (*sub_18323C664(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_18323C6A4;
}

void sub_18323C6A4(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    nw_ws_options_set_skip_handshake(*(nw_protocol_options_t *)(*(_QWORD *)(a1 + 24) + 16), *(_BYTE *)(*(_QWORD *)(a1 + 24) + 40));
}

BOOL sub_18323C6E4(NSObject *a1)
{
  NSObject *v1;
  NSObject *v2;
  _BOOL8 is_equal;

  v1 = nw_protocol_options_copy_definition(a1);
  v2 = nw_protocol_copy_ws_definition();
  is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolWebSocket.Options.__allocating_init(_:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 16) = nw_ws_create_options(nw_ws_version_13);
  return v0;
}

uint64_t NWProtocolWebSocket.Options.init(_:)()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 16) = nw_ws_create_options(nw_ws_version_13);
  return v0;
}

uint64_t sub_18323C7AC(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t sub_18323C7E8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = *(NSObject **)(v1 + 16);
    v4 = swift_bridgeObjectRetain() + 56;
    do
    {
      v5 = (const char *)(sub_183B91758() + 32);
      v6 = sub_183B91758();
      nw_ws_options_add_additional_header(v3, v5, (const char *)(v6 + 32));
      swift_release();
      swift_release();
      v4 += 32;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18323C89C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = *(NSObject **)(v1 + 16);
    v4 = swift_bridgeObjectRetain() + 40;
    do
    {
      v5 = sub_183B91758();
      nw_ws_options_add_subprotocol(v3, (const char *)(v5 + 32));
      swift_release();
      v4 += 16;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_18323C920(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v7 = *(NSObject **)(v3 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v10[4] = sub_18323D970;
  v10[5] = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_18323CF88;
  v10[3] = &block_descriptor;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  nw_ws_options_set_client_request_handler(v7, a1, v9);
  _Block_release(v9);
}

uint64_t sub_18323C9E8(NSObject *a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char isEscapingClosureAtFileLocation;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  nw_ws_response_status_t v18;
  const char *v19;
  NSObject *v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t aBlock;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v4 = MEMORY[0x1E0DEE9D8];
  v32 = MEMORY[0x1E0DEE9D8];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = &v32;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_18323E6EC;
  *(_QWORD *)(v6 + 24) = v5;
  v30 = sub_183064360;
  v31 = v6;
  v7 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v27 = 1107296256;
  v28 = sub_18324C6DC;
  v29 = &block_descriptor_25;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_ws_request_enumerate_subprotocols(a1, v8);
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v8 & 1) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v25 = v4;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = &v25;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_18323E714;
  *(_QWORD *)(v11 + 24) = v10;
  v30 = sub_18323E7E8;
  v31 = v11;
  aBlock = v7;
  v27 = 1107296256;
  v28 = sub_18323CDF4;
  v29 = &block_descriptor_35;
  v12 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_ws_request_enumerate_additional_headers(a1, v12);
  _Block_release(v12);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v14 = v32;
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  v16 = sub_18323CE20(v15);
  swift_bridgeObjectRelease();
  a2(&aBlock, v14, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v29;
  if ((_BYTE)aBlock)
    v18 = nw_ws_response_status_reject;
  else
    v18 = nw_ws_response_status_accept;
  if (v28)
    v19 = (const char *)(sub_183B91758() + 32);
  else
    v19 = 0;
  v20 = nw_ws_response_create(v18, v19);
  swift_unknownObjectRelease();
  if (v17)
  {
    swift_bridgeObjectRelease();
    v21 = v17[2];
    if (v21)
    {
      v22 = (char *)(v17 + 7);
      do
      {
        v23 = (const char *)(sub_183B91758() + 32);
        v24 = sub_183B91758();
        nw_ws_response_add_additional_header(v20, v23, (const char *)(v24 + 32));
        swift_release();
        swift_release();
        v22 += 32;
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (uint64_t)v20;
}

uint64_t sub_18323CD40(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v3 = sub_183B91800();
  v5 = v4;
  v6 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_183242590(0, v6[2] + 1, 1, v6);
    *a2 = v6;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    v6 = sub_183242590((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    *a2 = v6;
  }
  v6[2] = v9 + 1;
  v10 = &v6[2 * v9];
  v10[4] = v3;
  v10[5] = v5;
  return 1;
}

uint64_t sub_18323CDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3) & 1;
}

uint64_t sub_18323CE20(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_183306BA4(0, v1, 0);
    v2 = v13;
    v4 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCBB8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCBC0);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_183306BA4(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v13;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_183306BA4(v5 > 1, v6 + 1, 1);
        v2 = v13;
      }
      v4 += 32;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = (_QWORD *)(v2 + 32 * v6);
      v7[4] = v9;
      v7[5] = v10;
      v7[6] = v11;
      v7[7] = v12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

id sub_18323CF88(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  void *v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v3 = (void *)v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v3;
}

uint64_t NWProtocolWebSocket.Options.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWProtocolWebSocket.Options.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

BOOL sub_18323D01C(NSObject *a1)
{
  return nw_protocol_metadata_is_ws(a1);
}

void NWProtocolWebSocket.Metadata.opcode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

uint64_t NWProtocolWebSocket.Metadata.__allocating_init(opcode:)(char *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  NWProtocolWebSocket.Metadata.init(opcode:)(a1);
  return v2;
}

uint64_t NWProtocolWebSocket.Metadata.init(opcode:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(v1 + 24) = v2;
  *(_WORD *)(v1 + 40) = 4;
  *(_BYTE *)(v1 + 42) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = nw_ws_create_metadata((nw_ws_opcode_t)dword_183B9E9A4[v2]);
  return v1;
}

uint64_t sub_18323D0B8(NSObject *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  v3 = sub_18323E560(a1, v2);
  swift_release();
  return v3;
}

uint64_t sub_18323D104@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 42);
  *(_WORD *)a2 = *(_WORD *)(v3 + 40);
  *(_BYTE *)(a2 + 2) = v5;
  return result;
}

void sub_18323D150(uint64_t a1)
{
  char v1;
  unsigned __int16 v2;
  char v3;

  v1 = *(_BYTE *)(a1 + 2);
  v2 = *(_WORD *)a1;
  v3 = v1;
  sub_18323D1D4(&v2);
}

uint64_t sub_18323D18C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = swift_beginAccess();
  v4 = *(_BYTE *)(v1 + 42);
  *(_WORD *)a1 = *(_WORD *)(v1 + 40);
  *(_BYTE *)(a1 + 2) = v4;
  return result;
}

void sub_18323D1D4(unsigned __int16 *a1)
{
  uint64_t v1;
  nw_ws_close_code_t v2;
  int v3;
  nw_ws_close_code_t v4;

  v2 = *a1;
  v3 = *((unsigned __int8 *)a1 + 2);
  swift_beginAccess();
  *(_WORD *)(v1 + 40) = v2;
  *(_BYTE *)(v1 + 42) = v3;
  if (v3)
    v4 = v2;
  else
    v4 = dword_183B9E9BC[(char)v2];
  nw_ws_metadata_set_close_code(*(nw_protocol_metadata_t *)(v1 + 16), v4);
}

void (*sub_18323D24C(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_18323D28C;
}

void sub_18323D28C(uint64_t a1, char a2)
{
  uint64_t v4;

  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (!*(_BYTE *)(v4 + 42))
      __asm { BR              X10 }
    nw_ws_metadata_set_close_code(*(nw_protocol_metadata_t *)(v4 + 16), (nw_ws_close_code_t)*(unsigned __int16 *)(v4 + 40));
  }
}

void sub_18323D300()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D308()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D310()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D318()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D320()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D328()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D330()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D338()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D340()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D348()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D350()
{
  JUMPOUT(0x18323D2D0);
}

void sub_18323D358(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v7 = *(NSObject **)(v3 + 16);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v10[4] = sub_183083EF8;
  v10[5] = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_183056AB0;
  v10[3] = &block_descriptor_6;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  nw_ws_metadata_set_pong_handler(v7, a1, v9);
  _Block_release(v9);
}

uint64_t sub_18323D420()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;

  if (!*(_QWORD *)(v0 + 32))
    return 0;
  v1 = swift_unknownObjectRetain();
  if (!nw_ws_response_get_selected_subprotocol(v1))
  {
    swift_unknownObjectRelease();
    return 0;
  }
  v2 = sub_183B91800();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_18323D488()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];
  NSObject *v8;

  v1 = *(NSObject **)(v0 + 32);
  if (!v1)
    return (uint64_t)v1;
  v8 = MEMORY[0x1E0DEE9D8];
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = &v8;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_18323E7B0;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_18306433C;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18323CDF4;
  aBlock[3] = &block_descriptor_15;
  v4 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_ws_response_enumerate_additional_headers(v1, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v1 = v8;
    swift_release();
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_18323D5D0(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v4 = sub_183B91800();
  v6 = v5;
  v7 = sub_183B91800();
  v9 = v8;
  v10 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = sub_18324269C(0, v10[2] + 1, 1, v10);
    *a3 = v10;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    v10 = sub_18324269C((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    *a3 = v10;
  }
  v10[2] = v13 + 1;
  v14 = &v10[4 * v13];
  v14[4] = v4;
  v14[5] = v6;
  v14[6] = v7;
  v14[7] = v9;
  return 1;
}

uint64_t sub_18323D6A4()
{
  return swift_unknownObjectRelease();
}

uint64_t NWProtocolWebSocket.Metadata.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWProtocolWebSocket.Metadata.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

BOOL static NWProtocolWebSocket.Response.Status.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWProtocolWebSocket.Response.Status.hash(into:)()
{
  return sub_183B9225C();
}

uint64_t NWProtocolWebSocket.Response.Status.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

BOOL sub_18323D780(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t _s7Network14NWProtocolQUICC7OptionsC9DirectionO9hashValueSivg_0()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t sub_18323D7DC()
{
  return sub_183B9225C();
}

uint64_t sub_18323D804()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

void NWProtocolWebSocket.Response.status.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t NWProtocolWebSocket.Response.subprotocol.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWProtocolWebSocket.Response.additionalHeaders.getter()
{
  return swift_bridgeObjectRetain();
}

_BYTE *NWProtocolWebSocket.Response.init(status:subprotocol:additionalHeaders:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5 = *result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  return result;
}

uint64_t NWProtocolWebSocket.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NWProtocolWebSocket.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL sub_18323D8B4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void sub_18323D8C8(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_DWORD *sub_18323D8D4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

BOOL _s7Network19NWProtocolWebSocketC9CloseCodeO2eeoiySbAE_AEtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  _BOOL4 v6;
  _BOOL4 v8;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 2);
  if (*((_BYTE *)a1 + 2))
  {
    v6 = v4 == 1 && v2 == v3;
    v8 = v4 == 2 && v2 == v3;
    if (*((_BYTE *)a1 + 2) == 1)
      return v6;
    else
      return v8;
  }
  else
  {
    return !*((_BYTE *)a2 + 2) && word_183B9E9EC[(char)v2] == word_183B9E9EC[(char)v3];
  }
}

uint64_t sub_18323D94C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18323D970(NSObject *a1)
{
  uint64_t v1;

  return sub_18323C9E8(a1, *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_18323D978()
{
  return swift_deallocObject();
}

uint64_t sub_18323D988()
{
  return swift_deallocObject();
}

unint64_t sub_18323D99C()
{
  unint64_t result;

  result = qword_1EDCDC7B0;
  if (!qword_1EDCDC7B0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolWebSocket.Version, &type metadata for NWProtocolWebSocket.Version);
    atomic_store(result, (unint64_t *)&qword_1EDCDC7B0);
  }
  return result;
}

unint64_t sub_18323D9E4()
{
  unint64_t result;

  result = qword_1EDCDC7B8;
  if (!qword_1EDCDC7B8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolWebSocket.Opcode, &type metadata for NWProtocolWebSocket.Opcode);
    atomic_store(result, (unint64_t *)&qword_1EDCDC7B8);
  }
  return result;
}

unint64_t sub_18323DA2C()
{
  unint64_t result;

  result = qword_1EDCDC7C0;
  if (!qword_1EDCDC7C0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolWebSocket.CloseCode.Defined, &type metadata for NWProtocolWebSocket.CloseCode.Defined);
    atomic_store(result, (unint64_t *)&qword_1EDCDC7C0);
  }
  return result;
}

unint64_t sub_18323DA74()
{
  unint64_t result;

  result = qword_1EDCDC7C8;
  if (!qword_1EDCDC7C8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolWebSocket.Response.Status, &type metadata for NWProtocolWebSocket.Response.Status);
    atomic_store(result, (unint64_t *)&qword_1EDCDC7C8);
  }
  return result;
}

uint64_t type metadata accessor for NWProtocolWebSocket()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.Version(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.Version(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18323DB6C + 4 * byte_183B9E43C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18323DB8C + 4 * byte_183B9E441[v4]))();
}

_BYTE *sub_18323DB6C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18323DB8C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18323DB94(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18323DB9C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18323DBA4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18323DBAC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_18323DBB8()
{
  return 0;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.Version()
{
  return &type metadata for NWProtocolWebSocket.Version;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.Opcode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.Opcode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_18323DCB8 + 4 * byte_183B9E44B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_18323DCEC + 4 * byte_183B9E446[v4]))();
}

uint64_t sub_18323DCEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18323DCF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18323DCFCLL);
  return result;
}

uint64_t sub_18323DD08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18323DD10);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_18323DD14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18323DD1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.Opcode()
{
  return &type metadata for NWProtocolWebSocket.Opcode;
}

uint64_t __swift_memcpy3_2(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.CloseCode(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE)
  {
    if ((a2 + 33554178) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  if (v4 <= 2)
    v5 = -1;
  else
    v5 = v4 ^ 0xFF;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.CloseCode(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554178) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFD)
    v3 = 0;
  if (a2 > 0xFD)
  {
    *(_WORD *)result = a2 - 254;
    *(_BYTE *)(result + 2) = (a2 - 254) >> 16;
    if (v3)
    {
      v4 = ((a2 - 254) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = -(char)a2;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

uint64_t sub_18323DE4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_18323DE54(uint64_t result, char a2)
{
  *(_BYTE *)(result + 2) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.CloseCode()
{
  return &type metadata for NWProtocolWebSocket.CloseCode;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.CloseCode.Defined(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.CloseCode.Defined(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_18323DF48 + 4 * byte_183B9E455[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_18323DF7C + 4 * byte_183B9E450[v4]))();
}

uint64_t sub_18323DF7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18323DF84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18323DF8CLL);
  return result;
}

uint64_t sub_18323DF98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18323DFA0);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_18323DFA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18323DFAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.CloseCode.Defined()
{
  return &type metadata for NWProtocolWebSocket.CloseCode.Defined;
}

uint64_t type metadata accessor for NWProtocolWebSocket.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolWebSocket.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.autoReplyPing.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.autoReplyPing.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.autoReplyPing.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.maximumMessageSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.maximumMessageSize.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.maximumMessageSize.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.skipHandshake.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.skipHandshake.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.skipHandshake.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.setAdditionalHeaders(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.setSubprotocols(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.setClientRequestHandler(_:handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t type metadata accessor for NWProtocolWebSocket.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolWebSocket.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.__allocating_init(opcode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.closeCode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.closeCode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.closeCode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.setPongHandler(_:handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.selectedSubprotocol.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.additionalServerHeaders.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t initializeBufferWithCopyOfBuffer for NWProtocolWebSocket.Response(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for NWProtocolWebSocket.Response()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWProtocolWebSocket.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NWProtocolWebSocket.Response(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for NWProtocolWebSocket.Response(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.Response(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.Response(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.Response()
{
  return &type metadata for NWProtocolWebSocket.Response;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.Response.Status(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.Response.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18323E404 + 4 * byte_183B9E45F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18323E438 + 4 * byte_183B9E45A[v4]))();
}

uint64_t sub_18323E438(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18323E440(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18323E448);
  return result;
}

uint64_t sub_18323E454(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18323E45CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18323E460(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18323E468(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_18323E474(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.Response.Status()
{
  return &type metadata for NWProtocolWebSocket.Response.Status;
}

void type metadata accessor for nw_report_resolution_protocol_t(uint64_t a1)
{
  sub_183191AE4(a1, &qword_1EDCDCB98);
}

uint64_t __swift_memcpy6_1(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EthernetAddress(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 6))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EthernetAddress(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 6) = v3;
  return result;
}

void type metadata accessor for ether_addr(uint64_t a1)
{
  sub_183191AE4(a1, &qword_1EDCDCBA0);
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for in6_addr(uint64_t a1)
{
  sub_183191AE4(a1, &qword_1EDCDCBA8);
}

void type metadata accessor for in_addr(uint64_t a1)
{
  sub_183191AE4(a1, &qword_1EDCDCBB0);
}

void type metadata accessor for CFURLResponse(uint64_t a1)
{
  sub_183191AE4(a1, qword_1EDCDBA88);
}

uint64_t sub_18323E560(NSObject *a1, uint64_t a2)
{
  nw_ws_opcode_t opcode;
  char v5;
  uint64_t close_code;
  char v7;
  uint64_t result;
  __int16 v9;
  char v10;

  swift_retain();
  if (nw_ws_metadata_get_opcode(a1) == nw_ws_opcode_invalid)
  {
    v5 = 0;
  }
  else
  {
    opcode = nw_ws_metadata_get_opcode(a1);
    if (opcode < 0 || opcode >= 0x100)
      goto LABEL_11;
    if (opcode > nw_ws_opcode_pong || ((0x707u >> opcode) & 1) == 0)
    {
      __break(1u);
      goto LABEL_11;
    }
    v5 = byte_183B9EA04[(char)opcode];
  }
  *(_BYTE *)(a2 + 24) = v5;
  close_code = nw_ws_metadata_get_close_code(a1);
  if (close_code < 0x10000)
  {
    NWProtocolWebSocket.CloseCode.init(rawValue:)(close_code, (uint64_t)&v9);
    v7 = v10;
    *(_WORD *)(a2 + 40) = v9;
    *(_BYTE *)(a2 + 42) = v7;
    *(_QWORD *)(a2 + 32) = nw_ws_metadata_copy_server_response(a1);
    *(_QWORD *)(a2 + 16) = a1;
    return a2;
  }
LABEL_11:
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_18323E6DC()
{
  return swift_deallocObject();
}

uint64_t sub_18323E6EC(uint64_t a1)
{
  uint64_t v1;

  return sub_18323CD40(a1, *(_QWORD ***)(v1 + 16));
}

uint64_t sub_18323E6F4()
{
  return swift_deallocObject();
}

uint64_t sub_18323E704()
{
  return swift_deallocObject();
}

uint64_t sub_18323E714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18323D5D0(a1, a2, *(_QWORD ***)(v2 + 16)) & 1;
}

uint64_t sub_18323E730()
{
  return swift_deallocObject();
}

void type metadata accessor for nw_interface_type_t(uint64_t a1)
{
  sub_183191AE4(a1, &qword_1EDCDCBC8);
}

uint64_t sub_18323E754(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_18323E774(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for in6_addr.__Unnamed_union___u6_addr(uint64_t a1)
{
  sub_183191AE4(a1, (unint64_t *)&unk_1EDCDCBD0);
}

uint64_t BrowseResult.Change.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v18 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      v14 = &v10[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      v15 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
      v15(v8, v10, v1);
      v15(v5, v14, v1);
      v18 = 0;
      v19 = 0xE000000000000000;
      sub_183B91DB8();
      sub_183B917F4();
      sub_183B920DC();
      sub_183B917F4();
      sub_183B920DC();
      sub_183B917F4();
      v13 = v18;
      v16 = *(void (**)(char *, uint64_t))(v2 + 8);
      v16(v5, v1);
      v16(v8, v1);
      return v13;
    }
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v10, v1);
    v18 = 0;
    v19 = 0xE000000000000000;
    sub_183B917F4();
    sub_183B920DC();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v10, v1);
    v18 = 0;
    v19 = 0xE000000000000000;
    sub_183B917F4();
    sub_183B920DC();
    sub_183B917F4();
  }
  v13 = v18;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  return v13;
}

uint64_t BrowseResult.endpoints.getter()
{
  sub_18324375C();
  return swift_bridgeObjectRetain();
}

uint64_t BrowseResult.changes.getter()
{
  sub_183243764();
  return swift_bridgeObjectRetain();
}

uint64_t BrowseResult.init(endpoints:changes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t BrowseResult.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;

  v5 = type metadata accessor for BrowseResult.Change(0, *(_QWORD *)(a1 + 16), a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v24 - v8;
  v10 = *(_QWORD *)(v4 + 8);
  v11 = swift_bridgeObjectRetain();
  if (!MEMORY[0x186DB1EBC](v11, v5))
  {
    swift_bridgeObjectRelease();
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_16:
    v27 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC378);
    sub_183243778();
    v23 = sub_183B9168C();
    swift_bridgeObjectRelease();
    return v23;
  }
  v25 = v7;
  v12 = 0;
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v26 = v9;
  while (1)
  {
    v14 = sub_183B9198C();
    sub_183B91950();
    if ((v14 & 1) == 0)
      break;
    result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v12, v5);
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_17;
LABEL_5:
    v17 = BrowseResult.Change.description.getter(v5);
    v19 = v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_183242590(0, v13[2] + 1, 1, v13);
    v21 = v13[2];
    v20 = v13[3];
    if (v21 >= v20 >> 1)
      v13 = sub_183242590((_QWORD *)(v20 > 1), v21 + 1, 1, v13);
    v13[2] = v21 + 1;
    v22 = &v13[2 * v21];
    v22[4] = v17;
    v22[5] = v19;
    v9 = v26;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v26, v5);
    ++v12;
    if (v16 == MEMORY[0x186DB1EBC](v10, v5))
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  result = sub_183B91DF4();
  if (v25 != 8)
    goto LABEL_18;
  v27 = (_QWORD *)result;
  (*(void (**)(char *, _QWORD **, uint64_t))(v6 + 16))(v9, &v27, v5);
  result = swift_unknownObjectRelease();
  v16 = v12 + 1;
  if (!__OFADD__(v12, 1))
    goto LABEL_5;
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t BrowseResult.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t BrowseResult.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *v2;
  v4 = v2[1];
  v6 = *(_QWORD *)(a1 + 16);
  if (v4 == MEMORY[0x186DB1EBC](*v2, v6))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 1, 1, v6);
  v8 = sub_183B9198C();
  sub_183B91950();
  if ((v8 & 1) != 0)
  {
    v9 = *(_QWORD *)(v6 - 8);
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(a2, v5+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v4, v6);
    v10 = v4 + 1;
    if (!__OFADD__(v4, 1))
    {
LABEL_5:
      v2[1] = v10;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v6);
    }
    goto LABEL_9;
  }
  result = sub_183B91DF4();
  v9 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v9 + 64) == 8)
  {
    v11 = result;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v9 + 16))(a2, &v11, v6);
    result = swift_unknownObjectRelease();
    v10 = v4 + 1;
    if (!__OFADD__(v4, 1))
      goto LABEL_5;
LABEL_9:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BrowseResult.startIndex.getter()
{
  return 0;
}

void BrowseResult.endIndex.getter()
{
  JUMPOUT(0x186DB1EBCLL);
}

Swift::Int __swiftcall BrowseResult.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t BrowseResult.subscript.getter()
{
  return sub_183B919C8();
}

uint64_t sub_18323EE90@<X0>(_QWORD *a1@<X8>)
{
  BrowseResult.makeIterator()(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18323EEB8(uint64_t a1)
{
  MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>, a1);
  return sub_183B91C08();
}

uint64_t sub_18323EEEC()
{
  return 2;
}

uint64_t sub_18323EEF4(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>, a1);
  v1 = sub_183243A78();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_18323EF54()
{
  return sub_183B918CC();
}

void sub_18323EF74(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_18323EF7C()
{
  BrowseResult.endIndex.getter();
}

uint64_t sub_18323EF90(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_18323EFA0(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_18323F028(v6, *a2, a3);
  return sub_18323EFFC;
}

void sub_18323EFFC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_18323F028(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  sub_183B919C8();
  return sub_18323F094;
}

void sub_18323F094(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_18323F0C8(uint64_t a1)
{
  MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>, a1);
  return sub_183B91BE4();
}

void sub_18323F11C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_18323F12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832438CC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_18323F150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832438CC(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

_QWORD *sub_18323F178@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_18323F190(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

uint64_t sub_18323F1A8()
{
  return sub_183B91BD8();
}

uint64_t sub_18323F1B8()
{
  return sub_183B91BF0();
}

uint64_t sub_18323F1C4()
{
  sub_18324375C();
  return swift_bridgeObjectRetain();
}

uint64_t sub_18323F1D8()
{
  sub_183243764();
  return swift_bridgeObjectRetain();
}

uint64_t sub_18323F1F0()
{
  MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>);
  return sub_183B91BCC();
}

uint64_t sub_18323F240(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>);
  result = sub_183B91BCC();
  *a1 = v3;
  return result;
}

uint64_t sub_18323F2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>, a3);
  return sub_183B91BD8();
}

uint64_t sub_18323F304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>, a4);
  return sub_183B91BC0();
}

uint64_t sub_18323F368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>, a3);
  return sub_183B91BF0();
}

uint64_t _s7Network8Browser1C8provider5usingACyxGx_AA12NWParametersCtcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 80) - 8) + 32))(v4 + *(_QWORD *)(*(_QWORD *)v4 + 96), a1);
  *(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 104)) = a2;
  return v4;
}

uint64_t _s7Network8Browser1C8provider5usingACyxGx_AA12NWParametersCtcfc_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96), a1);
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 104)) = a2;
  return v2;
}

uint64_t Browser1.__allocating_init<>(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;

  v4 = v3;
  swift_allocObject();
  v8 = sub_183243C04(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 8))(a1);
  return v8;
}

uint64_t Browser1.init<>(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *v3;
  v6 = sub_183243C04(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 8))(a1);
  return v6;
}

uint64_t Browser1.makeAsyncIterator()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v14[16];
  _QWORD *v15;
  uint64_t v16;

  v1 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255, AssociatedTypeWitness, v3, v4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v5 = sub_183B91B30();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v14[-v7];
  v9 = sub_183B91B84();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v14[-v11];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DF0A50], v5);
  v15 = v0;
  v16 = v1;
  sub_183B91B90();
  sub_183B91A88();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_18323F6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD v25[2];
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  v32 = a3;
  v33 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255, AssociatedTypeWitness, v7, v8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v9 = sub_183B91B54();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v10;
  MEMORY[0x1E0C80A78](v9);
  v28 = (char *)v25 - v11;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 16))(&v34, v4, v5);
  v31 = a2;
  v12 = *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 104));
  type metadata accessor for NWBrowser();
  swift_allocObject();
  swift_retain();
  v13 = NWBrowser.init(for:using:)((uint64_t)&v34, v12);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v4;
  v14[3] = v5;
  v27 = v4;
  v14[4] = v13;
  swift_retain();
  v15 = v33;
  sub_183B91B24();
  v17 = v28;
  v16 = v29;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v26(v28, v15, v9);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = v30;
  v25[1] = v18 | 7;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v4;
  *(_QWORD *)(v20 + 24) = v5;
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
  v21(v20 + ((v18 + 32) & ~v18), v17, v9);
  sub_183061488((uint64_t)sub_1832465C8);
  NWBrowser.stateUpdateHandler.setter((uint64_t)sub_1832465C8, v20);
  swift_release();
  v26(v17, v33, v9);
  v22 = (v18 + 40) & ~v18;
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v27;
  v23[3] = v5;
  v23[4] = v31;
  v21((uint64_t)v23 + v22, v17, v9);
  *(_QWORD *)((char *)v23 + ((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8)) = v32;
  swift_retain();
  sub_183061488((uint64_t)sub_183246734);
  NWBrowser.browseResultsChangedHandler.setter((uint64_t)sub_183246734, (uint64_t)v23);
  swift_release();
  sub_1832467E0();
  v24 = (void *)sub_183B91CA4();
  NWBrowser.start(queue:)(v24);
  swift_release();

}

void sub_18323F984(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;

  if (nw_utilities_minos_atleast())
  {
    v3 = *(os_unfair_lock_s **)(a2 + 24);
    v4 = (uint64_t *)&v3[4];
    v5 = v3 + 20;
    os_unfair_lock_lock(v3 + 20);
    sub_18324FC2C(v4);
    os_unfair_lock_unlock(v5);
  }
  nw_browser_cancel(*(nw_browser_t *)(a2 + 16));
}

unsigned int *sub_18323F9EC(unsigned int *result)
{
  uint64_t v1;
  int64_t v2;
  int v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  v1 = *((char *)result + 4);
  v2 = *result | (unint64_t)(v1 << 32);
  v3 = v1 >> 6;
  if (!v3)
  {
    sub_18323C200();
    swift_allocError();
    *(_DWORD *)v4 = v2;
    *(_BYTE *)(v4 + 4) = BYTE4(v2);
LABEL_6:
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for BrowseResult(255, AssociatedTypeWitness, v6, v7);
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
    sub_183B91B54();
    return (unsigned int *)sub_183B91B48();
  }
  if (v3 != 1 && v2 >= (uint64_t)0xFFFFFF8000000002)
    goto LABEL_6;
  return result;
}

uint64_t sub_18323FAE8(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t i;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v91 = a4;
  v112 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 88);
  v123 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  v124 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for BrowseResult.Change(0, AssociatedTypeWitness, v8, v9);
  MEMORY[0x1E0C80A78](v10);
  v97 = (char *)&v85 - v11;
  v14 = type metadata accessor for BrowseResult(255, AssociatedTypeWitness, v12, v13);
  v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v90 = v14;
  v89 = v15;
  v87 = sub_183B91B18();
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v85 = (char *)&v85 - v16;
  v107 = type metadata accessor for NWBrowser.Result.Change(0);
  v106 = *(_QWORD *)(v107 - 8);
  v17 = MEMORY[0x1E0C80A78](v107);
  v102 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v105 = (uint64_t)&v85 - v19;
  v20 = sub_183B91CF8();
  v114 = *(_QWORD *)(v20 - 8);
  v115 = v20;
  v21 = MEMORY[0x1E0C80A78](v20);
  v94 = (char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v95 = (char *)&v85 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v113 = (char *)&v85 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v104 = (char *)&v85 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v85 - v30;
  v121 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = MEMORY[0x1E0C80A78](v29);
  v88 = (char *)&v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v96 = (char *)&v85 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v93 = (char *)&v85 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v92 = (char *)&v85 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v111 = (char *)&v85 - v41;
  MEMORY[0x1E0C80A78](v40);
  v110 = (char *)&v85 - v42;
  v43 = type metadata accessor for NWBrowser.Result(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = MEMORY[0x1E0C80A78](v43);
  v103 = (char *)&v85 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x1E0C80A78](v45);
  v99 = (char *)&v85 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v101 = (char *)&v85 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v100 = (char *)&v85 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v55 = (char *)&v85 - v54;
  MEMORY[0x1E0C80A78](v53);
  v118 = (uint64_t)&v85 - v56;
  v120 = AssociatedTypeWitness;
  v128 = sub_183B91974();
  v98 = v10;
  v127 = sub_183B91974();
  v57 = *(_QWORD *)(a1 + 56);
  v116 = a1 + 56;
  v58 = 1 << *(_BYTE *)(a1 + 32);
  v59 = -1;
  if (v58 < 64)
    v59 = ~(-1 << v58);
  v60 = v59 & v57;
  v122 = a3 + *(_QWORD *)(*(_QWORD *)a3 + 96);
  v117 = (unint64_t)(v58 + 63) >> 6;
  v119 = a1;
  swift_bridgeObjectRetain();
  v61 = 0;
  v109 = v44;
  v108 = v55;
  v62 = v120;
  v63 = v121;
  if (v60)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v61++, 1))
  {
    __break(1u);
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v61 < v117)
  {
    v69 = *(_QWORD *)(v116 + 8 * v61);
    if (v69)
    {
LABEL_17:
      v60 = (v69 - 1) & v69;
      for (i = __clz(__rbit64(v69)) + (v61 << 6); ; i = v66 | (v61 << 6))
      {
        v71 = v118;
        sub_183058C44(*(_QWORD *)(v119 + 48) + *(_QWORD *)(v44 + 72) * i, v118, type metadata accessor for NWBrowser.Result);
        sub_183058EC4(v71, (uint64_t)v55, type metadata accessor for NWBrowser.Result);
        (*(void (**)(char *, uint64_t))(v124 + 24))(v55, v123);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v31, 1, v62) == 1)
        {
          sub_183058AE0((uint64_t)v55, type metadata accessor for NWBrowser.Result);
          (*(void (**)(char *, uint64_t))(v114 + 8))(v31, v115);
          if (!v60)
            goto LABEL_7;
        }
        else
        {
          v64 = v110;
          (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v110, v31, v62);
          (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v111, v64, v62);
          sub_183B919BC();
          sub_183B919A4();
          v65 = v64;
          v44 = v109;
          v55 = v108;
          (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v62);
          sub_183058AE0((uint64_t)v55, type metadata accessor for NWBrowser.Result);
          if (!v60)
            goto LABEL_7;
        }
LABEL_6:
        v66 = __clz(__rbit64(v60));
        v60 &= v60 - 1;
      }
    }
    v70 = v61 + 1;
    if (v61 + 1 < v117)
    {
      v69 = *(_QWORD *)(v116 + 8 * v70);
      if (v69)
        goto LABEL_16;
      v70 = v61 + 2;
      if (v61 + 2 < v117)
      {
        v69 = *(_QWORD *)(v116 + 8 * v70);
        if (!v69)
        {
          v70 = v61 + 3;
          if (v61 + 3 < v117)
          {
            v69 = *(_QWORD *)(v116 + 8 * v70);
            if (v69)
              goto LABEL_16;
            while (1)
            {
              v61 = v70 + 1;
              if (__OFADD__(v70, 1))
                goto LABEL_48;
              if (v61 >= v117)
                goto LABEL_26;
              v69 = *(_QWORD *)(v116 + 8 * v61);
              ++v70;
              if (v69)
                goto LABEL_17;
            }
          }
          goto LABEL_26;
        }
LABEL_16:
        v61 = v70;
        goto LABEL_17;
      }
    }
LABEL_26:
    v72 = v112;
    goto LABEL_27;
  }
  v72 = v112;
LABEL_27:
  v73 = (uint64_t)v102;
  swift_release();
  v74 = 1 << *(_BYTE *)(v72 + 32);
  v75 = -1;
  if (v74 < 64)
    v75 = ~(-1 << v74);
  v76 = v75 & *(_QWORD *)(v72 + 56);
  v119 = (unint64_t)(v74 + 63) >> 6;
  swift_bridgeObjectRetain();
  v118 = v72 + 56;
  if (v76)
  {
    v77 = __clz(__rbit64(v76));
    goto LABEL_41;
  }
  v78 = 1;
  if (v119 > 1)
  {
    v79 = *(_QWORD *)(v72 + 64);
    if (v79)
    {
LABEL_40:
      v77 = __clz(__rbit64(v79)) + (v78 << 6);
LABEL_41:
      v81 = v105;
      sub_183058C44(*(_QWORD *)(v112 + 48) + *(_QWORD *)(v106 + 72) * v77, v105, type metadata accessor for NWBrowser.Result.Change);
      sub_183058EC4(v81, v73, type metadata accessor for NWBrowser.Result.Change);
      v82 = (char *)&loc_183240388 + *((int *)qword_183240920 + swift_getEnumCaseMultiPayload());
      __asm { BR              X9 }
    }
    v80 = 2;
    if (v119 > 2)
    {
      v79 = *(_QWORD *)(v72 + 72);
      if (v79)
        goto LABEL_39;
      v80 = 3;
      if (v119 <= 3)
        goto LABEL_46;
      v79 = *(_QWORD *)(v72 + 80);
      if (v79)
      {
LABEL_39:
        v78 = v80;
        goto LABEL_40;
      }
      v80 = 4;
      if (v119 > 4)
      {
        v79 = *(_QWORD *)(v72 + 88);
        if (!v79)
        {
          while (1)
          {
            v78 = v80 + 1;
            if (__OFADD__(v80, 1))
              break;
            if (v78 >= v119)
              goto LABEL_46;
            v79 = *(_QWORD *)(v72 + 56 + 8 * v78);
            ++v80;
            if (v79)
              goto LABEL_40;
          }
LABEL_49:
          __break(1u);
          JUMPOUT(0x183240920);
        }
        goto LABEL_39;
      }
    }
  }
LABEL_46:
  swift_release();
  v125 = v128;
  v126 = v127;
  sub_183B91B54();
  v83 = v85;
  sub_183B91B3C();
  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v83, v87);
}

uint64_t Browser1.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return v0;
}

uint64_t Browser1.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1832409BC()
{
  Browser1.makeAsyncIterator()();
  return swift_release();
}

uint64_t AsyncSequence<>.firstFoundEndpoint(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;

  v7[6] = a5;
  v7[7] = v6;
  v7[4] = a3;
  v7[5] = a4;
  v7[2] = a1;
  v7[3] = a2;
  v7[8] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 8) + 8) + 8);
  swift_getAssociatedTypeWitness();
  v7[9] = swift_getAssociatedTypeWitness();
  sub_183B91CF8();
  v7[10] = swift_task_alloc();
  v9 = swift_checkMetadataState();
  v7[11] = v9;
  v7[12] = *(_QWORD *)(v9 - 8);
  v7[13] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[14] = AssociatedTypeWitness;
  v7[15] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[16] = swift_task_alloc();
  v11 = swift_getAssociatedTypeWitness();
  v7[17] = v11;
  v7[18] = *(_QWORD *)(v11 - 8);
  v7[19] = swift_task_alloc();
  v7[20] = swift_task_alloc();
  sub_183B91CF8();
  v7[21] = swift_task_alloc();
  v7[22] = *(_QWORD *)(a4 - 8);
  v7[23] = swift_task_alloc();
  v12 = swift_getAssociatedTypeWitness();
  v7[24] = v12;
  v7[25] = *(_QWORD *)(v12 - 8);
  v7[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_183240BFC()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[22] + 16))(v0[23], v0[7], v0[5]);
  sub_183B91AF4();
  v0[27] = swift_getAssociatedConformanceWitness();
  v1 = (_QWORD *)swift_task_alloc();
  v0[28] = v1;
  *v1 = v0;
  v1[1] = sub_183240CC0;
  return sub_183B91A10();
}

uint64_t sub_183240CC0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_183240D24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0[21];
  v2 = v0[11];
  v3 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v0[13], v1, v2);
    sub_183B91890();
    while (1)
    {
      v6 = v0[10];
      v7 = v0[9];
      swift_getAssociatedConformanceWitness();
      sub_183B91D10();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
        v0[27] = swift_getAssociatedConformanceWitness();
        v11 = (_QWORD *)swift_task_alloc();
        v0[28] = v11;
        *v11 = v0;
        v11[1] = sub_183240CC0;
        return sub_183B91A10();
      }
      v9 = (uint64_t (*)(uint64_t))v0[3];
      v10 = v0[2];
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v8 + 32))(v10, v0[10], v0[9]);
      if ((v9(v10) & 1) != 0)
        break;
      (*(void (**)(_QWORD, _QWORD))(v8 + 8))(v0[2], v0[9]);
    }
    v14 = v0[25];
    v13 = v0[26];
    v15 = v0[24];
    (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  v4 = v0[29];
  (*(void (**)(_QWORD, _QWORD))(v0[25] + 8))(v0[26], v0[24]);
  sub_183B91AE8();
  if (v4)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  return sub_183B91F5C();
}

uint64_t sub_183241058()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 32);
  v1(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  swift_getAssociatedConformanceWitness();
  v2 = sub_183B920D0();
  v3 = *(_QWORD *)(v0 + 152);
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 136);
    swift_allocError();
    v1(v5, v3, v4);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncSequence<>.mapEndpoints<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  v15[6] = a1;
  v15[7] = a2;
  type metadata accessor for BrowseResult(0, a4, v16, v17);
  swift_retain();
  sub_183B91B00();
  return swift_release();
}

uint64_t sub_18324129C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8[9] = a6;
  v8[10] = a8;
  v8[7] = a3;
  v8[8] = a4;
  v8[5] = a1;
  v8[6] = a2;
  v8[11] = type metadata accessor for BrowseResult.Change(0, a6, a3, a4);
  v8[12] = swift_task_alloc();
  v8[13] = swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for BrowseResult.Change(0, AssociatedTypeWitness, v11, v12);
  v8[14] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[15] = v14;
  v8[16] = *(_QWORD *)(v14 + 64);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  v8[19] = swift_task_alloc();
  v8[20] = *(_QWORD *)(a6 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  v15 = swift_checkMetadataState();
  v8[23] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[24] = v16;
  v8[25] = *(_QWORD *)(v16 + 64);
  v8[26] = swift_task_alloc();
  v8[27] = swift_task_alloc();
  v8[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_183241438()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v1 = v0[23];
  v2 = v0[10];
  v82 = sub_183B91974();
  v83 = sub_183B91974();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24);
  v72 = swift_checkMetadataState();
  v4 = v3(v72, v2);
  if (MEMORY[0x186DB1EBC](v4, v1))
  {
    v5 = 0;
    v70 = v0 + 2;
    v71 = v0[25];
    v80 = v0[24];
    v74 = v0[20];
    do
    {
      v6 = sub_183B9198C();
      sub_183B91950();
      if ((v6 & 1) != 0)
      {
        v7 = v0;
        (*(void (**)(_QWORD, unint64_t, _QWORD))(v80 + 16))(v0[28], v4+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(_QWORD *)(v80 + 72) * v5, v0[23]);
        v8 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_10;
      }
      else
      {
        result = sub_183B91DF4();
        if (v71 != 8)
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        v18 = result;
        v19 = v0[28];
        v20 = v0[23];
        v7 = v0;
        v0[2] = v18;
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(v80 + 16))(v19, v70, v20);
        swift_unknownObjectRelease();
        v8 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_10:
          __break(1u);
          break;
        }
      }
      v0 = v7;
      v10 = v7[27];
      v9 = v7[28];
      v12 = v7[22];
      v11 = v7[23];
      v13 = v7[21];
      v14 = v7[9];
      v15 = v4;
      v16 = (void (*)(uint64_t))v0[7];
      v77 = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v10, v9, v11);
      v16(v10);
      v4 = v15;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v13, v12, v14);
      sub_183B919BC();
      sub_183B919A4();
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v12, v14);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v10, v11);
      ++v5;
    }
    while (v77 != MEMORY[0x186DB1EBC](v15, v11));
  }
  swift_bridgeObjectRelease();
  v21 = v0[14];
  v78 = *(uint64_t (**)(uint64_t))(v0[10] + 32);
  v22 = v78(v72);
  if (!MEMORY[0x186DB1EBC](v22, v21))
    goto LABEL_21;
  v23 = 0;
  v24 = v0[15];
  v75 = v0[16];
  while (1)
  {
    v25 = sub_183B9198C();
    sub_183B91950();
    if ((v25 & 1) != 0)
    {
      v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16);
      v26(v0[19], v22+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v23, v0[14]);
      v27 = v23 + 1;
      if (__OFADD__(v23, 1))
        break;
      goto LABEL_15;
    }
    result = sub_183B91DF4();
    if (v75 != 8)
      goto LABEL_35;
    v32 = result;
    v33 = v0[19];
    v34 = v0[14];
    v0[3] = v32;
    v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16);
    v26(v33, (unint64_t)(v0 + 3), v34);
    swift_unknownObjectRelease();
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
LABEL_15:
    v28 = v0[19];
    v29 = v0[14];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCF30);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_183B9EA20;
    *(_QWORD *)(v30 + 56) = v29;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v30 + 32));
    v26((uint64_t)boxed_opaque_existential_0, v28, v29);
    sub_183B92238();
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v24 + 8))(v28, v29);
    ++v23;
    if (v27 == MEMORY[0x186DB1EBC](v22, v29))
      goto LABEL_21;
  }
  __break(1u);
LABEL_21:
  v35 = v0[14];
  v36 = v0[10];
  swift_bridgeObjectRelease();
  v37 = ((uint64_t (*)(uint64_t, uint64_t))v78)(v72, v36);
  if (!MEMORY[0x186DB1EBC](v37, v35))
    goto LABEL_33;
  v38 = 0;
  v81 = v0[24];
  v39 = v0[15];
  v64 = v0[16];
  v73 = v39;
  v76 = v0[20];
  v65 = v37;
  while (2)
  {
    v47 = sub_183B9198C();
    sub_183B91950();
    if ((v47 & 1) != 0)
    {
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v39 + 16))(v0[18], v37+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v38, v0[14]);
      v48 = v38 + 1;
      if (__OFADD__(v38, 1))
        break;
      goto LABEL_26;
    }
    result = sub_183B91DF4();
    if (v64 != 8)
      goto LABEL_36;
    v60 = result;
    v61 = v0[18];
    v62 = v0[14];
    v0[4] = v60;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v39 + 16))(v61, v0 + 4, v62);
    swift_unknownObjectRelease();
    v48 = v38 + 1;
    if (!__OFADD__(v38, 1))
    {
LABEL_26:
      v79 = v48;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v39 + 32))(v0[17], v0[18], v0[14]);
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        v49 = v0[27];
        v50 = v0[23];
        v66 = v0[26];
        v67 = v0[22];
        v51 = v0[17];
        v68 = v0[21];
        v69 = v0[12];
        v52 = v0[9];
        v53 = (void (*)(uint64_t))v0[7];
        v54 = v51 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
        v55(v49, v51, v50);
        v55(v66, v54, v50);
        v53(v49);
        v53(v66);
        v56 = v69 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16);
        v57(v69, v67, v52);
        v57(v56, v68, v52);
        swift_storeEnumTagMultiPayload();
        sub_183B919BC();
        sub_183B919A4();
        v58 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
        v58(v68, v52);
        v59 = v52;
        v37 = v65;
        v58(v67, v59);
        v45 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
        v45(v66, v50);
      }
      else
      {
        v40 = v0[27];
        v41 = v0[22];
        v42 = v0[12];
        v43 = v0[9];
        v44 = (void (*)(uint64_t))v0[7];
        (*(void (**)(uint64_t, _QWORD, _QWORD))(v81 + 32))(v40, v0[17], v0[23]);
        v44(v40);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v42, v41, v43);
        swift_storeEnumTagMultiPayload();
        sub_183B919BC();
        sub_183B919A4();
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v41, v43);
        v45 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
      }
      v46 = v0[14];
      v45(v0[27], v0[23]);
      ++v38;
      v39 = v73;
      if (v79 == MEMORY[0x186DB1EBC](v37, v46))
        goto LABEL_33;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_33:
  v63 = (uint64_t *)v0[5];
  swift_bridgeObjectRelease();
  *v63 = v82;
  v63[1] = v83;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t AsyncSequence<>.filterEndpoints(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a1;
  v13[6] = a2;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(0, AssociatedTypeWitness, v15, v16);
  swift_retain();
  sub_183B91B00();
  return swift_release();
}

uint64_t sub_183241D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7[7] = a4;
  v7[8] = a7;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v7[9] = swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for BrowseResult.Change(0, AssociatedTypeWitness, v9, v10);
  v7[10] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[11] = v12;
  v7[12] = *(_QWORD *)(v12 + 64);
  v7[13] = swift_task_alloc();
  v7[14] = swift_task_alloc();
  v7[15] = swift_task_alloc();
  v13 = swift_checkMetadataState();
  v7[16] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[17] = v14;
  v7[18] = *(_QWORD *)(v14 + 64);
  v7[19] = swift_task_alloc();
  v7[20] = swift_task_alloc();
  v7[21] = swift_task_alloc();
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_183241ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(uint64_t, unint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t TupleTypeMetadata2;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 64);
  v60 = sub_183B91974();
  v61 = sub_183B91974();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24);
  v4 = swift_checkMetadataState();
  v5 = v3(v4, v2);
  if (MEMORY[0x186DB1EBC](v5, v1))
  {
    v6 = 0;
    v7 = *(_QWORD *)(v0 + 136);
    v58 = *(_QWORD *)(v0 + 144);
    do
    {
      v9 = sub_183B9198C();
      sub_183B91950();
      if ((v9 & 1) != 0)
      {
        v10 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
        v10(*(_QWORD *)(v0 + 200), v5+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v6, *(_QWORD *)(v0 + 128));
        v11 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_11;
      }
      else
      {
        result = sub_183B91DF4();
        if (v58 != 8)
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
        v15 = result;
        v16 = *(_QWORD *)(v0 + 200);
        v17 = *(_QWORD *)(v0 + 128);
        *(_QWORD *)(v0 + 16) = v15;
        v10 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
        v10(v16, v0 + 16, v17);
        swift_unknownObjectRelease();
        v11 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
LABEL_11:
          __break(1u);
          break;
        }
      }
      v12 = *(_QWORD *)(v0 + 192);
      v13 = *(uint64_t (**)(uint64_t))(v0 + 48);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v7 + 32))(v12, *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 128));
      if ((v13(v12) & 1) != 0)
      {
        v10(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 128));
        sub_183B919BC();
        sub_183B919A4();
      }
      v8 = *(_QWORD *)(v0 + 128);
      (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v0 + 192), v8);
      ++v6;
    }
    while (v11 != MEMORY[0x186DB1EBC](v5, v8));
  }
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v0 + 80);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 64) + 32))(v4);
  if (!MEMORY[0x186DB1EBC](v19, v18))
    goto LABEL_32;
  v20 = 0;
  v21 = *(_QWORD **)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 88);
  v54 = *(_QWORD *)(v0 + 96);
  v55 = v22;
  v56 = v19;
  while (1)
  {
    v24 = sub_183B9198C();
    sub_183B91950();
    if ((v24 & 1) == 0)
      break;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v22 + 16))(*(_QWORD *)(v0 + 120), v19+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v20, *(_QWORD *)(v0 + 80));
    v23 = v20 + 1;
    if (__OFADD__(v20, 1))
      goto LABEL_31;
LABEL_19:
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v22 + 32))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 80));
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      v32 = *(_QWORD *)(v0 + 176);
      v33 = *(uint64_t (**)(uint64_t))(v0 + 48);
      ((void (*)(uint64_t, _QWORD, _QWORD))v21[4])(v32, *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 128));
      v34 = v33(v32);
      v29 = *(_QWORD *)(v0 + 176);
      v30 = *(_QWORD *)(v0 + 128);
      if ((v34 & 1) == 0)
        goto LABEL_15;
      v31 = v23;
      ((void (*)(_QWORD, _QWORD, _QWORD))v21[2])(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 128));
      goto LABEL_14;
    }
    if (EnumCaseMultiPayload != 1)
    {
      v59 = v23;
      v36 = *(_QWORD *)(v0 + 152);
      v35 = *(_QWORD *)(v0 + 160);
      v37 = *(_QWORD *)(v0 + 128);
      v38 = *(_QWORD *)(v0 + 112);
      v57 = *(uint64_t (**)(uint64_t))(v0 + 48);
      v39 = v21;
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v41 = v38 + *(int *)(TupleTypeMetadata2 + 48);
      v42 = (void (*)(uint64_t, uint64_t, uint64_t))v39[4];
      v42(v35, v38, v37);
      v42(v36, v41, v37);
      v43 = v57(v36);
      v45 = *(_QWORD *)(v0 + 152);
      v44 = *(_QWORD *)(v0 + 160);
      v46 = *(_QWORD *)(v0 + 128);
      if ((v43 & 1) != 0)
      {
        v47 = *(_QWORD *)(v0 + 104) + *(int *)(TupleTypeMetadata2 + 48);
        v48 = (void (*)(uint64_t, uint64_t, uint64_t))v39[2];
        v48(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 128));
        v48(v47, v45, v46);
        swift_storeEnumTagMultiPayload();
        sub_183B919BC();
        sub_183B919A4();
      }
      v49 = (void (*)(uint64_t, uint64_t))v39[1];
      v49(v45, v46);
      v49(v44, v46);
      v21 = v39;
      v22 = v55;
      v19 = v56;
      v23 = v59;
      goto LABEL_16;
    }
    v26 = *(_QWORD *)(v0 + 168);
    v27 = *(uint64_t (**)(uint64_t))(v0 + 48);
    ((void (*)(uint64_t, _QWORD, _QWORD))v21[4])(v26, *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 128));
    v28 = v27(v26);
    v29 = *(_QWORD *)(v0 + 168);
    v30 = *(_QWORD *)(v0 + 128);
    if ((v28 & 1) != 0)
    {
      v31 = v23;
      ((void (*)(_QWORD, _QWORD, _QWORD))v21[2])(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 128));
LABEL_14:
      swift_storeEnumTagMultiPayload();
      sub_183B919BC();
      v23 = v31;
      sub_183B919A4();
    }
LABEL_15:
    ((void (*)(uint64_t, uint64_t))v21[1])(v29, v30);
LABEL_16:
    ++v20;
    if (v23 == MEMORY[0x186DB1EBC](v19, *(_QWORD *)(v0 + 80)))
      goto LABEL_32;
  }
  result = sub_183B91DF4();
  if (v54 != 8)
    goto LABEL_34;
  v50 = result;
  v51 = *(_QWORD *)(v0 + 120);
  v52 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 24) = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v51, v0 + 24, v52);
  swift_unknownObjectRelease();
  v23 = v20 + 1;
  if (!__OFADD__(v20, 1))
    goto LABEL_19;
LABEL_31:
  __break(1u);
LABEL_32:
  v53 = *(uint64_t **)(v0 + 32);
  swift_bridgeObjectRelease();
  *v53 = v60;
  v53[1] = v61;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_183242484(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC360);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1832437C4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_183242590(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC398);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_18324366C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_18324269C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_183243434(a1, a2, a3, a4, &qword_1EDCDCF38, &qword_1EDCDCBB8);
}

_QWORD *sub_1832426B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCF20);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1832459E8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1832427D4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCF00);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_183245AF4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1832428E0(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_183242900(a1, a2, a3, a4, &qword_1EDCDC1A0);
}

uint64_t sub_1832428EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_183242F88(a1, a2, a3, a4, &qword_1EDCDCF10, &qword_1EDCDCF18);
}

char *sub_183242900(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32])
          memmove(v13, a4 + 32, v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1832461B4(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1832429F4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_183242C24(a1, a2, a3, a4, (void (*)(void))sub_1832A393C);
}

_QWORD *sub_183242A00(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCEF8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_183245CF0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_183242B0C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCEF0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_183245DE0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_183242C18(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_183242C24(a1, a2, a3, a4, (void (*)(void))sub_1832A3988);
}

_QWORD *sub_183242C24(_QWORD *result, int64_t a2, char a3, _QWORD *a4, void (*a5)(void))
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      a5();
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_183245DE0(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_183242D34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1830628D0(a1, a2, a3, a4, &qword_1EDCDCF08, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
}

_QWORD *sub_183242D48(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCE80);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_183245EC8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_183242E54(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCEE8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_183245BE4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_183242F74(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_183242F88(a1, a2, a3, a4, &qword_1EDCDCEE0, &qword_1EDCD7630);
}

uint64_t sub_183242F88(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_183B91F50();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_18324639C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_183243194(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_183242F88(a1, a2, a3, a4, &qword_1EDCDCED8, &qword_1EDCDE720);
}

uint64_t sub_1832431A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1830628D0(a1, a2, a3, a4, &qword_1EDCDCED0, type metadata accessor for NWConnection.EstablishmentReport.Resolution);
}

_QWORD *sub_1832431BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCEC8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_183245FD0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1832432E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB1E8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4])
          memmove(v12, a4 + 4, 104 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1832460C4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_183243408(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_183242900(a1, a2, a3, a4, &qword_1EDCDCEC0);
}

char *sub_183243414(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_183242900(a1, a2, a3, a4, &qword_1EDCDCEB8);
}

_QWORD *sub_183243420(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_183243434(a1, a2, a3, a4, &qword_1EDCDCEA8, &qword_1EDCDCEB0);
}

_QWORD *sub_183243434(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 1;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 5);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4])
          memmove(v16, a4 + 4, 32 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_183246298(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_18324354C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_183242F88(a1, a2, a3, a4, &qword_1EDCDCE98, &qword_1EDCDCEA0);
}

_QWORD *sub_183243560(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCE90);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_183245DE0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_18324366C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_18324375C()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_183243764()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t type metadata accessor for BrowseResult.Change(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BrowseResult.Change);
}

unint64_t sub_183243778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDC380;
  if (!qword_1EDCDC380)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDC378);
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EDCDC380);
  }
  return result;
}

uint64_t sub_1832437C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC368);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_1832438CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v22 - v17;
  v19 = sub_183B91698();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_183243A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_183B91C5C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  v11 = sub_183B91698();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_183B91698();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_183243C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v15;

  v4 = v3;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78]();
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v13((char *)(v4 + *(_QWORD *)(v12 + 96)), a1, v8);
  v13(v11, a1, v8);
  if (!a2)
    a2 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(v8, a3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 104)) = a2;
  return v4;
}

uint64_t type metadata accessor for BrowseResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BrowseResult);
}

void sub_183243CEC(uint64_t a1)
{
  uint64_t v1;

  sub_18323F6A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_183243CF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_183243D18(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_183243DAC;
  return sub_18324129C(a1, a2, v11, v10, v6, v7, v8, v9);
}

uint64_t sub_183243DAC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_183243DF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_183243E18(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_183246848;
  return sub_183241D74(a1, a2, v9, v10, v6, v7, v8);
}

void sub_183243EA8()
{
  JUMPOUT(0x186DB5558);
}

void sub_183243EB8()
{
  JUMPOUT(0x186DB5558);
}

uint64_t sub_183243EC8()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_183243ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183243FE0(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

unint64_t sub_183243EE0()
{
  unint64_t result;

  result = qword_1EDCDCC68;
  if (!qword_1EDCDCC68)
  {
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EDCDCC68);
  }
  return result;
}

void sub_183243F24()
{
  JUMPOUT(0x186DB5558);
}

void sub_183243F34()
{
  JUMPOUT(0x186DB5558);
}

uint64_t sub_183243F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183243FE0(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

uint64_t sub_183243F50(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>);
  return MEMORY[0x186DB5558](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t sub_183243F98(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_183243FC4()
{
  JUMPOUT(0x186DB5558);
}

uint64_t sub_183243FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183243FE0(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

uint64_t sub_183243FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = sub_183243EE0();
  v8[0] = MEMORY[0x1E0DEB458];
  v8[1] = v6;
  return MEMORY[0x186DB5558](a4, a1, v8);
}

uint64_t sub_183244028(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DB5558](&protocol conformance descriptor for BrowseResult<A>);
  return MEMORY[0x186DB5558](MEMORY[0x1E0DEDE28], a1, &v3);
}

void sub_183244070()
{
  JUMPOUT(0x186DB5558);
}

uint64_t dispatch thunk of Connectable.nw.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for UnexpectedEndpointType(uint64_t *a1, uint64_t *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for NWEndpoint() - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1832440E8 + 4 * byte_183B9EA30[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for UnexpectedEndpointType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for NWEndpoint();
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      result = sub_183058BF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = *(_QWORD *)(a1 + 48);
      if (result != 1)
        goto LABEL_7;
      break;
    case 2:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      v3 = sub_183B913A4();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 4:
LABEL_7:
      result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for UnexpectedEndpointType()
{
  char *v0;

  type metadata accessor for NWEndpoint();
  v0 = (char *)sub_18324434C + 4 * byte_183B9EA3A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18324434C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  sub_183058E2C(*(_QWORD *)v1, v3, v4, v5);
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_QWORD *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + 24) = v5;
  *(_WORD *)(v0 + 26) = *(_WORD *)(v1 + 26);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for UnexpectedEndpointType(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_183058AE0(result, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    type metadata accessor for NWEndpoint();
    v2 = (char *)&loc_1832444D4 + 4 * byte_183B9EA3F[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void *initializeWithTake for UnexpectedEndpointType(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for NWEndpoint();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v5 = sub_183B913A4();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for UnexpectedEndpointType(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v4 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v5 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for UnexpectedEndpointType()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18324475C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWEndpoint();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UnexpectedEndpointType()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832447A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWEndpoint();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UnexpectedEndpointType()
{
  uint64_t result;

  result = qword_1EDCDCC70;
  if (!qword_1EDCDCC70)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_183244820()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of BrowseDescriptorProvider.makeDescriptor()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of BrowseDescriptorProvider.makeEndpoint(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BrowseResultProtocol.endpoints.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of BrowseResultProtocol.changes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of BrowseParametersProvider.browseParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1832448C0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for NWActorSystemInvocationEncoder()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s7Network30NWActorSystemInvocationEncoderVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NWActorSystemInvocationEncoder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for NWActorSystemInvocationEncoder(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1832449D4()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v3 = *(_QWORD *)(result - 8) + 64;
    v4 = v3;
    swift_getTupleTypeLayout2();
    v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_183244A50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void (*v19)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  v10 = ~(unint64_t)v8;
  v11 = v7 + v8;
  if (((v7 + v9) & ~v9) + v7 <= v7)
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = ((v7 + v8) & ~(unint64_t)v8) + v7;
  v13 = v8 & 0x100000;
  if (v9 > 7 || v13 != 0 || (unint64_t)(v12 + 1) > 0x18)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v9 + 16) & v10));
    swift_retain();
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + v12);
    if (v17 >= 3)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X13 }
    }
    if (v17 == 2)
    {
      v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
      v19(a1, a2, *(_QWORD *)(a3 + 16));
      v19((uint64_t *)(((unint64_t)v4 + v11) & v10), (uint64_t *)(((unint64_t)a2 + v11) & v10), v5);
      *((_BYTE *)v4 + v12) = 2;
    }
    else if (v17 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      *((_BYTE *)v4 + v12) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      *((_BYTE *)v4 + v12) = 0;
    }
  }
  return v4;
}

uint64_t sub_183244BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t);

  v2 = a1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5)
    v5 += (v5 + v6) & ~v6;
  v8 = *(unsigned __int8 *)(a1 + v5);
  if (v8 >= 3)
  {
    if (v5 <= 3)
      v9 = v5;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 == 2)
  {
    v12 = ~v6;
    v14 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v14(a1, v3);
    a1 = (v7 + v2) & v12;
    v11 = v3;
    v10 = (uint64_t (*)(uint64_t, uint64_t))v14;
  }
  else
  {
    v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    v11 = *(_QWORD *)(a2 + 16);
  }
  return v10(a1, v11);
}

uint64_t sub_183244CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7)
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = ((v7 + v8) & ~v8) + v7;
  v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 2)
  {
    v14 = ~v8;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v15((v9 + a1) & v14, (v9 + a2) & v14, v5);
    v13 = 2;
  }
  else if (v11 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = 0;
  }
  *(_BYTE *)(a1 + v10) = v13;
  return a1;
}

uint64_t sub_183244E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  unsigned int v15;
  uint64_t v16;
  char v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 <= v7)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = ((v7 + v8) & ~v8) + v7;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v14(a1, *(_QWORD *)(a3 + 16));
      v14((v9 + a1) & v13, v5);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      v18(a1, a2, v5);
      v18((v9 + a1) & v13, (v9 + a2) & v13, v5);
      v17 = 2;
    }
    else if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      v17 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      v17 = 0;
    }
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t sub_18324503C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7)
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = ((v7 + v8) & ~v8) + v7;
  v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 2)
  {
    v14 = ~v8;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v15((v9 + a1) & v14, (v9 + a2) & v14, v5);
    v13 = 2;
  }
  else if (v11 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = 0;
  }
  *(_BYTE *)(a1 + v10) = v13;
  return a1;
}

uint64_t sub_18324518C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  unsigned int v15;
  uint64_t v16;
  char v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 <= v7)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = ((v7 + v8) & ~v8) + v7;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v14(a1, *(_QWORD *)(a3 + 16));
      v14((v9 + a1) & v13, v5);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
      v18(a1, a2, v5);
      v18((v9 + a1) & v13, (v9 + a2) & v13, v5);
      v17 = 2;
    }
    else if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v17 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v17 = 0;
    }
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t sub_183245394(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 > v4)
    v4 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v6 = v4 + 1;
  v7 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 < 2)
    {
LABEL_21:
      v12 = *(unsigned __int8 *)(a1 + v4);
      if (v12 >= 3)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 254);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_183245464 + 4 * byte_183B9EA6C[(v6 - 1)]))();
}

void sub_1832454B0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 + 1;
  if (a3 < 0xFE)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v10 = a2 - 254;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_183245664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 > v3)
    v3 = v4;
  if (*(unsigned __int8 *)(a1 + v3) < 3u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v5 = v3;
  else
    v5 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1832456B8 + 4 * byte_183B9EA7A[v5]))();
}

void sub_183245700(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (a2 > 2)
  {
    if (v6 <= v5)
      v7 = v5;
    else
      v7 = v6;
    v8 = a2 - 3;
    if (v7 < 4)
    {
      v9 = v8 >> (8 * v7);
      v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 3;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 3;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    if (v6 > v5)
      v5 = v6;
    a1[v5] = a2;
  }
}

_QWORD *sub_1832457DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for NWBrowser.Descriptor.Options()
{
  return swift_bridgeObjectRelease();
}

_QWORD *sub_183245810(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *sub_18324585C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for BrowseResult.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BrowseResult.Iterator);
}

uint64_t sub_18324592C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Browser1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Browser1);
}

uint64_t method lookup function for Browser1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Browser1.__allocating_init(provider:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of Browser1.__allocating_init(for:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of Browser1.__allocating_init<>(for:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for BrowseDescriptorFactories()
{
  return &type metadata for BrowseDescriptorFactories;
}

uint64_t sub_1832459E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCF28);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183245AF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183245BE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE120);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183245CF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

char *sub_183245DE0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183245EC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCE88);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183245FD0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_1832460C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 104 * a1 + 32;
    v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

char *sub_1832461B4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183246298(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v5;
    if (v6 >= v7 || v6 + 32 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_18324639C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1832464F0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_183246514(uint64_t a1)
{
  uint64_t v1;

  sub_18323F984(a1, *(_QWORD *)(v1 + 32));
}

uint64_t sub_183246520()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255, AssociatedTypeWitness, v2, v3);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v4 = sub_183B91B54();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80)), v4);
  return swift_deallocObject();
}

unsigned int *sub_1832465C8(unsigned int *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255, AssociatedTypeWitness, v3, v4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  sub_183B91B54();
  return sub_18323F9EC(a1);
}

uint64_t sub_18324666C()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255, AssociatedTypeWitness, v2, v3);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v4 = sub_183B91B54();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v4);
  return swift_deallocObject();
}

uint64_t sub_183246734(int64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255, AssociatedTypeWitness, v6, v7);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_183B91B54() - 8) + 80);
  return sub_18323FAE8(a1, a2, *(_QWORD *)(v2 + 32), v2 + ((v8 + 40) & ~v8));
}

unint64_t sub_1832467E0()
{
  unint64_t result;

  result = qword_1EDCDE760;
  if (!qword_1EDCDE760)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDCDE760);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x186DB54C8](a1, v6, a5);
}

uint64_t TXTRecordDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v7;

  v2 = *a2;
  v3 = a2[1];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1832F2378(MEMORY[0x1E0DEE9D8]);
  sub_183246920();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v2;
  v7[3] = v3;
  v7[4] = v4;
  v7[5] = v5;
  return sub_183B91B9C();
}

unint64_t sub_183246920()
{
  unint64_t result;

  result = qword_1EDCDCF40;
  if (!qword_1EDCDCF40)
  {
    result = MEMORY[0x186DB5558](&unk_183B9F0CC, &type metadata for TXTRecordDecoder._Decoder);
    atomic_store(result, (unint64_t *)&qword_1EDCDCF40);
  }
  return result;
}

uint64_t sub_183246964()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *initializeWithCopy for NotSupported(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NotSupported(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for NotSupported(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for NotSupported(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotSupported(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotSupported()
{
  return &type metadata for NotSupported;
}

ValueMetadata *type metadata accessor for MissingRequiredKey()
{
  return &type metadata for MissingRequiredKey;
}

uint64_t _s4NameVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for InvalidValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InvalidValue(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for InvalidValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InvalidValue()
{
  return &type metadata for InvalidValue;
}

_QWORD *initializeBufferWithCopyOfBuffer for FailedConvertion(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FailedConvertion()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for NWTXTRecord.CaseInsensitiveString(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FailedConvertion(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord.CaseInsensitiveString(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord.CaseInsensitiveString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FailedConvertion()
{
  return &type metadata for FailedConvertion;
}

ValueMetadata *type metadata accessor for TXTRecordDecoder()
{
  return &type metadata for TXTRecordDecoder;
}

ValueMetadata *type metadata accessor for TXTRecordDecoder._Decoder()
{
  return &type metadata for TXTRecordDecoder._Decoder;
}

uint64_t sub_183246E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_183B91974();
  v6 = type metadata accessor for TXTRecordDecoder._Decoder._Container(0, a2, a3, v5);
  MEMORY[0x186DB5558](&unk_183B9F150, v6);
  return sub_183B92034();
}

uint64_t sub_183246F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v0 = sub_183B92328();
  v2 = NWTXTRecord.subscript.getter(v0, v1);
  v4 = v3;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4)
  {
    v2 = sub_183B92328();
    v6 = v5;
    sub_183249DD8();
    swift_allocError();
    *v7 = v2;
    v7[1] = v6;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_183247038@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  void (*v26)(uint64_t);

  v22 = a5;
  v23 = a3;
  v26 = a2;
  v9 = sub_183B91CF8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v21 - v11;
  v13 = v5[1];
  v24 = *v5;
  v25 = v13;
  result = sub_183246F44();
  if (!v6)
  {
    v21[1] = a1;
    v15 = v22;
    v26(result);
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(a4 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v17 = sub_183B92328();
      v19 = v18;
      sub_183249D94();
      swift_allocError();
      *v20 = v17;
      v20[1] = v19;
      return swift_willThrow();
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v15, v12, a4);
    }
  }
  return result;
}

BOOL sub_183247198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v0 = sub_183B92328();
  NWTXTRecord.subscript.getter(v0, v1);
  v3 = v2;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
    swift_bridgeObjectRelease();
  return v3 != 0;
}

BOOL sub_183247234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v0 = sub_183B92328();
  NWTXTRecord.subscript.getter(v0, v1);
  v3 = v2;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
    swift_bridgeObjectRelease();
  return v3 == 0;
}

uint64_t sub_1832472D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  v1 = sub_183246F44();
  if (!v0)
  {
    v4 = v1;
    v5 = v2;
    v6 = sub_183B91740();
    v8 = v6 == 1702195828 && v7 == 0xE400000000000000;
    if (v8
      || (v9 = v6, v10 = v7, (sub_183B920F4() & 1) != 0)
      || v9 == 7562617 && v10 == 0xE300000000000000
      || (sub_183B920F4() & 1) != 0
      || v9 == 49 && v10 == 0xE100000000000000
      || (sub_183B920F4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = 1;
    }
    else
    {
      if (v9 == 0x65736C6166 && v10 == 0xE500000000000000
        || (sub_183B920F4() & 1) != 0
        || v9 == 28526 && v10 == 0xE200000000000000
        || (sub_183B920F4() & 1) != 0
        || v9 == 48 && v10 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v12 = sub_183B920F4();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
        {
          v13 = sub_183B92328();
          v15 = v14;
          sub_183249EDC();
          swift_allocError();
          *v16 = v13;
          v16[1] = v15;
          v16[2] = v4;
          v16[3] = v5;
          swift_willThrow();
          return v3 & 1;
        }
      }
      swift_bridgeObjectRelease();
      v3 = 0;
    }
  }
  return v3 & 1;
}

uint64_t sub_183247554()
{
  return sub_183246F44();
}

double sub_183247584(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;

  sub_183247038(a1, (void (*)(uint64_t))sub_1832475DC, 0, MEMORY[0x1E0DEB070], (uint64_t)&v3);
  if (!v1)
    return v3;
  return result;
}

uint64_t sub_1832475DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  _BYTE *v10;
  uint64_t v11;
  char v12;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    swift_bridgeObjectRetain();
    sub_183B91D94();
    result = swift_bridgeObjectRelease();
    v8 = v12;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      switch((char)a1)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain();
          goto LABEL_9;
        default:
          swift_bridgeObjectRetain();
          v10 = (_BYTE *)_swift_stdlib_strtod_clocale();
          if (v10)
            v8 = *v10 == 0;
          else
LABEL_9:
            v8 = 0;
          result = swift_bridgeObjectRelease();
          break;
      }
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v7 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v6 = sub_183B91E78();
        v7 = v11;
      }
      swift_bridgeObjectRetain();
      v8 = sub_1832F0A00(v6, v7, (void (*)(uint64_t *__return_ptr))sub_183249F28);
      result = swift_bridgeObjectRelease();
    }
  }
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = (v8 & 1) == 0;
  return result;
}

float sub_183247798(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;

  sub_183247038(a1, (void (*)(uint64_t))sub_1832477F0, 0, MEMORY[0x1E0DEB188], (uint64_t)&v3);
  if (!v1)
    return v3;
  return result;
}

uint64_t sub_1832477F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  _BYTE *v10;
  uint64_t v11;
  char v12;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    swift_bridgeObjectRetain();
    sub_183B91D94();
    result = swift_bridgeObjectRelease();
    v8 = v12;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      switch((char)a1)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain();
          goto LABEL_9;
        default:
          swift_bridgeObjectRetain();
          v10 = (_BYTE *)_swift_stdlib_strtof_clocale();
          if (v10)
            v8 = *v10 == 0;
          else
LABEL_9:
            v8 = 0;
          result = swift_bridgeObjectRelease();
          break;
      }
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v7 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v6 = sub_183B91E78();
        v7 = v11;
      }
      swift_bridgeObjectRetain();
      v8 = sub_1832F0A00(v6, v7, (void (*)(uint64_t *__return_ptr))sub_183249E38);
      result = swift_bridgeObjectRelease();
    }
  }
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = (v8 & 1) == 0;
  return result;
}

uint64_t sub_1832479AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1832482AC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1832A0770, (uint64_t (*)(uint64_t))sub_1832A06D0, a3);
}

unint64_t sub_1832479C0@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  _QWORD v23[3];

  v5 = HIBYTE(a2) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_44:
    *a3 = v7;
    a3[1] = v5;
    return result;
  }
  v8 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1832A077C(v8, a2, 10);
    result = swift_bridgeObjectRelease();
    LODWORD(v5) = (v10 >> 8) & 1;
    goto LABEL_41;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)sub_183B91E78();
    result = (unint64_t)sub_1832A06E4(v9, v6, 10);
    LOBYTE(v10) = result;
    LODWORD(v5) = (result >> 8) & 1;
    goto LABEL_41;
  }
  v23[0] = result;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v5)
    {
      if (v5 != 1)
      {
        v10 = (result >> 8) - 48;
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_38;
        if (v5 != 2)
        {
          if ((BYTE2(result) - 48) > 9u)
            goto LABEL_38;
          v10 = (result >> 16) - 48 + 10 * v10;
          v15 = v5 - 3;
          if (v5 != 3)
          {
            v16 = (unsigned __int8 *)v23 + 3;
            while (1)
            {
              v17 = *v16 - 48;
              if (v17 > 9)
                goto LABEL_38;
              v18 = (char)(10 * v10);
              if (v18 != 10 * (char)v10)
                goto LABEL_38;
              v10 = v18 + (char)v17;
              if ((char)(v18 + v17) != v10)
                goto LABEL_38;
              LODWORD(v5) = 0;
              ++v16;
              if (!--v15)
                goto LABEL_41;
            }
          }
        }
        goto LABEL_40;
      }
      goto LABEL_56;
    }
  }
  else
  {
    if (result != 45)
    {
      if (!v5)
        goto LABEL_38;
      v10 = result - 48;
      if ((result - 48) > 9u)
        goto LABEL_38;
      if (v5 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_38;
        v10 = (result >> 8) - 48 + 10 * v10;
        v19 = v5 - 2;
        if (v5 != 2)
        {
          v20 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            v21 = *v20 - 48;
            if (v21 > 9)
              goto LABEL_38;
            v22 = (char)(10 * v10);
            if (v22 != 10 * (char)v10)
              goto LABEL_38;
            v10 = v22 + (char)v21;
            if ((char)(v22 + v21) != v10)
              goto LABEL_38;
            LODWORD(v5) = 0;
            ++v20;
            if (!--v19)
              goto LABEL_41;
          }
        }
      }
      goto LABEL_40;
    }
    if (v5)
    {
      if (v5 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_38;
        v10 = 48 - (result >> 8);
        if (v5 != 2)
        {
          if ((BYTE2(result) - 48) <= 9u)
          {
            v10 = 10 * v10 - ((result >> 16) - 48);
            v11 = v5 - 3;
            if (v5 != 3)
            {
              v12 = (unsigned __int8 *)v23 + 3;
              while (1)
              {
                v13 = *v12 - 48;
                if (v13 > 9)
                  goto LABEL_38;
                v14 = (char)(10 * v10);
                if (v14 != 10 * (char)v10)
                  goto LABEL_38;
                v10 = v14 - (char)v13;
                if ((char)(v14 - v13) != v10)
                  goto LABEL_38;
                LODWORD(v5) = 0;
                ++v12;
                if (!--v11)
                  goto LABEL_41;
              }
            }
            goto LABEL_40;
          }
LABEL_38:
          LOBYTE(v10) = 0;
          LODWORD(v5) = 1;
          goto LABEL_41;
        }
LABEL_40:
        LODWORD(v5) = 0;
        goto LABEL_41;
      }
LABEL_56:
      LOBYTE(v10) = 0;
LABEL_41:
      if ((_DWORD)v5)
        LOBYTE(v7) = 0;
      else
        LOBYTE(v7) = v10;
      goto LABEL_44;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_183247CA8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  _QWORD v24[3];

  v5 = HIBYTE(a2) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_37:
    *(_WORD *)a3 = v7;
    *(_BYTE *)(a3 + 2) = v5;
    return result;
  }
  v8 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1832A0788(v8, a2, 10);
    result = swift_bridgeObjectRelease();
    LODWORD(v5) = HIWORD(v10) & 1;
    goto LABEL_34;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)sub_183B91E78();
    result = (uint64_t)sub_1832A06F8(v9, v6, 10);
    LOWORD(v10) = result;
    LODWORD(v5) = WORD1(result) & 1;
    goto LABEL_34;
  }
  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v5)
      goto LABEL_59;
    if (v5 == 1)
    {
LABEL_57:
      LOWORD(v10) = 0;
LABEL_34:
      if ((_DWORD)v5)
        LOWORD(v7) = 0;
      else
        LOWORD(v7) = v10;
      goto LABEL_37;
    }
    v10 = (BYTE1(result) - 48);
    if (v10 <= 9)
    {
      if (v5 == 2)
        goto LABEL_33;
      if ((BYTE2(result) - 48) <= 9u)
      {
        LOWORD(v10) = 10 * v10 + (BYTE2(result) - 48);
        v12 = v5 - 3;
        if (v5 != 3)
        {
          v13 = (unsigned __int8 *)v24 + 3;
          while (1)
          {
            v14 = *v13 - 48;
            if (v14 > 9)
              goto LABEL_31;
            v15 = (__int16)(10 * v10);
            if (v15 != 10 * (__int16)v10)
              goto LABEL_31;
            v10 = v15 + v14;
            if ((__int16)(v15 + v14) != v10)
              goto LABEL_31;
            LODWORD(v5) = 0;
            ++v13;
            if (!--v12)
              goto LABEL_34;
          }
        }
        goto LABEL_33;
      }
    }
LABEL_31:
    LOWORD(v10) = 0;
    LODWORD(v5) = 1;
    goto LABEL_34;
  }
  if (result != 45)
  {
    if (!v5)
      goto LABEL_31;
    v10 = (result - 48);
    if (v10 > 9)
      goto LABEL_31;
    if (v5 == 1)
    {
LABEL_33:
      LODWORD(v5) = 0;
      goto LABEL_34;
    }
    if ((BYTE1(result) - 48) <= 9u)
    {
      LOWORD(v10) = 10 * v10 + (BYTE1(result) - 48);
      v16 = v5 - 2;
      if (v5 != 2)
      {
        v17 = (unsigned __int8 *)v24 + 2;
        while (1)
        {
          v18 = *v17 - 48;
          if (v18 > 9)
            goto LABEL_31;
          v19 = (__int16)(10 * v10);
          if (v19 != 10 * (__int16)v10)
            goto LABEL_31;
          v10 = v19 + v18;
          if ((__int16)(v19 + v18) != v10)
            goto LABEL_31;
          LODWORD(v5) = 0;
          ++v17;
          if (!--v16)
            goto LABEL_34;
        }
      }
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  if (v5)
  {
    if (v5 != 1)
    {
      v11 = (BYTE1(result) - 48);
      if (v11 > 9)
        goto LABEL_31;
      if (v5 == 2)
      {
        LODWORD(v5) = 0;
        v10 = -v11;
        goto LABEL_34;
      }
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_31;
      LOWORD(v10) = -10 * v11 - (BYTE2(result) - 48);
      v20 = v5 - 3;
      if (v5 != 3)
      {
        v21 = (unsigned __int8 *)v24 + 3;
        while (1)
        {
          v22 = *v21 - 48;
          if (v22 > 9)
            goto LABEL_31;
          v23 = (__int16)(10 * v10);
          if (v23 != 10 * (__int16)v10)
            goto LABEL_31;
          v10 = v23 - v22;
          if ((__int16)(v23 - v22) != v10)
            goto LABEL_31;
          LODWORD(v5) = 0;
          ++v21;
          if (!--v20)
            goto LABEL_34;
        }
      }
      goto LABEL_33;
    }
    goto LABEL_57;
  }
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_183247F98@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[2];
  char v25;

  v5 = HIBYTE(a2) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_38:
    *(_DWORD *)a3 = v7;
    *(_BYTE *)(a3 + 4) = v5;
    return result;
  }
  v8 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v23 = sub_1832A0794(v8, a2, 10);
    swift_bridgeObjectRelease();
    v5 = HIDWORD(v23) & 1;
    result = v23;
LABEL_35:
    if ((_DWORD)v5)
      LODWORD(v7) = 0;
    else
      LODWORD(v7) = result;
    goto LABEL_38;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)sub_183B91E78();
    result = (uint64_t)sub_1832A070C(v9, v6, 10);
    v25 = BYTE4(result) & 1;
    LOBYTE(v5) = BYTE4(result) & 1;
    goto LABEL_34;
  }
  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v5)
    {
      if (v5 != 1)
      {
        result = (BYTE1(result) - 48);
        if (result <= 9)
        {
          if (v5 == 2)
            goto LABEL_33;
          if ((BYTE2(v8) - 48) <= 9u)
          {
            result = 10 * (_DWORD)result + (BYTE2(v8) - 48);
            v11 = v5 - 3;
            if (v5 != 3)
            {
              v12 = (unsigned __int8 *)v24 + 3;
              while (1)
              {
                v13 = *v12 - 48;
                if (v13 > 9)
                  goto LABEL_31;
                v14 = 10 * (int)result;
                if (v14 != (int)v14)
                  goto LABEL_31;
                result = v14 + v13;
                if (__OFADD__((_DWORD)v14, v13))
                  goto LABEL_31;
                LOBYTE(v5) = 0;
                ++v12;
                if (!--v11)
                  goto LABEL_34;
              }
            }
            goto LABEL_33;
          }
        }
        goto LABEL_31;
      }
      goto LABEL_58;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v5)
      {
        result = (result - 48);
        if (result <= 9)
        {
          if (v5 == 1)
            goto LABEL_33;
          if ((BYTE1(v8) - 48) <= 9u)
          {
            result = 10 * (_DWORD)result + (BYTE1(v8) - 48);
            v15 = v5 - 2;
            if (v5 != 2)
            {
              v16 = (unsigned __int8 *)v24 + 2;
              while (1)
              {
                v17 = *v16 - 48;
                if (v17 > 9)
                  goto LABEL_31;
                v18 = 10 * (int)result;
                if (v18 != (int)v18)
                  goto LABEL_31;
                result = v18 + v17;
                if (__OFADD__((_DWORD)v18, v17))
                  goto LABEL_31;
                LOBYTE(v5) = 0;
                ++v16;
                if (!--v15)
                  goto LABEL_34;
              }
            }
            goto LABEL_33;
          }
        }
      }
LABEL_31:
      result = 0;
      LOBYTE(v5) = 1;
      goto LABEL_34;
    }
    if (v5)
    {
      if (v5 != 1)
      {
        v10 = (BYTE1(result) - 48);
        if (v10 <= 9)
        {
          if (v5 == 2)
          {
            LOBYTE(v5) = 0;
            result = -v10;
LABEL_34:
            LODWORD(v5) = v5 & 1;
            goto LABEL_35;
          }
          if ((BYTE2(result) - 48) <= 9u)
          {
            result = -10 * v10 - (BYTE2(result) - 48);
            v19 = v5 - 3;
            if (v5 != 3)
            {
              v20 = (unsigned __int8 *)v24 + 3;
              while (1)
              {
                v21 = *v20 - 48;
                if (v21 > 9)
                  goto LABEL_31;
                v22 = 10 * (int)result;
                if (v22 != (int)v22)
                  goto LABEL_31;
                result = v22 - v21;
                if (__OFSUB__((_DWORD)v22, v21))
                  goto LABEL_31;
                LOBYTE(v5) = 0;
                ++v20;
                if (!--v19)
                  goto LABEL_34;
              }
            }
LABEL_33:
            LOBYTE(v5) = 0;
            goto LABEL_34;
          }
        }
        goto LABEL_31;
      }
LABEL_58:
      result = 0;
      goto LABEL_34;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18324825C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = sub_183247038(a1, a3, 0, a4, (uint64_t)&v6);
  if (!v4)
    return v6;
  return result;
}

uint64_t sub_1832482AC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, unint64_t, uint64_t)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  char v29;
  _QWORD v30[3];

  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a2) & 0xF;
  else
    v8 = result & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    v24 = 1;
LABEL_47:
    *(_QWORD *)a5 = v8;
    *(_BYTE *)(a5 + 8) = v24 & 1;
    return result;
  }
  v9 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v12 = a3(v9, a2, 10);
    v14 = v29;
    result = swift_bridgeObjectRelease();
LABEL_44:
    v24 = v14 & 1;
    if ((v14 & 1) != 0)
      v8 = 0;
    else
      v8 = v12;
    goto LABEL_47;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v11 = sub_183B91E78();
    result = a4(v11);
    v12 = result;
    v14 = v13 & 1;
    goto LABEL_44;
  }
  v30[0] = result;
  v30[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v7)
      goto LABEL_58;
    if (v7 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_31;
    v12 = (BYTE1(result) - 48);
    if (v7 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_31;
      v12 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      v15 = v7 - 3;
      if (v15)
      {
        v16 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          v17 = *v16 - 48;
          if (v17 > 9)
            goto LABEL_31;
          v18 = 10 * v12;
          if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
            goto LABEL_31;
          v12 = v18 + v17;
          if (__OFADD__(v18, v17))
            goto LABEL_31;
          v14 = 0;
          ++v16;
          if (!--v15)
            goto LABEL_44;
        }
      }
    }
LABEL_43:
    v14 = 0;
    goto LABEL_44;
  }
  if (result != 45)
  {
    if (!v7 || (result - 48) > 9u)
      goto LABEL_31;
    v12 = (result - 48);
    if (v7 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_31;
      v12 = 10 * (result - 48) + (BYTE1(result) - 48);
      v19 = v7 - 2;
      if (v19)
      {
        v20 = (unsigned __int8 *)v30 + 2;
        while (1)
        {
          v21 = *v20 - 48;
          if (v21 > 9)
            goto LABEL_31;
          v22 = 10 * v12;
          if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
            goto LABEL_31;
          v12 = v22 + v21;
          if (__OFADD__(v22, v21))
            goto LABEL_31;
          v14 = 0;
          ++v20;
          if (!--v19)
            goto LABEL_44;
        }
      }
    }
    goto LABEL_43;
  }
  if (v7)
  {
    if (v7 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v7 == 2)
      {
        v14 = 0;
        v12 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        v12 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        v23 = v7 - 3;
        if (!v23)
          goto LABEL_43;
        v25 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          v26 = *v25 - 48;
          if (v26 > 9)
            break;
          v27 = 10 * v12;
          if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
            break;
          v12 = v27 - v26;
          if (__OFSUB__(v27, v26))
            break;
          v14 = 0;
          ++v25;
          if (!--v23)
            goto LABEL_44;
        }
      }
    }
LABEL_31:
    v12 = 0;
    v14 = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_18324859C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_183248F88(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1832A0890, (uint64_t (*)(uint64_t))sub_1832A0720, a3);
}

uint64_t sub_1832485B0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unsigned __int8 v6;

  result = sub_183247038(a1, a3, 0, a4, (uint64_t)&v6);
  if (!v4)
    return v6;
  return result;
}

unint64_t sub_183248600@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  _QWORD v20[3];

  v5 = HIBYTE(a2) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_39:
    *a3 = v7;
    a3[1] = v5;
    return result;
  }
  v8 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1832A089C(v8, a2, 10);
    result = swift_bridgeObjectRelease();
    LODWORD(v5) = (v10 >> 8) & 1;
    goto LABEL_36;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)sub_183B91E78();
    result = (unint64_t)sub_1832A0734(v9, v6, 10);
    LOBYTE(v10) = result;
    LODWORD(v5) = (result >> 8) & 1;
    goto LABEL_36;
  }
  v20[0] = result;
  v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v5)
      goto LABEL_63;
    if (v5 == 1)
    {
LABEL_61:
      LOBYTE(v10) = 0;
LABEL_36:
      if ((_DWORD)v5)
        LOBYTE(v7) = 0;
      else
        LOBYTE(v7) = v10;
      goto LABEL_39;
    }
    v10 = (result >> 8) - 48;
    if ((BYTE1(result) - 48) > 9u)
      goto LABEL_32;
    if (v5 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_32;
      v10 = (result >> 16) - 48 + 10 * v10;
      v11 = v5 - 3;
      if (v5 != 3)
      {
        v12 = (unsigned __int8 *)v20 + 3;
        while (1)
        {
          v13 = *v12 - 48;
          if (v13 > 9)
            goto LABEL_32;
          if (((10 * v10) & 0xF00) != 0)
            goto LABEL_32;
          v10 = (10 * v10) + v13;
          if (((v10 >> 8) & 1) != 0)
            goto LABEL_32;
          LODWORD(v5) = 0;
          ++v12;
          if (!--v11)
            goto LABEL_36;
        }
      }
    }
LABEL_35:
    LODWORD(v5) = 0;
    goto LABEL_36;
  }
  if (result != 45)
  {
    if (!v5)
      goto LABEL_32;
    v10 = result - 48;
    if ((result - 48) > 9u)
      goto LABEL_32;
    if (v5 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_32;
      v10 = (result >> 8) - 48 + 10 * v10;
      v14 = v5 - 2;
      if (v5 != 2)
      {
        v15 = (unsigned __int8 *)v20 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_32;
          if (((10 * v10) & 0xF00) != 0)
            goto LABEL_32;
          v10 = (10 * v10) + v16;
          if (((v10 >> 8) & 1) != 0)
            goto LABEL_32;
          LODWORD(v5) = 0;
          ++v15;
          if (!--v14)
            goto LABEL_36;
        }
      }
    }
    goto LABEL_35;
  }
  if (v5)
  {
    if (v5 != 1)
    {
      if ((BYTE1(result) - 48) <= 9u)
      {
        LOBYTE(v10) = 0;
        if ((-(BYTE1(result) - 48) & 0xFFFFFF00) != 0)
        {
LABEL_33:
          LODWORD(v5) = 1;
          goto LABEL_36;
        }
        if (v5 == 2)
        {
          LODWORD(v5) = 0;
          LOBYTE(v10) = 48 - BYTE1(result);
          goto LABEL_36;
        }
        if ((BYTE2(result) - 48) <= 9u && ((10 * (48 - BYTE1(result))) & 0xF00) == 0)
        {
          v10 = (10 * (48 - BYTE1(result))) - (BYTE2(result) - 48);
          if ((v10 & 0xFFFFFF00) == 0)
          {
            v17 = v5 - 3;
            if (v5 != 3)
            {
              v18 = (unsigned __int8 *)v20 + 3;
              while (1)
              {
                v19 = *v18 - 48;
                if (v19 > 9)
                  goto LABEL_32;
                if (((10 * v10) & 0xF00) != 0)
                  goto LABEL_32;
                v10 = (10 * v10) - v19;
                if ((v10 & 0xFFFFFF00) != 0)
                  goto LABEL_32;
                LODWORD(v5) = 0;
                ++v18;
                if (!--v17)
                  goto LABEL_36;
              }
            }
            goto LABEL_35;
          }
        }
      }
LABEL_32:
      LOBYTE(v10) = 0;
      goto LABEL_33;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

uint64_t sub_183248904(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unsigned __int16 v6;

  result = sub_183247038(a1, a3, 0, a4, (uint64_t)&v6);
  if (!v4)
    return v6;
  return result;
}

uint64_t sub_183248954@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  _QWORD v20[3];

  v5 = HIBYTE(a2) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_39:
    *(_WORD *)a3 = v7;
    *(_BYTE *)(a3 + 2) = v5;
    return result;
  }
  v8 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1832A0994(v8, a2, 10);
    result = swift_bridgeObjectRelease();
    LODWORD(v5) = HIWORD(v10) & 1;
    goto LABEL_36;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)sub_183B91E78();
    result = (uint64_t)sub_1832A0748(v9, v6, 10);
    LOWORD(v10) = result;
    LODWORD(v5) = WORD1(result) & 1;
    goto LABEL_36;
  }
  v20[0] = result;
  v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v5)
      goto LABEL_63;
    if (v5 == 1)
    {
LABEL_61:
      LOWORD(v10) = 0;
LABEL_36:
      if ((_DWORD)v5)
        LOWORD(v7) = 0;
      else
        LOWORD(v7) = v10;
      goto LABEL_39;
    }
    v10 = (BYTE1(result) - 48);
    if (v10 > 9)
      goto LABEL_32;
    if (v5 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_32;
      LOWORD(v10) = 10 * v10 + (BYTE2(result) - 48);
      v11 = v5 - 3;
      if (v5 != 3)
      {
        v12 = (unsigned __int8 *)v20 + 3;
        while (1)
        {
          v13 = *v12 - 48;
          if (v13 > 9)
            goto LABEL_32;
          if (((10 * (unsigned __int16)v10) & 0xF0000) != 0)
            goto LABEL_32;
          v10 = (unsigned __int16)(10 * v10) + v13;
          if ((v10 & 0x10000) != 0)
            goto LABEL_32;
          LODWORD(v5) = 0;
          ++v12;
          if (!--v11)
            goto LABEL_36;
        }
      }
    }
LABEL_35:
    LODWORD(v5) = 0;
    goto LABEL_36;
  }
  if (result != 45)
  {
    if (!v5)
      goto LABEL_32;
    v10 = (result - 48);
    if (v10 > 9)
      goto LABEL_32;
    if (v5 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_32;
      LOWORD(v10) = 10 * v10 + (BYTE1(result) - 48);
      v14 = v5 - 2;
      if (v5 != 2)
      {
        v15 = (unsigned __int8 *)v20 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_32;
          if (((10 * (unsigned __int16)v10) & 0xF0000) != 0)
            goto LABEL_32;
          v10 = (unsigned __int16)(10 * v10) + v16;
          if ((v10 & 0x10000) != 0)
            goto LABEL_32;
          LODWORD(v5) = 0;
          ++v15;
          if (!--v14)
            goto LABEL_36;
        }
      }
    }
    goto LABEL_35;
  }
  if (v5)
  {
    if (v5 != 1)
    {
      if ((BYTE1(result) - 48) <= 9u)
      {
        LOWORD(v10) = 0;
        if ((-(BYTE1(result) - 48) & 0xFFFF0000) != 0)
        {
LABEL_33:
          LODWORD(v5) = 1;
          goto LABEL_36;
        }
        if (v5 == 2)
        {
          LODWORD(v5) = 0;
          LOWORD(v10) = -(BYTE1(result) - 48);
          goto LABEL_36;
        }
        if ((BYTE2(result) - 48) <= 9u
          && ((10 * (unsigned __int16)-(BYTE1(result) - 48)) & 0xF0000) == 0)
        {
          v10 = (unsigned __int16)(-10 * (BYTE1(result) - 48)) - (BYTE2(result) - 48);
          if ((v10 & 0xFFFF0000) == 0)
          {
            v17 = v5 - 3;
            if (v5 != 3)
            {
              v18 = (unsigned __int8 *)v20 + 3;
              while (1)
              {
                v19 = *v18 - 48;
                if (v19 > 9)
                  goto LABEL_32;
                if (((10 * (unsigned __int16)v10) & 0xF0000) != 0)
                  goto LABEL_32;
                v10 = (unsigned __int16)(10 * v10) - v19;
                if ((v10 & 0xFFFF0000) != 0)
                  goto LABEL_32;
                LODWORD(v5) = 0;
                ++v18;
                if (!--v17)
                  goto LABEL_36;
              }
            }
            goto LABEL_35;
          }
        }
      }
LABEL_32:
      LOWORD(v10) = 0;
      goto LABEL_33;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

uint64_t sub_183248C60(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;

  result = sub_183247038(a1, a3, 0, a4, (uint64_t)&v6);
  if (!v4)
    return v6;
  return result;
}

uint64_t sub_183248CB0@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];
  char v29;

  v5 = HIBYTE(a2) & 0xF;
  v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = result & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_41:
    *(_DWORD *)a3 = v7;
    *(_BYTE *)(a3 + 4) = v5;
    return result;
  }
  v8 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v27 = sub_1832A0A88(v8, a2, 10);
    swift_bridgeObjectRelease();
    v5 = HIDWORD(v27) & 1;
    result = v27;
LABEL_38:
    if ((_DWORD)v5)
      LODWORD(v7) = 0;
    else
      LODWORD(v7) = result;
    goto LABEL_41;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)sub_183B91E78();
    result = (uint64_t)sub_1832A075C(v9, v6, 10);
    v29 = BYTE4(result) & 1;
    LOBYTE(v5) = BYTE4(result) & 1;
    goto LABEL_37;
  }
  v28[0] = result;
  v28[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v5)
    {
      if (v5 != 1)
      {
        result = (BYTE1(result) - 48);
        if (result <= 9)
        {
          if (v5 == 2)
            goto LABEL_36;
          if ((BYTE2(v8) - 48) <= 9u)
          {
            result = 10 * (_DWORD)result + (BYTE2(v8) - 48);
            v13 = v5 - 3;
            if (v5 != 3)
            {
              v14 = (unsigned __int8 *)v28 + 3;
              while (1)
              {
                v15 = *v14 - 48;
                if (v15 > 9)
                  goto LABEL_33;
                v16 = 10 * result;
                if ((v16 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_33;
                result = v16 + v15;
                if (__CFADD__((_DWORD)v16, v15))
                  goto LABEL_33;
                LOBYTE(v5) = 0;
                ++v14;
                if (!--v13)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
        }
        goto LABEL_33;
      }
      goto LABEL_63;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v5)
      {
        result = (result - 48);
        if (result <= 9)
        {
          if (v5 == 1)
            goto LABEL_36;
          if ((BYTE1(v8) - 48) <= 9u)
          {
            result = 10 * (_DWORD)result + (BYTE1(v8) - 48);
            v17 = v5 - 2;
            if (v5 != 2)
            {
              v18 = (unsigned __int8 *)v28 + 2;
              while (1)
              {
                v19 = *v18 - 48;
                if (v19 > 9)
                  goto LABEL_33;
                v20 = 10 * result;
                if ((v20 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_33;
                result = v20 + v19;
                if (__CFADD__((_DWORD)v20, v19))
                  goto LABEL_33;
                LOBYTE(v5) = 0;
                ++v18;
                if (!--v17)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
        }
      }
LABEL_33:
      result = 0;
LABEL_34:
      LOBYTE(v5) = 1;
      goto LABEL_37;
    }
    if (v5)
    {
      if (v5 != 1)
      {
        v10 = BYTE1(result) - 48;
        if ((BYTE1(result) - 48) <= 9u)
        {
          result = 0;
          v11 = v10 == 0;
          v12 = -v10;
          if (!v11)
            goto LABEL_34;
          if (v5 == 2)
          {
            LOBYTE(v5) = 0;
            result = v12;
LABEL_37:
            LODWORD(v5) = v5 & 1;
            goto LABEL_38;
          }
          v21 = BYTE2(v8) - 48;
          if ((BYTE2(v8) - 48) <= 9u)
          {
            v22 = 10 * v12;
            if ((v22 & 0xFFFFFFFF00000000) == 0)
            {
              result = v22 - v21;
              if (v22 >= v21)
              {
                v23 = v5 - 3;
                if (v5 != 3)
                {
                  v24 = (unsigned __int8 *)v28 + 3;
                  while (1)
                  {
                    v25 = *v24 - 48;
                    if (v25 > 9)
                      goto LABEL_33;
                    v26 = 10 * result;
                    if ((v26 & 0xFFFFFFFF00000000) != 0)
                      goto LABEL_33;
                    result = v26 - v25;
                    if (v26 < v25)
                      goto LABEL_33;
                    LOBYTE(v5) = 0;
                    ++v24;
                    if (!--v23)
                      goto LABEL_37;
                  }
                }
LABEL_36:
                LOBYTE(v5) = 0;
                goto LABEL_37;
              }
            }
          }
        }
        goto LABEL_33;
      }
LABEL_63:
      result = 0;
      goto LABEL_37;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_183248F88@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, unint64_t, uint64_t)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned __int8 v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned __int8 v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  char v31;
  _QWORD v32[3];

  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a2) & 0xF;
  else
    v8 = result & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    v21 = 1;
LABEL_40:
    *(_QWORD *)a5 = v8;
    *(_BYTE *)(a5 + 8) = v21 & 1;
    return result;
  }
  v9 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v12 = a3(v9, a2, 10);
    v14 = v31;
    result = swift_bridgeObjectRelease();
LABEL_37:
    v21 = v14 & 1;
    if ((v14 & 1) != 0)
      v8 = 0;
    else
      v8 = v12;
    goto LABEL_40;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v11 = sub_183B91E78();
    result = a4(v11);
    v12 = result;
    v14 = v13 & 1;
    goto LABEL_37;
  }
  v32[0] = result;
  v32[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v7)
      goto LABEL_64;
    if (v7 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_33;
    v12 = (BYTE1(result) - 48);
    if (v7 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_33;
      v12 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      v18 = v7 - 3;
      if (v18)
      {
        v19 = (unsigned __int8 *)v32 + 3;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_33;
          if (!is_mul_ok(v12, 0xAuLL))
            goto LABEL_33;
          v16 = __CFADD__(10 * v12, v20);
          v12 = 10 * v12 + v20;
          if (v16)
            goto LABEL_33;
          v14 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v14 = 0;
    goto LABEL_37;
  }
  if (result != 45)
  {
    if (!v7 || (result - 48) > 9u)
      goto LABEL_33;
    v12 = (result - 48);
    if (v7 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_33;
      v12 = 10 * (result - 48) + (BYTE1(result) - 48);
      v22 = v7 - 2;
      if (v22)
      {
        v23 = (unsigned __int8 *)v32 + 2;
        while (1)
        {
          v24 = *v23 - 48;
          if (v24 > 9)
            goto LABEL_33;
          if (!is_mul_ok(v12, 0xAuLL))
            goto LABEL_33;
          v16 = __CFADD__(10 * v12, v24);
          v12 = 10 * v12 + v24;
          if (v16)
            goto LABEL_33;
          v14 = 0;
          ++v23;
          if (!--v22)
            goto LABEL_37;
        }
      }
    }
    goto LABEL_36;
  }
  if (v7)
  {
    if (v7 != 1)
    {
      v15 = BYTE1(result) - 48;
      if ((BYTE1(result) - 48) <= 9u)
      {
        v12 = 0;
        v16 = v15 == 0;
        v17 = -(uint64_t)v15;
        if (!v16)
          goto LABEL_34;
        if (v7 == 2)
        {
          v14 = 0;
          v12 = v17;
          goto LABEL_37;
        }
        v25 = BYTE2(result) - 48;
        if ((BYTE2(result) - 48) <= 9u && is_mul_ok(v17, 0xAuLL))
        {
          v26 = 10 * v17;
          v12 = v26 - v25;
          if (v26 >= v25)
          {
            v27 = v7 - 3;
            if (v27)
            {
              v28 = (unsigned __int8 *)v32 + 3;
              while (1)
              {
                v29 = *v28 - 48;
                if (v29 > 9)
                  goto LABEL_33;
                if (!is_mul_ok(v12, 0xAuLL))
                  goto LABEL_33;
                v16 = 10 * v12 >= v29;
                v12 = 10 * v12 - v29;
                if (!v16)
                  goto LABEL_33;
                v14 = 0;
                ++v28;
                if (!--v27)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
        }
      }
    }
LABEL_33:
    v12 = 0;
LABEL_34:
    v14 = 1;
    goto LABEL_37;
  }
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_183249294()
{
  _QWORD *v0;

  sub_183249B40();
  swift_allocError();
  *v0 = 0xD000000000000011;
  v0[1] = 0x8000000183C6FAB0;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x8000000183C6F9C0;
  v0[4] = 165;
  return swift_willThrow();
}

uint64_t sub_183249314()
{
  _QWORD *v0;

  sub_183249B40();
  swift_allocError();
  *v0 = 0xD000000000000020;
  v0[1] = 0x8000000183C6FA80;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x8000000183C6F9C0;
  v0[4] = 169;
  return swift_willThrow();
}

uint64_t sub_183249394()
{
  _QWORD *v0;

  sub_183249B40();
  swift_allocError();
  *v0 = 0xD00000000000001FLL;
  v0[1] = 0x8000000183C6FA60;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x8000000183C6F9C0;
  v0[4] = 173;
  return swift_willThrow();
}

uint64_t sub_183249414()
{
  char *v0;

  sub_183249B40();
  swift_allocError();
  strcpy(v0, "superDecoder()");
  v0[15] = -18;
  *((_QWORD *)v0 + 2) = 0xD00000000000005ELL;
  *((_QWORD *)v0 + 3) = 0x8000000183C6F9C0;
  *((_QWORD *)v0 + 4) = 177;
  return swift_willThrow();
}

uint64_t sub_1832494A0()
{
  _QWORD *v0;

  sub_183249B40();
  swift_allocError();
  *v0 = 0xD000000000000015;
  v0[1] = 0x8000000183C6FA40;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x8000000183C6F9C0;
  v0[4] = 181;
  return swift_willThrow();
}

uint64_t _s7Network25NWApplicationServiceGroupC7membersSayAA10NWEndpointOGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_183249528()
{
  return swift_bridgeObjectRetain();
}

BOOL sub_183249534()
{
  return sub_183247234();
}

uint64_t sub_18324954C()
{
  return sub_1832472D8() & 1;
}

uint64_t sub_183249564()
{
  return sub_183247554();
}

double sub_183249578(uint64_t a1)
{
  return sub_183247584(a1);
}

float sub_18324958C(uint64_t a1)
{
  return sub_183247798(a1);
}

uint64_t sub_1832495A0(uint64_t a1, uint64_t a2)
{
  return sub_18324825C(a1, a2, (void (*)(uint64_t))sub_1832479AC, MEMORY[0x1E0DEB418]);
}

uint64_t sub_1832495C4(uint64_t a1, uint64_t a2)
{
  return sub_1832485B0(a1, a2, (void (*)(uint64_t))sub_1832479C0, MEMORY[0x1E0DEDA70]);
}

uint64_t sub_1832495E8(uint64_t a1, uint64_t a2)
{
  return sub_183248904(a1, a2, (void (*)(uint64_t))sub_183247CA8, MEMORY[0x1E0DEDB58]);
}

uint64_t sub_18324960C(uint64_t a1, uint64_t a2)
{
  return sub_183248C60(a1, a2, (void (*)(uint64_t))sub_183247F98, MEMORY[0x1E0DEDBC8]);
}

uint64_t sub_183249630(uint64_t a1, uint64_t a2)
{
  return sub_18324825C(a1, a2, (void (*)(uint64_t))sub_1832479AC, MEMORY[0x1E0DEDC60]);
}

uint64_t sub_183249654()
{
  return sub_183B92184();
}

uint64_t sub_183249668(uint64_t a1, uint64_t a2)
{
  return sub_18324825C(a1, a2, (void (*)(uint64_t))sub_18324859C, MEMORY[0x1E0DEBB98]);
}

uint64_t sub_18324968C(uint64_t a1, uint64_t a2)
{
  return sub_1832485B0(a1, a2, (void (*)(uint64_t))sub_183248600, MEMORY[0x1E0DEDE70]);
}

uint64_t sub_1832496B0(uint64_t a1, uint64_t a2)
{
  return sub_183248904(a1, a2, (void (*)(uint64_t))sub_183248954, MEMORY[0x1E0DEE068]);
}

uint64_t sub_1832496D4(uint64_t a1, uint64_t a2)
{
  return sub_183248C60(a1, a2, (void (*)(uint64_t))sub_183248CB0, MEMORY[0x1E0DEE0F8]);
}

uint64_t sub_1832496F8(uint64_t a1, uint64_t a2)
{
  return sub_18324825C(a1, a2, (void (*)(uint64_t))sub_18324859C, MEMORY[0x1E0DEE190]);
}

uint64_t sub_18324971C()
{
  return sub_183B92190();
}

uint64_t sub_183249730()
{
  return sub_183249294();
}

uint64_t sub_183249744()
{
  return sub_183B92130();
}

uint64_t sub_183249758()
{
  return sub_183B92124();
}

uint64_t sub_18324976C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_183B9213C();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_18324978C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18324991C(a1, a2, a3, MEMORY[0x1E0DED7E8]);
}

uint64_t sub_1832497A8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_183B92148();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1832497C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183249894(a1, a2, a3, MEMORY[0x1E0DED808]);
}

uint64_t sub_1832497E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832498D8(a1, a2, a3, MEMORY[0x1E0DED810]);
}

uint64_t sub_183249800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18324991C(a1, a2, a3, MEMORY[0x1E0DED818]);
}

uint64_t sub_18324981C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_183B9216C();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_18324983C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183249988(a1, a2, a3, MEMORY[0x1E0DED830]);
}

uint64_t sub_183249858()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_183B92154();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_183249878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183249894(a1, a2, a3, MEMORY[0x1E0DED828]);
}

uint64_t sub_183249894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_1832498BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1832498D8(a1, a2, a3, MEMORY[0x1E0DED838]);
}

uint64_t sub_1832498D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_183249900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18324991C(a1, a2, a3, MEMORY[0x1E0DED840]);
}

uint64_t sub_18324991C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4;

  v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_18324994C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_183B92178();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_18324996C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183249988(a1, a2, a3, MEMORY[0x1E0DED850]);
}

uint64_t sub_183249988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = a4();
  if (v4)
    return v6;
  return result;
}

uint64_t sub_1832499AC()
{
  return sub_183B92160();
}

uint64_t sub_1832499D4()
{
  return sub_183249314();
}

uint64_t sub_1832499E8()
{
  return sub_183249394();
}

uint64_t sub_1832499FC()
{
  return sub_183249414();
}

uint64_t sub_183249A10()
{
  return sub_1832494A0();
}

uint64_t sub_183249A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_183246E94(a1, a2, a3);
}

uint64_t sub_183249A38()
{
  _QWORD *v0;

  sub_183249B40();
  swift_allocError();
  *v0 = 0xD000000000000012;
  v0[1] = 0x8000000183C6FA20;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x8000000183C6F9C0;
  v0[4] = 58;
  return swift_willThrow();
}

uint64_t sub_183249ABC()
{
  _QWORD *v0;

  sub_183249B40();
  swift_allocError();
  *v0 = 0xD000000000000016;
  v0[1] = 0x8000000183C6F9A0;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x8000000183C6F9C0;
  v0[4] = 62;
  return swift_willThrow();
}

unint64_t sub_183249B40()
{
  unint64_t result;

  result = qword_1EDCDCF48[0];
  if (!qword_1EDCDCF48[0])
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NotSupported, &type metadata for NotSupported);
    atomic_store(result, qword_1EDCDCF48);
  }
  return result;
}

uint64_t type metadata accessor for TXTRecordDecoder._Decoder._Container(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TXTRecordDecoder._Decoder._Container);
}

uint64_t sub_183249B90()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t _s7Network16TXTRecordDecoderV8_DecoderVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s7Network16TXTRecordDecoderV8_DecoderVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s7Network16TXTRecordDecoderV8_DecoderVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s7Network16TXTRecordDecoderV8_DecoderVwta_0(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7Network16TXTRecordDecoderV8_DecoderVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_183249D4C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_183249D8C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

unint64_t sub_183249D94()
{
  unint64_t result;

  result = qword_1EDCDCFD0;
  if (!qword_1EDCDCFD0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for FailedConvertion, &type metadata for FailedConvertion);
    atomic_store(result, (unint64_t *)&qword_1EDCDCFD0);
  }
  return result;
}

unint64_t sub_183249DD8()
{
  unint64_t result;

  result = qword_1EDCDCFD8;
  if (!qword_1EDCDCFD8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for MissingRequiredKey, &type metadata for MissingRequiredKey);
    atomic_store(result, (unint64_t *)&qword_1EDCDCFD8);
  }
  return result;
}

_BYTE *sub_183249E1C@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_183249E6C(a1, MEMORY[0x1E0DEEA58], a2);
}

_QWORD *sub_183249E38@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1832F0E6C(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

_BYTE *sub_183249E50@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_183249E6C(a1, MEMORY[0x1E0DEEA50], a2);
}

_BYTE *sub_183249E6C@<X0>(_BYTE *result@<X0>, uint64_t (*a2)(void)@<X1>, BOOL *a3@<X8>)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;

  v4 = *result;
  v5 = v4 > 0x20;
  v6 = (1 << v4) & 0x100003E01;
  v7 = v5 || v6 == 0;
  v8 = v7 && (result = (_BYTE *)a2()) != 0 && *result == 0;
  *a3 = v8;
  return result;
}

unint64_t sub_183249EDC()
{
  unint64_t result;

  result = qword_1EDCDCFE0;
  if (!qword_1EDCDCFE0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for InvalidValue, &type metadata for InvalidValue);
    atomic_store(result, (unint64_t *)&qword_1EDCDCFE0);
  }
  return result;
}

_QWORD *sub_183249F28@<X0>(_BYTE *a1@<X8>)
{
  return sub_183249E38(a1);
}

uint64_t sub_183249F4C()
{
  nw_protocol_definition_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v0 = nw_protocol_copy_tls_definition();
  type metadata accessor for NWProtocolDefinition();
  v1 = (_QWORD *)swift_allocObject();
  v1[4] = v0;
  v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  v3 = sub_183B916E0();
  v5 = v4;

  result = swift_unknownObjectRelease();
  v1[2] = v3;
  v1[3] = v5;
  qword_1EDCD7B40 = (uint64_t)v1;
  return result;
}

uint64_t static NWProtocolTLS.definition.getter()
{
  if (qword_1EDCD7AD0 != -1)
    swift_once();
  return swift_retain();
}

sec_protocol_options_t sub_18324A01C()
{
  uint64_t v0;

  return nw_tls_copy_sec_protocol_options(*(nw_protocol_options_t *)(v0 + 16));
}

BOOL sub_18324A024(NSObject *a1)
{
  NSObject *v1;
  NSObject *v2;
  _BOOL8 is_equal;

  v1 = nw_protocol_options_copy_definition(a1);
  v2 = nw_protocol_copy_tls_definition();
  is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolTLS.Options.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = nw_tls_create_options();
  return v0;
}

uint64_t NWProtocolTLS.Options.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = nw_tls_create_options();
  return v0;
}

uint64_t sub_18324A0CC(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t NWProtocolTLS.Options.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

sec_protocol_metadata_t sub_18324A11C()
{
  uint64_t v0;

  return nw_tls_copy_sec_protocol_metadata(*(nw_protocol_metadata_t *)(v0 + 16));
}

BOOL sub_18324A124(NSObject *a1)
{
  return nw_protocol_metadata_is_tls(a1);
}

uint64_t NWProtocolTLS.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NWProtocolTLS.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NWProtocolTLS()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolTLS.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolTLS.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolTLS.Options.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for NWProtocolTLS.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolTLS.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t NWActorSystemInvocationEncoder.recordGenericSubstitution<A>(_:)()
{
  _QWORD **v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  result = sub_183B91F20();
  if (v2)
  {
    v3 = result;
    v4 = v2;
    v5 = *v0;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_183242590(0, v5[2] + 1, 1, v5);
      v5 = (_QWORD *)result;
    }
    v7 = v5[2];
    v6 = v5[3];
    if (v7 >= v6 >> 1)
    {
      result = (uint64_t)sub_183242590((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
      v5 = (_QWORD *)result;
    }
    v5[2] = v7 + 1;
    v8 = &v5[2 * v7];
    v8[4] = v3;
    v8[5] = v4;
    *v0 = v5;
  }
  return result;
}

uint64_t NWActorSystemInvocationEncoder.recordArgument<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v4 = swift_conformsToProtocol();
  v5 = swift_conformsToProtocol();
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v18 - v10;
  sub_183B91518();
  sub_183B9150C();
  v13 = (uint64_t *)(v2 + 8);
  v12 = *(_QWORD **)(v2 + 8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v13 = (uint64_t)v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = sub_1832426B0(0, v12[2] + 1, 1, v12);
    *v13 = (uint64_t)v12;
  }
  v16 = v12[2];
  v15 = v12[3];
  if (v16 >= v15 >> 1)
    *v13 = (uint64_t)sub_1832426B0((_QWORD *)(v15 > 1), v16 + 1, 1, v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, a2);
  sub_18324A808(v16, (uint64_t)v9, v13, a2, v4, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, a2);
}

uint64_t NWActorSystemInvocationEncoder.recordReturnType<A>(_:)()
{
  swift_conformsToProtocol();
  return swift_conformsToProtocol();
}

_QWORD *sub_18324A464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_0;
  void (*v15)(_BYTE *, _QWORD);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v27[3];
  uint64_t v28;
  _BYTE v29[32];
  uint64_t v30;

  v6 = sub_183B91F44();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NWFileSerializationContext(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(v2 + 8);
  sub_18324A894(a1, (uint64_t)v12);
  sub_183058C44(a2, (uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  sub_183B912A8();
  swift_allocObject();
  sub_183B9129C();
  if (qword_1EDCDC618 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v6, (uint64_t)qword_1EDCF2A78);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v13, v6);
  v28 = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v27);
  sub_183058C44((uint64_t)v12, (uint64_t)boxed_opaque_existential_0, type metadata accessor for NWFileSerializationContext);
  v15 = (void (*)(_BYTE *, _QWORD))sub_183B91290();
  sub_1832A5D5C((uint64_t)v27, (uint64_t)v9);
  v15(v29, 0);
  sub_18324A8F0((uint64_t)v12);
  v16 = *(_QWORD *)(v30 + 16);
  if (v16)
  {
    v17 = v30 + 32;
    swift_bridgeObjectRetain();
    v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      sub_18324A92C(v17, (uint64_t)v27);
      __swift_project_boxed_opaque_existential_2(v27, v28);
      v19 = sub_183B91284();
      if (v3)
        break;
      v21 = v19;
      v22 = v20;
      sub_18324A994(v19, v20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_1832427D4(0, v18[2] + 1, 1, v18);
      v24 = v18[2];
      v23 = v18[3];
      if (v24 >= v23 >> 1)
        v18 = sub_1832427D4((_QWORD *)(v23 > 1), v24 + 1, 1, v18);
      v18[2] = v24 + 1;
      v25 = &v18[2 * v24];
      v25[4] = v21;
      v25[5] = v22;
      sub_18308485C(v21, v22);
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v27);
      v17 += 48;
      if (!--v16)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v18;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v27);
  }
  else
  {
    swift_release();
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v18;
}

uint64_t sub_18324A74C()
{
  return NWActorSystemInvocationEncoder.recordGenericSubstitution<A>(_:)();
}

uint64_t sub_18324A760(uint64_t a1, uint64_t a2)
{
  swift_conformsToProtocol();
  swift_conformsToProtocol();
  return NWActorSystemInvocationEncoder.recordArgument<A>(_:)(a1, a2);
}

uint64_t sub_18324A7BC()
{
  swift_conformsToProtocol();
  swift_conformsToProtocol();
  return NWActorSystemInvocationEncoder.recordReturnType<A>(_:)();
}

_OWORD *sub_18324A808(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *boxed_opaque_existential_0;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = a4;
  v15 = a5;
  v16 = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  v11 = *a3;
  *(_QWORD *)(v11 + 16) = a1 + 1;
  return sub_18324A9D8(&v13, (_OWORD *)(v11 + 48 * a1 + 32));
}

ValueMetadata *type metadata accessor for NWActorSystemInvocationEncoder()
{
  return &type metadata for NWActorSystemInvocationEncoder;
}

uint64_t sub_18324A894(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_18324A8F0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NWFileSerializationContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18324A92C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_2(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_18324A994(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

_OWORD *sub_18324A9D8(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_18324A9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  uint64_t *boxed_opaque_existential_0;
  void (*v12)(_BYTE *, _QWORD);
  _BYTE v14[32];
  uint64_t v15[3];
  uint64_t v16;

  v4 = sub_183B91F44();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_183B91278();
  swift_allocObject();
  v8 = sub_183B9126C();
  sub_183B91F2C();
  v16 = type metadata accessor for NWActorSystem();
  v15[0] = a1;
  swift_retain();
  v9 = (void (*)(_BYTE *, _QWORD))sub_183B91260();
  sub_1832A5D5C((uint64_t)v15, (uint64_t)v7);
  v9(v14, 0);
  if (qword_1EDCDC618 != -1)
    swift_once();
  v10 = __swift_project_value_buffer(v4, (uint64_t)qword_1EDCF2A78);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
  v16 = type metadata accessor for NWFileSerializationContext(0);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v15);
  sub_18324AB70(a2, (uint64_t)boxed_opaque_existential_0);
  v12 = (void (*)(_BYTE *, _QWORD))sub_183B91260();
  sub_1832A5D5C((uint64_t)v15, (uint64_t)v7);
  v12(v14, 0);
  return v8;
}

uint64_t sub_18324AB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWFileSerializationContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t HTTPRequest.url.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  _QWORD v25[4];
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  char v30;
  uint64_t v31;
  uint64_t v32;

  if (!v1[8])
    goto LABEL_6;
  v3 = v1[15];
  if (!v3)
    goto LABEL_6;
  v4 = v1[13];
  v5 = v1[14];
  v6 = v1[16];
  v7 = v1[17];
  v9 = v1[18];
  v8 = v1[19];
  v11 = v1[20];
  v10 = v1[21];
  v12 = v1[22];
  v13 = v1[23];
  v15 = v1[24];
  v14 = v1[25];
  v17 = v1[26];
  v16 = v1[27];
  v18 = v1[12];
  v25[0] = v5;
  v25[1] = v3;
  v25[2] = v6;
  v25[3] = v7;
  v26 = v9;
  v27 = v8;
  v28 = v11;
  if (v12)
  {
    v22 = v5;
    v23 = v12;
    v21 = v4;
    v29[0] = v10;
    v29[1] = v12;
    v29[2] = v13;
    v29[3] = v15;
    v30 = v14;
    v31 = v17;
    v32 = v16;
    if ((sub_18324BC90(v18, v4) & 1) != 0)
    {
      v24[0] = v18;
      v24[1] = v21;
      sub_18324C148(v22, v3);
      sub_18324C148(v10, v23);
      sub_18324C148(v22, v3);
      sub_18324C148(v10, v23);
      sub_18324C148(v22, v3);
      sub_18324C148(v10, v23);
      swift_bridgeObjectRetain();
      sub_18324BE24(v24, (uint64_t)v25, (uint64_t)v29, a1);
      swift_bridgeObjectRelease();
      sub_18324C184(v22, v3);
      sub_18324C184(v10, v23);
      sub_18324C184(v22, v3);
      return sub_18324C184(v10, v23);
    }
    else
    {
      sub_18324C148(v10, v23);
      sub_18324C148(v22, v3);
      sub_18324C148(v10, v23);
      sub_18324C148(v22, v3);
      sub_1832FE54C(v18, v21, (uint64_t)v25, (uint64_t)v29, a1);
      sub_18324C184(v22, v3);
      return sub_18324C184(v10, v23);
    }
  }
  else
  {
LABEL_6:
    v20 = sub_183B913A4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 1, 1, v20);
  }
}

uint64_t sub_18324AFC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18324C1C0(a1, (uint64_t)v4);
  return HTTPRequest.url.setter((uint64_t)v4);
}

uint64_t HTTPRequest.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_183B913A4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18324C1C0(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_18324C208((uint64_t)v6);
    sub_18324C184(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    *(_QWORD *)(v2 + 104) = 0;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    sub_18324C184(*(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
    *(_QWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    sub_18324C184(*(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
    *(_QWORD *)(v2 + 216) = 0;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    return sub_18324C208(a1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_18324B5F4();
    v13 = v12;
    v14 = sub_183B917A0();
    v16 = v15;
    swift_bridgeObjectRelease();
    HTTPRequest.scheme.setter(v14, v16);
    if (v13)
    {
      swift_bridgeObjectRetain();
      v17 = sub_183B917A0();
      v19 = v18;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v17 = 0;
      v19 = 0;
    }
    HTTPRequest.authority.setter(v17, v19);
    v20 = sub_183B917A0();
    v22 = v21;
    swift_bridgeObjectRelease();
    HTTPRequest.path.setter(v20, v22);
    sub_18324C208(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_18324B284@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD v19[2];

  v12 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  if ((sub_18324BC90(v12, v11) & 1) == 0)
    return sub_1832FEA38(v12, v11, a4, a5, a1, a2, a6);
  swift_bridgeObjectRetain();
  if ((v11 & 0x1000000000000000) != 0)
  {
    v12 = sub_1832F5B78();
    v17 = v16;
    swift_bridgeObjectRelease();
    v11 = v17;
    if ((v17 & 0x2000000000000000) == 0)
    {
LABEL_4:
      if ((v12 & 0x1000000000000000) != 0)
      {
        v13 = (char *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v14 = (char *)(v12 & 0xFFFFFFFFFFFFLL);
      }
      else
      {
        v13 = (char *)sub_183B91E78();
        v14 = v18;
      }
      goto LABEL_9;
    }
  }
  else if ((v11 & 0x2000000000000000) == 0)
  {
    goto LABEL_4;
  }
  v14 = (char *)(HIBYTE(v11) & 0xF);
  v19[0] = v12;
  v19[1] = v11 & 0xFFFFFFFFFFFFFFLL;
  v13 = (char *)v19;
LABEL_9:
  sub_18324B3AC(a4, a5, a1, a2, v13, v14, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18324B3AC@<X0>(char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  char *v21;
  BOOL v22;
  char *v23;
  uint64_t v24;
  char *v25;
  CFIndex v26;
  const __CFAllocator *v27;
  CFURLRef v28;
  CFURLRef v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v35 = a5;
  v13 = sub_183B913A4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  result = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a2 + 3;
  if (__OFADD__(a2, 3))
  {
    __break(1u);
    goto LABEL_12;
  }
  v22 = __OFADD__(v21, a4);
  v23 = &a4[(_QWORD)v21];
  if (v22)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v22 = __OFADD__(v23, a6);
  v24 = (uint64_t)&a6[(_QWORD)v23];
  if (v22)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v34 = a7;
  v36 = sub_1832428E0(0, v24 & ~(v24 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  sub_1832BF8BC(a1, a2);
  sub_1832BFAD0(3092282, 0xE300000000000000);
  sub_1832BF8BC(a3, a4);
  sub_1832BF8BC(v35, a6);
  v25 = v36;
  v26 = *((_QWORD *)v36 + 2);
  v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  swift_bridgeObjectRetain();
  v28 = CFURLCreateAbsoluteURLWithBytes(v27, (const UInt8 *)v25 + 32, v26, 0x600u, 0, 0);
  if (v28)
  {
    v29 = v28;
    sub_183B91374();
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v16, v13);
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v30(v20, 0, 1, v13);

  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v30(v20, 1, 1, v13);
  }
  swift_bridgeObjectRelease_n();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v20, 1, v13) == 1)
  {
    sub_18324C208((uint64_t)v20);
    v31 = 1;
    v32 = v34;
  }
  else
  {
    v32 = v34;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v34, v20, v13);
    v31 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v30)(v32, v31, 1, v13);
}

uint64_t sub_18324B5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  const __CFURL *v4;
  CFIndex isStackAllocationSafe;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  UInt8 *v9;
  _BYTE v11[16];
  uint64_t v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  v0 = sub_183B913A4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_183B91338();
  v4 = (const __CFURL *)sub_183B9135C();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  isStackAllocationSafe = CFURLGetBytes(v4, 0, 0);
  if (isStackAllocationSafe < 0)
    __break(1u);
  v6 = isStackAllocationSafe;
  if (isStackAllocationSafe <= 1024
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    sub_18324B9E4(&v11[-v7], v6, v4, v12);
    v8 = v12[0];

  }
  else
  {
    v9 = (UInt8 *)swift_slowAlloc();
    sub_18324B9E4(v9, v6, v4, v12);
    MEMORY[0x186DB563C](v9, -1, -1);

    return v12[0];
  }
  return v8;
}

void (*HTTPRequest.url.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  const void *v1;
  size_t v3;
  void *v4;
  _BYTE v6[288];

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  memcpy(v6, v1, sizeof(v6));
  HTTPRequest.url.getter((uint64_t)v4);
  return sub_18324B84C;
}

void sub_18324B84C(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_18324C1C0((uint64_t)v3, (uint64_t)v2);
    HTTPRequest.url.setter((uint64_t)v2);
    sub_18324C208((uint64_t)v3);
  }
  else
  {
    HTTPRequest.url.setter((uint64_t)v3);
  }
  free(v3);
  free(v2);
}

void *HTTPRequest.init(method:url:headerFields:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23[2];
  _BYTE __src[296];

  v6 = *a1;
  v5 = a1[1];
  v20 = *a3;
  sub_18324B5F4();
  v8 = v7;
  v9 = sub_183B917A0();
  v11 = v10;
  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_bridgeObjectRetain();
    v12 = sub_183B917A0();
    v14 = v13;
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = sub_183B917A0();
  v17 = v16;
  swift_bridgeObjectRelease();
  v23[0] = v6;
  v23[1] = v5;
  v22 = v20;
  HTTPRequest.init(method:scheme:authority:path:headerFields:)(v23, v9, v11, v12, v14, v15, v17, &v22, (uint64_t)__src);
  v18 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
  return memcpy(a4, __src, 0x120uLL);
}

uint64_t sub_18324B9E4@<X0>(UInt8 *buffer@<X0>, CFIndex bufferLength@<X1>, CFURLRef url@<X2>, uint64_t *a4@<X8>)
{
  CFRange v7;
  uint64_t v8;
  CFRange v9;
  CFIndex length;
  CFRange v11;
  CFIndex v12;
  char *v13;
  uint64_t v14;
  CFRange v15;
  CFIndex location;
  CFIndex v17;
  CFRange v18;
  CFIndex v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  CFIndex v23;

  CFURLGetBytes(url, buffer, bufferLength);
  v7 = CFURLGetByteRangeForComponent(url, kCFURLComponentScheme, 0);
  if (v7.location == -1)
  {
    __break(1u);
    goto LABEL_41;
  }
  if (__OFADD__(v7.location, v7.length))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v7.location + v7.length < v7.location)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v8 = sub_1832F6278((char *)v7.location, v7.length);
  v9 = CFURLGetByteRangeForComponent(url, kCFURLComponentHost, 0);
  if (v9.location == -1)
  {
    v14 = 0;
    goto LABEL_15;
  }
  length = v9.length;
  v11 = CFURLGetByteRangeForComponent(url, kCFURLComponentPort, 0);
  if (v11.location != -1)
  {
    v12 = v11.location + v11.length;
    if (__OFADD__(v11.location, v11.length))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    length = v12 - v9.location;
    if (__OFSUB__(v12, v9.location))
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
  }
  if (__OFADD__(v9.location, length))
    goto LABEL_43;
  if (v9.location + length < v9.location)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (buffer)
    v13 = (char *)&buffer[v9.location];
  else
    v13 = 0;
  v14 = sub_1832F6278(v13, length);
LABEL_15:
  v15 = CFURLGetByteRangeForComponent(url, kCFURLComponentPath, 0);
  location = v15.location;
  v18 = CFURLGetByteRangeForComponent(url, kCFURLComponentQuery, 0);
  v17 = v18.length;
  if (v15.location == -1)
    goto LABEL_21;
  if (v18.location != -1)
  {
    v19 = v18.location + v18.length;
    if (__OFADD__(v18.location, v18.length))
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    v17 = v19 - v15.location;
    if (!__OFSUB__(v19, v15.location))
    {
LABEL_22:
      if (v15.length)
        goto LABEL_23;
      goto LABEL_31;
    }
    __break(1u);
LABEL_21:
    location = v18.location;
    goto LABEL_22;
  }
  v17 = v15.length;
  if (v15.length)
  {
LABEL_23:
    if (!__OFADD__(location, v17))
    {
      if (location + v17 >= location)
      {
        if (buffer)
          v20 = (char *)&buffer[location];
        else
          v20 = 0;
        result = sub_1832F6278(v20, v17);
        goto LABEL_29;
      }
      goto LABEL_46;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_31:
  if (!v17)
  {
    result = sub_18327408C(47, 0xE100000000000000);
LABEL_29:
    v22 = result;
LABEL_38:
    *a4 = v8;
    a4[1] = v14;
    a4[2] = v22;
    return result;
  }
  if (__OFADD__(location, v17))
    goto LABEL_50;
  if (location + v17 < location)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v23 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    *(_BYTE *)(MEMORY[0x1E0DEE9D8] + 32) = 47;
    __break(1u);
    goto LABEL_54;
  }
  if ((v23 & 0x8000000000000000) == 0)
  {
    if (v17 != -1)
    {
      v22 = sub_183B91980();
      *(_QWORD *)(v22 + 16) = v23;
      *(_BYTE *)(v22 + 32) = 47;
      result = sub_183B91D1C();
      *(_QWORD *)(v22 + 16) = v23;
      goto LABEL_38;
    }
    goto LABEL_53;
  }
LABEL_54:
  result = sub_183B91F50();
  __break(1u);
  return result;
}

unint64_t sub_18324BC90(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v5 = 4 * v4;
  v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  v7 = 4 << v6;
  v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v8 = 15;
  while (1)
  {
    v9 = v8 >> 14;
    if (v8 >> 14 == v5)
      return v9 == v5;
    v10 = v8 & 0xC;
    result = v8;
    if (v10 == v7)
      result = sub_18329687C(v8, a1, a2);
    v12 = result >> 16;
    if (result >> 16 >= v4)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = sub_183B91848();
      v13 = result;
      if (v10 == v7)
        goto LABEL_24;
LABEL_19:
      if ((a2 & 0x1000000000000000) == 0)
        goto LABEL_7;
LABEL_20:
      if (v4 <= v8 >> 16)
        goto LABEL_28;
      v8 = sub_183B91818();
      if (v13 < 0)
        return v9 == v5;
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v15[0] = a1;
        v15[1] = v16;
        v13 = *((_BYTE *)v15 + v12);
        if (v10 == v7)
          goto LABEL_24;
        goto LABEL_19;
      }
      result = v14;
      if ((a1 & 0x1000000000000000) == 0)
        result = sub_183B91E78();
      v13 = *(_BYTE *)(result + v12);
      if (v10 != v7)
        goto LABEL_19;
LABEL_24:
      result = sub_18329687C(v8, a1, a2);
      v8 = result;
      if ((a2 & 0x1000000000000000) != 0)
        goto LABEL_20;
LABEL_7:
      v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v13 < 0)
        return v9 == v5;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_18324BE24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;
  char *v27;
  uint64_t v28[2];
  unint64_t v29;
  uint64_t v30;

  v8 = *a1;
  v9 = a1[1];
  if ((v9 & 0x1000000000000000) != 0)
  {
    v8 = sub_1832F5B78();
    v22 = v21;
    swift_bridgeObjectRelease();
    *a1 = v8;
    a1[1] = v22;
    v9 = v22;
    if ((v22 & 0x2000000000000000) == 0)
      goto LABEL_3;
  }
  else if ((v9 & 0x2000000000000000) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000) != 0)
    {
      v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v11 = (char *)(v8 & 0xFFFFFFFFFFFFLL);
    }
    else
    {
      v10 = (char *)sub_183B91E78();
      v11 = v27;
    }
    v13 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    if ((sub_18324BC90(v13, v12) & 1) != 0)
    {
      v29 = v13;
      v30 = v12;
      sub_18324C26C(a3);
      sub_18324C26C(a3);
      sub_18324C26C(a3);
      swift_bridgeObjectRetain();
      sub_18324C060((uint64_t *)&v29, a3, v10, v11, a4);
      if (!v4)
        goto LABEL_12;
      sub_18324C2B4(a3);
      sub_18324C2B4(a3);
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_18;
    }
    sub_18324C26C(a3);
    v14 = a4;
    v15 = v13;
    v16 = v12;
    v17 = a3;
    v18 = v10;
    v19 = v11;
LABEL_14:
    sub_1832FE7D0(v15, v16, v17, v18, v19, v14);
    goto LABEL_15;
  }
  v23 = (char *)(HIBYTE(v9) & 0xF);
  v29 = v8;
  v30 = v9 & 0xFFFFFFFFFFFFFFLL;
  v25 = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  if ((sub_18324BC90(v25, v24) & 1) == 0)
  {
    sub_18324C26C(a3);
    v18 = (char *)&v29;
    v14 = a4;
    v15 = v25;
    v16 = v24;
    v17 = a3;
    v19 = v23;
    goto LABEL_14;
  }
  v28[0] = v25;
  v28[1] = v24;
  sub_18324C26C(a3);
  sub_18324C26C(a3);
  sub_18324C26C(a3);
  swift_bridgeObjectRetain();
  sub_18324C060(v28, a3, (char *)&v29, v23, a4);
  if (!v4)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    sub_18324C2B4(a3);
    sub_18324C2B4(a3);
LABEL_15:
    sub_18324C2B4(a2);
    return sub_18324C2B4(a3);
  }
LABEL_18:
  sub_18324C2B4(a3);
  sub_18324C2B4(a3);
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_18324C060@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v9 = *a1;
  v10 = a1[1];
  if ((v10 & 0x1000000000000000) == 0)
  {
    if ((v10 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v12 = (char *)(HIBYTE(v10) & 0xF);
    v17[0] = v9;
    v17[1] = v10 & 0xFFFFFFFFFFFFFFLL;
    v11 = (char *)v17;
    goto LABEL_7;
  }
  v9 = sub_1832F5B78();
  v15 = v14;
  swift_bridgeObjectRelease();
  *a1 = v9;
  a1[1] = v15;
  v10 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v9 & 0x1000000000000000) != 0)
  {
    v11 = (char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v12 = (char *)(v9 & 0xFFFFFFFFFFFFLL);
  }
  else
  {
    v11 = (char *)sub_183B91E78();
  }
LABEL_7:
  sub_18324B284(v11, v12, a2, a3, a4, a5);
  return sub_18324C2B4(a2);
}

uint64_t sub_18324C148(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_18324C184(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18324C1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18324C208(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC358);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18324C248@<X0>(uint64_t a1@<X8>)
{
  return HTTPRequest.url.getter(a1);
}

uint64_t sub_18324C26C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_18324C2B4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18324C2FC()
{
  uint64_t v0;

  sub_183B912A8();
  swift_allocObject();
  sub_183B9129C();
  sub_18324C610();
  v0 = sub_183B91284();
  swift_release();
  return v0;
}

uint64_t sub_18324C394()
{
  uint64_t v0;

  sub_183B912A8();
  swift_allocObject();
  sub_183B9129C();
  sub_18324C698();
  v0 = sub_183B91284();
  swift_release();
  return v0;
}

uint64_t sub_18324C424(uint64_t a1, uint64_t a2)
{
  return sub_18324C50C(a1, a2, &qword_1EDCDD008, (uint64_t (*)(uint64_t))_s9HandshakeVMa, (uint64_t)&unk_183BA1D7C);
}

uint64_t sub_18324C450()
{
  uint64_t v0;

  sub_183B912A8();
  swift_allocObject();
  sub_183B9129C();
  sub_18324C654();
  v0 = sub_183B91284();
  swift_release();
  return v0;
}

uint64_t sub_18324C4E0(uint64_t a1, uint64_t a2)
{
  return sub_18324C50C(a1, a2, &qword_1EDCDCFE8, type metadata accessor for RemoteCallEnvelope, (uint64_t)&unk_183BA6340);
}

uint64_t sub_18324C50C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;

  sub_183B912A8();
  swift_allocObject();
  sub_183B9129C();
  sub_183064644(a3, a4, a5);
  v8 = sub_183B91284();
  swift_release();
  return v8;
}

uint64_t sub_18324C5B8(uint64_t a1, uint64_t a2)
{
  return sub_18324C50C(a1, a2, &qword_1EDCDCFF8, type metadata accessor for CancelRemoteCall, (uint64_t)&unk_183BA6464);
}

uint64_t sub_18324C5E4(uint64_t a1, uint64_t a2)
{
  return sub_18324C50C(a1, a2, &qword_1EDCDCFF0, (uint64_t (*)(uint64_t))type metadata accessor for ReplyEnvelope, (uint64_t)&unk_183BA6A40);
}

unint64_t sub_18324C610()
{
  unint64_t result;

  result = qword_1EDCDD000;
  if (!qword_1EDCDD000)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1234, &_s19FileTransferRequestVN);
    atomic_store(result, (unint64_t *)&qword_1EDCDD000);
  }
  return result;
}

unint64_t sub_18324C654()
{
  unint64_t result;

  result = qword_1EDCDD010;
  if (!qword_1EDCDD010)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1D54, &_s17HandshakeResponseVN);
    atomic_store(result, (unint64_t *)&qword_1EDCDD010);
  }
  return result;
}

unint64_t sub_18324C698()
{
  unint64_t result;

  result = qword_1EDCDD018;
  if (!qword_1EDCDD018)
  {
    result = MEMORY[0x186DB5558](&unk_183BA125C, &_s20FileTransferResponseVN);
    atomic_store(result, (unint64_t *)&qword_1EDCDD018);
  }
  return result;
}

uint64_t sub_18324C6DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2) & 1;
}

uint64_t NWBrowser.__allocating_init(for:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  NWBrowser.init(for:using:)(a1, a2);
  return v4;
}

Swift::Void __swiftcall NWBrowser.cancel()()
{
  uint64_t v0;
  uint64_t v1;

  if (nw_utilities_minos_atleast())
  {
    v1 = *(_QWORD *)(v0 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 80));
    sub_1830630AC(*(_QWORD *)(v1 + 40));
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0;
    sub_1830630AC(*(_QWORD *)(v1 + 56));
    *(_QWORD *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 64) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 80));
  }
  nw_browser_cancel(*(nw_browser_t *)(v0 + 16));
}

void NWBrowser.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v5 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 80));
  v6 = *(_QWORD *)(v5 + 40);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 80));
  if (a1)
  {
    v7 = *(NSObject **)(v2 + 16);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v10[4] = sub_18324FC90;
    v10[5] = v8;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_182FED9C4;
    v10[3] = &block_descriptor_0;
    v9 = _Block_copy(v10);
    sub_183061488(a1);
    sub_183061488(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_browser_set_state_changed_handler(v7, v9);
    sub_1830630AC(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_1830630AC(a1);
  }
  else
  {
    nw_browser_set_state_changed_handler(*(nw_browser_t *)(v2 + 16), 0);
  }
}

uint64_t NWBrowser.browseResultsChangedHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  void *v9;
  _QWORD v11[6];

  v5 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 80));
  v6 = *(_QWORD *)(v5 + 56);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 64) = a2;
  LODWORD(v6) = *(unsigned __int8 *)(v5 + 32);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 80));
  if ((_DWORD)v6 != 1)
    return sub_1830630AC(a1);
  v7 = *(NSObject **)(v2 + 16);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v2;
  v8[3] = a1;
  v8[4] = a2;
  v11[4] = sub_18324FD18;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_18324F8E0;
  v11[3] = &block_descriptor_6_0;
  v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  sub_183061488(a1);
  swift_release();
  nw_browser_set_browse_results_changed_handler(v7, v9);
  sub_1830630AC(a1);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

void NWBrowser.start(queue:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  NSObject *v9;
  __int128 v10;
  __int128 v11;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 80));
  v5 = *(void **)(v4 + 72);
  v6 = a1;

  *(_QWORD *)(v4 + 72) = a1;
  *(_BYTE *)(v4 + 32) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 80));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 80));
  sub_18324F954(v4 + 16, &v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 80));
  if ((_QWORD)v11)
  {
    v10 = v11;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v10;
    v8 = sub_18324FD24;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  sub_183061488((uint64_t)v8);
  sub_183061488((uint64_t)v8);
  NWBrowser.browseResultsChangedHandler.setter((uint64_t)v8, v7);
  sub_1830630AC((uint64_t)v8);
  sub_1830630AC((uint64_t)v8);
  v9 = *(NSObject **)(v2 + 16);
  nw_browser_set_queue(v9, v6);
  nw_browser_start(v9);
}

uint64_t NWBrowser.debugDescription.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

_QWORD *static NWBrowser.Descriptor.Options.Scope.all.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_18324CD48(&qword_1EDCD75B8, &dword_1EDCD76A0, a1);
}

int *NWBrowser.Descriptor.Options.init(scope:)@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  v3 = *result;
  if (qword_1EDCD75B8 != -1)
    result = (int *)swift_once();
  if (qword_1EDCD7690 != -1)
    result = (int *)swift_once();
  v4 = dword_1EDCD7684;
  *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

int *NWBrowser.Descriptor.Options.init(scope:deviceFilter:)@<X0>(int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;

  v5 = *result;
  if (qword_1EDCD75B8 != -1)
    result = (int *)swift_once();
  if (qword_1EDCD7690 != -1)
    result = (int *)swift_once();
  v6 = dword_1EDCD7684;
  *(_QWORD *)a3 = a2;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

_QWORD *static NWBrowser.Descriptor.Options.DeviceType.all.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_18324CD48(&qword_1EDCD7690, &dword_1EDCD7684, a1);
}

_QWORD *sub_18324CD48@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

int *NWBrowser.Descriptor.Options.init(scope:deviceFilter:deviceTypes:)@<X0>(int *result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  int v7;

  v6 = *result;
  v7 = *a3;
  if (qword_1EDCD75B8 != -1)
    result = (int *)swift_once();
  if (qword_1EDCD7690 != -1)
    result = (int *)swift_once();
  *(_QWORD *)a4 = a2;
  *(_DWORD *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 12) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  return result;
}

uint64_t NWBrowser.Descriptor.Options.Scope.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

void static NWBrowser.Descriptor.Options.Scope.everyone.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void sub_18324CE28()
{
  dword_1EDCD76A0 = 255;
}

uint64_t sub_18324CEA0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_18324CEF4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_18324CF50()
{
  return sub_183B91D4C();
}

uint64_t sub_18324CF68@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_18324CEA0(a1, a2);
}

uint64_t NWBrowser.Descriptor.Options.DeviceType.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NWBrowser.Descriptor.Options.DeviceType.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

void static NWBrowser.Descriptor.Options.DeviceType.iphone.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static NWBrowser.Descriptor.Options.DeviceType.ipad.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static NWBrowser.Descriptor.Options.DeviceType.mac.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static NWBrowser.Descriptor.Options.DeviceType.watch.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static NWBrowser.Descriptor.Options.DeviceType.tv.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static NWBrowser.Descriptor.Options.DeviceType.homepod.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static NWBrowser.Descriptor.Options.DeviceType.vision.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void sub_18324CFE0()
{
  dword_1EDCD7684 = 127;
}

_DWORD *sub_18324D04C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_18324D058(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_18324D060@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_18324D074@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_18324D088@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_18324D09C(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_18324D0CC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_18324D0F8@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_18324D11C(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_18324D130(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_18324D144(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_18324D158@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_18324D16C(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_18324D180(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_18324D194(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_18324D1A8()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *sub_18324D1B8(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t NWBrowser.Descriptor.Options.deviceFilter.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NWBrowser.Descriptor.Options.deviceFilter.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*NWBrowser.Descriptor.Options.deviceFilter.modify())()
{
  return nullsub_1;
}

void NWBrowser.Descriptor.Options.scope.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 8);
}

_DWORD *NWBrowser.Descriptor.Options.scope.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*NWBrowser.Descriptor.Options.scope.modify())()
{
  return nullsub_1;
}

void NWBrowser.Descriptor.Options.deviceTypes.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 12);
}

_DWORD *NWBrowser.Descriptor.Options.deviceTypes.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = *result;
  return result;
}

uint64_t (*NWBrowser.Descriptor.Options.deviceTypes.modify())()
{
  return nullsub_1;
}

uint64_t NWBrowser.Descriptor.Options.applicationServiceEndpointsOnly.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t NWBrowser.Descriptor.Options.applicationServiceEndpointsOnly.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*NWBrowser.Descriptor.Options.applicationServiceEndpointsOnly.modify())()
{
  return nullsub_1;
}

void NWBrowser.Descriptor.nw.getter()
{
  __asm { BR              X10 }
}

nw_browse_descriptor_t sub_18324D2B8()
{
  uint64_t v0;
  const char *v1;
  const char *v2;
  nw_browse_descriptor_t bonjour_service;

  v1 = (const char *)(sub_183B91758() + 32);
  if (v0)
    v2 = (const char *)(sub_183B91758() + 32);
  else
    v2 = 0;
  bonjour_service = nw_browse_descriptor_create_bonjour_service(v1, v2);
  swift_release();
  swift_unknownObjectRelease();
  return bonjour_service;
}

uint64_t NWBrowser.Descriptor.init(_:)@<X0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  int type;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *application_service_name;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  _BOOL4 include_txt_record;
  unsigned int browse_scope;
  uint64_t device_types;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];
  uint64_t v29;

  type = nw_browse_descriptor_get_type(a1);
  if (type == 2)
  {
    application_service_name = nw_browse_descriptor_get_application_service_name(a1);
    if (!application_service_name)
      goto LABEL_8;
    v12 = (uint64_t)application_service_name;
    v13 = nw_browse_descriptor_get_invitation_scope(a1) - 1;
    if (v13 < 3)
    {
      v14 = sub_183B91800();
      v16 = v15;
      result = swift_unknownObjectRelease();
      *(_QWORD *)a2 = v14;
      *(_QWORD *)(a2 + 8) = v16;
      *(_QWORD *)(a2 + 16) = v13;
      *(_QWORD *)(a2 + 24) = 0;
      v18 = 0x80;
      goto LABEL_18;
    }
    browse_scope = nw_browse_descriptor_get_browse_scope(a1);
    device_types = nw_browse_descriptor_get_device_types(a1);
    v29 = MEMORY[0x1E0DEE9D8];
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = &v29;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = sub_18323E6EC;
    *(_QWORD *)(v23 + 24) = v22;
    aBlock[4] = sub_18306433C;
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_18324C6DC;
    aBlock[3] = &block_descriptor_18;
    v24 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    nw_browse_descriptor_enumerate_device_filters(a1, v24);
    _Block_release(v24);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v12 = sub_183B91800();
      v23 = v26;
      isEscapingClosureAtFileLocation = v29;
      v27 = qword_1EDCD75B8;
      swift_bridgeObjectRetain();
      if (v27 == -1)
      {
LABEL_15:
        if (qword_1EDCD7690 != -1)
          swift_once();
        swift_unknownObjectRelease();
        swift_release();
        result = swift_bridgeObjectRelease();
        *(_QWORD *)a2 = v12;
        *(_QWORD *)(a2 + 8) = v23;
        *(_QWORD *)(a2 + 16) = isEscapingClosureAtFileLocation;
        *(_QWORD *)(a2 + 24) = browse_scope | (unint64_t)(device_types << 32);
        v18 = 96;
        goto LABEL_18;
      }
    }
    swift_once();
    goto LABEL_15;
  }
  if (type != 1)
  {
LABEL_8:
    result = swift_unknownObjectRelease();
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    v18 = -2;
    goto LABEL_18;
  }
  nw_browse_descriptor_get_bonjour_service_type(a1);
  v5 = sub_183B91800();
  v7 = v6;
  if (nw_browse_descriptor_get_bonjour_service_domain(a1))
  {
    v8 = sub_183B91800();
    v10 = v9;
  }
  else
  {
    v8 = 0;
    v10 = 0xE000000000000000;
  }
  include_txt_record = nw_browse_descriptor_get_include_txt_record(a1);
  result = swift_unknownObjectRelease();
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v10;
  if (!include_txt_record)
  {
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  v18 = 32;
LABEL_18:
  *(_BYTE *)(a2 + 32) = v18;
  return result;
}

uint64_t sub_18324D738@<X0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject **v10;
  void *v11;
  NSObject *endpoint;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  nw_txt_record_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  nw_txt_record_t v27;
  uint64_t aBlock;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for NWBrowser.Result(0);
  v8 = *((_QWORD *)v7 - 1);
  MEMORY[0x1E0C80A78](v7);
  v10 = (nw_txt_record_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v8 + 56))(a2, 1, 1, v7);
  *v10 = a1;
  v11 = (void *)swift_unknownObjectRetain_n();
  endpoint = nw_browse_result_get_endpoint(v11);
  sub_183056F9C(endpoint, (uint64_t)v6);
  v13 = type metadata accessor for NWEndpoint();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v6, 1, v13);
  if ((_DWORD)result == 1)
    goto LABEL_10;
  sub_183058EC4((uint64_t)v6, (uint64_t)v10 + v7[5], (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  v34 = MEMORY[0x1E0DEE9D8];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = &v34;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_18306438C;
  *(_QWORD *)(v16 + 24) = v15;
  v32 = sub_183064360;
  v33 = v16;
  v17 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v29 = 1107296256;
  v30 = sub_1830642F4;
  v31 = &block_descriptor_60;
  v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_browse_result_enumerate_interfaces(a1, v18);
  _Block_release(v18);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v18 & 1) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  *(NSObject **)((char *)v10 + v7[6]) = v34;
  swift_bridgeObjectRetain();
  v19 = nw_browse_result_copy_txt_record_object(a1);
  if (v19)
  {
    v27 = v19;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = MEMORY[0x1E0DEE9E0];
    v21 = (uint64_t *)(v20 + 16);
    v32 = sub_18325762C;
    v33 = v20;
    aBlock = v17;
    v29 = 1107296256;
    v30 = sub_1832F41F8;
    v31 = &block_descriptor_66;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v23 = v27;
    nw_txt_record_apply(v27, v22);
    _Block_release(v22);
    swift_beginAccess();
    v24 = *v21;
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease_n();
    swift_release();
    v25 = (NSObject **)((char *)v10 + v7[7]);
    *v25 = v24;
    v25[1] = v23;
  }
  else
  {
    swift_unknownObjectRelease_n();
    v26 = (NSObject **)((char *)v10 + v7[7]);
    *v26 = 0;
    v26[1] = 0;
  }
  swift_bridgeObjectRelease();
  sub_183058EC4((uint64_t)v10, a2, type metadata accessor for NWBrowser.Result);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v8 + 56))(a2, 0, 1, v7);
  return swift_release();
}

uint64_t NWBrowser.Result.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NWBrowser.Result(0);
  return sub_183058C44(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
}

uint64_t NWBrowser.Result.interfaces.getter()
{
  type metadata accessor for NWBrowser.Result(0);
  return swift_bridgeObjectRetain();
}

uint64_t NWBrowser.Result.metadata.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for NWBrowser.Result(0) + 28));
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_1832506C0(v4);
}

uint64_t NWBrowser.Result.Metadata.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  if (!*v0)
    return 0x3E656E6F6E3CLL;
  v5 = MEMORY[0x1E0DEE9E0];
  sub_1832506C0(v1);
  sub_1832506C0(v1);
  v2 = swift_bridgeObjectRetain();
  sub_18324FE60(v2, &v5);
  swift_bridgeObjectRelease();
  v3 = sub_183B9165C();
  swift_bridgeObjectRelease();
  sub_183253844(v1);
  sub_183253844(v1);
  return v3;
}

void NWBrowser.Result.hash(into:)()
{
  type metadata accessor for NWBrowser.Result(0);
  NWEndpoint.hash(into:)();
}

uint64_t NWBrowser.Result.Change.Flags.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t NWBrowser.Result.Change.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static NWBrowser.Result.Change.Flags.identical.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static NWBrowser.Result.Change.Flags.interfaceAdded.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static NWBrowser.Result.Change.Flags.interfaceRemoved.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static NWBrowser.Result.Change.Flags.metadataChanged.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

_BYTE *sub_18324DCE4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_18324DCF0()
{
  sub_183B92250();
  sub_183B92268();
  return sub_183B9228C();
}

uint64_t sub_18324DD34()
{
  return sub_183B92268();
}

uint64_t sub_18324DD5C()
{
  sub_183B92250();
  sub_183B92268();
  return sub_183B9228C();
}

void sub_18324DD9C(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_18324DDA4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_18324DDB8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_18324DDCC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_18324DDE0(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_18324DE10@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_18324DE3C@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_18324DE60(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_18324DE74(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_18324DE88(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_18324DE9C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_18324DEB0(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_18324DEC4(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_18324DED8(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_18324DEEC()
{
  _BYTE *v0;

  return *v0 == 0;
}

_BYTE *sub_18324DEFC(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_18324DF10@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_18324DF20(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t NWBrowser.Result.Change.init(between:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject **v16;
  uint64_t v17;
  uint64_t v18;
  NSObject **v19;
  uint64_t v20;
  uint64_t v21;
  NSObject **v22;
  uint64_t v23;
  uint64_t v24;
  NSObject **v25;
  uint64_t v26;
  NSObject **v27;
  uint64_t v28;
  unsigned int (*v29)(NSObject **, uint64_t, uint64_t);
  NSObject *v30;
  NSObject *v31;
  nw_browse_result_change_t changes;
  uint64_t v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = a2;
  v48 = a3;
  v47 = type metadata accessor for NWBrowser.Result.Change(0);
  v4 = MEMORY[0x1E0C80A78](v47);
  v46 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v45 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v45 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD76E8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v45 = (uint64_t)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (NSObject **)((char *)&v45 - v15);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (NSObject **)((char *)&v45 - v18);
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (NSObject **)((char *)&v45 - v21);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (NSObject **)((char *)&v45 - v24);
  MEMORY[0x1E0C80A78](v23);
  v27 = (NSObject **)((char *)&v45 - v26);
  v49 = a1;
  sub_183253884(a1, (uint64_t)&v45 - v26);
  v28 = type metadata accessor for NWBrowser.Result(0);
  v29 = *(unsigned int (**)(NSObject **, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48);
  if (v29(v27, 1, v28) == 1)
  {
    sub_1830620D4((uint64_t)v27, &qword_1EDCD76E8);
    v30 = 0;
  }
  else
  {
    v30 = *v27;
    swift_unknownObjectRetain();
    sub_183058AE0((uint64_t)v27, type metadata accessor for NWBrowser.Result);
  }
  sub_183253884(v50, (uint64_t)v25);
  if (v29(v25, 1, v28) == 1)
  {
    sub_1830620D4((uint64_t)v25, &qword_1EDCD76E8);
    v31 = 0;
  }
  else
  {
    v31 = *v25;
    swift_unknownObjectRetain();
    sub_183058AE0((uint64_t)v25, type metadata accessor for NWBrowser.Result);
  }
  changes = nw_browse_result_get_changes(v30, v31);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((changes & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    JUMPOUT(0x18324E3DCLL);
  }
  switch(changes)
  {
    case 0uLL:
    case 1uLL:
      sub_1830620D4(v50, &qword_1EDCD76E8);
      sub_1830620D4(v49, &qword_1EDCD76E8);
      return swift_storeEnumTagMultiPayload();
    case 2uLL:
      v34 = v50;
      sub_183253884(v50, (uint64_t)v22);
      if (v29(v22, 1, v28) == 1)
        goto LABEL_24;
      sub_1830620D4(v34, &qword_1EDCD76E8);
      sub_1830620D4(v49, &qword_1EDCD76E8);
      sub_183058EC4((uint64_t)v22, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
      goto LABEL_18;
    case 4uLL:
      v44 = v49;
      sub_183253884(v49, (uint64_t)v19);
      if (v29(v19, 1, v28) == 1)
        goto LABEL_27;
      sub_1830620D4(v50, &qword_1EDCD76E8);
      sub_1830620D4(v44, &qword_1EDCD76E8);
      sub_183058EC4((uint64_t)v19, (uint64_t)v8, type metadata accessor for NWBrowser.Result);
      swift_storeEnumTagMultiPayload();
      v43 = (uint64_t)v8;
      return sub_183058EC4(v43, v48, type metadata accessor for NWBrowser.Result.Change);
    default:
      v35 = (changes >> 2) & 0xE;
      if (v35)
        v36 = v35;
      else
        v36 = 1;
      v37 = v49;
      sub_183253884(v49, (uint64_t)v16);
      if (v29(v16, 1, v28) == 1)
        goto LABEL_25;
      v10 = v46;
      sub_183058EC4((uint64_t)v16, (uint64_t)v46, type metadata accessor for NWBrowser.Result);
      v38 = v50;
      v39 = v45;
      sub_183253884(v50, v45);
      if (v29((NSObject **)v39, 1, v28) == 1)
        goto LABEL_26;
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD75C0);
      v41 = (uint64_t)&v10[*(int *)(v40 + 48)];
      v42 = *(int *)(v40 + 64);
      sub_1830620D4(v38, &qword_1EDCD76E8);
      sub_1830620D4(v37, &qword_1EDCD76E8);
      sub_183058EC4(v39, v41, type metadata accessor for NWBrowser.Result);
      v10[v42] = v36;
LABEL_18:
      swift_storeEnumTagMultiPayload();
      v43 = (uint64_t)v10;
      return sub_183058EC4(v43, v48, type metadata accessor for NWBrowser.Result.Change);
  }
}

void NWBrowser.Result.Change.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for NWBrowser.Result(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for NWBrowser.Result.Change(0);
  MEMORY[0x1E0C80A78](v3);
  sub_183058C44(v0, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (char *)sub_18324E4D8 + 4 * byte_183B9F3CD[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18324E4D8()
{
  uint64_t v0;
  uint64_t v1;

  sub_183058EC4(v0, v1, type metadata accessor for NWBrowser.Result);
  sub_183B9225C();
  NWEndpoint.hash(into:)();
  return sub_183058AE0(v1, type metadata accessor for NWBrowser.Result);
}

uint64_t NWBrowser.Result.Change.hashValue.getter()
{
  sub_183B92250();
  NWBrowser.Result.Change.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_18324E634()
{
  sub_183B92250();
  NWBrowser.Result.Change.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_18324E674()
{
  sub_183B92250();
  NWBrowser.Result.Change.hash(into:)();
  return sub_183B9228C();
}

uint64_t NWBrowser.Result.hashValue.getter()
{
  sub_183B92250();
  type metadata accessor for NWBrowser.Result(0);
  NWEndpoint.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_18324E6FC()
{
  sub_183B92250();
  NWEndpoint.hash(into:)();
  return sub_183B9228C();
}

void sub_18324E744()
{
  NWEndpoint.hash(into:)();
}

uint64_t sub_18324E768()
{
  sub_183B92250();
  NWEndpoint.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_18324E7B0@<X0>(nw_error_t error@<X1>, int a2@<W0>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  nw_error_domain_t v7;
  uint64_t v8;
  nw_error_domain_t error_domain;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int error_code;

  switch(a2)
  {
    case 0:
      result = swift_unknownObjectRelease();
      v6 = 0x8000000000;
      break;
    case 1:
      result = swift_unknownObjectRelease();
      v6 = 0x8000000001;
      break;
    case 2:
      if (!error)
        goto LABEL_28;
      error_domain = nw_error_get_error_domain(error);
      switch(error_domain)
      {
        case nw_error_domain_tls:
          error_code = nw_error_get_error_code(error);
          result = swift_unknownObjectRelease();
          v6 = error_code | 0x200000000;
          break;
        case nw_error_domain_dns:
          v12 = nw_error_get_error_code(error);
          result = swift_unknownObjectRelease();
          v6 = v12 | 0x100000000;
          break;
        case nw_error_domain_posix:
          nw_error_get_error_code(error);
          v6 = sub_183B915E4();
          result = swift_unknownObjectRelease();
          if ((v6 & 0x100000000) != 0)
            v6 = 22;
          else
            v6 = v6;
          break;
        default:
          result = swift_unknownObjectRelease();
          v6 = 22;
          break;
      }
      break;
    case 4:
      if (!error)
      {
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x18324E990);
      }
      v7 = nw_error_get_error_domain(error);
      switch(v7)
      {
        case nw_error_domain_tls:
          v10 = nw_error_get_error_code(error);
          result = swift_unknownObjectRelease();
          v6 = v10 | 0x4200000000;
          break;
        case nw_error_domain_dns:
          v11 = nw_error_get_error_code(error);
          result = swift_unknownObjectRelease();
          v6 = v11 | 0x4100000000;
          break;
        case nw_error_domain_posix:
          nw_error_get_error_code(error);
          v8 = sub_183B915E4();
          result = swift_unknownObjectRelease();
          if ((v8 & 0x100000000) != 0)
            v6 = 0x4000000016;
          else
            v6 = v8 | 0x4000000000;
          break;
        default:
          v6 = 0x4000000016;
LABEL_4:
          result = swift_unknownObjectRelease();
          break;
      }
      break;
    default:
      v6 = 0x8000000002;
      goto LABEL_4;
  }
  *(_DWORD *)a3 = v6;
  *(_BYTE *)(a3 + 4) = BYTE4(v6);
  return result;
}

Network::NWBrowser::Invitation::Scope_optional __swiftcall NWBrowser.Invitation.Scope.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  Network::NWBrowser::Invitation::Scope_optional result;
  char v5;

  v2 = v1;
  v3 = sub_183B91FC8();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t NWBrowser.Invitation.Scope.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x73646E65697266;
  if (*v0 != 1)
    v1 = 0x656E6F7972657665;
  if (*v0)
    return v1;
  else
    return 0x74696D69786F7270;
}

uint64_t sub_18324EA64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_183310D90(*a1, *a2);
}

uint64_t sub_18324EA70()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_18324EB14()
{
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18324EB94()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

Network::NWBrowser::Invitation::Scope_optional sub_18324EC34(Swift::String *a1)
{
  return NWBrowser.Invitation.Scope.init(rawValue:)(*a1);
}

void sub_18324EC40(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000079;
  v4 = 0xE700000000000000;
  v5 = 0x73646E65697266;
  if (v2 != 1)
  {
    v5 = 0x656E6F7972657665;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x74696D69786F7270;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void NWBrowser.Invitation.scope.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *static NWBrowser.Invitation.wrangler(scope:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t NWBrowser.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_BYTE *)(v1 + 64);
  *(_BYTE *)(a1 + 32) = v6;
  return sub_1832538CC(v2, v3, v4, v5, v6);
}

uint64_t NWBrowser.parameters.getter()
{
  return swift_retain();
}

uint64_t NWBrowser.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int state;
  NSObject *v4;
  uint64_t result;
  uint64_t v6;
  NSObject *v7;
  nw_error_domain_t v8;
  unsigned int v9;
  NSObject *v10;
  nw_error_domain_t error_domain;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int error_code;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v16[0] = 0;
  state = nw_browser_get_state(*(void **)(v1 + 16), (uint64_t)v16);
  v4 = v16[0];
  switch(state)
  {
    case 0:
      result = swift_unknownObjectRelease();
      v6 = 0x8000000000;
      break;
    case 1:
      result = swift_unknownObjectRelease();
      v6 = 0x8000000001;
      break;
    case 2:
      if (!v16[0])
        goto LABEL_27;
      v10 = swift_unknownObjectRetain();
      error_domain = nw_error_get_error_domain(v10);
      switch(error_domain)
      {
        case nw_error_domain_tls:
          error_code = nw_error_get_error_code(v4);
          result = swift_unknownObjectRelease_n();
          v6 = error_code | 0x200000000;
          break;
        case nw_error_domain_dns:
          v14 = nw_error_get_error_code(v4);
          result = swift_unknownObjectRelease_n();
          v6 = v14 | 0x100000000;
          break;
        case nw_error_domain_posix:
          nw_error_get_error_code(v4);
          v6 = sub_183B915E4();
          result = swift_unknownObjectRelease_n();
          if ((v6 & 0x100000000) != 0)
            v6 = 22;
          else
            v6 = v6;
          break;
        default:
          result = swift_unknownObjectRelease_n();
          v6 = 22;
          break;
      }
      break;
    case 4:
      if (!v16[0])
      {
        __break(1u);
LABEL_27:
        __break(1u);
        JUMPOUT(0x18324EF34);
      }
      v7 = swift_unknownObjectRetain();
      v8 = nw_error_get_error_domain(v7);
      switch(v8)
      {
        case nw_error_domain_posix:
          nw_error_get_error_code(v4);
          v12 = sub_183B915E4();
          result = swift_unknownObjectRelease_n();
          if ((v12 & 0x100000000) != 0)
            v6 = 0x4000000016;
          else
            v6 = v12 | 0x4000000000;
          break;
        case nw_error_domain_dns:
          v13 = nw_error_get_error_code(v4);
          result = swift_unknownObjectRelease_n();
          v6 = v13 | 0x4100000000;
          break;
        case nw_error_domain_tls:
          v9 = nw_error_get_error_code(v4);
          result = swift_unknownObjectRelease_n();
          v6 = v9 | 0x4200000000;
          break;
        default:
          v6 = 0x4000000016;
          result = swift_unknownObjectRelease_n();
          break;
      }
      break;
    default:
      v6 = 0x8000000002;
      result = swift_unknownObjectRelease();
      break;
  }
  *(_DWORD *)a1 = v6;
  *(_BYTE *)(a1 + 4) = BYTE4(v6);
  return result;
}

uint64_t NWBrowser.browseResults.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (os_unfair_lock_s *)(v1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 80));
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  return v3;
}

void *NWBrowser.queue.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (os_unfair_lock_s *)(v1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 80));
  v3 = *(void **)(v1 + 72);
  v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t (*NWBrowser.stateUpdateHandler.getter())()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 20;
  os_unfair_lock_lock(v1 + 20);
  sub_18324F0E0(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_182FEDAC0;
}

void sub_18324F060(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832576D8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  NWBrowser.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t sub_18324F0E0@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_182FEDAC0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_183061488(v3);
}

uint64_t (*NWBrowser.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)();
  uint64_t v7;
  __int128 v9;
  uint64_t (*v10[4])();

  a1[2] = (uint64_t (*)())v1;
  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 20;
  os_unfair_lock_lock(v3 + 20);
  sub_18324F0E0(v4, v10);
  os_unfair_lock_unlock(v5);
  v6 = v10[0];
  if (v10[0])
  {
    v9 = *(_OWORD *)v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832576D8;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_18324F1FC;
}

uint64_t sub_18324F1FC(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWBrowser.stateUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_183061488, (uint64_t (*)(uint64_t, uint64_t))sub_1830630AC);
}

uint64_t (*NWBrowser.browseResultsChangedHandler.getter())(uint64_t, uint64_t)
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 20;
  os_unfair_lock_lock(v1 + 20);
  sub_18324F954(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_18324FD24;
}

double sub_18324F2B4@<D0>(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  double result;
  __int128 v9;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 24);
  v6 = v5 + 4;
  v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  result = *(double *)&v9;
  *a3 = v9;
  return result;
}

uint64_t sub_18324F328(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18324FD24;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  return NWBrowser.browseResultsChangedHandler.setter((uint64_t)v4, v3);
}

uint64_t sub_18324F3A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];

  v30[0] = a6;
  v9 = type metadata accessor for NWBrowser.Result.Change(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD76E8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v30 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)v30 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v30 - v22;
  v24 = swift_unknownObjectRetain();
  sub_18324D738(v24, (uint64_t)v23);
  v25 = swift_unknownObjectRetain();
  sub_18324D738(v25, (uint64_t)v21);
  sub_183253884((uint64_t)v23, (uint64_t)v18);
  sub_183253884((uint64_t)v21, (uint64_t)v15);
  NWBrowser.Result.Change.init(between:_:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v11);
  v26 = *(_QWORD *)(a4 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v26 + 80));
  sub_18324F5B4(v26 + 16, (uint64_t)v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 80));
  if ((a3 & 1) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 80));
    v27 = *(_QWORD *)(v26 + 16);
    v28 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v26 + 24) = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 80));
    if (a5)
      a5(v27, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1830620D4((uint64_t)v21, &qword_1EDCD76E8);
  sub_1830620D4((uint64_t)v23, &qword_1EDCD76E8);
  return sub_183058AE0((uint64_t)v11, type metadata accessor for NWBrowser.Result.Change);
}

void sub_18324F5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  char *v15;
  _QWORD v16[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD76E8);
  MEMORY[0x1E0C80A78](v3);
  v16[2] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NWBrowser.Result(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v16[1] = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v9 = MEMORY[0x1E0C80A78](v8);
  MEMORY[0x1E0C80A78](v9);
  v10 = type metadata accessor for NWBrowser.Result.Change(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v12 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v12);
  v16[3] = a2;
  sub_183058C44(a2, (uint64_t)v16 - v13, v14);
  v15 = (char *)&loc_18324F748 + *((int *)qword_18324F8D0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_18324F758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_183058EC4(v0, v1, type metadata accessor for NWBrowser.Result);
  sub_183058C44(v1, v5, type metadata accessor for NWBrowser.Result);
  sub_1832508E8(v4, v5);
  sub_183058AE0(v4, type metadata accessor for NWBrowser.Result);
  sub_183058AE0(v1, type metadata accessor for NWBrowser.Result);
  sub_183058C44(*(_QWORD *)(v6 - 88), v2, type metadata accessor for NWBrowser.Result.Change);
  sub_1832506EC(v3, v2);
  return sub_183058AE0(v3, type metadata accessor for NWBrowser.Result.Change);
}

uint64_t sub_18324F8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_18324F954@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1832575C0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_183061488(v3);
}

uint64_t (*NWBrowser.browseResultsChangedHandler.modify(uint64_t (**a1)(uint64_t, uint64_t)))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  __int128 v9;
  __int128 v10;

  a1[2] = (uint64_t (*)(uint64_t, uint64_t))v1;
  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 20;
  os_unfair_lock_lock(v3 + 20);
  sub_18324F954(v4, &v10);
  os_unfair_lock_unlock(v5);
  v6 = (uint64_t (*)(uint64_t, uint64_t))v10;
  if ((_QWORD)v10)
  {
    v9 = v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_18324FD24;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t))v7;
  return sub_18324FA70;
}

uint64_t sub_18324FA70(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, NWBrowser.browseResultsChangedHandler.setter, (void (*)(uint64_t, uint64_t))sub_183257670, (uint64_t (*)(uint64_t, uint64_t))sub_182FEDBA4);
}

uint64_t sub_18324FA8C(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  if ((a2 & 1) == 0)
    return a3(*a1, v7);
  a4(*a1, v7);
  a3(v6, v7);
  return a5(v6, v7);
}

uint64_t NWBrowser.init(for:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  nw_browser_t v17;
  nw_parameters_t parameters[4];
  char v20;

  v3 = v2;
  v5 = *(NSObject **)a1;
  v6 = *(NSObject **)(a1 + 8);
  v7 = *(NSObject **)(a1 + 16);
  v8 = *(NSObject **)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD7708);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 80) = 0;
  v11 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v10 + 24) = v11;
  *(_BYTE *)(v10 + 32) = 0;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v3 + 24) = v10;
  *(_QWORD *)(v3 + 32) = v5;
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v7;
  *(_QWORD *)(v3 + 56) = v8;
  *(_BYTE *)(v3 + 64) = v9;
  *(_QWORD *)(v3 + 72) = a2;
  parameters[0] = v5;
  parameters[1] = v6;
  parameters[2] = v7;
  parameters[3] = v8;
  v20 = v9;
  swift_retain();
  NWBrowser.Descriptor.nw.getter();
  v13 = v12;
  v14 = *(os_unfair_lock_s **)(a2 + 16);
  v15 = v14 + 4;
  v16 = v14 + 6;
  os_unfair_lock_lock(v14 + 6);
  sub_183226978(v15, parameters);
  os_unfair_lock_unlock(v16);
  v17 = nw_browser_create(v13, parameters[0]);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  *(_QWORD *)(v3 + 16) = v17;
  return v3;
}

uint64_t sub_18324FC2C(uint64_t *a1)
{
  uint64_t result;

  sub_1830630AC(a1[3]);
  a1[3] = 0;
  a1[4] = 0;
  result = sub_1830630AC(a1[5]);
  a1[5] = 0;
  a1[6] = 0;
  return result;
}

uint64_t sub_18324FC6C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18324FC90(int a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t (*v5)(_BYTE *);
  _BYTE v7[8];

  v5 = *(uint64_t (**)(_BYTE *))(v2 + 16);
  swift_unknownObjectRetain();
  sub_18324E7B0(a2, a1, (uint64_t)v7);
  return v5(v7);
}

uint64_t sub_18324FCE4()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_18324FD18(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_18324F3A8(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void (**)(uint64_t, uint64_t))(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t static NWBrowser.browseIterator(on:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];
  int v9;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD020);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *a1;
  v9 = 64;
  v10 = v5;
  (*(void (**)(_BYTE *, _QWORD))(v6 + 104))(v4, *MEMORY[0x1E0DF0A50]);
  return sub_183B91B90();
}

uint64_t NWBrowser.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  sub_183253930(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  swift_release();
  return v0;
}

uint64_t NWBrowser.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  sub_183253930(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_18324FE60(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  _QWORD *v57;
  unint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  uint64_t *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t result;
  _QWORD v96[3];
  uint64_t v97;
  int64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;

  v4 = sub_183B91728();
  MEMORY[0x1E0C80A78](v4);
  v96[2] = (char *)v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 64);
  v97 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v98 = (unint64_t)(v7 + 63) >> 6;
  v100 = a1;
  swift_bridgeObjectRetain();
  v10 = 0;
  v99 = a2;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_26;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    if (v17 >= v98)
      return swift_release();
    v18 = *(_QWORD *)(v97 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v98)
        return swift_release();
      v18 = *(_QWORD *)(v97 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v98)
          return swift_release();
        v18 = *(_QWORD *)(v97 + 8 * v10);
        if (!v18)
        {
          v10 = v17 + 3;
          if (v17 + 3 >= v98)
            return swift_release();
          v18 = *(_QWORD *)(v97 + 8 * v10);
          if (!v18)
            break;
        }
      }
    }
LABEL_25:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_26:
    v20 = (uint64_t *)(*(_QWORD *)(v100 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_QWORD *)(v100 + 56) + 24 * v16;
    v24 = *(_QWORD *)(v23 + 8);
    v103 = *(_QWORD *)v23;
    v25 = *(unsigned __int8 *)(v23 + 16);
    if (!v25)
    {
      v101 = v10;
      v102 = v9;
      swift_bridgeObjectRetain_n();
      v42 = v103;
      sub_183257580(v103, v24, 0);
      v43 = v22;
      v44 = v42;
      v45 = v24;
      sub_183257580(v42, v24, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v104 = (_QWORD *)*a2;
      v47 = v104;
      *a2 = 0x8000000000000000;
      v48 = v21;
      v50 = sub_1832F67A0(v21, v43);
      v51 = v47[2];
      v52 = (v49 & 1) == 0;
      v53 = v51 + v52;
      if (__OFADD__(v51, v52))
        goto LABEL_73;
      v54 = v49;
      if (v47[3] < v53)
      {
        sub_1832F9BA4(v53, isUniquelyReferenced_nonNull_native);
        v55 = sub_1832F67A0(v48, v43);
        if ((v54 & 1) != (v56 & 1))
          goto LABEL_80;
        v50 = v55;
        v57 = v104;
        if ((v54 & 1) == 0)
          goto LABEL_47;
LABEL_4:
        v11 = (uint64_t *)(v57[7] + 16 * v50);
        swift_bridgeObjectRelease();
        *v11 = v44;
        v11[1] = v45;
LABEL_5:
        a2 = v99;
        *v99 = (uint64_t)v57;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v12 = v44;
        v13 = v45;
        v14 = 0;
LABEL_6:
        sub_1832575A0(v12, v13, v14);
        goto LABEL_7;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v57 = v104;
        if ((v49 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_1832FC79C();
        v57 = v104;
        if ((v54 & 1) != 0)
          goto LABEL_4;
      }
LABEL_47:
      v57[(v50 >> 6) + 8] |= 1 << v50;
      v71 = (uint64_t *)(v57[6] + 16 * v50);
      *v71 = v48;
      v71[1] = v43;
      v72 = (uint64_t *)(v57[7] + 16 * v50);
      *v72 = v44;
      v72[1] = v45;
      v73 = v57[2];
      v74 = __OFADD__(v73, 1);
      v75 = v73 + 1;
      if (v74)
        goto LABEL_76;
      v57[2] = v75;
      swift_bridgeObjectRetain();
      goto LABEL_5;
    }
    if (v25 == 1)
    {
      v101 = v10;
      v102 = v9;
      swift_bridgeObjectRetain_n();
      v26 = v103;
      sub_183257580(v103, v24, 1);
      sub_183257580(v26, v24, 1);
      sub_183B91710();
      v27 = sub_183B916EC();
      if (v28)
      {
        v29 = v28;
        v30 = v27;
        v31 = swift_isUniquelyReferenced_nonNull_native();
        v104 = (_QWORD *)*a2;
        v32 = v104;
        *a2 = 0x8000000000000000;
        v34 = sub_1832F67A0(v21, v22);
        v35 = v32[2];
        v36 = (v33 & 1) == 0;
        v37 = v35 + v36;
        if (__OFADD__(v35, v36))
          goto LABEL_74;
        v38 = v33;
        if (v32[3] < v37)
        {
          sub_1832F9BA4(v37, v31);
          v39 = sub_1832F67A0(v21, v22);
          if ((v38 & 1) != (v40 & 1))
            goto LABEL_80;
          v34 = v39;
          v41 = v104;
          if ((v38 & 1) == 0)
            goto LABEL_64;
LABEL_56:
          v83 = (uint64_t *)(v41[7] + 16 * v34);
          swift_bridgeObjectRelease();
          *v83 = v30;
          v83[1] = v29;
LABEL_66:
          a2 = v99;
          *v99 = (uint64_t)v41;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v90 = v103;
          sub_1832575A0(v103, v24, 1);
          swift_bridgeObjectRelease();
          v12 = v90;
          v13 = v24;
          v14 = 1;
          goto LABEL_6;
        }
        if ((v31 & 1) != 0)
        {
          v41 = v104;
          if ((v33 & 1) != 0)
            goto LABEL_56;
        }
        else
        {
          sub_1832FC79C();
          v41 = v104;
          if ((v38 & 1) != 0)
            goto LABEL_56;
        }
LABEL_64:
        v41[(v34 >> 6) + 8] |= 1 << v34;
        v86 = (uint64_t *)(v41[6] + 16 * v34);
        *v86 = v21;
        v86[1] = v22;
        v87 = (uint64_t *)(v41[7] + 16 * v34);
        *v87 = v30;
        v87[1] = v29;
        v88 = v41[2];
        v74 = __OFADD__(v88, 1);
        v89 = v88 + 1;
        if (v74)
          goto LABEL_77;
        v41[2] = v89;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      }
      swift_bridgeObjectRetain();
      v76 = sub_1832F67A0(v21, v22);
      v78 = v77;
      swift_bridgeObjectRelease();
      if ((v78 & 1) != 0)
      {
        v79 = v99;
        v80 = swift_isUniquelyReferenced_nonNull_native();
        v81 = *v79;
        v104 = (_QWORD *)*v79;
        *v79 = 0x8000000000000000;
        if ((v80 & 1) == 0)
        {
          sub_1832FC79C();
          v81 = (uint64_t)v104;
        }
        swift_bridgeObjectRelease();
        sub_1832B9F24(v76, v81);
        *v79 = v81;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v82 = v103;
        sub_1832575A0(v103, v24, 1);
        swift_bridgeObjectRelease();
        sub_1832575A0(v82, v24, 1);
        a2 = v79;
      }
      else
      {
        swift_bridgeObjectRelease();
        v85 = v103;
        sub_1832575A0(v103, v24, 1);
        swift_bridgeObjectRelease();
        sub_1832575A0(v85, v24, 1);
        a2 = v99;
      }
LABEL_7:
      v10 = v101;
      v9 = v102;
    }
    else if (v103 | v24)
    {
      v102 = v9;
      swift_bridgeObjectRetain_n();
      v58 = v24;
      sub_183257580(v103, v24, 2);
      v59 = swift_isUniquelyReferenced_nonNull_native();
      v104 = (_QWORD *)*a2;
      v60 = v104;
      *a2 = 0x8000000000000000;
      v61 = v21;
      v63 = sub_1832F67A0(v21, v22);
      v64 = v60[2];
      v65 = (v62 & 1) == 0;
      v66 = v64 + v65;
      if (__OFADD__(v64, v65))
        goto LABEL_75;
      v67 = v62;
      if (v60[3] >= v66)
      {
        if ((v59 & 1) != 0)
        {
          v70 = v104;
          if ((v62 & 1) != 0)
            goto LABEL_59;
        }
        else
        {
          sub_1832FC79C();
          v70 = v104;
          if ((v67 & 1) != 0)
            goto LABEL_59;
        }
      }
      else
      {
        sub_1832F9BA4(v66, v59);
        v68 = sub_1832F67A0(v61, v22);
        if ((v67 & 1) != (v69 & 1))
          goto LABEL_80;
        v63 = v68;
        v70 = v104;
        if ((v67 & 1) != 0)
        {
LABEL_59:
          v84 = (_QWORD *)(v70[7] + 16 * v63);
          swift_bridgeObjectRelease();
          *v84 = 0;
          v84[1] = 0xE000000000000000;
          goto LABEL_70;
        }
      }
      v70[(v63 >> 6) + 8] |= 1 << v63;
      v91 = (uint64_t *)(v70[6] + 16 * v63);
      *v91 = v61;
      v91[1] = v22;
      v92 = (_QWORD *)(v70[7] + 16 * v63);
      *v92 = 0;
      v92[1] = 0xE000000000000000;
      v93 = v70[2];
      v74 = __OFADD__(v93, 1);
      v94 = v93 + 1;
      if (v74)
        goto LABEL_78;
      v70[2] = v94;
      swift_bridgeObjectRetain();
LABEL_70:
      a2 = v99;
      *v99 = (uint64_t)v70;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_1832575A0(v103, v58, 2);
      v9 = v102;
    }
    else
    {
      sub_1832575A0(v103, v24, 2);
    }
  }
  v19 = v17 + 4;
  if (v19 >= v98)
    return swift_release();
  v18 = *(_QWORD *)(v97 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v98)
      return swift_release();
    v18 = *(_QWORD *)(v97 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_79:
  __break(1u);
LABEL_80:
  result = sub_183B921CC();
  __break(1u);
  return result;
}

uint64_t sub_18325068C()
{
  return swift_deallocObject();
}

uint64_t sub_18325069C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for NWBrowser.Result(uint64_t a1)
{
  return sub_183058E90(a1, qword_1EDCD76D0);
}

uint64_t sub_1832506C0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_1832506EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = type metadata accessor for NWBrowser.Result.Change(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_183B92250();
  swift_bridgeObjectRetain();
  NWBrowser.Result.Change.hash(into:)();
  v11 = sub_183B9228C();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v21 = v2;
    v22 = a1;
    v14 = ~v12;
    v15 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_183058C44(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for NWBrowser.Result.Change);
      _s7Network9NWBrowserC6ResultV6ChangeO2eeoiySbAG_AGtFZ_0((uint64_t)v9, a2);
      v17 = v16;
      sub_183058AE0((uint64_t)v9, type metadata accessor for NWBrowser.Result.Change);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v21;
        a1 = v22;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_183058AE0(a2, type metadata accessor for NWBrowser.Result.Change);
    sub_183058C44(*(_QWORD *)(*v21 + 48) + v15 * v13, v22, type metadata accessor for NWBrowser.Result.Change);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_183058C44(a2, (uint64_t)v9, type metadata accessor for NWBrowser.Result.Change);
    v23 = *v3;
    *v3 = 0x8000000000000000;
    sub_1832528AC((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v23;
    swift_bridgeObjectRelease();
    sub_183058EC4(a2, a1, type metadata accessor for NWBrowser.Result.Change);
    return 1;
  }
}

uint64_t sub_1832508E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  NSObject *v44;
  BOOL is_equal;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v3 = v2;
  v6 = type metadata accessor for NWBrowser.Result(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v54 = (uint64_t)&v49 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v49 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v55 = (uint64_t)&v49 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v49 - v19;
  MEMORY[0x1E0C80A78](v18);
  v51 = (char *)&v49 - v21;
  v22 = *v3;
  sub_183B92250();
  v62 = v6;
  v23 = a2;
  v24 = a2 + *(int *)(v6 + 20);
  swift_bridgeObjectRetain();
  v61 = v24;
  NWEndpoint.hash(into:)();
  v25 = sub_183B9228C();
  v26 = -1 << *(_BYTE *)(v22 + 32);
  v27 = v25 & ~v26;
  v60 = v22 + 56;
  if (((*(_QWORD *)(v22 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    v46 = (uint64_t)v51;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_183058C44(v23, v46, type metadata accessor for NWBrowser.Result);
    v63 = *v3;
    *v3 = 0x8000000000000000;
    sub_183252A9C(v46, v27, isUniquelyReferenced_nonNull_native);
    *v3 = v63;
    swift_bridgeObjectRelease();
    sub_183058EC4(v23, a1, type metadata accessor for NWBrowser.Result);
    return 1;
  }
  v58 = v15;
  v49 = v3;
  v50 = a1;
  v56 = ~v26;
  v57 = *(_QWORD *)(v7 + 72);
  v28 = v54;
  v29 = v55;
  v52 = v10;
  v53 = v23;
  v59 = v22;
  while (1)
  {
    v30 = *(_QWORD *)(v22 + 48);
    v55 = v57 * v27;
    sub_183058C44(v30 + v57 * v27, (uint64_t)v20, type metadata accessor for NWBrowser.Result);
    v31 = v62;
    _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0((uint64_t)&v20[*(int *)(v62 + 20)], v61);
    v33 = v32;
    sub_183058C44((uint64_t)v20, v29, type metadata accessor for NWBrowser.Result);
    v34 = v23;
    v35 = v23;
    v36 = v29;
    v37 = (uint64_t)v58;
    sub_183058C44(v34, (uint64_t)v58, type metadata accessor for NWBrowser.Result);
    if ((v33 & 1) == 0)
    {
      sub_183058AE0(v36, type metadata accessor for NWBrowser.Result);
      sub_183058AE0(v37, type metadata accessor for NWBrowser.Result);
      sub_183058C44((uint64_t)v20, v28, type metadata accessor for NWBrowser.Result);
      sub_183058C44(v35, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
      v22 = v59;
      v29 = v36;
      v23 = v35;
LABEL_12:
      sub_183058AE0((uint64_t)v10, type metadata accessor for NWBrowser.Result);
      sub_183058AE0(v28, type metadata accessor for NWBrowser.Result);
      sub_183058AE0((uint64_t)v20, type metadata accessor for NWBrowser.Result);
      goto LABEL_13;
    }
    v38 = sub_1832895B4(*(_QWORD *)(v36 + *(int *)(v31 + 24)), *(_QWORD *)(v37 + *(int *)(v31 + 24)));
    sub_183058AE0(v36, type metadata accessor for NWBrowser.Result);
    sub_183058AE0(v37, type metadata accessor for NWBrowser.Result);
    sub_183058C44((uint64_t)v20, v28, type metadata accessor for NWBrowser.Result);
    sub_183058C44(v35, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
    v22 = v59;
    v29 = v36;
    v23 = v35;
    if ((v38 & 1) == 0)
      goto LABEL_12;
    v39 = *(int *)(v62 + 28);
    v41 = *(_QWORD *)(v28 + v39);
    v40 = *(NSObject **)(v28 + v39 + 8);
    v42 = (uint64_t *)&v10[v39];
    v43 = *v42;
    v44 = v42[1];
    if (!v41)
      break;
    if (!v43)
      goto LABEL_11;
    sub_1832506C0(v41);
    sub_1832506C0(v43);
    sub_1832506C0(v41);
    sub_1832506C0(v43);
    sub_1832506C0(v41);
    sub_1832506C0(v43);
    is_equal = nw_txt_record_is_equal(v40, v44);
    sub_183253844(v41);
    sub_183253844(v43);
    sub_183253844(v43);
    sub_183253844(v41);
    sub_183253844(v43);
    sub_183253844(v41);
    v10 = v52;
    sub_183058AE0((uint64_t)v52, type metadata accessor for NWBrowser.Result);
    v28 = v54;
    sub_183058AE0(v54, type metadata accessor for NWBrowser.Result);
    sub_183058AE0((uint64_t)v20, type metadata accessor for NWBrowser.Result);
    v23 = v53;
    if (is_equal)
      goto LABEL_19;
LABEL_13:
    v27 = (v27 + 1) & v56;
    if (((*(_QWORD *)(v60 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      a1 = v50;
      v3 = v49;
      goto LABEL_16;
    }
  }
  if (v43)
  {
LABEL_11:
    sub_1832506C0(v41);
    sub_1832506C0(v43);
    sub_183253844(v41);
    sub_183253844(v43);
    v10 = v52;
    v23 = v53;
    v28 = v54;
    goto LABEL_12;
  }
  sub_183253844(0);
  sub_183253844(0);
  sub_183058AE0((uint64_t)v52, type metadata accessor for NWBrowser.Result);
  sub_183058AE0(v54, type metadata accessor for NWBrowser.Result);
  sub_183058AE0((uint64_t)v20, type metadata accessor for NWBrowser.Result);
  v23 = v53;
LABEL_19:
  swift_bridgeObjectRelease();
  sub_183058AE0(v23, type metadata accessor for NWBrowser.Result);
  sub_183058C44(*(_QWORD *)(*v49 + 48) + v55, v50, type metadata accessor for NWBrowser.Result);
  return 0;
}

uint64_t sub_183250E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  NSObject *v36;
  unint64_t v37;
  BOOL is_equal;
  uint64_t v39;
  uint64_t *v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = v2;
  v6 = (int *)type metadata accessor for NWBrowser.Result(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = MEMORY[0x1E0C80A78](v6);
  v51 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v58 = (uint64_t)&v45 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v56 = (uint64_t)&v45 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v45 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v45 - v17;
  v19 = *v2;
  sub_183B92250();
  v20 = a1 + v6[5];
  swift_bridgeObjectRetain();
  v57 = v20;
  NWEndpoint.hash(into:)();
  v21 = sub_183B9228C();
  v22 = -1 << *(_BYTE *)(v19 + 32);
  v23 = v21 & ~v22;
  v55 = v19 + 56;
  if (((*(_QWORD *)(v19 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v39 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a2, v39, 1, v6);
  }
  v46 = v3;
  v47 = v7;
  v48 = a2;
  v52 = ~v22;
  v53 = *(_QWORD *)(v7 + 72);
  v54 = v19;
  v24 = v51;
  v49 = a1;
  v50 = v6;
  while (1)
  {
    v25 = v53 * v23;
    sub_183058C44(*(_QWORD *)(v19 + 48) + v53 * v23, (uint64_t)v18, type metadata accessor for NWBrowser.Result);
    _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0((uint64_t)&v18[v6[5]], v57);
    v27 = v26;
    sub_183058C44((uint64_t)v18, (uint64_t)v16, type metadata accessor for NWBrowser.Result);
    v28 = v56;
    sub_183058C44(a1, v56, type metadata accessor for NWBrowser.Result);
    if ((v27 & 1) == 0)
    {
      sub_183058AE0((uint64_t)v16, type metadata accessor for NWBrowser.Result);
      sub_183058AE0(v28, type metadata accessor for NWBrowser.Result);
      v30 = v58;
      sub_183058C44((uint64_t)v18, v58, type metadata accessor for NWBrowser.Result);
      sub_183058C44(a1, v24, type metadata accessor for NWBrowser.Result);
LABEL_12:
      sub_183058AE0(v24, type metadata accessor for NWBrowser.Result);
      sub_183058AE0(v30, type metadata accessor for NWBrowser.Result);
      sub_183058AE0((uint64_t)v18, type metadata accessor for NWBrowser.Result);
      goto LABEL_13;
    }
    v29 = sub_1832895B4(*(_QWORD *)&v16[v6[6]], *(_QWORD *)(v28 + v6[6]));
    sub_183058AE0((uint64_t)v16, type metadata accessor for NWBrowser.Result);
    sub_183058AE0(v28, type metadata accessor for NWBrowser.Result);
    v30 = v58;
    sub_183058C44((uint64_t)v18, v58, type metadata accessor for NWBrowser.Result);
    sub_183058C44(a1, v24, type metadata accessor for NWBrowser.Result);
    if ((v29 & 1) == 0)
      goto LABEL_12;
    v31 = v6[7];
    v33 = *(_QWORD *)(v30 + v31);
    v32 = *(NSObject **)(v30 + v31 + 8);
    v34 = (uint64_t *)(v24 + v31);
    v35 = *v34;
    v36 = v34[1];
    if (!v33)
      break;
    if (!v35)
      goto LABEL_11;
    v37 = v25;
    sub_1832506C0(v33);
    sub_1832506C0(v35);
    sub_1832506C0(v33);
    sub_1832506C0(v35);
    sub_1832506C0(v33);
    sub_1832506C0(v35);
    is_equal = nw_txt_record_is_equal(v32, v36);
    sub_183253844(v33);
    sub_183253844(v35);
    sub_183253844(v35);
    sub_183253844(v33);
    sub_183253844(v35);
    sub_183253844(v33);
    v24 = v51;
    sub_183058AE0(v51, type metadata accessor for NWBrowser.Result);
    sub_183058AE0(v58, type metadata accessor for NWBrowser.Result);
    sub_183058AE0((uint64_t)v18, type metadata accessor for NWBrowser.Result);
    a1 = v49;
    v6 = v50;
    if (is_equal)
      goto LABEL_17;
LABEL_13:
    v23 = (v23 + 1) & v52;
    v19 = v54;
    if (((*(_QWORD *)(v55 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v39 = 1;
      v7 = v47;
      a2 = v48;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a2, v39, 1, v6);
    }
  }
  if (v35)
  {
LABEL_11:
    sub_1832506C0(v33);
    sub_1832506C0(v35);
    sub_183253844(v33);
    sub_183253844(v35);
    a1 = v49;
    v6 = v50;
    v24 = v51;
    v30 = v58;
    goto LABEL_12;
  }
  v37 = v25;
  sub_183253844(0);
  sub_183253844(0);
  sub_183058AE0(v51, type metadata accessor for NWBrowser.Result);
  sub_183058AE0(v58, type metadata accessor for NWBrowser.Result);
  sub_183058AE0((uint64_t)v18, type metadata accessor for NWBrowser.Result);
  v6 = v50;
LABEL_17:
  swift_bridgeObjectRelease();
  v40 = v46;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v42 = *v40;
  v59 = *v40;
  *v40 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_183251360(type metadata accessor for NWBrowser.Result, (uint64_t *)&unk_1EDCD76F8);
    v42 = v59;
  }
  v43 = v48;
  sub_183058EC4(*(_QWORD *)(v42 + 48) + v37, v48, type metadata accessor for NWBrowser.Result);
  sub_18325265C(v23);
  *v40 = v59;
  a2 = v43;
  swift_bridgeObjectRelease();
  v39 = 0;
  v7 = v47;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a2, v39, 1, v6);
}

void *sub_183251360(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = v2;
  v6 = a1(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v28 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *v2;
  v11 = sub_183B91D7C();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v5 = v12;
    return result;
  }
  v29 = v5;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v7 + 72) * v23;
    sub_183058C44(*(_QWORD *)(v10 + 48) + v24, (uint64_t)v9, a1);
    result = (void *)sub_183058EC4((uint64_t)v9, *(_QWORD *)(v12 + 48) + v24, a1);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release();
    v5 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_183251578()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v29 = type metadata accessor for NWBrowser.Result(0);
  v2 = MEMORY[0x1E0C80A78](v29);
  v25 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v30 = type metadata accessor for NWBrowser.Result.Change(0);
  v4 = *(_QWORD *)(v30 - 8);
  v5 = MEMORY[0x1E0C80A78](v30);
  v26 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v32 = (uint64_t)&v22 - v7;
  v8 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD76F0);
  v9 = sub_183B91D88();
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v23 = v0;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = *(_QWORD *)(v8 + 56);
  v27 = (_QWORD *)(v8 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v28 = (unint64_t)(v10 + 63) >> 6;
  swift_retain();
  v14 = (uint64_t)v26;
  v24 = v4;
  if (v13)
  {
    v15 = __clz(__rbit64(v13));
    v31 = 0;
    goto LABEL_20;
  }
  if (v28 > 1)
  {
    v16 = v27[1];
    v17 = 1;
    if (v16)
      goto LABEL_19;
    v17 = 2;
    if (v28 > 2)
    {
      v16 = v27[2];
      if (v16)
        goto LABEL_19;
      v17 = 3;
      if (v28 > 3)
      {
        v16 = v27[3];
        if (!v16)
        {
          v18 = 4;
          if (v28 > 4)
          {
            v16 = v27[4];
            if (v16)
            {
              v17 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v17 = v18 + 1;
              if (__OFADD__(v18, 1))
              {
                __break(1u);
                JUMPOUT(0x183251A84);
              }
              if (v17 >= v28)
                break;
              v16 = v27[v17];
              ++v18;
              if (v16)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v31 = v17;
        v15 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_20:
        v19 = v32;
        sub_183058C44(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v4 + 72) * v15, v32, type metadata accessor for NWBrowser.Result.Change);
        sub_183B92250();
        sub_183058C44(v19, v14, type metadata accessor for NWBrowser.Result.Change);
        v20 = (char *)&loc_183251870 + dword_183251A84[swift_getEnumCaseMultiPayload()];
        __asm { BR              X9 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v23;
LABEL_23:
  *v1 = v9;
  return result;
}

uint64_t sub_183251A94()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for NWBrowser.Result(0);
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD76F8);
  v6 = sub_183B91D88();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 56);
  v29 = v0;
  v30 = v5 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & v9;
  v31 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31)
      goto LABEL_33;
    v19 = *(_QWORD *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v31)
        goto LABEL_33;
      v19 = *(_QWORD *)(v30 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v31)
          goto LABEL_33;
        v19 = *(_QWORD *)(v30 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(_QWORD *)(v32 + 72);
    sub_183058C44(*(_QWORD *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for NWBrowser.Result);
    sub_183B92250();
    NWEndpoint.hash(into:)();
    result = sub_183B9228C();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    result = sub_183058EC4((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v21, type metadata accessor for NWBrowser.Result);
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v29;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v30 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v31)
      goto LABEL_33;
    v19 = *(_QWORD *)(v30 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_183251DB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v28 = type metadata accessor for NWBrowser.Result(0);
  v2 = MEMORY[0x1E0C80A78](v28);
  v25 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v29 = type metadata accessor for NWBrowser.Result.Change(0);
  v4 = *(_QWORD *)(v29 - 8);
  v5 = MEMORY[0x1E0C80A78](v29);
  v31 = (uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v32 = (uint64_t)&v22 - v7;
  v8 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD76F0);
  v9 = sub_183B91D88();
  v30 = v8;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_26;
  v23 = v0;
  v10 = 1 << *(_BYTE *)(v30 + 32);
  v11 = *(_QWORD *)(v30 + 56);
  v27 = (_QWORD *)(v30 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v26 = (unint64_t)(v10 + 63) >> 6;
  swift_retain();
  v24 = v4;
  if (v13)
  {
    v14 = __clz(__rbit64(v13));
    goto LABEL_20;
  }
  if (v26 > 1)
  {
    v15 = v27[1];
    v16 = 1;
    if (v15)
      goto LABEL_19;
    v16 = 2;
    if (v26 > 2)
    {
      v15 = v27[2];
      if (v15)
        goto LABEL_19;
      v16 = 3;
      if (v26 > 3)
      {
        v15 = v27[3];
        if (!v15)
        {
          v17 = 4;
          if (v26 > 4)
          {
            v15 = v27[4];
            if (v15)
            {
              v16 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v16 = v17 + 1;
              if (__OFADD__(v17, 1))
              {
                __break(1u);
                JUMPOUT(0x1832522F4);
              }
              if (v16 >= v26)
                break;
              v15 = v27[v16];
              ++v17;
              if (v15)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v14 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_20:
        v18 = v32;
        sub_183058EC4(*(_QWORD *)(v30 + 48) + *(_QWORD *)(v4 + 72) * v14, v32, type metadata accessor for NWBrowser.Result.Change);
        sub_183B92250();
        sub_183058C44(v18, v31, type metadata accessor for NWBrowser.Result.Change);
        v19 = (char *)&loc_1832520B0 + dword_1832522F4[swift_getEnumCaseMultiPayload()];
        __asm { BR              X9 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v23;
  v20 = 1 << *(_BYTE *)(v30 + 32);
  if (v20 > 63)
    bzero(v27, ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v20;
  *(_QWORD *)(v30 + 16) = 0;
LABEL_26:
  result = swift_release();
  *v1 = v9;
  return result;
}

uint64_t sub_183252304()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for NWBrowser.Result(0);
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD76F8);
  v6 = sub_183B91D88();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = v0;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v32 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v31 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v31)
          goto LABEL_33;
        v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v31)
            goto LABEL_33;
          v19 = v32[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v31)
              goto LABEL_33;
            v19 = v32[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                swift_release();
                v1 = v30;
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 > 63)
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v31)
                    goto LABEL_33;
                  v19 = v32[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(v33 + 72);
      sub_183058EC4(*(_QWORD *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for NWBrowser.Result);
      sub_183B92250();
      NWEndpoint.hash(into:)();
      result = sub_183B9228C();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = sub_183058EC4((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v21, type metadata accessor for NWBrowser.Result);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_18325265C(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = type metadata accessor for NWBrowser.Result(0);
  v3 = *(_QWORD *)(v26 - 8);
  result = MEMORY[0x1E0C80A78](v26);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v24 = v1;
    v25 = v8;
    v11 = ~v9;
    swift_retain();
    v12 = sub_183B91D64();
    v13 = v25;
    if ((*(_QWORD *)(v25 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v14 = (v12 + 1) & v11;
      v15 = *(_QWORD *)(v3 + 72);
      while (1)
      {
        v16 = v15 * v10;
        sub_183058C44(*(_QWORD *)(v7 + 48) + v15 * v10, (uint64_t)v6, type metadata accessor for NWBrowser.Result);
        sub_183B92250();
        NWEndpoint.hash(into:)();
        v17 = sub_183B9228C();
        sub_183058AE0((uint64_t)v6, type metadata accessor for NWBrowser.Result);
        v18 = v17 & v11;
        if ((uint64_t)a1 >= (uint64_t)v14)
          break;
        if (v18 < v14)
          goto LABEL_11;
LABEL_12:
        v19 = v15 * a1;
        if ((uint64_t)(v15 * a1) < v16 || *(_QWORD *)(v7 + 48) + v15 * a1 >= *(_QWORD *)(v7 + 48) + v16 + v15)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v19 == v16)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
        v13 = v25;
        if (((*(_QWORD *)(v25 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          goto LABEL_16;
      }
      if (v18 < v14)
        goto LABEL_6;
LABEL_11:
      if ((uint64_t)a1 < (uint64_t)v18)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_16:
    *(_QWORD *)(v13 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v1 = v24;
  }
  else
  {
    *(_QWORD *)(v8 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v20 = *v1;
  v21 = *(_QWORD *)(*v1 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v20 + 16) = v23;
    ++*(_DWORD *)(v20 + 36);
  }
  return result;
}

uint64_t sub_1832528AC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;

  v4 = v3;
  v8 = type metadata accessor for NWBrowser.Result.Change(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v27 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_183251DB0();
  }
  else
  {
    if (v13 > v12)
    {
      sub_183251360(type metadata accessor for NWBrowser.Result.Change, &qword_1EDCD76F0);
      goto LABEL_12;
    }
    sub_183251578();
  }
  v14 = *v4;
  sub_183B92250();
  NWBrowser.Result.Change.hash(into:)();
  v15 = sub_183B9228C();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v26[1] = v8;
    v17 = ~v16;
    v18 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_183058C44(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v11, type metadata accessor for NWBrowser.Result.Change);
      _s7Network9NWBrowserC6ResultV6ChangeO2eeoiySbAG_AGtFZ_0((uint64_t)v11, a1);
      v20 = v19;
      sub_183058AE0((uint64_t)v11, type metadata accessor for NWBrowser.Result.Change);
      if ((v20 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v21 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_183058EC4(a1, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v27 + 72) * a2, type metadata accessor for NWBrowser.Result.Change);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_183B921C0();
  __break(1u);
  return result;
}

uint64_t sub_183252A9C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _BYTE v41[12];
  _BOOL4 is_equal;
  uint64_t *v43;
  _BYTE *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v7 = (int *)type metadata accessor for NWBrowser.Result(0);
  v47 = *((_QWORD *)v7 - 1);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = &v41[-v12];
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = &v41[-v15];
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = &v41[-v18];
  MEMORY[0x1E0C80A78](v17);
  v21 = &v41[-v20];
  v22 = *(_QWORD *)(*v3 + 16);
  v23 = *(_QWORD *)(*v3 + 24);
  v43 = v3;
  if (v23 <= v22 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_183252304();
    }
    else
    {
      if (v23 > v22)
      {
        sub_183251360(type metadata accessor for NWBrowser.Result, (uint64_t *)&unk_1EDCD76F8);
        goto LABEL_21;
      }
      sub_183251A94();
    }
    v24 = *v3;
    sub_183B92250();
    v51 = a1 + v7[5];
    NWEndpoint.hash(into:)();
    v25 = sub_183B9228C();
    v26 = -1 << *(_BYTE *)(v24 + 32);
    a2 = v25 & ~v26;
    v52 = v24;
    v50 = v24 + 56;
    if (((*(_QWORD *)(v24 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v49 = ~v26;
      v48 = *(_QWORD *)(v47 + 72);
      v45 = v7;
      v46 = a1;
      v44 = v10;
      while (1)
      {
        sub_183058C44(*(_QWORD *)(v52 + 48) + v48 * a2, (uint64_t)v21, type metadata accessor for NWBrowser.Result);
        _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0((uint64_t)&v21[v7[5]], v51);
        v28 = v27;
        sub_183058C44((uint64_t)v21, (uint64_t)v19, type metadata accessor for NWBrowser.Result);
        sub_183058C44(a1, (uint64_t)v16, type metadata accessor for NWBrowser.Result);
        if ((v28 & 1) == 0)
          break;
        v29 = sub_1832895B4(*(_QWORD *)&v19[v7[6]], *(_QWORD *)&v16[v7[6]]);
        sub_183058AE0((uint64_t)v19, type metadata accessor for NWBrowser.Result);
        sub_183058AE0((uint64_t)v16, type metadata accessor for NWBrowser.Result);
        sub_183058C44((uint64_t)v21, (uint64_t)v13, type metadata accessor for NWBrowser.Result);
        sub_183058C44(a1, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
        if ((v29 & 1) == 0)
          goto LABEL_11;
        v30 = v7[7];
        v31 = *(_QWORD *)&v13[v30];
        v32 = *(NSObject **)&v13[v30 + 8];
        v33 = (uint64_t *)&v10[v30];
        v35 = *v33;
        v34 = v33[1];
        if (!v31)
        {
          if (!v35)
            goto LABEL_24;
LABEL_20:
          sub_1832506C0(v31);
          sub_1832506C0(v35);
          sub_183253844(v31);
          sub_183253844(v35);
          v7 = v45;
          a1 = v46;
          v10 = v44;
LABEL_11:
          sub_183058AE0((uint64_t)v10, type metadata accessor for NWBrowser.Result);
          sub_183058AE0((uint64_t)v13, type metadata accessor for NWBrowser.Result);
          sub_183058AE0((uint64_t)v21, type metadata accessor for NWBrowser.Result);
          goto LABEL_12;
        }
        if (!v35)
          goto LABEL_20;
        sub_1832506C0(v31);
        sub_1832506C0(v35);
        sub_1832506C0(v31);
        sub_1832506C0(v35);
        sub_1832506C0(v31);
        sub_1832506C0(v35);
        is_equal = nw_txt_record_is_equal(v32, v34);
        sub_183253844(v31);
        sub_183253844(v35);
        sub_183253844(v35);
        sub_183253844(v31);
        sub_183253844(v35);
        sub_183253844(v31);
        v10 = v44;
        sub_183058AE0((uint64_t)v44, type metadata accessor for NWBrowser.Result);
        sub_183058AE0((uint64_t)v13, type metadata accessor for NWBrowser.Result);
        sub_183058AE0((uint64_t)v21, type metadata accessor for NWBrowser.Result);
        v7 = v45;
        a1 = v46;
        if (is_equal)
          goto LABEL_25;
LABEL_12:
        a2 = (a2 + 1) & v49;
        if (((*(_QWORD *)(v50 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_21;
      }
      sub_183058AE0((uint64_t)v19, type metadata accessor for NWBrowser.Result);
      sub_183058AE0((uint64_t)v16, type metadata accessor for NWBrowser.Result);
      sub_183058C44((uint64_t)v21, (uint64_t)v13, type metadata accessor for NWBrowser.Result);
      sub_183058C44(a1, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
      goto LABEL_11;
    }
  }
LABEL_21:
  v36 = *v43;
  *(_QWORD *)(*v43 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_183058EC4(a1, *(_QWORD *)(v36 + 48) + *(_QWORD *)(v47 + 72) * a2, type metadata accessor for NWBrowser.Result);
  v38 = *(_QWORD *)(v36 + 16);
  v39 = __OFADD__(v38, 1);
  v40 = v38 + 1;
  if (v39)
  {
    __break(1u);
LABEL_24:
    sub_183253844(0);
    sub_183253844(0);
    sub_183058AE0((uint64_t)v44, type metadata accessor for NWBrowser.Result);
    sub_183058AE0((uint64_t)v13, type metadata accessor for NWBrowser.Result);
    sub_183058AE0((uint64_t)v21, type metadata accessor for NWBrowser.Result);
LABEL_25:
    result = sub_183B921C0();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v36 + 16) = v40;
  }
  return result;
}

BOOL _s7Network9NWBrowserC6ResultV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t *v23;
  NSObject *v24;
  uint64_t v25;
  _BOOL8 is_equal;
  uint64_t v28;

  v4 = type metadata accessor for NWBrowser.Result(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v28 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v28 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v28 - v15;
  _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0(a1 + *(int *)(v14 + 20), a2 + *(int *)(v14 + 20));
  v18 = v17;
  sub_183058C44(a1, (uint64_t)v16, type metadata accessor for NWBrowser.Result);
  sub_183058C44(a2, (uint64_t)v13, type metadata accessor for NWBrowser.Result);
  if ((v18 & 1) == 0)
  {
    sub_183058AE0((uint64_t)v16, type metadata accessor for NWBrowser.Result);
    sub_183058AE0((uint64_t)v13, type metadata accessor for NWBrowser.Result);
    sub_183058C44(a1, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
    sub_183058C44(a2, (uint64_t)v7, type metadata accessor for NWBrowser.Result);
    goto LABEL_7;
  }
  v19 = sub_1832895B4(*(_QWORD *)&v16[*(int *)(v4 + 24)], *(_QWORD *)&v13[*(int *)(v4 + 24)]);
  sub_183058AE0((uint64_t)v16, type metadata accessor for NWBrowser.Result);
  sub_183058AE0((uint64_t)v13, type metadata accessor for NWBrowser.Result);
  sub_183058C44(a1, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
  sub_183058C44(a2, (uint64_t)v7, type metadata accessor for NWBrowser.Result);
  if ((v19 & 1) == 0)
  {
LABEL_7:
    is_equal = 0;
    goto LABEL_8;
  }
  v20 = *(int *)(v4 + 28);
  v22 = *(_QWORD *)&v10[v20];
  v21 = *(NSObject **)&v10[v20 + 8];
  v23 = (uint64_t *)&v7[v20];
  v25 = *v23;
  v24 = v23[1];
  if (!v22)
  {
    if (!v25)
    {
      sub_183253844(0);
      sub_183253844(0);
      is_equal = 1;
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  if (!v25)
  {
LABEL_10:
    sub_1832506C0(v22);
    sub_1832506C0(v25);
    sub_183253844(v22);
    sub_183253844(v25);
    goto LABEL_7;
  }
  sub_1832506C0(v22);
  sub_1832506C0(v25);
  sub_1832506C0(v22);
  sub_1832506C0(v25);
  sub_1832506C0(v22);
  sub_1832506C0(v25);
  is_equal = nw_txt_record_is_equal(v21, v24);
  sub_183253844(v22);
  sub_183253844(v25);
  sub_183253844(v25);
  sub_183253844(v22);
  sub_183253844(v25);
  sub_183253844(v22);
LABEL_8:
  sub_183058AE0((uint64_t)v7, type metadata accessor for NWBrowser.Result);
  sub_183058AE0((uint64_t)v10, type metadata accessor for NWBrowser.Result);
  return is_equal;
}

void _s7Network9NWBrowserC6ResultV6ChangeO2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD v26[8];

  v4 = type metadata accessor for NWBrowser.Result.Change(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD75C8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NWBrowser.Result(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v26[2] = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v26[3] = (char *)v26 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v26[7] = (char *)v26 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v26[6] = (char *)v26 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v26[5] = (char *)v26 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v26[4] = (char *)v26 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  MEMORY[0x1E0C80A78](v23);
  v24 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_183058C44(a1, (uint64_t)v9, type metadata accessor for NWBrowser.Result.Change);
  sub_183058C44(a2, v24, type metadata accessor for NWBrowser.Result.Change);
  v25 = (char *)sub_18325348C + 4 * byte_183B9F3D1[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_18325348C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  sub_183058C44(v0, v4, type metadata accessor for NWBrowser.Result.Change);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_183058AE0(v4, type metadata accessor for NWBrowser.Result);
    sub_1830620D4(v0, &qword_1EDCD75C8);
    return 0;
  }
  else
  {
    sub_183058EC4(v4, v3, type metadata accessor for NWBrowser.Result);
    sub_183058EC4(v2, v1, type metadata accessor for NWBrowser.Result);
    sub_183058AE0(v0, type metadata accessor for NWBrowser.Result.Change);
    v5 = _s7Network9NWBrowserC6ResultV2eeoiySbAE_AEtFZ_0(v3, v1);
    sub_183058AE0(v1, type metadata accessor for NWBrowser.Result);
    sub_183058AE0(v3, type metadata accessor for NWBrowser.Result);
  }
  return v5;
}

uint64_t _s7Network9NWBrowserC6ResultV8MetadataO2eeoiySbAG_AGtFZ_0(uint64_t *a1, uint64_t *a2)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _BOOL8 is_equal;

  v3 = *a1;
  v2 = a1[1];
  v5 = *a2;
  v4 = a2[1];
  if (!*a1)
  {
    if (!v5)
    {
      sub_183253844(0);
      sub_183253844(0);
      return 1;
    }
    goto LABEL_5;
  }
  if (!v5)
  {
LABEL_5:
    sub_1832506C0(*a2);
    sub_1832506C0(v3);
    sub_183253844(v3);
    sub_183253844(v5);
    return 0;
  }
  sub_1832506C0(*a2);
  sub_1832506C0(v3);
  sub_1832506C0(v5);
  sub_1832506C0(v3);
  is_equal = nw_txt_record_is_equal(v2, v4);
  sub_183253844(v3);
  sub_183253844(v5);
  sub_183253844(v5);
  sub_183253844(v3);
  return is_equal;
}

uint64_t sub_183253844(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for NWBrowser.Result.Change(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCD76B0);
}

uint64_t sub_183253884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD76E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1832538CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  switch(a5 >> 5)
  {
    case 0:
    case 1:
    case 3:
      swift_bridgeObjectRetain();
      goto LABEL_3;
    case 2:
    case 4:
LABEL_3:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void sub_183253924(uint64_t a1)
{
  uint64_t v1;

  sub_1832BBE54(a1, *(_DWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_183253930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  result = a2;
  switch(a5 >> 5)
  {
    case 0:
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 2:
    case 4:
LABEL_3:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_183253988()
{
  unint64_t result;

  result = qword_1EDCDD028;
  if (!qword_1EDCDD028)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Descriptor.Options.Scope, &type metadata for NWBrowser.Descriptor.Options.Scope);
    atomic_store(result, (unint64_t *)&qword_1EDCDD028);
  }
  return result;
}

unint64_t sub_1832539D0()
{
  unint64_t result;

  result = qword_1EDCDD030;
  if (!qword_1EDCDD030)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Descriptor.Options.Scope, &type metadata for NWBrowser.Descriptor.Options.Scope);
    atomic_store(result, (unint64_t *)&qword_1EDCDD030);
  }
  return result;
}

unint64_t sub_183253A18()
{
  unint64_t result;

  result = qword_1EDCD7AA8;
  if (!qword_1EDCD7AA8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Descriptor.Options.Scope, &type metadata for NWBrowser.Descriptor.Options.Scope);
    atomic_store(result, (unint64_t *)&qword_1EDCD7AA8);
  }
  return result;
}

unint64_t sub_183253A60()
{
  unint64_t result;

  result = qword_1EDCD7AB0;
  if (!qword_1EDCD7AB0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Descriptor.Options.Scope, &type metadata for NWBrowser.Descriptor.Options.Scope);
    atomic_store(result, (unint64_t *)&qword_1EDCD7AB0);
  }
  return result;
}

unint64_t sub_183253AA8()
{
  unint64_t result;

  result = qword_1EDCDD038;
  if (!qword_1EDCDD038)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Descriptor.Options.DeviceType, &type metadata for NWBrowser.Descriptor.Options.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1EDCDD038);
  }
  return result;
}

unint64_t sub_183253AF0()
{
  unint64_t result;

  result = qword_1EDCDD040;
  if (!qword_1EDCDD040)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Descriptor.Options.DeviceType, &type metadata for NWBrowser.Descriptor.Options.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1EDCDD040);
  }
  return result;
}

unint64_t sub_183253B38()
{
  unint64_t result;

  result = qword_1EDCDD048;
  if (!qword_1EDCDD048)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Descriptor.Options.DeviceType, &type metadata for NWBrowser.Descriptor.Options.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1EDCDD048);
  }
  return result;
}

unint64_t sub_183253B80()
{
  unint64_t result;

  result = qword_1EDCDD050;
  if (!qword_1EDCDD050)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Descriptor.Options.DeviceType, &type metadata for NWBrowser.Descriptor.Options.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1EDCDD050);
  }
  return result;
}

unint64_t sub_183253BC8()
{
  unint64_t result;

  result = qword_1EDCDD058;
  if (!qword_1EDCDD058)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Result.Change.Flags, &type metadata for NWBrowser.Result.Change.Flags);
    atomic_store(result, (unint64_t *)&qword_1EDCDD058);
  }
  return result;
}

unint64_t sub_183253C10()
{
  unint64_t result;

  result = qword_1EDCDD060;
  if (!qword_1EDCDD060)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Result.Change.Flags, &type metadata for NWBrowser.Result.Change.Flags);
    atomic_store(result, (unint64_t *)&qword_1EDCDD060);
  }
  return result;
}

unint64_t sub_183253C58()
{
  unint64_t result;

  result = qword_1EDCDD068;
  if (!qword_1EDCDD068)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Result.Change.Flags, &type metadata for NWBrowser.Result.Change.Flags);
    atomic_store(result, (unint64_t *)&qword_1EDCDD068);
  }
  return result;
}

unint64_t sub_183253CA0()
{
  unint64_t result;

  result = qword_1EDCDD070;
  if (!qword_1EDCDD070)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Result.Change.Flags, &type metadata for NWBrowser.Result.Change.Flags);
    atomic_store(result, (unint64_t *)&qword_1EDCDD070);
  }
  return result;
}

uint64_t sub_183253CE4()
{
  return sub_183064644(&qword_1EDCD76A8, type metadata accessor for NWBrowser.Result.Change, (uint64_t)&protocol conformance descriptor for NWBrowser.Result.Change);
}

uint64_t sub_183253D10()
{
  return sub_183064644((unint64_t *)&unk_1EDCD76C0, type metadata accessor for NWBrowser.Result, (uint64_t)&protocol conformance descriptor for NWBrowser.Result);
}

unint64_t sub_183253D40()
{
  unint64_t result;

  result = qword_1EDCDD078;
  if (!qword_1EDCDD078)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWBrowser.Invitation.Scope, &type metadata for NWBrowser.Invitation.Scope);
    atomic_store(result, (unint64_t *)&qword_1EDCDD078);
  }
  return result;
}

double sub_183253D84@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18324F2B4(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_18324F0E0, a2);
}

double sub_183253DA4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18324F2B4(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_18324F954, a2);
}

uint64_t type metadata accessor for NWBrowser()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWBrowser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWBrowser.__allocating_init(for:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t destroy for NWBrowser.Descriptor(uint64_t a1)
{
  return sub_183253930(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for NWBrowser.Descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1832538CC(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for NWBrowser.Descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1832538CC(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_183253930(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NWBrowser.Descriptor(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_183253930(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWBrowser.Descriptor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 124);
  v3 = ((*(unsigned __int8 *)(a1 + 32) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NWBrowser.Descriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 124;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_183253FE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 5;
}

uint64_t sub_183253FF4(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0x1Fu;
  return result;
}

uint64_t sub_183254004(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.Descriptor()
{
  return &type metadata for NWBrowser.Descriptor;
}

uint64_t sub_18325402C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NWBrowser.Descriptor.Options(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NWBrowser.Descriptor.Options(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWBrowser.Descriptor.Options(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWBrowser.Descriptor.Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.Descriptor.Options()
{
  return &type metadata for NWBrowser.Descriptor.Options;
}

ValueMetadata *type metadata accessor for NWBrowser.Descriptor.Options.Scope()
{
  return &type metadata for NWBrowser.Descriptor.Options.Scope;
}

ValueMetadata *type metadata accessor for NWBrowser.Descriptor.Options.DeviceType()
{
  return &type metadata for NWBrowser.Descriptor.Options.DeviceType;
}

uint64_t initializeBufferWithCopyOfBuffer for NWBrowser.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    type metadata accessor for NWEndpoint();
    swift_unknownObjectRetain();
    v5 = (char *)&loc_18325424C + 4 * byte_183B9F3DF[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  swift_retain();
  return v6;
}

uint64_t destroy for NWBrowser.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_unknownObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for NWEndpoint();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_183058BF0(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
      break;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v4 + 48) != 1)
        goto LABEL_7;
      break;
    case 2u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      v5 = sub_183B913A4();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      break;
    case 4u:
LABEL_7:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + *(int *)(a2 + 28));
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

void initializeWithCopy for NWBrowser.Result(_QWORD *a1, _QWORD *a2)
{
  char *v2;

  *a1 = *a2;
  type metadata accessor for NWEndpoint();
  swift_unknownObjectRetain();
  v2 = (char *)sub_183254538 + 4 * byte_183B9F3E9[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_183254538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = *(_QWORD *)(v4 + 16);
  v14 = *(_BYTE *)(v4 + 24);
  sub_183058E2C(*(_QWORD *)v4, v6, v7, v14);
  *(_QWORD *)v3 = v5;
  *(_QWORD *)(v3 + 8) = v6;
  *(_QWORD *)(v3 + 16) = v7;
  *(_BYTE *)(v3 + 24) = v14;
  *(_WORD *)(v3 + 26) = *(_WORD *)(v4 + 26);
  swift_storeEnumTagMultiPayload();
  v8 = *(int *)(v2 + 28);
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v9 = (_QWORD *)(v0 + v8);
  v10 = v1 + v8;
  v11 = *(_QWORD *)(v1 + v8);
  swift_bridgeObjectRetain();
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 8);
    *v9 = v11;
    v9[1] = v12;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  return v0;
}

_QWORD *assignWithCopy for NWBrowser.Result(_QWORD *a1, _QWORD *a2, int *a3)
{
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)a1 + a3[5], (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    type metadata accessor for NWEndpoint();
    v6 = (char *)&loc_183254714 + 4 * byte_183B9F3EE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[7];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)((char *)a2 + v7);
  if (!*(_QWORD *)((char *)a1 + v7))
  {
    if (v10)
    {
      *v8 = v10;
      v8[1] = *((_QWORD *)v9 + 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      return a1;
    }
LABEL_9:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    return a1;
  }
  if (!v10)
  {
    sub_1832548C0((uint64_t)a1 + v7);
    goto LABEL_9;
  }
  *v8 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[1] = *((_QWORD *)v9 + 1);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1832548C0(uint64_t a1)
{
  destroy for NWTXTRecord();
  return a1;
}

_QWORD *initializeWithTake for NWBrowser.Result(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for NWEndpoint();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v10 = sub_183B913A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

_QWORD *assignWithTake for NWBrowser.Result(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  *a1 = *a2;
  swift_unknownObjectRelease();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_183058AE0((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v9 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v10 = sub_183B913A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  if (!*(_QWORD *)((char *)a1 + v11))
    goto LABEL_9;
  if (!*(_QWORD *)v13)
  {
    sub_1832548C0(v12);
LABEL_9:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    return a1;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 8) = *((_QWORD *)v13 + 1);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWBrowser.Result()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183254AF8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for NWEndpoint();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NWBrowser.Result()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_183254B80(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for NWEndpoint();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_183254BF4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t destroy for NWBrowser.Result.Metadata(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t _s7Network9NWBrowserC6ResultV8MetadataOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  return a1;
}

unint64_t *assignWithCopy for NWBrowser.Result.Metadata(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *assignWithTake for NWBrowser.Result.Metadata(_QWORD *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWBrowser.Result.Metadata(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NWBrowser.Result.Metadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_183254EE4(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

ValueMetadata *type metadata accessor for NWBrowser.Result.Metadata()
{
  return &type metadata for NWBrowser.Result.Metadata;
}

uint64_t *initializeBufferWithCopyOfBuffer for NWBrowser.Result.Change(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      v11 = (char *)&loc_1832550A4 + 4 * byte_183B9F3F3[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      v12 = (char *)&loc_183255148 + 4 * byte_183B9F3FD[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      v8 = (char *)&loc_183254FC4 + 4 * word_183B9F402[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void sub_18325519C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = v4[1];
  *v3 = *v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v6 = *(int *)(v2 + 28);
  v7 = (_QWORD *)(v0 + v6);
  v8 = v1 + v6;
  v9 = *(_QWORD *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_1832551AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v6 = *(int *)(v2 + 28);
  v7 = (_QWORD *)(v0 + v6);
  v8 = v1 + v6;
  v9 = *(_QWORD *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_1832551D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *v3 = *v4;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v5 = *(int *)(v2 + 28);
  v6 = (_QWORD *)(v0 + v5);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + v5);
  swift_bridgeObjectRetain();
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 8);
    *v6 = v8;
    v6[1] = v9;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)v7;
  }
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_1832551E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v5 = v4[1];
  *v3 = *v4;
  v3[1] = v5;
  v6 = v4[3];
  v3[2] = v4[2];
  v3[3] = v6;
  v7 = v4[5];
  v3[4] = v4[4];
  v3[5] = v7;
  v8 = v4[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1)
    swift_unknownObjectRetain();
  v3[6] = v8;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v9 = *(int *)(v2 + 28);
  v10 = (_QWORD *)(v0 + v9);
  v11 = v1 + v9;
  v12 = *(_QWORD *)(v1 + v9);
  swift_bridgeObjectRetain();
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    *v10 = v12;
    v10[1] = v13;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD75C0);
  *(_QWORD *)(v0 + *(int *)(v15 + 48)) = *(_QWORD *)(v1 + *(int *)(v15 + 48));
  swift_unknownObjectRetain();
  v14 = (char *)sub_183255320 + 4 * byte_183B9F3F8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_183255228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v5 = v4[1];
  *v3 = *v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v6 = *(int *)(v2 + 28);
  v7 = (_QWORD *)(v0 + v6);
  v8 = v1 + v6;
  v9 = *(_QWORD *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD75C0);
  *(_QWORD *)(v0 + *(int *)(v12 + 48)) = *(_QWORD *)(v1 + *(int *)(v12 + 48));
  swift_unknownObjectRetain();
  v11 = (char *)sub_183255320 + 4 * byte_183B9F3F8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_183255238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v5 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v6 = *(int *)(v2 + 28);
  v7 = (_QWORD *)(v0 + v6);
  v8 = v1 + v6;
  v9 = *(_QWORD *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD75C0);
  *(_QWORD *)(v0 + *(int *)(v12 + 48)) = *(_QWORD *)(v1 + *(int *)(v12 + 48));
  swift_unknownObjectRetain();
  v11 = (char *)sub_183255320 + 4 * byte_183B9F3F8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_18325525C()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  JUMPOUT(0x183255268);
}

void sub_183255320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *(_QWORD *)v20;
  v21 = *(_QWORD *)(v20 + 8);
  v28 = *(_QWORD *)(v20 + 16);
  v27 = *(_BYTE *)(v20 + 24);
  sub_183058E2C(*(_QWORD *)v20, v21, v28, v27);
  *(_QWORD *)v19 = v29;
  *(_QWORD *)(v19 + 8) = v21;
  *(_QWORD *)(v19 + 16) = v28;
  *(_BYTE *)(v19 + 24) = v27;
  *(_WORD *)(v19 + 26) = *(_WORD *)(v20 + 26);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v17 + *(int *)(v16 + 24)) = *(_QWORD *)(v18 + *(int *)(v16 + 24));
  v22 = *(int *)(v16 + 28);
  v23 = (_QWORD *)(v17 + v22);
  v24 = v18 + v22;
  v25 = *(_QWORD *)(v18 + v22);
  swift_bridgeObjectRetain();
  if (v25)
  {
    v26 = *(_QWORD *)(v24 + 8);
    *v23 = v25;
    v23[1] = v26;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  *(_BYTE *)(v14 + *(int *)(a14 + 64)) = *(_BYTE *)(v15 + *(int *)(a14 + 64));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_183255368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v4[1];
  *v3 = *v4;
  v3[1] = v5;
  v6 = v4[3];
  v3[2] = v4[2];
  v3[3] = v6;
  v7 = v4[5];
  v3[4] = v4[4];
  v3[5] = v7;
  v8 = v4[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1)
    swift_unknownObjectRetain();
  v3[6] = v8;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v9 = *(int *)(v2 + 28);
  v10 = (_QWORD *)(v0 + v9);
  v11 = v1 + v9;
  v12 = *(_QWORD *)(v1 + v9);
  swift_bridgeObjectRetain();
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    *v10 = v12;
    v10[1] = v13;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_1832553B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = v4[1];
  *v3 = *v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v6 = *(int *)(v2 + 28);
  v7 = (_QWORD *)(v0 + v6);
  v8 = v1 + v6;
  v9 = *(_QWORD *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_1832553C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v0 + *(int *)(v2 + 24)) = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  v6 = *(int *)(v2 + 28);
  v7 = (_QWORD *)(v0 + v6);
  v8 = v1 + v6;
  v9 = *(_QWORD *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_1832553E4()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  JUMPOUT(0x1832553F0);
}

void sub_18325545C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v20[3];
  v19[2] = v20[2];
  v19[3] = v22;
  v23 = v20[5];
  v19[4] = v20[4];
  v19[5] = v23;
  v24 = v20[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v24 != 1)
    swift_unknownObjectRetain();
  v19[6] = v24;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v17 + *(int *)(v16 + 24)) = *(_QWORD *)(v18 + *(int *)(v16 + 24));
  v25 = *(int *)(v16 + 28);
  v26 = (_QWORD *)(v17 + v25);
  v27 = v18 + v25;
  v28 = *(_QWORD *)(v18 + v25);
  swift_bridgeObjectRetain();
  if (v28)
  {
    v29 = *(_QWORD *)(v27 + 8);
    *v26 = v28;
    v26[1] = v29;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  *(_BYTE *)(v14 + *(int *)(a14 + 64)) = *(_BYTE *)(v15 + *(int *)(a14 + 64));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_1832554B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v17 + *(int *)(v16 + 24)) = *(_QWORD *)(v18 + *(int *)(v16 + 24));
  v22 = *(int *)(v16 + 28);
  v23 = (_QWORD *)(v17 + v22);
  v24 = v18 + v22;
  v25 = *(_QWORD *)(v18 + v22);
  swift_bridgeObjectRetain();
  if (v25)
  {
    v26 = *(_QWORD *)(v24 + 8);
    *v23 = v25;
    v23[1] = v26;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  *(_BYTE *)(v14 + *(int *)(a14 + 64)) = *(_BYTE *)(v15 + *(int *)(a14 + 64));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_1832554C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v17 + *(int *)(v16 + 24)) = *(_QWORD *)(v18 + *(int *)(v16 + 24));
  v22 = *(int *)(v16 + 28);
  v23 = (_QWORD *)(v17 + v22);
  v24 = v18 + v22;
  v25 = *(_QWORD *)(v18 + v22);
  swift_bridgeObjectRetain();
  if (v25)
  {
    v26 = *(_QWORD *)(v24 + 8);
    *v23 = v25;
    v23[1] = v26;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  *(_BYTE *)(v14 + *(int *)(a14 + 64)) = *(_BYTE *)(v15 + *(int *)(a14 + 64));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183255020);
}

void sub_1832554E4()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  JUMPOUT(0x1832554F0);
}

void sub_18325556C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  v5 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 != 1)
    swift_unknownObjectRetain();
  v0[6] = v5;
  JUMPOUT(0x1832555B0);
}

uint64_t destroy for NWBrowser.Result.Change(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    v5 = type metadata accessor for NWBrowser.Result(0);
    v6 = a1 + *(int *)(v5 + 20);
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_BYTE *)(v6 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v6 + 48) != 1)
          goto LABEL_20;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v8 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
        break;
      case 4u:
LABEL_20:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + *(int *)(v5 + 28)))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v9 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD75C0) + 48);
    swift_unknownObjectRelease();
    v10 = v9 + *(int *)(v5 + 20);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_BYTE *)(v10 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v10 + 48) != 1)
          goto LABEL_29;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v11 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
        break;
      case 4u:
LABEL_29:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
    swift_bridgeObjectRelease();
    result = *(_QWORD *)(v9 + *(int *)(v5 + 28));
    if (result)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    if ((_DWORD)result == 1)
    {
      swift_unknownObjectRelease();
      v3 = type metadata accessor for NWBrowser.Result(0);
      v4 = a1 + *(int *)(v3 + 20);
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_8:
          sub_183058BF0(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
          break;
        case 1u:
LABEL_9:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v4 + 48) != 1)
            goto LABEL_13;
          break;
        case 2u:
LABEL_11:
          swift_bridgeObjectRelease();
          break;
        case 3u:
LABEL_12:
          v7 = sub_183B913A4();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
          break;
        case 4u:
LABEL_13:
          swift_unknownObjectRelease();
          break;
        default:
          break;
      }
    }
    else
    {
      if ((_DWORD)result)
        return result;
      swift_unknownObjectRelease();
      v3 = type metadata accessor for NWBrowser.Result(0);
      v4 = a1 + *(int *)(v3 + 20);
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_8;
        case 1u:
          goto LABEL_9;
        case 2u:
          goto LABEL_11;
        case 3u:
          goto LABEL_12;
        case 4u:
          goto LABEL_13;
        default:
          break;
      }
    }
    swift_bridgeObjectRelease();
    result = *(_QWORD *)(a1 + *(int *)(v3 + 28));
    if (result)
      goto LABEL_15;
  }
  return result;
}

_QWORD *initializeWithCopy for NWBrowser.Result.Change(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  char *v7;
  char *v8;
  char *v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    type metadata accessor for NWBrowser.Result(0);
    type metadata accessor for NWEndpoint();
    swift_unknownObjectRetain();
    v8 = (char *)&loc_183255AC8 + 4 * byte_183B9F420[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    type metadata accessor for NWBrowser.Result(0);
    type metadata accessor for NWEndpoint();
    swift_unknownObjectRetain();
    v9 = (char *)&loc_183255B68 + 4 * byte_183B9F42A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    type metadata accessor for NWBrowser.Result(0);
    type metadata accessor for NWEndpoint();
    swift_unknownObjectRetain();
    v7 = (char *)&loc_183255A20 + 4 * byte_183B9F42F[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for NWBrowser.Result.Change(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  char *v7;
  char *v8;
  char *v9;

  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)a1, type metadata accessor for NWBrowser.Result.Change);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      v8 = (char *)&loc_1832561B8 + 4 * byte_183B9F434[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      v9 = (char *)&loc_18325625C + 4 * byte_183B9F43E[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      v7 = (char *)&loc_183256118 + 4 * word_183B9F444[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *initializeWithTake for NWBrowser.Result.Change(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *a1 = *a2;
      v13 = (int *)type metadata accessor for NWBrowser.Result(0);
      v14 = v13[5];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v18 = sub_183B913A4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      *(_QWORD *)((char *)a1 + v13[6]) = *(_QWORD *)((char *)a2 + v13[6]);
      *(_OWORD *)((char *)a1 + v13[7]) = *(_OWORD *)((char *)a2 + v13[7]);
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD75C0);
      v26 = *(int *)(v25 + 48);
      v27 = (_QWORD *)((char *)a1 + v26);
      v28 = (char *)a2 + v26;
      *v27 = *(_QWORD *)((char *)a2 + v26);
      v29 = v13[5];
      v30 = (char *)v27 + v29;
      v31 = &v28[v29];
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v32 = sub_183B913A4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      *(_QWORD *)((char *)v27 + v13[6]) = *(_QWORD *)&v28[v13[6]];
      *(_OWORD *)((char *)v27 + v13[7]) = *(_OWORD *)&v28[v13[7]];
      *((_BYTE *)a1 + *(int *)(v25 + 64)) = *((_BYTE *)a2 + *(int *)(v25 + 64));
      goto LABEL_20;
    case 1:
      *a1 = *a2;
      v19 = (int *)type metadata accessor for NWBrowser.Result(0);
      v20 = v19[5];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v24 = sub_183B913A4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      *(_QWORD *)((char *)a1 + v19[6]) = *(_QWORD *)((char *)a2 + v19[6]);
      *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
      goto LABEL_20;
    case 0:
      *a1 = *a2;
      v7 = (int *)type metadata accessor for NWBrowser.Result(0);
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v12 = sub_183B913A4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
      *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
LABEL_20:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithTake for NWBrowser.Result.Change(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)a1, type metadata accessor for NWBrowser.Result.Change);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *a1 = *a2;
        v13 = (int *)type metadata accessor for NWBrowser.Result(0);
        v14 = v13[5];
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for NWEndpoint();
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          v18 = sub_183B913A4();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        *(_QWORD *)((char *)a1 + v13[6]) = *(_QWORD *)((char *)a2 + v13[6]);
        *(_OWORD *)((char *)a1 + v13[7]) = *(_OWORD *)((char *)a2 + v13[7]);
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD75C0);
        v26 = *(int *)(v25 + 48);
        v27 = (_QWORD *)((char *)a1 + v26);
        v28 = (char *)a2 + v26;
        *v27 = *(_QWORD *)((char *)a2 + v26);
        v29 = v13[5];
        v30 = (char *)v27 + v29;
        v31 = &v28[v29];
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          v32 = sub_183B913A4();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        *(_QWORD *)((char *)v27 + v13[6]) = *(_QWORD *)&v28[v13[6]];
        *(_OWORD *)((char *)v27 + v13[7]) = *(_OWORD *)&v28[v13[7]];
        *((_BYTE *)a1 + *(int *)(v25 + 64)) = *((_BYTE *)a2 + *(int *)(v25 + 64));
        goto LABEL_21;
      case 1:
        *a1 = *a2;
        v19 = (int *)type metadata accessor for NWBrowser.Result(0);
        v20 = v19[5];
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        v23 = type metadata accessor for NWEndpoint();
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          v24 = sub_183B913A4();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        *(_QWORD *)((char *)a1 + v19[6]) = *(_QWORD *)((char *)a2 + v19[6]);
        *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
        goto LABEL_21;
      case 0:
        *a1 = *a2;
        v7 = (int *)type metadata accessor for NWBrowser.Result(0);
        v8 = v7[5];
        v9 = (char *)a1 + v8;
        v10 = (char *)a2 + v8;
        v11 = type metadata accessor for NWEndpoint();
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          v12 = sub_183B913A4();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
        *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
LABEL_21:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NWEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for NWEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_183256E90()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_183256EA0()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  result = type metadata accessor for NWBrowser.Result(319);
  if (v1 <= 0x3F)
  {
    v3 = *(_QWORD *)(result - 8) + 64;
    v4 = v3;
    swift_getTupleTypeLayout3();
    v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.Result.Change.Flags()
{
  return &type metadata for NWBrowser.Result.Change.Flags;
}

uint64_t getEnumTagSinglePayload for NWBrowser.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3E && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 62);
  v3 = ((*(unsigned __int8 *)(a1 + 4) >> 6) & 0xFFFFFFC3 | (4 * ((*(unsigned __int8 *)(a1 + 4) >> 2) & 0xF))) ^ 0x3F;
  if (v3 >= 0x3D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NWBrowser.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 62;
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
    {
      *(_DWORD *)result = 0;
      *(_BYTE *)(result + 4) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_183256FDC(uint64_t result)
{
  *(_BYTE *)(result + 4) &= 0x3Fu;
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.State()
{
  return &type metadata for NWBrowser.State;
}

ValueMetadata *type metadata accessor for NWBrowser.Invitation()
{
  return &type metadata for NWBrowser.Invitation;
}

uint64_t getEnumTagSinglePayload for HTTPField.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7Network9NWBrowserC10InvitationV5ScopeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1832570F8 + 4 * byte_183B9F453[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18325712C + 4 * byte_183B9F44E[v4]))();
}

uint64_t sub_18325712C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183257134(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18325713CLL);
  return result;
}

uint64_t sub_183257148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183257150);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_183257154(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18325715C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.Invitation.Scope()
{
  return &type metadata for NWBrowser.Invitation.Scope;
}

void destroy for NWBrowser.LockedState(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24))
    swift_release();
  if (*(_QWORD *)(a1 + 40))
    swift_release();

}

uint64_t initializeWithCopy for NWBrowser.LockedState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *v6;
  }
  v8 = *(_QWORD *)(a2 + 40);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  v10 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  v11 = v10;
  return a1;
}

uint64_t assignWithCopy for NWBrowser.LockedState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = v6;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v7;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  v8 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v8)
    {
      v10 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = v10;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_15;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  swift_retain();
  swift_release();
LABEL_15:
  v11 = *(void **)(a1 + 56);
  v12 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = v12;

  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NWBrowser.LockedState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  if (v5)
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v6;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  v8 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v8)
    {
      v10 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = v10;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_15;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  swift_release();
LABEL_15:
  v11 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  return a1;
}

uint64_t getEnumTagSinglePayload for NWBrowser.LockedState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWBrowser.LockedState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.LockedState()
{
  return &type metadata for NWBrowser.LockedState;
}

uint64_t sub_18325754C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  v5 = a2;
  v6 = a1;
  return v3(&v6, &v5);
}

uint64_t sub_183257580(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 1)
    return sub_18324A994(result, a2);
  if (!a3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1832575A0(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 1)
    return sub_18308485C(result, a2);
  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1832575C0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1832575E8()
{
  return swift_deallocObject();
}

uint64_t sub_1832575F8()
{
  return swift_deallocObject();
}

uint64_t sub_183257608()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18325762C(uint64_t a1, int a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1832F4060(a1, a2, a3, a4, v4);
}

uint64_t sub_1832576E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t result;
  addrinfo *v30;
  sockaddr *ai_addr;
  int sa_family;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unsigned int v37;
  NWConcrete_nw_interface *v38;
  uint64_t v39;
  _QWORD v40[3];
  addrinfo v41;
  addrinfo *v42[3];

  v42[2] = *(addrinfo **)MEMORY[0x1E0C80C00];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB258);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[1] = a1;
  v40[2] = a2;
  *(_QWORD *)&v41.ai_flags = a1;
  *(_QWORD *)&v41.ai_socktype = a2;
  v42[0] = (addrinfo *)37;
  v42[1] = (addrinfo *)0xE100000000000000;
  v11 = sub_183B914B8();
  v12 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  sub_1832616B0();
  swift_bridgeObjectRetain_n();
  v13 = sub_183B91D34();
  v15 = v14;
  v17 = v16;
  sub_1830620D4((uint64_t)v10, &qword_1EDCDB258);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    v18 = sub_183257A1C(v15, a1, a2);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    swift_bridgeObjectRelease();
    MEMORY[0x186DB1C70](v18, v20, v22, v24);
    swift_bridgeObjectRelease();
    v25 = sub_183B91758();
    swift_bridgeObjectRelease();
    v12 = (uint64_t)nw_interface_create_with_name((char *)(v25 + 32));
    swift_release();
    if (v12)
      sub_183257A68(v13);
    else
      v12 = 1;
  }
  v41.ai_flags = 4;
  v41.ai_family = a3;
  v26 = a3;
  *(_QWORD *)&v41.ai_socktype = 1;
  v41.ai_addrlen = 0;
  memset(&v41.ai_canonname, 0, 24);
  v42[0] = 0;
  v27 = sub_183B91758();
  swift_bridgeObjectRelease();
  v28 = getaddrinfo((const char *)(v27 + 32), 0, &v41, v42);
  swift_release();
  if (v28 || (v30 = v42[0]) == 0)
  {
    result = sub_183058B1C(v12);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 24) = -1;
    return result;
  }
  ai_addr = v42[0]->ai_addr;
  if (ai_addr)
  {
    sa_family = ai_addr->sa_family;
    if (sa_family == 30)
    {
      v34 = *(_QWORD *)&ai_addr->sa_data[6];
      v35 = *(_QWORD *)&ai_addr[1].sa_len;
      v37 = *(_DWORD *)&ai_addr[1].sa_data[6];
      if (v37)
      {
        v38 = nw_interface_create_with_index(v37);
        if (v38)
          v39 = (uint64_t)v38;
        else
          v39 = 1;
        sub_183058B1C(v12);
        v12 = v39;
      }
      if (v34 || (_DWORD)v35 != -65536 || v26)
      {
        v36 = 2;
        v33 = v12;
        goto LABEL_24;
      }
      v33 = 0;
      v34 = HIDWORD(v35);
LABEL_22:
      v36 = 1;
      v35 = v12;
LABEL_24:
      sub_183058E80(v12);
      goto LABEL_25;
    }
    if (sa_family == 2)
    {
      v33 = 0;
      v34 = *(unsigned int *)&ai_addr->sa_data[2];
      goto LABEL_22;
    }
  }
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v36 = -1;
LABEL_25:
  freeaddrinfo(v30);
  result = sub_183058B1C(v12);
  *(_QWORD *)a4 = v34;
  *(_QWORD *)(a4 + 8) = v35;
  *(_QWORD *)(a4 + 16) = v33;
  *(_BYTE *)(a4 + 24) = v36;
  return result;
}

unint64_t sub_183257A1C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return sub_183B91884();
  __break(1u);
  return result;
}

unint64_t sub_183257A68(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v1 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return sub_183B91770();
  __break(1u);
  return result;
}

BOOL IPv6Address.isIPv4Mapped.getter()
{
  uint64_t v0;

  return (*(_QWORD *)v0 | *(unsigned int *)(v0 + 8) ^ 0xFFFF0000) == 0;
}

void IPv6Address.asIPv4.getter(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;

  if (!*v1
    && ((v3 = v1[1], v2 = v1[2], (_DWORD)v3 == -65536)
     || ((v3 & 0xFEFFFFFF00000000) != 0 ? (v4 = (_DWORD)v3 == 0) : (v4 = 0), v4)))
  {
    *a1 = HIDWORD(v3);
    a1[1] = v2;
    sub_183058E80(v2);
  }
  else
  {
    *(_OWORD *)a1 = xmmword_183B9FCE0;
  }
}

void sub_183257B10()
{
  dword_1EDCDD0E0 = 0;
  qword_1EDCDD0E8 = 1;
}

uint64_t static IPv4Address.any.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_183257CC4(&qword_1EDCDC4C8, &dword_1EDCDD0E0, &qword_1EDCDD0E8, a1);
}

void sub_183257B48()
{
  dword_1EDCDD0F0 = -1;
  qword_1EDCDD0F8 = 1;
}

uint64_t static IPv4Address.broadcast.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_183257CC4(&qword_1EDCDC4D0, &dword_1EDCDD0F0, &qword_1EDCDD0F8, a1);
}

void sub_183257B84()
{
  dword_1EDCDD100 = 16777343;
  qword_1EDCDD108 = 1;
}

uint64_t static IPv4Address.loopback.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_183257CC4(&qword_1EDCDC4D8, &dword_1EDCDD100, &qword_1EDCDD108, a1);
}

void sub_183257BC4()
{
  dword_1EDCDD110 = 16777440;
  qword_1EDCDD118 = 1;
}

uint64_t static IPv4Address.allHostsGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_183257CC4(&qword_1EDCDC4E0, &dword_1EDCDD110, &qword_1EDCDD118, a1);
}

void sub_183257C04()
{
  dword_1EDCDD120 = 33554656;
  qword_1EDCDD128 = 1;
}

uint64_t static IPv4Address.allRoutersGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_183257CC4(&qword_1EDCDC4E8, &dword_1EDCDD120, &qword_1EDCDD128, a1);
}

void sub_183257C44()
{
  dword_1EDCDD130 = 369098976;
  qword_1EDCDD138 = 1;
}

uint64_t static IPv4Address.allReportsGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_183257CC4(&qword_1EDCDC4F0, &dword_1EDCDD130, &qword_1EDCDD138, a1);
}

void sub_183257C84()
{
  dword_1EDCDD140 = -83885856;
  qword_1EDCDD148 = 1;
}

uint64_t static IPv4Address.mdnsGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_183257CC4(&qword_1EDCDC4F8, &dword_1EDCDD140, &qword_1EDCDD148, a1);
}

uint64_t sub_183257CC4@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;

  if (*a1 != -1)
    swift_once();
  v7 = *a3;
  *(_DWORD *)a4 = *a2;
  *(_QWORD *)(a4 + 8) = v7;
  return sub_183058E80(v7);
}

uint64_t IPv4Address.isLoopback.getter()
{
  int *v0;
  int v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  nw_interface_t v6;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  if (qword_1EDCDC4D8 != -1)
    swift_once();
  if (v1 == dword_1EDCDD100)
  {
    v3 = qword_1EDCDD108;
    if (v2 == 1)
    {
      if (qword_1EDCDD108 == 1)
        return v3 & 1;
    }
    else
    {
      v6 = v2;
      if (qword_1EDCDD108 != 1)
      {
        v5 = qword_1EDCDD108;
        swift_unknownObjectRetain_n();
        LOBYTE(v3) = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v6, (nw_interface_t *)&v5);
        swift_unknownObjectRelease();
        sub_183058B1C((uint64_t)v2);
        return v3 & 1;
      }
      swift_unknownObjectRetain();
    }
    sub_183058E80(v3);
    sub_183058B1C((uint64_t)v2);
    sub_183058B1C(v3);
    LOBYTE(v3) = 0;
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3 & 1;
}

BOOL IPv4Address.isLinkLocal.getter()
{
  __int16 *v0;

  return *v0 == -343;
}

BOOL IPv4Address.isMulticast.getter()
{
  _DWORD *v0;

  return (*v0 & 0xF0) == 224;
}

uint64_t IPv4Address.rawValue.getter()
{
  int *v0;
  _QWORD *v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  _QWORD v8[6];

  v8[5] = *MEMORY[0x1E0C80C00];
  v7 = *v0;
  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = &v7;
  v8[1] = v8;
  v1 = __swift_project_boxed_opaque_existential_2(v8, MEMORY[0x1E0DEAC20]);
  v2 = (_BYTE *)*v1;
  if (*v1 && (v3 = (_BYTE *)v1[1], v4 = v3 - v2, v3 != v2))
  {
    if (v4 <= 14)
    {
      v5 = sub_1832614E4(v2, v3);
    }
    else if ((unint64_t)v4 >= 0x7FFFFFFF)
    {
      v5 = sub_1832615A4((uint64_t)v2, (uint64_t)v3);
    }
    else
    {
      v5 = sub_18326161C((uint64_t)v2, (uint64_t)v3);
    }
  }
  else
  {
    v5 = 0;
  }
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return v5;
}

uint64_t sub_183257F24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD270);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_1830620D4((uint64_t)v14, &qword_1EDCDD278);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_183B91E78();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_183261830(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_183B9180C();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_183261894(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x1E0C80A78](*(_QWORD *)&v14[0]);
    sub_18326027C();
    __asm { BR              X12 }
  }
  sub_183262D80(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_2(v17, v17[3]);
  sub_183B91314();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t sub_183258428(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_2(v8, MEMORY[0x1E0DEAC20]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1832614E4(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_1832615A4((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_18326161C((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return v6;
}

void IPv4Address.init(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_183258524@<X0>(int a1@<W8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (BYTE6(v3) == 4)
  {
    if (!a1)
    {
      v9 = v4;
      goto LABEL_13;
    }
    if (a1 == 1)
    {
      if ((int)v4 <= v4 >> 32)
      {
        v5 = sub_183B912D8();
        if (!v5)
        {
LABEL_18:
          sub_183B912F0();
          __break(1u);
          goto LABEL_19;
        }
        v6 = v5;
        v7 = sub_183B912FC();
        v8 = (int)v4 - v7;
        if (!__OFSUB__((int)v4, v7))
        {
          sub_183B912F0();
          v9 = *(_DWORD *)(v6 + v8);
LABEL_13:
          result = sub_18308485C(v4, v3);
          v11 = v9;
          goto LABEL_14;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      __break(1u);
    }
    else
    {
      v12 = *(_QWORD *)(v4 + 16);
      swift_retain();
      swift_retain();
      v13 = sub_183B912D8();
      if (!v13)
      {
LABEL_19:
        sub_183B912F0();
        __break(1u);
        JUMPOUT(0x183258654);
      }
      v14 = v13;
      v15 = sub_183B912FC();
      v16 = __OFSUB__(v12, v15);
      v17 = v12 - v15;
      if (!v16)
      {
        sub_183B912F0();
        v9 = *(_DWORD *)(v14 + v17);
        swift_release();
        swift_release();
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  sub_18308485C(v4, v3);
  result = sub_183058B1C(v2);
  v11 = 0;
  v2 = 2;
LABEL_14:
  *v1 = v11;
  v1[1] = v2;
  return result;
}

uint64_t IPv4Address.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v4 = 2;
  sub_1832576E4(a1, a2, 2, (uint64_t)&v7);
  result = swift_bridgeObjectRelease();
  if (v10 == 255)
  {
    v6 = 0;
  }
  else
  {
    result = v7;
    v4 = v8;
    if (v10 == 1)
    {
      v6 = v7;
    }
    else
    {
      result = sub_18326169C(v7, v8, v9, v10);
      v6 = 0;
      v4 = 2;
    }
  }
  *a3 = v6;
  a3[1] = v4;
  return result;
}

uint64_t IPv4Address.interface.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *a1 = v2;
  return sub_183058E80(v2);
}

uint64_t IPv4Address.hash(into:)()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v3;

  v1 = *(NSObject **)(v0 + 8);
  sub_183B92280();
  if (v1 == 1)
    return sub_183B92268();
  sub_183B92268();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_183B9225C();
    v3 = swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_183B91800();
  }
  else
  {
    sub_183B9225C();
  }
  sub_183058B1C((uint64_t)v1);
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t IPv4Address.debugDescription.getter()
{
  int *v0;
  int v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  sockaddr v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  *(_DWORD *)&v6.sa_len = 528;
  *(_DWORD *)&v6.sa_data[2] = v1;
  *(_QWORD *)&v6.sa_data[6] = 0;
  v3 = (char *)swift_slowAlloc();
  if (getnameinfo(&v6, 0x10u, v3, 0x64u, 0, 0, 2))
    v4 = 63;
  else
    v4 = sub_183B91800();
  MEMORY[0x186DB563C](v3, -1, -1);
  if (v2 != 1)
  {
    swift_unknownObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    v7 = v2;
    sub_183B91F14();
    sub_183058B1C(v2);
    return 0;
  }
  return v4;
}

uint64_t IPv4Address.hashValue.getter()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;

  v1 = *(NSObject **)(v0 + 8);
  sub_183B92250();
  sub_183B92280();
  if (v1 == 1)
  {
    sub_183B92268();
  }
  else
  {
    sub_183B92268();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_183B9225C();
      v2 = swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_183B91800();
    }
    else
    {
      sub_183B9225C();
    }
    sub_183058B1C((uint64_t)v1);
    sub_183B917C4();
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

uint64_t sub_1832589E4()
{
  int *v0;
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = *v0;
  return sub_183258428((uint64_t)&v2, (uint64_t)&v3);
}

uint64_t sub_183258A44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v4 = 2;
  sub_1832576E4(a1, a2, 2, (uint64_t)&v7);
  result = swift_bridgeObjectRelease();
  if (v10 == 255)
  {
    v6 = 0;
  }
  else
  {
    result = v7;
    v4 = v8;
    if (v10 == 1)
    {
      v6 = v7;
    }
    else
    {
      result = sub_18326169C(v7, v8, v9, v10);
      v6 = 0;
      v4 = 2;
    }
  }
  *a3 = v6;
  a3[1] = v4;
  return result;
}

uint64_t sub_183258ACC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *a1 = v2;
  return sub_183058E80(v2);
}

uint64_t sub_183258AD8()
{
  int *v0;
  uint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *((_QWORD *)v0 + 1);
  v5 = *v0;
  v6 = v1;
  if (qword_1EDCDC4D8 != -1)
    swift_once();
  v3 = dword_1EDCDD100;
  v4 = qword_1EDCDD108;
  return _s7Network11IPv4AddressV2eeoiySbAC_ACtFZ_0((uint64_t)&v5, (uint64_t)&v3) & 1;
}

BOOL sub_183258B50()
{
  __int16 *v0;

  return *v0 == -343;
}

BOOL sub_183258B60()
{
  _DWORD *v0;

  return (*v0 & 0xF0) == 224;
}

uint64_t sub_183258B78()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v3;

  v1 = *(NSObject **)(v0 + 8);
  sub_183B92280();
  if (v1 == 1)
    return sub_183B92268();
  sub_183B92268();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_183B9225C();
    v3 = swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_183B91800();
  }
  else
  {
    sub_183B9225C();
  }
  sub_183058B1C((uint64_t)v1);
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_183258C3C()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;

  v1 = *(NSObject **)(v0 + 8);
  sub_183B92250();
  sub_183B92280();
  if (v1 == 1)
  {
    sub_183B92268();
  }
  else
  {
    sub_183B92268();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_183B9225C();
      v2 = swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_183B91800();
    }
    else
    {
      sub_183B9225C();
    }
    sub_183058B1C((uint64_t)v1);
    sub_183B917C4();
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

void sub_183258D24()
{
  uint64_t v0;

  v0 = *(_QWORD *)(MEMORY[0x1E0C83920] + 8);
  qword_1EDCDD150 = *MEMORY[0x1E0C83920];
  *(_QWORD *)algn_1EDCDD158 = v0;
  qword_1EDCDD160 = 1;
}

uint64_t static IPv6Address.any.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_183258EBC(&qword_1EDCDC500, &qword_1EDCDD150, &qword_1EDCDD160, a1);
}

void sub_183258D68()
{
  uint64_t v0;

  v0 = *(_QWORD *)(MEMORY[0x1E0C83920] + 8);
  qword_1EDCDD168 = *MEMORY[0x1E0C83920];
  unk_1EDCDD170 = v0;
  qword_1EDCDD178 = 1;
}

uint64_t static IPv6Address.broadcast.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_183258EBC(&qword_1EDCDC508, &qword_1EDCDD168, &qword_1EDCDD178, a1);
}

void sub_183258DAC()
{
  uint64_t v0;

  v0 = *(_QWORD *)(MEMORY[0x1E0C83938] + 8);
  qword_1EDCDD180 = *MEMORY[0x1E0C83938];
  *(_QWORD *)algn_1EDCDD188 = v0;
  qword_1EDCDD190 = 1;
}

uint64_t static IPv6Address.loopback.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_183258EBC(&qword_1EDCDC510, &qword_1EDCDD180, &qword_1EDCDD190, a1);
}

void sub_183258DF0()
{
  uint64_t v0;

  v0 = *(_QWORD *)(MEMORY[0x1E0C83940] + 8);
  qword_1EDCDD198 = *MEMORY[0x1E0C83940];
  unk_1EDCDD1A0 = v0;
  qword_1EDCDD1A8 = 1;
}

uint64_t static IPv6Address.nodeLocalNodes.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_183258EBC(&qword_1EDCDC518, &qword_1EDCDD198, &qword_1EDCDD1A8, a1);
}

void sub_183258E34()
{
  uint64_t v0;

  v0 = *(_QWORD *)(MEMORY[0x1E0C83928] + 8);
  qword_1EDCDD1B0 = *MEMORY[0x1E0C83928];
  *(_QWORD *)algn_1EDCDD1B8 = v0;
  qword_1EDCDD1C0 = 1;
}

uint64_t static IPv6Address.linkLocalNodes.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_183258EBC(&qword_1EDCDC520, &qword_1EDCDD1B0, &qword_1EDCDD1C0, a1);
}

void sub_183258E78()
{
  uint64_t v0;

  v0 = *(_QWORD *)(MEMORY[0x1E0C83930] + 8);
  qword_1EDCDD1C8 = *MEMORY[0x1E0C83930];
  unk_1EDCDD1D0 = v0;
  qword_1EDCDD1D8 = 1;
}

uint64_t static IPv6Address.linkLocalRouters.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_183258EBC(&qword_1EDCDC528, &qword_1EDCDD1C8, &qword_1EDCDD1D8, a1);
}

uint64_t sub_183258EBC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2[1];
  v8 = *a3;
  *a4 = *a2;
  a4[1] = v7;
  a4[2] = v8;
  return sub_183058E80(v8);
}

Network::IPv6Address::Scope_optional __swiftcall IPv6Address.Scope.init(rawValue:)(Network::IPv6Address::Scope_optional rawValue)
{
  char *v1;
  char v2;

  v2 = 1;
  switch(rawValue.value)
  {
    case 1:
      v2 = 0;
      goto LABEL_3;
    case 2:
LABEL_3:
      *v1 = v2;
      break;
    case 5:
      *v1 = 2;
      break;
    case 8:
      *v1 = 3;
      break;
    case 0xE:
      *v1 = 4;
      break;
    default:
      *v1 = 5;
      break;
  }
  return rawValue;
}

unint64_t IPv6Address.Scope.rawValue.getter()
{
  _BYTE *v0;

  return 0xE08050201uLL >> (8 * *v0);
}

BOOL sub_183258F94(_BYTE *a1, _BYTE *a2)
{
  return ((0xE08050201uLL >> (8 * *a1)) & 0xF) == ((0xE08050201uLL >> (8 * *a2)) & 0xF);
}

uint64_t sub_183258FCC()
{
  sub_183B92250();
  sub_183B92268();
  return sub_183B9228C();
}

uint64_t sub_183259020()
{
  return sub_183B92268();
}

uint64_t sub_18325905C()
{
  sub_183B92250();
  sub_183B92268();
  return sub_183B9228C();
}

Network::IPv6Address::Scope_optional sub_1832590AC(Swift::UInt8 *a1)
{
  return IPv6Address.Scope.init(rawValue:)(*a1);
}

void sub_1832590B4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0xE08050201uLL >> (8 * *v1);
}

BOOL IPv6Address.isAny.getter()
{
  _OWORD *v0;

  return *v0 == 0;
}

BOOL IPv6Address.isLoopback.getter()
{
  _QWORD *v0;

  return (*v0 | v0[1] ^ 0x100000000000000) == 0;
}

BOOL IPv6Address.isIPv4Compatabile.getter()
{
  _QWORD *v0;
  uint64_t v1;
  BOOL v2;

  v1 = HIDWORD(v0[1]);
  if (*v0 | v0[1])
    v2 = 1;
  else
    v2 = (_DWORD)v1 == 0;
  return !v2 && (_DWORD)v1 != 0x1000000;
}

BOOL IPv6Address.is6to4.getter()
{
  unsigned __int16 *v0;

  return *v0 == 544;
}

BOOL IPv6Address.isLinkLocal.getter()
{
  _QWORD *v0;

  return (*v0 & 0xC0FFLL) == 33022;
}

BOOL IPv6Address.isMulticast.getter()
{
  unsigned __int8 *v0;

  return *v0 == 255;
}

void IPv6Address.multicastScope.getter(char *a1@<X8>)
{
  _QWORD *v1;
  char v2;

  if (*(_BYTE *)v1 == 0xFF)
  {
    v2 = 0;
    switch((*v1 >> 8) & 0xF)
    {
      case 1u:
        goto LABEL_3;
      case 2u:
        *a1 = 1;
        break;
      case 5u:
        *a1 = 2;
        break;
      case 8u:
        *a1 = 3;
        break;
      case 0xEu:
        *a1 = 4;
        break;
      default:
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    v2 = 5;
LABEL_3:
    *a1 = v2;
  }
}

uint64_t IPv6Address.rawValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  _QWORD v9[2];
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v9[0] = *v0;
  v9[1] = v1;
  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = v9;
  v8[1] = v10;
  v2 = __swift_project_boxed_opaque_existential_2(v8, MEMORY[0x1E0DEAC20]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1832614E4(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_1832615A4((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_18326161C((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return v6;
}

BOOL sub_1832592CC(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

BOOL IPv6Address.isUniqueLocal.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v7[0] = *v0;
  v7[1] = v1;
  v2 = sub_183258428((uint64_t)v7, (uint64_t)v8);
  v4 = v3;
  v5 = sub_183B91464();
  sub_18308485C(v2, v4);
  return sub_1832592CC(v5, (uint64_t)&unk_1E148E200);
}

void IPv6Address.init(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_183259418@<X0>(int a1@<W8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (BYTE6(v4) != 16)
  {
    sub_18308485C(v3, v4);
    result = sub_183058B1C(v2);
    *v1 = 0;
    v1[1] = 0;
    v1[2] = 2;
    return result;
  }
  if (!a1)
  {
    result = sub_18308485C(v3, v4);
    v10 = v4 & 0xFFFFFFFFFFFFLL;
    goto LABEL_13;
  }
  if (a1 != 1)
  {
    v12 = *(_QWORD *)(v3 + 16);
    swift_retain();
    swift_retain();
    v13 = sub_183B912D8();
    if (!v13)
    {
LABEL_18:
      sub_183B912F0();
      __break(1u);
      JUMPOUT(0x183259574);
    }
    v14 = v13;
    v15 = sub_183B912FC();
    v16 = __OFSUB__(v12, v15);
    v17 = v12 - v15;
    if (!v16)
    {
      sub_183B912F0();
      v18 = v14 + v17;
      v19 = *(_QWORD *)(v14 + v17);
      v10 = *(_QWORD *)(v18 + 8);
      swift_release();
      swift_release();
      result = sub_18308485C(v3, v4);
      v3 = v19;
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  if ((int)v3 > v3 >> 32)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = sub_183B912D8();
  if (!v5)
  {
LABEL_17:
    sub_183B912F0();
    __break(1u);
    goto LABEL_18;
  }
  v6 = v5;
  v7 = sub_183B912FC();
  v8 = (int)v3 - v7;
  if (__OFSUB__((int)v3, v7))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  sub_183B912F0();
  v9 = *(_QWORD *)(v6 + v8);
  v10 = *(_QWORD *)(v6 + v8 + 8);
  result = sub_18308485C(v3, v4);
  v3 = v9;
LABEL_13:
  *v1 = v3;
  v1[1] = v10;
  v1[2] = v2;
  return result;
}

uint64_t IPv6Address.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  sub_1832576E4(a1, a2, 30, (uint64_t)&v7);
  result = swift_bridgeObjectRelease();
  if (v10 != 255)
  {
    result = v7;
    v5 = v8;
    v6 = v9;
    if (v10 == 2)
    {
      *a3 = v7;
      a3[1] = v5;
      a3[2] = v6;
      return result;
    }
    result = sub_18326169C(v7, v8, v9, v10);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 2;
  return result;
}

uint64_t IPv6Address.interface.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return sub_183058E80(v2);
}

uint64_t IPv6Address.hash(into:)()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v3;

  v1 = *(NSObject **)(v0 + 16);
  sub_183B92280();
  sub_183B92280();
  sub_183B92280();
  sub_183B92280();
  if (v1 == 1)
    return sub_183B92268();
  sub_183B92268();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_183B9225C();
    v3 = swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_183B91800();
  }
  else
  {
    sub_183B9225C();
  }
  sub_183058B1C((uint64_t)v1);
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t IPv6Address.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  sockaddr v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  v2 = v0[2];
  v7 = v0[1];
  *(_QWORD *)&v6.sa_len = 7708;
  *(_QWORD *)&v6.sa_data[6] = v1;
  v8 = 0;
  v3 = (char *)swift_slowAlloc();
  if (getnameinfo(&v6, 0x1Cu, v3, 0x64u, 0, 0, 2))
    v4 = 63;
  else
    v4 = sub_183B91800();
  MEMORY[0x186DB563C](v3, -1, -1);
  if (v2 != 1)
  {
    swift_unknownObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B91F14();
    sub_183058B1C(v2);
    return 0;
  }
  return v4;
}

uint64_t IPv6Address.hashValue.getter()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;

  v1 = *(NSObject **)(v0 + 16);
  sub_183B92250();
  sub_183B92280();
  sub_183B92280();
  sub_183B92280();
  sub_183B92280();
  if (v1 == 1)
  {
    sub_183B92268();
  }
  else
  {
    sub_183B92268();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_183B9225C();
      v2 = swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_183B91800();
    }
    else
    {
      sub_183B9225C();
    }
    sub_183058B1C((uint64_t)v1);
    sub_183B917C4();
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

uint64_t sub_183259954()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  return sub_183258428((uint64_t)v3, (uint64_t)v4);
}

uint64_t sub_1832599B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  sub_1832576E4(a1, a2, 30, (uint64_t)&v7);
  result = swift_bridgeObjectRelease();
  if (v10 != 255)
  {
    result = v7;
    v5 = v8;
    v6 = v9;
    if (v10 == 2)
    {
      *a3 = v7;
      a3[1] = v5;
      a3[2] = v6;
      return result;
    }
    result = sub_18326169C(v7, v8, v9, v10);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 2;
  return result;
}

uint64_t sub_183259A28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return sub_183058E80(v2);
}

BOOL sub_183259A34()
{
  _QWORD *v0;

  return (*v0 | v0[1] ^ 0x100000000000000) == 0;
}

BOOL sub_183259A4C()
{
  _QWORD *v0;

  return (*v0 & 0xC0FFLL) == 33022;
}

BOOL sub_183259A68()
{
  unsigned __int8 *v0;

  return *v0 == 255;
}

uint64_t sub_183259A80()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;

  v1 = *(NSObject **)(v0 + 16);
  sub_183B92250();
  sub_183B92280();
  sub_183B92280();
  sub_183B92280();
  sub_183B92280();
  if (v1 == 1)
  {
    sub_183B92268();
  }
  else
  {
    sub_183B92268();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_183B9225C();
      v2 = swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_183B91800();
    }
    else
    {
      sub_183B9225C();
    }
    sub_183058B1C((uint64_t)v1);
    sub_183B917C4();
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

void __swiftcall EthernetAddress.init(_:)(Network::EthernetAddress *__return_ptr retstr, ether_addr *a2)
{
  *(_WORD *)retstr->addr.octet = (_WORD)a2;
  retstr->addr.octet[2] = BYTE2(a2);
  retstr->addr.octet[3] = BYTE3(a2);
  retstr->addr.octet[4] = BYTE4(a2);
  retstr->addr.octet[5] = BYTE5(a2);
}

void EthernetAddress.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_183259C08@<X0>(int a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  char v14;
  uint64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint8x8_t v23;
  uint32x4_t v24;
  uint64x2_t v25;
  uint64x2_t v26;
  int8x16_t v27;
  uint16x8_t v28;

  if (BYTE6(v2) == 6)
  {
    if (!a1)
    {
      v15 = (uint64x2_t)vdupq_n_s64(v3);
      *(int16x4_t *)v28.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_183B9FD00), (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_183B9FCF0)));
      v11 = (unint64_t)v3 >> 40;
      v9 = v3;
      goto LABEL_13;
    }
    if (a1 == 1)
    {
      if ((int)v3 <= v3 >> 32)
      {
        v4 = sub_183B912D8();
        if (!v4)
        {
LABEL_18:
          sub_183B912F0();
          __break(1u);
          goto LABEL_19;
        }
        v5 = v4;
        v6 = sub_183B912FC();
        v7 = (int)v3 - v6;
        if (!__OFSUB__((int)v3, v6))
        {
          sub_183B912F0();
          v8 = v5 + v7;
          v9 = *(_BYTE *)(v5 + v7);
          v10.i32[0] = *(_DWORD *)(v8 + 1);
          v28 = vmovl_u8(v10);
          v11 = *(unsigned __int8 *)(v8 + 5);
LABEL_13:
          result = sub_18308485C(v3, v2);
          v14 = 0;
          v24 = vmovl_u16((uint16x4_t)(v28.i64[0] & 0xFF00FF00FF00FFLL));
          v25.i64[0] = v24.u32[0];
          v25.i64[1] = v24.u32[1];
          v26 = v25;
          v25.i64[0] = v24.u32[2];
          v25.i64[1] = v24.u32[3];
          v27 = vorrq_s8((int8x16_t)vshlq_u64(v26, (uint64x2_t)xmmword_183B9FD20), (int8x16_t)vshlq_u64(v25, (uint64x2_t)xmmword_183B9FD10));
          v13 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)) | (v11 << 40) | v9;
          goto LABEL_14;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      __break(1u);
    }
    else
    {
      v16 = *(_QWORD *)(v3 + 16);
      swift_retain();
      swift_retain();
      v17 = sub_183B912D8();
      if (!v17)
      {
LABEL_19:
        sub_183B912F0();
        __break(1u);
        JUMPOUT(0x183259DD8);
      }
      v18 = v17;
      v19 = sub_183B912FC();
      v20 = __OFSUB__(v16, v19);
      v21 = v16 - v19;
      if (!v20)
      {
        sub_183B912F0();
        v22 = v18 + v21;
        v9 = *(_BYTE *)(v18 + v21);
        v23.i32[0] = *(_DWORD *)(v22 + 1);
        v28 = vmovl_u8(v23);
        v11 = *(unsigned __int8 *)(v22 + 5);
        swift_release();
        swift_release();
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  result = sub_18308485C(v3, v2);
  v13 = 0;
  v14 = 1;
LABEL_14:
  *(_DWORD *)v1 = v13;
  *(_WORD *)(v1 + 4) = WORD2(v13);
  *(_BYTE *)(v1 + 6) = v14;
  return result;
}

uint64_t EthernetAddress.hash(into:)()
{
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  return sub_183B92268();
}

uint64_t EthernetAddress.debugDescription.getter()
{
  char *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDD1E0);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_183B9FD30;
  v8 = MEMORY[0x1E0DEDE70];
  v9 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v7 + 56) = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v7 + 64) = v9;
  *(_BYTE *)(v7 + 32) = v1;
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = v9;
  *(_BYTE *)(v7 + 72) = v2;
  *(_QWORD *)(v7 + 136) = v8;
  *(_QWORD *)(v7 + 144) = v9;
  *(_BYTE *)(v7 + 112) = v3;
  *(_QWORD *)(v7 + 176) = v8;
  *(_QWORD *)(v7 + 184) = v9;
  *(_BYTE *)(v7 + 152) = v4;
  *(_QWORD *)(v7 + 216) = v8;
  *(_QWORD *)(v7 + 224) = v9;
  *(_BYTE *)(v7 + 192) = v5;
  *(_QWORD *)(v7 + 256) = v8;
  *(_QWORD *)(v7 + 264) = v9;
  *(_BYTE *)(v7 + 232) = v6;
  return sub_183B91704();
}

uint64_t EthernetAddress.hashValue.getter()
{
  sub_183B92250();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  return sub_183B9228C();
}

uint64_t sub_183259FD4()
{
  sub_183B92250();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  return sub_183B9228C();
}

uint64_t sub_18325A080()
{
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  return sub_183B92268();
}

uint64_t sub_18325A0FC()
{
  sub_183B92250();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  sub_183B92268();
  return sub_183B9228C();
}

double NWEndpoint.Host.init(stringLiteral:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  double result;
  __int128 v7;
  uint64_t v8;
  char v9;

  NWEndpoint.Host.init(_:)(a1, a2, (uint64_t)&v7);
  v4 = v8;
  v5 = v9;
  result = *(double *)&v7;
  *(_OWORD *)a3 = v7;
  *(_QWORD *)(a3 + 16) = v4;
  *(_BYTE *)(a3 + 24) = v5;
  return result;
}

uint64_t NWEndpoint.Host.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB258);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1832576E4(a1, a2, 0, (uint64_t)&v35);
  v9 = v38;
  if (v38 == 255)
  {
    v35 = a1;
    v36 = a2;
    v34[0] = 37;
    v34[1] = 0xE100000000000000;
    v13 = sub_183B914B8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
    sub_1832616B0();
    sub_183B91D34();
    v15 = v14;
    v17 = v16;
    sub_1830620D4((uint64_t)v8, &qword_1EDCDB258);
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      goto LABEL_6;
    swift_bridgeObjectRetain();
    v18 = sub_183257A1C(v15, a1, a2);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    swift_bridgeObjectRelease();
    MEMORY[0x186DB1C70](v18, v20, v22, v24);
    swift_bridgeObjectRelease();
    v25 = sub_183B91758();
    swift_bridgeObjectRelease();
    v10 = (uint64_t)nw_interface_create_with_name((char *)(v25 + 32));
    swift_release();
    if (!v10)
    {
LABEL_6:
      result = sub_183B917D0();
      if (result < 1)
      {
        result = swift_bridgeObjectRelease();
        v9 = 0;
        v11 = 0xE100000000000000;
        v10 = 1;
        a1 = 46;
      }
      else
      {
        v9 = 0;
        v10 = 1;
        v11 = a2;
      }
    }
    else
    {
      v26 = sub_183B91884();
      v28 = v27;
      v30 = v29;
      v32 = v31;
      swift_bridgeObjectRelease();
      a1 = MEMORY[0x186DB1C70](v26, v28, v30, v32);
      v11 = v33;
      result = swift_bridgeObjectRelease();
      v9 = 0;
    }
  }
  else
  {
    v11 = v36;
    v10 = v37;
    a1 = v35;
    result = swift_bridgeObjectRelease();
  }
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 24) = v9;
  return result;
}

uint64_t NWEndpoint.Host.interface.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_BYTE *)(v1 + 24) == 1)
    v2 = 8;
  v3 = *(_QWORD *)(v1 + v2);
  *a1 = v3;
  return sub_183058E80(v3);
}

uint64_t NWEndpoint.Host.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = v0[2];
  if (*((_BYTE *)v0 + 24))
  {
    if (*((_BYTE *)v0 + 24) == 1)
      return IPv4Address.debugDescription.getter();
    else
      return IPv6Address.debugDescription.getter();
  }
  else if (v2 == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_183058E80(v2);
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B91F14();
    sub_183058B1C(v2);
    return 0;
  }
  return v1;
}

uint64_t NWEndpoint.Host.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;

  v1 = *(_QWORD *)v0;
  v2 = *(NSObject **)(v0 + 8);
  v3 = *(NSObject **)(v0 + 16);
  if (*(_BYTE *)(v0 + 24))
  {
    if (*(_BYTE *)(v0 + 24) == 1)
    {
      sub_183B9225C();
      sub_183B92280();
      if (v2 == 1)
      {
        sub_183B92268();
        v4 = v1;
        v5 = 1;
      }
      else
      {
        sub_183B92268();
        if (v2)
        {
          sub_183058E80((uint64_t)v2);
          nw_interface_get_index(v2);
          sub_183B9225C();
          v7 = swift_unknownObjectRetain();
          nw_interface_get_name(v7);
          sub_183B91800();
          v8 = (uint64_t)v2;
        }
        else
        {
          sub_183B9225C();
          v8 = 0;
        }
        sub_183058BF0(v1, v8, (uint64_t)v3, 1);
        sub_183B917C4();
        swift_bridgeObjectRelease();
        v4 = v1;
        v5 = (uint64_t)v2;
      }
      return sub_183058BF0(v4, v5, (uint64_t)v3, 1);
    }
    else
    {
      sub_183B9225C();
      return IPv6Address.hash(into:)();
    }
  }
  else
  {
    sub_183B9225C();
    sub_183058E80((uint64_t)v3);
    sub_183B917C4();
    if (v3 == 1)
    {
      return sub_183B92268();
    }
    else
    {
      sub_183B92268();
      if (v3)
      {
        nw_interface_get_index(v3);
        sub_183B9225C();
        v9 = swift_unknownObjectRetain();
        nw_interface_get_name(v9);
        sub_183B91800();
        v10 = (uint64_t)v3;
      }
      else
      {
        sub_183B9225C();
        v10 = 0;
      }
      sub_183058B1C(v10);
      sub_183B917C4();
      swift_bridgeObjectRelease();
      return sub_183058B1C((uint64_t)v3);
    }
  }
}

uint64_t NWEndpoint.Host.hashValue.getter()
{
  sub_183B92250();
  NWEndpoint.Host.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_18325A810()
{
  sub_183B92250();
  NWEndpoint.Host.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_18325A86C()
{
  sub_183B92250();
  NWEndpoint.Host.hash(into:)();
  return sub_183B9228C();
}

double sub_18325A8CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  double result;
  __int128 v6;
  uint64_t v7;
  char v8;

  NWEndpoint.Host.init(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v6);
  v3 = v7;
  v4 = v8;
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

uint64_t NWEndpoint.Port.init(integerLiteral:)@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static NWEndpoint.Port.any.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void static NWEndpoint.Port.ssh.getter(_WORD *a1@<X8>)
{
  *a1 = 22;
}

void static NWEndpoint.Port.smtp.getter(_WORD *a1@<X8>)
{
  *a1 = 25;
}

void static NWEndpoint.Port.http.getter(_WORD *a1@<X8>)
{
  *a1 = 80;
}

void static NWEndpoint.Port.pop.getter(_WORD *a1@<X8>)
{
  *a1 = 110;
}

void static NWEndpoint.Port.imap.getter(_WORD *a1@<X8>)
{
  *a1 = 143;
}

void static NWEndpoint.Port.https.getter(_WORD *a1@<X8>)
{
  *a1 = 443;
}

void static NWEndpoint.Port.imaps.getter(_WORD *a1@<X8>)
{
  *a1 = 993;
}

void static NWEndpoint.Port.socks.getter(_WORD *a1@<X8>)
{
  *a1 = 1080;
}

uint64_t NWEndpoint.Port.rawValue.getter()
{
  unsigned __int16 *v0;

  return *v0;
}

void NWEndpoint.Port.init(_:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  sockaddr *ai_addr;
  unsigned int v5;
  char v6;
  addrinfo *v7;
  addrinfo v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v8.ai_flags = xmmword_183B9FD40;
  v8.ai_addrlen = 0;
  memset(&v8.ai_canonname, 0, 24);
  v7 = 0;
  v2 = sub_183B91758();
  swift_bridgeObjectRelease();
  v3 = getaddrinfo(0, (const char *)(v2 + 32), &v8, &v7);
  swift_release();
  if (v3 || !v7)
    goto LABEL_7;
  ai_addr = v7->ai_addr;
  if (!ai_addr || ai_addr->sa_family != 30)
  {
    freeaddrinfo(v7);
LABEL_7:
    LOWORD(v5) = 0;
    v6 = 1;
    goto LABEL_8;
  }
  v5 = bswap32(*(unsigned __int16 *)ai_addr->sa_data) >> 16;
  freeaddrinfo(v7);
  v6 = 0;
LABEL_8:
  *(_WORD *)a1 = v5;
  *(_BYTE *)(a1 + 2) = v6;
}

uint64_t NWEndpoint.Port.debugDescription.getter()
{
  return sub_183B92088();
}

uint64_t sub_18325AAC4()
{
  sub_183B92250();
  sub_183B92274();
  return sub_183B9228C();
}

uint64_t sub_18325AB08()
{
  return sub_183B92274();
}

uint64_t sub_18325AB30()
{
  sub_183B92250();
  sub_183B92274();
  return sub_183B9228C();
}

_WORD *sub_18325AB70@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_WORD *sub_18325AB7C@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void sub_18325AB8C(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

BOOL sub_18325AB98(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

void NWEndpoint.interface.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v1);
  sub_1832616F4(v0, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_18325AC30 + 4 * byte_183B9FD8C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18325AC30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(_BYTE *)(v1 + 24) == 1)
      *v0 = v2;
    else
      *v0 = v3;
  }
  else
  {
    v4 = *(_QWORD *)v1;
    *v0 = v3;
    sub_183058E80(v3);
    return sub_183058BF0(v4, v2, v3, 0);
  }
  return result;
}

void NWEndpoint.txtRecord.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v1);
  sub_1832616F4(v0, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_18325AD94 + 4 * byte_183B9FD91[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18325AD94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  result = sub_183058BF0(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
  *v0 = 0;
  v0[1] = 0;
  return result;
}

BOOL static NWEndpoint.EndpointType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWEndpoint.EndpointType.hash(into:)()
{
  return sub_183B9225C();
}

uint64_t NWEndpoint.EndpointType.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

Swift::String_optional __swiftcall NWEndpoint.parentEndpointDomain()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = sub_18325DB1C((uint64_t (*)(_QWORD))nw_endpoint_get_parent_endpoint_domain);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t NWEndpoint.parentEndpoint()@<X0>(uint64_t a1@<X8>)
{
  return sub_18325B6B8((uint64_t (*)(_QWORD))nw_endpoint_copy_parent_endpoint, a1);
}

uint64_t NWEndpoint.init(_:)@<X0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_183056F9C(a1, (uint64_t)v6);
  v7 = type metadata accessor for NWEndpoint();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_1830620D4((uint64_t)v6, qword_1ECD84160);
    v9 = 1;
  }
  else
  {
    sub_1830589B0((uint64_t)v6, a2);
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, v7);
}

void NWEndpoint.setParentEndpoint(endpoint:isProxy:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v4;
  void *v5;
  void *v6;

  NWEndpoint.nw.getter();
  if (v4)
  {
    v5 = v4;
    sub_183261738((uint64_t)v2);
    NWEndpoint.nw.getter();
    nw_endpoint_set_parent_endpoint(v5, v6, a2 & 1);
    swift_unknownObjectRelease();
    *v2 = v5;
    type metadata accessor for NWEndpoint();
    swift_storeEnumTagMultiPayload();
  }
}

void NWEndpoint.nw.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  v1 = sub_183B913A4();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v2);
  sub_1832616F4(v0, (uint64_t)v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_18325B1D0 + 4 * byte_183B9FD96[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18325B1D0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  unsigned int v6;
  nw_endpoint_t host;
  const char *v8;
  uint64_t v9;
  BOOL v10;
  uint32_t index;
  uint64_t v12;
  void *v13;
  uint64_t result;

  v3 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  v4 = *(NSObject **)(v0 + 16);
  v5 = *(unsigned __int8 *)(v0 + 24);
  v6 = *(unsigned __int16 *)(v0 + 26);
  if (!v5)
  {
    *(_WORD *)(v1 - 100) = v6;
    sub_183058E80((uint64_t)v4);
    sub_183B92088();
    v8 = (const char *)(sub_183B91758() + 32);
    v9 = sub_183B91758();
    swift_bridgeObjectRelease();
    host = nw_endpoint_create_host(v8, (const char *)(v9 + 32));
    sub_183058BF0(v3, (uint64_t)v2, (uint64_t)v4, 0);
    swift_release();
    swift_release();
    v2 = v4;
    if (v4 == 1)
      return (uint64_t)host;
    goto LABEL_16;
  }
  if (v5 == 1)
  {
    *(_WORD *)(v1 - 100) = 528;
    *(_WORD *)(v1 - 98) = __rev16(v6);
    *(_DWORD *)(v1 - 96) = v3;
    *(_QWORD *)(v1 - 92) = 0;
    host = nw_endpoint_create_address((const sockaddr *)(v1 - 100));
    if (v2 == (void *)1)
      return (uint64_t)host;
    goto LABEL_16;
  }
  if (v3 != 254 || ((v3 & 0xC000) == 0x8000 ? (v10 = v4 == 1) : (v10 = 1), v10))
  {
    sub_183058E80((uint64_t)v4);
    sub_183058E80((uint64_t)v4);
    index = 0;
    v12 = (uint64_t)v4;
LABEL_15:
    *(_WORD *)(v1 - 100) = 7708;
    *(_WORD *)(v1 - 98) = __rev16(v6);
    *(_DWORD *)(v1 - 96) = 0;
    *(_QWORD *)(v1 - 92) = v3;
    *(_QWORD *)(v1 - 84) = v2;
    *(_DWORD *)(v1 - 76) = index;
    host = nw_endpoint_create_address((const sockaddr *)(v1 - 100));
    sub_183058BF0(v3, (uint64_t)v2, (uint64_t)v4, 2);
    sub_183058BF0(v3, (uint64_t)v2, (uint64_t)v4, 2);
    v2 = (void *)v12;
    if (v12 == 1)
      return (uint64_t)host;
LABEL_16:
    if (host)
    {
      v13 = (void *)swift_unknownObjectRetain();
      nw_endpoint_set_interface(v13, v2);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      sub_183058B1C((uint64_t)v2);
    }
    return (uint64_t)host;
  }
  if (v4)
  {
    sub_183058E80((uint64_t)v4);
    index = nw_interface_get_index(v4);
    v12 = 1;
    goto LABEL_15;
  }
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t NWEndpoint.originalEndpoint(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v16;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (void **)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *a1;
  sub_1832616F4(v3, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v14 = nw_endpoint_copy_original_endpoint(*v12, dword_183BA04B4[v13]);
    sub_183056F9C(v14, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      sub_1830620D4((uint64_t)v8, qword_1ECD84160);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1, 1, v9);
    }
    else
    {
      sub_1830589B0((uint64_t)v8, a2);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1, 1, v9);
    return sub_183261738((uint64_t)v12);
  }
}

uint64_t NWEndpoint.proxyOriginalEndpoint()@<X0>(uint64_t a1@<X8>)
{
  return sub_18325B6B8((uint64_t (*)(_QWORD))nw_endpoint_copy_proxy_original_endpoint, a1);
}

uint64_t sub_18325B6B8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v15;

  v4 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v4, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    if (a1(*v12))
    {
      v13 = swift_unknownObjectRetain();
      sub_183056F9C(v13, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        sub_1830620D4((uint64_t)v8, qword_1ECD84160);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1, 1, v9);
      }
      else
      {
        sub_1830589B0((uint64_t)v8, a2);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
      }
      swift_unknownObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1, 1, v9);
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1, 1, v9);
    return sub_183261738((uint64_t)v12);
  }
}

void NWEndpoint.setCustomMetadataForKey(key:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  void *v6;
  void *v7;
  uint64_t v8;

  NWEndpoint.nw.getter();
  if (v6)
  {
    v7 = v6;
    if (a4 >> 60 != 15)
      __asm { BR              X10 }
    sub_183261738((uint64_t)v4);
    v8 = sub_183B91758();
    nw_endpoint_set_custom_metadata_for_key(v7, (const char *)(v8 + 32), 0, 0);
    swift_release();
    *v4 = v7;
    type metadata accessor for NWEndpoint();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_18325BC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x18325BD14);
}

uint64_t NWEndpoint.customMetadataForKey(key:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD aBlock[6];

  v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v1);
  v3 = (void **)((char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v4 = *v3;
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_183B9FD50;
    aBlock[4] = sub_1832617E0;
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_18325BF2C;
    aBlock[3] = &block_descriptor_6_1;
    v6 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v7 = sub_183B91758();
    nw_endpoint_access_custom_metadata_for_key(v4, (const char *)(v7 + 32), v6);
    swift_release();
    swift_unknownObjectRelease();
    _Block_release(v6);
    swift_beginAccess();
    v8 = *(_QWORD *)(v5 + 16);
    sub_183261798(v8, *(_QWORD *)(v5 + 24));
    swift_release();
  }
  else
  {
    sub_183261738((uint64_t)v3);
    return 0;
  }
  return v8;
}

uint64_t sub_18325BEC8(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (a1)
  {
    v4 = sub_1832BDCC4(a1, a2);
    v6 = v5;
    swift_beginAccess();
    v7 = *(_QWORD *)(a3 + 16);
    v8 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = v4;
    *(_QWORD *)(a3 + 24) = v6;
    sub_183084848(v7, v8);
  }
  return 1;
}

uint64_t sub_18325BF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a3) = v5(a2, a3);
  swift_release();
  return a3 & 1;
}

void NWEndpoint.setSignature(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  NWEndpoint.nw.getter();
  if (v3)
    __asm { BR              X10 }
}

Swift::Bool __swiftcall NWEndpoint.hasSignature()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  Swift::Bool has_signature;
  uint64_t v6;

  v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v1);
  v3 = (void **)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    has_signature = nw_endpoint_has_signature(*v3);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_183261738((uint64_t)v3);
    return 0;
  }
  return has_signature;
}

uint64_t NWEndpoint.echConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDD1F0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v7);
  v9 = (void **)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v2, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v10 = nw_endpoint_copy_ech_config(*v9);
    if (v10)
    {
      v11 = (void *)v10;
      sub_183B9162C();
      swift_unknownObjectRelease();

      v12 = sub_183B91638();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 0, 1, v12);
    }
    else
    {
      swift_unknownObjectRelease();
      v15 = sub_183B91638();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
    }
    return sub_1830630BC((uint64_t)v6, a1, (uint64_t *)&unk_1EDCDD1F0);
  }
  else
  {
    v13 = sub_183B91638();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
    return sub_183261738((uint64_t)v9);
  }
}

uint64_t NWEndpoint.echConfig.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  void *v14;
  uint64_t v15;

  v2 = (_QWORD *)v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDD1F0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_183B91638();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  NWEndpoint.nw.getter();
  if (!v11)
    return sub_1830620D4(a1, (uint64_t *)&unk_1EDCDD1F0);
  v12 = v11;
  sub_183261738(v1);
  sub_183062090(a1, (uint64_t)v6, (uint64_t *)&unk_1EDCDD1F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1830620D4((uint64_t)v6, (uint64_t *)&unk_1EDCDD1F0);
    nw_endpoint_set_ech_config(v12, 0);
    sub_1830620D4(a1, (uint64_t *)&unk_1EDCDD1F0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v14 = (void *)sub_183B91620();
    nw_endpoint_set_ech_config(v12, v14);

    sub_1830620D4(a1, (uint64_t *)&unk_1EDCDD1F0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  *v2 = v12;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

void (*NWEndpoint.echConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDD1F0) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  NWEndpoint.echConfig.getter((uint64_t)v4);
  return sub_18325C4AC;
}

void sub_18325C4AC(uint64_t a1, char a2)
{
  sub_18325F78C(a1, a2, (void (*)(void *))NWEndpoint.echConfig.setter, (uint64_t *)&unk_1EDCDD1F0);
}

uint64_t NWEndpoint.alternatives.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD aBlock[6];
  uint64_t v13;

  v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v1);
  v3 = (void **)((char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v3);
    return 0;
  }
  v4 = *v3;
  v13 = MEMORY[0x1E0DEE9D8];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = &v13;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_1832617F8;
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = sub_18306433C;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18325CAF0;
  aBlock[3] = &block_descriptor_15_0;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_endpoint_enumerate_alternatives(v4, v7);
  swift_unknownObjectRelease();
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) == 0)
  {
    v9 = v13;
    v10 = *(_QWORD *)(v13 + 16);
    swift_release();
    if (v10)
      return v9;
    swift_bridgeObjectRelease();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t NWEndpoint.alternatives.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCF18);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v36 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v31 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v31 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v31 - v13;
  NWEndpoint.nw.getter();
  if (!v15)
    return swift_bridgeObjectRelease();
  v16 = v15;
  sub_183261738((uint64_t)v1);
  nw_endpoint_clear_alternatives(v16);
  if (a1)
  {
    v17 = *(_QWORD *)(a1 + 16);
    if (v17)
    {
      v32 = v1;
      v33 = v16;
      v18 = *(int *)(v3 + 48);
      v19 = *(unsigned __int8 *)(v4 + 80);
      v31 = a1;
      v20 = a1 + ((v19 + 32) & ~v19);
      v34 = *(_QWORD *)(v4 + 72);
      v35 = v18;
      do
      {
        sub_183062090(v20, (uint64_t)v14, &qword_1EDCDCF18);
        v21 = *(_QWORD *)&v14[v35];
        v22 = *(int *)(v3 + 48);
        sub_1830589B0((uint64_t)v14, (uint64_t)v12);
        *(_QWORD *)&v12[v22] = v21;
        v23 = *(int *)(v3 + 48);
        sub_1832616F4((uint64_t)v12, (uint64_t)v9);
        *(_QWORD *)&v9[v23] = v21;
        swift_retain();
        NWEndpoint.nw.getter();
        if (v24)
        {
          v25 = v24;
          sub_183261738((uint64_t)v9);
          v26 = v3;
          v27 = *(int *)(v3 + 48);
          v28 = v36;
          sub_1832616F4((uint64_t)v12, v36);
          *(_QWORD *)(v28 + v27) = v21;
          if (v21)
          {
            v29 = *(void **)(v21 + 32);
            swift_unknownObjectRetain();
            swift_release();
          }
          else
          {
            v29 = 0;
          }
          v3 = v26;
          sub_183261738(v36);
          nw_endpoint_add_alternative(v33, v25, v29);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          sub_1830620D4((uint64_t)v12, &qword_1EDCDCF18);
        }
        else
        {
          sub_1830620D4((uint64_t)v12, &qword_1EDCDCF18);
          swift_release();
          sub_183261738((uint64_t)v9);
        }
        v20 += v34;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      v1 = v32;
      v16 = v33;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  *v1 = v16;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_18325C908(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDCF18);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v12 = a1;
  swift_storeEnumTagMultiPayload();
  if (a2)
  {
    type metadata accessor for NWProtocolDefinition();
    v13 = (_QWORD *)swift_allocObject();
    v13[4] = a2;
    swift_unknownObjectRetain();
    v14 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
    v15 = sub_183B916E0();
    v17 = v16;

    v13[2] = v15;
    v13[3] = v17;
  }
  else
  {
    swift_unknownObjectRetain();
    v13 = 0;
  }
  v18 = *(int *)(v6 + 48);
  sub_1830589B0((uint64_t)v12, (uint64_t)v9);
  *(_QWORD *)&v9[v18] = v13;
  v19 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = sub_1832428EC(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
    *a3 = v19;
  }
  v22 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  if (v22 >= v21 >> 1)
  {
    v19 = sub_1832428EC(v21 > 1, v22 + 1, 1, v19);
    *a3 = v19;
  }
  *(_QWORD *)(v19 + 16) = v22 + 1;
  sub_1830630BC((uint64_t)v9, v19+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v22, &qword_1EDCDCF18);
  return 1;
}

uint64_t sub_18325CAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  char v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t (*NWEndpoint.alternatives.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = NWEndpoint.alternatives.getter();
  return sub_18325CB84;
}

uint64_t sub_18325CB84(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return NWEndpoint.alternatives.setter(*a1);
  v2 = swift_bridgeObjectRetain();
  NWEndpoint.alternatives.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t NWEndpoint.alternatePort.getter()
{
  return sub_18325DC04((uint64_t (*)(_QWORD))nw_endpoint_get_alternate_port);
}

uint64_t sub_18325CBD4@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  __int16 alternate_port;
  uint64_t result;
  uint64_t v9;

  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (void **)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    alternate_port = nw_endpoint_get_alternate_port(*v6);
    result = swift_unknownObjectRelease();
  }
  else
  {
    result = sub_183261738((uint64_t)v6);
    alternate_port = 0;
  }
  *a2 = alternate_port;
  return result;
}

void sub_18325CC84(__int16 *a1, _QWORD *a2)
{
  __int16 v3;
  void *v4;
  void *v5;

  v3 = *a1;
  NWEndpoint.nw.getter();
  if (v4)
  {
    v5 = v4;
    sub_183261738((uint64_t)a2);
    nw_endpoint_set_alternate_port(v5, v3);
    *a2 = v5;
    type metadata accessor for NWEndpoint();
    swift_storeEnumTagMultiPayload();
  }
}

void NWEndpoint.alternatePort.setter(__int16 a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  NWEndpoint.nw.getter();
  if (v3)
  {
    v4 = v3;
    sub_183261738((uint64_t)v1);
    nw_endpoint_set_alternate_port(v4, a1);
    *v1 = v4;
    type metadata accessor for NWEndpoint();
    swift_storeEnumTagMultiPayload();
  }
}

void (*NWEndpoint.alternatePort.modify(uint64_t *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _WORD *v4;
  uint64_t v5;
  void **v6;
  __int16 alternate_port;

  v2 = v1;
  v4 = a1 + 3;
  *a1 = v1;
  v5 = type metadata accessor for NWEndpoint();
  a1[1] = v5;
  v6 = (void **)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  a1[2] = (uint64_t)v6;
  sub_1832616F4(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    alternate_port = nw_endpoint_get_alternate_port(*v6);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_183261738((uint64_t)v6);
    alternate_port = 0;
  }
  *v4 = alternate_port;
  return sub_18325CE14;
}

void sub_18325CE14(uint64_t a1)
{
  __int16 v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_WORD *)(a1 + 24);
  v3 = *(_QWORD **)a1;
  NWEndpoint.nw.getter();
  if (v4)
  {
    v5 = v4;
    sub_183261738((uint64_t)v3);
    nw_endpoint_set_alternate_port(v5, v2);
    *v3 = v5;
    swift_storeEnumTagMultiPayload();
  }
  free(*(void **)(a1 + 16));
}

uint64_t NWEndpoint.agentIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18325D394((void (*)(uint64_t, unsigned __int8 *))nw_endpoint_get_agent_identifier, a1);
}

uint64_t NWEndpoint.agentIdentifier.setter(uint64_t a1)
{
  return sub_18325D578(a1, (void (*)(uint64_t, _BYTE *))nw_endpoint_set_agent_identifier);
}

void (*NWEndpoint.agentIdentifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  NWEndpoint.agentIdentifier.getter((uint64_t)v4);
  return sub_18325CF8C;
}

void sub_18325CF8C(uint64_t a1, char a2)
{
  sub_18325F78C(a1, a2, (void (*)(void *))NWEndpoint.agentIdentifier.setter, &qword_1EDCDD200);
}

uint64_t NWEndpoint.remoteInterfaceType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  int remote_interface_type;
  uint64_t result;
  uint64_t v9;

  v2 = v1;
  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (void **)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    remote_interface_type = nw_endpoint_get_remote_interface_type(*v6);
    result = swift_unknownObjectRelease();
    switch(remote_interface_type)
    {
      case 1:
        *a1 = 1;
        break;
      case 2:
        *a1 = 2;
        break;
      case 3:
        *a1 = 3;
        break;
      case 4:
        *a1 = 4;
        break;
      default:
        *a1 = 0;
        break;
    }
  }
  else
  {
    *a1 = 5;
    return sub_183261738((uint64_t)v6);
  }
  return result;
}

void sub_18325D0A8(unsigned __int8 *a1, _QWORD *a2)
{
  int v3;
  void *v4;
  void *v5;

  v3 = *a1;
  NWEndpoint.nw.getter();
  if (v4)
  {
    v5 = v4;
    if (v3 == 5)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      sub_183261738((uint64_t)a2);
      nw_endpoint_set_remote_interface_type(v5, v3);
      *a2 = v5;
      type metadata accessor for NWEndpoint();
      swift_storeEnumTagMultiPayload();
    }
  }
}

void NWEndpoint.remoteInterfaceType.setter(unsigned __int8 *a1)
{
  _QWORD *v1;
  int v2;
  void *v3;
  void *v4;

  v2 = *a1;
  NWEndpoint.nw.getter();
  if (v3)
  {
    v4 = v3;
    if (v2 == 5)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      sub_183261738((uint64_t)v1);
      nw_endpoint_set_remote_interface_type(v4, v2);
      *v1 = v4;
      type metadata accessor for NWEndpoint();
      swift_storeEnumTagMultiPayload();
    }
  }
}

void (*NWEndpoint.remoteInterfaceType.modify(uint64_t *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  uint64_t v5;
  void **v6;
  int remote_interface_type;
  char v8;

  v2 = v1;
  v4 = (char *)(a1 + 3);
  *a1 = v1;
  v5 = type metadata accessor for NWEndpoint();
  a1[1] = v5;
  v6 = (void **)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  a1[2] = (uint64_t)v6;
  sub_1832616F4(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    remote_interface_type = nw_endpoint_get_remote_interface_type(*v6);
    swift_unknownObjectRelease();
    switch(remote_interface_type)
    {
      case 1:
        v8 = 1;
        goto LABEL_9;
      case 2:
        v8 = 2;
        goto LABEL_9;
      case 3:
        v8 = 3;
        goto LABEL_9;
      case 4:
        v8 = 4;
LABEL_9:
        *v4 = v8;
        break;
      default:
        *v4 = 0;
        break;
    }
  }
  else
  {
    *v4 = 5;
    sub_183261738((uint64_t)v6);
  }
  return sub_18325D2BC;
}

void sub_18325D2BC(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *(_QWORD **)a1;
  NWEndpoint.nw.getter();
  v5 = v4;
  if (v4)
  {
    if (v2 == 5)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      sub_183261738((uint64_t)v3);
      nw_endpoint_set_remote_interface_type(v5, v2);
      *v3 = v5;
      swift_storeEnumTagMultiPayload();
    }
  }
  free(*(void **)(a1 + 16));
}

uint64_t NWEndpoint.serviceIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18325D394((void (*)(uint64_t, unsigned __int8 *))nw_endpoint_get_service_identifier, a1);
}

uint64_t sub_18325D394@<X0>(void (*a1)(uint64_t, unsigned __int8 *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 uu[8];
  uint64_t v16;
  uint64_t v17;

  v4 = v2;
  v17 = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v6);
  v8 = &uu[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1832616F4(v4, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v9 = *(_QWORD *)v8;
    *(_QWORD *)uu = 0;
    v16 = 0;
    a1(v9, uu);
    if (uuid_is_null(uu))
    {
      swift_unknownObjectRelease();
      v10 = sub_183B914AC();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 1, 1, v10);
    }
    else
    {
      sub_183B91488();
      swift_unknownObjectRelease();
      v13 = sub_183B914AC();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 0, 1, v13);
    }
  }
  else
  {
    v12 = sub_183B914AC();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
    return sub_183261738((uint64_t)v8);
  }
}

uint64_t NWEndpoint.serviceIdentifier.setter(uint64_t a1)
{
  return sub_18325D578(a1, (void (*)(uint64_t, _BYTE *))nw_endpoint_set_service_identifier);
}

uint64_t sub_18325D578(uint64_t a1, void (*a2)(uint64_t, _BYTE *))
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  _BYTE v34[16];
  uint64_t v35;

  v4 = v2;
  v35 = *MEMORY[0x1E0C80C00];
  v6 = sub_183B914AC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v34[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  NWEndpoint.nw.getter();
  if (!v13)
    return sub_1830620D4(a1, &qword_1EDCDD200);
  v14 = v13;
  sub_183062090(a1, (uint64_t)v12, &qword_1EDCDD200);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    LOBYTE(v15) = 0;
    LOBYTE(v16) = 0;
    LOBYTE(v17) = 0;
    LOBYTE(v18) = 0;
    LOBYTE(v19) = 0;
    LOBYTE(v20) = 0;
    LOBYTE(v21) = 0;
    LOBYTE(v22) = 0;
    LOBYTE(v23) = 0;
    LOBYTE(v24) = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    LOBYTE(v29) = 0;
    LOBYTE(v30) = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v9, v12, v6);
    v30 = sub_183B91494();
    v22 = v32;
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    v29 = v30 >> 8;
    v28 = v30 >> 16;
    v27 = v30 >> 24;
    v26 = HIDWORD(v30);
    v25 = v30 >> 40;
    v24 = HIWORD(v30);
    v23 = HIBYTE(v30);
    v21 = v22 >> 8;
    v20 = v22 >> 16;
    v19 = v22 >> 24;
    v18 = HIDWORD(v22);
    v17 = v22 >> 40;
    v16 = HIWORD(v22);
    v15 = HIBYTE(v22);
  }
  v34[0] = v30;
  v34[1] = v29;
  v34[2] = v28;
  v34[3] = v27;
  v34[4] = v26;
  v34[5] = v25;
  v34[6] = v24;
  v34[7] = v23;
  v34[8] = v22;
  v34[9] = v21;
  v34[10] = v20;
  v34[11] = v19;
  v34[12] = v18;
  v34[13] = v17;
  v34[14] = v16;
  v34[15] = v15;
  a2(v14, v34);
  sub_183261738((uint64_t)v4);
  sub_1830620D4(a1, &qword_1EDCDD200);
  *v4 = v14;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

void (*NWEndpoint.serviceIdentifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  NWEndpoint.serviceIdentifier.getter((uint64_t)v4);
  return sub_18325D84C;
}

void sub_18325D84C(uint64_t a1, char a2)
{
  sub_18325F78C(a1, a2, (void (*)(void *))NWEndpoint.serviceIdentifier.setter, &qword_1EDCDD200);
}

uint64_t NWEndpoint.cnames.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD aBlock[6];
  uint64_t v12;

  v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v1);
  v3 = (void **)((char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v3);
    return 0;
  }
  v4 = *v3;
  v12 = MEMORY[0x1E0DEE9D8];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = &v12;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_18323E6EC;
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = sub_183064360;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18324C6DC;
  aBlock[3] = &block_descriptor_24;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_endpoint_enumerate_cnames(v4, v7);
  swift_unknownObjectRelease();
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) == 0)
  {
    v9 = v12;
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t NWEndpoint.ethernetAddress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _BYTE *ethernet_address;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (void **)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    ethernet_address = nw_endpoint_get_ethernet_address(*v6);
    if (ethernet_address)
    {
      v8 = *(_DWORD *)ethernet_address;
      v9 = ethernet_address[4];
      v10 = ethernet_address[5];
      result = swift_unknownObjectRelease();
      *(_DWORD *)a1 = v8;
      *(_WORD *)(a1 + 4) = ((v10 << 40) | (unint64_t)(v9 << 32)) >> 32;
      *(_BYTE *)(a1 + 6) = 0;
    }
    else
    {
      result = swift_unknownObjectRelease();
      *(_WORD *)(a1 + 4) = 0;
      *(_DWORD *)a1 = 0;
      *(_BYTE *)(a1 + 6) = 1;
    }
  }
  else
  {
    *(_WORD *)(a1 + 4) = 0;
    *(_DWORD *)a1 = 0;
    *(_BYTE *)(a1 + 6) = 1;
    return sub_183261738((uint64_t)v6);
  }
  return result;
}

uint64_t NWEndpoint.knownTrackerOwner.getter()
{
  return sub_18325DB1C(nw_endpoint_get_known_tracker_name);
}

uint64_t NWEndpoint.trackerOwner.getter()
{
  return sub_18325DB1C(nw_endpoint_get_tracker_owner);
}

uint64_t sub_18325DB1C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = v1;
  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v3, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v6);
    return 0;
  }
  if (!a1(*v6))
  {
    swift_unknownObjectRelease();
    return 0;
  }
  v7 = sub_183B91800();
  swift_unknownObjectRelease();
  return v7;
}

uint64_t NWEndpoint.priority.getter()
{
  return sub_18325DC04((uint64_t (*)(_QWORD))nw_endpoint_get_priority);
}

uint64_t NWEndpoint.weight.getter()
{
  return sub_18325DC04((uint64_t (*)(_QWORD))nw_endpoint_get_weight);
}

uint64_t sub_18325DC04(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = v1;
  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v3, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v7 = a1(*v6);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_183261738((uint64_t)v6);
    return 0;
  }
  return v7;
}

uint64_t NWEndpoint.publicKeys.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v1);
  v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v3);
    return 0;
  }
  v4 = nw_endpoint_copy_public_keys(*v3);
  if (!v4)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  v5 = v4;
  v6 = sub_183B9192C();

  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_18325DD80(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = *a1;
  swift_bridgeObjectRetain();
  NWEndpoint.nw.getter();
  if (!v4)
    return swift_bridgeObjectRelease();
  v5 = v4;
  sub_183261738((uint64_t)a2);
  if (v3)
  {
    v6 = (void *)sub_183B91920();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  nw_endpoint_set_public_keys(v5, v6);

  *a2 = v5;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

uint64_t NWEndpoint.publicKeys.setter(uint64_t a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;

  NWEndpoint.nw.getter();
  if (!v3)
    return swift_bridgeObjectRelease();
  v4 = v3;
  sub_183261738((uint64_t)v1);
  if (a1)
  {
    v5 = (void *)sub_183B91920();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  nw_endpoint_set_public_keys(v4, v5);

  *v1 = v4;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

void (*NWEndpoint.publicKeys.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  id v6;
  void *v7;
  uint64_t v8;

  v2 = v1;
  a1[1] = v1;
  v4 = type metadata accessor for NWEndpoint();
  a1[2] = v4;
  v5 = (void **)malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  a1[3] = (uint64_t)v5;
  sub_1832616F4(v2, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v5);
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v6 = nw_endpoint_copy_public_keys(*v5);
  if (!v6)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  v7 = v6;
  v8 = sub_183B9192C();
  swift_unknownObjectRelease();

LABEL_7:
  *a1 = v8;
  return sub_18325DF90;
}

void sub_18325DF90(uint64_t *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = *a1;
  v3 = (_QWORD *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    NWEndpoint.nw.getter();
    if (v5)
    {
      v6 = v5;
      sub_183261738((uint64_t)v3);
      if (v4)
      {
        v7 = (void *)sub_183B91920();
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = 0;
      }
      nw_endpoint_set_public_keys(v6, v7);

      *v3 = v6;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v11 = (void *)a1[3];
    swift_bridgeObjectRelease();
  }
  else
  {
    NWEndpoint.nw.getter();
    if (v8)
    {
      v9 = v8;
      sub_183261738((uint64_t)v3);
      if (v4)
      {
        v10 = (void *)sub_183B91920();
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = 0;
      }
      nw_endpoint_set_public_keys(v9, v10);

      *v3 = v9;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v11 = (void *)a1[3];
  }
  free(v11);
}

uint64_t NWEndpoint.applicationServiceName.getter()
{
  return sub_18325EE60((void (*))nw_endpoint_get_application_service_name);
}

uint64_t NWEndpoint.applicationServiceAlias.getter()
{
  return sub_18325EE60((void (*))nw_endpoint_get_application_service_alias);
}

uint64_t NWEndpoint.deviceName.getter()
{
  return sub_18325EB4C((uint64_t (*))nw_endpoint_get_device_name);
}

uint64_t NWEndpoint.deviceName.setter(uint64_t a1, uint64_t a2)
{
  return sub_18325EC38(a1, a2, (void (*)(NSObject *, uint64_t))nw_endpoint_set_device_name);
}

void (*NWEndpoint.deviceName.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  NSObject **v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[4] = malloc(v6);
  v7 = (NSObject **)malloc(v6);
  v4[5] = v7;
  sub_1832616F4(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v7);
LABEL_7:
    v9 = 0;
    v11 = 0;
    goto LABEL_8;
  }
  v8 = *v7;
  if (nw_endpoint_get_type(v8) != (nw_endpoint_type_url|nw_endpoint_type_host) || !nw_endpoint_get_device_name(v8))
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  v9 = sub_183B91800();
  v11 = v10;
  swift_unknownObjectRelease();
LABEL_8:
  *v4 = v9;
  v4[1] = v11;
  return sub_18325E1E8;
}

void sub_18325E1E8(uint64_t **a1, char a2)
{
  sub_18325E31C(a1, a2, (void (*)(NSObject *, uint64_t))nw_endpoint_set_device_name, (void (*)(uint64_t, uint64_t))NWEndpoint.deviceName.setter);
}

uint64_t NWEndpoint.deviceModel.getter()
{
  return sub_18325EB4C((uint64_t (*))nw_endpoint_get_device_model);
}

uint64_t NWEndpoint.deviceModel.setter(uint64_t a1, uint64_t a2)
{
  return sub_18325EC38(a1, a2, (void (*)(NSObject *, uint64_t))nw_endpoint_set_device_model);
}

void (*NWEndpoint.deviceModel.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  NSObject **v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[4] = malloc(v6);
  v7 = (NSObject **)malloc(v6);
  v4[5] = v7;
  sub_1832616F4(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v7);
LABEL_7:
    v9 = 0;
    v11 = 0;
    goto LABEL_8;
  }
  v8 = *v7;
  if (nw_endpoint_get_type(v8) != (nw_endpoint_type_url|nw_endpoint_type_host) || !nw_endpoint_get_device_model(v8))
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  v9 = sub_183B91800();
  v11 = v10;
  swift_unknownObjectRelease();
LABEL_8:
  *v4 = v9;
  v4[1] = v11;
  return sub_18325E308;
}

void sub_18325E308(uint64_t **a1, char a2)
{
  sub_18325E31C(a1, a2, (void (*)(NSObject *, uint64_t))nw_endpoint_set_device_model, (void (*)(uint64_t, uint64_t))NWEndpoint.deviceModel.setter);
}

void sub_18325E31C(uint64_t **a1, char a2, void (*a3)(NSObject *, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  int EnumCaseMultiPayload;
  NSObject **v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v6 = **a1;
  v5 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    v9 = (void *)v4[4];
    v8 = (void *)v4[5];
    swift_bridgeObjectRetain();
    a4(v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1832616F4((*a1)[2], v4[4]);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v12 = (NSObject **)v4[4];
    if (EnumCaseMultiPayload == 4)
    {
      v13 = *v12;
      if (nw_endpoint_get_type(v13) == (nw_endpoint_type_url|nw_endpoint_type_host))
      {
        if (v5)
        {
          v14 = sub_183B91758();
          swift_bridgeObjectRelease();
          v15 = v14 + 32;
        }
        else
        {
          v15 = 0;
        }
        a3(v13, v15);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_183261738((uint64_t)v12);
    }
    v9 = (void *)v4[4];
    v8 = (void *)v4[5];
  }
  free(v8);
  free(v9);
  free(v4);
}

uint64_t NWEndpoint.deviceColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject **v3;
  NSObject *v4;
  uint64_t device_color;
  uint64_t v7;

  v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v1);
  v3 = (NSObject **)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v3);
    return 0;
  }
  v4 = *v3;
  if (nw_endpoint_get_type(v4) != (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    swift_unknownObjectRelease();
    return 0;
  }
  device_color = nw_endpoint_get_device_color(v4);
  swift_unknownObjectRelease();
  return device_color;
}

uint64_t sub_18325E510@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject **v6;
  NSObject *v7;
  int device_color;
  uint64_t result;
  uint64_t v10;

  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (NSObject **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    result = sub_183261738((uint64_t)v6);
LABEL_6:
    device_color = 0;
    goto LABEL_7;
  }
  v7 = *v6;
  if (nw_endpoint_get_type(v7) != (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    result = swift_unknownObjectRelease();
    goto LABEL_6;
  }
  device_color = nw_endpoint_get_device_color(v7);
  result = swift_unknownObjectRelease();
LABEL_7:
  *a2 = device_color;
  return result;
}

uint64_t sub_18325E5DC(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject **v6;
  int v7;
  NSObject *v8;
  uint64_t v10;

  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (NSObject **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *a1;
  sub_1832616F4(a2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
    return sub_183261738((uint64_t)v6);
  v8 = *v6;
  if (nw_endpoint_get_type(v8) == (nw_endpoint_type_url|nw_endpoint_type_host))
    nw_endpoint_set_device_color(v8, v7);
  return swift_unknownObjectRelease();
}

uint64_t NWEndpoint.deviceColor.setter(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject **v6;
  NSObject *v7;
  uint64_t v9;

  v2 = v1;
  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (NSObject **)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
    return sub_183261738((uint64_t)v6);
  v7 = *v6;
  if (nw_endpoint_get_type(v7) == (nw_endpoint_type_url|nw_endpoint_type_host))
    nw_endpoint_set_device_color(v7, a1);
  return swift_unknownObjectRelease();
}

void (*NWEndpoint.deviceColor.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  NSObject **v7;
  NSObject *v8;
  int device_color;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = type metadata accessor for NWEndpoint();
  v4[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[2] = malloc(v6);
  v4[3] = malloc(v6);
  v7 = (NSObject **)malloc(v6);
  v4[4] = v7;
  sub_1832616F4(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v7);
LABEL_6:
    device_color = 0;
    goto LABEL_7;
  }
  v8 = *v7;
  if (nw_endpoint_get_type(v8) != (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  device_color = nw_endpoint_get_device_color(v8);
  swift_unknownObjectRelease();
LABEL_7:
  *((_DWORD *)v4 + 10) = device_color;
  return sub_18325E84C;
}

void sub_18325E84C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  nw_endpoint_t *v6;
  int v7;
  nw_endpoint_t v8;
  void *v9;
  void *v10;

  v2 = *a1;
  v3 = *((_DWORD *)*a1 + 10);
  v4 = **a1;
  if ((a2 & 1) != 0)
  {
    sub_1832616F4(v4, v2[2]);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v6 = (nw_endpoint_t *)v2[2];
    if (EnumCaseMultiPayload != 4)
    {
LABEL_3:
      sub_183261738((uint64_t)v6);
      goto LABEL_8;
    }
  }
  else
  {
    sub_1832616F4(v4, v2[3]);
    v7 = swift_getEnumCaseMultiPayload();
    v6 = (nw_endpoint_t *)v2[3];
    if (v7 != 4)
      goto LABEL_3;
  }
  v8 = *v6;
  if (nw_endpoint_get_type(*v6) == (nw_endpoint_type_url|nw_endpoint_type_host))
    nw_endpoint_set_device_color(v8, v3);
  swift_unknownObjectRelease();
LABEL_8:
  v9 = (void *)v2[3];
  v10 = (void *)v2[2];
  free((void *)v2[4]);
  free(v9);
  free(v10);
  free(v2);
}

uint64_t NWEndpoint.route.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject **v6;
  NSObject *v7;
  int advertised_route;
  uint64_t result;
  char v10;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (NSObject **)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    *a1 = 3;
    return sub_183261738((uint64_t)v6);
  }
  v7 = *v6;
  if (nw_endpoint_get_type(v7) == (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    advertised_route = nw_endpoint_get_advertised_route(v7);
    result = swift_unknownObjectRelease();
    switch(advertised_route)
    {
      case 3:
        v10 = 2;
        goto LABEL_10;
      case 2:
        v10 = 1;
        goto LABEL_10;
      case 1:
        *a1 = 0;
        return result;
    }
  }
  else
  {
    result = swift_unknownObjectRelease();
  }
  v10 = 3;
LABEL_10:
  *a1 = v10;
  return result;
}

uint64_t NWEndpoint.deviceID.getter()
{
  return sub_18325EB4C((uint64_t (*))nw_endpoint_get_device_id);
}

uint64_t NWEndpoint.deviceID.setter(uint64_t a1, uint64_t a2)
{
  return sub_18325EC38(a1, a2, (void (*)(NSObject *, uint64_t))nw_endpoint_set_device_id);
}

void (*NWEndpoint.deviceID.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  NSObject **v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[4] = malloc(v6);
  v7 = (NSObject **)malloc(v6);
  v4[5] = v7;
  sub_1832616F4(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v7);
LABEL_7:
    v9 = 0;
    v11 = 0;
    goto LABEL_8;
  }
  v8 = *v7;
  if (nw_endpoint_get_type(v8) != (nw_endpoint_type_url|nw_endpoint_type_host) || !nw_endpoint_get_device_id(v8))
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  v9 = sub_183B91800();
  v11 = v10;
  swift_unknownObjectRelease();
LABEL_8:
  *v4 = v9;
  v4[1] = v11;
  return sub_18325EB2C;
}

void sub_18325EB2C(uint64_t **a1, char a2)
{
  sub_18325E31C(a1, a2, (void (*)(NSObject *, uint64_t))nw_endpoint_set_device_id, (void (*)(uint64_t, uint64_t))NWEndpoint.deviceID.setter);
}

uint64_t NWEndpoint.contactID.getter()
{
  return sub_18325EB4C((uint64_t (*))nw_endpoint_get_contact_id);
}

uint64_t sub_18325EB4C(uint64_t (*a1)(NSObject *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject **v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = v1;
  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (NSObject **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v3, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v6);
    return 0;
  }
  v7 = *v6;
  if (nw_endpoint_get_type(v7) != (nw_endpoint_type_url|nw_endpoint_type_host) || !a1(v7))
  {
    swift_unknownObjectRelease();
    return 0;
  }
  v8 = sub_183B91800();
  swift_unknownObjectRelease();
  return v8;
}

uint64_t NWEndpoint.contactID.setter(uint64_t a1, uint64_t a2)
{
  return sub_18325EC38(a1, a2, (void (*)(NSObject *, uint64_t))nw_endpoint_set_contact_id);
}

uint64_t sub_18325EC38(uint64_t a1, uint64_t a2, void (*a3)(NSObject *, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  NSObject **v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = v3;
  v7 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v7);
  v9 = (NSObject **)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v5, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v10 = *v9;
    if (nw_endpoint_get_type(v10) == (nw_endpoint_type_url|nw_endpoint_type_host))
    {
      if (a2)
      {
        v11 = sub_183B91758();
        swift_bridgeObjectRelease();
        v12 = v11 + 32;
      }
      else
      {
        v12 = 0;
      }
      a3(v10, v12);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return sub_183261738((uint64_t)v9);
  }
}

void (*NWEndpoint.contactID.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  NSObject **v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[4] = malloc(v6);
  v7 = (NSObject **)malloc(v6);
  v4[5] = v7;
  sub_1832616F4(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v7);
LABEL_7:
    v9 = 0;
    v11 = 0;
    goto LABEL_8;
  }
  v8 = *v7;
  if (nw_endpoint_get_type(v8) != (nw_endpoint_type_url|nw_endpoint_type_host) || !nw_endpoint_get_contact_id(v8))
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  v9 = sub_183B91800();
  v11 = v10;
  swift_unknownObjectRelease();
LABEL_8:
  *v4 = v9;
  v4[1] = v11;
  return sub_18325EE40;
}

void sub_18325EE40(uint64_t **a1, char a2)
{
  sub_18325E31C(a1, a2, (void (*)(NSObject *, uint64_t))nw_endpoint_set_contact_id, (void (*)(uint64_t, uint64_t))NWEndpoint.contactID.setter);
}

uint64_t NWEndpoint.applicationService.getter()
{
  return sub_18325EE60((void (*))nw_endpoint_get_application_service_name);
}

uint64_t sub_18325EE60(void (*a1)(NSObject *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject **v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = v1;
  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (NSObject **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v3, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v6);
    return 0;
  }
  v7 = *v6;
  if (nw_endpoint_get_type(v7) != (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    swift_unknownObjectRelease();
    return 0;
  }
  a1(v7);
  v8 = sub_183B91800();
  swift_unknownObjectRelease();
  return v8;
}

uint64_t NWEndpoint.applicationService.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject **v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (NSObject **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v7 = *v6;
    if (a2)
    {
      if (nw_endpoint_get_type(v7) == (nw_endpoint_type_url|nw_endpoint_type_host))
      {
        v8 = sub_183B91758();
        swift_bridgeObjectRelease();
        nw_endpoint_set_application_service_name(v7, (const char *)(v8 + 32));
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return sub_183261738((uint64_t)v6);
  }
}

void (*NWEndpoint.applicationService.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  NSObject **v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[4] = malloc(v6);
  v7 = (NSObject **)malloc(v6);
  v4[5] = v7;
  sub_1832616F4(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_183261738((uint64_t)v7);
LABEL_6:
    v9 = 0;
    v11 = 0;
    goto LABEL_7;
  }
  v8 = *v7;
  if (nw_endpoint_get_type(v8) != (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  nw_endpoint_get_application_service_name(v8);
  v9 = sub_183B91800();
  v11 = v10;
  swift_unknownObjectRelease();
LABEL_7:
  *v4 = v9;
  v4[1] = v11;
  return sub_18325F128;
}

void sub_18325F128(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int EnumCaseMultiPayload;
  NSObject **v8;
  NSObject *v9;
  uint64_t v10;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    v6 = (void *)v2[4];
    v5 = (void *)v2[5];
    swift_bridgeObjectRetain();
    NWEndpoint.applicationService.setter(v4, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1832616F4((*a1)[2], v2[4]);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v8 = (NSObject **)v2[4];
    if (EnumCaseMultiPayload == 4)
    {
      v9 = *v8;
      if (v3)
      {
        if (nw_endpoint_get_type(v9) == (nw_endpoint_type_url|nw_endpoint_type_host))
        {
          v10 = sub_183B91758();
          swift_bridgeObjectRelease();
          nw_endpoint_set_application_service_name(v9, (const char *)(v10 + 32));
          swift_unknownObjectRelease();
          swift_release();
        }
        else
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_183261738((uint64_t)v8);
    }
    v6 = (void *)v2[4];
    v5 = (void *)v2[5];
  }
  free(v5);
  free(v6);
  free(v2);
}

uint64_t NWEndpoint.serviceID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject **v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v2 = v1;
  v14 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v4);
  v6 = (NSObject **)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v7 = *v6;
    if (nw_endpoint_get_type(v7) == (nw_endpoint_type_url|nw_endpoint_type_host))
    {
      v13 = 0uLL;
      nw_endpoint_get_service_identifier(v7, &v13);
      sub_183B91488();
      swift_unknownObjectRelease();
      v8 = sub_183B914AC();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 0, 1, v8);
    }
    else
    {
      v11 = sub_183B914AC();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    v10 = sub_183B914AC();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
    return sub_183261738((uint64_t)v6);
  }
}

uint64_t sub_18325F3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_183062090(a1, (uint64_t)v11, a5);
  return a6(v11);
}

uint64_t NWEndpoint.serviceID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject **v13;
  NSObject *v14;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = v1;
  v25 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_183B914AC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v11);
  v13 = (NSObject **)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(v2, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v14 = *v13;
    if (nw_endpoint_get_type(v14) == (nw_endpoint_type_url|nw_endpoint_type_host))
    {
      sub_183062090(a1, (uint64_t)v6, &qword_1EDCDD200);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_1830620D4(a1, &qword_1EDCDD200);
        swift_unknownObjectRelease();
        return sub_1830620D4((uint64_t)v6, &qword_1EDCDD200);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
        *(_QWORD *)&v24 = sub_183B91494();
        WORD4(v24) = v16;
        BYTE10(v24) = v17;
        BYTE11(v24) = v18;
        BYTE12(v24) = v19;
        BYTE13(v24) = v20;
        BYTE14(v24) = v21;
        HIBYTE(v24) = v22;
        nw_endpoint_set_service_identifier(v14, &v24);
        swift_unknownObjectRelease();
        sub_1830620D4(a1, &qword_1EDCDD200);
        return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
    }
    else
    {
      sub_1830620D4(a1, &qword_1EDCDD200);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_1830620D4(a1, &qword_1EDCDD200);
    return sub_183261738((uint64_t)v13);
  }
}

void (*NWEndpoint.serviceID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  NWEndpoint.serviceID.getter((uint64_t)v4);
  return sub_18325F778;
}

void sub_18325F778(uint64_t a1, char a2)
{
  sub_18325F78C(a1, a2, (void (*)(void *))NWEndpoint.serviceID.setter, &qword_1EDCDD200);
}

void sub_18325F78C(uint64_t a1, char a2, void (*a3)(void *), uint64_t *a4)
{
  void *v5;
  void *v6;

  v5 = *(void **)(a1 + 8);
  v6 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_183062090(*(_QWORD *)(a1 + 16), (uint64_t)v5, a4);
    a3(v5);
    sub_1830620D4((uint64_t)v6, a4);
  }
  else
  {
    a3(*(void **)(a1 + 16));
  }
  free(v6);
  free(v5);
}

uint64_t static NWEndpoint.applicationService(_:uuid:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_183B91494();
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v13 = sub_183B91758();
  nw_endpoint_create_application_service((const char *)(v13 + 32), (const unsigned __int8 *)&v20);
  swift_release();
  v14 = swift_unknownObjectRetain();
  sub_183056F9C(v14, (uint64_t)v4);
  v15 = type metadata accessor for NWEndpoint();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v4, 1, v15))
  {
    sub_1830620D4((uint64_t)v4, qword_1ECD84160);
    v17 = 1;
  }
  else
  {
    sub_1830589B0((uint64_t)v4, a1);
    v17 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a1, v17, 1, v15);
  return swift_unknownObjectRelease();
}

void NWEndpoint.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_183B913A4();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v2);
  sub_1832616F4(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_18325FA94 + 4 * byte_183B9FDA3[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18325FA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_BYTE *)(v0 + 24);
  sub_183B9225C();
  *(_QWORD *)(v1 - 112) = v2;
  *(_QWORD *)(v1 - 104) = v3;
  *(_QWORD *)(v1 - 96) = v4;
  *(_BYTE *)(v1 - 88) = v5;
  NWEndpoint.Host.hash(into:)();
  sub_183B92274();
  return sub_183058BF0(v2, v3, v4, v5);
}

void NWEndpoint.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_183B913A4();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for NWEndpoint();
  MEMORY[0x1E0C80A78](v2);
  sub_1832616F4(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)&loc_18325FD84 + dword_1832601AC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18325FD94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  char v6;

  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_WORD *)(v0 + 26);
  v6 = *(_BYTE *)(v0 + 24);
  *(_QWORD *)(v1 - 96) = 0;
  *(_QWORD *)(v1 - 88) = 0xE000000000000000;
  *(_QWORD *)(v1 - 128) = v2;
  *(_QWORD *)(v1 - 120) = v3;
  *(_QWORD *)(v1 - 112) = v4;
  *(_BYTE *)(v1 - 104) = v6;
  sub_183B91F14();
  sub_183B917F4();
  *(_WORD *)(v1 - 128) = v5;
  sub_183B91F14();
  sub_183058BF0(v2, v3, v4, v6);
  return *(_QWORD *)(v1 - 96);
}

uint64_t NWEndpoint.hashValue.getter()
{
  sub_183B92250();
  NWEndpoint.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_1832601FC()
{
  sub_183B92250();
  NWEndpoint.hash(into:)();
  return sub_183B9228C();
}

uint64_t sub_18326023C()
{
  sub_183B92250();
  NWEndpoint.hash(into:)();
  return sub_183B9228C();
}

void sub_18326027C()
{
  __asm { BR              X11 }
}

_QWORD *sub_1832602DC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_18326056C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1832614E4(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1832615A4((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_18326161C((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_1832605E0(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_183260644(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_183B912D8();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_183B912FC();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_183B912F0();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_1832606F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_183B912D8();
  v15 = result;
  if (result)
  {
    result = sub_183B912FC();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  v16 = __OFSUB__(a2, a1);
  v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = sub_183B912F0();
  if (v18 >= v17)
    v19 = v17;
  else
    v19 = v18;
  v20 = v15 + v19;
  if (v15)
    v21 = v20;
  else
    v21 = 0;
  sub_18325BC58(v15, v21, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return sub_18308485C(a7, a8);
}

uint64_t sub_1832607E0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = sub_183B91DC4();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s7Network11IPv4AddressV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  nw_interface_t v6;

  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a2 + 8);
    if (v2 == 1)
    {
      if (v3 == 1)
        return v3 & 1;
    }
    else
    {
      v6 = *(nw_interface_t *)(a1 + 8);
      if (v3 != 1)
      {
        v5 = v3;
        sub_183058E80(v2);
        swift_unknownObjectRetain();
        LOBYTE(v3) = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v6, (nw_interface_t *)&v5);
        swift_unknownObjectRelease();
        sub_183058B1C(v2);
        return v3 & 1;
      }
      swift_unknownObjectRetain();
    }
    sub_183058E80(v3);
    sub_183058B1C(v2);
    sub_183058B1C(v3);
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

uint64_t _s7Network11IPv6AddressV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  nw_interface_t v7;

  if (a1[1] == a2[1] && *a1 == *a2)
  {
    v3 = a1[2];
    v4 = a2[2];
    if (v3 == 1)
    {
      if (v4 == 1)
        return v4 & 1;
    }
    else
    {
      v7 = (nw_interface_t)a1[2];
      if (v4 != 1)
      {
        v6 = v4;
        sub_183058E80(v3);
        swift_unknownObjectRetain();
        LOBYTE(v4) = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v7, (nw_interface_t *)&v6);
        swift_unknownObjectRelease();
        sub_183058B1C(v3);
        return v4 & 1;
      }
      swift_unknownObjectRetain();
    }
    sub_183058E80(v4);
    sub_183058B1C(v3);
    sub_183058B1C(v4);
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

uint64_t _s7Network10NWEndpointO4HostO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  nw_interface_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v17;
  nw_interface_t v18;
  uint64_t v19;
  NSObject *v20;
  nw_interface_t v21;
  uint64_t v22;
  NSObject *v23;

  v3 = *(nw_interface_t *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(NSObject **)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v7 = *(NSObject **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(NSObject **)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a1 + 24))
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      v11 = v3 == v7 && v2 == v6;
      if (v11 || (sub_183B920F4() & 1) != 0)
      {
        if (v4 == 1)
        {
          sub_183058E80((uint64_t)v8);
          sub_183058E2C((uint64_t)v7, v6, (uint64_t)v8, 0);
          v10 = 1;
          sub_183058E2C((uint64_t)v3, v2, 1, 0);
          sub_183058BF0((uint64_t)v3, v2, 1, 0);
          sub_183058BF0((uint64_t)v7, v6, (uint64_t)v8, 0);
          if (v8 == 1)
            return v10 & 1;
        }
        else
        {
          v21 = v4;
          if (v8 != 1)
          {
            v18 = v8;
            sub_183058E80((uint64_t)v4);
            sub_183058E80((uint64_t)v8);
            sub_183058E80((uint64_t)v4);
            sub_183058E80((uint64_t)v8);
            sub_183058E2C((uint64_t)v7, v6, (uint64_t)v8, 0);
            sub_183058E2C((uint64_t)v3, v2, (uint64_t)v4, 0);
            sub_183058E80((uint64_t)v4);
            v17 = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v21, &v18);
            sub_183058BF0((uint64_t)v3, v2, (uint64_t)v4, 0);
            sub_183058BF0((uint64_t)v7, v6, (uint64_t)v8, 0);
            sub_183058B1C((uint64_t)v8);
            sub_183058B1C((uint64_t)v4);
            sub_183058B1C((uint64_t)v8);
            swift_unknownObjectRelease();
            sub_183058B1C((uint64_t)v4);
            if ((v17 & 1) != 0)
            {
              v10 = 1;
              return v10 & 1;
            }
            goto LABEL_18;
          }
          sub_183058E80((uint64_t)v4);
          sub_183058E2C((uint64_t)v7, v6, 1, 0);
          sub_183058E2C((uint64_t)v3, v2, (uint64_t)v4, 0);
          sub_183058E80((uint64_t)v4);
          sub_183058BF0((uint64_t)v3, v2, (uint64_t)v4, 0);
          sub_183058BF0((uint64_t)v7, v6, 1, 0);
          swift_unknownObjectRelease();
        }
        sub_183058B1C((uint64_t)v4);
        sub_183058B1C((uint64_t)v8);
LABEL_18:
        v10 = 0;
        return v10 & 1;
      }
      sub_183058E2C((uint64_t)v7, v6, (uint64_t)v8, 0);
      sub_183058E2C((uint64_t)v3, v2, (uint64_t)v4, 0);
      sub_183058BF0((uint64_t)v3, v2, (uint64_t)v4, 0);
      v12 = (uint64_t)v7;
      v13 = v6;
      v14 = (uint64_t)v8;
      v15 = 0;
LABEL_17:
      sub_183058BF0(v12, v13, v14, v15);
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v5 != 1)
  {
    if (v9 == 2)
    {
      v21 = *(nw_interface_t *)a1;
      v22 = v2;
      v23 = v4;
      v18 = v7;
      v19 = v6;
      v20 = v8;
      sub_183058E2C((uint64_t)v7, v6, (uint64_t)v8, 2);
      sub_183058E2C((uint64_t)v3, v2, (uint64_t)v4, 2);
      sub_183058E2C((uint64_t)v7, v6, (uint64_t)v8, 2);
      sub_183058E2C((uint64_t)v3, v2, (uint64_t)v4, 2);
      v10 = _s7Network11IPv6AddressV2eeoiySbAC_ACtFZ_0(&v21, &v18);
      sub_183058BF0((uint64_t)v3, v2, (uint64_t)v4, 2);
      sub_183058BF0((uint64_t)v7, v6, (uint64_t)v8, 2);
      sub_183058BF0((uint64_t)v7, v6, (uint64_t)v8, 2);
      sub_183058BF0((uint64_t)v3, v2, (uint64_t)v4, 2);
      return v10 & 1;
    }
    goto LABEL_16;
  }
  if (v9 != 1)
  {
LABEL_16:
    sub_183058E2C(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)v8, v9);
    sub_183058E2C((uint64_t)v3, v2, (uint64_t)v4, v5);
    sub_183058BF0((uint64_t)v3, v2, (uint64_t)v4, v5);
    v12 = (uint64_t)v7;
    v13 = v6;
    v14 = (uint64_t)v8;
    v15 = v9;
    goto LABEL_17;
  }
  LODWORD(v21) = *(_QWORD *)a1;
  v22 = v2;
  LODWORD(v18) = (_DWORD)v7;
  v19 = v6;
  sub_183058E2C((uint64_t)v7, v6, (uint64_t)v8, 1);
  sub_183058E2C((uint64_t)v3, v2, (uint64_t)v4, 1);
  sub_183058E2C((uint64_t)v7, v6, (uint64_t)v8, 1);
  sub_183058E2C((uint64_t)v3, v2, (uint64_t)v4, 1);
  v10 = _s7Network11IPv4AddressV2eeoiySbAC_ACtFZ_0((uint64_t)&v21, (uint64_t)&v18);
  sub_183058BF0((uint64_t)v3, v2, (uint64_t)v4, 1);
  sub_183058BF0((uint64_t)v7, v6, (uint64_t)v8, 1);
  sub_183058BF0((uint64_t)v7, v6, (uint64_t)v8, 1);
  sub_183058BF0((uint64_t)v3, v2, (uint64_t)v4, 1);
  return v10 & 1;
}

void _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[14];

  v4 = sub_183B913A4();
  v17[4] = *(_QWORD *)(v4 - 8);
  v17[5] = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v17[3] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = type metadata accessor for NWEndpoint();
  v8 = MEMORY[0x1E0C80A78](v7);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v11 = MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCD7660);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v17 + *(int *)(v13 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1832616F4(a1, (uint64_t)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1832616F4(a2, (uint64_t)v15);
  v16 = (char *)sub_183261008 + 4 * byte_183B9FDA8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_183261008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;

  sub_1832616F4(v2, v1);
  v5 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_BYTE *)(v1 + 24);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_183058BF0(v5, v4, v6, v7);
    sub_1830620D4(v2, qword_1EDCD7660);
    v8 = 0;
  }
  else
  {
    *(_DWORD *)(v3 - 160) = *(unsigned __int16 *)(v1 + 26);
    v9 = *(_QWORD *)v0;
    v10 = *(_QWORD *)(v0 + 8);
    *(_QWORD *)(v3 - 152) = v2;
    *(_QWORD *)(v3 - 144) = v9;
    v11 = *(_QWORD *)(v0 + 16);
    v12 = *(unsigned __int16 *)(v0 + 26);
    v13 = *(_BYTE *)(v0 + 24);
    *(_QWORD *)(v3 - 112) = v5;
    *(_QWORD *)(v3 - 104) = v4;
    *(_QWORD *)(v3 - 96) = v6;
    *(_BYTE *)(v3 - 88) = v7;
    *(_QWORD *)(v3 - 136) = v10;
    *(_QWORD *)(v3 - 128) = v11;
    *(_BYTE *)(v3 - 120) = v13;
    v14 = _s7Network10NWEndpointO4HostO2eeoiySbAE_AEtFZ_0(v3 - 112, v3 - 144);
    sub_183058BF0(v9, v10, v11, v13);
    sub_183058BF0(v5, v4, v6, v7);
    v8 = v14 & (*(_DWORD *)(v3 - 160) == v12);
    sub_183261738(*(_QWORD *)(v3 - 152));
  }
  return v8 & 1;
}

BOOL _s7Network15EthernetAddressV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint8x8_t a3, uint8x8_t a4)
{
  _BOOL8 result;

  result = 0;
  a3.i32[0] = *(_DWORD *)a1;
  a4.i32[0] = *(_DWORD *)a2;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a3), (int16x4_t)*(_OWORD *)&vmovl_u8(a4)), 0xFuLL))) & 1) != 0&& *(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4))
  {
    return *(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5);
  }
  return result;
}

uint64_t sub_1832614E4(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1832615A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_183B91308();
  swift_allocObject();
  result = sub_183B912CC();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_183B913EC();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_18326161C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_183B91308();
  swift_allocObject();
  result = sub_183B912CC();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_18326169C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    return sub_183058BF0(a1, a2, a3, a4);
  return a1;
}

unint64_t sub_1832616B0()
{
  unint64_t result;

  result = qword_1EDCDB260;
  if (!qword_1EDCDB260)
  {
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EDCDB260);
  }
  return result;
}

uint64_t sub_1832616F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_183261738(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NWEndpoint();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_183261774()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_183261798(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_18324A994(a1, a2);
  return a1;
}

uint64_t sub_1832617AC()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    sub_18308485C(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject();
}

uint64_t sub_1832617E0(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18325BEC8(a1, a2, v2);
}

uint64_t sub_1832617E8()
{
  return swift_deallocObject();
}

uint64_t sub_1832617F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18325C908(a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t sub_183261800()
{
  return swift_deallocObject();
}

uint64_t sub_183261810()
{
  return swift_deallocObject();
}

uint64_t sub_183261820()
{
  return swift_deallocObject();
}

_BYTE *sub_183261830(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_1832614E4(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_1832615A4((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_18326161C((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_183261894(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_183B91308();
      swift_allocObject();
      sub_183B912E4();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_183B913EC();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_183261930(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD280);
  v10 = sub_183262DB4();
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_2(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_18326056C(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return v5;
}

uint64_t sub_1832619C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = result;
    v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3)
      return sub_183B917A0();
    v4 = 0;
    v5 = v1 - 1;
    v6 = v2 + 33;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v6 + v4++))
        return sub_183B917A0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_183261A14()
{
  unint64_t result;

  result = qword_1EDCDD218;
  if (!qword_1EDCDD218)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for IPv4Address, &type metadata for IPv4Address);
    atomic_store(result, (unint64_t *)&qword_1EDCDD218);
  }
  return result;
}

unint64_t sub_183261A5C()
{
  unint64_t result;

  result = qword_1EDCDD220;
  if (!qword_1EDCDD220)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for IPv6Address.Scope, &type metadata for IPv6Address.Scope);
    atomic_store(result, (unint64_t *)&qword_1EDCDD220);
  }
  return result;
}

unint64_t sub_183261AA4()
{
  unint64_t result;

  result = qword_1EDCDD228;
  if (!qword_1EDCDD228)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for IPv6Address, &type metadata for IPv6Address);
    atomic_store(result, (unint64_t *)&qword_1EDCDD228);
  }
  return result;
}

unint64_t sub_183261AEC()
{
  unint64_t result;

  result = qword_1EDCDD230;
  if (!qword_1EDCDD230)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for EthernetAddress, &type metadata for EthernetAddress);
    atomic_store(result, (unint64_t *)&qword_1EDCDD230);
  }
  return result;
}

unint64_t sub_183261B34()
{
  unint64_t result;

  result = qword_1EDCDD238;
  if (!qword_1EDCDD238)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWEndpoint.Host, &type metadata for NWEndpoint.Host);
    atomic_store(result, (unint64_t *)&qword_1EDCDD238);
  }
  return result;
}

unint64_t sub_183261B7C()
{
  unint64_t result;

  result = qword_1EDCDD240;
  if (!qword_1EDCDD240)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWEndpoint.Host, &type metadata for NWEndpoint.Host);
    atomic_store(result, (unint64_t *)&qword_1EDCDD240);
  }
  return result;
}

uint64_t sub_183261BC0()
{
  return MEMORY[0x1E0DEA9F0];
}

unint64_t sub_183261BD0()
{
  unint64_t result;

  result = qword_1EDCDD248;
  if (!qword_1EDCDD248)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWEndpoint.Host, &type metadata for NWEndpoint.Host);
    atomic_store(result, (unint64_t *)&qword_1EDCDD248);
  }
  return result;
}

uint64_t sub_183261C14()
{
  return MEMORY[0x1E0DEAA00];
}

uint64_t sub_183261C20()
{
  return MEMORY[0x1E0DEA9F8];
}

unint64_t sub_183261C30()
{
  unint64_t result;

  result = qword_1EDCDD250;
  if (!qword_1EDCDD250)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWEndpoint.Port, &type metadata for NWEndpoint.Port);
    atomic_store(result, (unint64_t *)&qword_1EDCDD250);
  }
  return result;
}

uint64_t sub_183261C74()
{
  return MEMORY[0x1E0DEE0C8];
}

unint64_t sub_183261C84()
{
  unint64_t result;

  result = qword_1EDCDD258;
  if (!qword_1EDCDD258)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWEndpoint.EndpointType, &type metadata for NWEndpoint.EndpointType);
    atomic_store(result, (unint64_t *)&qword_1EDCDD258);
  }
  return result;
}

uint64_t sub_183261CC8()
{
  return sub_183064644((unint64_t *)&unk_1EDCDD260, (uint64_t (*)(uint64_t))type metadata accessor for NWEndpoint, (uint64_t)&protocol conformance descriptor for NWEndpoint);
}

uint64_t sub_183261CF4@<X0>(uint64_t a1@<X8>)
{
  return NWEndpoint.echConfig.getter(a1);
}

uint64_t sub_183261D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18325F3E0(a1, a2, a3, a4, (uint64_t *)&unk_1EDCDD1F0, (uint64_t (*)(char *))NWEndpoint.echConfig.setter);
}

uint64_t sub_183261D38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = NWEndpoint.alternatives.getter();
  *a1 = result;
  return result;
}

uint64_t sub_183261D60()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return NWEndpoint.alternatives.setter(v0);
}

uint64_t sub_183261D90@<X0>(uint64_t a1@<X8>)
{
  return NWEndpoint.agentIdentifier.getter(a1);
}

uint64_t sub_183261DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18325F3E0(a1, a2, a3, a4, &qword_1EDCDD200, (uint64_t (*)(char *))NWEndpoint.agentIdentifier.setter);
}

uint64_t sub_183261DD4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = NWEndpoint.remoteInterfaceType.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_183261E10@<X0>(uint64_t a1@<X8>)
{
  return NWEndpoint.serviceIdentifier.getter(a1);
}

uint64_t sub_183261E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18325F3E0(a1, a2, a3, a4, &qword_1EDCDD200, (uint64_t (*)(char *))NWEndpoint.serviceIdentifier.setter);
}

uint64_t sub_183261E54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = NWEndpoint.publicKeys.getter();
  *a1 = result;
  return result;
}

uint64_t sub_183261E80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = NWEndpoint.deviceName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_183261EA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.deviceName.setter);
}

uint64_t sub_183261EB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = NWEndpoint.deviceModel.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_183261EDC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.deviceModel.setter);
}

uint64_t keypath_set_38Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t sub_183261F30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = NWEndpoint.deviceID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_183261F58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.deviceID.setter);
}

uint64_t sub_183261F64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = NWEndpoint.contactID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_183261F8C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.contactID.setter);
}

uint64_t sub_183261F98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = NWEndpoint.applicationService.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_183261FC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.applicationService.setter);
}

uint64_t sub_183261FCC@<X0>(uint64_t a1@<X8>)
{
  return NWEndpoint.serviceID.getter(a1);
}

uint64_t sub_183261FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18325F3E0(a1, a2, a3, a4, &qword_1EDCDD200, (uint64_t (*)(char *))NWEndpoint.serviceID.setter);
}

uint64_t dispatch thunk of IPAddress.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IPAddress.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of IPAddress.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of IPAddress.interface.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of IPAddress.isLoopback.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of IPAddress.isLinkLocal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of IPAddress.isMulticast.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t destroy for IPv4Address(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t _s7Network11IPv4AddressVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != 1)
    v3 = swift_unknownObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  return a1;
}

uint64_t assignWithCopy for IPv4Address(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    if (v5 != 1)
    {
      *v3 = v5;
      swift_unknownObjectRetain();
      return a1;
    }
    v6 = 1;
  }
  else
  {
    if (v5 != 1)
    {
      *v3 = v5;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      return a1;
    }
    sub_18326212C((uint64_t)v3);
    v6 = *(_QWORD *)(a2 + 8);
  }
  *v3 = v6;
  return a1;
}

uint64_t sub_18326212C(uint64_t a1)
{
  destroy for NWInterface();
  return a1;
}

uint64_t assignWithTake for IPv4Address(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) != 1)
  {
    if (v4 != 1)
    {
      *v3 = v4;
      swift_unknownObjectRelease();
      return a1;
    }
    sub_18326212C((uint64_t)v3);
    v4 = 1;
  }
  *v3 = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for IPv4Address(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for IPv4Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = a2 - 2147483646;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for IPv4Address()
{
  return &type metadata for IPv4Address;
}

uint64_t destroy for IPv6Address(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t _s7Network11IPv6AddressVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 != 1)
    v3 = swift_unknownObjectRetain();
  *(_QWORD *)(a1 + 16) = v3;
  return a1;
}

_QWORD *assignWithCopy for IPv6Address(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a2[2];
  if (v5 == 1)
  {
    if (v6 != 1)
    {
      *v4 = v6;
      swift_unknownObjectRetain();
      return a1;
    }
    v7 = 1;
  }
  else
  {
    if (v6 != 1)
    {
      *v4 = v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      return a1;
    }
    sub_18326212C((uint64_t)v4);
    v7 = a2[2];
  }
  *v4 = v7;
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for IPv6Address(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a1 + 2;
  v5 = a2[2];
  if (a1[2] != 1)
  {
    if (v5 != 1)
    {
      *v4 = v5;
      swift_unknownObjectRelease();
      return a1;
    }
    sub_18326212C((uint64_t)v4);
    v5 = 1;
  }
  *v4 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for IPv6Address(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for IPv6Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for IPv6Address()
{
  return &type metadata for IPv6Address;
}

uint64_t storeEnumTagSinglePayload for IPv6Address.Scope(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1832624F8 + 4 * byte_183B9FDB2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_18326252C + 4 * byte_183B9FDAD[v4]))();
}

uint64_t sub_18326252C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183262534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18326253CLL);
  return result;
}

uint64_t sub_183262548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183262550);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_183262554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18326255C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IPv6Address.Scope()
{
  return &type metadata for IPv6Address.Scope;
}

ValueMetadata *type metadata accessor for EthernetAddress()
{
  return &type metadata for EthernetAddress;
}

uint64_t initializeBufferWithCopyOfBuffer for NWEndpoint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1832625E0 + 4 * byte_183B9FDB7[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t assignWithCopy for NWEndpoint(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_183261738(result);
    v2 = (char *)&loc_183262778 + 4 * byte_183B9FDC6[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void *initializeWithTake for NWEndpoint(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v6 = sub_183B913A4();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for NWEndpoint(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_183261738((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v6 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destroy for NWEndpoint.Host(uint64_t a1)
{
  return sub_183058BF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for NWEndpoint.Host(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_183058E2C(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NWEndpoint.Host(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_183058E2C(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_183058BF0(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NWEndpoint.Host(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_183058BF0(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWEndpoint.Host(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWEndpoint.Host(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_183262BA8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_183262BB0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWEndpoint.Host()
{
  return &type metadata for NWEndpoint.Host;
}

uint64_t getEnumTagSinglePayload for NWEndpoint.EndpointType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NWEndpoint.EndpointType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_183262CA4 + 4 * byte_183B9FDD0[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_183262CD8 + 4 * byte_183B9FDCB[v4]))();
}

uint64_t sub_183262CD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183262CE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183262CE8);
  return result;
}

uint64_t sub_183262CF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183262CFCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_183262D00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183262D08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWEndpoint.EndpointType()
{
  return &type metadata for NWEndpoint.EndpointType;
}

_QWORD *sub_183262D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_1832605E0((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_183262D98, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_183262D80(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_183262D98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1832607E0(a1, a2);
}

unint64_t sub_183262DB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDD288;
  if (!qword_1EDCDD288)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDD280);
    result = MEMORY[0x186DB5558](MEMORY[0x1E0CB1B08], v1);
    atomic_store(result, (unint64_t *)&qword_1EDCDD288);
  }
  return result;
}

uint64_t sub_183262E18(void (*a1)(uint64_t *))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = *((_BYTE *)v1 + 32);
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[8];
  v30 = v1[9];
  v31 = v1[7];
  v29 = v1[10];
  v33 = v1[12];
  v34 = v1[11];
  v32 = v1[13];
  v10 = v1[15];
  v36 = v1[16];
  v37 = v1[14];
  v35 = v1[17];
  v39 = v1[19];
  v40 = v1[18];
  v38 = v1[20];
  v11 = v1[22];
  v43 = v1[23];
  v44 = v1[21];
  v12 = v1[24];
  v45 = v1[26];
  v46 = v1[25];
  v53 = *v1;
  v54 = v3;
  v41 = v1[27];
  v42 = v12;
  v13 = v1[29];
  v51 = v1[28];
  v55 = v4;
  v56 = v5;
  v57 = v6;
  v14 = v1[30];
  v58 = v7;
  v59 = v8;
  v47 = v1[31];
  v48 = v14;
  v49 = v1[32];
  v50 = v1[33];
  v15 = v1[35];
  v52 = v1[34];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a1(&v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
    v53 = v31;
    v54 = v9;
    v55 = v30;
    v56 = v29;
    v57 = v34;
    v58 = v33;
    v59 = v32;
    a1(&v53);
  }
  if (v10)
  {
    v53 = v37;
    v54 = v10;
    v55 = v36;
    v56 = v35;
    v57 = v40;
    v58 = v39;
    v59 = v38;
    a1(&v53);
  }
  if (v11)
  {
    v53 = v44;
    v54 = v11;
    v55 = v43;
    v56 = v42;
    v57 = v46;
    v58 = v45;
    v59 = v41;
    a1(&v53);
  }
  if (v13)
  {
    v53 = v51;
    v54 = v13;
    v55 = v48;
    v56 = v47;
    v57 = v49;
    v58 = v50;
    v59 = v52;
    a1(&v53);
  }
  v16 = (uint64_t *)(v15 + 16);
  swift_retain();
  result = swift_beginAccess();
  v18 = *(_QWORD *)(v15 + 16);
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
    return swift_release();
  v20 = 0;
  v21 = 0;
  while (v21 < v19)
  {
    ++v21;
    v22 = v18 + v20;
    v23 = *(_QWORD *)(v22 + 72);
    v24 = *(_QWORD *)(v22 + 80);
    v25 = *(_BYTE *)(v22 + 64);
    v26 = *(_QWORD *)(v22 + 48);
    v27 = *(_QWORD *)(v22 + 56);
    v28 = *(_QWORD *)(v22 + 40);
    v53 = *(_QWORD *)(v22 + 32);
    v54 = v28;
    v55 = v26;
    v56 = v27;
    v57 = v25;
    v58 = v23;
    v59 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v18 = *v16;
    v19 = *(_QWORD *)(*v16 + 16);
    v20 += 64;
    if (v21 == v19)
      return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_1832630E4()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[14];
  v3 = v0[15];
  v5 = v0[19];
  v65 = v0[20];
  v57 = v0[22];
  v59 = v0[21];
  v61 = v0[27];
  v62 = v0[26];
  v55 = v0[35];
  v72 = MEMORY[0x1E0DEE9D8];
  v6 = 0;
  if ((sub_18324BC90(v2, v1) & 1) != 0)
  {
    v70 = v2;
    v71 = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_183264564((uint64_t *)&v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832FEC4C(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1832BFAD0(32, 0xE100000000000000);
  v7 = v5;
  if (v2 == 0x5443454E4E4F43 && v1 == 0xE700000000000000)
  {
    v8 = v3;
    v9 = v5;
    v10 = v65;
    v11 = v65;
    if (!v3)
      goto LABEL_22;
    goto LABEL_18;
  }
  v12 = sub_183B920F4();
  if ((v12 & 1) != 0)
  {
    v8 = v3;
  }
  else
  {
    v4 = v59;
    v8 = v57;
  }
  v10 = v65;
  if ((v12 & 1) != 0)
    v9 = v5;
  else
    v9 = v62;
  if ((v12 & 1) != 0)
    v11 = v65;
  else
    v11 = v61;
  if (v8)
  {
LABEL_18:
    if ((sub_18324BC90(v9, v11) & 1) != 0)
    {
      v70 = v9;
      v71 = v11;
      v13 = v4;
      sub_18324C148(v4, v8);
      swift_bridgeObjectRetain();
      sub_183264564((uint64_t *)&v70);
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = v4;
      sub_18324C148(v4, v8);
      sub_1832FEC4C(v9, v11);
    }
    sub_18324C184(v13, v8);
    v7 = v5;
  }
LABEL_22:
  sub_1832BFAD0(0x2E312F5054544820, 0xEB000000000A0D31);
  if (v3)
  {
    sub_1832BFAD0(0x203A74736F48, 0xE600000000000000);
    if ((sub_18324BC90(v7, v10) & 1) != 0)
    {
      v70 = v7;
      v71 = v10;
      swift_bridgeObjectRetain();
      sub_183264564((uint64_t *)&v70);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1832FEC4C(v7, v10);
    }
    sub_1832BFAD0(2573, 0xE200000000000000);
  }
  swift_retain();
  v63 = (uint64_t *)(v55 + 16);
  swift_beginAccess();
  v14 = *(_QWORD *)(v55 + 16);
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v54 = 0;
    v16 = 0;
    while (v16 < v15)
    {
      v17 = (_QWORD *)(v14 + (v16 << 6));
      v18 = v17[4];
      v19 = v17[5];
      ++v16;
      v20 = v17[6] == 0x65696B6F6F63 && v17[7] == 0xE600000000000000;
      v66 = v16;
      if (v20 || (v22 = v17[9], v21 = v17[10], (sub_183B920F4() & 1) != 0))
      {
        if (!v54)
        {
          swift_bridgeObjectRetain();
          sub_1832BFAD0(v18, v19);
          sub_1832BFAD0(8250, 0xE200000000000000);
          v32 = sub_183290BA0();
          if (*(_QWORD *)(v32 + 16) && (v33 = sub_1832F67A0(0x65696B6F6F63, 0xE600000000000000), (v34 & 1) != 0))
            v35 = *(_WORD *)(*(_QWORD *)(v32 + 56) + 4 * v33);
          else
            v35 = -1;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          v36 = swift_bridgeObjectRetain();
          v37 = sub_183296AA0(v36, v35);
          swift_bridgeObjectRelease();
          v38 = *(_QWORD *)(v37 + 16);
          v60 = v38;
          v54 = v38 != 0;
          if (!v38)
          {
LABEL_102:
            swift_release();
            sub_1832BFAD0(2573, 0xE200000000000000);
            v16 = v66;
            goto LABEL_103;
          }
          v39 = 0;
          v40 = 0;
          v56 = v37;
          v58 = v37 + 32;
LABEL_73:
          if (v40 >= *(_QWORD *)(v37 + 16))
            goto LABEL_110;
          v67 = v6;
          v41 = v58 + 56 * v40;
          v43 = *(_QWORD *)(v41 + 40);
          v42 = *(_QWORD *)(v41 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v39 & 1) != 0)
            sub_1832BFAD0(8251, 0xE200000000000000);
          v64 = v40 + 1;
          if ((v42 & 0x2000000000000000) != 0)
            v44 = HIBYTE(v42) & 0xF;
          else
            v44 = v43 & 0xFFFFFFFFFFFFLL;
          v45 = (v43 >> 59) & 1;
          if ((v42 & 0x1000000000000000) == 0)
            LOBYTE(v45) = 1;
          v46 = 4 << v45;
          v47 = 15;
          while (1)
          {
            while (1)
            {
              if (4 * v44 == v47 >> 14)
              {
                v68 = v43;
                v69 = v42;
                swift_bridgeObjectRetain();
                v6 = v67;
                sub_183264564((uint64_t *)&v68);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_72:
                swift_bridgeObjectRelease();
                v37 = v56;
                ++v40;
                v39 = 1;
                if (v64 == v60)
                  goto LABEL_102;
                goto LABEL_73;
              }
              v48 = v47 & 0xC;
              v49 = v47;
              if (v48 == v46)
                v49 = sub_18329687C(v47, v43, v42);
              v50 = v49 >> 16;
              if (v49 >> 16 >= v44)
              {
LABEL_107:
                __break(1u);
LABEL_108:
                __break(1u);
                goto LABEL_109;
              }
              if ((v42 & 0x1000000000000000) == 0)
                break;
              v52 = sub_183B91848();
              if (v48 == v46)
                goto LABEL_92;
LABEL_95:
              if ((v42 & 0x1000000000000000) == 0)
                goto LABEL_82;
LABEL_96:
              if (v44 <= v47 >> 16)
                goto LABEL_108;
              v47 = sub_183B91818();
              if (v52 < 0)
              {
LABEL_71:
                v6 = v67;
                sub_1832FEC4C(v43, v42);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_72;
              }
            }
            if ((v42 & 0x2000000000000000) != 0)
            {
              v68 = v43;
              v69 = v42 & 0xFFFFFFFFFFFFFFLL;
              v52 = *((_BYTE *)&v68 + v50);
              if (v48 == v46)
                goto LABEL_92;
              goto LABEL_95;
            }
            v51 = (v42 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v43 & 0x1000000000000000) == 0)
              v51 = sub_183B91E78();
            v52 = *(_BYTE *)(v51 + v50);
            if (v48 != v46)
              goto LABEL_95;
LABEL_92:
            v47 = sub_18329687C(v47, v43, v42);
            if ((v42 & 0x1000000000000000) != 0)
              goto LABEL_96;
LABEL_82:
            v47 = (v47 & 0xFFFFFFFFFFFF0000) + 65540;
            if (v52 < 0)
              goto LABEL_71;
          }
        }
        v54 = 1;
LABEL_103:
        swift_beginAccess();
        v14 = *v63;
        v15 = *(_QWORD *)(*v63 + 16);
        if (v16 == v15)
          goto LABEL_104;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1832BFAD0(v18, v19);
        sub_1832BFAD0(8250, 0xE200000000000000);
        if ((v21 & 0x2000000000000000) != 0)
          v23 = HIBYTE(v21) & 0xF;
        else
          v23 = v22 & 0xFFFFFFFFFFFFLL;
        v24 = (v22 >> 59) & 1;
        if ((v21 & 0x1000000000000000) == 0)
          LOBYTE(v24) = 1;
        v25 = 4 << v24;
        v26 = 15;
        while (4 * v23 != v26 >> 14)
        {
          v27 = v26 & 0xC;
          v28 = v26;
          if (v27 == v25)
            v28 = sub_18329687C(v26, v22, v21);
          v29 = v28 >> 16;
          if (v28 >> 16 >= v23)
          {
            __break(1u);
LABEL_106:
            __break(1u);
            goto LABEL_107;
          }
          if ((v21 & 0x1000000000000000) != 0)
          {
            v31 = sub_183B91848();
            if (v27 == v25)
              goto LABEL_53;
LABEL_56:
            if ((v21 & 0x1000000000000000) == 0)
              goto LABEL_43;
LABEL_57:
            if (v23 <= v26 >> 16)
              goto LABEL_106;
            v26 = sub_183B91818();
            if (v31 < 0)
            {
LABEL_29:
              sub_1832FEC4C(v22, v21);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_30;
            }
          }
          else
          {
            if ((v21 & 0x2000000000000000) != 0)
            {
              v68 = v22;
              v69 = v21 & 0xFFFFFFFFFFFFFFLL;
              v31 = *((_BYTE *)&v68 + v29);
              if (v27 == v25)
                goto LABEL_53;
              goto LABEL_56;
            }
            v30 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v22 & 0x1000000000000000) == 0)
              v30 = sub_183B91E78();
            v31 = *(_BYTE *)(v30 + v29);
            if (v27 != v25)
              goto LABEL_56;
LABEL_53:
            v26 = sub_18329687C(v26, v22, v21);
            if ((v21 & 0x1000000000000000) != 0)
              goto LABEL_57;
LABEL_43:
            v26 = (v26 & 0xFFFFFFFFFFFF0000) + 65540;
            if (v31 < 0)
              goto LABEL_29;
          }
        }
        v68 = v22;
        v69 = v21;
        swift_bridgeObjectRetain();
        sub_183264564((uint64_t *)&v68);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_30:
        swift_bridgeObjectRelease();
        sub_1832BFAD0(2573, 0xE200000000000000);
        swift_beginAccess();
        v14 = *v63;
        v15 = *(_QWORD *)(*v63 + 16);
        v16 = v66;
        if (v66 == v15)
          goto LABEL_104;
      }
    }
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    swift_bridgeObjectRelease();
    __break(1u);
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
LABEL_104:
    swift_release();
    sub_1832BFAD0(2573, 0xE200000000000000);
    return v72;
  }
  return result;
}

uint64_t sub_183263A84(void (*a1)(uint64_t *))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = *((_BYTE *)v1 + 32);
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[9];
  v23 = *v1;
  v24 = v3;
  v25 = v4;
  v26 = v5;
  v27 = v6;
  v28 = v7;
  v29 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a1(&v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(v9 + 16);
  swift_retain();
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    return swift_release();
  v14 = 0;
  v15 = 0;
  while (v15 < v13)
  {
    ++v15;
    v16 = v12 + v14;
    v17 = *(_QWORD *)(v16 + 72);
    v18 = *(_QWORD *)(v16 + 80);
    v19 = *(_BYTE *)(v16 + 64);
    v20 = *(_QWORD *)(v16 + 48);
    v21 = *(_QWORD *)(v16 + 56);
    v22 = *(_QWORD *)(v16 + 40);
    v23 = *(_QWORD *)(v16 + 32);
    v24 = v22;
    v25 = v20;
    v26 = v21;
    v27 = v19;
    v28 = v17;
    v29 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v12 = *v10;
    v13 = *(_QWORD *)(*v10 + 16);
    v14 += 64;
    if (v15 == v13)
      return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_183263BE8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 8);
  v32 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  v29 = *(_QWORD *)(v0 + 72);
  v46 = MEMORY[0x1E0DEE9D8];
  sub_1832BFAD0(0x312E312F50545448, 0xE900000000000020);
  if ((sub_18324BC90(v5, v6) & 1) != 0)
  {
    v33 = v5;
    v34 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_183264564((uint64_t *)&v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832FEC4C(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1832BFAD0(32, 0xE100000000000000);
  v33 = v32;
  v34 = v1;
  v35 = v3;
  v36 = v2;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  v40 = v8;
  v41 = v7;
  v42 = v29;
  HTTPResponse.status.getter(&v43);
  v10 = v44;
  v9 = v45;
  if ((sub_18324BC90(v44, v45) & 1) != 0)
  {
    v33 = v10;
    v34 = v9;
    swift_bridgeObjectRetain();
    sub_183264564((uint64_t *)&v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1832FEC4C(v10, v9);
  }
  swift_bridgeObjectRelease();
  sub_1832BFAD0(2573, 0xE200000000000000);
  swift_retain();
  v30 = (uint64_t *)(v29 + 16);
  swift_beginAccess();
  v11 = *(_QWORD *)(v29 + 16);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
LABEL_38:
    swift_release();
    sub_1832BFAD0(2573, 0xE200000000000000);
    return v46;
  }
  v13 = 0;
LABEL_11:
  if (v13 < v12)
  {
    v14 = (_QWORD *)(v11 + (v13 << 6));
    v16 = v14[9];
    v15 = v14[10];
    v31 = v13 + 1;
    v18 = v14[4];
    v17 = v14[5];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832BFAD0(v18, v17);
    sub_1832BFAD0(8250, 0xE200000000000000);
    if ((v15 & 0x2000000000000000) != 0)
      v19 = HIBYTE(v15) & 0xF;
    else
      v19 = v16 & 0xFFFFFFFFFFFFLL;
    v20 = (v16 >> 59) & 1;
    if ((v15 & 0x1000000000000000) == 0)
      LOBYTE(v20) = 1;
    v21 = 4 << v20;
    v22 = 15;
    while (1)
    {
      while (1)
      {
        if (4 * v19 == v22 >> 14)
        {
          v43 = v16;
          v44 = v15;
          swift_bridgeObjectRetain();
          sub_183264564((uint64_t *)&v43);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          v13 = v31;
          sub_1832BFAD0(2573, 0xE200000000000000);
          swift_beginAccess();
          v11 = *v30;
          v12 = *(_QWORD *)(*v30 + 16);
          if (v31 == v12)
            goto LABEL_38;
          goto LABEL_11;
        }
        v23 = v22 & 0xC;
        v24 = v22;
        if (v23 == v21)
          v24 = sub_18329687C(v22, v16, v15);
        v25 = v24 >> 16;
        if (v24 >> 16 >= v19)
        {
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if ((v15 & 0x1000000000000000) == 0)
          break;
        v27 = sub_183B91848();
        if (v23 == v21)
          goto LABEL_35;
LABEL_30:
        if ((v15 & 0x1000000000000000) == 0)
          goto LABEL_18;
LABEL_31:
        if (v19 <= v22 >> 16)
          goto LABEL_40;
        v22 = sub_183B91818();
        if (v27 < 0)
        {
LABEL_9:
          sub_1832FEC4C(v16, v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      if ((v15 & 0x2000000000000000) != 0)
      {
        v43 = v16;
        v44 = v15 & 0xFFFFFFFFFFFFFFLL;
        v27 = *((_BYTE *)&v43 + v25);
        if (v23 == v21)
          goto LABEL_35;
        goto LABEL_30;
      }
      v26 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v16 & 0x1000000000000000) == 0)
        v26 = sub_183B91E78();
      v27 = *(_BYTE *)(v26 + v25);
      if (v23 != v21)
        goto LABEL_30;
LABEL_35:
      v22 = sub_18329687C(v22, v16, v15);
      if ((v15 & 0x1000000000000000) != 0)
        goto LABEL_31;
LABEL_18:
      v22 = (v22 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v27 < 0)
        goto LABEL_9;
    }
  }
LABEL_41:
  __break(1u);
  swift_bridgeObjectRelease();
  __break(1u);
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_18326407C(void (*a1)(_QWORD *))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  char v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *v1;
  v4 = *v1 + 16;
  swift_retain();
  result = swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return swift_release();
  v8 = 0;
  v9 = 0;
  while (v9 < v7)
  {
    ++v9;
    v10 = v6 + v8;
    v11 = *(_QWORD *)(v10 + 72);
    v12 = *(_QWORD *)(v10 + 80);
    v13 = *(_BYTE *)(v10 + 64);
    v14 = *(_QWORD *)(v10 + 48);
    v15 = *(_QWORD *)(v10 + 56);
    v16 = *(_QWORD *)(v10 + 40);
    v17[0] = *(_QWORD *)(v10 + 32);
    v17[1] = v16;
    v17[2] = v14;
    v17[3] = v15;
    v18 = v13;
    v19 = v11;
    v20 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v6 = *(_QWORD *)v4;
    v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    v8 += 64;
    if (v9 == v7)
      return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_183264188()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *v0;
  v24 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  v20 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
LABEL_32:
    swift_release();
    sub_1832BFAD0(2573, 0xE200000000000000);
    return v24;
  }
  v4 = 0;
LABEL_5:
  if (v4 < v3)
  {
    v5 = (_QWORD *)(v2 + (v4 << 6));
    v7 = v5[9];
    v6 = v5[10];
    v21 = v4 + 1;
    v9 = v5[4];
    v8 = v5[5];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832BFAD0(v9, v8);
    sub_1832BFAD0(8250, 0xE200000000000000);
    if ((v6 & 0x2000000000000000) != 0)
      v10 = HIBYTE(v6) & 0xF;
    else
      v10 = v7 & 0xFFFFFFFFFFFFLL;
    v11 = (v7 >> 59) & 1;
    if ((v6 & 0x1000000000000000) == 0)
      LOBYTE(v11) = 1;
    v12 = 4 << v11;
    v13 = 15;
    while (1)
    {
      while (1)
      {
        if (4 * v10 == v13 >> 14)
        {
          v22 = v7;
          v23 = v6;
          swift_bridgeObjectRetain();
          sub_183264564((uint64_t *)&v22);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_4:
          swift_bridgeObjectRelease();
          sub_1832BFAD0(2573, 0xE200000000000000);
          swift_beginAccess();
          v2 = *v20;
          v3 = *(_QWORD *)(*v20 + 16);
          v4 = v21;
          if (v21 == v3)
            goto LABEL_32;
          goto LABEL_5;
        }
        v14 = v13 & 0xC;
        v15 = v13;
        if (v14 == v12)
          v15 = sub_18329687C(v13, v7, v6);
        v16 = v15 >> 16;
        if (v15 >> 16 >= v10)
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        if ((v6 & 0x1000000000000000) == 0)
          break;
        v18 = sub_183B91848();
        if (v14 == v12)
          goto LABEL_29;
LABEL_24:
        if ((v6 & 0x1000000000000000) == 0)
          goto LABEL_12;
LABEL_25:
        if (v10 <= v13 >> 16)
          goto LABEL_34;
        v13 = sub_183B91818();
        if (v18 < 0)
        {
LABEL_3:
          sub_1832FEC4C(v7, v6);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
      }
      if ((v6 & 0x2000000000000000) != 0)
      {
        v22 = v7;
        v23 = v6 & 0xFFFFFFFFFFFFFFLL;
        v18 = *((_BYTE *)&v22 + v16);
        if (v14 == v12)
          goto LABEL_29;
        goto LABEL_24;
      }
      v17 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v7 & 0x1000000000000000) == 0)
        v17 = sub_183B91E78();
      v18 = *(_BYTE *)(v17 + v16);
      if (v14 != v12)
        goto LABEL_24;
LABEL_29:
      v13 = sub_18329687C(v13, v7, v6);
      if ((v6 & 0x1000000000000000) != 0)
        goto LABEL_25;
LABEL_12:
      v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v18 < 0)
        goto LABEL_3;
    }
  }
LABEL_35:
  __break(1u);
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_183264488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832644A0(a1, a2, a3, a4, (uint64_t)sub_183264618);
}

uint64_t sub_183264494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1832644A0(a1, a2, a3, a4, (uint64_t)sub_183264610);
}

uint64_t sub_1832644A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[4];

  v6[2] = a1;
  v6[3] = a2;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(a4 + 8))(a5, v6);
}

uint64_t sub_1832644CC(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v8[0] = *(_QWORD *)(a1 + 16);
  v8[1] = v3;
  swift_bridgeObjectRetain();
  sub_183B917F4();
  v5 = v8[0];
  v6 = sub_183B917D0();
  LOBYTE(v8[0]) = v4;
  a2(v5, v3, v6, v8);
  return swift_bridgeObjectRelease();
}

char *sub_183264564(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v1 = *a1;
  v2 = a1[1];
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v4 = (char *)(HIBYTE(v2) & 0xF);
    v9[0] = v1;
    v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    v3 = (char *)v9;
    return sub_1832BF8BC(v3, v4);
  }
  v1 = sub_1832F5B78();
  v7 = v6;
  swift_bridgeObjectRelease();
  *a1 = v1;
  a1[1] = v7;
  v2 = v7;
  if ((v7 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    v3 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v4 = (char *)(v1 & 0xFFFFFFFFFFFFLL);
  }
  else
  {
    v3 = (char *)sub_183B91E78();
  }
  return sub_1832BF8BC(v3, v4);
}

uint64_t sub_183264610(uint64_t a1)
{
  uint64_t v1;

  return sub_1832644CC(a1, *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(v1 + 16));
}

uint64_t sub_183264618(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v1 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_BYTE *)(a1 + 32);
  return v2(v4, v3, v5, v6, &v8);
}

uint64_t sub_183264658(uint64_t a1)
{
  return sub_183265B0C(a1, (uint64_t (*)(void))nw_protocol_copy_quic_definition, &qword_1EDCDD290);
}

uint64_t static NWProtocolQUIC.definition.getter()
{
  return sub_18303BFDC(&qword_1EDCDC530);
}

BOOL sub_183264688(NSObject *a1)
{
  return nw_protocol_options_is_quic(a1);
}

uint64_t NWProtocolQUIC.Options.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = nw_quic_create_options();
  return v0;
}

uint64_t NWProtocolQUIC.Options.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = nw_quic_create_options();
  return v0;
}

uint64_t sub_1832646F4(uint64_t a1)
{
  sub_183266B44(a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_183264718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[6];

  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  v2 = (uint64_t *)(v1 + 16);
  v3 = *(void **)(v0 + 16);
  v7[4] = sub_183266BD0;
  v7[5] = v1;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_1832648E8;
  v7[3] = &block_descriptor_2;
  v4 = _Block_copy(v7);
  swift_retain();
  swift_release();
  nw_quic_iterate_tls_application_protocols(v3, v4);
  _Block_release(v4);
  swift_beginAccess();
  v5 = *v2;
  swift_bridgeObjectRetain();
  swift_release();
  return v5;
}

uint64_t sub_18326480C(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  if (a1)
  {
    v2 = (_QWORD **)(a2 + 16);
    v3 = sub_183B91800();
    v5 = v4;
    swift_beginAccess();
    v6 = *v2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = sub_183242590(0, v6[2] + 1, 1, v6);
      *v2 = v6;
    }
    v9 = v6[2];
    v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      v6 = sub_183242590((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
      *v2 = v6;
    }
    v6[2] = v9 + 1;
    v10 = &v6[2 * v9];
    v10[4] = v3;
    v10[5] = v5;
    swift_endAccess();
  }
  return 1;
}

uint64_t sub_1832648E8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

void (*sub_183264930(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = MEMORY[0x1E0DEE9D8];
  v5 = (uint64_t *)(v4 + 16);
  v6 = *(void **)(v1 + 16);
  v3[7] = v6;
  v3[4] = sub_183266BD0;
  v3[5] = v4;
  *v3 = MEMORY[0x1E0C809B0];
  v3[1] = 1107296256;
  v3[2] = sub_1832648E8;
  v3[3] = &block_descriptor_5;
  v7 = _Block_copy(v3);
  swift_retain();
  swift_release();
  nw_quic_iterate_tls_application_protocols(v6, v7);
  _Block_release(v7);
  swift_beginAccess();
  v8 = *v5;
  swift_bridgeObjectRetain();
  swift_release();
  v3[6] = v8;
  return sub_183264A40;
}

void sub_183264A40(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    nw_quic_clear_tls_application_protocols(v4);
    v5 = *(_QWORD *)(v3 + 16);
    if (v5)
    {
      v6 = v3 + 40;
      do
      {
        v7 = v2[7];
        v8 = sub_183B91758();
        nw_quic_add_tls_application_protocol(v7, (const char *)(v8 + 32));
        swift_release();
        v6 += 16;
        --v5;
      }
      while (v5);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    nw_quic_clear_tls_application_protocols(*(void **)(*(_QWORD *)a1 + 56));
    v9 = *(_QWORD *)(v3 + 16);
    if (v9)
    {
      v10 = v3 + 40;
      do
      {
        v11 = v2[7];
        v12 = sub_183B91758();
        nw_quic_add_tls_application_protocol(v11, (const char *)(v12 + 32));
        swift_release();
        v10 += 16;
        --v9;
      }
      while (v9);
    }
  }
  swift_bridgeObjectRelease();
  free(v2);
}

BOOL static NWProtocolQUIC.Options.Direction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWProtocolQUIC.Options.Direction.hash(into:)()
{
  return sub_183B9225C();
}

void sub_183264B7C(BOOL *a1)
{
  uint64_t v1;

  nw_quic_set_stream_is_unidirectional(*(nw_protocol_options_t *)(v1 + 16), *a1);
}

BOOL sub_183264B88@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BOOL8 result;

  result = nw_quic_get_stream_is_unidirectional(*(nw_protocol_options_t *)(v1 + 16));
  *a1 = result;
  return result;
}

void (*sub_183264BB0(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_quic_get_stream_is_unidirectional(v3);
  return sub_183264BE8;
}

void sub_183264BE8(uint64_t a1)
{
  nw_quic_set_stream_is_unidirectional(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_183264BF8(char a1)
{
  uint64_t v1;

  nw_quic_set_stream_is_datagram(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_183264C08()
{
  uint64_t v0;

  return nw_quic_get_stream_is_datagram(*(nw_protocol_options_t *)(v0 + 16));
}

void (*sub_183264C20(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_quic_get_stream_is_datagram(v3);
  return sub_183264C58;
}

void sub_183264C58(uint64_t a1)
{
  nw_quic_set_stream_is_datagram(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

sec_protocol_options_t sub_183264C68()
{
  uint64_t v0;

  return nw_quic_copy_sec_protocol_options(*(nw_protocol_options_t *)(v0 + 16));
}

void sub_183264C70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0xFFFFFFFFLL;
  if (a1 < 0xFFFFFFFFLL)
    v2 = a1;
  nw_quic_set_idle_timeout(*(nw_protocol_options_t *)(v1 + 16), v2 & ~(v2 >> 63));
}

uint64_t sub_183264C90()
{
  uint64_t v0;

  return nw_quic_get_idle_timeout(*(nw_protocol_options_t *)(v0 + 16));
}

void (*sub_183264CAC(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_quic_get_idle_timeout(v3);
  return sub_183264CE8;
}

void sub_183264CE8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1;
  if (*(uint64_t *)a1 >= 0xFFFFFFFFLL)
    v1 = 0xFFFFFFFFLL;
  nw_quic_set_idle_timeout(*(nw_protocol_options_t *)(a1 + 8), v1 & ~(v1 >> 63));
}

void sub_183264D08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0xFFFFLL;
  if (a1 < 0xFFFF)
    v2 = a1;
  nw_quic_set_max_udp_payload_size(*(nw_protocol_options_t *)(v1 + 16), v2 & ~(unsigned __int16)(v2 >> 63));
}

uint64_t sub_183264D28()
{
  uint64_t v0;

  return nw_quic_get_max_udp_payload_size(*(nw_protocol_options_t *)(v0 + 16));
}

void (*sub_183264D44(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_quic_get_max_udp_payload_size(v3);
  return sub_183264D80;
}

void sub_183264D80(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1;
  if (*(uint64_t *)a1 >= 0xFFFF)
    v1 = 0xFFFFLL;
  nw_quic_set_max_udp_payload_size(*(nw_protocol_options_t *)(a1 + 8), v1 & ~(unsigned __int16)(v1 >> 63));
}

uint64_t sub_183264DA0(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_set_initial_max_data);
}

uint64_t sub_183264DAC()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_initial_max_data);
}

uint64_t sub_183264DB8(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t result;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  result = nw_quic_get_initial_max_data(v3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_183264DF8;
  }
  return result;
}

uint64_t sub_183264DF8(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_data);
}

uint64_t sub_183264E04(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_set_initial_max_stream_data_bidirectional_remote);
}

uint64_t sub_183264E10()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_initial_max_stream_data_bidirectional_remote);
}

uint64_t sub_183264E1C(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t result;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  result = nw_quic_get_initial_max_stream_data_bidirectional_remote(v3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_183264E5C;
  }
  return result;
}

uint64_t sub_183264E5C(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_stream_data_bidirectional_remote);
}

uint64_t sub_183264E68(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_set_initial_max_stream_data_bidirectional_local);
}

uint64_t sub_183264E74()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_initial_max_stream_data_bidirectional_local);
}

uint64_t sub_183264E80(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t result;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  result = nw_quic_get_initial_max_stream_data_bidirectional_local(v3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_183264EC0;
  }
  return result;
}

uint64_t sub_183264EC0(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_stream_data_bidirectional_local);
}

uint64_t sub_183264ECC(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_set_initial_max_stream_data_unidirectional);
}

uint64_t sub_183264ED8()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_initial_max_stream_data_unidirectional);
}

uint64_t sub_183264EE4(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t result;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  result = nw_quic_get_initial_max_stream_data_unidirectional(v3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_183264F24;
  }
  return result;
}

uint64_t sub_183264F24(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_stream_data_unidirectional);
}

uint64_t sub_183264F30(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_set_initial_max_streams_bidirectional);
}

uint64_t sub_183264F3C()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_initial_max_streams_bidirectional);
}

uint64_t sub_183264F48(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t result;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  result = nw_quic_get_initial_max_streams_bidirectional(v3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_183264F88;
  }
  return result;
}

uint64_t sub_183264F88(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_streams_bidirectional);
}

uint64_t sub_183264F94(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_set_initial_max_streams_unidirectional);
}

uint64_t sub_183264FA0()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_initial_max_streams_unidirectional);
}

uint64_t sub_183264FAC(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t result;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  result = nw_quic_get_initial_max_streams_unidirectional(v3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_183264FEC;
  }
  return result;
}

uint64_t sub_183264FEC(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_streams_unidirectional);
}

uint64_t sub_183264FF8(unint64_t a1)
{
  return sub_18326512C(a1, (uint64_t (*)(_QWORD, _QWORD))nw_quic_set_max_datagram_frame_size);
}

uint64_t sub_183265004()
{
  uint64_t v0;

  return nw_quic_get_max_datagram_frame_size(*(nw_protocol_options_t *)(v0 + 16));
}

uint64_t (*sub_183265020(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_quic_get_max_datagram_frame_size(v3);
  return sub_18326505C;
}

uint64_t sub_18326505C(_QWORD *a1, uint64_t a2)
{
  return sub_183265248(a1, a2, (uint64_t (*)(_QWORD, _QWORD))nw_quic_set_max_datagram_frame_size);
}

uint64_t sub_183265068(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  uint64_t result;

  if ((*a1 & 0x8000000000000000) == 0 && *a1 < 0x10000uLL)
    return a5(*(_QWORD *)(*(_QWORD *)a2 + 16), (unsigned __int16)*a1);
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_183265120(unint64_t a1)
{
  return sub_18326512C(a1, (uint64_t (*)(_QWORD, _QWORD))nw_quic_set_initial_packet_size);
}

uint64_t sub_18326512C(unint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0 && a1 < 0x10000)
    return a2(*(_QWORD *)(v2 + 16), (unsigned __int16)a1);
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_1832651E4()
{
  uint64_t v0;

  return nw_quic_get_initial_packet_size(*(void **)(v0 + 16));
}

uint64_t (*sub_183265200(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_quic_get_initial_packet_size(v3);
  return sub_18326523C;
}

uint64_t sub_18326523C(_QWORD *a1, uint64_t a2)
{
  return sub_183265248(a1, a2, (uint64_t (*)(_QWORD, _QWORD))nw_quic_set_initial_packet_size);
}

uint64_t sub_183265248(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  uint64_t result;

  if ((*a1 & 0x8000000000000000) == 0 && *a1 < 0x10000uLL)
    return a3(a1[1], (unsigned __int16)*a1);
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t NWProtocolQUIC.Options.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWProtocolQUIC.Options.__deallocating_deinit()
{
  return sub_183266A68();
}

uint64_t NWProtocolQUIC.ApplicationError.code.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t NWProtocolQUIC.ApplicationError.reason.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWProtocolQUIC.ApplicationError.init(integerLiteral:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = result;
  return result;
}

uint64_t NWProtocolQUIC.ApplicationError.init(code:reason:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t *sub_18326536C@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v2;
  return result;
}

BOOL sub_18326537C(NSObject *a1)
{
  return nw_protocol_metadata_is_quic(a1);
}

sec_protocol_metadata_t sub_183265390()
{
  uint64_t v0;

  return nw_quic_copy_sec_protocol_metadata(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t sub_183265398()
{
  uint64_t v0;
  NSObject *v1;
  const char *negotiated_protocol;

  v1 = nw_quic_copy_sec_protocol_metadata(*(nw_protocol_metadata_t *)(v0 + 16));
  negotiated_protocol = sec_protocol_metadata_get_negotiated_protocol(v1);
  swift_unknownObjectRelease();
  if (negotiated_protocol)
    return sub_183B91800();
  else
    return 0;
}

uint64_t sub_1832653E4()
{
  uint64_t v0;

  return nw_quic_get_stream_id(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t sub_1832653EC()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_remote_idle_timeout);
}

uint64_t sub_1832653F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  NSObject *v3;
  uint64_t application_error;
  uint64_t result;
  unint64_t v6;

  v3 = *(NSObject **)(*(_QWORD *)a1 + 16);
  application_error = nw_quic_get_application_error(v3);
  result = (uint64_t)nw_quic_get_application_error_reason(v3);
  if (result)
    result = sub_183B91800();
  else
    v6 = 0xE000000000000000;
  *a2 = application_error;
  a2[1] = result;
  a2[2] = v6;
  return result;
}

uint64_t sub_183265450(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;

  v2 = *a1;
  v3 = *(NSObject **)(*(_QWORD *)a2 + 16);
  if (a1[2])
    v4 = (const char *)(sub_183B91758() + 32);
  else
    v4 = 0;
  swift_bridgeObjectRetain();
  nw_quic_set_application_error(v3, v2, v4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1832654D0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;

  v2 = *a1;
  v3 = *(NSObject **)(v1 + 16);
  if (a1[2])
    v4 = (const char *)(sub_183B91758() + 32);
  else
    v4 = 0;
  nw_quic_set_application_error(v3, v2, v4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_183265540@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t application_error;
  uint64_t result;
  unint64_t v6;

  v3 = *(NSObject **)(v1 + 16);
  application_error = nw_quic_get_application_error(v3);
  result = (uint64_t)nw_quic_get_application_error_reason(v3);
  if (result)
    result = sub_183B91800();
  else
    v6 = 0xE000000000000000;
  *a1 = application_error;
  a1[1] = result;
  a1[2] = v6;
  return result;
}

uint64_t (*sub_183265594(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t application_error;
  uint64_t application_error_reason;
  unint64_t v6;

  v3 = *(NSObject **)(v1 + 16);
  a1[3] = (uint64_t)v3;
  application_error = nw_quic_get_application_error(v3);
  application_error_reason = (uint64_t)nw_quic_get_application_error_reason(v3);
  if (application_error_reason)
    application_error_reason = sub_183B91800();
  else
    v6 = 0xE000000000000000;
  *a1 = application_error;
  a1[1] = application_error_reason;
  a1[2] = v6;
  return sub_1832655F8;
}

uint64_t sub_1832655F8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  NSObject *v7;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    if (v4)
      v5 = (const char *)(sub_183B91758() + 32);
    else
      v5 = 0;
    v7 = *(NSObject **)(a1 + 24);
    swift_bridgeObjectRetain();
    nw_quic_set_application_error(v7, v3, v5);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v4)
      v6 = (const char *)(sub_183B91758() + 32);
    else
      v6 = 0;
    nw_quic_set_application_error(*(nw_protocol_metadata_t *)(a1 + 24), v3, v6);
    swift_unknownObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void sub_1832656C0(uint64_t application_error)
{
  uint64_t v1;

  nw_quic_set_stream_application_error(*(nw_protocol_metadata_t *)(v1 + 16), application_error);
}

uint64_t sub_1832656CC()
{
  uint64_t v0;

  return nw_quic_get_stream_application_error(*(nw_protocol_metadata_t *)(v0 + 16));
}

void (*sub_1832656D4(uint64_t *a1))(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  *a1 = nw_quic_get_stream_application_error(v3);
  return sub_18326570C;
}

void sub_18326570C(uint64_t a1)
{
  nw_quic_set_stream_application_error(*(nw_protocol_metadata_t *)(a1 + 8), *(_QWORD *)a1);
}

uint64_t sub_183265718(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_set_local_max_streams_unidirectional);
}

uint64_t sub_183265724()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_local_max_streams_unidirectional);
}

uint64_t sub_183265730(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t result;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  result = nw_quic_get_local_max_streams_unidirectional(v3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_183265770;
  }
  return result;
}

uint64_t sub_183265770(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_set_local_max_streams_unidirectional);
}

uint64_t sub_18326577C()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_remote_max_streams_unidirectional);
}

uint64_t sub_183265788(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_set_local_max_streams_bidirectional);
}

uint64_t sub_183265794()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_local_max_streams_bidirectional);
}

uint64_t sub_1832657A0(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t result;

  v3 = *(NSObject **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  result = nw_quic_get_local_max_streams_bidirectional(v3);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_1832657E0;
  }
  return result;
}

uint64_t sub_1832657E0(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_set_local_max_streams_bidirectional);
}

uint64_t sub_1832657EC()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_get_remote_max_streams_bidirectional);
}

uint64_t sub_1832657F8()
{
  uint64_t v0;

  return nw_quic_get_stream_usable_datagram_frame_size(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t sub_183265814@<X0>(uint64_t a1@<X8>)
{
  return sub_1832668A0((uint64_t (*)(_QWORD))nw_quic_get_keepalive_interval, a1);
}

uint64_t sub_183265820(uint64_t a1)
{
  return sub_183266904(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_set_keepalive_interval);
}

uint64_t (*sub_18326582C(uint64_t a1))(uint64_t *a1, uint64_t a2)
{
  uint64_t v1;
  unsigned int keepalive_interval;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  keepalive_interval = nw_quic_get_keepalive_interval(*(nw_protocol_metadata_t *)(v1 + 16));
  v4 = keepalive_interval;
  if (keepalive_interval)
  {
    v5 = 0;
  }
  else
  {
    v4 = 1;
    v5 = 1;
  }
  if (keepalive_interval == 0xFFFF)
    v6 = 0;
  else
    v6 = v4;
  if (keepalive_interval == 0xFFFF)
    v7 = 1;
  else
    v7 = v5;
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  return sub_183265890;
}

uint64_t sub_183265890(uint64_t *a1, uint64_t a2)
{
  return sub_183266A24(a1, a2, (uint64_t (*)(uint64_t *))sub_183265820);
}

uint64_t NWProtocolQUIC.Metadata.__deallocating_deinit()
{
  return sub_183266A68();
}

uint64_t NWProtocolQUIC.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NWProtocolQUIC.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1832658BC(uint64_t a1)
{
  return sub_183265B0C(a1, (uint64_t (*)(void))nw_protocol_copy_quic_stream_definition, &qword_1EDCDD298);
}

uint64_t static NWProtocolQUICStream.definition.getter()
{
  return sub_18303BFDC(&qword_1EDCDC538);
}

void sub_1832658F0(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  *(_BYTE *)(v1 + 24) = *a1;
  nw_quic_stream_set_is_unidirectional(*(void **)(v1 + 16), v2);
}

void sub_183265900(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

void (*sub_18326590C(uint64_t a1))(uint64_t *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 24);
  return sub_183265928;
}

void sub_183265928(uint64_t *a1)
{
  uint64_t v1;
  char v2;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 8);
  *(_BYTE *)(v1 + 24) = v2;
  nw_quic_stream_set_is_unidirectional(*(void **)(v1 + 16), v2);
}

double sub_18326593C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  double result;

  v1 = nw_quic_stream_copy_shared_connection_options(*(void **)(v0 + 16));
  type metadata accessor for NWProtocolQUICConnection.Options();
  v2 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_QWORD *)(v2 + 16) = v1;
  return result;
}

double sub_183265988(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_QWORD *)(v2 + 16) = a1;
  return result;
}

BOOL sub_1832659CC(NSObject *a1)
{
  return sub_183266584(a1, (uint64_t (*)(void))nw_protocol_copy_quic_stream_definition);
}

uint64_t NWProtocolQUICStream.Options.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = nw_quic_create_stream_options();
  return v0;
}

uint64_t NWProtocolQUICStream.Options.init()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = nw_quic_create_stream_options();
  return v0;
}

uint64_t sub_183265A34(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t NWProtocolQUICStream.Options.__deallocating_deinit()
{
  return sub_183266A68();
}

BOOL sub_183265A70(void *a1)
{
  return nw_protocol_metadata_is_quic_stream(a1);
}

uint64_t sub_183265A84()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_stream_get_id);
}

uint64_t sub_183265A90()
{
  uint64_t v0;

  return nw_quic_stream_get_application_error(*(void **)(v0 + 16));
}

void sub_183265A98(uint64_t a1)
{
  uint64_t v1;

  nw_quic_stream_set_application_error(*(void **)(v1 + 16), a1);
}

void (*sub_183265AA4(uint64_t *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  *a1 = nw_quic_stream_get_application_error(v3);
  return sub_183265ADC;
}

void sub_183265ADC(uint64_t a1)
{
  nw_quic_stream_set_application_error(*(void **)(a1 + 8), *(_QWORD *)a1);
}

uint64_t NWProtocolQUICStream.Metadata.__deallocating_deinit()
{
  return sub_183266A68();
}

uint64_t NWProtocolQUICStream.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_183265AF8(uint64_t a1)
{
  return sub_183265B0C(a1, (uint64_t (*)(void))nw_protocol_copy_quic_connection_definition, &qword_1EDCDD2A0);
}

uint64_t sub_183265B0C(uint64_t a1, uint64_t (*a2)(void), _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a2();
  type metadata accessor for NWProtocolDefinition();
  v5 = (_QWORD *)swift_allocObject();
  v5[4] = v4;
  v6 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  v7 = sub_183B916E0();
  v9 = v8;

  result = swift_unknownObjectRelease();
  v5[2] = v7;
  v5[3] = v9;
  *a3 = v5;
  return result;
}

uint64_t static NWProtocolQUICConnection.definition.getter()
{
  return sub_18303BFDC(&qword_1EDCDC540);
}

id sub_183265BB8()
{
  uint64_t v0;

  return nw_quic_connection_copy_sec_protocol_options(*(void **)(v0 + 16));
}

void sub_183265BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = a1;
  v2 = 0xFFFFFFFFLL;
  if (a1 < 0xFFFFFFFFLL)
    v2 = a1;
  nw_quic_connection_set_idle_timeout(*(void **)(v1 + 16), v2 & ~(v2 >> 63));
}

uint64_t sub_183265BE4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void (*sub_183265BEC(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
  a1[1] = v1;
  return sub_183265C04;
}

void sub_183265C04(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = *a1;
  v1 = a1[1];
  *(_QWORD *)(v1 + 24) = *a1;
  v3 = *(void **)(v1 + 16);
  v4 = 0xFFFFFFFFLL;
  if (v2 < 0xFFFFFFFFLL)
    v4 = v2;
  nw_quic_connection_set_idle_timeout(v3, v4 & ~(v4 >> 63));
}

void sub_183265C28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = a1;
  v2 = 0xFFFFLL;
  if (a1 < 0xFFFF)
    v2 = a1;
  nw_quic_connection_set_max_udp_payload_size(*(void **)(v1 + 16), v2 & ~(unsigned __int16)(v2 >> 63));
}

uint64_t sub_183265C4C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

void (*sub_183265C54(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 32);
  a1[1] = v1;
  return sub_183265C6C;
}

void sub_183265C6C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = *a1;
  v1 = a1[1];
  *(_QWORD *)(v1 + 32) = *a1;
  v3 = *(void **)(v1 + 16);
  v4 = 0xFFFFLL;
  if (v2 < 0xFFFF)
    v4 = v2;
  nw_quic_connection_set_max_udp_payload_size(v3, v4 & ~(unsigned __int16)(v4 >> 63));
}

void sub_183265C90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *(_QWORD *)(v4 + 40) = *a1;
  if (v3 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_data(*(void **)(v4 + 16), v3);
  }
}

void sub_183265D08(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  if (a1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_data(*(void **)(v1 + 16), a1);
  }
}

uint64_t sub_183265D78()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

void (*sub_183265D80(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v1;
  return sub_183265D98;
}

void sub_183265D98(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  *(_QWORD *)(v2 + 40) = *a1;
  if (v1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_data(*(void **)(v2 + 16), v1);
  }
}

void sub_183265E0C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *(_QWORD *)(v4 + 48) = *a1;
  if (v3 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(*(void **)(v4 + 16), v3);
  }
}

void sub_183265E84(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
  if (a1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(*(void **)(v1 + 16), a1);
  }
}

uint64_t sub_183265EF4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

void (*sub_183265EFC(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 48);
  a1[1] = v1;
  return sub_183265F14;
}

void sub_183265F14(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  *(_QWORD *)(v2 + 48) = *a1;
  if (v1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(*(void **)(v2 + 16), v1);
  }
}

void sub_183265F88(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *(_QWORD *)(v4 + 56) = *a1;
  if (v3 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_local(*(void **)(v4 + 16), v3);
  }
}

void sub_183266000(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  if (a1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_local(*(void **)(v1 + 16), a1);
  }
}

uint64_t sub_183266070()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

void (*sub_183266078(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 56);
  a1[1] = v1;
  return sub_183266090;
}

void sub_183266090(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  *(_QWORD *)(v2 + 56) = *a1;
  if (v1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_local(*(void **)(v2 + 16), v1);
  }
}

void sub_183266104(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *(_QWORD *)(v4 + 64) = *a1;
  if (v3 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_stream_data_unidirectional(*(void **)(v4 + 16), v3);
  }
}

void sub_18326617C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = a1;
  if (a1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_stream_data_unidirectional(*(void **)(v1 + 16), a1);
  }
}

uint64_t sub_1832661EC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

void (*sub_1832661F4(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 64);
  a1[1] = v1;
  return sub_18326620C;
}

void sub_18326620C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  *(_QWORD *)(v2 + 64) = *a1;
  if (v1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_stream_data_unidirectional(*(void **)(v2 + 16), v1);
  }
}

void sub_183266280(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *(_QWORD *)(v4 + 72) = *a1;
  if (v3 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_streams_bidirectional(*(void **)(v4 + 16), v3);
  }
}

void sub_1832662F8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
  if (a1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_streams_bidirectional(*(void **)(v1 + 16), a1);
  }
}

uint64_t sub_183266368()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

void (*sub_183266370(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 72);
  a1[1] = v1;
  return sub_183266388;
}

void sub_183266388(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  *(_QWORD *)(v2 + 72) = *a1;
  if (v1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_streams_bidirectional(*(void **)(v2 + 16), v1);
  }
}

void sub_1832663FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *(_QWORD *)(v4 + 80) = *a1;
  if (v3 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_streams_unidirectional(*(void **)(v4 + 16), v3);
  }
}

void sub_183266474(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  if (a1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_streams_unidirectional(*(void **)(v1 + 16), a1);
  }
}

uint64_t sub_1832664E4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

void (*sub_1832664EC(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 80);
  a1[1] = v1;
  return sub_183266504;
}

void sub_183266504(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  *(_QWORD *)(v2 + 80) = *a1;
  if (v1 < 0)
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_quic_connection_set_initial_max_streams_unidirectional(*(void **)(v2 + 16), v1);
  }
}

BOOL sub_183266578(NSObject *a1)
{
  return sub_183266584(a1, (uint64_t (*)(void))nw_protocol_copy_quic_connection_definition);
}

BOOL sub_183266584(NSObject *a1, uint64_t (*a2)(void))
{
  NSObject *v3;
  NSObject *v4;
  _BOOL8 is_equal;

  v3 = nw_protocol_options_copy_definition(a1);
  v4 = a2();
  is_equal = nw_protocol_definition_is_equal(v3, v4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolQUICConnection.Options.__deallocating_deinit()
{
  return sub_183266A68();
}

BOOL sub_1832665E4(void *a1)
{
  return nw_protocol_metadata_is_quic_connection(a1);
}

uint64_t sub_1832665F8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = (uint64_t)nw_quic_connection_copy_stream_metadata(*(void **)(v0 + 16));
  if (result)
  {
    v2 = result;
    type metadata accessor for NWProtocolQUICConnection.Metadata();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_183266634()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_connection_get_max_streams_unidirectional);
}

uint64_t sub_183266640(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_connection_set_max_streams_unidirectional);
}

uint64_t sub_18326664C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  a1[1] = *(_QWORD *)(v1 + 16);
  result = nw_quic_connection_get_max_streams_unidirectional();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_18326668C;
  }
  return result;
}

uint64_t sub_18326668C(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_connection_set_max_streams_unidirectional);
}

uint64_t sub_183266698(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  if ((*a1 & 0x8000000000000000) == 0)
    return a5(*(_QWORD *)(*(_QWORD *)a2 + 16));
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_18326670C()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_connection_get_max_streams_bidirectional);
}

uint64_t sub_183266718(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_connection_set_max_streams_bidirectional);
}

uint64_t sub_183266724(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  a1[1] = *(_QWORD *)(v1 + 16);
  result = nw_quic_connection_get_max_streams_bidirectional();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    return (uint64_t)sub_183266764;
  }
  return result;
}

uint64_t sub_183266764(_QWORD *a1, uint64_t a2)
{
  return sub_183266770(a1, a2, (uint64_t (*)(_QWORD))nw_quic_connection_set_max_streams_bidirectional);
}

uint64_t sub_183266770(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t result;

  if ((*a1 & 0x8000000000000000) == 0)
    return a3(a1[1]);
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_1832667E0()
{
  return sub_1832667EC((uint64_t (*)(_QWORD))nw_quic_connection_get_peer_idle_timeout);
}

uint64_t sub_1832667EC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;

  result = a1(*(_QWORD *)(v1 + 16));
  if (result < 0)
    __break(1u);
  return result;
}

uint64_t sub_183266810()
{
  uint64_t v0;

  return nw_quic_connection_get_application_error(*(void **)(v0 + 16));
}

uint64_t sub_183266818(uint64_t a1)
{
  return sub_183266824(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_connection_close_with_error);
}

uint64_t sub_183266824(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0)
    return a2(*(_QWORD *)(v2 + 16), a1);
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_183266894@<X0>(uint64_t a1@<X8>)
{
  return sub_1832668A0((uint64_t (*)(_QWORD))nw_quic_connection_get_keepalive, a1);
}

uint64_t sub_1832668A0@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  result = a1(*(_QWORD *)(v2 + 16));
  v5 = result;
  if ((_DWORD)result == 0xFFFF)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  if ((_DWORD)result)
  {
    v7 = v6;
  }
  else
  {
    v5 = 1;
    v7 = 1;
  }
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

uint64_t sub_1832668F8(uint64_t a1)
{
  return sub_183266904(a1, (uint64_t (*)(_QWORD, uint64_t))nw_quic_connection_set_keepalive);
}

uint64_t sub_183266904(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v4)
      v5 = 0;
    else
      v5 = 0xFFFFLL;
    return a2(*(_QWORD *)(v2 + 16), v5);
  }
  else if (v4 >= 0xFFFF)
  {
    return a2(*(_QWORD *)(v2 + 16), 65534);
  }
  else if (v4 < 0)
  {
    result = sub_183B91F50();
    __break(1u);
  }
  else
  {
    return a2(*(_QWORD *)(v2 + 16), (unsigned __int16)*(_QWORD *)a1);
  }
  return result;
}

uint64_t (*sub_1832669B4(uint64_t a1))(uint64_t *a1, uint64_t a2)
{
  uint64_t v1;
  unsigned int keepalive;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  keepalive = nw_quic_connection_get_keepalive(*(void **)(v1 + 16));
  v4 = keepalive;
  if (keepalive)
  {
    v5 = 0;
  }
  else
  {
    v4 = 1;
    v5 = 1;
  }
  if (keepalive == 0xFFFF)
    v6 = 0;
  else
    v6 = v4;
  if (keepalive == 0xFFFF)
    v7 = 1;
  else
    v7 = v5;
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  return sub_183266A18;
}

uint64_t sub_183266A18(uint64_t *a1, uint64_t a2)
{
  return sub_183266A24(a1, a2, (uint64_t (*)(uint64_t *))sub_1832668F8);
}

uint64_t sub_183266A24(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t *))
{
  char v3;
  uint64_t v5;
  char v6;

  v3 = *((_BYTE *)a1 + 8);
  v5 = *a1;
  v6 = v3;
  return a3(&v5);
}

uint64_t NWProtocolQUICConnection.Metadata.__deallocating_deinit()
{
  return sub_183266A68();
}

uint64_t sub_183266A68()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t NWProtocolQUICConnection.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t _s7Network14NWProtocolQUICC7OptionsC4alpnAESaySSG_tcfC_0(uint64_t a1)
{
  uint64_t v2;
  nw_protocol_options_t options;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for NWProtocolQUIC.Options();
  v2 = swift_allocObject();
  options = nw_quic_create_options();
  *(_QWORD *)(v2 + 16) = options;
  nw_quic_clear_tls_application_protocols(options);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_retain();
    v5 = a1 + 40;
    do
    {
      v6 = sub_183B91758();
      nw_quic_add_tls_application_protocol(options, (const char *)(v6 + 32));
      swift_release();
      v5 += 16;
      --v4;
    }
    while (v4);
    swift_release();
  }
  swift_bridgeObjectRelease();
  return v2;
}

void sub_183266B44(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(NSObject **)(v1 + 16);
  nw_quic_clear_tls_application_protocols(v3);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a1 + 40;
    do
    {
      v6 = sub_183B91758();
      nw_quic_add_tls_application_protocol(v3, (const char *)(v6 + 32));
      swift_release();
      v5 += 16;
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_183266BAC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_183266BD0(uint64_t a1)
{
  uint64_t v1;

  return sub_18326480C(a1, v1);
}

uint64_t type metadata accessor for NWProtocolQUICConnection.Options()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolQUICConnection.Metadata()
{
  return objc_opt_self();
}

unint64_t sub_183266C1C()
{
  unint64_t result;

  result = qword_1EDCDD2A8;
  if (!qword_1EDCDD2A8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolQUIC.Options.Direction, &type metadata for NWProtocolQUIC.Options.Direction);
    atomic_store(result, (unint64_t *)&qword_1EDCDD2A8);
  }
  return result;
}

uint64_t sub_183266C60()
{
  return MEMORY[0x1E0DEE1E8];
}

unint64_t sub_183266C70()
{
  unint64_t result;

  result = qword_1EDCDD2B0;
  if (!qword_1EDCDD2B0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolQUICStream.Options.Direction, &type metadata for NWProtocolQUICStream.Options.Direction);
    atomic_store(result, (unint64_t *)&qword_1EDCDD2B0);
  }
  return result;
}

uint64_t sub_183266CB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_183264718();
  *a1 = result;
  return result;
}

uint64_t sub_183266CDC()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  sub_183266B44(v0);
  return swift_bridgeObjectRelease();
}

BOOL sub_183266D0C@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_quic_get_stream_is_unidirectional(*(nw_protocol_options_t *)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183266D38(BOOL *a1, uint64_t a2)
{
  nw_quic_set_stream_is_unidirectional(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

BOOL sub_183266D4C@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_quic_get_stream_is_datagram(*(nw_protocol_options_t *)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183266D78(BOOL *a1, uint64_t a2)
{
  nw_quic_set_stream_is_datagram(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t sub_183266D8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_quic_get_idle_timeout(*(nw_protocol_options_t *)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183266DBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1 >= 0xFFFFFFFFLL)
    v2 = 0xFFFFFFFFLL;
  nw_quic_set_idle_timeout(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), v2 & ~(v2 >> 63));
}

uint64_t sub_183266DE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_quic_get_max_udp_payload_size(*(nw_protocol_options_t *)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183266E10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1 >= 0xFFFF)
    v2 = 0xFFFFLL;
  nw_quic_set_max_udp_payload_size(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), v2 & ~(unsigned __int16)(v2 >> 63));
}

uint64_t sub_183266E34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_get_initial_max_data, a2);
}

uint64_t sub_183266E40(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_data);
}

uint64_t sub_183266E5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_get_initial_max_stream_data_bidirectional_remote, a2);
}

uint64_t sub_183266E68(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_stream_data_bidirectional_remote);
}

uint64_t sub_183266E84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_get_initial_max_stream_data_bidirectional_local, a2);
}

uint64_t sub_183266E90(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_stream_data_bidirectional_local);
}

uint64_t sub_183266EAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_get_initial_max_stream_data_unidirectional, a2);
}

uint64_t sub_183266EB8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_stream_data_unidirectional);
}

uint64_t sub_183266ED4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_get_initial_max_streams_bidirectional, a2);
}

uint64_t sub_183266EE0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_streams_bidirectional);
}

uint64_t sub_183266EFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_get_initial_max_streams_unidirectional, a2);
}

uint64_t sub_183266F08(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_set_initial_max_streams_unidirectional);
}

uint64_t sub_183266F24@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_quic_get_max_datagram_frame_size(*(nw_protocol_options_t *)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_183266F54(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183265068(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))nw_quic_set_max_datagram_frame_size);
}

uint64_t sub_183266F70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_quic_get_initial_packet_size(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_183266FA0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183265068(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))nw_quic_set_initial_packet_size);
}

uint64_t sub_183266FC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = nw_quic_get_stream_application_error(*(nw_protocol_metadata_t *)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183266FF0(uint64_t *a1, uint64_t a2)
{
  nw_quic_set_stream_application_error(*(nw_protocol_metadata_t *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t sub_183267004@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_get_local_max_streams_unidirectional, a2);
}

uint64_t sub_183267010(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_set_local_max_streams_unidirectional);
}

uint64_t sub_18326702C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_get_local_max_streams_bidirectional, a2);
}

uint64_t sub_183267038(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_set_local_max_streams_bidirectional);
}

uint64_t sub_183267054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_38Tm(a1, (uint64_t (*)(_QWORD))nw_quic_get_keepalive_interval, a2);
}

uint64_t sub_183267060(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_39Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))sub_183265820);
}

uint64_t sub_18326706C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)result + 24);
  return result;
}

void sub_18326707C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  *(_BYTE *)(v3 + 24) = *a1;
  nw_quic_stream_set_is_unidirectional(*(void **)(v3 + 16), v2);
}

uint64_t sub_183267094@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = nw_quic_stream_get_application_error(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832670C0(uint64_t *a1, uint64_t a2)
{
  nw_quic_stream_set_application_error(*(void **)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t sub_1832670D4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 24);
  return result;
}

void sub_1832670E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  *(_QWORD *)(*a2 + 24) = *a1;
  if (v2 >= 0xFFFFFFFFLL)
    v2 = 0xFFFFFFFFLL;
  nw_quic_connection_set_idle_timeout(*(void **)(v3 + 16), v2 & ~(v2 >> 63));
}

uint64_t sub_18326710C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 32);
  return result;
}

void sub_18326711C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  *(_QWORD *)(*a2 + 32) = *a1;
  if (v2 >= 0xFFFF)
    v2 = 0xFFFFLL;
  nw_quic_connection_set_max_udp_payload_size(*(void **)(v3 + 16), v2 & ~(unsigned __int16)(v2 >> 63));
}

uint64_t sub_183267144@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 40);
  return result;
}

uint64_t sub_183267158@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 48);
  return result;
}

uint64_t sub_18326716C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 56);
  return result;
}

uint64_t sub_183267180@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 64);
  return result;
}

uint64_t sub_183267194@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 72);
  return result;
}

uint64_t sub_1832671A8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 80);
  return result;
}

uint64_t sub_1832671BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_connection_get_max_streams_unidirectional, a2);
}

uint64_t sub_1832671C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_connection_set_max_streams_unidirectional);
}

uint64_t sub_1832671E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(_QWORD))nw_quic_connection_get_max_streams_bidirectional, a2);
}

uint64_t keypath_get_14Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = a2(*(_QWORD *)(*(_QWORD *)a1 + 16));
  if (result < 0)
    __break(1u);
  else
    *a3 = result;
  return result;
}

uint64_t sub_183267224(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_183266698(a1, a2, a3, a4, (uint64_t (*)(_QWORD))nw_quic_connection_set_max_streams_bidirectional);
}

uint64_t sub_183267240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_38Tm(a1, (uint64_t (*)(_QWORD))nw_quic_connection_get_keepalive, a2);
}

uint64_t keypath_get_38Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  result = a2(*(_QWORD *)(*(_QWORD *)a1 + 16));
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 0xFFFF)
    {
      v5 = 0;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v5 = result;
    }
  }
  else
  {
    v5 = 1;
    v6 = 1;
  }
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 8) = v6;
  return result;
}

uint64_t sub_1832672AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_39Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))sub_1832668F8);
}

uint64_t keypath_set_39Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *))
{
  char v5;
  uint64_t v7;
  char v8;

  v5 = *((_BYTE *)a1 + 8);
  v7 = *a1;
  v8 = v5;
  return a5(&v7);
}

uint64_t type metadata accessor for NWProtocolQUIC()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolQUIC.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUIC.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.alpn.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.alpn.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.alpn.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.direction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.direction.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.direction.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.isDatagram.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.isDatagram.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.isDatagram.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.idleTimeout.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.idleTimeout.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.idleTimeout.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxUDPPayloadSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxUDPPayloadSize.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxUDPPayloadSize.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxData.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxData.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalRemote.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalRemote.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalRemote.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalLocal.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalLocal.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalLocal.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataUnidirectional.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataUnidirectional.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataUnidirectional.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

ValueMetadata *type metadata accessor for NWProtocolQUIC.Options.Direction()
{
  return &type metadata for NWProtocolQUIC.Options.Direction;
}

uint64_t initializeBufferWithCopyOfBuffer for NWProtocolQUIC.ApplicationError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for NWProtocolQUIC.ApplicationError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for NWProtocolQUIC.ApplicationError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NWProtocolQUIC.ApplicationError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWProtocolQUIC.ApplicationError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolQUIC.ApplicationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolQUIC.ApplicationError()
{
  return &type metadata for NWProtocolQUIC.ApplicationError;
}

uint64_t type metadata accessor for NWProtocolQUIC.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUIC.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.securityProtocolMetadata.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.negotiatedALPN.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.streamIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.remoteIdleTimeout.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.applicationError.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.applicationError.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.streamApplicationErrorCode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.streamApplicationErrorCode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.localMaxStreamsUnidirectional.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.localMaxStreamsUnidirectional.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.remoteMaxStreamsUnidirectional.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.usableDatagramFrameSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWProtocolQUIC.Metadata.KeepAliveBehavior(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NWProtocolQUIC.Metadata.KeepAliveBehavior(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_183267800(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_18326781C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolQUIC.Metadata.KeepAliveBehavior()
{
  return &type metadata for NWProtocolQUIC.Metadata.KeepAliveBehavior;
}

uint64_t type metadata accessor for NWProtocolQUICStream()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolQUICStream.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUICStream.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUICStream.Options.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t _s7Network14NWProtocolQUICC7OptionsC9DirectionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1832678EC + 4 * byte_183BA0525[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183267920 + 4 * asc_183BA0520[v4]))();
}

uint64_t sub_183267920(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183267928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183267930);
  return result;
}

uint64_t sub_18326793C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183267944);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_183267948(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183267950(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolQUICStream.Options.Direction()
{
  return &type metadata for NWProtocolQUICStream.Options.Direction;
}

uint64_t type metadata accessor for NWProtocolQUICStream.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUICStream.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for NWProtocolQUICConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUICConnection.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.securityProtocolOptions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.idleTimeout.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.idleTimeout.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.idleTimeout.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.maxUDPPayloadSize.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.maxUDPPayloadSize.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxData.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxData.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalRemote.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalRemote.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalRemote.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalLocal.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalLocal.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalLocal.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataUnidirectional.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataUnidirectional.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataUnidirectional.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsBidirectional.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsBidirectional.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsBidirectional.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsUnidirectional.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsUnidirectional.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsUnidirectional.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t method lookup function for NWProtocolQUICConnection.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsUnidirectional.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsUnidirectional.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsBidirectional.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsBidirectional.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsBidirectional.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.applicationErrorCode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.closeWithError(error:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.keepalive.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.keepalive.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

ValueMetadata *type metadata accessor for NWProtocolQUICConnection.Metadata.KeepaliveBehavior()
{
  return &type metadata for NWProtocolQUICConnection.Metadata.KeepaliveBehavior;
}

uint64_t sub_183267C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_183B915CC();
  __swift_allocate_value_buffer(v0, qword_1EDCDD2B8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCDD2B8);
  if (qword_1EDCDC620 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCF2A90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_183267C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_183B915CC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_183B9156C();
  __swift_allocate_value_buffer(v4, qword_1EDCDD2D0);
  __swift_project_value_buffer(v4, (uint64_t)qword_1EDCDD2D0);
  if (qword_1EDCDC548 != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCDD2B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_183B91554();
}

uint64_t sub_183267D84()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for NWActorSystem();
  v0 = swift_allocObject();
  result = NWActorSystem.init()();
  qword_1EDCDD2E8 = v0;
  return result;
}

uint64_t NWActorSystem.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  NWActorSystem.init()();
  return v0;
}

uint64_t static NWActorSystem.default.getter()
{
  if (qword_1EDCDC558 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_183267E30()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3F8);
  swift_allocObject();
  result = sub_183B9234C();
  qword_1EDCDD2F0 = result;
  return result;
}

uint64_t NWActorSystem.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v1 = sub_183B91C98();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_183B91C8C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v5);
  v7 = sub_183B91614();
  MEMORY[0x1E0C80A78](v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB1F0);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = 0;
  v9 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 120) = v8;
  *(_QWORD *)(v0 + 128) = v9;
  *(_QWORD *)(v0 + 136) = v9;
  *(_QWORD *)(v0 + 144) = v9;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = v9;
  *(_QWORD *)(v0 + 176) = v9;
  sub_1832467E0();
  sub_183B91608();
  v11[1] = MEMORY[0x1E0DEE9D8];
  sub_183275948(&qword_1EDCDD300, 255, v6, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE770);
  sub_18326807C();
  sub_183B91D58();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF8D0], v1);
  *(_QWORD *)(v0 + 184) = sub_183B91CBC();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_QWORD *)(v0 + 112) = 0;
  return v0;
}

unint64_t sub_18326807C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDD308;
  if (!qword_1EDCDD308)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDE770);
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EDCDD308);
  }
  return result;
}

uint64_t NWActorSystem.__allocating_init(service:parameters:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  NWActorSystem.init(service:parameters:)(a1, a2);
  return v4;
}

uint64_t NWActorSystem.init(service:parameters:)(unsigned __int8 *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  os_unfair_lock_s *v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  NSObject **v33;
  os_unfair_lock_s *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v3 = v2;
  v57 = a2;
  v5 = sub_183B91C98();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_183B91C8C();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v9);
  v11 = sub_183B91614();
  MEMORY[0x1E0C80A78](v11);
  v56 = *a1;
  v12 = *((_QWORD *)a1 + 1);
  v54 = *((_QWORD *)a1 + 2);
  v55 = v12;
  v13 = *((_QWORD *)a1 + 3);
  v52 = *((_QWORD *)a1 + 4);
  v53 = v13;
  v14 = *((_QWORD *)a1 + 5);
  v50 = *((_QWORD *)a1 + 6);
  v51 = v14;
  v15 = *((_QWORD *)a1 + 7);
  v48 = *((_QWORD *)a1 + 8);
  v49 = v15;
  v16 = *((_QWORD *)a1 + 9);
  v46 = *((_QWORD *)a1 + 10);
  v47 = v16;
  v45 = a1[88];
  v44 = *(unsigned __int16 *)(a1 + 89);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB1F0);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  v18 = MEMORY[0x1E0DEE9E0];
  v2[15] = v17;
  v2[16] = v18;
  v2[17] = v18;
  v2[18] = v18;
  v2[19] = 0;
  v2[20] = 0;
  v2[21] = v18;
  v2[22] = v18;
  sub_1832467E0();
  sub_183B91608();
  v58 = MEMORY[0x1E0DEE9D8];
  sub_183275948(&qword_1EDCDD300, 255, v10, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE770);
  sub_18326807C();
  sub_183B91D58();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF8D0], v5);
  v2[23] = sub_183B91CBC();
  v19 = *(os_unfair_lock_s **)(v57 + 16);
  v20 = v19 + 4;
  v21 = v19 + 6;
  os_unfair_lock_lock(v19 + 6);
  sub_183304A98(v20, (uint64_t *)&v58);
  os_unfair_lock_unlock(v21);
  v22 = v58;
  if (qword_1EDCDC5B0 != -1)
    swift_once();
  v23 = qword_1EDCF2A58;
  type metadata accessor for NWProtocolFramer.Options();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = nw_framer_create_options(*(nw_protocol_definition_t *)(v23 + 32));
  if (qword_1EDCDC548 != -1)
    swift_once();
  v25 = sub_183B915CC();
  __swift_project_value_buffer(v25, (uint64_t)qword_1EDCDD2B8);
  v26 = sub_183B915B4();
  v27 = sub_183B91C80();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_182FBE000, v26, v27, "Inserting Actor WireProtocol framer", v28, 2u);
    MEMORY[0x186DB563C](v28, -1, -1);
  }

  v29 = *(os_unfair_lock_s **)(v22 + 16);
  v30 = v29 + 4;
  v31 = v29 + 6;
  os_unfair_lock_lock(v29 + 6);
  sub_1831EF6F0(v30, (uint64_t *)&v58);
  os_unfair_lock_unlock(v31);
  v32 = *(_QWORD *)(v58 + 16);
  v33 = (NSObject **)(v32 + 16);
  v34 = (os_unfair_lock_s *)(v32 + 24);
  swift_retain();
  os_unfair_lock_lock(v34);
  sub_1833030A8(v33, &v58);
  os_unfair_lock_unlock(v34);
  if (v58 >> 62 && (swift_bridgeObjectRetain(), v43 = sub_183B91F68(), result = swift_bridgeObjectRelease(), v43 < 0))
  {
    __break(1u);
  }
  else
  {
    sub_18327377C(0, 0, v24);
    v35 = v58;
    os_unfair_lock_lock(v34);
    sub_1831EF7BC(v33, v35);
    os_unfair_lock_unlock(v34);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v36 = v55;
    v3[2] = v56;
    v3[3] = v36;
    v37 = v45 | (v44 << 8);
    v38 = v53;
    v3[4] = v54;
    v3[5] = v38;
    v39 = v51;
    v3[6] = v52;
    v3[7] = v39;
    v40 = v49;
    v3[8] = v50;
    v3[9] = v40;
    v41 = v47;
    v3[10] = v48;
    v3[11] = v41;
    v3[12] = v46;
    v3[13] = v37;
    v3[14] = v22;
    return (uint64_t)v3;
  }
  return result;
}

uint64_t NWActorSystem.publish<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

uint64_t sub_1832685FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v11;

  v11 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 16) = v11;
  v1 = *(_QWORD *)(v0 + 24);
  swift_getMetatypeMetadata();
  v2 = sub_183B91734();
  v4 = v3;
  *(_QWORD *)(v0 + 56) = v3;
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v5;
  *(_OWORD *)(v5 + 16) = v11;
  *(_QWORD *)(v5 + 32) = v1;
  sub_183269060();
  v6 = *(_QWORD *)(v0 + 48);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v7;
  v7[2] = sub_183273C28;
  v7[3] = v5;
  v7[4] = v6;
  v7[5] = v2;
  v7[6] = v4;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v8;
  v8[2] = v2;
  v8[3] = v4;
  v8[4] = v6;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v9;
  *v9 = v0;
  v9[1] = sub_18326875C;
  return sub_183B92100();
}

uint64_t sub_18326875C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1832687D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326880C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183268858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (char *)a4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C0) + 48);
  v9 = *(_QWORD *)(a3 + 8);
  *a4 = a2;
  a4[1] = v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, a1, v10);
  type metadata accessor for NWActorSystem.ServerRole();
  swift_storeEnumTagMultiPayload();
  return swift_unknownObjectRetain();
}

uint64_t NWActorSystem.publish<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t sub_18326890C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v10;
  __int128 v11;

  v11 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v11;
  swift_getMetatypeMetadata();
  v10 = *(_OWORD *)(v0 + 24);
  v1 = sub_183B91734();
  v3 = v2;
  *(_QWORD *)(v0 + 64) = v2;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *(_OWORD *)(v4 + 16) = v11;
  *(_OWORD *)(v4 + 32) = v10;
  sub_183269060();
  v5 = *(_QWORD *)(v0 + 56);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v6;
  v6[2] = sub_183273CC8;
  v6[3] = v4;
  v6[4] = v5;
  v6[5] = v1;
  v6[6] = v3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v7;
  v7[2] = v1;
  v7[3] = v3;
  v7[4] = v5;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v8;
  *v8 = v0;
  v8[1] = sub_183268A70;
  return sub_183B92100();
}

uint64_t sub_183268A70()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_183268AE4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183268B20()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183268B6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  char *v12;
  uint64_t (*v13)();
  uint64_t v14;

  v12 = (char *)a6 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C8) + 48);
  v13 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v13 + 2) = a4;
  *((_QWORD *)v13 + 3) = a5;
  *((_QWORD *)v13 + 4) = a2;
  *((_QWORD *)v13 + 5) = a3;
  *a6 = sub_183275A18;
  a6[1] = v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, a1, v14);
  type metadata accessor for NWActorSystem.ServerRole();
  swift_storeEnumTagMultiPayload();
  return swift_retain();
}

uint64_t NWActorSystem.invalidateActor<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD v6[2];

  v2 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[1] = a1;
  sub_183B91DDC();
  NWActorSystem.resignID(_:)((uint64_t)v4);
  return sub_183058AE0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
}

void NWActorSystem.resignID(_:)(uint64_t a1)
{
  uint8_t *v1;
  uint8_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for NWActorID();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v23 - v8;
  if (qword_1EDCDC548 != -1)
    swift_once();
  v10 = sub_183B915CC();
  __swift_project_value_buffer(v10, (uint64_t)qword_1EDCDD2B8);
  sub_183058C44(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  v11 = sub_183B915B4();
  v12 = sub_183B91C80();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v26 = a1;
    v14 = (uint8_t *)v13;
    v24 = swift_slowAlloc();
    v29 = v24;
    *(_DWORD *)v14 = 136315138;
    v23 = v14 + 4;
    sub_183058C44((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v27 = 0;
    v28 = 0xE000000000000000;
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    v27 = 0x49726F746341574ELL;
    v28 = 0xEA00000000002844;
    v25 = v1;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B914AC();
    sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    v15 = v27;
    v16 = v28;
    sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v27 = sub_183273D70(v15, v16, &v29);
    sub_183B91D1C();
    v2 = v25;
    swift_bridgeObjectRelease();
    sub_183058AE0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    _os_log_impl(&dword_182FBE000, v11, v12, "Resign actor: %s", v14, 0xCu);
    v17 = v24;
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v17, -1, -1);
    v18 = v14;
    a1 = v26;
    MEMORY[0x186DB563C](v18, -1, -1);
  }
  else
  {
    sub_183058AE0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  }

  MEMORY[0x1E0C80A78](v19);
  *(&v23 - 2) = v2;
  *(&v23 - 1) = (uint8_t *)a1;
  v21 = v20 + 4;
  os_unfair_lock_lock(v20 + 4);
  sub_183273D58(&v27);
  v22 = v27;
  os_unfair_lock_unlock(v21);
  if (v22)
  {
    swift_retain();
    sub_1832AA304();
    swift_release_n();
  }
}

void sub_183269060()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  __int16 v32;
  uint64_t v33;

  v2 = v0;
  v3 = (os_unfair_lock_s *)(v0[15] + 16);
  os_unfair_lock_lock(v3);
  if (!v0[20])
  {
    v4 = v0[6];
    if (v4)
    {
      v5 = v0[9];
      v6 = v0[10];
      v7 = v0[11];
      v8 = v2[12];
      v9 = v2[13];
      v10 = v2[7];
      v11 = v2[8];
      v13 = v2[4];
      v12 = v2[5];
      v14 = v2[2];
      v15 = v2[3];
      v20[0] = v14 & 1;
      v21 = v15;
      v22 = v13;
      v23 = v12;
      v24 = v4;
      v25 = v10;
      v26 = v11;
      v27 = v5;
      v28 = v6;
      v29 = v7;
      v30 = v8;
      v31 = v9 & 1;
      v32 = v9 >> 8;
      sub_183275B40(v14, v15, v13, v12, v4, v10, v11, v5, v6, v7, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1832506C0(v5);
      v33 = v7;
      sub_183261798(v7, v8);
      swift_retain();
      sub_18327964C(v20);
      if (v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v17 = v16;
        v18 = swift_allocObject();
        swift_weakInit();
        swift_retain();
        sub_183061488((uint64_t)sub_183275BC4);
        NWListener.newConnectionHandler.setter((uint64_t)sub_183275BC4, v18);
        swift_release_n();
        v19 = swift_allocObject();
        swift_weakInit();
        swift_retain();
        sub_183061488((uint64_t)sub_183275BCC);
        NWListener.stateUpdateHandler.setter((uint64_t)sub_183275BCC, v19);
        swift_release_n();
        v2[20] = v17;
        swift_retain();
        swift_release();
        NWListener.start(queue:)((void *)v2[23]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
      }
      swift_release();
      sub_183253844(v5);
      sub_183084848(v33, v8);
    }
  }
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1832692F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_183269310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 48) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  *v3 = v0;
  v3[1] = sub_1832693CC;
  return sub_183B9219C();
}

uint64_t sub_1832693CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_183269440()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183269474(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  os_unfair_lock_s *v14;
  uint64_t v16;

  v11 = type metadata accessor for NWActorSystem.ServerRole();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(a1);
  v14 = (os_unfair_lock_s *)(*(_QWORD *)(a4 + 120) + 16);
  os_unfair_lock_lock(v14);
  sub_1832712D0(a4, a5, a6, (uint64_t)v13);
  os_unfair_lock_unlock(v14);
  return sub_183058AE0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
}

void sub_18326956C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1EDCDC548 != -1)
    swift_once();
  v4 = sub_183B915CC();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EDCDD2B8);
  swift_bridgeObjectRetain_n();
  v5 = sub_183B915B4();
  v6 = sub_183B91C80();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v9 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_183273D70(a1, a2, &v9);
    sub_183B91D1C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_182FBE000, v5, v6, "Publish task was canceled for %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v8, -1, -1);
    MEMORY[0x186DB563C](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_183269728(a1, a2, 0);
}

void sub_183269728(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD418);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NWActorSystem.ServerRole();
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v40 = (uint64_t)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v41 = (uint64_t)v39 - v15;
  if (qword_1EDCDC548 != -1)
    swift_once();
  v16 = sub_183B915CC();
  v17 = __swift_project_value_buffer(v16, (uint64_t)qword_1EDCDD2B8);
  swift_bridgeObjectRetain_n();
  v18 = sub_183B915B4();
  v19 = sub_183B91C80();
  v20 = os_log_type_enabled(v18, v19);
  v45 = a1;
  if (v20)
  {
    v39[0] = v8;
    v21 = swift_slowAlloc();
    v39[1] = v17;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc();
    v48 = v23;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain();
    v47 = sub_183273D70(v45, a2, &v48);
    v8 = (char *)v39[0];
    a1 = v45;
    sub_183B91D1C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_182FBE000, v18, v19, "Cleaning up server for %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v23, -1, -1);
    MEMORY[0x186DB563C](v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v24 = v46;
  v25 = (os_unfair_lock_s *)(*(_QWORD *)(v46 + 120) + 16);
  os_unfair_lock_lock(v25);
  sub_183272FF8(v24, a1, a2, (uint64_t)v11);
  os_unfair_lock_unlock(v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v11, 1, v44) == 1)
  {
    sub_1830620D4((uint64_t)v11, &qword_1EDCDD418);
    v26 = sub_183B915B4();
    v27 = sub_183B91C74();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_182FBE000, v26, v27, "Attempting to clean up for untracked actor", v28, 2u);
      MEMORY[0x186DB563C](v28, -1, -1);
    }

  }
  else
  {
    v29 = (uint64_t)v11;
    v30 = v41;
    sub_183058EC4(v29, v41, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    v31 = v40;
    sub_183058C44(v30, v40, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_release();
      v32 = &qword_1EDCDD3C8;
    }
    else
    {
      swift_unknownObjectRelease();
      v32 = &qword_1EDCDD3C0;
    }
    v33 = __swift_instantiateConcreteTypeFromMangledName(v32);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v31 + *(int *)(v33 + 48), v5);
    sub_183273154(v45, a2);
    if (v42)
    {
      v48 = (uint64_t)v42;
      v34 = v42;
      sub_183B919E0();
    }
    else
    {
      sub_183B919EC();
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_183058AE0(v30, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
  }
  os_unfair_lock_lock(v25);
  sub_1832BA0F8((_QWORD *(*)(uint64_t *__return_ptr))sub_183275A40, &v48);
  os_unfair_lock_unlock(v25);
  if (v48 == 1)
  {
    v35 = sub_183B915B4();
    v36 = sub_183B91C80();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_182FBE000, v35, v36, "No more actors published, canceling listener", v37, 2u);
      MEMORY[0x186DB563C](v37, -1, -1);
    }

    os_unfair_lock_lock(v25);
    sub_183275A94(&v48);
    v38 = v48;
    os_unfair_lock_unlock(v25);
    if (v38)
    {
      nw_listener_cancel(*(nw_listener_t *)(v38 + 24));
      swift_release();
    }
  }
}

void NWActorSystem.endpoint<A>(for:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 120) + 16);
  os_unfair_lock_lock(v4);
  sub_18327434C(&v8);
  if (v2)
  {
    os_unfair_lock_unlock(v4);
    __break(1u);
  }
  else
  {
    v5 = v8;
    os_unfair_lock_unlock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 16);
      swift_retain();
      swift_release();
      sub_183058C44(v6 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      swift_release();
    }
    else
    {
      sub_183274368();
      swift_allocError();
      *(_OWORD *)v7 = xmmword_183BA0820;
      *(_QWORD *)(v7 + 16) = 0xB000000000000000;
      swift_willThrow();
    }
  }
}

uint64_t sub_183269D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD v12[4];

  v6 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v6);
  v8 = (_QWORD *)((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12[1] = a2;
  sub_183B91DDC();
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) && (sub_1832F687C(v8), (v9 & 1) != 0))
    v10 = swift_retain();
  else
    v10 = 0;
  *a3 = v10;
  swift_endAccess();
  return sub_183058AE0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
}

void NWActorSystem.resolve<A>(id:as:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  _QWORD v29[5];
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = (uint64_t)v4;
  v31 = a3;
  v9 = *v4;
  v29[3] = a2;
  v29[4] = v9;
  v10 = type metadata accessor for NWActorID();
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v29 - v14;
  if (qword_1EDCDC548 != -1)
    swift_once();
  v16 = sub_183B915CC();
  __swift_project_value_buffer(v16, (uint64_t)qword_1EDCDD2B8);
  v30 = a1;
  sub_183058C44((uint64_t)a1, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  v17 = sub_183B915B4();
  v18 = sub_183B91C68();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v29[1] = a4;
    v21 = v20;
    v33 = v20;
    *(_DWORD *)v19 = 136315394;
    v29[2] = v5;
    sub_183058C44((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v22 = sub_183B9174C();
    v32 = sub_183273D70(v22, v23, &v33);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    *(_WORD *)(v19 + 12) = 2080;
    v24 = sub_183B92370();
    v32 = sub_183273D70(v24, v25, &v33);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v17, v18, "Resolving %s to %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v21, -1, -1);
    MEMORY[0x186DB563C](v19, -1, -1);
  }
  else
  {
    sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  }

  v26 = *(_QWORD *)(v6 + 120);
  v27 = v31;
  sub_183B91CF8();
  v28 = (os_unfair_lock_s *)(v26 + ((*(unsigned int *)(*(_QWORD *)v26 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v28);
  sub_18326A164(v6, v30, v27, &v33);
  os_unfair_lock_unlock(v28);
}

void sub_18326A164(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44[3];
  uint64_t v45;

  v5 = v4;
  v10 = type metadata accessor for NWActorID();
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v39 - v14;
  swift_beginAccess();
  v16 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(v16 + 16) && (v17 = sub_1832F687C(a2), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
    swift_endAccess();
    v20 = MEMORY[0x186DB5714](v19 + 16);
    if (v20)
    {
      v21 = *(_QWORD *)(v19 + 24);
      v44[0] = v20;
      v44[1] = v21;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD420);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_release();
        *a4 = v45;
        return;
      }
    }
    else
    {
      swift_retain();
    }
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD450);
    sub_183274368();
    swift_allocError();
    *v38 = v37;
    v38[1] = a3;
    v38[2] = 0;
    swift_willThrow();
    swift_release();
  }
  else
  {
    swift_endAccess();
    if (qword_1EDCDC560 != -1)
      swift_once();
    sub_183B92358();
    v22 = v44[0];
    if (v44[0])
    {
      if (qword_1EDCDC548 != -1)
        swift_once();
      v23 = sub_183B915CC();
      __swift_project_value_buffer(v23, (uint64_t)qword_1EDCDD2B8);
      sub_183058C44((uint64_t)a2, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      swift_retain_n();
      v24 = sub_183B915B4();
      v25 = sub_183B91C80();
      v42 = v25;
      v26 = os_log_type_enabled(v24, v25);
      v43 = a4;
      if (v26)
      {
        v27 = swift_slowAlloc();
        v41 = v4;
        v28 = v27;
        v40 = swift_slowAlloc();
        v44[0] = v40;
        *(_DWORD *)v28 = 136315394;
        sub_183058C44((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        v29 = sub_183B9174C();
        v45 = sub_183273D70(v29, v30, v44);
        sub_183B91D1C();
        swift_bridgeObjectRelease();
        sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        *(_WORD *)(v28 + 12) = 2080;
        v45 = v22;
        _s15ActorConnectionCMa();
        swift_retain();
        v31 = sub_183B9174C();
        v45 = sub_183273D70(v31, v32, v44);
        sub_183B91D1C();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_182FBE000, v24, (os_log_type_t)v42, "Associating actor %s to %s", (uint8_t *)v28, 0x16u);
        v33 = v40;
        swift_arrayDestroy();
        MEMORY[0x186DB563C](v33, -1, -1);
        v34 = v28;
        v5 = v41;
        MEMORY[0x186DB563C](v34, -1, -1);
      }
      else
      {
        sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        swift_release_n();
      }

      v35 = (os_unfair_lock_s *)(*(_QWORD *)(v22 + 72) + 16);
      os_unfair_lock_lock(v35);
      sub_1832AD93C(v22, (uint64_t)a2);
      os_unfair_lock_unlock(v35);
      if (v5)
      {
        __break(1u);
      }
      else
      {
        sub_183058C44((uint64_t)a2, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        swift_beginAccess();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v45 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = 0x8000000000000000;
        sub_1832FA1CC(v22, v13, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(a1 + 168) = v45;
        swift_bridgeObjectRelease();
        sub_183058AE0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        swift_endAccess();
        swift_release();
        *v43 = 0;
      }
    }
    else
    {
      *a4 = 0;
    }
  }
}

uint64_t sub_18326A638()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_183B914AC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD448);
  swift_allocObject();
  result = sub_183B9234C();
  qword_1EDCDD2F8 = result;
  return result;
}

uint64_t NWActorSystem.assignID<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_183B914AC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v13 - v10;
  if (qword_1EDCDC568 != -1)
    swift_once();
  sub_183B92358();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1830620D4((uint64_t)v4, &qword_1EDCDD200);
    sub_183B914A0();
    return sub_1832BE72C((uint64_t)v9, a1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    sub_1832BE72C((uint64_t)v9, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
}

void NWActorSystem.actorReady<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  os_unfair_lock_s *v7;

  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 120) + 16);
  os_unfair_lock_lock(v7);
  sub_18326A8F4(v3, a1, a2, a3);
  os_unfair_lock_unlock(v7);
}

uint64_t sub_18326A8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v13[4];

  v7 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v7);
  v9 = (_QWORD *)((char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13[1] = a2;
  sub_183B91DDC();
  type metadata accessor for WeakDistributedActor();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v10 + 24) = a4;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0x8000000000000000;
  sub_1832FA1D8(v10, v9, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 128) = v13[0];
  swift_bridgeObjectRelease();
  sub_183058AE0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  return swift_endAccess();
}

uint64_t sub_18326AA30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3F0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  sub_1832F7254(a2);
  swift_endAccess();
  swift_release();
  sub_183058C44((uint64_t)a2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  v12 = type metadata accessor for NWActorDiscoveryMechanism(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
  swift_beginAccess();
  sub_1832A5E40((uint64_t)v8, v11);
  swift_endAccess();
  swift_beginAccess();
  v13 = sub_1832F734C(a2);
  swift_endAccess();
  sub_1830630AC(v13);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 128) + 16))
  {
    if (*(_QWORD *)(a1 + 152))
    {
      swift_retain();
      sub_18328CC7C();
      swift_release();
    }
    *(_QWORD *)(a1 + 152) = 0;
    swift_release();
  }
  swift_beginAccess();
  *a3 = sub_1832F7240(a2);
  return swift_endAccess();
}

Network::NWActorSystemInvocationEncoder __swiftcall NWActorSystem.makeInvocationEncoder()()
{
  _QWORD *v0;
  uint64_t v1;
  Network::NWActorSystemInvocationEncoder result;

  v1 = MEMORY[0x1E0DEE9D8];
  *v0 = MEMORY[0x1E0DEE9D8];
  v0[1] = v1;
  return result;
}

uint64_t NWActorSystem.remoteCall<A, B, C>(on:target:invocation:throwing:returning:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9[19] = v16;
  v9[20] = v8;
  v9[17] = v14;
  v9[18] = v15;
  v9[15] = a7;
  v9[16] = a8;
  v9[13] = a3;
  v9[14] = a4;
  v9[11] = a1;
  v9[12] = a2;
  v9[21] = swift_conformsToProtocol();
  v9[22] = swift_conformsToProtocol();
  v10 = sub_183B91578();
  v9[23] = v10;
  v9[24] = *(_QWORD *)(v10 - 8);
  v9[25] = swift_task_alloc();
  v9[26] = swift_task_alloc();
  v9[27] = swift_task_alloc();
  v9[28] = swift_task_alloc();
  v11 = sub_183B91548();
  v9[29] = v11;
  v9[30] = *(_QWORD *)(v11 - 8);
  v9[31] = swift_task_alloc();
  v9[32] = swift_task_alloc();
  v9[33] = swift_task_alloc();
  v9[34] = swift_task_alloc();
  v9[35] = swift_task_alloc();
  v9[36] = swift_task_alloc();
  v9[37] = type metadata accessor for NWActorID();
  v9[38] = swift_task_alloc();
  v9[39] = swift_task_alloc();
  v12 = sub_183B914F4();
  v9[40] = v12;
  v9[41] = *(_QWORD *)(v12 - 8);
  v9[42] = swift_task_alloc();
  v9[43] = swift_task_alloc();
  v9[44] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18326ADE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_signpost_type_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  os_signpost_id_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  _QWORD *v47;
  uint64_t v49;
  os_signpost_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t type[8];
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;

  if (qword_1EDCDC548 != -1)
    swift_once();
  v1 = v0[43];
  v2 = v0[44];
  v3 = v0[40];
  v4 = v0[41];
  v5 = v0[13];
  v6 = sub_183B915CC();
  __swift_project_value_buffer(v6, (uint64_t)qword_1EDCDD2B8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v5, v3);
  v7(v1, v5, v3);
  swift_unknownObjectRetain();
  v8 = sub_183B915B4();
  v9 = sub_183B91C80();
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[43];
  v12 = v0[44];
  v14 = v0[40];
  v13 = v0[41];
  if (v10)
  {
    v15 = v0[39];
    v57 = v0[43];
    v16 = v0[12];
    v55 = v7;
    v17 = swift_slowAlloc();
    v53 = swift_slowAlloc();
    v59 = v53;
    *(_DWORD *)v17 = 136315650;
    v0[7] = v16;
    sub_183B91DDC();
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    v60 = 0x49726F746341574ELL;
    v61 = 0xEA00000000002844;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B914AC();
    sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183058AE0(v15, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v0[8] = sub_183273D70(0x49726F746341574ELL, 0xEA00000000002844, &v59);
    sub_183B91D1C();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    sub_183275948(&qword_1EDCDD368, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEFB40], MEMORY[0x1E0DEFB48]);
    v18 = sub_183B92088();
    v0[9] = sub_183273D70(v18, v19, &v59);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v12, v14);
    *(_WORD *)(v17 + 22) = 2080;
    v21 = v57;
    v22 = sub_183B914E8();
    v0[10] = sub_183273D70(v22, v23, &v59);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    v58 = v20;
    v20(v21, v14);
    _os_log_impl(&dword_182FBE000, v8, v9, "Call to: %s, target: %s, target.identifier: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v53, -1, -1);
    v24 = v17;
    v7 = v55;
    MEMORY[0x186DB563C](v24, -1, -1);

  }
  else
  {
    swift_unknownObjectRelease();
    v25 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v25(v12, v14);
    v58 = v25;
    v25(v11, v14);

  }
  if (qword_1EDCDC550 != -1)
    swift_once();
  v26 = v0[42];
  v27 = v0[40];
  v28 = v0[13];
  v29 = sub_183B9156C();
  v0[45] = __swift_project_value_buffer(v29, (uint64_t)qword_1EDCDD2D0);
  sub_183B91560();
  sub_183B91524();
  v7(v26, v28, v27);
  swift_unknownObjectRetain_n();
  v30 = sub_183B91560();
  v31 = sub_183B91CD4();
  v32 = sub_183B91CEC();
  v33 = v0[42];
  v34 = v0[40];
  if ((v32 & 1) != 0)
  {
    v35 = v0[39];
    v51 = v0[35];
    v56 = v0[30];
    *(_QWORD *)type = v0[29];
    v49 = v0[12];
    (*(void (**)(void))(v56 + 16))();
    v50 = v31;
    v36 = swift_slowAlloc();
    v52 = swift_slowAlloc();
    v59 = v52;
    *(_DWORD *)v36 = 136315394;
    v37 = sub_183B914E8();
    v0[4] = sub_183273D70(v37, v38, &v59);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    v58(v33, v34);
    *(_WORD *)(v36 + 12) = 2080;
    v0[5] = v49;
    sub_183B91DDC();
    swift_unknownObjectRelease();
    v60 = 0;
    v61 = 0xE000000000000000;
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    v60 = 0x49726F746341574ELL;
    v61 = 0xEA00000000002844;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B914AC();
    sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    v39 = v60;
    v40 = v61;
    sub_183058AE0(v35, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v0[6] = sub_183273D70(v39, v40, &v59);
    sub_183B91D1C();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v41 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v30, v50, v41, "remoteCall", "Call to %s, actor: %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v52, -1, -1);
    MEMORY[0x186DB563C](v36, -1, -1);

    (*(void (**)(uint64_t, os_log_type_t *))(v56 + 8))(v51, *(os_log_type_t **)type);
  }
  else
  {

    swift_unknownObjectRelease();
    v58(v33, v34);
    swift_unknownObjectRelease();
  }
  v43 = v0[35];
  v42 = v0[36];
  v44 = v0[29];
  v45 = v0[12];
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[30] + 16);
  v0[46] = v46;
  v46(v43, v42, v44);
  sub_183B9159C();
  swift_allocObject();
  v0[47] = sub_183B91590();
  v0[2] = v45;
  sub_183B91DDC();
  v47 = (_QWORD *)swift_task_alloc();
  v0[48] = v47;
  *v47 = v0;
  v47[1] = sub_18326B5D4;
  return sub_18326C1BC(v0[38]);
}

uint64_t sub_18326B5D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;

  v3 = *v2;
  v3[49] = a1;
  v3[50] = v1;
  swift_task_dealloc();
  sub_183058AE0(v3[38], (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  return swift_task_switch();
}

uint64_t sub_18326B650()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_signpost_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  os_signpost_id_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 400);
  sub_183B91AE8();
  if (v1)
  {
    swift_release();
    v2 = sub_183B91560();
    sub_183B91584();
    v3 = sub_183B91CC8();
    if ((sub_183B91CEC() & 1) != 0)
    {
      v4 = *(_QWORD *)(v0 + 208);
      v6 = *(_QWORD *)(v0 + 184);
      v5 = *(_QWORD *)(v0 + 192);
      swift_retain();
      sub_183B915A8();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == *MEMORY[0x1E0DF2190])
      {
        v7 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 184));
        v7 = "";
      }
      v18 = (uint64_t *)(v0 + 280);
      v21 = *(_QWORD *)(v0 + 256);
      v22 = *(_QWORD *)(v0 + 232);
      v23 = *(_QWORD *)(v0 + 240);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 368))(*(_QWORD *)(v0 + 280), v21, v22);
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      v25 = sub_183B91530();
      _os_signpost_emit_with_name_impl(&dword_182FBE000, v2, v3, v25, "remoteCall", v7, v24, 2u);
      MEMORY[0x186DB563C](v24, -1, -1);

      v20 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v20(v21, v22);
    }
    else
    {
      v18 = (uint64_t *)(v0 + 256);
      v19 = *(_QWORD *)(v0 + 240);

      v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    }
    v26 = *(_QWORD *)(v0 + 288);
    v27 = *(_QWORD *)(v0 + 232);
    v20(*v18, v27);
    swift_release();
    v20(v26, v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_1EDCDC560 != -1)
      swift_once();
    v8 = *(_QWORD *)(v0 + 392);
    v10 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v0 + 24) = v8;
    v12 = swift_task_alloc();
    *(_QWORD *)(v0 + 408) = v12;
    v13 = *(_OWORD *)(v0 + 136);
    v14 = *(_OWORD *)(v0 + 168);
    v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v12 + 32) = v13;
    *(_QWORD *)(v12 + 48) = v10;
    *(_OWORD *)(v12 + 56) = v14;
    *(_QWORD *)(v12 + 72) = v8;
    *(_QWORD *)(v12 + 80) = v9;
    *(_OWORD *)(v12 + 88) = v15;
    *(_QWORD *)(v12 + 104) = v11;
    swift_retain();
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v16;
    *v16 = v0;
    v16[1] = sub_18326B9E4;
    return sub_183B92364();
  }
}

uint64_t sub_18326B9E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 424) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18326BA5C()
{
  uint64_t v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_release();
  v1 = sub_183B91560();
  sub_183B91584();
  v2 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 224);
    v4 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 192);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v3, v4) == *MEMORY[0x1E0DF2190])
    {
      v6 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 184));
      v6 = "";
    }
    v7 = (uint64_t *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 272);
    v11 = *(_QWORD *)(v0 + 232);
    v12 = *(_QWORD *)(v0 + 240);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 368))(*(_QWORD *)(v0 + 280), v10, v11);
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v1, v2, v14, "remoteCall", v6, v13, 2u);
    MEMORY[0x186DB563C](v13, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  else
  {
    v7 = (uint64_t *)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 240);

    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }
  v15 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 232);
  v9(*v7, v16);
  swift_release();
  v9(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326BCCC()
{
  uint64_t v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_183B91560();
  sub_183B91584();
  v2 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 192);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v3, v4) == *MEMORY[0x1E0DF2190])
    {
      v6 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 184));
      v6 = "";
    }
    v7 = (uint64_t *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 264);
    v12 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 240);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 368))(*(_QWORD *)(v0 + 280), v10, v12);
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v1, v2, v14, "remoteCall", v6, v13, 2u);
    MEMORY[0x186DB563C](v13, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v9(v10, v12);
  }
  else
  {
    v7 = (uint64_t *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 240);

    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }
  v15 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 232);
  v9(*v7, v16);
  swift_release();
  v9(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326BF40()
{
  uint64_t v0;
  uint64_t *v1;
  NSObject *v2;
  os_signpost_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (uint64_t *)(v0 + 248);
  swift_release();
  v2 = sub_183B91560();
  sub_183B91584();
  v3 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 192);
    v4 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 184);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == *MEMORY[0x1E0DF2190])
    {
      v7 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
      v7 = "";
    }
    v1 = (uint64_t *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 232);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 368))(*(_QWORD *)(v0 + 280), v11, v12);
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v2, v3, v14, "remoteCall", v7, v13, 2u);
    MEMORY[0x186DB563C](v13, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v9(v11, v12);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 240);

    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }
  v15 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 232);
  v9(*v1, v16);
  swift_release();
  v9(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326C1BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[10] = a1;
  v2[11] = v1;
  v2[12] = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  v2[13] = swift_task_alloc();
  type metadata accessor for NWEndpoint();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = type metadata accessor for NWActorID();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v3 = type metadata accessor for NWActorDiscoveryMechanism(0);
  v2[22] = v3;
  v2[23] = *(_QWORD *)(v3 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18326C2D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  os_unfair_lock_s *v44;
  os_unfair_lock_s *v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  NSObject **v48;
  os_unfair_lock_s *v49;
  unint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;

  v1 = v0;
  v2 = v0;
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v3 = v2 + 80;
  v6 = *(os_unfair_lock_s **)(v5 + 120);
  *(_QWORD *)(v3 + 128) = v6;
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v4;
  v8 = swift_task_alloc();
  *(_QWORD *)(v8 + 16) = sub_1832756DC;
  *(_QWORD *)(v8 + 24) = v7;
  os_unfair_lock_lock(v6 + 4);
  (*(void (**)(unint64_t *__return_ptr))(v8 + 16))(&v70);
  v9 = v70;
  os_unfair_lock_unlock(v6 + 4);
  swift_task_dealloc();
  swift_task_dealloc();
  if (v9)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(unint64_t))(v1 + 8))(v9);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 88);
    swift_beginAccess();
    v12 = *(_QWORD *)(v11 + 144);
    if (*(_QWORD *)(v12 + 16) && (v13 = sub_1832F687C(*(_QWORD **)v3), (v14 & 1) != 0))
    {
      v16 = *(_QWORD *)(v1 + 192);
      v15 = *(_QWORD *)(v1 + 200);
      sub_183058C44(*(_QWORD *)(v12 + 56) + *(_QWORD *)(*(_QWORD *)(v1 + 184) + 72) * v13, v16, type metadata accessor for NWActorDiscoveryMechanism);
      sub_183058EC4(v16, v15, type metadata accessor for NWActorDiscoveryMechanism);
      swift_endAccess();
      if (qword_1EDCDC548 != -1)
        swift_once();
      v17 = *(_QWORD *)(v1 + 168);
      v18 = *(_QWORD *)(v1 + 80);
      v19 = sub_183B915CC();
      *(_QWORD *)(v1 + 216) = __swift_project_value_buffer(v19, (uint64_t)qword_1EDCDD2B8);
      sub_183058C44(v18, v17, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      v20 = sub_183B915B4();
      v21 = sub_183B91C80();
      v22 = os_log_type_enabled(v20, v21);
      v23 = *(_QWORD *)(v1 + 168);
      if (v22)
      {
        v24 = v1;
        v25 = *(_QWORD *)(v1 + 160);
        type = v21;
        v26 = (uint8_t *)swift_slowAlloc();
        v66 = swift_slowAlloc();
        v69 = v66;
        *(_DWORD *)v26 = 136315138;
        sub_183058C44(v23, v25, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        v70 = 0;
        v71 = 0xE000000000000000;
        sub_183B91DB8();
        swift_bridgeObjectRelease();
        v70 = 0x49726F746341574ELL;
        v71 = 0xEA00000000002844;
        swift_bridgeObjectRetain();
        sub_183B917F4();
        swift_bridgeObjectRelease();
        sub_183B917F4();
        sub_183B914AC();
        sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        sub_183B92088();
        sub_183B917F4();
        swift_bridgeObjectRelease();
        sub_183B917F4();
        v27 = v70;
        v28 = v71;
        v29 = v25;
        v1 = v24;
        sub_183058AE0(v29, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        *(_QWORD *)(v24 + 72) = sub_183273D70(v27, v28, &v69);
        sub_183B91D1C();
        swift_bridgeObjectRelease();
        sub_183058AE0(v23, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
        _os_log_impl(&dword_182FBE000, v20, type, "Establishing connection for %s", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186DB563C](v66, -1, -1);
        MEMORY[0x186DB563C](v26, -1, -1);
      }
      else
      {
        sub_183058AE0(*(_QWORD *)(v1 + 168), (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      }

      sub_183058C44(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 104), type metadata accessor for NWActorDiscoveryMechanism.Target);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v32 = *(_QWORD *)(v1 + 104);
      if (EnumCaseMultiPayload == 1)
      {
        v33 = *(_QWORD *)(v1 + 200);
        v34 = *(_QWORD *)(v1 + 176);
        sub_183058EC4(v32, *(_QWORD *)(v1 + 128), (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
        v35 = *(_QWORD *)(*(_QWORD *)(v33 + *(int *)(v34 + 28)) + 16);
        v36 = (_QWORD *)(v35 + 16);
        v37 = (os_unfair_lock_s *)(v35 + 24);
        swift_retain();
        os_unfair_lock_lock(v37);
        sub_183304A98(v36, (uint64_t *)&v70);
        os_unfair_lock_unlock(v37);
        v38 = v70;
        *(_QWORD *)(v1 + 264) = v70;
        swift_release();
        if (qword_1EDCDC5B0 != -1)
          swift_once();
        v39 = qword_1EDCF2A58;
        type metadata accessor for NWProtocolFramer.Options();
        v40 = swift_allocObject();
        *(_QWORD *)(v1 + 272) = v40;
        *(_QWORD *)(v40 + 16) = nw_framer_create_options(*(nw_protocol_definition_t *)(v39 + 32));
        v41 = sub_183B915B4();
        v42 = sub_183B91C80();
        if (os_log_type_enabled(v41, v42))
        {
          v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v43 = 0;
          _os_log_impl(&dword_182FBE000, v41, v42, "Inserting Actor WireProtocol framer", v43, 2u);
          MEMORY[0x186DB563C](v43, -1, -1);
        }

        v44 = *(os_unfair_lock_s **)(v38 + 16);
        v45 = v44 + 4;
        v46 = v44 + 6;
        os_unfair_lock_lock(v44 + 6);
        sub_1831EF6F0(v45, (uint64_t *)&v70);
        os_unfair_lock_unlock(v46);
        v47 = *(_QWORD *)(v70 + 16);
        v48 = (NSObject **)(v47 + 16);
        v49 = (os_unfair_lock_s *)(v47 + 24);
        swift_retain();
        os_unfair_lock_lock(v49);
        sub_1833030A8(v48, &v70);
        os_unfair_lock_unlock(v49);
        if (v70 >> 62
          && (swift_bridgeObjectRetain(), v65 = sub_183B91F68(), result = swift_bridgeObjectRelease(), v65 < 0))
        {
          __break(1u);
        }
        else
        {
          sub_18327377C(0, 0, v40);
          v50 = v70;
          v51 = swift_task_alloc();
          *(_QWORD *)(v51 + 16) = v50;
          os_unfair_lock_lock(v49);
          sub_1831EF7BC(v48, *(_QWORD *)(v51 + 16));
          os_unfair_lock_unlock(v49);
          v52 = *(os_unfair_lock_s **)(v1 + 208);
          v53 = *(_QWORD *)(v1 + 128);
          v54 = *(_QWORD *)(v1 + 112);
          v55 = *(_QWORD *)(v1 + 88);
          *(_QWORD *)typea = *(_QWORD *)(v1 + 80);
          swift_release();
          swift_bridgeObjectRelease();
          v52 += 4;
          swift_task_dealloc();
          sub_183058C44(v53, v54, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
          type metadata accessor for NWConnection(0);
          swift_allocObject();
          swift_retain();
          sub_1832D6584(v54, v38);
          v57 = v56;
          *(_QWORD *)(v1 + 280) = v56;
          swift_release();
          _s15ActorConnectionCMa();
          swift_allocObject();
          v58 = (_QWORD *)sub_1832AB7C4(v57);
          *(_QWORD *)(v1 + 288) = v58;
          swift_retain();
          sub_1832718B0(v58);
          v59 = (_QWORD *)swift_task_alloc();
          v59[2] = v55;
          v59[3] = *(_QWORD *)typea;
          v59[4] = v58;
          v60 = swift_task_alloc();
          *(_QWORD *)(v60 + 16) = sub_1832756F4;
          *(_QWORD *)(v60 + 24) = v59;
          os_unfair_lock_lock(v52);
          (*(void (**)(uint64_t))(v60 + 16))(v61);
          os_unfair_lock_unlock(v52);
          swift_task_dealloc();
          swift_task_dealloc();
          v64 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v1 + 296) = v64;
          *v64 = v1;
          v64[1] = sub_18326D268;
          return sub_1832AAF94(*(_QWORD *)(v1 + 80));
        }
      }
      else
      {
        sub_183058AE0(v32, type metadata accessor for NWActorDiscoveryMechanism.Target);
        v62 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v1 + 224) = v62;
        *v62 = v1;
        v62[1] = sub_18326CC70;
        v63 = *(_QWORD *)(v1 + 88);
        v62[2] = *(_QWORD *)(v1 + 200);
        v62[3] = v63;
        return swift_task_switch();
      }
    }
    else
    {
      swift_endAccess();
      sub_183274368();
      swift_allocError();
      *v30 = 0xD000000000000061;
      v30[1] = 0x8000000183C70190;
      v30[2] = 0x4000000000000000;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  return result;
}

uint64_t sub_18326CC70()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18326CCD4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 152);
  *(_QWORD *)(v0 + 240) = v1;
  if (v1)
  {
    swift_retain();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 248) = v2;
    *v2 = v0;
    v2[1] = sub_18326CE2C;
    return sub_18328D634(*(_QWORD *)(v0 + 120));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 200);
    sub_183274368();
    swift_allocError();
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0xB000000000000000;
    swift_willThrow();
    sub_183058AE0(v4, type metadata accessor for NWActorDiscoveryMechanism);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18326CE2C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_18326CE90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  NSObject **v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];

  swift_release();
  v1 = v0[32];
  v2 = v0[25];
  v3 = v0[22];
  sub_183058EC4(v0[15], v0[16], (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(v3 + 28)) + 16);
  v5 = (_QWORD *)(v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + 24);
  swift_retain();
  os_unfair_lock_lock(v6);
  sub_183304A98(v5, v33);
  os_unfair_lock_unlock(v6);
  if (!v1)
  {
    v7 = v33[0];
    v0[33] = v33[0];
    swift_release();
    if (qword_1EDCDC5B0 != -1)
      swift_once();
    v8 = qword_1EDCF2A58;
    type metadata accessor for NWProtocolFramer.Options();
    v9 = swift_allocObject();
    v0[34] = v9;
    *(_QWORD *)(v9 + 16) = nw_framer_create_options(*(nw_protocol_definition_t *)(v8 + 32));
    v10 = sub_183B915B4();
    v11 = sub_183B91C80();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_182FBE000, v10, v11, "Inserting Actor WireProtocol framer", v12, 2u);
      MEMORY[0x186DB563C](v12, -1, -1);
    }

    v13 = *(os_unfair_lock_s **)(v7 + 16);
    v14 = v13 + 4;
    v15 = v13 + 6;
    os_unfair_lock_lock(v13 + 6);
    sub_1831EF6F0(v14, v33);
    os_unfair_lock_unlock(v15);
    v16 = *(_QWORD *)(v33[0] + 16);
    v17 = (NSObject **)(v16 + 16);
    v18 = (os_unfair_lock_s *)(v16 + 24);
    swift_retain();
    os_unfair_lock_lock(v18);
    sub_1833030A8(v17, v33);
    os_unfair_lock_unlock(v18);
    if ((unint64_t)v33[0] >> 62
      && (swift_bridgeObjectRetain(), v31 = sub_183B91F68(), swift_bridgeObjectRelease(), v31 < 0))
    {
      __break(1u);
    }
    else
    {
      sub_18327377C(0, 0, v9);
      v19 = v33[0];
      v20 = swift_task_alloc();
      *(_QWORD *)(v20 + 16) = v19;
      os_unfair_lock_lock(v18);
      sub_1831EF7BC(v17, *(_QWORD *)(v20 + 16));
      os_unfair_lock_unlock(v18);
      v21 = (os_unfair_lock_s *)v0[26];
      v22 = v0[16];
      v23 = v0[14];
      v24 = v0[11];
      v32 = v0[10];
      swift_release();
      swift_bridgeObjectRelease();
      v21 += 4;
      swift_task_dealloc();
      sub_183058C44(v22, v23, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      type metadata accessor for NWConnection(0);
      swift_allocObject();
      swift_retain();
      sub_1832D6584(v23, v7);
      v26 = v25;
      v0[35] = v25;
      swift_release();
      _s15ActorConnectionCMa();
      swift_allocObject();
      v27 = (_QWORD *)sub_1832AB7C4(v26);
      v0[36] = (uint64_t)v27;
      swift_retain();
      sub_1832718B0(v27);
      v28 = (_QWORD *)swift_task_alloc();
      v28[2] = v24;
      v28[3] = v32;
      v28[4] = v27;
      v29 = swift_task_alloc();
      *(_QWORD *)(v29 + 16) = sub_1832756F4;
      *(_QWORD *)(v29 + 24) = v28;
      os_unfair_lock_lock(v21);
      (*(void (**)(void))(v29 + 16))();
      os_unfair_lock_unlock(v21);
      swift_task_dealloc();
      swift_task_dealloc();
      v30 = (_QWORD *)swift_task_alloc();
      v0[37] = (uint64_t)v30;
      *v30 = v0;
      v30[1] = sub_18326D268;
      sub_1832AAF94(v0[10]);
    }
  }
}

uint64_t sub_18326D268()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18326D2CC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];

  sub_183058C44(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 152), (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  v1 = sub_183B915B4();
  v2 = sub_183B91C80();
  if (os_log_type_enabled(v1, v2))
  {
    v13 = *(_QWORD *)(v0 + 200);
    v3 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 128);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v15[0] = v6;
    *(_DWORD *)v5 = 136315138;
    sub_183058C44(v3, v4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    v15[1] = 0x49726F746341574ELL;
    v15[2] = 0xEA00000000002844;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B914AC();
    sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183058AE0(v4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    *(_QWORD *)(v0 + 64) = sub_183273D70(0x49726F746341574ELL, 0xEA00000000002844, v15);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    sub_183058AE0(v3, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    _os_log_impl(&dword_182FBE000, v1, v2, "Established connection for %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v6, -1, -1);
    MEMORY[0x186DB563C](v5, -1, -1);

    swift_release();
    swift_release();
    swift_release();
    sub_183058AE0(v12, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v7 = v13;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 128);

    sub_183058AE0(v9, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    swift_release();
    swift_release();
    swift_release();
    sub_183058AE0(v10, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v7 = v8;
  }
  sub_183058AE0(v7, type metadata accessor for NWActorDiscoveryMechanism);
  v14 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_18326D664()
{
  uint64_t v0;

  sub_183058AE0(*(_QWORD *)(v0 + 200), type metadata accessor for NWActorDiscoveryMechanism);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326D728()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release();
  sub_183058AE0(v1, type metadata accessor for NWActorDiscoveryMechanism);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326D7F8()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  os_unfair_lock_s *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21[4];

  v1 = *(void **)(v0 + 304);
  sub_183058C44(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 144), (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  v2 = v1;
  v3 = v1;
  v4 = sub_183B915B4();
  v5 = sub_183B91C74();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 304);
    v7 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 144);
    v9 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v21[0] = v20;
    *(_DWORD *)v9 = 136315394;
    sub_183058C44(v8, v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    v21[1] = 0x49726F746341574ELL;
    v21[2] = 0xEA00000000002844;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B914AC();
    sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183058AE0(v7, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    *(_QWORD *)(v0 + 40) = sub_183273D70(0x49726F746341574ELL, 0xEA00000000002844, v21);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    sub_183058AE0(v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 48) = v6;
    v10 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
    v11 = sub_183B9174C();
    *(_QWORD *)(v0 + 56) = sub_183273D70(v11, v12, v21);
    sub_183B91D1C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_182FBE000, v4, v5, "Connection failed to establish to %s: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v20, -1, -1);
    MEMORY[0x186DB563C](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 304);
    sub_183058AE0(*(_QWORD *)(v0 + 144), (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);

  }
  v14 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 208) + 16);
  v15 = (int8x16_t *)swift_task_alloc();
  v15[1] = vextq_s8(*(int8x16_t *)(v0 + 80), *(int8x16_t *)(v0 + 80), 8uLL);
  v16 = swift_task_alloc();
  *(_QWORD *)(v16 + 16) = sub_183275710;
  *(_QWORD *)(v16 + 24) = v15;
  os_unfair_lock_lock(v14);
  (*(void (**)(void))(v16 + 16))();
  os_unfair_lock_unlock(v14);
  swift_task_dealloc();
  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc();
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_183058AE0(v18, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  sub_183058AE0(v17, type metadata accessor for NWActorDiscoveryMechanism);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326DC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v7 + 112) = v10;
  *(_QWORD *)(v7 + 120) = v11;
  *(_OWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 80) = a6;
  *(_QWORD *)(v7 + 88) = a7;
  *(_QWORD *)(v7 + 64) = a4;
  *(_QWORD *)(v7 + 72) = a5;
  *(_QWORD *)(v7 + 48) = a2;
  *(_QWORD *)(v7 + 56) = a3;
  *(_QWORD *)(v7 + 40) = a1;
  type metadata accessor for NWActorID();
  *(_QWORD *)(v7 + 128) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18326DCD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(uint64_t **)(v0 + 80);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 64);
  sub_183B91DDC();
  v2 = *v1;
  *(_QWORD *)(v0 + 136) = *v1;
  v3 = v1[1];
  *(_QWORD *)(v0 + 144) = v3;
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v4;
  *v4 = v0;
  v4[1] = sub_18326DD90;
  return sub_1832AA85C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 72), (_OWORD *)(v0 + 16), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 112));
}

uint64_t sub_18326DD90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 128);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183058AE0(v2, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_18326DE40()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWActorSystem.remoteCallVoid<A, B>(on:target:invocation:throwing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[17] = a7;
  v8[18] = v7;
  v8[15] = a3;
  v8[16] = a5;
  v8[13] = a1;
  v8[14] = a2;
  v9 = sub_183B91578();
  v8[19] = v9;
  v8[20] = *(_QWORD *)(v9 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  v8[23] = swift_task_alloc();
  v10 = sub_183B91548();
  v8[24] = v10;
  v8[25] = *(_QWORD *)(v10 - 8);
  v8[26] = swift_task_alloc();
  v8[27] = swift_task_alloc();
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = type metadata accessor for NWActorID();
  v8[32] = swift_task_alloc();
  v8[33] = swift_task_alloc();
  v8[34] = swift_task_alloc();
  v11 = sub_183B914F4();
  v8[35] = v11;
  v8[36] = *(_QWORD *)(v11 - 8);
  v8[37] = swift_task_alloc();
  v8[38] = swift_task_alloc();
  v8[39] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18326DFD8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_signpost_type_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  os_signpost_id_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  _QWORD *v46;
  uint64_t v48;
  os_signpost_type_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *log;
  os_log_t loga;
  uint64_t v54;
  os_log_type_t type[8];
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;

  if (qword_1EDCDC548 != -1)
    swift_once();
  v2 = v0[38];
  v1 = v0[39];
  v3 = v0[35];
  v4 = v0[36];
  v5 = v0[14];
  v6 = sub_183B915CC();
  __swift_project_value_buffer(v6, (uint64_t)qword_1EDCDD2B8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v1, v5, v3);
  v7(v2, v5, v3);
  swift_unknownObjectRetain();
  v8 = sub_183B915B4();
  v9 = sub_183B91C80();
  v10 = os_log_type_enabled(v8, v9);
  v12 = v0[38];
  v11 = v0[39];
  v14 = v0[35];
  v13 = v0[36];
  if (v10)
  {
    v50 = v0[38];
    log = v8;
    v15 = v0[34];
    v16 = v0[13];
    v56 = v7;
    v17 = swift_slowAlloc();
    v54 = swift_slowAlloc();
    v58 = v54;
    *(_DWORD *)v17 = 136315650;
    v0[9] = v16;
    sub_183B91DDC();
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    v59 = 0x49726F746341574ELL;
    v60 = 0xEA00000000002844;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B914AC();
    sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183058AE0(v15, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v0[10] = sub_183273D70(0x49726F746341574ELL, 0xEA00000000002844, &v58);
    sub_183B91D1C();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    sub_183275948(&qword_1EDCDD368, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEFB40], MEMORY[0x1E0DEFB48]);
    v18 = sub_183B92088();
    v0[11] = sub_183273D70(v18, v19, &v58);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v11, v14);
    *(_WORD *)(v17 + 22) = 2080;
    v21 = sub_183B914E8();
    v0[12] = sub_183273D70(v21, v22, &v58);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    v20(v50, v14);
    _os_log_impl(&dword_182FBE000, log, v9, "Call to: %s, target: %s, target.identifier: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v54, -1, -1);
    v23 = v17;
    v7 = v56;
    MEMORY[0x186DB563C](v23, -1, -1);

  }
  else
  {
    swift_unknownObjectRelease();
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v11, v14);
    v20(v12, v14);

  }
  if (qword_1EDCDC550 != -1)
    swift_once();
  v24 = v0[37];
  v25 = v0[35];
  v26 = v0[14];
  v27 = sub_183B9156C();
  v0[40] = __swift_project_value_buffer(v27, (uint64_t)qword_1EDCDD2D0);
  sub_183B91560();
  sub_183B91524();
  v7(v24, v26, v25);
  swift_unknownObjectRetain_n();
  v28 = sub_183B91560();
  v29 = sub_183B91CD4();
  v30 = sub_183B91CEC();
  v31 = v0[37];
  v32 = v0[35];
  if ((v30 & 1) != 0)
  {
    v33 = v0[34];
    v51 = v0[29];
    v57 = v0[25];
    *(_QWORD *)type = v0[24];
    v48 = v0[13];
    (*(void (**)(void))(v57 + 16))();
    v49 = v29;
    v34 = swift_slowAlloc();
    loga = (os_log_t)swift_slowAlloc();
    v58 = (uint64_t)loga;
    *(_DWORD *)v34 = 136315394;
    v35 = sub_183B914E8();
    v0[6] = sub_183273D70(v35, v36, &v58);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    v20(v31, v32);
    *(_WORD *)(v34 + 12) = 2080;
    v0[7] = v48;
    sub_183B91DDC();
    swift_unknownObjectRelease();
    v59 = 0;
    v60 = 0xE000000000000000;
    sub_183B91DB8();
    swift_bridgeObjectRelease();
    v59 = 0x49726F746341574ELL;
    v60 = 0xEA00000000002844;
    swift_bridgeObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B914AC();
    sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    sub_183B92088();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    v37 = v59;
    v38 = v60;
    sub_183058AE0(v33, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v0[8] = sub_183273D70(v37, v38, &v58);
    sub_183B91D1C();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v39 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v28, v49, v39, "remoteCallVoid", "Call to %s, actor: %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](loga, -1, -1);
    MEMORY[0x186DB563C](v34, -1, -1);

    (*(void (**)(uint64_t, os_log_type_t *))(v57 + 8))(v51, *(os_log_type_t **)type);
  }
  else
  {

    swift_unknownObjectRelease();
    v20(v31, v32);
    swift_unknownObjectRelease();
  }
  v41 = v0[29];
  v40 = v0[30];
  v42 = v0[24];
  v43 = v0[17];
  v44 = v0[13];
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[25] + 16);
  v0[41] = v45;
  v45(v41, v40, v42);
  sub_183B9159C();
  swift_allocObject();
  v0[42] = sub_183B91590();
  v0[5] = v44;
  v0[43] = *(_QWORD *)(v43 + 16);
  sub_183B91DDC();
  v46 = (_QWORD *)swift_task_alloc();
  v0[44] = v46;
  *v46 = v0;
  v46[1] = sub_18326E7CC;
  return sub_18326C1BC(v0[33]);
}

uint64_t sub_18326E7CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 264);
  *(_QWORD *)(v3 + 360) = a1;
  *(_QWORD *)(v3 + 368) = v1;
  swift_task_dealloc();
  sub_183058AE0(v4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  return swift_task_switch();
}

uint64_t sub_18326E84C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(uint64_t **)(v0 + 120);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 104);
  sub_183B91DDC();
  v2 = *v1;
  *(_QWORD *)(v0 + 376) = *v1;
  v3 = v1[1];
  *(_QWORD *)(v0 + 384) = v3;
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 392) = v4;
  *v4 = v0;
  v4[1] = sub_18326E8F4;
  return sub_1832AAAE8(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 112), (_OWORD *)(v0 + 16));
}

uint64_t sub_18326E8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183058AE0(v2, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  return swift_task_switch();
}

uint64_t sub_18326E988()
{
  uint64_t v0;
  uint64_t *v1;
  NSObject *v2;
  os_signpost_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (uint64_t *)(v0 + 224);
  swift_release();
  v2 = sub_183B91560();
  sub_183B91584();
  v3 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 160);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v4, v5) == *MEMORY[0x1E0DF2190])
    {
      v7 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 152));
      v7 = "";
    }
    v1 = (uint64_t *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 200);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 328))(*(_QWORD *)(v0 + 232), v10, v11);
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v2, v3, v14, "remoteCallVoid", v7, v13, 2u);
    MEMORY[0x186DB563C](v13, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 200);

    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 192);
  v9(*v1, v16);
  swift_release();
  v9(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326EBEC()
{
  uint64_t v0;
  uint64_t *v1;
  NSObject *v2;
  os_signpost_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (uint64_t *)(v0 + 216);
  v2 = sub_183B91560();
  sub_183B91584();
  v3 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 160);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v4, v5) == *MEMORY[0x1E0DF2190])
    {
      v7 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
      v7 = "";
    }
    v1 = (uint64_t *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 216);
    v11 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 200);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 328))(*(_QWORD *)(v0 + 232), v10, v11);
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v2, v3, v14, "remoteCallVoid", v7, v13, 2u);
    MEMORY[0x186DB563C](v13, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 200);

    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 192);
  v9(*v1, v16);
  swift_release();
  v9(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326EE50()
{
  uint64_t v0;
  uint64_t *v1;
  NSObject *v2;
  os_signpost_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (uint64_t *)(v0 + 208);
  swift_release();
  v2 = sub_183B91560();
  sub_183B91584();
  v3 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 152);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == *MEMORY[0x1E0DF2190])
    {
      v7 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
      v7 = "";
    }
    v1 = (uint64_t *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD *)(v0 + 192);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 328))(*(_QWORD *)(v0 + 232), v10, v12);
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v2, v3, v14, "remoteCallVoid", v7, v13, 2u);
    MEMORY[0x186DB563C](v13, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v9(v10, v12);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 200);

    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 192);
  v9(*v1, v16);
  swift_release();
  v9(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWActorSystem.deinit()
{
  uint64_t v0;

  sub_183274468(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t NWActorSystem.__deallocating_deinit()
{
  NWActorSystem.deinit();
  return swift_deallocClassInstance();
}

uint64_t NWActorSystem.invokeHandlerOnReturn(handler:resultBuffer:metatype:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_18326F180()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = dynamic_cast_existential_2_unconditional(v0[4]);
  v3 = v2;
  v5 = v4;
  v6 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = sub_18326F208;
  return sub_18326F250(v1, v0[3], v0[2], v1, v3, v5);
}

uint64_t sub_18326F208()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_18326F250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(_QWORD *)(a4 - 8);
  v6[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18326F2AC()
{
  uint64_t *v0;
  _QWORD *v1;

  sub_183B918FC();
  v1 = (_QWORD *)swift_task_alloc();
  v0[10] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_18326F318;
  return NWActorSystemResultHandler.onReturn<A>(value:)(v0[9], v0[5]);
}

uint64_t sub_18326F318()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18326F37C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 40));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18326F3C4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 40));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_18326F40C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NWActorSystem.resolve<A>(id:as:)(a1, a2, a3, a4);
}

uint64_t sub_18326F42C@<X0>(uint64_t *a1@<X8>)
{
  return NWActorSystem.assignID<A>(_:)(a1);
}

void sub_18326F440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NWActorSystem.actorReady<A>(_:)(a1, a2, a3);
}

void sub_18326F460(uint64_t a1)
{
  NWActorSystem.resignID(_:)(a1);
}

void sub_18326F480(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
}

uint64_t sub_18326F490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  swift_conformsToProtocol();
  swift_conformsToProtocol();
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v14;
  *v14 = v8;
  v14[1] = sub_183243DAC;
  return NWActorSystem.remoteCall<A, B, C>(on:target:invocation:throwing:returning:)(a1, a2, a3, a4, v15, v16, a7, a8);
}

uint64_t sub_18326F55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v13;
  *v13 = v7;
  v13[1] = sub_183246848;
  return NWActorSystem.remoteCallVoid<A, B>(on:target:invocation:throwing:)(a1, a2, a3, v14, a5, v15, a7);
}

uint64_t sub_18326F5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_18326F5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3F0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NWActorID();
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v18 = (uint64_t *)((char *)&v24 - v17);
  sub_183058C44(a2, (uint64_t)&v24 - v17, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  sub_183058C44(a3, (uint64_t)v12, type metadata accessor for NWActorDiscoveryMechanism);
  v19 = type metadata accessor for NWActorDiscoveryMechanism(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 0, 1, v19);
  swift_beginAccess();
  sub_1832A5E40((uint64_t)v12, v18);
  swift_endAccess();
  sub_183058C44(a2, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  if (a4)
  {
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a4;
    *(_QWORD *)(v20 + 24) = a5;
    swift_beginAccess();
    sub_183061488(a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0x8000000000000000;
    sub_1832FA34C((uint64_t)sub_1832756D4, v20, v16, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a1 + 176) = v25;
    swift_bridgeObjectRelease();
    sub_183058AE0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  }
  else
  {
    swift_beginAccess();
    sub_183061488(0);
    v22 = sub_1832F734C(v16);
    sub_183058AE0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    sub_1830630AC(v22);
  }
  return swift_endAccess();
}

uint64_t sub_18326F860(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v3[8] = *v2;
  v4 = sub_183B91578();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = type metadata accessor for NWActorID();
  v3[14] = swift_task_alloc();
  v3[15] = type metadata accessor for RemoteCallEnvelope(0);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v5 = sub_183B91548();
  v3[18] = v5;
  v3[19] = *(_QWORD *)(v5 - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18326F984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_signpost_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  os_signpost_id_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_signpost_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = sub_1832703F4((uint64_t *)(*(_QWORD *)(v0 + 40) + *(int *)(v1 + 20)));
  *(_QWORD *)(v0 + 192) = v2;
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    if (qword_1EDCDC550 != -1)
      swift_once();
    v7 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = sub_183B9156C();
    *(_QWORD *)(v0 + 200) = __swift_project_value_buffer(v9, (uint64_t)qword_1EDCDD2D0);
    sub_183B91560();
    sub_183B91524();
    sub_183058C44(v8, v6, type metadata accessor for RemoteCallEnvelope);
    sub_183058C44(v8, v7, type metadata accessor for RemoteCallEnvelope);
    v10 = sub_183B91560();
    v11 = sub_183B91CD4();
    if ((sub_183B91CEC() & 1) != 0)
    {
      v37 = *(_QWORD *)(v0 + 176);
      v40 = *(_QWORD *)(v0 + 144);
      v41 = *(_QWORD *)(v0 + 152);
      v12 = *(_QWORD *)(v0 + 136);
      v36 = *(_QWORD *)(v0 + 128);
      v39 = v11;
      v13 = *(_QWORD *)(v0 + 112);
      v14 = *(_QWORD *)(v0 + 120);
      (*(void (**)(void))(v41 + 16))();
      v42 = v5;
      v15 = swift_slowAlloc();
      v38 = swift_slowAlloc();
      *(_DWORD *)v15 = 136315394;
      v16 = (uint64_t *)(v12 + *(int *)(v14 + 24));
      v43 = v4;
      v44 = v38;
      v17 = *v16;
      v18 = v16[1];
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = sub_183273D70(v17, v18, &v44);
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      sub_183058AE0(v12, type metadata accessor for RemoteCallEnvelope);
      *(_WORD *)(v15 + 12) = 2080;
      sub_183058C44(v36 + *(int *)(v1 + 20), v13, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      v45 = 0;
      v46 = 0xE000000000000000;
      sub_183B91DB8();
      swift_bridgeObjectRelease();
      v45 = 0x49726F746341574ELL;
      v46 = 0xEA00000000002844;
      swift_bridgeObjectRetain();
      sub_183B917F4();
      swift_bridgeObjectRelease();
      sub_183B917F4();
      sub_183B914AC();
      sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      sub_183B92088();
      sub_183B917F4();
      swift_bridgeObjectRelease();
      sub_183B917F4();
      v19 = v45;
      v20 = v46;
      sub_183058AE0(v13, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      *(_QWORD *)(v0 + 32) = sub_183273D70(v19, v20, &v44);
      v4 = v43;
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      sub_183058AE0(v36, type metadata accessor for RemoteCallEnvelope);
      v21 = sub_183B91530();
      _os_signpost_emit_with_name_impl(&dword_182FBE000, v10, v39, v21, "executeRemoteCall", "Executing %s on %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v38, -1, -1);
      v22 = v15;
      v5 = v42;
      MEMORY[0x186DB563C](v22, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v37, v40);
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 128);
      v25 = *(_QWORD *)(v0 + 136);

      sub_183058AE0(v25, type metadata accessor for RemoteCallEnvelope);
      sub_183058AE0(v26, type metadata accessor for RemoteCallEnvelope);
    }
    v28 = *(_QWORD *)(v0 + 176);
    v27 = *(_QWORD *)(v0 + 184);
    v29 = *(_QWORD *)(v0 + 144);
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 152) + 16);
    *(_QWORD *)(v0 + 208) = v30;
    v30(v28, v27, v29);
    sub_183B9159C();
    swift_allocObject();
    *(_QWORD *)(v0 + 216) = sub_183B91590();
    if (qword_1EDCDC560 != -1)
      swift_once();
    v31 = *(_QWORD *)(v0 + 64);
    v32 = *(_QWORD *)(v0 + 40);
    v33 = swift_task_alloc();
    *(_QWORD *)(v0 + 224) = v33;
    v34 = vextq_s8(*(int8x16_t *)(v0 + 48), *(int8x16_t *)(v0 + 48), 8uLL);
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v33 + 16) = v32;
    *(int8x16_t *)(v33 + 24) = v34;
    *(_QWORD *)(v33 + 40) = v4;
    *(_QWORD *)(v33 + 48) = v5;
    *(_QWORD *)(v33 + 56) = v31;
    swift_retain();
    v35 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v35;
    *v35 = v0;
    v35[1] = sub_18326FF3C;
    v47 = 274;
    v48 = MEMORY[0x1E0DEE9C0] + 8;
    return sub_183B92364();
  }
  else
  {
    sub_183274368();
    swift_allocError();
    *(_OWORD *)v23 = xmmword_183BA0830;
    *(_QWORD *)(v23 + 16) = 0xB000000000000000;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18326FF3C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18326FFB4()
{
  uint64_t v0;
  uint64_t *v1;
  NSObject *v2;
  os_signpost_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (uint64_t *)(v0 + 168);
  v2 = sub_183B91560();
  sub_183B91584();
  v3 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v4, v5) == *MEMORY[0x1E0DF2190])
    {
      v7 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
      v7 = "";
    }
    v1 = (uint64_t *)(v0 + 176);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 208))(*(_QWORD *)(v0 + 176), v10, v11);
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v2, v3, v14, "executeRemoteCall", v7, v13, 2u);
    MEMORY[0x186DB563C](v13, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 152);

    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 144);
  v9(*v1, v16);
  swift_unknownObjectRelease();
  swift_release();
  v9(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832701DC()
{
  uint64_t v0;
  uint64_t *v1;
  NSObject *v2;
  os_signpost_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (uint64_t *)(v0 + 160);
  v2 = sub_183B91560();
  sub_183B91584();
  v3 = sub_183B91CC8();
  if ((sub_183B91CEC() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 72);
    swift_retain();
    sub_183B915A8();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == *MEMORY[0x1E0DF2190])
    {
      v7 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
      v7 = "";
    }
    v1 = (uint64_t *)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 144);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 208))(*(_QWORD *)(v0 + 176), v10, v12);
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = sub_183B91530();
    _os_signpost_emit_with_name_impl(&dword_182FBE000, v2, v3, v14, "executeRemoteCall", v7, v13, 2u);
    MEMORY[0x186DB563C](v13, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v9(v10, v12);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 152);

    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 144);
  v9(*v1, v16);
  swift_unknownObjectRelease();
  swift_release();
  v9(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832703F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;

  v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  v3 = MEMORY[0x1E0C80A78](v75);
  v74 = (uint64_t)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v76 = (char *)&v67 - v5;
  v78 = type metadata accessor for NWActorID();
  v6 = MEMORY[0x1E0C80A78](v78);
  v72 = (uint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v77 = (uint64_t)&v67 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD418);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NWActorSystem.ServerRole();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t *)((char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v79 = (uint64_t)&v67 - v17;
  v18 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 120) + 16);
  os_unfair_lock_lock(v18);
  sub_183275BD4(&v80);
  v19 = v80;
  os_unfair_lock_unlock(v18);
  os_unfair_lock_lock(v18);
  v73 = v1;
  sub_1832757F8(&v80);
  v20 = v80;
  os_unfair_lock_unlock(v18);
  v21 = a1;
  if (*(_QWORD *)(v20 + 16) && (v22 = sub_1832F687C(a1), (v23 & 1) != 0))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v22);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x186DB5714](v24 + 16);
    swift_release();
  }
  else
  {
    if (*(_QWORD *)(v19 + 16))
    {
      v26 = *a1;
      v27 = a1[1];
      swift_bridgeObjectRetain();
      v28 = sub_1832F67A0(v26, v27);
      if ((v29 & 1) != 0)
      {
        sub_183058C44(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v13 + 72) * v28, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1830620D4((uint64_t)v11, &qword_1EDCDD418);
      return 0;
    }
    else
    {
      v30 = (uint64_t)v11;
      v31 = v79;
      sub_183058EC4(v30, v79, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
      sub_183058C44(v31, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v32 = (uint64_t (*)(uint64_t))*v16;
        v33 = v16[1];
        v34 = (char *)v16 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C8) + 48);
        if (*(_QWORD *)(v20 + 16) && (v35 = sub_1832F687C(a1), (v36 & 1) != 0))
        {
          v37 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v35);
          swift_retain();
          swift_bridgeObjectRelease();
          v25 = MEMORY[0x186DB5714](v37 + 16);
          swift_release();
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
          if (qword_1EDCDC548 != -1)
            swift_once();
          v47 = sub_183B915CC();
          __swift_project_value_buffer(v47, (uint64_t)qword_1EDCDD2B8);
          v48 = (uint64_t)a1;
          v49 = v77;
          sub_183058C44(v48, v77, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
          v50 = sub_183B915B4();
          v51 = sub_183B91C80();
          v52 = os_log_type_enabled(v50, v51);
          v70 = v32;
          v71 = v33;
          if (v52)
          {
            v53 = (uint8_t *)swift_slowAlloc();
            v68 = swift_slowAlloc();
            v82 = v68;
            *(_DWORD *)v53 = 136315138;
            v67 = v53 + 4;
            v69 = v34;
            v54 = v72;
            sub_183058C44(v49, v72, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
            v80 = 0;
            v81 = 0xE000000000000000;
            sub_183B91DB8();
            swift_bridgeObjectRelease();
            v80 = 0x49726F746341574ELL;
            v81 = 0xEA00000000002844;
            swift_bridgeObjectRetain();
            sub_183B917F4();
            v31 = v79;
            swift_bridgeObjectRelease();
            sub_183B917F4();
            sub_183B914AC();
            sub_183275948(&qword_1EDCDD338, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
            sub_183B92088();
            sub_183B917F4();
            swift_bridgeObjectRelease();
            sub_183B917F4();
            v55 = v80;
            v56 = v81;
            v57 = v54;
            v34 = v69;
            sub_183058AE0(v57, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
            v80 = sub_183273D70(v55, v56, &v82);
            sub_183B91D1C();
            swift_bridgeObjectRelease();
            sub_183058AE0(v77, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
            _os_log_impl(&dword_182FBE000, v50, v51, "Creating on demand actor for id %s", v53, 0xCu);
            v58 = v68;
            swift_arrayDestroy();
            MEMORY[0x186DB563C](v58, -1, -1);
            MEMORY[0x186DB563C](v53, -1, -1);
          }
          else
          {
            sub_183058AE0(v49, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
          }

          if (qword_1EDCDC568 != -1)
            swift_once();
          v61 = (char *)v21 + *(int *)(v78 + 20);
          v62 = sub_183B914AC();
          v63 = *(_QWORD *)(v62 - 8);
          v64 = (uint64_t)v76;
          (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v76, v61, v62);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v62);
          sub_18327583C(v64, v74);
          swift_task_localValuePush();
          v25 = v70(v73);
          swift_task_localValuePop();
          swift_release();
          sub_1830620D4(v64, &qword_1EDCDD200);
        }
        sub_183058AE0(v31, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
        v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v34, v65);
      }
      else
      {
        swift_bridgeObjectRelease();
        v25 = *v16;
        v38 = v16[1];
        if (qword_1EDCDC548 != -1)
          swift_once();
        v39 = sub_183B915CC();
        __swift_project_value_buffer(v39, (uint64_t)qword_1EDCDD2B8);
        swift_unknownObjectRetain_n();
        v40 = sub_183B915B4();
        v41 = sub_183B91C80();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = (uint8_t *)swift_slowAlloc();
          v43 = swift_slowAlloc();
          v81 = v38;
          v82 = v43;
          *(_DWORD *)v42 = 136315138;
          v80 = v25;
          swift_unknownObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD420);
          v44 = sub_183B9174C();
          v80 = sub_183273D70(v44, v45, &v82);
          sub_183B91D1C();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_182FBE000, v40, v41, "Returning singleton: %s", v42, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x186DB563C](v43, -1, -1);
          MEMORY[0x186DB563C](v42, -1, -1);

          v46 = v79;
        }
        else
        {
          swift_unknownObjectRelease_n();

          v46 = v31;
        }
        sub_183058AE0(v46, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
        v59 = (char *)v16 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C0) + 48);
        v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v59, v60);
      }
    }
  }
  return v25;
}

uint64_t sub_183270D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  v7[18] = a2;
  v7[19] = a3;
  v7[24] = type metadata accessor for NWActorSystemResultHandler();
  v7[25] = swift_task_alloc();
  v7[26] = type metadata accessor for NWFileSerializationContext(0);
  v7[27] = swift_task_alloc();
  v7[28] = type metadata accessor for RemoteCallEnvelope(0);
  v7[29] = swift_task_alloc();
  v7[30] = type metadata accessor for NWActorSystemInvocationDecoder();
  v7[31] = swift_task_alloc();
  v7[32] = swift_task_alloc();
  v8 = sub_183B914F4();
  v7[33] = v8;
  v7[34] = *(_QWORD *)(v8 - 8);
  v7[35] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_183270E10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0[30];
  v16 = (uint64_t *)v0[31];
  v2 = v0[28];
  v3 = v0[29];
  v4 = v0[27];
  v18 = v0[32];
  v19 = (int *)v0[24];
  v5 = v0[20];
  v20 = v0[25];
  v6 = v0[18];
  v21 = v0[19];
  v17 = v0[26];
  swift_bridgeObjectRetain();
  sub_183B91500();
  v7 = _s15ActorConnectionCMa();
  v0[5] = v7;
  v0[6] = &off_1E148CF40;
  v0[2] = v5;
  sub_183058C44(v6, v3, type metadata accessor for RemoteCallEnvelope);
  sub_18324A894((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  sub_183058C44(v3, (uint64_t)v16 + *(int *)(v1 + 20), type metadata accessor for RemoteCallEnvelope);
  v8 = (uint64_t *)((char *)v16 + *(int *)(v1 + 24));
  *v8 = *(_QWORD *)(v3 + *(int *)(v2 + 32));
  v8[1] = 0;
  sub_18324A894((uint64_t)(v0 + 7), v4);
  sub_183058C44(v3 + *(int *)(v2 + 20), v4 + *(int *)(v17 + 20), (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = sub_18324A9F0(v21, v4);
  swift_release();
  __swift_destroy_boxed_opaque_existential_2((uint64_t)(v0 + 7));
  sub_183058AE0(v3, type metadata accessor for RemoteCallEnvelope);
  sub_183058AE0(v4, type metadata accessor for NWFileSerializationContext);
  *v16 = v9;
  sub_183058EC4((uint64_t)v16, v18, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystemInvocationDecoder);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)(v0 + 2));
  v0[15] = v7;
  v0[16] = &off_1E148F950;
  v0[12] = v5;
  v10 = v6 + *(int *)(v2 + 20);
  v11 = (_QWORD *)(v20 + v19[7]);
  v11[3] = v7;
  v11[4] = &off_1E148CF40;
  *v11 = v5;
  v12 = sub_183B914AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v20, v6, v12);
  sub_18324A894((uint64_t)(v0 + 12), v20 + v19[5]);
  sub_183058C44(v10, v20 + v19[6], (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  swift_retain_n();
  __swift_destroy_boxed_opaque_existential_2((uint64_t)(v0 + 12));
  swift_getObjectType();
  v0[17] = v21;
  v13 = (_QWORD *)swift_task_alloc();
  v0[36] = v13;
  sub_183275948(&qword_1EDCDD440, v14, (uint64_t (*)(uint64_t))type metadata accessor for NWActorSystem, (uint64_t)&protocol conformance descriptor for NWActorSystem);
  *v13 = v0;
  v13[1] = sub_1832710F4;
  return sub_183B914D0();
}

uint64_t sub_1832710F4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_183271158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 272);
  v1 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  sub_183058AE0(*(_QWORD *)(v0 + 200), (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystemResultHandler);
  sub_183058AE0(v4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystemInvocationDecoder);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183271214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 272);
  v1 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  sub_183058AE0(*(_QWORD *)(v0 + 200), (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystemResultHandler);
  sub_183058AE0(v4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystemInvocationDecoder);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1832712D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD418);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - v11;
  swift_beginAccess();
  v13 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    v14 = sub_1832F67A0(a2, a3);
    if ((v15 & 1) != 0)
    {
      v16 = v14;
      v17 = *(_QWORD *)(v13 + 56);
      v18 = type metadata accessor for NWActorSystem.ServerRole();
      v26 = a3;
      v19 = a2;
      v20 = *(_QWORD *)(v18 - 8);
      sub_183058C44(v17 + *(_QWORD *)(v20 + 72) * v16, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
      v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
      a2 = v19;
      a3 = v26;
      v21(v12, 0, 1, v18);
    }
    else
    {
      v18 = type metadata accessor for NWActorSystem.ServerRole();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v12, 1, 1, v18);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = type metadata accessor for NWActorSystem.ServerRole();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v12, 1, 1, v18);
  }
  swift_endAccess();
  type metadata accessor for NWActorSystem.ServerRole();
  v22 = *(_QWORD *)(v18 - 8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v12, 1, v18);
  sub_1830620D4((uint64_t)v12, &qword_1EDCDD418);
  if (v23 == 1)
  {
    sub_183058C44(v27, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v18);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1832A5FA8((uint64_t)v10, a2, a3);
    return swift_endAccess();
  }
  else
  {
    sub_183274368();
    swift_allocError();
    *(_OWORD *)v25 = xmmword_183BA0840;
    *(_QWORD *)(v25 + 16) = 0xB000000000000000;
    return swift_willThrow();
  }
}

uint64_t sub_183271564(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  os_unfair_lock_s *v9;
  unint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  __n128 v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;

  v3 = v2;
  v20 = a2;
  v5 = type metadata accessor for NWActorID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (unint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 72) + 16);
  os_unfair_lock_lock(v9);
  sub_183275884(&v22);
  v10 = v22.n128_u64[0];
  os_unfair_lock_unlock(v9);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 120) + 16);
    v13 = *(unsigned __int8 *)(v6 + 80);
    v19 = v10;
    v14 = v10 + ((v13 + 32) & ~v13);
    v21 = *(_QWORD *)(v6 + 72);
    do
    {
      v16 = sub_183058C44(v14, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      MEMORY[0x1E0C80A78](v16);
      *(&v19 - 2) = v3;
      *(&v19 - 1) = (unint64_t)v8;
      os_unfair_lock_lock(v12);
      sub_18327589C(&v22);
      v17 = v22;
      os_unfair_lock_unlock(v12);
      if (v17.n128_u64[0])
      {
        *(__n128 *)(swift_allocObject() + 16) = v17;
        v22.n128_u64[0] = v20;
        sub_183061488(v17.n128_i64[0]);
        swift_retain();
        ((void (*)(__n128 *))v17.n128_u64[0])(&v22);
        swift_release();
        sub_1830630AC(v17.n128_i64[0]);
        v15 = sub_1832758B4;
      }
      else
      {
        v15 = 0;
      }
      os_unfair_lock_lock(v12);
      sub_1832720F0(v3, v8);
      os_unfair_lock_unlock(v12);
      sub_1830630AC((uint64_t)v15);
      sub_183058AE0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      v14 += v21;
      --v11;
    }
    while (v11);
  }
  return swift_bridgeObjectRelease();
}

__n128 sub_18327179C@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t *v5;
  unint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  uint64_t v14;

  v5 = (uint64_t *)(a1 + 176);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v6 = sub_1832F687C(a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  v13 = 0u;
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v5;
    v14 = *v5;
    *v5 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1832FB94C();
      v9 = v14;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for NWActorID();
    sub_183058AE0(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    v13 = *(__n128 *)(*(_QWORD *)(v9 + 56) + 16 * v6);
    sub_1832B900C(v6, v9);
    *v5 = v9;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  result = v13;
  *a3 = v13;
  return result;
}

uint64_t sub_1832718B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = swift_allocObject();
  swift_weakInit();
  v3 = swift_allocObject();
  swift_weakInit();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = a1[3];
  a1[3] = &unk_1EDCDD410;
  a1[4] = v4;
  sub_1830630AC(v5);
  v6 = swift_allocObject();
  swift_weakInit();
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  v9 = a1[5];
  a1[5] = sub_1832757E8;
  a1[6] = v8;
  sub_1830630AC(v9);
  v10 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  v11 = a1[7];
  a1[7] = sub_1832757F0;
  a1[8] = v10;
  return sub_1830630AC(v11);
}

uint64_t sub_183271A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return swift_task_switch();
}

uint64_t sub_183271A38()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 88) = Strong;
  if (Strong)
  {
    v2 = Strong;
    swift_beginAccess();
    v3 = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 96) = v3;
    if (v3)
    {
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 104) = v4;
      *v4 = v0;
      v4[1] = sub_183271B0C;
      return sub_18326F860(*(_QWORD *)(v0 + 64), v2);
    }
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183271B0C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_183271B78()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183271BAC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183271BE8(unint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_183271564(v3, a1);
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_183271C84(uint64_t *a1)
{
  uint64_t v2;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return 0;
  v2 = sub_1832703F4(a1);
  swift_release();
  return v2;
}

uint64_t sub_183271D08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_183271D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(os_unfair_lock_s **)(v1 + 120);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = sub_183275988;
  *(_QWORD *)(v5 + 24) = v4;
  v3 += 4;
  os_unfair_lock_lock(v3);
  (*(void (**)(void))(v5 + 16))();
  os_unfair_lock_unlock(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  v6 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 152);
  *(_QWORD *)(v0 + 32) = v6;
  if (!v6)
    return (*(uint64_t (**)(void))(v0 + 8))();
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v7;
  *v7 = v0;
  v7[1] = sub_183271E1C;
  return sub_18328D098();
}

uint64_t sub_183271E1C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_183271E88()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183271E94()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183271EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;

  v4 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 152))
  {
    v8 = type metadata accessor for NWActorDiscoveryMechanism(0);
    v9 = a2 + *(int *)(v8 + 20);
    v10 = *(unsigned __int8 *)(v9 + 32);
    if (v10 <= 0xFD && (v11 = *(_QWORD *)(a2 + *(int *)(v8 + 24))) != 0)
    {
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)(v9 + 8);
      v14 = *(_QWORD *)(v9 + 16);
      v16 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)&v17 = v12;
      *((_QWORD *)&v17 + 1) = v13;
      v18 = v14;
      v19 = v16;
      v20 = v10;
      sub_183058C44(a2, (uint64_t)v7, type metadata accessor for NWActorDiscoveryMechanism.Target);
      v21 = *(id *)(a1 + 184);
      type metadata accessor for Browser();
      swift_allocObject();
      sub_1832759A0(v12, v13, v14, v16, v10);
      swift_retain();
      *(_QWORD *)(a1 + 152) = sub_18328DE1C(&v17, v11, (uint64_t)v7, v21);
      return swift_release();
    }
    else
    {
      sub_183274368();
      swift_allocError();
      *v15 = 0xD00000000000003CLL;
      v15[1] = 0x8000000183C70220;
      v15[2] = 0x4000000000000000;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_183272068@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  char v6;
  uint64_t v7;

  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) && (sub_1832F687C(a2), (v6 & 1) != 0))
    v7 = swift_retain();
  else
    v7 = 0;
  *a3 = v7;
  return swift_endAccess();
}

uint64_t sub_1832720F0(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = (uint64_t *)(a1 + 168);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = sub_1832F687C(a2);
  LOBYTE(a2) = v5;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1832FB708();
      v7 = v11;
    }
    v8 = *(_QWORD *)(v7 + 48);
    v9 = type metadata accessor for NWActorID();
    sub_183058AE0(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    sub_1832B8D3C(v4, v7);
    *v3 = v7;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1832721F8(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_183272254(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_183272254(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD468);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EDCDC548 != -1)
    swift_once();
  v7 = sub_183B915CC();
  __swift_project_value_buffer(v7, (uint64_t)qword_1EDCDD2B8);
  swift_retain_n();
  v8 = sub_183B915B4();
  v9 = sub_183B91C80();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v18 = a1;
    v19 = v11;
    *(_DWORD *)v10 = 136315138;
    type metadata accessor for NWConnection(0);
    swift_retain();
    v12 = sub_183B9174C();
    v18 = sub_183273D70(v12, v13, &v19);
    sub_183B91D1C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v8, v9, "Received connection: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v11, -1, -1);
    MEMORY[0x186DB563C](v10, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  _s15ActorConnectionCMa();
  swift_allocObject();
  v14 = (_QWORD *)sub_1832AB7C4(a1);
  swift_retain();
  sub_1832718B0(v14);
  v15 = sub_183B91A34();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v14;
  v16[5] = v2;
  swift_retain();
  sub_1832AB2F4((uint64_t)v6, (uint64_t)&unk_1EDCDD478, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_1832724E8(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  char v5;

  v1 = *((unsigned __int8 *)a1 + 4);
  v2 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = v2;
    v5 = (v2 | (unint64_t)(v1 << 32)) >> 32;
    sub_183272560(&v4);
    return swift_release();
  }
  return result;
}

void sub_183272560(unsigned int *a1)
{
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  if (qword_1EDCDC548 != -1)
LABEL_39:
    swift_once();
  v2 = sub_183B915CC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EDCDD2B8);
  v3 = sub_183B915B4();
  v4 = sub_183B91C80();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v42 = v6;
    v7 = sub_183B9174C();
    sub_183273D70(v7, v8, &v42);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v3, v4, "Listener state changed to %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v6, -1, -1);
    MEMORY[0x186DB563C](v5, -1, -1);
  }

  v9 = (v1 >> 38) & 3;
  if (!(_DWORD)v9)
  {
    v18 = sub_183B915B4();
    v19 = sub_183B91C74();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v42 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = sub_183B9174C();
      sub_183273D70(v22, v23, &v42);
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_182FBE000, v18, v19, "Listener moved to waiting state with error: %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v21, -1, -1);
      MEMORY[0x186DB563C](v20, -1, -1);
    }

    return;
  }
  if ((_DWORD)v9 != 1)
    return;
  v10 = HIDWORD(v1) & 0x3F;
  v11 = sub_183B915B4();
  v12 = sub_183B91C74();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v42 = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = v1;
    v16 = sub_183B9174C();
    sub_183273D70(v16, v17, &v42);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v11, v12, "Listener moved to failed state with error: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v14, -1, -1);
    MEMORY[0x186DB563C](v13, -1, -1);
  }
  else
  {
    v15 = v1;
  }

  v24 = (os_unfair_lock_s *)(*(_QWORD *)(v41 + 120) + 16);
  os_unfair_lock_lock(v24);
  sub_183275BD4(&v42);
  v25 = v42;
  os_unfair_lock_unlock(v24);
  v26 = v25 + 64;
  v27 = 1 << *(_BYTE *)(v25 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v1 = v28 & *(_QWORD *)(v25 + 64);
  v29 = (unint64_t)(v27 + 63) >> 6;
  swift_bridgeObjectRetain();
  v30 = 0;
  while (1)
  {
    if (v1)
    {
      v31 = __clz(__rbit64(v1));
      v1 &= v1 - 1;
      v32 = v31 | (v30 << 6);
      goto LABEL_16;
    }
    v38 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v38 >= v29)
      goto LABEL_36;
    v39 = *(_QWORD *)(v26 + 8 * v38);
    ++v30;
    if (!v39)
    {
      v30 = v38 + 1;
      if (v38 + 1 >= v29)
        goto LABEL_36;
      v39 = *(_QWORD *)(v26 + 8 * v30);
      if (!v39)
      {
        v30 = v38 + 2;
        if (v38 + 2 >= v29)
          goto LABEL_36;
        v39 = *(_QWORD *)(v26 + 8 * v30);
        if (!v39)
        {
          v30 = v38 + 3;
          if (v38 + 3 >= v29)
            goto LABEL_36;
          v39 = *(_QWORD *)(v26 + 8 * v30);
          if (!v39)
          {
            v30 = v38 + 4;
            if (v38 + 4 >= v29)
              goto LABEL_36;
            v39 = *(_QWORD *)(v26 + 8 * v30);
            if (!v39)
              break;
          }
        }
      }
    }
LABEL_35:
    v1 = (v39 - 1) & v39;
    v32 = __clz(__rbit64(v39)) + (v30 << 6);
LABEL_16:
    v33 = (uint64_t *)(*(_QWORD *)(v25 + 48) + 16 * v32);
    v34 = *v33;
    v35 = v33[1];
    sub_18323C200();
    v36 = (void *)swift_allocError();
    *(_DWORD *)v37 = v15;
    *(_BYTE *)(v37 + 4) = v10;
    swift_bridgeObjectRetain();
    sub_183269728(v34, v35, v36);

    swift_bridgeObjectRelease();
  }
  v40 = v38 + 5;
  if (v40 >= v29)
  {
LABEL_36:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  v39 = *(_QWORD *)(v26 + 8 * v40);
  if (v39)
  {
    v30 = v40;
    goto LABEL_35;
  }
  while (1)
  {
    v30 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v30 >= v29)
      goto LABEL_36;
    v39 = *(_QWORD *)(v26 + 8 * v30);
    ++v40;
    if (v39)
      goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_183272AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[4] = a4;
  v5[5] = a5;
  v5[6] = type metadata accessor for NWActorID();
  v5[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_183272B40()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_183272BBC;
  return sub_183B9219C();
}

uint64_t sub_183272BBC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_183272C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(os_unfair_lock_s **)(v3 + 120);
  v6 = (_QWORD *)swift_task_alloc();
  v6[2] = v3;
  v6[3] = v2;
  v6[4] = v4;
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = sub_183275CD8;
  *(_QWORD *)(v7 + 24) = v6;
  os_unfair_lock_lock(v5 + 4);
  (*(void (**)(void))(v7 + 16))();
  os_unfair_lock_unlock(v5 + 4);
  result = swift_task_dealloc();
  if (!v1)
  {
    v9 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc();
    sub_183058AE0(v9, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_183272D04()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (qword_1EDCDC548 != -1)
    swift_once();
  v1 = *(void **)(v0 + 72);
  v2 = sub_183B915CC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EDCDD2B8);
  v3 = v1;
  v4 = v1;
  v5 = sub_183B915B4();
  v6 = sub_183B91C74();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 72);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 16) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
    v12 = sub_183B9174C();
    *(_QWORD *)(v0 + 24) = sub_183273D70(v12, v13, &v15);
    sub_183B91D1C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_182FBE000, v5, v6, "Failed to retrieve actorID for incoming connection: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v10, -1, -1);
    MEMORY[0x186DB563C](v9, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_183272EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;

  v6 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_183058C44(a2, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0x8000000000000000;
  sub_1832FA1CC(a3, v8, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 168) = v11;
  swift_bridgeObjectRelease();
  sub_183058AE0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
  return swift_endAccess();
}

uint64_t sub_183272FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  unint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = (uint64_t *)(a1 + 136);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v8 = sub_1832F67A0(a2, a3);
  LOBYTE(a3) = v9;
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v7;
    v17 = *v7;
    *v7 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1832FBE1C();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for NWActorSystem.ServerRole();
    v14 = *(_QWORD *)(v13 - 8);
    sub_183058EC4(v12 + *(_QWORD *)(v14 + 72) * v8, a4, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    sub_1832B95E4(v8, v11);
    *v7 = v11;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a4, 0, 1, v13);
  }
  else
  {
    v15 = type metadata accessor for NWActorSystem.ServerRole();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a4, 1, 1, v15);
  }
  return swift_endAccess();
}

void sub_183273154(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  os_unfair_lock_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];

  v5 = type metadata accessor for NWActorID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD458);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v43 - v13;
  v15 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 120) + 16);
  os_unfair_lock_lock(v15);
  v58 = v2;
  sub_183275AA4(v65);
  v16 = v65[0];
  v56 = v15;
  os_unfair_lock_unlock(v15);
  v18 = 0;
  v60 = 0;
  v19 = *(_QWORD *)(v16 + 64);
  v47 = v16 + 64;
  v20 = 1 << *(_BYTE *)(v16 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v23 = (unint64_t)(v20 + 63) >> 6;
  v50 = &v64;
  v44 = v23 - 1;
  v53 = v23;
  v45 = v23 - 5;
  v59 = v16;
  v46 = v16 + 104;
  *(_QWORD *)&v17 = 136315394;
  v49 = v17;
  v48 = MEMORY[0x1E0DEE9B8] + 8;
  v57 = v12;
  v51 = v8;
  v52 = v6;
  v55 = v14;
  while (1)
  {
    if (v22)
    {
      v61 = v18;
      v62 = (v22 - 1) & v22;
      v26 = __clz(__rbit64(v22)) | (v18 << 6);
      goto LABEL_9;
    }
    v30 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v30 >= v53)
    {
      v61 = v18;
    }
    else
    {
      v31 = *(_QWORD *)(v47 + 8 * v30);
      if (v31)
        goto LABEL_13;
      if ((uint64_t)(v18 + 2) >= v53)
      {
        v61 = v18 + 1;
      }
      else
      {
        v31 = *(_QWORD *)(v47 + 8 * (v18 + 2));
        if (v31)
        {
          v30 = v18 + 2;
          goto LABEL_13;
        }
        if ((uint64_t)(v18 + 3) >= v53)
        {
          v61 = v18 + 2;
        }
        else
        {
          v31 = *(_QWORD *)(v47 + 8 * (v18 + 3));
          if (v31)
          {
            v30 = v18 + 3;
LABEL_13:
            v61 = v30;
            v62 = (v31 - 1) & v31;
            v26 = __clz(__rbit64(v31)) + (v30 << 6);
LABEL_9:
            v27 = v59;
            sub_183058C44(*(_QWORD *)(v59 + 48) + *(_QWORD *)(v6 + 72) * v26, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
            v28 = *(_QWORD *)(v27 + 56);
            v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD460);
            *(_QWORD *)&v12[*(int *)(v29 + 48)] = *(_QWORD *)(v28 + 8 * v26);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v12, 0, 1, v29);
            swift_retain();
            goto LABEL_16;
          }
          v30 = v18 + 4;
          if ((uint64_t)(v18 + 4) >= v53)
          {
            v61 = v18 + 3;
          }
          else
          {
            v31 = *(_QWORD *)(v47 + 8 * v30);
            if (v31)
              goto LABEL_13;
            while (v45 != v18)
            {
              v31 = *(_QWORD *)(v46 + 8 * v18++);
              if (v31)
              {
                v30 = v18 + 4;
                goto LABEL_13;
              }
            }
            v61 = v44;
          }
        }
      }
    }
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD460);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v12, 1, 1, v32);
    v62 = 0;
LABEL_16:
    sub_183275AE8((uint64_t)v12, (uint64_t)v14);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD460);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v14, 1, v33) == 1)
    {
      swift_release();
      return;
    }
    v34 = *(_QWORD *)&v14[*(int *)(v33 + 48)];
    sub_183058EC4((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    if (*v8 == a1 && v8[1] == a2 || (sub_183B920F4() & 1) != 0)
    {
      if (qword_1EDCDC548 != -1)
        swift_once();
      v35 = sub_183B915CC();
      __swift_project_value_buffer(v35, (uint64_t)qword_1EDCDD2B8);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      v36 = sub_183B915B4();
      v37 = sub_183B91C80();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = swift_slowAlloc();
        v54 = swift_slowAlloc();
        v65[0] = v54;
        *(_DWORD *)v38 = v49;
        v63 = v34;
        _s15ActorConnectionCMa();
        swift_retain();
        v39 = sub_183B9174C();
        v63 = sub_183273D70(v39, v40, v65);
        sub_183B91D1C();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v38 + 12) = 2080;
        swift_bridgeObjectRetain();
        v63 = sub_183273D70(a1, a2, v65);
        sub_183B91D1C();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_182FBE000, v36, v37, "Canceling connection %s associated with %s", (uint8_t *)v38, 0x16u);
        v41 = v54;
        swift_arrayDestroy();
        v8 = v51;
        MEMORY[0x186DB563C](v41, -1, -1);
        v42 = v38;
        v6 = v52;
        MEMORY[0x186DB563C](v42, -1, -1);
      }
      else
      {
        swift_release_n();
        swift_bridgeObjectRelease_n();
      }

      v14 = v55;
      v24 = v60;
      sub_1832AA304();
      v25 = v56;
      os_unfair_lock_lock(v56);
      sub_1832720F0(v58, v8);
      v60 = v24;
      os_unfair_lock_unlock(v25);
      swift_release();
      sub_183058AE0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      v12 = v57;
    }
    else
    {
      sub_183058AE0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
      swift_release();
    }
    v18 = v61;
    v22 = v62;
  }
  __break(1u);
}

uint64_t sub_18327377C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v23 = sub_183B91F68();
  swift_bridgeObjectRelease();
  if (v23 < v5)
    goto LABEL_31;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = sub_183B91F68();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = sub_183B91F68();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x186DB2318](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  type metadata accessor for NWProtocolOptions();
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return sub_183B91944();
  }
  if (!(v7 >> 62))
  {
    v16 = *(_QWORD *)(v13 + 16);
    v17 = v16 - v5;
    if (!__OFSUB__(v16, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v24 = sub_183B91F68();
  swift_bridgeObjectRelease();
  v17 = v24 - v5;
  if (__OFSUB__(v24, v5))
    goto LABEL_40;
LABEL_21:
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v15 + 1);
    v19 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v19 || v18 >= &v19[8 * v17])
      memmove(v18, v19, 8 * v17);
    if (!(v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v25 = sub_183B91F68();
    swift_bridgeObjectRelease();
    v21 = v25 + v8;
    if (!__OFADD__(v25, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183273A54(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_183062ADC(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = *(_QWORD *)(type metadata accessor for NWEndpoint() - 8);
  v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_25;
  v18 = *(_QWORD *)(v5 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_33;
  if (v19 < 0)
  {
LABEL_35:
    result = sub_183B91F98();
    __break(1u);
    return result;
  }
  v20 = v17 + v16;
  v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = __OFADD__(v23, v9);
  v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1)
    sub_183058C44(a3, v17, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  return sub_1830620D4(a3, &qword_1EDCDD3E8);
}

uint64_t sub_183273C28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_183268858(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_183273C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;

  v8 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_183246848;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v8;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

void sub_183273CBC()
{
  uint64_t v0;

  sub_18326956C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_183273CC8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v2;

  return sub_183268B6C(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

_QWORD *sub_183273CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC1A0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_183273D38(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_183273D58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_18326AA30(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_183273D70(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_183273E40(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_18321887C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_18321887C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v12);
  return v7;
}

uint64_t sub_183273E40(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_183B91D28();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_183273FF8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_183B91E78();
  if (!v8)
  {
    sub_183B91F50();
    __break(1u);
LABEL_17:
    result = sub_183B91F98();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_183273FF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_18327408C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_183274200(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_183274200(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_18327408C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_183273CD4(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_183B91DC4();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_183B91F50();
      __break(1u);
LABEL_10:
      v2 = sub_183B9180C();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_183B91F98();
    __break(1u);
LABEL_14:
    result = sub_183B91F50();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_183274200(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC1A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_18327434C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_183269D70(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

unint64_t sub_183274368()
{
  unint64_t result;

  result = qword_1EDCDD340;
  if (!qword_1EDCDD340)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWActorSystemError, &type metadata for NWActorSystemError);
    atomic_store(result, (unint64_t *)&qword_1EDCDD340);
  }
  return result;
}

uint64_t sub_1832743AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[9];
  v6 = v1[10];
  v7 = v1[11];
  v9 = v1[12];
  v8 = v1[13];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_183243DAC;
  return sub_18326DC5C(a1, v5, v6, v7, v9, v8, v4);
}

uint64_t sub_183274468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183253844(a8);
    sub_183084848(a10, a11);
    return swift_release();
  }
  return result;
}

uint64_t dynamic_cast_existential_2_unconditional(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
  {
    result = swift_conformsToProtocol2();
    if (result)
      return a1;
  }
  __break(1u);
  return result;
}

uint64_t sub_18327454C()
{
  return sub_183275948(&qword_1EDCDD388, 255, (uint64_t (*)(uint64_t))type metadata accessor for NWActorID, (uint64_t)&protocol conformance descriptor for NWActorID);
}

uint64_t sub_18327457C()
{
  return sub_183275948(&qword_1EDCDD390, 255, (uint64_t (*)(uint64_t))type metadata accessor for NWActorSystemInvocationDecoder, (uint64_t)&protocol conformance descriptor for NWActorSystemInvocationDecoder);
}

unint64_t sub_1832745B0()
{
  unint64_t result;

  result = qword_1EDCDD398;
  if (!qword_1EDCDD398)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWActorSystemInvocationEncoder, &type metadata for NWActorSystemInvocationEncoder);
    atomic_store(result, (unint64_t *)&qword_1EDCDD398);
  }
  return result;
}

uint64_t sub_1832745F4()
{
  return sub_183275948(qword_1EDCDD3A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for NWActorSystemResultHandler, (uint64_t)&protocol conformance descriptor for NWActorSystemResultHandler);
}

uint64_t type metadata accessor for NWActorSystem()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWActorSystem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWActorSystem.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of NWActorSystem.__allocating_init(service:parameters:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t *sub_183274660(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[1];
      *a1 = v7;
      a1[1] = v8;
      swift_retain();
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C8) + 48);
    }
    else
    {
      v14 = a2[1];
      *a1 = v7;
      a1[1] = v14;
      swift_unknownObjectRetain();
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C0) + 48);
    }
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_18327478C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
    v2 = &qword_1EDCDD3C8;
  }
  else
  {
    swift_unknownObjectRelease();
    v2 = &qword_1EDCDD3C0;
  }
  v3 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v2) + 48);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

_QWORD *sub_183274800(_QWORD *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    swift_retain();
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C8) + 48);
  }
  else
  {
    v11 = a2[1];
    *a1 = v5;
    a1[1] = v11;
    swift_unknownObjectRetain();
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C0) + 48);
  }
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_1832748F8(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v6 = a2[1];
      *a1 = v5;
      a1[1] = v6;
      swift_retain();
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C8) + 48);
    }
    else
    {
      v11 = a2[1];
      *a1 = v5;
      a1[1] = v11;
      swift_unknownObjectRetain();
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C0) + 48);
    }
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for NWActorSystem.ServerRole()
{
  uint64_t result;

  result = qword_1EDCDD3D0;
  if (!qword_1EDCDD3D0)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *sub_183274A44(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C8) + 48);
  else
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C0) + 48);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_183274B2C(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for NWActorSystem.ServerRole);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    if (EnumCaseMultiPayload == 1)
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C8) + 48);
    else
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD3C0) + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_183274C2C()
{
  unint64_t v0;
  uint64_t v1;
  char v2;
  char *v3;
  uint64_t *v4;

  sub_183274CD0();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v3 = &v2;
    swift_getTupleTypeLayout2();
    v4 = &v1;
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_183274CD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDCDD3E0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EDCDE130);
    v0 = sub_183B919F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDCDD3E0);
  }
}

unint64_t destroy for NWActorSystem.Role(_QWORD *a1)
{
  unint64_t result;
  unint64_t v3;

  result = a1[4];
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a1[7])
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v3 = a1[10];
    if (v3 >> 60 != 15)
      sub_18308485C(a1[9], v3);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NWActorSystem.Role(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 32);
  if (v4 < 0xFFFFFFFF)
  {
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v6;
    v8 = (_OWORD *)(a2 + 56);
    v7 = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v7;
      *(_QWORD *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    else
    {
      *(_OWORD *)(a1 + 56) = *v8;
    }
    v13 = (uint64_t *)(a2 + 72);
    v14 = *(_QWORD *)(a2 + 80);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72) = *(_OWORD *)v13;
    }
    else
    {
      v15 = *v13;
      sub_18324A994(*v13, *(_QWORD *)(a2 + 80));
      *(_QWORD *)(a1 + 72) = v15;
      *(_QWORD *)(a1 + 80) = v14;
    }
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for NWActorSystem.Role(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v4 = *((_QWORD *)a2 + 4);
  if (*(_QWORD *)(a1 + 32) >= 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v5 = *((_QWORD *)a2 + 7);
      if (*(_QWORD *)(a1 + 56))
      {
        if (v5)
        {
          *(_QWORD *)(a1 + 56) = v5;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          goto LABEL_24;
        }
        sub_1832548C0(a1 + 56);
      }
      else if (v5)
      {
        *(_QWORD *)(a1 + 56) = v5;
        *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_24;
      }
      *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
LABEL_24:
      v17 = (uint64_t *)a2 + 9;
      v18 = *((_QWORD *)a2 + 10);
      if (*(_QWORD *)(a1 + 80) >> 60 == 15)
      {
        if (v18 >> 60 != 15)
        {
          v19 = *v17;
          sub_18324A994(*v17, *((_QWORD *)a2 + 10));
          *(_QWORD *)(a1 + 72) = v19;
          *(_QWORD *)(a1 + 80) = v18;
LABEL_31:
          *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
          *(_WORD *)(a1 + 89) = *(_WORD *)((char *)a2 + 89);
          *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
          swift_retain();
          swift_release();
          return a1;
        }
      }
      else
      {
        if (v18 >> 60 != 15)
        {
          v20 = *v17;
          sub_18324A994(*v17, *((_QWORD *)a2 + 10));
          v21 = *(_QWORD *)(a1 + 72);
          v22 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 72) = v20;
          *(_QWORD *)(a1 + 80) = v18;
          sub_18308485C(v21, v22);
          goto LABEL_31;
        }
        sub_183275214(a1 + 72);
      }
      *(_OWORD *)(a1 + 72) = *(_OWORD *)v17;
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 56))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v8 = *(_QWORD *)(a1 + 80);
    if (v8 >> 60 != 15)
      sub_18308485C(*(_QWORD *)(a1 + 72), v8);
    swift_release();
    goto LABEL_14;
  }
  if (v4 < 0xFFFFFFFF)
  {
LABEL_14:
    v9 = *a2;
    v10 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)a1 = v9;
    v11 = a2[3];
    v12 = a2[4];
    v13 = a2[5];
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 48) = v11;
    return a1;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  v7 = (__int128 *)((char *)a2 + 56);
  v6 = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v7;
  }
  v14 = (uint64_t *)a2 + 9;
  v15 = *((_QWORD *)a2 + 10);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    sub_18324A994(*v14, *((_QWORD *)a2 + 10));
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v15;
  }
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)((char *)a2 + 89);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  swift_retain();
  return a1;
}

uint64_t sub_183275214(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for NWActorSystem.Role(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 32) >= 0xFFFFFFFFuLL)
  {
    v4 = *(_QWORD *)(a2 + 32);
    if (v4 >= 0xFFFFFFFF)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v5 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = v5;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v4;
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(a2 + 56);
      if (*(_QWORD *)(a1 + 56))
      {
        if (v7)
        {
          *(_QWORD *)(a1 + 56) = v7;
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
          swift_unknownObjectRelease();
          goto LABEL_14;
        }
        sub_1832548C0(a1 + 56);
      }
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_14:
      v12 = (_QWORD *)(a2 + 72);
      v13 = *(_QWORD *)(a1 + 80);
      if (v13 >> 60 != 15)
      {
        v14 = *(_QWORD *)(a2 + 80);
        if (v14 >> 60 != 15)
        {
          v15 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 72) = *v12;
          *(_QWORD *)(a1 + 80) = v14;
          sub_18308485C(v15, v13);
          goto LABEL_19;
        }
        sub_183275214(a1 + 72);
      }
      *(_OWORD *)(a1 + 72) = *(_OWORD *)v12;
LABEL_19:
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_release();
      return a1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 56))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v8 = *(_QWORD *)(a1 + 80);
    if (v8 >> 60 != 15)
      sub_18308485C(*(_QWORD *)(a1 + 72), v8);
    swift_release();
  }
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystem.Role(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NWActorSystem.Role(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_1832754D0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_1832754E8(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 32) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NWActorSystem.Role()
{
  return &type metadata for NWActorSystem.Role;
}

uint64_t sub_183275538(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_183242484(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = a1 << 6;
  v13 = (char *)&v4[8 * a1 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC368);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v15 = v4[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)&v4[8 * a2 + 4];
    v19 = v17 << 6;
    if (v12 != a2 << 6 || v13 >= &v18[v19])
      result = (uint64_t)memmove(v13, v18, v19);
    v20 = v4[2];
    v16 = __OFADD__(v20, v8);
    v21 = v20 - v7;
    if (!v16)
    {
      v4[2] = v21;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_1832756B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832756D4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1832AAF70(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_1832756DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_183272068(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_1832756F4()
{
  uint64_t *v0;

  return sub_183272EFC(v0[2], v0[3], v0[4]);
}

uint64_t sub_183275710()
{
  uint64_t v0;

  return sub_1832720F0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_183275728()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_183275750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_183246848;
  *(_OWORD *)(v4 + 72) = v5;
  *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t objectdestroy_44Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832757E8(unint64_t a1)
{
  return sub_183271BE8(a1);
}

uint64_t sub_1832757F0(uint64_t *a1)
{
  return sub_183271C84(a1);
}

uint64_t sub_1832757F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  *a1 = *(_QWORD *)(v1 + 128);
  return swift_bridgeObjectRetain();
}

uint64_t sub_18327583C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_183275884@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1832AB5B8(v1, a1);
}

double sub_18327589C@<D0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_18327179C(*(_QWORD *)(v1 + 16), (_QWORD *)*(_QWORD *)(v1 + 24), a1).n128_u64[0];
  return result;
}

uint64_t sub_1832758B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1832772C4(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_1832758BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_183246848;
  return sub_183270D08(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_183275948(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x186DB5558](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_183275988()
{
  uint64_t v0;

  return sub_183271EC8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1832759A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 0xFDu)
    return sub_1832538CC(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1832759F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_183275A18()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_183275A40@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 16) == 0;
  return result;
}

void sub_183275A94(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 160) = 0;
  *a1 = v2;
}

uint64_t sub_183275AA4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  *a1 = *(_QWORD *)(v1 + 168);
  return swift_bridgeObjectRetain();
}

uint64_t sub_183275AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_183275B30(uint64_t a1)
{
  uint64_t v1;

  return sub_183269474(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_183275B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832506C0(a8);
    sub_183261798(a10, a11);
    return swift_retain();
  }
  return result;
}

uint64_t sub_183275BC4(uint64_t a1)
{
  return sub_1832721F8(a1);
}

uint64_t sub_183275BCC(unsigned int *a1)
{
  return sub_1832724E8(a1);
}

uint64_t sub_183275BD4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  *a1 = *(_QWORD *)(v1 + 136);
  return swift_bridgeObjectRetain();
}

uint64_t sub_183275C18()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_183275C4C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_183243DAC;
  return sub_183272AE4(a1, v4, v5, v7, v6);
}

void sub_183275CC4(uint64_t a1)
{
  uint64_t v1;

  sub_1832AB8E0(a1, v1);
}

uint64_t sub_183275CD8()
{
  return sub_1832756F4();
}

uint64_t NWError.init(_:)@<X0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  nw_error_domain_t error_domain;
  uint64_t v5;
  uint64_t result;
  char v7;

  error_domain = nw_error_get_error_domain(a1);
  switch(error_domain)
  {
    case nw_error_domain_tls:
      LODWORD(v5) = nw_error_get_error_code(a1);
      result = swift_unknownObjectRelease();
      v7 = 2;
      break;
    case nw_error_domain_dns:
      LODWORD(v5) = nw_error_get_error_code(a1);
      result = swift_unknownObjectRelease();
      v7 = 1;
      break;
    case nw_error_domain_posix:
      nw_error_get_error_code(a1);
      v5 = sub_183B915E4();
      result = swift_unknownObjectRelease();
      v7 = 0;
      if ((v5 & 0x100000000) != 0)
        LODWORD(v5) = 22;
      break;
    default:
      result = swift_unknownObjectRelease();
      v7 = 0;
      LODWORD(v5) = 22;
      break;
  }
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v7;
  return result;
}

uint64_t sub_183275DB0()
{
  uint64_t v0;
  OSStatus v1;
  uint64_t result;
  uint64_t v3;
  char *v4;
  int v5;
  CFStringRef v6;
  __CFString *v7;

  if (!*(_BYTE *)(v0 + 4))
  {
    v4 = (char *)swift_slowAlloc();
    v5 = sub_183B915F0();
    if (strerror_r(v5, v4, 0x80uLL))
      v3 = 0x6E776F6E6B6E55;
    else
      v3 = sub_183B91800();
    MEMORY[0x186DB563C](v4, -1, -1);
    return v3;
  }
  v1 = *(_DWORD *)v0;
  if (*(_BYTE *)(v0 + 4) != 1)
  {
    v6 = SecCopyErrorMessageString(v1, 0);
    if (!v6)
      return 0x6E776F6E6B6E55;
    v7 = (__CFString *)v6;
    v3 = sub_183B916E0();

    return v3;
  }
  result = (uint64_t)nwlog_get_string_for_dns_service_error(v1);
  if (result)
    return sub_183B91800();
  __break(1u);
  return result;
}

uint64_t NWError.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_BYTE *)(v0 + 4))
  {
    v2 = sub_183B92088();
  }
  else
  {
    v2 = 0;
    sub_183B91F14();
  }
  sub_183B917F4();
  sub_183275DB0();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_183275FC0()
{
  sub_1832761E8();
  return sub_183B921FC();
}

uint64_t sub_183275FE8()
{
  sub_1832761E8();
  return sub_183B921F0();
}

uint64_t NWError.errorCode.getter()
{
  uint64_t v0;
  uint64_t result;

  LODWORD(result) = *(_DWORD *)v0;
  if (!*(_BYTE *)(v0 + 4))
    LODWORD(result) = sub_183B915F0();
  return (int)result;
}

unint64_t NWError.errorUserInfo.getter()
{
  uint64_t inited;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7B18);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183B9EA20;
  result = *MEMORY[0x1E0C9AFB0];
  if (*MEMORY[0x1E0C9AFB0])
  {
    *(_QWORD *)(inited + 32) = sub_183B916E0();
    *(_QWORD *)(inited + 40) = v2;
    v3 = sub_183275DB0();
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = v3;
    *(_QWORD *)(inited + 56) = v4;
    return sub_1832F28CC(inited);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NWError._domain.getter()
{
  return sub_183B916E0();
}

uint64_t sub_1832760F0()
{
  uint64_t v0;
  uint64_t result;

  LODWORD(result) = *(_DWORD *)v0;
  if (!*(_BYTE *)(v0 + 4))
    LODWORD(result) = sub_183B915F0();
  return (int)result;
}

BOOL _s7Network7NWErrorO2eeoiySbAC_ACtFZ_0(int *a1, int *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  int v12;

  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 4);
  v5 = *a2;
  v6 = *((unsigned __int8 *)a2 + 4);
  if (v4)
  {
    v8 = v6 == 1 && v3 == v5;
    v10 = v6 == 2 && v3 == v5;
    if (v4 == 1)
      return v8;
    else
      return v10;
  }
  else if (*((_BYTE *)a2 + 4))
  {
    return 0;
  }
  else
  {
    v12 = sub_183B915F0();
    return v12 == sub_183B915F0();
  }
}

uint64_t storeEnumTagSinglePayload for NWError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t sub_1832761D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_1832761E0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4) = a2;
  return result;
}

unint64_t sub_1832761E8()
{
  unint64_t result;

  result = qword_1EDCD7B28;
  if (!qword_1EDCD7B28)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWError, &type metadata for NWError);
    atomic_store(result, (unint64_t *)&qword_1EDCD7B28);
  }
  return result;
}

void NWListener.__allocating_init(service:using:)(unsigned __int8 *a1)
{
  sub_18327964C(a1);
}

Swift::Void __swiftcall NWListener.cancel()()
{
  uint64_t v0;

  nw_listener_cancel(*(nw_listener_t *)(v0 + 24));
}

uint64_t NWListener.debugDescription.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 24), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

uint64_t NWListener.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NWListener.Service.Invitation.debugDescription.getter()
{
  unsigned __int8 *v0;
  __int128 v2;

  BYTE8(v2) = 0;
  *(_QWORD *)&v2 = *v0;
  sub_183B91F14();
  sub_183B917F4();
  sub_183B91F14();
  return *(_QWORD *)((char *)&v2 + 1);
}

Network::NWListener::Service::Invitation::Route_optional __swiftcall NWListener.Service.Invitation.Route.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (Network::NWListener::Service::Invitation::Route_optional)sub_1832765CC(v1);
}

uint64_t NWListener.Service.Invitation.Route.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x646F70656D6F68;
  if (*v0 != 1)
    v1 = 0x72656B61657073;
  if (*v0)
    return v1;
  else
    return 7496035;
}

uint64_t sub_1832763A4(char *a1, unsigned __int8 *a2)
{
  return sub_183311070(*a1, *a2);
}

uint64_t sub_1832763B0()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_183276448()
{
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832764BC()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

Network::NWListener::Service::Invitation::Route_optional sub_183276550(Swift::String *a1)
{
  return NWListener.Service.Invitation.Route.init(rawValue:)(*a1);
}

void sub_18327655C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE300000000000000;
  v4 = 0x646F70656D6F68;
  if (v2 != 1)
    v4 = 0x72656B61657073;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 7496035;
  if (!v5)
    v3 = 0xE700000000000000;
  *a1 = v6;
  a1[1] = v3;
}

void NWListener.Service.Invitation.route.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

Network::NWListener::Service::Invitation::Scope_optional __swiftcall NWListener.Service.Invitation.Scope.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (Network::NWListener::Service::Invitation::Scope_optional)sub_1832765CC(v1);
}

uint64_t sub_1832765CC@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_183B91FC8();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t NWListener.Service.Invitation.Scope.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x73646E65697266;
  if (*v0 != 1)
    v1 = 0x656E6F7972657665;
  if (*v0)
    return v1;
  else
    return 0x74696D69786F7270;
}

Network::NWListener::Service::Invitation::Scope_optional sub_183276680(Swift::String *a1)
{
  return NWListener.Service.Invitation.Scope.init(rawValue:)(*a1);
}

void NWListener.Service.Invitation.scope.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *static NWListener.Service.Invitation.wrangler(route:scope:)@<X0>(_BYTE *result@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  char v3;

  v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

uint64_t sub_1832766B0()
{
  unsigned __int8 *v0;
  __int128 v2;

  BYTE8(v2) = 0;
  *(_QWORD *)&v2 = *v0;
  sub_183B91F14();
  sub_183B917F4();
  sub_183B91F14();
  return *(_QWORD *)((char *)&v2 + 1);
}

uint64_t NWListener.Service.txtRecordObject.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  *a1 = v2;
  a1[1] = v3;
  return sub_1832506C0(v2);
}

void NWListener.Service.invitation.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 89);
}

uint64_t NWListener.Service.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_WORD *)(v0 + 89);
  if (*(_QWORD *)(v0 + 16))
  {
    v7 = *(_QWORD *)(v0 + 8);
    swift_bridgeObjectRetain();
    sub_183B917F4();
  }
  else
  {
    v7 = 11818;
  }
  swift_bridgeObjectRetain();
  sub_183B917F4();
  swift_bridgeObjectRelease();
  if (v2)
    sub_183B917F4();
  sub_183B917F4();
  v5 = v7;
  if (v3 >> 60 != 15)
    __asm { BR              X9 }
  if (v1)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B91F14();
    sub_183253844(v1);
    v5 = 0;
  }
  if (v4 != 3)
  {
    sub_183B917F4();
    swift_bridgeObjectRelease();
    sub_183B917F4();
    sub_183B91F14();
    return 0;
  }
  return v5;
}

uint64_t NWListener.Service.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWListener.Service.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWListener.Service.domain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWListener.Service.txtRecordObject.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = sub_183253844(*(_QWORD *)(v1 + 56));
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = v3;
  return result;
}

uint64_t (*NWListener.Service.txtRecordObject.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  *a1 = v3;
  a1[1] = v4;
  sub_1832506C0(v3);
  return sub_183276B80;
}

uint64_t sub_183276B80(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  v5 = *(_QWORD *)(v3 + 56);
  if ((a2 & 1) != 0)
  {
    sub_1832506C0(*a1);
    sub_183253844(v5);
    *(_QWORD *)(v3 + 56) = v4;
    *(_QWORD *)(v3 + 64) = v2;
    return sub_183253844(v4);
  }
  else
  {
    result = sub_183253844(*(_QWORD *)(v3 + 56));
    *(_QWORD *)(v3 + 56) = v4;
    *(_QWORD *)(v3 + 64) = v2;
  }
  return result;
}

uint64_t NWListener.Service.txtRecord.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  sub_183261798(v1, *(_QWORD *)(v0 + 80));
  return v1;
}

uint64_t NWListener.Service.noAutoRename.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t NWListener.Service.noAutoRename.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 88) = result;
  return result;
}

_BYTE *(*NWListener.Service.noAutoRename.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 88);
  return sub_183276C5C;
}

_BYTE *sub_183276C5C(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 88) = result[8];
  return result;
}

_WORD *NWListener.Service.invitation.setter(_WORD *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 89) = *result;
  return result;
}

_WORD *(*NWListener.Service.invitation.modify(uint64_t a1))(_WORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_WORD *)(a1 + 8) = *(_WORD *)(v1 + 89);
  return sub_183276C94;
}

_WORD *sub_183276C94(_WORD *result)
{
  *(_WORD *)(*(_QWORD *)result + 89) = result[4];
  return result;
}

uint64_t NWListener.Service.init(name:type:domain:txtRecord:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_BYTE *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 8) = result;
  *(_QWORD *)(a9 + 16) = a2;
  *(_QWORD *)(a9 + 24) = a3;
  *(_QWORD *)(a9 + 32) = a4;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  *(_QWORD *)(a9 + 72) = a7;
  *(_QWORD *)(a9 + 80) = a8;
  *(_BYTE *)a9 = 0;
  *(_QWORD *)(a9 + 56) = 0;
  *(_QWORD *)(a9 + 64) = 0;
  *(_WORD *)(a9 + 89) = 3;
  return result;
}

__n128 NWListener.Service.init(name:type:domain:txtRecord:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __n128 *a7@<X6>, uint64_t a8@<X8>)
{
  __n128 result;

  *(_BYTE *)(a8 + 88) = 0;
  *(_QWORD *)(a8 + 8) = a1;
  *(_QWORD *)(a8 + 16) = a2;
  *(_QWORD *)(a8 + 24) = a3;
  *(_QWORD *)(a8 + 32) = a4;
  *(_QWORD *)(a8 + 40) = a5;
  *(_QWORD *)(a8 + 48) = a6;
  *(_OWORD *)(a8 + 72) = xmmword_183B9FD50;
  result = *a7;
  *(__n128 *)(a8 + 56) = *a7;
  *(_BYTE *)a8 = 0;
  *(_WORD *)(a8 + 89) = 3;
  return result;
}

double NWListener.Service.init(applicationService:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_BYTE *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = a1;
  *(_QWORD *)(a3 + 32) = a2;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 72) = xmmword_183B9FD50;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_BYTE *)a3 = 1;
  *(_WORD *)(a3 + 89) = 3;
  return result;
}

double NWListener.Service.init(applicationService:invitation:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  double result;

  *(_BYTE *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = a1;
  *(_QWORD *)(a4 + 32) = a2;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a4 + 72) = xmmword_183B9FD50;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_BYTE *)a4 = 1;
  *(_WORD *)(a4 + 89) = *a3;
  return result;
}

NSObject *sub_183276D68()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  NSObject *bonjour_service;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;
  NSObject *txt_record;
  int v12;

  if (*(_BYTE *)v0 != 1)
  {
    v4 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 56);
    txt_record = *(NSObject **)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 80);
    v12 = *(unsigned __int8 *)(v0 + 88);
    if (*(_QWORD *)(v0 + 16))
      v7 = (const char *)(sub_183B91758() + 32);
    else
      v7 = 0;
    v8 = (const char *)(sub_183B91758() + 32);
    if (v4)
      v9 = (const char *)(sub_183B91758() + 32);
    else
      v9 = 0;
    bonjour_service = nw_advertise_descriptor_create_bonjour_service(v7, v8, v9);
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    if (v6 >> 60 != 15)
      __asm { BR              X10 }
    if (v5)
    {
      if (!bonjour_service)
        goto LABEL_22;
      nw_advertise_descriptor_set_txt_record_object(bonjour_service, txt_record);
    }
    if (v12)
    {
      if (bonjour_service)
      {
        nw_advertise_descriptor_set_no_auto_rename(bonjour_service, 1);
        return bonjour_service;
      }
      __break(1u);
    }
    else if (bonjour_service)
    {
      return bonjour_service;
    }
    __break(1u);
LABEL_22:
    __break(1u);
    JUMPOUT(0x183277118);
  }
  v1 = *(unsigned __int16 *)(v0 + 89);
  v2 = sub_183B91758();
  bonjour_service = nw_advertise_descriptor_create_application_service((const char *)(v2 + 32));
  swift_release();
  if (v1 != 3)
    nw_advertise_descriptor_set_invitation(bonjour_service, (v1 >> 8) + 1, v1 + 1);
  return bonjour_service;
}

uint64_t (*NWListener.newConnectionHandler.getter())(uint64_t a1)
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 48;
  os_unfair_lock_lock(v1 + 48);
  sub_1832772F4(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_1832798BC;
}

void sub_183277244(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18327BCF0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  NWListener.newConnectionHandler.setter((uint64_t)v4, v3);
}

uint64_t sub_1832772C4(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;

  v3 = a1;
  return a2(&v3);
}

uint64_t sub_1832772F4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1832756D4;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_183061488(v3);
}

uint64_t (*NWListener.newConnectionHandler.modify(uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  __int128 v9;
  __int128 v10;

  a1[2] = (uint64_t (*)(uint64_t))v1;
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t *)&v3[4];
  v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_1832772F4(v4, &v10);
  os_unfair_lock_unlock(v5);
  v6 = (uint64_t (*)(uint64_t))v10;
  if ((_QWORD)v10)
  {
    v9 = v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_18327BCF0;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return sub_183277410;
}

uint64_t sub_183277410(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWListener.newConnectionHandler.setter, (void (*)(uint64_t, uint64_t))sub_183257670, (uint64_t (*)(uint64_t, uint64_t))sub_182FEDBA4);
}

uint64_t (*NWListener.newConnectionGroupHandler.getter())(uint64_t)
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 48;
  os_unfair_lock_lock(v1 + 48);
  sub_183277720(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_18327BCF0;
}

void sub_1832774C8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18327BCF0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  NWListener.newConnectionGroupHandler.setter((uint64_t)v4, v3);
}

void NWListener.newConnectionGroupHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v5 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 192));
  v6 = *(_QWORD *)(v5 + 32);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 192));
  if (a1)
  {
    v7 = *(NSObject **)(v2 + 24);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v10[4] = sub_1832798EC;
    v10[5] = v8;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_182FC77FC;
    v10[3] = &block_descriptor_25_0;
    v9 = _Block_copy(v10);
    sub_183061488(a1);
    sub_183061488(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_listener_set_new_connection_group_handler(v7, v9);
    sub_1830630AC(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_1830630AC(a1);
  }
  else
  {
    nw_listener_set_new_connection_handler(*(nw_listener_t *)(v2 + 24), 0);
  }
}

uint64_t sub_1832776A8(uint64_t a1, void (*a2)(void))
{
  NSObject *v3;
  uint64_t result;

  type metadata accessor for NWConnectionGroup();
  swift_allocObject();
  v3 = swift_unknownObjectRetain();
  result = sub_1832E0A34(v3);
  if (result)
  {
    a2();
    return swift_release();
  }
  return result;
}

uint64_t sub_183277720@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_18327BC84;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_183061488(v3);
}

uint64_t (*NWListener.newConnectionGroupHandler.modify(uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  __int128 v9;
  __int128 v10;

  a1[2] = (uint64_t (*)(uint64_t))v1;
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_183277720(v4, &v10);
  os_unfair_lock_unlock(v5);
  v6 = (uint64_t (*)(uint64_t))v10;
  if ((_QWORD)v10)
  {
    v9 = v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_18327BCF0;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return sub_18327783C;
}

uint64_t sub_18327783C(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWListener.newConnectionGroupHandler.setter, (void (*)(uint64_t, uint64_t))sub_183257670, (uint64_t (*)(uint64_t, uint64_t))sub_182FEDBA4);
}

void NWListener.state.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 192));
  v4 = *(_DWORD *)(v3 + 184);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v3 + 188);
  *(_DWORD *)a1 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 192));
}

uint64_t (*NWListener.stateUpdateHandler.getter())()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 48;
  os_unfair_lock_lock(v1 + 48);
  sub_183215DE8(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_1832576D8;
}

uint64_t sub_18327793C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832576D8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  return NWListener.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t (*NWListener.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)();
  uint64_t v7;
  __int128 v9;
  uint64_t (*v10[4])();

  a1[2] = (uint64_t (*)())v1;
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_183215DE8(v4, v10);
  os_unfair_lock_unlock(v5);
  v6 = v10[0];
  if (v10[0])
  {
    v9 = *(_OWORD *)v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832576D8;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_183277A68;
}

uint64_t sub_183277A68(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, NWListener.stateUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_183061488, (uint64_t (*)(uint64_t, uint64_t))sub_182FEDBA4);
}

uint64_t NWListener.parameters.getter()
{
  return swift_retain();
}

void NWListener.service.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_183277C70(v4, a1);
  os_unfair_lock_unlock(v5);
}

double sub_183277AE4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  double result;
  _OWORD v12[4];
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  char v16;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_183277C70(v4, (uint64_t)v12);
  os_unfair_lock_unlock(v5);
  v6 = v14;
  v7 = v15;
  v8 = v16;
  v9 = v12[1];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v9;
  v10 = v12[3];
  *(_OWORD *)(a2 + 32) = v12[2];
  *(_OWORD *)(a2 + 48) = v10;
  result = *(double *)&v13;
  *(_OWORD *)(a2 + 64) = v13;
  *(_QWORD *)(a2 + 80) = v6;
  *(_BYTE *)(a2 + 90) = v8;
  *(_WORD *)(a2 + 88) = v7;
  return result;
}

uint64_t sub_183277B74(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  _BYTE v7[96];

  sub_1832798F4(a1, (uint64_t)v7);
  v3 = *(os_unfair_lock_s **)(*(_QWORD *)a2 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 48;
  sub_1832799AC((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_183279A10);
  os_unfair_lock_lock(v5);
  sub_18327BC2C(v4);
  os_unfair_lock_unlock(v5);
  return sub_1832799AC((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_18327993C);
}

uint64_t NWListener.service.setter(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  _BYTE v6[96];

  sub_1832798F4(a1, (uint64_t)v6);
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 48;
  os_unfair_lock_lock(v2 + 48);
  sub_183277CF0(v3, (uint64_t)v6, v1);
  os_unfair_lock_unlock(v4);
  return sub_1832799AC((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_18327993C);
}

uint64_t sub_183277C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  __int16 v14;

  v3 = *(_QWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 136);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_BYTE *)(a1 + 154);
  v14 = *(_WORD *)(a1 + 152);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 80) = v12;
  *(_BYTE *)(a2 + 90) = v13;
  *(_WORD *)(a2 + 88) = v14;
  return sub_183279A10(v3, v2, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

void sub_183277CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  v15 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  v13 = *(_OWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 144);
  sub_1832798F4(a2, a1 + 64);
  sub_1832799AC(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_183279A10);
  sub_18327993C(v4, v5, v6, v7, v8, v9, v15, v14, v13, *((uint64_t *)&v13 + 1), v10);
  sub_1832798F4(a2, (uint64_t)&v17);
  if ((_QWORD)v18)
  {
    v11 = *(NSObject **)(a3 + 24);
    sub_1832799AC(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_183279A10);
    swift_unknownObjectRetain();
    v12 = sub_183276D68();
    nw_listener_set_advertise_descriptor(v11, v12);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1832799AC(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_18327993C);
  }
  else
  {
    nw_listener_set_advertise_descriptor(*(nw_listener_t *)(a3 + 24), 0);
  }
}

void (*NWListener.service.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = malloc(0x138uLL);
  *a1 = v3;
  v4 = *(os_unfair_lock_s **)(v1 + 16);
  v3[36] = v1;
  v3[37] = v4;
  v5 = (uint64_t)&v4[4];
  v6 = v4 + 48;
  os_unfair_lock_lock(v4 + 48);
  sub_183277C70(v5, (uint64_t)(v3 + 24));
  v3[38] = 0;
  os_unfair_lock_unlock(v6);
  return sub_183277EF4;
}

void sub_183277EF4(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 24);
  v4 = (os_unfair_lock_s *)v2[37];
  v5 = v2[38];
  v6 = v2[36];
  v7 = v4 + 48;
  v8 = (uint64_t)&v4[4];
  if ((a2 & 1) == 0)
  {
    sub_1832798F4(v3, (uint64_t)(v2 + 12));
    os_unfair_lock_lock(v7);
    sub_183277CF0(v8, (uint64_t)(v2 + 12), v6);
    os_unfair_lock_unlock(v7);
    sub_1832799AC((uint64_t)(v2 + 12), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_18327993C);
    goto LABEL_5;
  }
  sub_1832798F4(v3, (uint64_t)v2);
  sub_1832799AC((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_183279A10);
  os_unfair_lock_lock(v7);
  sub_183277CF0(v8, (uint64_t)v2, v6);
  v9 = (os_unfair_lock_s *)(v2[37] + 192);
  if (!v5)
  {
    os_unfair_lock_unlock(v9);
    sub_1832799AC((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_18327993C);
    sub_18327993C(v2[24], v2[25], v2[26], v2[27], v2[28], v2[29], v2[30], v2[31], v2[32], v2[33], v2[34]);
LABEL_5:
    free(v2);
    return;
  }
  os_unfair_lock_unlock(v9);
  __break(1u);
}

uint64_t static NWListener.InfiniteConnectionLimit.getter()
{
  return 0xFFFFFFFFLL;
}

uint64_t NWListener.newConnectionLimit.getter()
{
  uint64_t v0;

  return nw_listener_get_new_connection_limit(*(nw_listener_t *)(v0 + 24));
}

void sub_183278050(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *a1;
  if ((*a1 & 0x8000000000000000) != 0 || HIDWORD(v3))
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_listener_set_new_connection_limit(*(nw_listener_t *)(*(_QWORD *)a2 + 24), v3);
  }
}

void NWListener.newConnectionLimit.setter(unint64_t new_connection_limit)
{
  uint64_t v1;

  if ((new_connection_limit & 0x8000000000000000) != 0 || HIDWORD(new_connection_limit))
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_listener_set_new_connection_limit(*(nw_listener_t *)(v1 + 24), new_connection_limit);
  }
}

void (*NWListener.newConnectionLimit.modify(_QWORD *a1))(unint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 24);
  a1[1] = v3;
  *a1 = nw_listener_get_new_connection_limit(v3);
  return sub_1832781F4;
}

void sub_1832781F4(unint64_t *a1)
{
  unint64_t v1;

  v1 = *a1;
  if ((*a1 & 0x8000000000000000) != 0 || HIDWORD(v1))
  {
    sub_183B91F50();
    __break(1u);
  }
  else
  {
    nw_listener_set_new_connection_limit((nw_listener_t)a1[1], v1);
  }
}

uint64_t NWListener.port.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = nw_listener_get_port(*(nw_listener_t *)(v1 + 24));
  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = 0;
  return result;
}

uint64_t (*NWListener.serviceRegistrationUpdateHandler.getter())()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 48;
  os_unfair_lock_lock(v1 + 48);
  sub_18327879C(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_182FEDAC0;
}

double sub_183278370@<D0>(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  double result;
  __int128 v9;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v6 = v5 + 4;
  v7 = v5 + 48;
  os_unfair_lock_lock(v5 + 48);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_1832783E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832576D8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  NWListener.serviceRegistrationUpdateHandler.setter((uint64_t)v4, v3);
}

void NWListener.serviceRegistrationUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v5 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 192));
  v6 = *(_QWORD *)(v5 + 64);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 64) = a1;
  *(_QWORD *)(v5 + 72) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 192));
  if (a1)
  {
    v7 = *(NSObject **)(v2 + 24);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v10[4] = sub_183279A80;
    v10[5] = v8;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_18327874C;
    v10[3] = &block_descriptor_48;
    v9 = _Block_copy(v10);
    sub_183061488(a1);
    sub_183061488(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_listener_set_advertised_endpoint_changed_handler(v7, v9);
    sub_1830630AC(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_1830630AC(a1);
  }
  else
  {
    nw_listener_set_advertised_endpoint_changed_handler(*(nw_listener_t *)(v2 + 24), 0);
  }
}

uint64_t sub_1832785C4(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  uint64_t v16;

  v4 = type metadata accessor for NWListener.ServiceRegistrationChange();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NWEndpoint();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_unknownObjectRetain();
  sub_183056F9C(v14, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return sub_18327BC44((uint64_t)v9);
  sub_1830589B0((uint64_t)v9, (uint64_t)v13);
  sub_1832616F4((uint64_t)v13, (uint64_t)v6);
  swift_storeEnumTagMultiPayload();
  a3(v6);
  sub_183058AE0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for NWListener.ServiceRegistrationChange);
  return sub_183058AE0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
}

uint64_t sub_18327874C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5 = swift_unknownObjectRetain();
  v4(v5, a3);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_18327879C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_182FEDAC0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_183061488(v3);
}

uint64_t (*NWListener.serviceRegistrationUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)();
  uint64_t v7;
  __int128 v9;
  uint64_t (*v10[4])();

  a1[2] = (uint64_t (*)())v1;
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_18327879C(v4, v10);
  os_unfair_lock_unlock(v5);
  v6 = v10[0];
  if (v10[0])
  {
    v9 = *(_OWORD *)v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832576D8;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_1832788B8;
}

uint64_t sub_1832788B8(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWListener.serviceRegistrationUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_183061488, (uint64_t (*)(uint64_t, uint64_t))sub_1830630AC);
}

_QWORD *NWListener.__allocating_init(_:)(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = nw_listener_copy_parameters(a1);
  type metadata accessor for NWParameters();
  v3 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v3 + 16) = v4;
  v5 = (_QWORD *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB5F0);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 192) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 155) = 0u;
  *(_QWORD *)(v6 + 176) = 0;
  *(_DWORD *)(v6 + 184) = 0;
  *(_WORD *)(v6 + 188) = 128;
  v5[3] = a1;
  v5[4] = v3;
  v5[2] = v6;
  return v5;
}

uint64_t NWListener.__allocating_init(using:on:)(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  NWListener.init(using:on:)(a1, a2);
  return v4;
}

void NWListener.__allocating_init(applicationService:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  _QWORD v10[5];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  __int16 v15;
  char v16;
  unsigned __int16 v17;

  v17 = 0;
  v5 = swift_allocObject();
  v6 = swift_retain();
  NWListener.init(using:on:)(v6, &v17);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v10[0] = 1;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = a1;
    v10[4] = a2;
    v11 = 0u;
    v12 = 0u;
    v13 = 0;
    v14 = 0xF000000000000000;
    v15 = 768;
    v7 = *(os_unfair_lock_s **)(v5 + 16);
    v8 = (uint64_t)&v7[4];
    v9 = v7 + 48;
    v16 = 0;
    swift_retain();
    os_unfair_lock_lock(v9);
    sub_183277CF0(v8, (uint64_t)v10, v5);
    os_unfair_lock_unlock(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_183253844(0);
    sub_183084848(0, 0xF000000000000000);
    swift_release();
    swift_release();
  }
}

_QWORD *NWListener.__allocating_init(connection:parameters:)(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  os_unfair_lock_s *v6;
  nw_listener_t v7;
  _QWORD *v8;
  uint64_t v9;
  nw_parameters_t parameters;

  v3 = *(NSObject **)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v6);
  sub_183226978(v5, &parameters);
  os_unfair_lock_unlock(v6);
  v7 = nw_listener_create_with_connection(v3, parameters);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    v8 = (_QWORD *)swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB5F0);
    v9 = swift_allocObject();
    *(_DWORD *)(v9 + 192) = 0;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 155) = 0u;
    *(_QWORD *)(v9 + 176) = 0;
    *(_DWORD *)(v9 + 184) = 0;
    *(_WORD *)(v9 + 188) = 128;
    v8[3] = v7;
    v8[4] = a2;
    v8[2] = v9;
  }
  else
  {
    swift_release();
    return 0;
  }
  return v8;
}

_QWORD *NWListener.__allocating_init(launchdSocketKey:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v7;

  swift_retain();
  result = _s7Network10NWListenerC7launchd5usingACSgSS_AA12NWParametersCtcfC_0(a1, a2, a3);
  if (result)
  {
    v7 = result;
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *NWListener.queue.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (os_unfair_lock_s *)(v1 + 192);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 192));
  v3 = *(void **)(v1 + 176);
  v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t static NWListener.registrationIterator(on:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];
  int v9;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD020);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *a1;
  v9 = 128;
  v10 = v5;
  (*(void (**)(_BYTE *, _QWORD))(v6 + 104))(v4, *MEMORY[0x1E0DF0A50]);
  return sub_183B91B90();
}

uint64_t NWListener.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t NWListener.__deallocating_deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_183278E30()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)v0 + 24), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

void sub_183278E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (sub_183B912D8())
  {
    if (__OFSUB__(a1, sub_183B912FC()))
    {
      __break(1u);
      JUMPOUT(0x183278F74);
    }
    sub_183B912F0();
    if (a4)
LABEL_4:
      __asm { BR              X10 }
  }
  else
  {
    sub_183B912F0();
    if (a4)
      goto LABEL_4;
  }
  __break(1u);
  JUMPOUT(0x183278F14);
}

uint64_t _s7Network10NWListenerC7ServiceV10InvitationV2eeoiySbAG_AGtFZ_0(unsigned __int8 *a1, _BYTE *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = *a1;
  v3 = a1[1];
  v4 = a2[1];
  v5 = 0x646F70656D6F68;
  if (v2 != 1)
    v5 = 0x72656B61657073;
  if (*a1)
    v6 = v5;
  else
    v6 = 7496035;
  if (v2)
    v7 = 0xE700000000000000;
  else
    v7 = 0xE300000000000000;
  v8 = 0x646F70656D6F68;
  if (*a2 != 1)
    v8 = 0x72656B61657073;
  if (*a2)
    v9 = v8;
  else
    v9 = 7496035;
  if (*a2)
    v10 = 0xE700000000000000;
  else
    v10 = 0xE300000000000000;
  if (v6 == v9 && v7 == v10)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  v11 = sub_183B920F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = 0;
  if ((v11 & 1) != 0)
  {
LABEL_21:
    v13 = 0xE900000000000079;
    v14 = 0x74696D69786F7270;
    v15 = 0xE700000000000000;
    v16 = 0x73646E65697266;
    if (v3 != 1)
    {
      v16 = 0x656E6F7972657665;
      v15 = 0xE800000000000000;
    }
    if (v3)
      v17 = v16;
    else
      v17 = 0x74696D69786F7270;
    if (v3)
      v18 = v15;
    else
      v18 = 0xE900000000000079;
    if (v4)
    {
      if (v4 != 1)
      {
        v13 = 0xE800000000000000;
        if (v17 != 0x656E6F7972657665)
          goto LABEL_37;
        goto LABEL_35;
      }
      v13 = 0xE700000000000000;
      v14 = 0x73646E65697266;
    }
    if (v17 != v14)
      goto LABEL_37;
LABEL_35:
    if (v18 == v13)
    {
      v12 = 1;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
    }
LABEL_37:
    v12 = sub_183B920F4();
    goto LABEL_38;
  }
  return v12 & 1;
}

BOOL _s7Network10NWListenerC7ServiceV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _BOOL8 result;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  BOOL is_equal;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  NSObject *right;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 80);
  if (v3)
  {
    if (!v9)
      return 0;
    v43 = *(unsigned __int8 *)(a2 + 88);
    v44 = *(unsigned __int8 *)(a1 + 88);
    v45 = *(_QWORD *)(a2 + 72);
    v46 = *(_QWORD *)(a1 + 72);
    right = *(NSObject **)(a2 + 64);
    v41 = *(_QWORD *)(a2 + 56);
    v42 = *(_QWORD *)(a1 + 56);
    v38 = *(unsigned __int16 *)(a2 + 89);
    v39 = *(unsigned __int16 *)(a1 + 89);
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8) || v3 != v9)
    {
      v15 = sub_183B920F4();
      result = 0;
      if ((v15 & 1) == 0)
        return result;
    }
  }
  else
  {
    v43 = *(unsigned __int8 *)(a2 + 88);
    v44 = *(unsigned __int8 *)(a1 + 88);
    v45 = *(_QWORD *)(a2 + 72);
    v46 = *(_QWORD *)(a1 + 72);
    right = *(NSObject **)(a2 + 64);
    v41 = *(_QWORD *)(a2 + 56);
    v42 = *(_QWORD *)(a1 + 56);
    v38 = *(unsigned __int16 *)(a2 + 89);
    v39 = *(unsigned __int16 *)(a1 + 89);
    if (v9)
      return 0;
  }
  if (v4 != v10 || v5 != v12)
  {
    v17 = sub_183B920F4();
    result = 0;
    if ((v17 & 1) == 0)
      return result;
  }
  if (v7)
  {
    if (!v13)
      return 0;
    if (v6 != v11 || v7 != v13)
    {
      v18 = sub_183B920F4();
      result = 0;
      if ((v18 & 1) == 0)
        return result;
    }
  }
  else if (v13)
  {
    return 0;
  }
  if (v8 >> 60 == 15)
  {
    v19 = v46;
    if (v14 >> 60 == 15)
    {
      if (v44 == v43)
        goto LABEL_28;
      return 0;
    }
LABEL_23:
    v20 = v19;
    sub_183261798(v19, v8);
    sub_183261798(v45, v14);
    sub_183084848(v20, v8);
    sub_183084848(v45, v14);
    return 0;
  }
  v19 = v46;
  if (v14 >> 60 == 15)
    goto LABEL_23;
  sub_183261798(v46, v8);
  sub_183261798(v45, v14);
  sub_1832FCBCC(v46, v8);
  v22 = v21;
  sub_183084848(v45, v14);
  sub_183084848(v46, v8);
  result = 0;
  if ((v22 & 1) == 0 || ((v44 ^ v43) & 1) != 0)
    return result;
LABEL_28:
  if (!v42)
  {
    v26 = 0;
    v23 = v41;
    if (!v41)
      goto LABEL_33;
    goto LABEL_42;
  }
  v23 = v41;
  if (!v41)
  {
    v26 = v42;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
LABEL_42:
    sub_1832506C0(v23);
    sub_183253844(v26);
    sub_183253844(v23);
    return 0;
  }
  swift_bridgeObjectRetain_n();
  v24 = swift_unknownObjectRetain_n();
  is_equal = nw_txt_record_is_equal(v24, right);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_183253844(v42);
  if (!is_equal)
    return 0;
LABEL_33:
  result = v38 == 3 && v39 == 3;
  if (v39 != 3 && v38 != 3)
  {
    v27 = 7496035;
    if ((_BYTE)v39)
    {
      v28 = 0xE700000000000000;
      if (v39 == 1)
        v29 = 0x646F70656D6F68;
      else
        v29 = 0x72656B61657073;
    }
    else
    {
      v28 = 0xE300000000000000;
      v29 = 7496035;
    }
    if ((_BYTE)v38)
    {
      v30 = 0xE700000000000000;
      if (v38 == 1)
        v27 = 0x646F70656D6F68;
      else
        v27 = 0x72656B61657073;
    }
    else
    {
      v30 = 0xE300000000000000;
    }
    if (v29 == v27 && v28 == v30)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v31 = sub_183B920F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v31 & 1) == 0)
        return result;
    }
    v32 = v38 >> 8;
    v33 = 0xE900000000000079;
    v34 = 0x74696D69786F7270;
    if (v39 >> 8)
    {
      if (v39 >> 8 == 1)
      {
        v35 = 0xE700000000000000;
        v36 = 0x73646E65697266;
      }
      else
      {
        v35 = 0xE800000000000000;
        v36 = 0x656E6F7972657665;
      }
    }
    else
    {
      v36 = 0x74696D69786F7270;
      v35 = 0xE900000000000079;
    }
    if (v32)
    {
      if (v32 == 1)
      {
        v33 = 0xE700000000000000;
        v34 = 0x73646E65697266;
      }
      else
      {
        v33 = 0xE800000000000000;
        v34 = 0x656E6F7972657665;
      }
    }
    if (v36 == v34 && v35 == v33)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    else
    {
      v37 = sub_183B920F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v37 & 1;
    }
  }
  return result;
}

void sub_18327964C(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  unint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[11];
  __int16 v27;
  char v28;
  unsigned __int16 v29;

  v21 = *a1;
  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  v19 = *((_QWORD *)a1 + 3);
  v20 = v2;
  v23 = *((_QWORD *)a1 + 4);
  v24 = v3;
  v18 = *((_QWORD *)a1 + 5);
  v4 = *((_QWORD *)a1 + 7);
  v25 = *((_QWORD *)a1 + 6);
  v5 = *((_QWORD *)a1 + 8);
  v6 = *((_QWORD *)a1 + 9);
  v22 = *((_QWORD *)a1 + 10);
  v7 = a1[88];
  v8 = *(_WORD *)(a1 + 89);
  v29 = 0;
  type metadata accessor for NWListener();
  v9 = swift_allocObject();
  v10 = swift_retain();
  NWListener.init(using:on:)(v10, &v29);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183253844(v4);
    sub_183084848(v6, v22);
  }
  else
  {
    v17 = (uint64_t)&v17;
    v26[0] = v21;
    v26[1] = v20;
    v11 = v7 | (v8 << 8);
    v26[2] = v24;
    v26[3] = v19;
    v26[4] = v23;
    v26[5] = v18;
    v26[6] = v25;
    v26[7] = v4;
    v12 = v4;
    v26[8] = v5;
    v26[9] = v6;
    v13 = v22;
    v26[10] = v22;
    v28 = HIBYTE(v8);
    v14 = *(os_unfair_lock_s **)(v9 + 16);
    v15 = (uint64_t)&v14[4];
    v16 = v14 + 48;
    v27 = v11;
    swift_retain();
    os_unfair_lock_lock(v16);
    sub_183277CF0(v15, (uint64_t)v26, v9);
    os_unfair_lock_unlock(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183253844(v12);
    sub_183084848(v6, v13);
    swift_release();
    swift_release();
  }
}

uint64_t sub_183279838()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_183279864()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_183279898()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1832798BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_1832798EC(uint64_t a1)
{
  uint64_t v1;

  return sub_1832776A8(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_1832798F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCD7BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18327993C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183253844(a8);
    return sub_183084848(a10, a11);
  }
  return result;
}

uint64_t sub_1832799AC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(unsigned __int16 *)(a1 + 88) | (*(unsigned __int8 *)(a1 + 90) << 16));
  return a1;
}

uint64_t sub_183279A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832506C0(a8);
    return sub_183261798(a10, a11);
  }
  return result;
}

uint64_t sub_183279A80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1832785C4(a1, a2, *(void (**)(char *))(v2 + 16));
}

_QWORD *_s7Network10NWListenerC7launchd5usingACSgSS_AA12NWParametersCtcfC_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  void *v7;
  uint64_t v8;
  _BOOL8 v9;
  _QWORD *v10;
  uint64_t v11;
  void *v13;

  v4 = *(os_unfair_lock_s **)(a3 + 16);
  v5 = v4 + 4;
  v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_183226978(v5, &v13);
  os_unfair_lock_unlock(v6);
  v7 = v13;
  v8 = sub_183B91758();
  swift_bridgeObjectRelease();
  v9 = nw_listener_create_with_launchd_key(v7, (const char *)(v8 + 32));
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for NWListener();
  v10 = (_QWORD *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB5F0);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 192) = 0;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 155) = 0u;
  *(_QWORD *)(v11 + 176) = 0;
  *(_DWORD *)(v11 + 184) = 0;
  *(_WORD *)(v11 + 188) = 128;
  v10[3] = v9;
  v10[4] = a3;
  v10[2] = v11;
  return v10;
}

unint64_t sub_183279B9C()
{
  unint64_t result;

  result = qword_1EDCDD488;
  if (!qword_1EDCDD488)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWListener.Service.Invitation.Route, &type metadata for NWListener.Service.Invitation.Route);
    atomic_store(result, (unint64_t *)&qword_1EDCDD488);
  }
  return result;
}

unint64_t sub_183279BE4()
{
  unint64_t result;

  result = qword_1EDCDD490;
  if (!qword_1EDCDD490)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWListener.Service.Invitation.Scope, &type metadata for NWListener.Service.Invitation.Scope);
    atomic_store(result, (unint64_t *)&qword_1EDCDD490);
  }
  return result;
}

uint64_t sub_183279C28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  *a2 = v3;
  a2[1] = v2;
  return sub_1832506C0(v3);
}

uint64_t sub_183279C38(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = *(_QWORD *)(a2 + 56);
  sub_1832506C0(*a1);
  result = sub_183253844(v5);
  *(_QWORD *)(a2 + 56) = v3;
  *(_QWORD *)(a2 + 64) = v4;
  return result;
}

uint64_t sub_183279C88@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 88);
  return result;
}

_BYTE *sub_183279C94(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 88) = *result;
  return result;
}

uint64_t sub_183279CA0@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(result + 89);
  return result;
}

_WORD *sub_183279CAC(_WORD *result, uint64_t a2)
{
  *(_WORD *)(a2 + 89) = *result;
  return result;
}

double sub_183279CB8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_183278370(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_1832772F4, a2);
}

double sub_183279CD8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_183278370(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_183277720, a2);
}

double sub_183279CF8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_183278370(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_183215DE8, a2);
}

uint64_t sub_183279D20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = nw_listener_get_new_connection_limit(*(nw_listener_t *)(*(_QWORD *)a1 + 24));
  *a2 = result;
  return result;
}

double sub_183279D54@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_183278370(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_18327879C, a2);
}

uint64_t method lookup function for NWListener()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWListener.__allocating_init(using:on:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t destroy for NWListener.Service(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = a1[7];
  if (result)
  {
    swift_bridgeObjectRelease();
    result = swift_unknownObjectRelease();
  }
  v3 = a1[10];
  if (v3 >> 60 != 15)
    return sub_18308485C(a1[9], v3);
  return result;
}

uint64_t initializeWithCopy for NWListener.Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v8 = (_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v9;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v8;
  }
  v10 = (uint64_t *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v10;
  }
  else
  {
    v12 = *v10;
    sub_18324A994(*v10, *(_QWORD *)(a2 + 80));
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v11;
  }
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  return a1;
}

uint64_t assignWithCopy for NWListener.Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 56) = v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      goto LABEL_8;
    }
    sub_1832548C0(a1 + 56);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_8:
  v5 = (uint64_t *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80) >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      v8 = *v5;
      sub_18324A994(*v5, *(_QWORD *)(a2 + 80));
      v9 = *(_QWORD *)(a1 + 72);
      v10 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 72) = v8;
      *(_QWORD *)(a1 + 80) = v6;
      sub_18308485C(v9, v10);
      goto LABEL_15;
    }
    sub_183275214(a1 + 72);
    goto LABEL_13;
  }
  if (v6 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v5;
    goto LABEL_15;
  }
  v7 = *v5;
  sub_18324A994(*v5, *(_QWORD *)(a2 + 80));
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v6;
LABEL_15:
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  return a1;
}

__n128 __swift_memcpy91_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 75) = *(_OWORD *)(a2 + 75);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for NWListener.Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 56) = v7;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
    sub_1832548C0(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_6:
  v8 = (_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  if (v9 >> 60 != 15)
  {
    v10 = *(_QWORD *)(a2 + 80);
    if (v10 >> 60 != 15)
    {
      v11 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *v8;
      *(_QWORD *)(a1 + 80) = v10;
      sub_18308485C(v11, v9);
      goto LABEL_11;
    }
    sub_183275214(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v8;
LABEL_11:
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWListener.Service(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 91))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWListener.Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 90) = 0;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 91) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 91) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWListener.Service()
{
  return &type metadata for NWListener.Service;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWListener.Service.Invitation(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NWListener.Service.Invitation(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18327A348 + 4 * byte_183BA0A89[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_18327A37C + 4 * byte_183BA0A84[v4]))();
}

uint64_t sub_18327A37C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_18327A384(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x18327A38CLL);
  return result;
}

uint64_t sub_18327A398(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x18327A3A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18327A3A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_18327A3AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWListener.Service.Invitation()
{
  return &type metadata for NWListener.Service.Invitation;
}

ValueMetadata *type metadata accessor for NWListener.Service.Invitation.Route()
{
  return &type metadata for NWListener.Service.Invitation.Route;
}

uint64_t _s7Network10NWListenerC7ServiceV10InvitationV5RouteOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18327A428 + 4 * byte_183BA0A93[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18327A45C + 4 * byte_183BA0A8E[v4]))();
}

uint64_t sub_18327A45C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18327A464(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18327A46CLL);
  return result;
}

uint64_t sub_18327A478(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18327A480);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18327A484(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18327A48C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWListener.Service.Invitation.Scope()
{
  return &type metadata for NWListener.Service.Invitation.Scope;
}

uint64_t initializeBufferWithCopyOfBuffer for NWListener.ServiceRegistrationChange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  int EnumCaseMultiPayload;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for NWEndpoint();
    v6 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  v7 = *a2;
  *a1 = *a2;
  v8 = v7 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v8;
}

uint64_t destroy for NWListener.ServiceRegistrationChange(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v4;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for NWEndpoint();
  result = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch((int)result)
    {
      case 0:
        goto LABEL_4;
      case 1:
        goto LABEL_5;
      case 2:
        goto LABEL_7;
      case 3:
        goto LABEL_8;
      case 4:
        goto LABEL_9;
      default:
        return result;
    }
  }
  else
  {
    switch((int)result)
    {
      case 0:
LABEL_4:
        result = sub_183058BF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
        break;
      case 1:
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = *(_QWORD *)(a1 + 48);
        if (result != 1)
          goto LABEL_9;
        break;
      case 2:
LABEL_7:
        result = swift_bridgeObjectRelease();
        break;
      case 3:
LABEL_8:
        v4 = sub_183B913A4();
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
        break;
      case 4:
LABEL_9:
        result = swift_unknownObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

void initializeWithCopy for NWListener.ServiceRegistrationChange()
{
  int EnumCaseMultiPayload;
  int v1;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for NWEndpoint();
  v1 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

void sub_18327A974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  sub_183058E2C(*(_QWORD *)v1, v3, v4, v5);
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_QWORD *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + 24) = v5;
  *(_WORD *)(v0 + 26) = *(_WORD *)(v1 + 26);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18327AB44);
}

void sub_18327A9B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18327AB44);
}

void sub_18327A9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18327AB44);
}

void sub_18327AA04()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  JUMPOUT(0x18327AA1CLL);
}

void sub_18327AA28()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18327AB44);
}

void sub_18327AA44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18327AB44);
}

void sub_18327AA74()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18327AB44);
}

_QWORD *sub_18327AA90()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  v5 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 != 1)
    swift_unknownObjectRetain();
  v0[6] = v5;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  return v0;
}

void sub_18327AAEC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  v5 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 != 1)
    swift_unknownObjectRetain();
  v0[6] = v5;
  JUMPOUT(0x18327AB3CLL);
}

uint64_t assignWithCopy for NWListener.ServiceRegistrationChange(uint64_t result, uint64_t a2)
{
  int EnumCaseMultiPayload;
  int v3;

  if (result != a2)
  {
    sub_183058AE0(result, (uint64_t (*)(_QWORD))type metadata accessor for NWListener.ServiceRegistrationChange);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for NWEndpoint();
    v3 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata accessor for NWListener.ServiceRegistrationChange()
{
  uint64_t result;

  result = qword_1EDCDD500;
  if (!qword_1EDCDD500)
    return swift_getSingletonMetadata();
  return result;
}

void *initializeWithTake for NWListener.ServiceRegistrationChange(void *a1, const void *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int v6;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = type metadata accessor for NWEndpoint();
  v6 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    if (v6 == 3)
      goto LABEL_5;
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    goto LABEL_7;
  }
  if (v6 != 3)
    goto LABEL_6;
LABEL_5:
  v7 = sub_183B913A4();
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload();
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for NWListener.ServiceRegistrationChange(void *a1, const void *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for NWListener.ServiceRegistrationChange);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = type metadata accessor for NWEndpoint();
    v6 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v6 == 3)
        goto LABEL_6;
    }
    else if (v6 == 3)
    {
LABEL_6:
      v7 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_18327B128()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void destroy for NWListener.LockedState(uint64_t a1)
{
  unint64_t v2;

  if (*(_QWORD *)a1)
    swift_release();
  if (*(_QWORD *)(a1 + 16))
    swift_release();
  if (*(_QWORD *)(a1 + 32))
    swift_release();
  if (*(_QWORD *)(a1 + 48))
    swift_release();
  if (*(_QWORD *)(a1 + 96))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 120))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v2 = *(_QWORD *)(a1 + 144);
    if (v2 >> 60 != 15)
      sub_18308485C(*(_QWORD *)(a1 + 136), v2);
  }

}

uint64_t initializeWithCopy for NWListener.LockedState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (!v9)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 96);
    if (v11)
      goto LABEL_12;
LABEL_15:
    v16 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v16;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 139) = *(_OWORD *)(a2 + 139);
    v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  swift_retain();
  v11 = *(_QWORD *)(a2 + 96);
  if (!v11)
    goto LABEL_15;
LABEL_12:
  v12 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12)
  {
    v15 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(a1 + 128) = v15;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  }
  v18 = (uint64_t *)(a2 + 136);
  v19 = *(_QWORD *)(a2 + 144);
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 136) = *(_OWORD *)v18;
  }
  else
  {
    v20 = *v18;
    sub_18324A994(*v18, *(_QWORD *)(a2 + 144));
    *(_QWORD *)(a1 + 136) = v20;
    *(_QWORD *)(a1 + 144) = v19;
  }
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
LABEL_21:
  v21 = *(void **)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v21;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_WORD *)(a1 + 172) = *(_WORD *)(a2 + 172);
  v22 = v21;
  return a1;
}

uint64_t assignWithCopy for NWListener.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  id v38;
  int v39;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v10)
    {
      v11 = a2[5];
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v12;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (*(_QWORD *)(a1 + 48))
  {
    if (v13)
    {
      v14 = a2[7];
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v14;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = a2[7];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v15;
    swift_retain();
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_29:
  v16 = (_OWORD *)(a1 + 64);
  v17 = a2 + 8;
  v18 = a2[12];
  if (*(_QWORD *)(a1 + 96))
  {
    if (v18)
    {
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_QWORD *)(a1 + 96) = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_QWORD *)(a1 + 112) = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v19 = a2[15];
      if (*(_QWORD *)(a1 + 120))
      {
        if (v19)
        {
          *(_QWORD *)(a1 + 120) = v19;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 128) = a2[16];
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
LABEL_43:
          v29 = a2 + 17;
          v30 = a2[18];
          if (*(_QWORD *)(a1 + 144) >> 60 == 15)
          {
            if (v30 >> 60 != 15)
            {
              v31 = *v29;
LABEL_53:
              sub_18324A994(v31, v30);
              *(_QWORD *)(a1 + 136) = v31;
              *(_QWORD *)(a1 + 144) = v30;
              goto LABEL_55;
            }
          }
          else
          {
            if (v30 >> 60 != 15)
            {
              v33 = *v29;
              sub_18324A994(*v29, a2[18]);
              v34 = *(_QWORD *)(a1 + 136);
              v35 = *(_QWORD *)(a1 + 144);
              *(_QWORD *)(a1 + 136) = v33;
              *(_QWORD *)(a1 + 144) = v30;
              sub_18308485C(v34, v35);
              goto LABEL_55;
            }
            sub_183275214(a1 + 136);
          }
          *(_OWORD *)(a1 + 136) = *(_OWORD *)v29;
          goto LABEL_55;
        }
        sub_1832548C0(a1 + 120);
      }
      else if (v19)
      {
        *(_QWORD *)(a1 + 120) = v19;
        *(_QWORD *)(a1 + 128) = a2[16];
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_43;
      }
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      goto LABEL_43;
    }
    sub_18327B844((_QWORD *)(a1 + 64));
    v21 = *((_OWORD *)a2 + 5);
    *v16 = *v17;
    *(_OWORD *)(a1 + 80) = v21;
    v23 = *((_OWORD *)a2 + 7);
    v22 = *((_OWORD *)a2 + 8);
    v24 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 139) = *(_OWORD *)((char *)a2 + 139);
    *(_OWORD *)(a1 + 112) = v23;
    *(_OWORD *)(a1 + 128) = v22;
    *(_OWORD *)(a1 + 96) = v24;
  }
  else
  {
    if (v18)
    {
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_QWORD *)(a1 + 112) = a2[14];
      v20 = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v20)
      {
        *(_QWORD *)(a1 + 120) = v20;
        *(_QWORD *)(a1 + 128) = a2[16];
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      }
      v32 = a2 + 17;
      v30 = a2[18];
      if (v30 >> 60 != 15)
      {
        v31 = *v32;
        goto LABEL_53;
      }
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v32;
LABEL_55:
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_WORD *)(a1 + 153) = *(_WORD *)((char *)a2 + 153);
      goto LABEL_56;
    }
    v25 = *((_OWORD *)a2 + 5);
    *v16 = *v17;
    *(_OWORD *)(a1 + 80) = v25;
    v26 = *((_OWORD *)a2 + 6);
    v27 = *((_OWORD *)a2 + 7);
    v28 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 139) = *(_OWORD *)((char *)a2 + 139);
    *(_OWORD *)(a1 + 112) = v27;
    *(_OWORD *)(a1 + 128) = v28;
    *(_OWORD *)(a1 + 96) = v26;
  }
LABEL_56:
  v36 = *(void **)(a1 + 160);
  v37 = (void *)a2[20];
  *(_QWORD *)(a1 + 160) = v37;
  v38 = v37;

  v39 = *((_DWORD *)a2 + 42);
  *(_BYTE *)(a1 + 172) = *((_BYTE *)a2 + 172);
  *(_DWORD *)(a1 + 168) = v39;
  *(_BYTE *)(a1 + 173) = *((_BYTE *)a2 + 173);
  return a1;
}

_QWORD *sub_18327B844(_QWORD *a1)
{
  destroy for NWListener.Service(a1);
  return a1;
}

__n128 __swift_memcpy174_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 158) = *(__int128 *)((char *)a2 + 158);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for NWListener.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v10)
    {
      v11 = a2[5];
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v12;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (*(_QWORD *)(a1 + 48))
  {
    if (v13)
    {
      v14 = a2[7];
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v14;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = a2[7];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v15;
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_29:
  if (*(_QWORD *)(a1 + 96))
  {
    v16 = a2[12];
    if (v16)
    {
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      v17 = a2[10];
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = v17;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_QWORD *)(a1 + 96) = v16;
      swift_bridgeObjectRelease();
      v18 = a2[14];
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_QWORD *)(a1 + 112) = v18;
      swift_bridgeObjectRelease();
      v19 = a2[15];
      if (*(_QWORD *)(a1 + 120))
      {
        if (v19)
        {
          *(_QWORD *)(a1 + 120) = v19;
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 128) = a2[16];
          swift_unknownObjectRelease();
          goto LABEL_38;
        }
        sub_1832548C0(a1 + 120);
      }
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
LABEL_38:
      v22 = a2 + 17;
      v23 = *(_QWORD *)(a1 + 144);
      if (v23 >> 60 != 15)
      {
        v24 = a2[18];
        if (v24 >> 60 != 15)
        {
          v25 = *(_QWORD *)(a1 + 136);
          *(_QWORD *)(a1 + 136) = *v22;
          *(_QWORD *)(a1 + 144) = v24;
          sub_18308485C(v25, v23);
          goto LABEL_43;
        }
        sub_183275214(a1 + 136);
      }
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v22;
LABEL_43:
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_WORD *)(a1 + 153) = *(_WORD *)((char *)a2 + 153);
      goto LABEL_44;
    }
    sub_18327B844((_QWORD *)(a1 + 64));
  }
  v20 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 139) = *(_OWORD *)((char *)a2 + 139);
  v21 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v21;
LABEL_44:
  v26 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = a2[20];

  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 42);
  *(_BYTE *)(a1 + 172) = *((_BYTE *)a2 + 172);
  *(_BYTE *)(a1 + 173) = *((_BYTE *)a2 + 173);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWListener.LockedState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 174))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWListener.LockedState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 172) = 0;
    *(_DWORD *)(result + 168) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 174) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 174) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void sub_18327BC2C(uint64_t a1)
{
  uint64_t v1;

  sub_183277CF0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_18327BC44(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18327BC84(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t HTTPField.withUnsafeBytesOfValue<A>(_:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_1832FDE58(a1, a2, *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), a3, a4);
}

void static HTTPField.DynamicTableIndexingStrategy.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static HTTPField.DynamicTableIndexingStrategy.prefer.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static HTTPField.DynamicTableIndexingStrategy.avoid.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static HTTPField.DynamicTableIndexingStrategy.disallow.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t HTTPField.DynamicTableIndexingStrategy.hash(into:)()
{
  return sub_183B92268();
}

BOOL static HTTPField.DynamicTableIndexingStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HTTPField.DynamicTableIndexingStrategy.hashValue.getter()
{
  sub_183B92250();
  sub_183B92268();
  return sub_183B9228C();
}

uint64_t HTTPField.init(name:value:)@<X0>(__int128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = a3;
  v5 = a2;
  v7 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v9 = *((_QWORD *)a1 + 3);
  *(_BYTE *)(a4 + 32) = 0;
  *(_OWORD *)a4 = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 24) = v9;
  if ((sub_18324BC90(a2, a3) & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
    sub_18327DAB4((unint64_t *)&qword_1EDCDD518, &qword_1EDCDD510, MEMORY[0x1E0DEC858]);
    sub_183B91794();
    swift_bridgeObjectRelease();
    v5 = 0;
    v4 = 0xE000000000000000;
  }
  v10 = sub_18327D86C(v5, v4);
  v12 = v11;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a4 + 40) = v10;
  *(_QWORD *)(a4 + 48) = v12;
  return result;
}

double HTTPField.init<A>(name:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  __int128 v21;

  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_OWORD *)v10;
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 24);
  (*(void (**)(char *))(v9 + 16))(v12);
  v15 = sub_1832FDF08(v12, a3, a4);
  v17 = sub_18327D86C(v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, a3);
  result = *(double *)&v21;
  *(_OWORD *)a5 = v21;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_BYTE *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = v17;
  *(_QWORD *)(a5 + 48) = v19;
  return result;
}

uint64_t HTTPField.name.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 HTTPField.name.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  *v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*HTTPField.name.modify())()
{
  return nullsub_1;
}

unint64_t HTTPField.value.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  if ((sub_18324BC90(v1, v2) & 1) == 0)
    return sub_1832FE3D0(v1, v2);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_18327C090@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if ((sub_18324BC90(v3, v4) & 1) != 0)
  {
    result = swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v3 = sub_1832FE3D0(v3, v4);
    v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v4 = v7;
  }
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t HTTPField.value.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = v2;
  v4 = a2;
  v5 = a1;
  if ((sub_18324BC90(a1, a2) & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
    sub_18327DAB4((unint64_t *)&qword_1EDCDD518, &qword_1EDCDD510, MEMORY[0x1E0DEC858]);
    sub_183B91794();
    swift_bridgeObjectRelease();
    v5 = 0;
    v4 = 0xE000000000000000;
  }
  v6 = sub_18327D86C(v5, v4);
  v8 = v7;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v8;
  return result;
}

void (*HTTPField.value.modify(_QWORD *a1))(unint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  if ((sub_18324BC90(v4, v5) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = sub_1832FE3D0(v4, v5);
    v5 = v6;
  }
  v3[7] = 0;
  v3[4] = v4;
  v3[5] = v5;
  return sub_18327C2A0;
}

void sub_18327C2A0(unint64_t **a1, char a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = (*a1)[4];
  v5 = (*a1)[5];
  v6 = sub_18324BC90(v4, v5);
  if ((a2 & 1) != 0)
  {
    if ((v6 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      *v3 = v4;
      v3[1] = v5;
      v3[2] = (unint64_t)sub_1832FE3C4;
      v3[3] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_18327DAB4((unint64_t *)&qword_1EDCDD518, &qword_1EDCDD510, MEMORY[0x1E0DEC858]);
      sub_183B91794();
      v4 = 0;
      v5 = 0xE000000000000000;
    }
    v11 = v3[6];
    v12 = sub_18327D86C(v4, v5);
    v14 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + 40) = v12;
    *(_QWORD *)(v11 + 48) = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((v6 & 1) == 0)
    {
      *v3 = v4;
      v3[1] = v5;
      v3[2] = (unint64_t)sub_1832FE3C4;
      v3[3] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
      sub_18327DAB4((unint64_t *)&qword_1EDCDD518, &qword_1EDCDD510, MEMORY[0x1E0DEC858]);
      sub_183B91794();
      swift_bridgeObjectRelease();
      v4 = 0;
      v5 = 0xE000000000000000;
    }
    v7 = v3[6];
    v8 = sub_18327D86C(v4, v5);
    v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 40) = v8;
    *(_QWORD *)(v7 + 48) = v10;
  }
  free(v3);
}

void HTTPField.indexingStrategy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *HTTPField.indexingStrategy.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*HTTPField.indexingStrategy.modify())()
{
  return nullsub_1;
}

BOOL _s7Network9HTTPFieldV12isValidValueySbSSFZ_0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  char v6;
  _BOOL8 result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 1;
  LOBYTE(v5) = (a2 & 0x1000000000000000) == 0 || (a1 & 0x800000000000000) != 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_53:
    v6 = sub_183B91848();
    v8 = sub_183B91818();
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v6 = a1;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
    }
    else
    {
      v6 = *(_BYTE *)sub_183B91E78();
    }
    v8 = 65540;
  }
  result = 0;
  if (v6 != 9 && v6 != 32)
  {
    v5 = 4 << v5;
    while (1)
    {
      v9 = v6 == 32 || v6 == 9;
      if (!v9 && (v6 & 0x80) == 0 && (v6 - 127) < 0xA2u)
        return 0;
      if (4 * v2 == v8 >> 14)
        return v6 != 9 && v6 != 32;
      v10 = v8 & 0xC;
      v11 = v8;
      if (v10 == v5)
        v11 = sub_18329687C(v8, a1, a2);
      v12 = v11 >> 16;
      if (v11 >> 16 >= v2)
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      if ((a2 & 0x1000000000000000) != 0)
        break;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v15[0] = a1;
        v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v6 = *((_BYTE *)v15 + v12);
        if (v10 == v5)
          goto LABEL_42;
LABEL_35:
        if ((a2 & 0x1000000000000000) != 0)
          goto LABEL_36;
LABEL_18:
        v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      }
      else
      {
        v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a1 & 0x1000000000000000) == 0)
          v13 = sub_183B91E78();
        v6 = *(_BYTE *)(v13 + v12);
        if (v10 != v5)
          goto LABEL_35;
LABEL_42:
        v8 = sub_18329687C(v8, a1, a2);
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_18;
LABEL_36:
        if (v2 <= v8 >> 16)
          goto LABEL_52;
        v8 = sub_183B91818();
      }
    }
    v6 = sub_183B91848();
    if (v10 == v5)
      goto LABEL_42;
    goto LABEL_35;
  }
  return result;
}

BOOL sub_18327C698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v12;
  _BYTE v14[14];
  unsigned __int8 v15;
  char v16;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = &v14[-v9];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  sub_183B91890();
  swift_getAssociatedConformanceWitness();
  sub_183B91D10();
  if ((v16 & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    return 1;
  }
  else
  {
    v12 = v15;
    if (v15 != 9 && v15 != 32)
    {
      while (v12 == 9 || v12 == 32 || (v12 & 0x80) != 0 || (v12 - 127) > 0xFFFFFFA1)
      {
        sub_183B91D10();
        if (v14[13] == 1)
        {
          (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
          return v12 != 32 && v12 != 9;
        }
        v12 = v14[12];
      }
    }
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    return 0;
  }
}

char *sub_18327C868@<X0>(char *result@<X0>, _BYTE *a2@<X8>)
{
  int v2;
  char v4;

  v2 = *result;
  if ((v2 - 127) >= 0xA2u || (char)v2 <= -1)
    v4 = *result;
  else
    v4 = 32;
  if (v2 == 32)
    v4 = 32;
  if (v2 != 9)
    LOBYTE(v2) = v4;
  *a2 = v2;
  return result;
}

BOOL sub_18327C8A4(unsigned __int8 *a1)
{
  int v1;

  v1 = *a1;
  return v1 == 9 || v1 == 32;
}

BOOL static HTTPField.isValidValue<A>(_:)(uint64_t a1, uint64_t a2)
{
  return sub_18327C698(a1, a2);
}

uint64_t HTTPField.hash(into:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t HTTPField.hashValue.getter()
{
  sub_183B92250();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_18327CA20()
{
  sub_183B92250();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_18327CAD8()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18327CB74()
{
  sub_183B92250();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_183B92268();
  swift_bridgeObjectRetain();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t HTTPField.description.getter()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = v0[5];
  v2 = v0[6];
  v4 = *v0;
  swift_bridgeObjectRetain();
  sub_183B917F4();
  if ((sub_18324BC90(v1, v2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832FE3D0(v1, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_183B917F4();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_18327CD08()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = v0[5];
  v2 = v0[6];
  v4 = *v0;
  swift_bridgeObjectRetain();
  sub_183B917F4();
  if ((sub_18324BC90(v1, v2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832FE3D0(v1, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_183B917F4();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t HTTPField.playgroundDescription.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[5];
  v4 = v1[6];
  v6 = *v1;
  v7 = v1[1];
  swift_bridgeObjectRetain();
  sub_183B917F4();
  if ((sub_18324BC90(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832FE3D0(v3, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_183B917F4();
  result = swift_bridgeObjectRelease();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t sub_18327CEDC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[5];
  v4 = v1[6];
  v6 = *v1;
  v7 = v1[1];
  swift_bridgeObjectRetain();
  sub_183B917F4();
  if ((sub_18324BC90(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832FE3D0(v3, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_183B917F4();
  result = swift_bridgeObjectRelease();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t sub_18327CFD4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_183310D94(*a1, *a2);
}

uint64_t sub_18327CFE0()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_18327D078()
{
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18327D0EC()
{
  sub_183B92250();
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_18327D180@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_18327DFB4();
  *a1 = result;
  return result;
}

void sub_18327D1AC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x65756C6176;
  if (v2 != 1)
  {
    v5 = 0xD000000000000010;
    v4 = 0x8000000183C6F5A0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701667182;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_18327D204()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x65756C6176;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_18327D258@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_18327DFB4();
  *a1 = result;
  return result;
}

uint64_t sub_18327D27C()
{
  return 0;
}

void sub_18327D288(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_18327D294()
{
  sub_18327D9E8();
  return sub_183B92334();
}

uint64_t sub_18327D2BC()
{
  sub_18327D9E8();
  return sub_183B92340();
}

uint64_t HTTPField.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD520);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v8 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v19 = *((unsigned __int8 *)v1 + 32);
  v9 = *((_QWORD *)v1 + 5);
  v13[0] = *((_QWORD *)v1 + 6);
  v13[1] = v9;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18327D9E8();
  sub_183B9231C();
  v16 = v14;
  v17 = v8;
  v18 = v7;
  v20 = 0;
  sub_18327DA2C();
  v10 = v15;
  sub_183B92064();
  if (!v10)
  {
    v11 = v19;
    LOBYTE(v16) = 1;
    sub_183B92058();
    if (v11)
    {
      LOBYTE(v16) = 2;
      sub_183B92070();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t HTTPField.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD538);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18327D9E8();
  sub_183B922EC();
  if (!v2)
  {
    v31 = 0;
    sub_18327DA70();
    sub_183B92010();
    v9 = v28;
    v10 = v30;
    v25 = v29;
    v26 = v27;
    LOBYTE(v27) = 1;
    v11 = sub_183B92004();
    v23 = v10;
    v24 = v9;
    v14 = v11;
    v15 = v12;
    if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v11, v12))
    {
      v22 = v14;
      LOBYTE(v27) = 2;
      v16 = sub_183B91FF8();
      v17 = v23;
      v18 = v16;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v18 & 0x1FC) != 0)
        v19 = 0;
      else
        v19 = v18;
      v20 = v24;
      *(_QWORD *)a2 = v26;
      *(_QWORD *)(a2 + 8) = v20;
      *(_QWORD *)(a2 + 16) = v25;
      *(_QWORD *)(a2 + 24) = v17;
      *(_BYTE *)(a2 + 32) = v19;
      *(_QWORD *)(a2 + 40) = v22;
      *(_QWORD *)(a2 + 48) = v15;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = 1;
      v27 = 0;
      v28 = 0xE000000000000000;
      sub_183B91DB8();
      swift_bridgeObjectRelease();
      v27 = 0xD000000000000012;
      v28 = 0x8000000183C70530;
      sub_183B917F4();
      swift_bridgeObjectRelease();
      sub_183B917F4();
      sub_183B91E54();
      swift_allocError();
      sub_18327DAB4(&qword_1EDCDD548, &qword_1EDCDD538, MEMORY[0x1E0DED060]);
      sub_183B91E3C();
      swift_bridgeObjectRelease();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

uint64_t sub_18327D784@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HTTPField.init(from:)(a1, a2);
}

uint64_t sub_18327D798(_QWORD *a1)
{
  return HTTPField.encode(to:)(a1);
}

uint64_t _s7Network9HTTPFieldV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned __int8 *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    if (v2 != v5)
      return 0;
  }
  else
  {
    v9 = sub_183B920F4();
    result = 0;
    if ((v9 & 1) == 0 || v2 != v5)
      return result;
  }
  if (v3 == v6 && v4 == v7)
    return 1;
  else
    return sub_183B920F4();
}

uint64_t sub_18327D86C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  __int128 v5[2];
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  uint64_t v12;
  __int128 v13;
  char *(*v14)@<X0>(char *@<X0>, _BYTE *@<X8>);
  uint64_t v15;
  BOOL (*v16)(unsigned __int8 *);
  uint64_t v17;
  BOOL (*v18)(unsigned __int8 *);
  uint64_t v19;

  v3 = a1;
  if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(a1, a2))
  {
    *(_QWORD *)&v13 = v3;
    *((_QWORD *)&v13 + 1) = a2;
    v14 = sub_18327C868;
    v15 = 0;
    v16 = sub_18327C8A4;
    v17 = 0;
    v18 = sub_18327E03C;
    v19 = 0;
    v7 = v13;
    v8 = (unint64_t)sub_18327C868;
    v9 = (unint64_t)sub_18327C8A4;
    v10 = (unint64_t)sub_18327E03C;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD578);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDE6F0);
    if (swift_dynamicCast())
    {
      sub_183262D80(v5, (uint64_t)v11);
      __swift_project_boxed_opaque_existential_2(v11, v12);
      if ((sub_183B91FB0() & 1) != 0)
      {
        __swift_project_boxed_opaque_existential_2(v11, v12);
        sub_183B91FA4();
        v3 = v7;
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
        return v3;
      }
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
    }
    else
    {
      v6 = 0;
      memset(v5, 0, sizeof(v5));
      sub_18327DFFC((uint64_t)v5);
    }
    return sub_1832A9DC0(&v13);
  }
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t sub_18327D9E8()
{
  unint64_t result;

  result = qword_1EDCDD528;
  if (!qword_1EDCDD528)
  {
    result = MEMORY[0x186DB5558](&unk_183BA10A8, &type metadata for HTTPField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDD528);
  }
  return result;
}

unint64_t sub_18327DA2C()
{
  unint64_t result;

  result = qword_1EDCDD530;
  if (!qword_1EDCDD530)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPField.Name, &type metadata for HTTPField.Name);
    atomic_store(result, (unint64_t *)&qword_1EDCDD530);
  }
  return result;
}

unint64_t sub_18327DA70()
{
  unint64_t result;

  result = qword_1EDCDD540;
  if (!qword_1EDCDD540)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPField.Name, &type metadata for HTTPField.Name);
    atomic_store(result, (unint64_t *)&qword_1EDCDD540);
  }
  return result;
}

uint64_t sub_18327DAB4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x186DB5558](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18327DAF8()
{
  unint64_t result;

  result = qword_1EDCDD550;
  if (!qword_1EDCDD550)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPField.DynamicTableIndexingStrategy, &type metadata for HTTPField.DynamicTableIndexingStrategy);
    atomic_store(result, (unint64_t *)&qword_1EDCDD550);
  }
  return result;
}

unint64_t sub_18327DB40()
{
  unint64_t result;

  result = qword_1EDCDD558;
  if (!qword_1EDCDD558)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPField, &type metadata for HTTPField);
    atomic_store(result, (unint64_t *)&qword_1EDCDD558);
  }
  return result;
}

uint64_t sub_18327DB88(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return HTTPField.value.setter(v1, v2);
}

uint64_t destroy for HTTPField()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HTTPField(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HTTPField(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HTTPField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPField(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPField()
{
  return &type metadata for HTTPField;
}

ValueMetadata *type metadata accessor for HTTPField.DynamicTableIndexingStrategy()
{
  return &type metadata for HTTPField.DynamicTableIndexingStrategy;
}

uint64_t storeEnumTagSinglePayload for HTTPField.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18327DE5C + 4 * byte_183BA0DF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18327DE90 + 4 * asc_183BA0DF0[v4]))();
}

uint64_t sub_18327DE90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18327DE98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18327DEA0);
  return result;
}

uint64_t sub_18327DEAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18327DEB4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18327DEB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18327DEC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPField.CodingKeys()
{
  return &type metadata for HTTPField.CodingKeys;
}

unint64_t sub_18327DEE0()
{
  unint64_t result;

  result = qword_1EDCDD560;
  if (!qword_1EDCDD560)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1080, &type metadata for HTTPField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDD560);
  }
  return result;
}

unint64_t sub_18327DF28()
{
  unint64_t result;

  result = qword_1EDCDD568;
  if (!qword_1EDCDD568)
  {
    result = MEMORY[0x186DB5558](&unk_183BA0FB8, &type metadata for HTTPField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDD568);
  }
  return result;
}

unint64_t sub_18327DF70()
{
  unint64_t result;

  result = qword_1EDCDD570;
  if (!qword_1EDCDD570)
  {
    result = MEMORY[0x186DB5558](&unk_183BA0FE0, &type metadata for HTTPField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDCDD570);
  }
  return result;
}

uint64_t sub_18327DFB4()
{
  unint64_t v0;

  v0 = sub_183B91FC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_18327DFFC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD580);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18327E040()
{
  uint64_t v0;

  sub_18327E084(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WeakDistributedActor()
{
  return objc_opt_self();
}

uint64_t sub_18327E084(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t static NWDiscoverableActor.connectionParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t static NWDiscoverableActor<>.discover(using:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v19 = a2;
  v20 = a1;
  v6 = (int *)type metadata accessor for NWActorDiscoveryMechanism(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v21, a3, a4);
  v18 = v21;
  v9 = v22;
  v10 = v23;
  v11 = v24;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  sub_18327E1EC(v19, (uint64_t)v8);
  v14 = &v8[v6[5]];
  *(_OWORD *)v14 = v18;
  *((_QWORD *)v14 + 2) = v9;
  *((_QWORD *)v14 + 3) = v10;
  v14[32] = v11;
  *(_QWORD *)&v8[v6[6]] = v12;
  *(_QWORD *)&v8[v6[7]] = v13;
  static DistributedActor<>.discover(_:using:)((uint64_t)v8, v20);
  v16 = v15;
  sub_18327E230((uint64_t)v8);
  return v16;
}

uint64_t sub_18327E1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18327E230(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NWActorDiscoveryMechanism(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of static NWDiscoverableActor.browseDescriptor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static NWDiscoverableActor.browsingParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static NWDiscoverableActor.connectionParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_18327E284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_183B915CC();
  __swift_allocate_value_buffer(v0, qword_1EDCDD588);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCDD588);
  if (qword_1EDCDC620 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCF2A90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_18327E314(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  __int128 v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD5F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183280254();
  sub_183B9231C();
  LOBYTE(v12) = 0;
  sub_183B92058();
  if (!v2)
  {
    v12 = *(_OWORD *)(v3 + 16);
    v11 = 1;
    sub_183280518();
    sub_183B92064();
    v12 = *(_OWORD *)(v3 + 32);
    v11 = 2;
    sub_183B92064();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_18327E480(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v14 = a4;
  v15 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD5E8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1832804D4();
  sub_183B9231C();
  v16 = a2;
  v17 = a3;
  v18 = 0;
  sub_183280518();
  sub_183B92064();
  if (!v5)
  {
    v16 = v14;
    v17 = v15;
    v18 = 1;
    sub_183B92064();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_18327E5D4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7550726576726573;
  if (*v0 != 1)
    v1 = 0x7550746E65696C63;
  if (*v0)
    return v1;
  else
    return 0x4449746567726174;
}

uint64_t sub_18327E648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1832808A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18327E66C()
{
  sub_183280254();
  return sub_183B92334();
}

uint64_t sub_18327E694()
{
  sub_183280254();
  return sub_183B92340();
}

double sub_18327E6BC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_18327FFC0(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_18327E6FC(_QWORD *a1)
{
  return sub_18327E314(a1);
}

uint64_t sub_18327E710()
{
  _BYTE *v0;

  if (*v0)
    return 0x7550746E65696C63;
  else
    return 0x7550726576726573;
}

uint64_t sub_18327E750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_183280A38(a1, a2);
  *a3 = result;
  return result;
}

void sub_18327E774(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_18327E780()
{
  sub_1832804D4();
  return sub_183B92334();
}

uint64_t sub_18327E7A8()
{
  sub_1832804D4();
  return sub_183B92340();
}

uint64_t sub_18327E7D0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1832802DC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_18327E7FC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_18327E480(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_18327E818(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  id v8;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  void *v24;
  uint64_t v25;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB1F0);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v3 + 16) = v7;
  *(_WORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 48) = a3;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = a2;
  v8 = objc_allocWithZone((Class)NWRPFileTransferSession);
  swift_retain();
  v9 = a1 & 1;
  v10 = objc_msgSend(v8, sel_initAsTarget_, a1 & 1);
  *(_QWORD *)(v3 + 32) = v10;
  v11 = MEMORY[0x1E0C809B0];
  if ((a1 & 1) != 0)
  {
    v12 = swift_allocObject();
    swift_weakInit();
    v24 = sub_18327FB08;
    v25 = v12;
    v20 = v11;
    v21 = 1107296256;
    v22 = sub_18327EAC8;
    v23 = &block_descriptor_11;
    v13 = _Block_copy(&v20);
    v14 = v10;
    swift_release();
    objc_msgSend(v14, sel_setReceivedFileHandler_, v13);
    _Block_release(v13);

    v10 = *(id *)(v3 + 32);
  }
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 16) = v9;
  *(_QWORD *)(v16 + 24) = v15;
  v24 = sub_18327FAFC;
  v25 = v16;
  v20 = v11;
  v21 = 1107296256;
  v22 = sub_18305665C;
  v23 = &block_descriptor_7;
  v17 = _Block_copy(&v20);
  v18 = v10;
  swift_release();
  objc_msgSend(v18, sel_setCompletionHandler_, v17);
  swift_release();
  _Block_release(v17);

  return v3;
}

uint64_t sub_18327EA20(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void (*v5)(uint64_t, uint64_t);

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = *(void (**)(uint64_t, uint64_t))(result + 64);
    if (v5)
    {
      sub_183061488(*(_QWORD *)(result + 64));
      swift_release();
      v5(a1, a2);
      return sub_1830630AC((uint64_t)v5);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_18327EAC8(uint64_t a1)
{
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v2 = sub_183B916E0();
  v4 = v3;
  swift_retain();
  v1(v2, v4);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18327EB1C(char a1)
{
  uint64_t result;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    result = swift_weakLoadStrong();
    if (result)
    {
      sub_18327EBE0();
      return swift_release();
    }
  }
  else
  {
    swift_beginAccess();
    result = swift_weakLoadStrong();
    if (result)
    {
      v2 = result;
      sub_18327EFD0();
      v3 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
      os_unfair_lock_lock(v3);
      sub_183273D38(v4, sub_18327FB10);
      os_unfair_lock_unlock(v3);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_18327EBE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  if (qword_1EDCDC570 != -1)
    swift_once();
  v2 = sub_183B915CC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EDCDD588);
  v3 = sub_183B915B4();
  v4 = sub_183B91C80();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_182FBE000, v3, v4, "Invalidating file transfer session", v5, 2u);
    MEMORY[0x186DB563C](v5, -1, -1);
  }

  return (*(uint64_t (**)(id))(v1 + 40))(objc_msgSend(*(id *)(v1 + 32), sel_invalidate));
}

void sub_18327ECC8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  os_unfair_lock_s *v10;
  char v11;

  if (a2)
  {
    v6 = *(void **)(v4 + 32);
    v7 = (void *)sub_183B916D4();
    objc_msgSend(v6, sel_setTargetID_, v7);

  }
  if (a4 >> 60 != 15)
  {
    v8 = *(void **)(v4 + 32);
    v9 = (void *)sub_183B9141C();
    objc_msgSend(v8, sel_setPeerPublicKey_, v9);

  }
  v10 = (os_unfair_lock_s *)(*(_QWORD *)(v4 + 16) + 16);
  os_unfair_lock_lock(v10);
  sub_1832BA0F8((_QWORD *(*)(uint64_t *__return_ptr))sub_18327FA9C, &v11);
  os_unfair_lock_unlock(v10);
  if (v11 == 1)
    sub_18327EE6C();
}

id sub_18327EDBC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  id result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *(void **)(a1 + 32);
  result = objc_msgSend(v4, sel_targetID);
  if (result
    && (result, (result = objc_msgSend(v4, sel_peerPublicKey)) != 0))
  {
    v6 = result;
    v7 = sub_183B91428();
    v9 = v8;

    result = (id)sub_18308485C(v7, v9);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  *(_BYTE *)(a1 + 24) = v10;
  *a2 = *(_BYTE *)(a1 + 25);
  return result;
}

void sub_18327EE6C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  char v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_1832BA0F8((_QWORD *(*)(uint64_t *__return_ptr))sub_18327FA88, &v2);
  os_unfair_lock_unlock(v1);
  if (v2 == 1)
    objc_msgSend(*(id *)(v0 + 32), sel_activate);
}

uint64_t sub_18327EEF0(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[6];

  sub_18327EFD0();
  v3 = *(void **)(v1 + 32);
  v4 = (void *)sub_183B9135C();
  v7[4] = sub_18327F790;
  v7[5] = a1;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_18327F430;
  v7[3] = &block_descriptor_4;
  v5 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_transferFileURL_completion_, v4, v5);
  _Block_release(v5);

  LOBYTE(v7[0]) = 0;
  return sub_18330B4E4((unsigned __int8 *)v7);
}

void sub_18327EFD0()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_18327FA3C(&v3);
  v2 = v3;
  os_unfair_lock_unlock(v1);
  if (v2)
  {
    swift_retain();
    sub_183B91AD0();
    swift_release_n();
  }
}

uint64_t sub_18327F054(id a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;

  if (a1)
  {
    v2 = a1;
    if (qword_1EDCDC570 != -1)
      swift_once();
    v3 = sub_183B915CC();
    __swift_project_value_buffer(v3, (uint64_t)qword_1EDCDD588);
    swift_retain();
    v4 = a1;
    swift_retain();
    v5 = a1;
    v6 = sub_183B915B4();
    v7 = sub_183B91C74();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v23 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_retain();
      v10 = sub_183B9174C();
      sub_183273D70(v10, v11, &v23);
      sub_183B91D1C();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      v12 = a1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
      v13 = sub_183B9174C();
      sub_183273D70(v13, v14, &v23);
      sub_183B91D1C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_182FBE000, v6, v7, "%s failed to transfer: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v9, -1, -1);
      MEMORY[0x186DB563C](v8, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    if (qword_1EDCDC570 != -1)
      swift_once();
    v15 = sub_183B915CC();
    __swift_project_value_buffer(v15, (uint64_t)qword_1EDCDD588);
    swift_retain_n();
    v16 = sub_183B915B4();
    v17 = sub_183B91C80();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v23 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_retain();
      v20 = sub_183B9174C();
      sub_183273D70(v20, v21, &v23);
      sub_183B91D1C();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_182FBE000, v16, v17, "%s transferred successfully", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v19, -1, -1);
      MEMORY[0x186DB563C](v18, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
  return sub_18330B0BC(a1);
}

void sub_18327F430(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t sub_18327F484(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD468);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_183B91A34();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = a1;
  swift_retain();
  *(_QWORD *)(a1 + 56) = sub_1832AB2F4((uint64_t)v4, (uint64_t)&unk_1EDCDD5A8, (uint64_t)v6);
  return swift_release();
}

uint64_t sub_18327F55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a4;
  v5 = sub_183B91EE4();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18327F5BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  sub_183B91ED8();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1EDCDD5B0 + dword_1EDCDD5B0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_18327F63C;
  return v3(0x43561A8829300000, 16, 0, 0, 1);
}

uint64_t sub_18327F63C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

uint64_t sub_18327F6BC()
{
  uint64_t v0;

  sub_18327EBE0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18327F6F4()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18327F72C()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_release();
  sub_1830630AC(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance();
}

uint64_t _s19FileTransferSessionCMa()
{
  return objc_opt_self();
}

uint64_t sub_18327F790(void *a1)
{
  return sub_18327F054(a1);
}

uint64_t sub_18327F798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_183B91ECC();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_18327F83C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_183B91EE4();
  sub_183064644(&qword_1EDCDD5B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  sub_183B921D8();
  sub_183064644(&qword_1EDCDD5C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  sub_183B91EF0();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_18327F954;
  return sub_183B921E4();
}

uint64_t sub_18327F954()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_18327FA00()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_18327FA3C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  *a1 = v2;
}

_QWORD *sub_18327FA4C@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

void sub_18327FA88(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = 1;
  *a1 = *(_BYTE *)(v1 + 24);
}

id sub_18327FA9C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_18327EDBC(v1, a1);
}

uint64_t sub_18327FAB4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18327FAD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18327FAFC()
{
  uint64_t v0;

  return sub_18327EB1C(*(_BYTE *)(v0 + 16));
}

uint64_t sub_18327FB08(uint64_t a1, uint64_t a2)
{
  return sub_18327EA20(a1, a2);
}

uint64_t sub_18327FB10()
{
  uint64_t v0;

  return sub_18327F484(v0);
}

uint64_t sub_18327FB28()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18327FB54(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_183243DAC;
  return sub_18327F55C(a1, v4, v5, v6);
}

uint64_t _s20FileTransferResponseVwxx(uint64_t a1)
{
  sub_18308485C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_18308485C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *_s20FileTransferResponseVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_18324A994(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v7 = a2[2];
  v6 = a2[3];
  sub_18324A994(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *_s20FileTransferResponseVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_18324A994(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_18308485C(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  sub_18324A994(v9, v8);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_18308485C(v10, v11);
  return a1;
}

uint64_t *_s20FileTransferResponseVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_18308485C(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_18308485C(v6, v7);
  return a1;
}

uint64_t _s20FileTransferResponseVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s20FileTransferResponseVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *_s20FileTransferResponseVMa()
{
  return &_s20FileTransferResponseVN;
}

uint64_t _s19FileTransferRequestVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_18308485C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_18308485C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

_QWORD *_s19FileTransferRequestVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  swift_bridgeObjectRetain();
  sub_18324A994(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  v8 = a2[4];
  v7 = a2[5];
  sub_18324A994(v8, v7);
  a1[4] = v8;
  a1[5] = v7;
  return a1;
}

_QWORD *_s19FileTransferRequestVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  v5 = a2[3];
  sub_18324A994(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  a1[2] = v4;
  a1[3] = v5;
  sub_18308485C(v6, v7);
  v9 = a2[4];
  v8 = a2[5];
  sub_18324A994(v9, v8);
  v10 = a1[4];
  v11 = a1[5];
  a1[4] = v9;
  a1[5] = v8;
  sub_18308485C(v10, v11);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *_s19FileTransferRequestVwta(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a1[2];
  v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_18308485C(v5, v6);
  v7 = a1[4];
  v8 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_18308485C(v7, v8);
  return a1;
}

uint64_t _s19FileTransferRequestVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s19FileTransferRequestVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s19FileTransferRequestVMa()
{
  return &_s19FileTransferRequestVN;
}

uint64_t sub_18327FFC0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD5C8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183280254();
  sub_183B922EC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  LOBYTE(v22) = 0;
  v9 = sub_183B92004();
  v11 = v10;
  v20 = v9;
  v24 = 1;
  v12 = sub_183280298();
  swift_bridgeObjectRetain();
  v21 = v12;
  sub_183B92010();
  v24 = 2;
  v18 = v23;
  v19 = v22;
  sub_18324A994(v22, v23);
  sub_183B92010();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v22;
  v14 = v23;
  swift_bridgeObjectRetain();
  v16 = v18;
  v15 = v19;
  sub_18324A994(v19, v18);
  sub_18324A994(v13, v14);
  sub_18308485C(v15, v16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  swift_bridgeObjectRelease();
  sub_18308485C(v15, v16);
  result = sub_18308485C(v13, v14);
  *a2 = v20;
  a2[1] = v11;
  a2[2] = v15;
  a2[3] = v16;
  a2[4] = v13;
  a2[5] = v14;
  return result;
}

unint64_t sub_183280254()
{
  unint64_t result;

  result = qword_1EDCDD5D0;
  if (!qword_1EDCDD5D0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA14C0, &_s19FileTransferRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD5D0);
  }
  return result;
}

unint64_t sub_183280298()
{
  unint64_t result;

  result = qword_1EDCDB190;
  if (!qword_1EDCDB190)
  {
    result = MEMORY[0x186DB5558](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EDCDB190);
  }
  return result;
}

uint64_t sub_1832802DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD5D8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_2(a1, v7);
  sub_1832804D4();
  sub_183B922EC();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  else
  {
    v14 = 0;
    sub_183280298();
    sub_183B92010();
    v7 = v12;
    v9 = v13;
    v14 = 1;
    sub_18324A994(v12, v13);
    sub_183B92010();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v10 = v12;
    v11 = v13;
    sub_18324A994(v7, v9);
    sub_18324A994(v10, v11);
    sub_18308485C(v7, v9);
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
    sub_18308485C(v7, v9);
    sub_18308485C(v10, v11);
  }
  return v7;
}

unint64_t sub_1832804D4()
{
  unint64_t result;

  result = qword_1EDCDD5E0;
  if (!qword_1EDCDD5E0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1470, &_s20FileTransferResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD5E0);
  }
  return result;
}

unint64_t sub_183280518()
{
  unint64_t result;

  result = qword_1EDCDC2C8;
  if (!qword_1EDCDC2C8)
  {
    result = MEMORY[0x186DB5558](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EDCDC2C8);
  }
  return result;
}

uint64_t _s20FileTransferResponseV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1832805A8 + 4 * byte_183BA1195[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1832805DC + 4 * asc_183BA1190[v4]))();
}

uint64_t sub_1832805DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832805E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832805ECLL);
  return result;
}

uint64_t sub_1832805F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183280600);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_183280604(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18328060C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s20FileTransferResponseV10CodingKeysOMa()
{
  return &_s20FileTransferResponseV10CodingKeysON;
}

uint64_t _s19FileTransferRequestV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_183280674 + 4 * byte_183BA119F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1832806A8 + 4 * byte_183BA119A[v4]))();
}

uint64_t sub_1832806A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832806B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832806B8);
  return result;
}

uint64_t sub_1832806C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832806CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1832806D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832806D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s19FileTransferRequestV10CodingKeysOMa()
{
  return &_s19FileTransferRequestV10CodingKeysON;
}

unint64_t sub_1832806F8()
{
  unint64_t result;

  result = qword_1EDCDD5F8;
  if (!qword_1EDCDD5F8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1390, &_s19FileTransferRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD5F8);
  }
  return result;
}

unint64_t sub_183280740()
{
  unint64_t result;

  result = qword_1EDCDD600;
  if (!qword_1EDCDD600)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1448, &_s20FileTransferResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD600);
  }
  return result;
}

unint64_t sub_183280788()
{
  unint64_t result;

  result = qword_1EDCDD608;
  if (!qword_1EDCDD608)
  {
    result = MEMORY[0x186DB5558](&unk_183BA13B8, &_s20FileTransferResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD608);
  }
  return result;
}

unint64_t sub_1832807D0()
{
  unint64_t result;

  result = qword_1EDCDD610;
  if (!qword_1EDCDD610)
  {
    result = MEMORY[0x186DB5558](&unk_183BA13E0, &_s20FileTransferResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD610);
  }
  return result;
}

unint64_t sub_183280818()
{
  unint64_t result;

  result = qword_1EDCDD618;
  if (!qword_1EDCDD618)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1300, &_s19FileTransferRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD618);
  }
  return result;
}

unint64_t sub_183280860()
{
  unint64_t result;

  result = qword_1EDCDD620;
  if (!qword_1EDCDD620)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1328, &_s19FileTransferRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD620);
  }
  return result;
}

uint64_t sub_1832808A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4449746567726174 && a2 == 0xE800000000000000;
  if (v2 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7550726576726573 && a2 == 0xEF79654B63696C62 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7550746E65696C63 && a2 == 0xEF79654B63696C62)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_183B920F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_183280A38(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7550726576726573 && a2 == 0xEF79654B63696C62;
  if (v2 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7550746E65696C63 && a2 == 0xEF79654B63696C62)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_183B920F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_183280B78()
{
  id v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v0 = nw_protocol_copy_http_definition();
  type metadata accessor for NWProtocolDefinition();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 32) = v0;
  v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  v3 = sub_183B916E0();
  v5 = v4;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v5;
  off_1EDCDD630 = (_UNKNOWN *)v1;
  return result;
}

uint64_t static NWProtocolHTTP.definition.getter()
{
  if (qword_1EDCDC578 != -1)
    swift_once();
  return swift_retain();
}

BOOL sub_183280C48(void *a1)
{
  return nw_protocol_options_is_http_messaging(a1);
}

uint64_t NWProtocolHTTP.Options.__allocating_init()()
{
  NWConcrete_nw_protocol_options *options;
  uint64_t result;

  options = nw_http_messaging_create_options();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = options;
  return result;
}

uint64_t NWProtocolHTTP.Options.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

BOOL sub_183280CB0(void *a1)
{
  return nw_protocol_metadata_is_http(a1);
}

uint64_t NWProtocolHTTP.Metadata.__allocating_init(request:)(const void *a1)
{
  uint64_t v2;
  id *metadata_for_request;
  uint64_t result;

  type metadata accessor for __NWHTTPRequest();
  v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), a1, 0x120uLL);
  metadata_for_request = nw_http_create_metadata_for_request((void *)v2);
  swift_release();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = metadata_for_request;
  return result;
}

uint64_t NWProtocolHTTP.Metadata.__allocating_init(response:)(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  id *metadata_for_response;
  uint64_t result;
  __int128 v9;
  __int128 v10;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *((_BYTE *)a1 + 32);
  v9 = *(__int128 *)((char *)a1 + 40);
  v10 = *a1;
  v5 = *((_QWORD *)a1 + 7);
  type metadata accessor for __NWHTTPResponse();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v10;
  *(_QWORD *)(v6 + 32) = v2;
  *(_QWORD *)(v6 + 40) = v3;
  *(_BYTE *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 56) = v9;
  *(_QWORD *)(v6 + 72) = v5;
  *(_OWORD *)(v6 + 80) = a1[4];
  metadata_for_response = nw_http_create_metadata_for_response((void *)v6);
  swift_release();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = metadata_for_response;
  return result;
}

uint64_t NWProtocolHTTP.Metadata.trailerFields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  result = (uint64_t)nw_http_metadata_copy_trailer_fields(*(void **)(v1 + 16));
  if (result)
  {
    v4 = result;
    sub_1832F2514(MEMORY[0x1E0DEE9D8]);
    v5 = (_DWORD *)swift_slowAlloc();
    *v5 = 0;
    swift_beginAccess();
    v6 = *(_QWORD *)(v4 + 16);
    swift_retain();
    MEMORY[0x186DB563C](v5, -1, -1);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  return result;
}

uint64_t NWProtocolHTTP.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NWProtocolHTTP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t NWConnection.ContentContext.__allocating_init(request:)(const void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v5;
  id *metadata_for_request;
  uint64_t v7;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB270);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183BA1510;
  type metadata accessor for __NWHTTPRequest();
  v5 = swift_allocObject();
  memcpy((void *)(v5 + 16), a1, 0x120uLL);
  metadata_for_request = nw_http_create_metadata_for_request((void *)v5);
  swift_release();
  type metadata accessor for NWProtocolHTTP.Metadata();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = metadata_for_request;
  *(_QWORD *)(inited + 32) = v7;
  sub_183B91944();
  return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, double))(v2 + 152))(0x7165722D70747468, 0xEC00000074736575, 0, 0, 0, inited, 0.5);
}

uint64_t NWConnection.ContentContext.__allocating_init(response:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  id *metadata_for_response;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  v2 = v1;
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_BYTE *)a1 + 32);
  v13 = *(__int128 *)((char *)a1 + 40);
  v14 = *a1;
  v7 = *((_QWORD *)a1 + 7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB270);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183BA1510;
  type metadata accessor for __NWHTTPResponse();
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v14;
  *(_QWORD *)(v9 + 32) = v4;
  *(_QWORD *)(v9 + 40) = v5;
  *(_BYTE *)(v9 + 48) = v6;
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 72) = v7;
  *(_OWORD *)(v9 + 80) = a1[4];
  metadata_for_response = nw_http_create_metadata_for_response((void *)v9);
  swift_release();
  type metadata accessor for NWProtocolHTTP.Metadata();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = metadata_for_response;
  *(_QWORD *)(inited + 32) = v11;
  sub_183B91944();
  return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, double))(v2 + 152))(0x7365722D70747468, 0xED000065736E6F70, 0, 0, 0, inited, 0.5);
}

uint64_t NWConnection.ContentContext.httpRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  nw_protocol_metadata_t v3;
  nw_protocol_metadata_t v4;
  _QWORD *v5;
  void *v6;
  char *v7;
  const void *v8;
  _QWORD __dst[36];
  _OWORD v11[18];

  if (qword_1EDCDC578 != -1)
    swift_once();
  v3 = nw_content_context_copy_protocol_metadata(*(nw_content_context_t *)(v1 + 16), *((nw_protocol_definition_t *)off_1EDCDD630 + 4));
  if (!v3)
    goto LABEL_9;
  v4 = v3;
  v5 = sub_1832A39D4((uint64_t)v3);
  if (!v5)
  {
    swift_unknownObjectRelease();
LABEL_9:
    sub_183282018(v11);
    return sub_183282044((uint64_t)v11, a1);
  }
  ((void (*)(nw_protocol_metadata_t))v5[12])(v4);
  type metadata accessor for NWProtocolHTTP.Metadata();
  v6 = *(void **)(swift_dynamicCastClassUnconditional() + 16);
  swift_retain();
  v7 = (char *)nw_http_metadata_copy_request(v6);
  if (!v7)
  {
    swift_release_n();
    goto LABEL_9;
  }
  v8 = v7 + 16;
  swift_beginAccess();
  memcpy(__dst, v8, sizeof(__dst));
  sub_18328212C(__dst);
  swift_release_n();
  swift_unknownObjectRelease();
  memcpy(v11, __dst, sizeof(v11));
  nullsub_1(v11);
  return sub_183282044((uint64_t)v11, a1);
}

double NWConnection.ContentContext.httpResponse.getter@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  nw_protocol_metadata_t v3;
  nw_protocol_metadata_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_1EDCDC578 != -1)
    swift_once();
  v3 = nw_content_context_copy_protocol_metadata(*(nw_content_context_t *)(v1 + 16), *((nw_protocol_definition_t *)off_1EDCDD630 + 4));
  if (v3)
  {
    v4 = v3;
    v5 = sub_1832A39D4((uint64_t)v3);
    if (v5)
    {
      ((void (*)(nw_protocol_metadata_t))v5[12])(v4);
      type metadata accessor for NWProtocolHTTP.Metadata();
      v6 = *(void **)(swift_dynamicCastClassUnconditional() + 16);
      swift_retain();
      v7 = nw_http_metadata_copy_response(v6);
      if (v7)
      {
        v8 = v7;
        swift_beginAccess();
        v9 = v8[3];
        v10 = v8[5];
        v18 = v8[4];
        v19 = v8[2];
        v17 = *((unsigned __int8 *)v8 + 48);
        v12 = v8[7];
        v11 = v8[8];
        v14 = v8[9];
        v13 = v8[10];
        v15 = v8[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release_n();
        swift_unknownObjectRelease();
        *a1 = v19;
        a1[1] = v9;
        a1[2] = v18;
        a1[3] = v10;
        a1[4] = v17;
        a1[5] = v12;
        a1[6] = v11;
        a1[7] = v14;
        a1[8] = v13;
        a1[9] = v15;
        return result;
      }
      swift_release_n();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t NWConnection.__allocating_init(obliviousHTTPConnection:gatewayKeyConfig:contextID:mediaType:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[4];
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  nw_parameters_t v27;
  _QWORD aBlock[6];
  _QWORD v29[3];

  v21[3] = a5;
  v26 = a4;
  v29[1] = *MEMORY[0x1E0C80C00];
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v8);
  v22 = type metadata accessor for NWEndpoint();
  v9 = MEMORY[0x1E0C80A78](v22);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v21[2] = (char *)v21 - v12;
  v13 = *(void **)(a1 + 16);
  swift_unknownObjectRetain();
  v14 = nw_protocol_copy_oblivious_http_contexts_definition();
  v15 = nw_connection_copy_connected_parameters_with_protocol(v13, v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v15)
  {
    v21[0] = v11;
    v25 = a1;
    v27 = nw_parameters_copy(v15);
    v16 = nw_parameters_copy_default_protocol_stack(v27);
    v29[0] = 0;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v29;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = sub_1832822A0;
    *(_QWORD *)(v18 + 24) = v17;
    v24 = v17;
    aBlock[4] = sub_182FEDAC0;
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_183281A80;
    aBlock[3] = &block_descriptor_5;
    v19 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v23 = v16;
    nw_protocol_stack_iterate_application_protocols(v16, v19);
    _Block_release(v19);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v19 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x183281A14);
    }
    if (v29[0])
      __asm { BR              X10 }
    sub_18308485C(a2, a3);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_18308485C(a2, a3);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_183281A60(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_183281A80(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

uint64_t NWConnection.__allocating_init<A>(obliviousHTTPConnection:standaloneAEADKey:contextID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[6];
  void *v49;

  v45 = a5;
  v46 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v9);
  v41 = (uint64_t)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for NWEndpoint();
  v11 = *(_QWORD *)(v42 - 8);
  v12 = MEMORY[0x1E0C80A78](v42);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v38 - v15;
  v17 = *(void **)(a1 + 16);
  swift_unknownObjectRetain();
  v18 = nw_protocol_copy_oblivious_http_contexts_definition();
  v19 = nw_connection_copy_connected_parameters_with_protocol(v17, v18);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (!v19)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
    return 0;
  }
  v47 = a2;
  v38[0] = (uint64_t)v14;
  v38[1] = v5;
  v39 = v16;
  v44 = nw_parameters_copy(v19);
  v20 = nw_parameters_copy_default_protocol_stack(v44);
  v49 = 0;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = &v49;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_183282370;
  *(_QWORD *)(v22 + 24) = v21;
  aBlock[4] = sub_1832576D8;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_183281A80;
  aBlock[3] = &block_descriptor_13;
  v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v43 = v20;
  nw_protocol_stack_iterate_application_protocols(v20, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v23 & 1) == 0)
  {
    v25 = v49;
    if (v49)
    {
      v40 = v21;
      v26 = v47;
      v27 = a4;
      MEMORY[0x1E0C80A78](result);
      v38[-2] = (uint64_t)v25;
      swift_unknownObjectRetain();
      sub_183B91314();
      nw_oblivious_http_set_context_id(v25, v46);
      v28 = v44;
      v29 = nw_connection_create_with_connection(*(void **)(a1 + 16), v44);
      if (v29)
      {
        v30 = (uint64_t)v29;
        v31 = nw_connection_copy_endpoint(v29);
        v32 = v41;
        sub_183056F9C(v31, v41);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v32, 1, v42) != 1)
        {
          v34 = (uint64_t)v39;
          sub_1830589B0(v32, (uint64_t)v39);
          v35 = v38[0];
          sub_1832616F4(v34, v38[0]);
          type metadata accessor for NWParameters();
          v36 = swift_allocObject();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
          v37 = swift_allocObject();
          *(_DWORD *)(v37 + 24) = 0;
          *(_QWORD *)(v37 + 16) = v28;
          *(_QWORD *)(v36 + 16) = v37;
          swift_allocObject();
          swift_unknownObjectRetain();
          v33 = sub_183058A08(v35, v36, v30);
          swift_unknownObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v47, v27);
          sub_183261738(v34);
          swift_release();
          swift_unknownObjectRelease();
          return v33;
        }
        swift_release();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(v47, a4);
        sub_18327BC44(v32);
      }
      else
      {
        swift_release();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(v26, a4);
      }
    }
    else
    {
      swift_release();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(v47, a4);
    }
    swift_release();
    swift_unknownObjectRelease();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_183281F9C(uint64_t result, uint64_t *a2)
{
  uint64_t v3;

  if (!*a2)
  {
    v3 = result;
    result = nw_protocol_options_is_oblivious_http((void *)result);
    if ((_DWORD)result)
    {
      *a2 = v3;
      swift_unknownObjectRetain();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t type metadata accessor for NWProtocolHTTP.Metadata()
{
  return objc_opt_self();
}

double sub_183282018(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_183282044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDD640);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18328208C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  result = sub_183B912D8();
  v8 = result;
  if (result)
  {
    result = sub_183B912FC();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  v11 = sub_183B912F0();
  if (v8)
  {
    if (v11 >= v10)
      v12 = v10;
    else
      v12 = v11;
    v13 = a4;
    v14 = v8;
  }
  else
  {
    v13 = a4;
    v14 = 0;
    v12 = 0;
  }
  nw_oblivious_http_set_config(v13, v14, v12);
  return swift_unknownObjectRelease();
}

_QWORD *sub_18328212C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[7];
  v3 = a1[8];
  v5 = a1[15];
  v6 = a1[14];
  v7 = a1[22];
  v8 = a1[21];
  v9 = a1[29];
  v10 = a1[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18324C148(v2, v3);
  sub_18324C148(v6, v5);
  sub_18324C148(v8, v7);
  sub_18324C148(v10, v9);
  swift_retain();
  return a1;
}

uint64_t sub_183282290()
{
  return swift_deallocObject();
}

uint64_t sub_1832822A0(uint64_t a1)
{
  uint64_t v1;

  return sub_183281F9C(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1832822B8()
{
  return swift_deallocObject();
}

uint64_t sub_1832822C8()
{
  return swift_deallocObject();
}

uint64_t sub_1832822D8()
{
  return swift_deallocObject();
}

uint64_t sub_1832822E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v3 = a2 - a1;
    v4 = a1;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  return nw_oblivious_http_set_standalone_aead_key(*(void **)(v2 + 16), v4, v3);
}

uint64_t type metadata accessor for NWProtocolHTTP()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolHTTP.Options()
{
  return objc_opt_self();
}

uint64_t NWInterface.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NWInterface.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  NWConcrete_nw_interface *v3;
  uint64_t result;
  uint64_t v5;

  v2 = sub_183B91758();
  swift_bridgeObjectRelease();
  v3 = nw_interface_create_with_name((char *)(v2 + 32));
  result = swift_release();
  if (v3)
    v5 = (uint64_t)v3;
  else
    v5 = 1;
  *a1 = v5;
  return result;
}

uint64_t NWInterface.init(_:)@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if ((a1 & 0x8000000000000000) != 0 || HIDWORD(a1))
  {
    result = sub_183B91F50();
    __break(1u);
  }
  else
  {
    result = (uint64_t)nw_interface_create_with_index(a1);
    if (result)
      v4 = result;
    else
      v4 = 1;
    *a2 = v4;
  }
  return result;
}

uint64_t NWInterface.name.getter()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;

  if (!*v0)
    return 0x64696C61766E69;
  v1 = swift_unknownObjectRetain();
  nw_interface_get_name(v1);
  v2 = sub_183B91800();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t NWInterface.index.getter()
{
  nw_interface_t *v0;

  if (*v0)
    return nw_interface_get_index(*v0);
  else
    return -1;
}

uint64_t NWInterface.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_18328253C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v5 = sub_1832F6914(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1832FC060();
      v9 = v15;
    }
    v10 = *(_QWORD *)(v9 + 56);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32))(a2, v10 + *(_QWORD *)(v12 + 72) * v7, v11);
    sub_1832B97E0(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  else
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t NWInterface.debugDescription.getter()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;

  if (!*v0)
    return 0x64696C61766E69;
  v1 = swift_unknownObjectRetain();
  nw_interface_get_name(v1);
  v2 = sub_183B91800();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t NWInterface.hash(into:)()
{
  nw_interface_t *v0;
  NSObject *v1;

  if (*v0)
  {
    nw_interface_get_index(*v0);
    sub_183B9225C();
    v1 = swift_unknownObjectRetain();
    nw_interface_get_name(v1);
    sub_183B91800();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_183B9225C();
  }
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t NWInterface.InterfaceType.hash(into:)()
{
  return sub_183B9225C();
}

void *NWInterface.subtype.getter@<X0>(char *a1@<X8>)
{
  void **v1;
  void *result;
  char v4;

  result = *v1;
  if (!*v1)
    goto LABEL_9;
  result = (void *)nw_interface_get_subtype(result);
  if ((int)result > 4000)
  {
    if ((_DWORD)result == 4001)
    {
      v4 = 3;
      goto LABEL_10;
    }
    if ((_DWORD)result == 5001)
    {
      v4 = 4;
      goto LABEL_10;
    }
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  if ((_DWORD)result == 1001)
  {
    v4 = 1;
    goto LABEL_10;
  }
  if ((_DWORD)result != 1002)
    goto LABEL_9;
  v4 = 2;
LABEL_10:
  *a1 = v4;
  return result;
}

BOOL static NWInterface.RadioType.Cellular.NewRadio5GVariant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWInterface.RadioType.Cellular.NewRadio5GVariant.hash(into:)()
{
  return sub_183B9225C();
}

uint64_t NWInterface.RadioType.Cellular.NewRadio5GVariant.hashValue.getter()
{
  sub_183B92250();
  sub_183B9225C();
  return sub_183B9228C();
}

uint64_t sub_18328287C@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 0;
  switch((int)result)
  {
    case 1:
      goto LABEL_8;
    case 2:
      *a2 = 1;
      break;
    case 3:
      *a2 = 2;
      break;
    case 4:
      *a2 = 3;
      break;
    case 5:
      *a2 = 4;
      break;
    case 6:
      *a2 = 5;
      break;
    case 128:
      *a2 = 80;
      break;
    case 129:
      *a2 = 16;
      break;
    case 130:
      *a2 = 17;
      break;
    case 131:
      *a2 = 48;
      break;
    case 132:
      *a2 = 49;
      break;
    case 133:
      *a2 = 81;
      break;
    case 134:
      *a2 = 112;
      break;
    case 135:
      *a2 = 113;
      break;
    case 136:
      *a2 = -112;
      break;
    default:
      v2 = 24;
LABEL_8:
      *a2 = v2;
      break;
  }
  return result;
}

void NWInterface.radioType.getter(char *a1@<X8>)
{
  _QWORD *v1;
  void *v3;
  uint64_t radio_type;

  if (*v1)
  {
    v3 = (void *)swift_unknownObjectRetain();
    radio_type = nw_interface_get_radio_type(v3);
    sub_18328287C(radio_type, a1);
    swift_unknownObjectRelease();
  }
  else
  {
    *a1 = 24;
  }
}

uint64_t NWInterface.hashValue.getter()
{
  NSObject **v0;
  NSObject *v1;
  NSObject *v2;

  v1 = *v0;
  sub_183B92250();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_183B9225C();
    v2 = swift_unknownObjectRetain();
    nw_interface_get_name(v2);
    sub_183B91800();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_183B9225C();
  }
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_183282A6C()
{
  nw_interface_t *v0;
  NSObject *v1;

  if (*v0)
  {
    nw_interface_get_index(*v0);
    sub_183B9225C();
    v1 = swift_unknownObjectRetain();
    nw_interface_get_name(v1);
    sub_183B91800();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_183B9225C();
  }
  sub_183B917C4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_183282B0C()
{
  NSObject **v0;
  NSObject *v1;
  NSObject *v2;

  v1 = *v0;
  sub_183B92250();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_183B9225C();
    v2 = swift_unknownObjectRetain();
    nw_interface_get_name(v2);
    sub_183B91800();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_183B9225C();
  }
  sub_183B917C4();
  swift_bridgeObjectRelease();
  return sub_183B9228C();
}

uint64_t sub_183282BBC()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;

  if (!*v0)
    return 0x64696C61766E69;
  v1 = swift_unknownObjectRetain();
  nw_interface_get_name(v1);
  v2 = sub_183B91800();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t NWPath.debugDescription.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for NWPath(0) + 52));
  if (!v1)
    return 1701736302;
  v2 = objc_msgSend(v1, sel_description);
  v3 = sub_183B916E0();

  return v3;
}

uint64_t NWPath.nw.getter()
{
  type metadata accessor for NWPath(0);
  return swift_unknownObjectRetain();
}

uint64_t NWPath.supportsIPv4.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t NWPath.supportsIPv6.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t NWPath.supportsDNS.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t NWPath.gateways.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NWPath.localEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NWPath(0);
  return sub_183062090(v1 + *(int *)(v3 + 44), a1, qword_1ECD84160);
}

uint64_t NWPath.remoteEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NWPath(0);
  return sub_183062090(v1 + *(int *)(v3 + 48), a1, qword_1ECD84160);
}

Swift::Bool __swiftcall NWPath.usesInterfaceSubtype(_:)(Network::NWInterface::InterfaceSubtype a1)
{
  uint64_t v1;
  char *v2;
  void *v3;

  v2 = (char *)a1;
  v3 = *(void **)(v1 + *(int *)(type metadata accessor for NWPath(0) + 52));
  if (v3)
    LOBYTE(v3) = nw_path_uses_interface_subtype(v3, dword_183BA1D0C[*v2]);
  return (char)v3;
}

uint64_t NWPath.estimatedUploadThroughput.getter()
{
  return sub_183282DB8((uint64_t (*)(void))nw_path_get_estimated_upload_throughput);
}

uint64_t NWPath.estimatedDownloadThroughput.getter()
{
  return sub_183282DB8((uint64_t (*)(void))nw_path_get_estimated_download_throughput);
}

uint64_t sub_183282DB8(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v1 + *(int *)(type metadata accessor for NWPath(0) + 52));
  if (result)
    return a1();
  return result;
}

uint64_t NWPath.isDirect.getter()
{
  return sub_183062514((uint64_t (*)(void))nw_path_is_direct);
}

BOOL static NWPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  _BOOL8 v11;
  uint64_t v13;

  v4 = type metadata accessor for NWPath(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(v5 + 52);
  v9 = *(NSObject **)(a1 + v8);
  if (!v9)
  {
    sub_183058C44(a2, (uint64_t)v7, type metadata accessor for NWPath);
    v11 = *(_QWORD *)&v7[*(int *)(v4 + 52)] == 0;
LABEL_6:
    sub_183058AE0((uint64_t)v7, type metadata accessor for NWPath);
    return v11;
  }
  v10 = *(NSObject **)(a2 + v8);
  if (!v10)
  {
    sub_183058C44(a2, (uint64_t)v7, type metadata accessor for NWPath);
    v11 = 0;
    goto LABEL_6;
  }
  return nw_path_is_equal(v9, v10);
}

BOOL sub_183282EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  _BOOL8 v12;
  uint64_t v14;

  v4 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(int *)(v8 + 52);
  v10 = *(NSObject **)(v4 + v9);
  if (!v10)
  {
    sub_183058C44(v5, (uint64_t)v7, type metadata accessor for NWPath);
    v12 = *(_QWORD *)&v7[*(int *)(a3 + 52)] == 0;
LABEL_6:
    sub_183058AE0((uint64_t)v7, type metadata accessor for NWPath);
    return v12;
  }
  v11 = *(NSObject **)(v5 + v9);
  if (!v11)
  {
    sub_183058C44(v5, (uint64_t)v7, type metadata accessor for NWPath);
    v12 = 0;
    goto LABEL_6;
  }
  return nw_path_is_equal(v10, v11);
}

uint64_t sub_183282FA4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;

  v2 = *(void **)(v1 + *(int *)(a1 + 52));
  if (!v2)
    return 1701736302;
  v3 = objc_msgSend(v2, sel_description);
  v4 = sub_183B916E0();

  return v4;
}

void sub_183283010(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_183061FA0(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_183283090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  _BYTE v11[16];
  _BYTE *v12;

  v4 = type metadata accessor for NWPath(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_183058C44(a1, (uint64_t)v6, type metadata accessor for NWPath);
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v12 = v6;
  v8 = v7 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v7 + 16);
  v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_18328805C(v8);
  os_unfair_lock_unlock(v9);
  return sub_183058AE0((uint64_t)v6, type metadata accessor for NWPath);
}

uint64_t NWPathMonitor.currentPath.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_183283204(v4, a1);
  os_unfair_lock_unlock(v5);
  return sub_183058AE0(a1, type metadata accessor for NWPath);
}

uint64_t sub_183283204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1830620D4(a1, (uint64_t *)&unk_1ECD84148);
  sub_183058C44(a2, a1, type metadata accessor for NWPath);
  v4 = type metadata accessor for NWPath(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
}

void (*NWPathMonitor.currentPath.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for NWPath(0) - 8) + 64);
  *v3 = malloc(v4);
  v5 = malloc(v4);
  v6 = *(uint64_t **)(v1 + 16);
  v3[1] = v5;
  v3[2] = v6;
  v7 = *v6;
  v8 = *(_QWORD *)(*MEMORY[0x1E0DEC528] + *v6 + 16);
  v3[3] = v8;
  v9 = (uint64_t)v6 + v8;
  v10 = *(unsigned int *)(v7 + 48);
  *((_DWORD *)v3 + 10) = v10;
  v11 = (os_unfair_lock_s *)((char *)v6 + ((v10 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v11);
  sub_183061FA0(v9, (uint64_t)v5);
  v3[4] = 0;
  os_unfair_lock_unlock(v11);
  return sub_183283354;
}

void sub_183283354(void ***a1, char a2)
{
  void **v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  v2 = *a1;
  v4 = (*a1)[1];
  v3 = (char *)(*a1)[2];
  v5 = **a1;
  v6 = (*((unsigned int *)*a1 + 10) + 3) & 0x1FFFFFFFCLL;
  v7 = (os_unfair_lock_s *)&v3[v6];
  v8 = (uint64_t)(*a1)[3] + (_QWORD)v3;
  if ((a2 & 1) != 0)
  {
    sub_183058C44((uint64_t)(*a1)[1], (uint64_t)v5, type metadata accessor for NWPath);
    os_unfair_lock_lock(v7);
    sub_183283204(v8, (uint64_t)v5);
    os_unfair_lock_unlock(v7);
    sub_183058AE0((uint64_t)v5, type metadata accessor for NWPath);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v3[v6]);
    sub_183283204(v8, (uint64_t)v4);
    os_unfair_lock_unlock(v7);
  }
  sub_183058AE0((uint64_t)v4, type metadata accessor for NWPath);
  free(v4);
  free(v5);
  free(v2);
}

uint64_t (*NWPathMonitor.pathUpdateHandler.getter())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_18328368C(v2, (uint64_t (**)(uint64_t))&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_182FEDAC0;
}

double sub_183283508@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  double result;
  __int128 v7;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_18328368C(v4, (uint64_t (**)(uint64_t))&v7);
  os_unfair_lock_unlock(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_183283594(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    a1 = (uint64_t *)swift_allocObject();
    a1[2] = v1;
    a1[3] = v2;
    v3 = sub_1832576D8;
  }
  else
  {
    v3 = 0;
  }
  MEMORY[0x1E0C80A78](a1);
  v5 = v4 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_183061488(v1);
  os_unfair_lock_lock(v6);
  sub_183288044(v5);
  os_unfair_lock_unlock(v6);
  return sub_1830630AC((uint64_t)v3);
}

uint64_t sub_18328368C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NWPathMonitor.LockedState(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  if (*v3)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_183288404;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(uint64_t))v6;
  return sub_183061488(v4);
}

void (*NWPathMonitor.pathUpdateHandler.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t (*v10)();
  uint64_t v11;
  __int128 v13;
  uint64_t (*v14[4])(uint64_t);

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(uint64_t **)(v1 + 16);
  v3[2] = v4;
  v5 = *v4;
  v6 = *(_QWORD *)(*MEMORY[0x1E0DEC528] + *v4 + 16);
  v3[3] = v6;
  v7 = (uint64_t)v4 + v6;
  v8 = *(unsigned int *)(v5 + 48);
  *((_DWORD *)v3 + 10) = v8;
  v9 = (os_unfair_lock_s *)((char *)v4 + ((v8 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_18328368C(v7, v14);
  v3[4] = 0;
  os_unfair_lock_unlock(v9);
  v10 = (uint64_t (*)())v14[0];
  if (v14[0])
  {
    v13 = *(_OWORD *)v14;
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = v13;
    v10 = sub_1832576D8;
  }
  else
  {
    v11 = 0;
  }
  *v3 = v10;
  v3[1] = v11;
  return sub_1832837FC;
}

void sub_1832837FC(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*((unsigned int *)*a1 + 10) + 3) & 0x1FFFFFFFCLL;
  v7 = (os_unfair_lock_s *)(v5 + v6);
  v8 = v5 + (*a1)[3];
  if ((a2 & 1) != 0)
  {
    sub_183061488(**a1);
    os_unfair_lock_lock(v7);
    sub_1831BA424(v8, v3, v4);
    os_unfair_lock_unlock(v7);
    sub_1830630AC(v3);
    sub_1830630AC(*v2);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + v6));
    sub_1831BA424(v8, v3, v4);
    os_unfair_lock_unlock(v7);
    sub_1830630AC(v3);
  }
  free(v2);
}

void *NWPathMonitor.queue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  void *v4;
  id v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  v4 = *(void **)(v2 + *(int *)(type metadata accessor for NWPathMonitor.LockedState(0) + 28));
  v5 = v4;
  os_unfair_lock_unlock(v3);
  return v4;
}

uint64_t NWPathMonitor.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  NWPathMonitor.init(_:)(a1);
  return v2;
}

uint64_t NWPathMonitor.init(_:)(uint64_t a1)
{
  uint64_t v1;
  int *locked;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0);
  MEMORY[0x1E0C80A78](locked);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NWPath(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = &v5[locked[5]];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *(_QWORD *)&v5[locked[6]] = 1;
  *(_QWORD *)&v5[locked[7]] = 0;
  *(_QWORD *)&v5[locked[8]] = MEMORY[0x1E0DEE9E0];
  v5[locked[9]] = 0;
  v5[locked[10]] = 0;
  *(_QWORD *)&v5[locked[11]] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84128);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + ((*(unsigned int *)(*(_QWORD *)v8 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_183058C44((uint64_t)v5, v8 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v8 + 16), type metadata accessor for NWPathMonitor.LockedState);
  sub_183058AE0((uint64_t)v5, type metadata accessor for NWPathMonitor.LockedState);
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

uint64_t NWPathMonitor.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  NWPathMonitor.init()();
  return v0;
}

uint64_t NWPathMonitor.deinit()
{
  uint64_t v0;

  nw_path_monitor_cancel(*(nw_path_monitor_t *)(v0 + 24));
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t static NWPathMonitor.ethernetChannel.getter()
{
  nw_path_monitor_t v0;
  uint64_t v1;

  v0 = nw_path_monitor_create_for_ethernet_channel();
  v1 = swift_allocObject();
  NWPathMonitor.init(_:)((uint64_t)v0);
  return v1;
}

uint64_t NWPathMonitor.__allocating_init(requiredInterfaceType:)(unsigned __int8 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  NWPathMonitor.init(requiredInterfaceType:)(a1);
  return v2;
}

uint64_t NWPathMonitor.init(requiredInterfaceType:)(unsigned __int8 *a1)
{
  uint64_t v1;
  int *locked;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0);
  MEMORY[0x1E0C80A78](locked);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a1) = *a1;
  v6 = type metadata accessor for NWPath(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = &v5[locked[5]];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *(_QWORD *)&v5[locked[6]] = 1;
  *(_QWORD *)&v5[locked[7]] = 0;
  *(_QWORD *)&v5[locked[8]] = MEMORY[0x1E0DEE9E0];
  v5[locked[9]] = 0;
  v5[locked[10]] = 0;
  *(_QWORD *)&v5[locked[11]] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84128);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + ((*(unsigned int *)(*(_QWORD *)v8 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_183058C44((uint64_t)v5, v8 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v8 + 16), type metadata accessor for NWPathMonitor.LockedState);
  sub_183058AE0((uint64_t)v5, type metadata accessor for NWPathMonitor.LockedState);
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = nw_path_monitor_create_with_type((nw_interface_type_t)a1);
  return v1;
}

uint64_t NWPathMonitor.__allocating_init(prohibitedInterfaceTypes:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = sub_183284B24(a1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t NWPathMonitor.init(prohibitedInterfaceTypes:)(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_183284B24(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t NWPathMonitor.debugDescription.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 24), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

int *sub_183283E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int *result;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7590);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *v6 = 1;
  (*(void (**)(_QWORD *, _QWORD))(v7 + 104))(v6, *MEMORY[0x1E0DF07A8]);
  v10 = a1;
  v11 = a2;
  type metadata accessor for NWPath(0);
  sub_183B91AB8();
  result = (int *)type metadata accessor for NWPathMonitor.LockedState(0);
  if ((*(_BYTE *)(a1 + result[9]) & 1) == 0)
    return sub_1831E0EC0(a1);
  return result;
}

int *sub_183283EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *result;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = sub_183B915CC();
  v63 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD840F8);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  MEMORY[0x1E0C80A78](v9);
  v57 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84148);
  MEMORY[0x1E0C80A78](v11);
  v62 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NWPath(0);
  v60 = *(uint8_t **)(v13 - 8);
  v61 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v56 = (uint64_t)&v52 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCD75D0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (int *)type metadata accessor for NWPathMonitor.LockedState(0);
  if ((*(_BYTE *)(a2 + result[10]) & 1) == 0)
  {
    v35 = result[6];
    v36 = *(_QWORD *)(a2 + v35);
    if (!__OFADD__(v36, 1))
    {
      *(_QWORD *)(a2 + v35) = v36 + 1;
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
      v53 = v36;
      v54 = v37;
      v63 = a2;
      v37((char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v20);
      v38 = v20;
      v39 = a1;
      v40 = (*(unsigned __int8 *)(v21 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v41 = a3;
      v42 = (v22 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = v41;
      v44 = v43 + v40;
      v45 = v39;
      v46 = v38;
      (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v44, v23, v38);
      v47 = v53;
      *(_QWORD *)(v43 + v42) = v53;
      swift_retain();
      sub_183B91A4C();
      v54(v19, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v46);
      v48 = v63;
      sub_1832A6110((uint64_t)v19, v47);
      v49 = v62;
      sub_183062090(v48, v62, (uint64_t *)&unk_1ECD84148);
      if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v60 + 6))(v49, 1, v61) == 1)
        return (int *)sub_1830620D4(v49, (uint64_t *)&unk_1ECD84148);
      v50 = v56;
      sub_183058EC4(v49, v56, type metadata accessor for NWPath);
      sub_183058C44(v50, v55, type metadata accessor for NWPath);
      v51 = v57;
      sub_183B91A64();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v51, v59);
      return (int *)sub_183058AE0(v50, type metadata accessor for NWPath);
    }
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  result = (int *)(id)__nwlog_path_log();
  if (!result)
    goto LABEL_13;
  sub_183B915D8();
  swift_retain_n();
  v25 = sub_183B915B4();
  v26 = sub_183B91C74();
  if (os_log_type_enabled(v25, v26))
  {
    v62 = v20;
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    *(_DWORD *)v27 = 136315138;
    v65 = v28;
    v60 = v27 + 4;
    v29 = objc_msgSend(*(id *)(a3 + 24), sel_description);
    v59 = a3;
    v30 = v29;
    v31 = sub_183B916E0();
    v61 = v6;
    v32 = v31;
    v34 = v33;

    v64 = sub_183273D70(v32, v34, &v65);
    sub_183B91D1C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v25, v26, "%s Attempted to fetch paths for cancelled monitor", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v28, -1, -1);
    MEMORY[0x186DB563C](v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v61);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v6);
  }
  return (int *)sub_183B91A70();
}

void sub_18328443C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v7 + 16);
  v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_1832844CC(v8, a3, a4, a2);
  os_unfair_lock_unlock(v9);
}

void sub_1832844CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t locked;
  uint64_t v11;

  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1EDCD75D0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
  sub_183B91A70();
  locked = type metadata accessor for NWPathMonitor.LockedState(0);
  sub_18328253C(a3, (uint64_t)v9);
  sub_1830620D4((uint64_t)v9, qword_1EDCD75D0);
  if (!*(_QWORD *)(a1 + *(int *)(locked + 28)))
    nw_path_monitor_cancel(*(nw_path_monitor_t *)(a4 + 24));
}

uint64_t NWPathMonitor.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  *v1 = v0;
  v1[1] = sub_183243DAC;
  return sub_183B91A94();
}

uint64_t sub_183284610()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  *v1 = v0;
  v1[1] = sub_18328467C;
  return sub_183B91A94();
}

uint64_t sub_18328467C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1832846C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  *v1 = v0;
  v1[1] = sub_183288428;
  return sub_183B91A94();
}

uint64_t NWPathMonitor.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _BYTE v16[16];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7600);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(_QWORD *)(v2 + 16);
  v13 = v12 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v12 + 16);
  v14 = (os_unfair_lock_s *)(v12 + ((*(unsigned int *)(*(_QWORD *)v12 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v14);
  sub_183283E08(v13, v2);
  os_unfair_lock_unlock(v14);
  sub_183B91A88();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(a1, v7, v4);
  return swift_release();
}

uint64_t sub_183284880@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  _QWORD v14[2];

  v14[0] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7600);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v11 = v10 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v10 + 16);
  v12 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(_QWORD *)v10 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v12);
  sub_183288074(v11);
  os_unfair_lock_unlock(v12);
  sub_183B91A88();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(_QWORD, char *, uint64_t))(v3 + 32))(v14[0], v5, v2);
  return swift_release();
}

uint64_t _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(nw_interface_t *a1, nw_interface_t *a2)
{
  NSObject *v2;
  uint32_t index;
  NSObject *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v13;

  v2 = *a2;
  if (*a1)
  {
    index = nw_interface_get_index(*a1);
    if (v2 && index == nw_interface_get_index(v2))
    {
      v4 = swift_unknownObjectRetain();
      nw_interface_get_name(v4);
      v5 = sub_183B91800();
      v7 = v6;
      swift_unknownObjectRelease();
      v8 = swift_unknownObjectRetain();
      nw_interface_get_name(v8);
      v9 = sub_183B91800();
      v11 = v10;
      swift_unknownObjectRelease();
      if (v5 != v9)
        goto LABEL_12;
      goto LABEL_10;
    }
    return 0;
  }
  if (v2)
  {
    nw_interface_get_index(*a2);
    return 0;
  }
  v7 = 0xE700000000000000;
  v11 = 0xE700000000000000;
LABEL_10:
  if (v7 == v11)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
LABEL_12:
  v13 = sub_183B920F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t sub_183284B00()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_183284B24(uint64_t a1)
{
  uint64_t v1;
  int *locked;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  nw_path_monitor_t v9;
  uint64_t v10;
  NSObject *v11;
  unsigned __int8 *v12;
  nw_interface_type_t v13;
  uint64_t v15;

  locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0);
  MEMORY[0x1E0C80A78](locked);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NWPath(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = &v5[locked[5]];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *(_QWORD *)&v5[locked[6]] = 1;
  *(_QWORD *)&v5[locked[7]] = 0;
  *(_QWORD *)&v5[locked[8]] = MEMORY[0x1E0DEE9E0];
  v5[locked[9]] = 0;
  v5[locked[10]] = 0;
  *(_QWORD *)&v5[locked[11]] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84128);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + ((*(unsigned int *)(*(_QWORD *)v8 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_183058C44((uint64_t)v5, v8 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v8 + 16), type metadata accessor for NWPathMonitor.LockedState);
  sub_183058AE0((uint64_t)v5, type metadata accessor for NWPathMonitor.LockedState);
  *(_QWORD *)(v1 + 16) = v8;
  v9 = nw_path_monitor_create();
  *(_QWORD *)(v1 + 24) = v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = v9;
    v12 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v13 = *v12++;
      nw_path_monitor_prohibit_interface_type(v11, v13);
      --v10;
    }
    while (v10);
  }
  return v1;
}

unint64_t sub_183284CAC()
{
  unint64_t result;

  result = qword_1EDCDD6B8;
  if (!qword_1EDCDD6B8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWInterface.InterfaceType, &type metadata for NWInterface.InterfaceType);
    atomic_store(result, (unint64_t *)&qword_1EDCDD6B8);
  }
  return result;
}

unint64_t sub_183284CF4()
{
  unint64_t result;

  result = qword_1EDCDD6C0;
  if (!qword_1EDCDD6C0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWInterface.InterfaceSubtype, &type metadata for NWInterface.InterfaceSubtype);
    atomic_store(result, (unint64_t *)&qword_1EDCDD6C0);
  }
  return result;
}

unint64_t sub_183284D3C()
{
  unint64_t result;

  result = qword_1EDCDD6C8;
  if (!qword_1EDCDD6C8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWInterface.RadioType.WiFi, &type metadata for NWInterface.RadioType.WiFi);
    atomic_store(result, (unint64_t *)&qword_1EDCDD6C8);
  }
  return result;
}

unint64_t sub_183284D84()
{
  unint64_t result;

  result = qword_1EDCDD6D0;
  if (!qword_1EDCDD6D0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWInterface.RadioType.Cellular.NewRadio5GVariant, &type metadata for NWInterface.RadioType.Cellular.NewRadio5GVariant);
    atomic_store(result, (unint64_t *)&qword_1EDCDD6D0);
  }
  return result;
}

unint64_t sub_183284DCC()
{
  unint64_t result;

  result = qword_1EDCDD6D8;
  if (!qword_1EDCDD6D8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWInterface, &type metadata for NWInterface);
    atomic_store(result, (unint64_t *)&qword_1EDCDD6D8);
  }
  return result;
}

unint64_t sub_183284E14()
{
  unint64_t result;

  result = qword_1EDCDD6E0;
  if (!qword_1EDCDD6E0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWPath.Status, &type metadata for NWPath.Status);
    atomic_store(result, (unint64_t *)&qword_1EDCDD6E0);
  }
  return result;
}

unint64_t sub_183284E5C()
{
  unint64_t result;

  result = qword_1EDCDD6E8[0];
  if (!qword_1EDCDD6E8[0])
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWPath.UnsatisfiedReason, &type metadata for NWPath.UnsatisfiedReason);
    atomic_store(result, qword_1EDCDD6E8);
  }
  return result;
}

uint64_t sub_183284EA0()
{
  return MEMORY[0x1E0DEDD18];
}

uint64_t sub_183284EAC()
{
  return sub_183064644((unint64_t *)&unk_1EDCDD700, type metadata accessor for NWPathMonitor.Iterator, (uint64_t)&protocol conformance descriptor for NWPathMonitor.Iterator);
}

uint64_t type metadata accessor for NWPathMonitor.Iterator(uint64_t a1)
{
  return sub_183058E90(a1, qword_1EDCD7578);
}

_QWORD *assignWithCopy for NWInterface(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for NWInterface(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NWInterface.InterfaceSubtype()
{
  return &type metadata for NWInterface.InterfaceSubtype;
}

uint64_t getEnumTagSinglePayload for NWInterface.RadioType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 3)
    goto LABEL_17;
  if (a2 + 253 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 253) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 253;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 253;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 253;
  }
LABEL_17:
  v6 = ((*a1 >> 2) & 2 | (*a1 >> 4) & 1) ^ 3;
  if (v6 >= 2)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for NWInterface.RadioType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 253 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 253) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 2)
    return ((uint64_t (*)(void))((char *)&loc_18328506C + 4 * byte_183BA161D[v4]))();
  *a1 = a2 - 3;
  return ((uint64_t (*)(void))((char *)sub_1832850A0 + 4 * byte_183BA1618[v4]))();
}

uint64_t sub_1832850A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832850A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832850B0);
  return result;
}

uint64_t sub_1832850C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832850C8);
  *(_BYTE *)result = (16 * (a2 & 1)) | 8;
  return result;
}

uint64_t sub_1832850CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832850D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832850E0(unsigned __int8 *a1)
{
  return (*a1 >> 4) & 1;
}

_BYTE *sub_1832850EC(_BYTE *result)
{
  *result &= ~0x10u;
  return result;
}

_BYTE *sub_1832850FC(_BYTE *result, char a2)
{
  *result = *result & 0xE7 | (16 * (a2 & 1));
  return result;
}

ValueMetadata *type metadata accessor for NWInterface.RadioType()
{
  return &type metadata for NWInterface.RadioType;
}

uint64_t storeEnumTagSinglePayload for NWInterface.RadioType.WiFi(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_183285170 + 4 * byte_183BA1627[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1832851A4 + 4 * byte_183BA1622[v4]))();
}

uint64_t sub_1832851A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832851AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832851B4);
  return result;
}

uint64_t sub_1832851C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832851C8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1832851CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832851D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWInterface.RadioType.WiFi()
{
  return &type metadata for NWInterface.RadioType.WiFi;
}

uint64_t getEnumTagSinglePayload for NWInterface.RadioType.Cellular(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x7C)
    goto LABEL_17;
  if (a2 + 132 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 132) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 132;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 132;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 132;
  }
LABEL_17:
  v6 = ((*a1 >> 5) & 0xFFFFFF87 | (8 * ((*a1 >> 1) & 0xF))) ^ 0x7F;
  if (v6 >= 0x7B)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for NWInterface.RadioType.Cellular(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 132 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 132) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x7C)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x7B)
    return ((uint64_t (*)(void))((char *)&loc_1832852DC + 4 * byte_183BA1631[v4]))();
  *a1 = a2 - 124;
  return ((uint64_t (*)(void))((char *)sub_183285310 + 4 * byte_183BA162C[v4]))();
}

uint64_t sub_183285310(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183285318(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183285320);
  return result;
}

uint64_t sub_183285338(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183285340);
  *(_BYTE *)result = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
  return result;
}

uint64_t sub_183285344(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18328534C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183285358(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 <= 0x3F)
    return v1 >> 5;
  else
    return (v1 | 0xFFFFFFFE) + 2 * (v1 >> 5);
}

_BYTE *sub_183285374(_BYTE *result)
{
  *result &= 0x1Fu;
  return result;
}

_BYTE *sub_183285384(_BYTE *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 1 | (32 * a2);
  else
    *result = (a2 & 1 | (32 * (a2 >> 1))) + 32;
  return result;
}

ValueMetadata *type metadata accessor for NWInterface.RadioType.Cellular()
{
  return &type metadata for NWInterface.RadioType.Cellular;
}

uint64_t storeEnumTagSinglePayload for NWInterface.RadioType.Cellular.NewRadio5GVariant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_183285414 + 4 * byte_183BA163B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183285448 + 4 * byte_183BA1636[v4]))();
}

uint64_t sub_183285448(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183285450(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183285458);
  return result;
}

uint64_t sub_183285464(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18328546CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_183285470(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183285478(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWInterface.RadioType.Cellular.NewRadio5GVariant()
{
  return &type metadata for NWInterface.RadioType.Cellular.NewRadio5GVariant;
}

uint64_t assignWithCopy for NWPath(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[11];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  v11 = v10(v7, 1, v9);
  v12 = v10(v8, 1, v9);
  if (v11)
  {
    if (!v12)
    {
      v13 = (char *)&loc_183285590 + 4 * byte_183BA165E[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v12)
  {
    sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v15 = (char *)&loc_183285648 + 4 * word_183BA1664[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_9:
  v16 = a3[12];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = v10((void *)(a1 + v16), 1, v9);
  v20 = v10(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      v21 = (char *)&loc_1832857CC + 4 * byte_183BA166E[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_14;
  }
  if (v20)
  {
    sub_183058AE0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
LABEL_14:
    v22 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_17;
  }
  if (a1 != a2)
  {
    sub_183058AE0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v23 = (char *)&loc_183285884 + 4 * byte_183BA1673[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_17:
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void sub_1832859DC()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183285768);
}

void sub_183285A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183285768);
}

void sub_183285A38()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183285768);
}

void sub_183285A58()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18328599CLL);
}

void sub_183285A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18328599CLL);
}

void sub_183285AB4()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18328599CLL);
}

void sub_183285AD4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1)
    swift_unknownObjectRetain();
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183285768);
}

void sub_183285B44()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1)
    swift_unknownObjectRetain();
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18328599CLL);
}

uint64_t initializeWithTake for NWPath(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[11];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v13 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(v10 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v14 = a3[12];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (v11((const void *)(a2 + v14), 1, v9))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v18 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(v10 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for NWPath(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = a3[11];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v16 = sub_183B913A4();
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v7, v8, v16);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      v15 = *(_QWORD *)(v10 + 64);
LABEL_8:
      memcpy(v7, v8, v15);
      goto LABEL_14;
    }
    sub_183058AE0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
LABEL_7:
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160) - 8) + 64);
    goto LABEL_8;
  }
  if (v13)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v14 = sub_183B913A4();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(v10 + 64));
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_14:
  v17 = a3[12];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = v11((void *)(a1 + v17), 1, v9);
  v21 = v11(v19, 1, v9);
  if (!v20)
  {
    if (!v21)
    {
      if (a1 == a2)
        goto LABEL_27;
      sub_183058AE0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v24 = sub_183B913A4();
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v18, v19, v24);
        swift_storeEnumTagMultiPayload();
        goto LABEL_27;
      }
      v23 = *(_QWORD *)(v10 + 64);
      goto LABEL_21;
    }
    sub_183058AE0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
LABEL_20:
    v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160) - 8) + 64);
LABEL_21:
    memcpy(v18, v19, v23);
    goto LABEL_27;
  }
  if (v21)
    goto LABEL_20;
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v22 = sub_183B913A4();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v18, v19, v22);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v18, v19, *(_QWORD *)(v10 + 64));
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
LABEL_27:
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1832860E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_183286164(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NWPath.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_183286228 + 4 * byte_183BA167D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18328625C + 4 * byte_183BA1678[v4]))();
}

uint64_t sub_18328625C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183286264(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18328626CLL);
  return result;
}

uint64_t sub_183286278(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183286280);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_183286284(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18328628C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t method lookup function for NWPathMonitor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWPathMonitor.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NWPathMonitor.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NWPathMonitor.__allocating_init(requiredInterfaceType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWPathMonitor.__allocating_init(prohibitedInterfaceTypes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t initializeBufferWithCopyOfBuffer for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for NWPathMonitor.Iterator(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWPathMonitor.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183286468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NWPathMonitor.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832864B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCD75E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_1832864F8()
{
  unint64_t v0;

  sub_183056604(319, &qword_1EDCD75F8, type metadata accessor for NWPath, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DF0820]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_183286578(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t *, _QWORD, uint64_t, int *);
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v34;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = (int *)type metadata accessor for NWPath(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84148);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v34 = v8;
      *(_BYTE *)v4 = *(_BYTE *)a2;
      v4[1] = a2[1];
      *((_DWORD *)v4 + 4) = *((_DWORD *)a2 + 4);
      v4[3] = a2[3];
      v11 = v7[11];
      v12 = (char *)v4 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for NWEndpoint();
      v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v15(v13, 1, v14))
      {
        v17 = (char *)&loc_1832866D8 + 4 * byte_183BA168C[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v16 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      v18 = v7[12];
      v19 = (char *)v4 + v18;
      v20 = (char *)a2 + v18;
      if (!v15((char *)a2 + v18, 1, v14))
      {
        v22 = (char *)&loc_18328684C + 4 * byte_183BA1691[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v21 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      *(uint64_t *)((char *)v4 + v7[13]) = *(uint64_t *)((char *)a2 + v7[13]);
      v23 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v34 + 56);
      swift_unknownObjectRetain();
      v23(v4, 0, 1, v7);
    }
    v24 = a3[5];
    v25 = (uint64_t *)((char *)v4 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    if (*v26)
    {
      v27 = v26[1];
      *v25 = *v26;
      v25[1] = v27;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    v28 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v29 = *(void **)((char *)a2 + v28);
    *(uint64_t *)((char *)v4 + v28) = (uint64_t)v29;
    v30 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *((_BYTE *)v4 + v30) = *((_BYTE *)a2 + v30);
    v31 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *(uint64_t *)((char *)v4 + v31) = *(uint64_t *)((char *)a2 + v31);
    v32 = v29;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_183286A0C(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v37;
  void *v38;
  void *v39;
  int v40;
  int v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  int *v57;

  v6 = (int *)type metadata accessor for NWPath(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_183058AE0(a1, type metadata accessor for NWPath);
      goto LABEL_7;
    }
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
    *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v19 = v6[11];
    v20 = (void *)(a1 + v19);
    v21 = (void *)(a2 + v19);
    v22 = type metadata accessor for NWEndpoint();
    v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
    v24 = v23(v20, 1, v22);
    v25 = v23(v21, 1, v22);
    if (v24)
    {
      if (!v25)
      {
        v26 = (char *)&loc_183286C30 + 4 * word_183BA16B4[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
    }
    else
    {
      if (!v25)
      {
        if (a1 != a2)
        {
          sub_183058AE0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
          v29 = (char *)&loc_183286D64 + 4 * word_183BA16BE[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
LABEL_20:
        v37 = v6[12];
        v38 = (void *)(a1 + v37);
        v39 = (void *)(a2 + v37);
        v40 = v23((void *)(a1 + v37), 1, v22);
        v41 = v23(v39, 1, v22);
        if (v40)
        {
          if (!v41)
          {
            v42 = (char *)&loc_183287188 + 4 * byte_183BA16C8[swift_getEnumCaseMultiPayload()];
            __asm { BR              X10 }
          }
        }
        else
        {
          if (!v41)
          {
            if (a1 != a2)
            {
              sub_183058AE0((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
              v44 = (char *)&loc_183287240 + 4 * byte_183BA16CD[swift_getEnumCaseMultiPayload()];
              __asm { BR              X10 }
            }
            goto LABEL_28;
          }
          sub_183058AE0((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
        }
        v43 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
LABEL_28:
        *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        goto LABEL_29;
      }
      sub_183058AE0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    }
    v28 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_20;
  }
  if (v10)
  {
LABEL_7:
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84148);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_29;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v57 = v6;
  v11 = v6[11];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for NWEndpoint();
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
  swift_bridgeObjectRetain();
  v16 = v15;
  swift_bridgeObjectRetain();
  if (!v15((uint64_t)v13, 1, v14))
  {
    v27 = (char *)&loc_183286CA8 + 4 * byte_183BA16AA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  v30 = v57[12];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  if (!v16(a2 + v30, 1, v14))
  {
    v35 = (char *)&loc_183286F04 + 4 * byte_183BA16AF[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v34 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  *(_QWORD *)(a1 + v57[13]) = *(_QWORD *)(a2 + v57[13]);
  v36 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56);
  swift_unknownObjectRetain();
  v36(a1, 0, 1, v57);
LABEL_29:
  v45 = a3[5];
  v46 = (_QWORD *)(a1 + v45);
  v47 = a2 + v45;
  v48 = *(_QWORD *)(a1 + v45);
  v49 = *(_QWORD *)(a2 + v45);
  if (!v48)
  {
    if (v49)
    {
      v51 = *(_QWORD *)(v47 + 8);
      *v46 = v49;
      v46[1] = v51;
      swift_retain();
      goto LABEL_36;
    }
LABEL_35:
    *(_OWORD *)v46 = *(_OWORD *)v47;
    goto LABEL_36;
  }
  if (!v49)
  {
    swift_release();
    goto LABEL_35;
  }
  v50 = *(_QWORD *)(v47 + 8);
  *v46 = v49;
  v46[1] = v50;
  swift_retain();
  swift_release();
LABEL_36:
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v52 = a3[7];
  v53 = *(void **)(a1 + v52);
  v54 = *(void **)(a2 + v52);
  *(_QWORD *)(a1 + v52) = v54;
  v55 = v54;

  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  return a1;
}

void sub_183287470()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183287124);
}

void sub_183287498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183287124);
}

void sub_1832874CC()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183287124);
}

void sub_1832874EC()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183287360);
}

void sub_183287514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_183B913A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183287360);
}

void sub_183287548()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183287360);
}

void sub_183287568()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1)
    swift_unknownObjectRetain();
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183287124);
}

void sub_1832875DC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1)
    swift_unknownObjectRetain();
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x183287360);
}

_BYTE *sub_18328764C(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = (int *)type metadata accessor for NWPath(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84148);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    v9 = v6[11];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for NWEndpoint();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48);
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v16 = sub_183B913A4();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v10, v11, v16);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v10, v11, *(_QWORD *)(v13 + 64));
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v6[12];
    v18 = &a1[v17];
    v19 = &a2[v17];
    if (v14(&a2[v17], 1, v12))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v21 = sub_183B913A4();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v18, v19, *(_QWORD *)(v13 + 64));
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v12);
    }
    *(_QWORD *)&a1[v6[13]] = *(_QWORD *)&a2[v6[13]];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v22 = a3[5];
  v23 = &a1[v22];
  v24 = (uint64_t *)&a2[v22];
  v25 = *v24;
  if (*v24)
  {
    v26 = v24[1];
    *v23 = v25;
    v23[1] = v26;
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  v27 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  v28 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[v28] = a2[v28];
  v29 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(_QWORD *)&a1[v29] = *(_QWORD *)&a2[v29];
  return a1;
}

uint64_t sub_183287904(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  int v39;
  int v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;

  v6 = (int *)type metadata accessor for NWPath(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_183058AE0(a1, type metadata accessor for NWPath);
      goto LABEL_7;
    }
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
    *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRelease();
    v19 = v6[11];
    v20 = (void *)(a1 + v19);
    v21 = (void *)(a2 + v19);
    v22 = type metadata accessor for NWEndpoint();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
    v25 = v24(v20, 1, v22);
    v26 = v24(v21, 1, v22);
    if (v25)
    {
      if (!v26)
      {
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          v27 = sub_183B913A4();
          (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v20, v21, v27);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v20, v21, *(_QWORD *)(v23 + 64));
        }
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_32:
        v36 = v6[12];
        v37 = (void *)(a1 + v36);
        v38 = (void *)(a2 + v36);
        v39 = v24((void *)(a1 + v36), 1, v22);
        v40 = v24(v38, 1, v22);
        if (v39)
        {
          if (!v40)
          {
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              v41 = sub_183B913A4();
              (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v37, v38, v41);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v37, v38, *(_QWORD *)(v23 + 64));
            }
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v37, 0, 1, v22);
            goto LABEL_45;
          }
        }
        else
        {
          if (!v40)
          {
            if (a1 == a2)
              goto LABEL_45;
            sub_183058AE0((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              v43 = sub_183B913A4();
              (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v37, v38, v43);
              swift_storeEnumTagMultiPayload();
              goto LABEL_45;
            }
            v42 = *(_QWORD *)(v23 + 64);
LABEL_39:
            memcpy(v37, v38, v42);
LABEL_45:
            *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
            swift_unknownObjectRelease();
            goto LABEL_46;
          }
          sub_183058AE0((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
        }
        v42 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160) - 8) + 64);
        goto LABEL_39;
      }
    }
    else
    {
      if (!v26)
      {
        if (a1 == a2)
          goto LABEL_32;
        sub_183058AE0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          v35 = sub_183B913A4();
          (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v20, v21, v35);
          swift_storeEnumTagMultiPayload();
          goto LABEL_32;
        }
        v29 = *(_QWORD *)(v23 + 64);
LABEL_17:
        memcpy(v20, v21, v29);
        goto LABEL_32;
      }
      sub_183058AE0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    }
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160) - 8) + 64);
    goto LABEL_17;
  }
  if (v10)
  {
LABEL_7:
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84148);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_46;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v11 = v6[11];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for NWEndpoint();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v28 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v12, v13, v28);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(v15 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = v6[12];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  if (v16((const void *)(a2 + v30), 1, v14))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v34 = sub_183B913A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v31, v32, v34);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v31, v32, *(_QWORD *)(v15 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v31, 0, 1, v14);
  }
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
LABEL_46:
  v44 = a3[5];
  v45 = (_QWORD *)(a1 + v44);
  v46 = a2 + v44;
  v47 = *(_QWORD *)(a1 + v44);
  v48 = *(_QWORD *)(a2 + v44);
  if (!v47)
  {
    if (v48)
    {
      v50 = *(_QWORD *)(v46 + 8);
      *v45 = v48;
      v45[1] = v50;
      goto LABEL_53;
    }
LABEL_52:
    *(_OWORD *)v45 = *(_OWORD *)v46;
    goto LABEL_53;
  }
  if (!v48)
  {
    swift_release();
    goto LABEL_52;
  }
  v49 = *(_QWORD *)(v46 + 8);
  *v45 = v48;
  v45[1] = v49;
  swift_release();
LABEL_53:
  v51 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v52 = *(void **)(a1 + v51);
  *(_QWORD *)(a1 + v51) = *(_QWORD *)(a2 + v51);

  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  v53 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v53) = *(_BYTE *)(a2 + v53);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_release();
  return a1;
}

uint64_t sub_183287F30()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183287F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84148);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_183287FBC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_183287FC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84148);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_183288044(uint64_t a1)
{
  uint64_t v1;

  return sub_1831BA424(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_18328805C(uint64_t a1)
{
  uint64_t v1;

  return sub_183283204(a1, *(_QWORD *)(v1 + 16));
}

int *sub_183288074(uint64_t a1)
{
  uint64_t v1;

  return sub_183283E08(a1, v1);
}

uint64_t sub_18328808C()
{
  return swift_deallocObject();
}

uint64_t sub_18328809C()
{
  return swift_deallocObject();
}

uint64_t sub_1832880AC()
{
  return swift_deallocObject();
}

uint64_t sub_1832880BC()
{
  return swift_deallocObject();
}

int *sub_1832880CC(uint64_t a1)
{
  uint64_t v1;

  return sub_183283EEC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1832880D4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t objectdestroy_53Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for NWPath(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  v3 = v0 + ((v2 + 32) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 44);
  v5 = type metadata accessor for NWEndpoint();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v4 + 48) != 1)
          goto LABEL_12;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v9 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4, v9);
        break;
      case 4u:
LABEL_12:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }
  v7 = v3 + *(int *)(v1 + 48);
  if (!v6(v7, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(v7 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v7 + 48) != 1)
          goto LABEL_17;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v10 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
        break;
      case 4u:
LABEL_17:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_183288328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_1832883AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_18328443C(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_183288404(uint64_t a1)
{
  uint64_t v1;

  return sub_183281A60(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t *sub_183288460(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 24);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (char *)a2 + v5;
    v8 = *(uint64_t *)((char *)a2 + v5 + 8);
    *v6 = *(uint64_t *)((char *)a2 + v5);
    v6[1] = v8;
    v9 = *(int *)(type metadata accessor for NWActorID() + 20);
    v10 = (char *)v6 + v9;
    v11 = &v7[v9];
    v12 = sub_183B914AC();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return v3;
}

uint64_t sub_183288518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  v3 = v2 + *(int *)(type metadata accessor for NWActorID() + 20);
  v4 = sub_183B914AC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

_QWORD *sub_183288568(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (char *)a2 + v4;
  v7 = *(_QWORD *)((char *)a2 + v4 + 8);
  *v5 = *(_QWORD *)((char *)a2 + v4);
  v5[1] = v7;
  v8 = *(int *)(type metadata accessor for NWActorID() + 20);
  v9 = (char *)v5 + v8;
  v10 = &v6[v8];
  v11 = sub_183B914AC();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

_DWORD *sub_1832885F4(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (char *)a2 + v4;
  *v5 = *(_QWORD *)((char *)a2 + v4);
  v5[1] = *(_QWORD *)((char *)a2 + v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(type metadata accessor for NWActorID() + 20);
  v8 = (char *)v5 + v7;
  v9 = &v6[v7];
  v10 = sub_183B914AC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

_QWORD *sub_18328868C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_OWORD *)((char *)a1 + v4) = *(_OWORD *)((char *)a2 + v4);
  v7 = *(int *)(type metadata accessor for NWActorID() + 20);
  v8 = &v5[v7];
  v9 = &v6[v7];
  v10 = sub_183B914AC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

_QWORD *sub_183288704(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (char *)a2 + v4;
  v7 = *(_QWORD *)((char *)a2 + v4 + 8);
  *v5 = *(_QWORD *)((char *)a2 + v4);
  v5[1] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(type metadata accessor for NWActorID() + 20);
  v9 = (char *)v5 + v8;
  v10 = &v6[v8];
  v11 = sub_183B914AC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_183288784()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183288790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for NWActorID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_1832887D0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832887DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for NWActorID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t _s9HandshakeVMa()
{
  uint64_t result;

  result = qword_1EDCDD830;
  if (!qword_1EDCDD830)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_18328885C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWActorID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *_s17HandshakeResponseVMa()
{
  return &_s17HandshakeResponseVN;
}

uint64_t sub_1832888E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD868);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1832890D0();
  sub_183B9231C();
  v8[15] = 0;
  sub_183B9207C();
  if (!v1)
  {
    v8[14] = 1;
    sub_183B9207C();
    _s9HandshakeVMa();
    v8[13] = 2;
    type metadata accessor for NWActorID();
    sub_183289114(&qword_1EDCDD870, (uint64_t)&protocol conformance descriptor for NWActorID);
    sub_183B92064();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_183288A58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v18 = a2;
  v19 = type metadata accessor for NWActorID();
  MEMORY[0x1E0C80A78](v19);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD850);
  v5 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s9HandshakeVMa();
  MEMORY[0x1E0C80A78](v8);
  v10 = (_DWORD *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_1832890D0();
  v21 = v7;
  v11 = v22;
  sub_183B922EC();
  if (!v11)
  {
    v12 = v5;
    v13 = v20;
    v25 = 0;
    *v10 = sub_183B9201C();
    v24 = 1;
    v10[1] = sub_183B9201C();
    v23 = 2;
    sub_183289114(&qword_1EDCDD860, (uint64_t)&protocol conformance descriptor for NWActorID);
    v15 = v21;
    sub_183B92010();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v13);
    v16 = v18;
    sub_183058EC4((uint64_t)v4, (uint64_t)v10 + *(int *)(v8 + 24), (uint64_t (*)(_QWORD))type metadata accessor for NWActorID);
    sub_183058EC4((uint64_t)v10, v16, (uint64_t (*)(_QWORD))_s9HandshakeVMa);
  }
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

unint64_t sub_183288C94()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x4449726F746361;
  if (*v0 == 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0xD000000000000013;
}

uint64_t sub_183288CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18328946C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_183288D14()
{
  sub_1832890D0();
  return sub_183B92334();
}

uint64_t sub_183288D3C()
{
  sub_1832890D0();
  return sub_183B92340();
}

uint64_t sub_183288D64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_183288A58(a1, a2);
}

uint64_t sub_183288D78(_QWORD *a1)
{
  return sub_1832888E4(a1);
}

uint64_t sub_183288D8C()
{
  return 0x6E6F6973726576;
}

uint64_t sub_183288DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_183B920F4();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_183288E38(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_183288E44()
{
  sub_18328908C();
  return sub_183B92334();
}

uint64_t sub_183288E6C()
{
  sub_18328908C();
  return sub_183B92340();
}

uint64_t sub_183288E94@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t result;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD840);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18328908C();
  sub_183B922EC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  v9 = sub_183B9201C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  *a2 = v9;
  return result;
}

uint64_t sub_183288FA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD878);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18328908C();
  sub_183B9231C();
  sub_183B9207C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_18328908C()
{
  unint64_t result;

  result = qword_1EDCDD848;
  if (!qword_1EDCDD848)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1FE0, &_s17HandshakeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD848);
  }
  return result;
}

unint64_t sub_1832890D0()
{
  unint64_t result;

  result = qword_1EDCDD858;
  if (!qword_1EDCDD858)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1F90, &_s9HandshakeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD858);
  }
  return result;
}

uint64_t sub_183289114(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NWActorID();
    result = MEMORY[0x186DB5558](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s9HandshakeV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1832891A0 + 4 * byte_183BA1D25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1832891D4 + 4 * byte_183BA1D20[v4]))();
}

uint64_t sub_1832891D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832891DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1832891E4);
  return result;
}

uint64_t sub_1832891F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1832891F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1832891FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183289204(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s9HandshakeV10CodingKeysOMa()
{
  return &_s9HandshakeV10CodingKeysON;
}

uint64_t _s17HandshakeResponseV10CodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_183289260 + 4 * byte_183BA1D2A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_183289280 + 4 * byte_183BA1D2F[v4]))();
}

_BYTE *sub_183289260(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_183289280(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_183289288(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_183289290(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_183289298(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1832892A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s17HandshakeResponseV10CodingKeysOMa()
{
  return &_s17HandshakeResponseV10CodingKeysON;
}

unint64_t sub_1832892C0()
{
  unint64_t result;

  result = qword_1EDCDD880;
  if (!qword_1EDCDD880)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1EB0, &_s17HandshakeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD880);
  }
  return result;
}

unint64_t sub_183289308()
{
  unint64_t result;

  result = qword_1EDCDD888;
  if (!qword_1EDCDD888)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1F68, &_s9HandshakeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD888);
  }
  return result;
}

unint64_t sub_183289350()
{
  unint64_t result;

  result = qword_1EDCDD890;
  if (!qword_1EDCDD890)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1ED8, &_s9HandshakeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD890);
  }
  return result;
}

unint64_t sub_183289398()
{
  unint64_t result;

  result = qword_1EDCDD898;
  if (!qword_1EDCDD898)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1F00, &_s9HandshakeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD898);
  }
  return result;
}

unint64_t sub_1832893E0()
{
  unint64_t result;

  result = qword_1EDCDD8A0;
  if (!qword_1EDCDD8A0)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1E20, &_s17HandshakeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD8A0);
  }
  return result;
}

unint64_t sub_183289428()
{
  unint64_t result;

  result = qword_1EDCDD8A8;
  if (!qword_1EDCDD8A8)
  {
    result = MEMORY[0x186DB5558](&unk_183BA1E48, &_s17HandshakeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDCDD8A8);
  }
  return result;
}

uint64_t sub_18328946C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000013 && a2 == 0x8000000183C707C0 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000183C707E0 || (sub_183B920F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4449726F746361 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_183B920F4();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1832895B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  NSObject **v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint32_t index;
  NSObject *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a1 + 32);
  v4 = (NSObject **)(a2 + 32);
  while (1)
  {
    v7 = *v3++;
    v6 = v7;
    v9 = *v4++;
    v8 = v9;
    if (!v6)
      break;
    swift_unknownObjectRetain();
    v10 = swift_unknownObjectRetain();
    index = nw_interface_get_index(v10);
    if (!v8)
      goto LABEL_20;
    if (index != nw_interface_get_index(v8))
      goto LABEL_19;
    v12 = swift_unknownObjectRetain();
    nw_interface_get_name(v12);
    v13 = sub_183B91800();
    v15 = v14;
    swift_unknownObjectRelease();
    v16 = swift_unknownObjectRetain();
    nw_interface_get_name(v16);
    v17 = sub_183B91800();
    v19 = v18;
    swift_unknownObjectRelease();
    if (v13 == v17)
    {
LABEL_14:
      if (v15 != v19)
        goto LABEL_5;
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (!--v2)
        return 1;
    }
    else
    {
LABEL_5:
      v5 = sub_183B920F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if ((v5 & 1) == 0)
        return 0;
      if (!--v2)
        return 1;
    }
  }
  swift_unknownObjectRetain();
  if (!v8)
  {
    v15 = 0xE700000000000000;
    v19 = 0xE700000000000000;
    goto LABEL_14;
  }
  nw_interface_get_index(v8);
LABEL_19:
  swift_unknownObjectRelease();
LABEL_20:
  swift_unknownObjectRelease();
  return 0;
}

BOOL sub_183289774(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (unsigned __int8 *)(a1 + 33);
  v6 = (unsigned __int8 *)(a2 + 33);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t NWEthernetChannel.debugDescription.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  v2 = sub_183B916E0();

  return v2;
}

uint64_t sub_18328983C@<X0>(nw_error_t error@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  nw_error_domain_t error_domain;
  uint64_t v7;
  unsigned int error_code;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;

  switch((int)result)
  {
    case 0:
      result = swift_unknownObjectRelease();
      v5 = 0x8000000000;
      break;
    case 1:
      if (error)
      {
        error_domain = nw_error_get_error_domain(error);
        switch(error_domain)
        {
          case nw_error_domain_tls:
            error_code = nw_error_get_error_code(error);
            result = swift_unknownObjectRelease();
            v5 = error_code | 0x200000000;
            break;
          case nw_error_domain_dns:
            v9 = nw_error_get_error_code(error);
            result = swift_unknownObjectRelease();
            v5 = v9 | 0x100000000;
            break;
          case nw_error_domain_posix:
            nw_error_get_error_code(error);
            v7 = sub_183B915E4();
            result = swift_unknownObjectRelease();
            v5 = 22;
            if ((v7 & 0x100000000) == 0)
              v5 = v7;
            break;
          default:
            result = swift_unknownObjectRelease();
            v5 = 22;
            break;
        }
      }
      else
      {
        v5 = 50;
      }
      break;
    case 2:
      result = swift_unknownObjectRelease();
      v5 = 0x8000000001;
      break;
    case 3:
      result = swift_unknownObjectRelease();
      v5 = 0x8000000002;
      break;
    case 4:
      result = (uint64_t)sub_1830840B4(error, (uint64_t)&v10);
      v5 = 0x4000000016;
      if (v11 != 255)
        v5 = v10 | ((unint64_t)v11 << 32) | 0x4000000000;
      break;
    default:
      result = swift_unknownObjectRelease();
      v5 = 0x8000000003;
      break;
  }
  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 4) = BYTE4(v5);
  return result;
}

void NWEthernetChannel.state.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 16);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v3 + 20);
  *(_DWORD *)a1 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 68));
}

uint64_t (*NWEthernetChannel.stateUpdateHandler.getter())()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 17;
  os_unfair_lock_lock(v1 + 17);
  sub_183289DCC(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_182FEDAC0;
}

uint64_t sub_183289AAC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_1832576D8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  return NWEthernetChannel.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t NWEthernetChannel.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  void *v9;
  _QWORD v11[6];

  v5 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 68));
  v6 = *(_QWORD *)(v5 + 24);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  LODWORD(v6) = *(unsigned __int8 *)(v5 + 64);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 68));
  if ((_DWORD)v6 != 1)
    return sub_1830630AC(a1);
  v7 = *(NSObject **)(v2 + 16);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v2;
  v8[3] = a1;
  v8[4] = a2;
  v11[4] = sub_18328C0E8;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_182FED9C4;
  v11[3] = &block_descriptor_7;
  v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  sub_183061488(a1);
  swift_release();
  nw_ethernet_channel_set_state_changed_handler(v7, v9);
  sub_1830630AC(a1);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

void sub_183289C88(uint64_t a1, NSObject *a2, uint64_t a3, void (*a4)(int *))
{
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  int v10;

  v7 = *(os_unfair_lock_s **)(a3 + 24);
  v8 = (uint64_t)&v7[4];
  v9 = v7 + 17;
  os_unfair_lock_lock(v7 + 17);
  sub_183289D20(v8, a1, a2, (uint64_t)&v10);
  os_unfair_lock_unlock(v9);
  if (a4)
    a4(&v10);
}

uint64_t sub_183289D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;

  swift_unknownObjectRetain();
  result = sub_18328983C(a3, a2, (uint64_t)&v11);
  v9 = v11;
  v10 = v11 | ((unint64_t)v12 << 32);
  *(_BYTE *)(a1 + 4) = v12;
  *(_DWORD *)a1 = v9;
  if (v10 >= 0x8000000003)
  {
    result = nw_utilities_minos_atleast();
    if ((_DWORD)result)
    {
      sub_1830630AC(*(_QWORD *)(a1 + 8));
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      result = sub_1830630AC(*(_QWORD *)(a1 + 24));
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  *(_DWORD *)a4 = v10;
  *(_BYTE *)(a4 + 4) = BYTE4(v10);
  return result;
}

uint64_t sub_183289DCC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_182FEDAC0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_183061488(v3);
}

uint64_t (*NWEthernetChannel.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)();
  uint64_t v7;
  __int128 v9;
  uint64_t (*v10[4])();

  a1[2] = (uint64_t (*)())v1;
  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 17;
  os_unfair_lock_lock(v3 + 17);
  sub_183289DCC(v4, v10);
  os_unfair_lock_unlock(v5);
  v6 = v10[0];
  if (v10[0])
  {
    v9 = *(_OWORD *)v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_1832576D8;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_183289EE8;
}

uint64_t sub_183289EE8(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, NWEthernetChannel.stateUpdateHandler.setter, (void (*)(uint64_t, uint64_t))sub_183257670, (uint64_t (*)(uint64_t, uint64_t))sub_182FEDBA4);
}

uint64_t NWEthernetChannel.etherType.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 32);
}

uint64_t NWEthernetChannel.interface.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
  return swift_unknownObjectRetain();
}

uint64_t NWEthernetChannel.__allocating_init(on:etherType:)(NSObject **a1, uint16_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  NWEthernetChannel.init(on:etherType:)(a1, a2);
  return v4;
}

uint64_t NWEthernetChannel.init(on:etherType:)(NSObject **a1, uint16_t a2)
{
  uint64_t v2;
  NSObject *v4;
  uint64_t result;

  v4 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD8B0);
  result = swift_allocObject();
  *(_DWORD *)(result + 68) = 0;
  *(_BYTE *)(result + 20) = 0x80;
  *(_DWORD *)(result + 16) = 0;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 49) = 0u;
  *(_QWORD *)(v2 + 24) = result;
  *(_WORD *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 40) = v4;
  if (v4)
  {
    *(_QWORD *)(v2 + 16) = nw_ethernet_channel_create(a2, v4);
    sub_183061488(0);
    NWEthernetChannel.stateUpdateHandler.setter(0, 0);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NWEthernetChannel.__allocating_init(on:etherType:parameters:)(NSObject **a1, uint16_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_allocObject();
  v6 = sub_18328C0F4(a1, a2, a3);
  swift_release();
  return v6;
}

uint64_t NWEthernetChannel.init(on:etherType:parameters:)(NSObject **a1, uint16_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_18328C0F4(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t NWEthernetChannel.maximumPayloadSize.getter()
{
  uint64_t v0;

  return nw_ethernet_channel_get_maximum_payload_size(*(nw_ethernet_channel_t *)(v0 + 16));
}

void NWEthernetChannel.start(queue:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t (*v8)();
  NSObject *v9;
  __int128 v10;
  uint64_t (*v11[4])();

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 68));
  v5 = *(void **)(v4 + 56);
  v6 = a1;

  *(_QWORD *)(v4 + 56) = a1;
  *(_BYTE *)(v4 + 64) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 68));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 68));
  sub_183289DCC(v4 + 16, v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 68));
  if (v11[0])
  {
    v10 = *(_OWORD *)v11;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v10;
    v8 = sub_1832576D8;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  sub_183061488((uint64_t)v8);
  sub_183061488((uint64_t)v8);
  NWEthernetChannel.stateUpdateHandler.setter((uint64_t)v8, v7);
  sub_1830630AC((uint64_t)v8);
  sub_1830630AC((uint64_t)v8);
  v9 = *(NSObject **)(v2 + 16);
  nw_ethernet_channel_set_queue(v9, v6);
  nw_ethernet_channel_start(v9);
}

void *NWEthernetChannel.queue.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (os_unfair_lock_s *)(v1 + 68);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 68));
  v3 = *(void **)(v1 + 56);
  v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

Swift::Void __swiftcall NWEthernetChannel.cancel()()
{
  uint64_t v0;

  nw_ethernet_channel_cancel(*(nw_ethernet_channel_t *)(v0 + 16));
}

void NWEthernetChannel.EthernetAddress.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_18328A260()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (BYTE6(v1) == 6)
  {
    sub_18328BE04(v2, v1);
    v4 = v3;
    result = sub_18308485C(v2, v1);
  }
  else
  {
    result = sub_18308485C(v2, v1);
    v4 = 0;
  }
  *v0 = v4;
  return result;
}

uint64_t NWEthernetChannel.EthernetAddress.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t result;
  __int16 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  size_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  char *v44;
  size_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char **v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  char v57[16];
  uint64_t *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;

  v60 = 58;
  v61 = 0xE100000000000000;
  v58 = &v60;
  swift_bridgeObjectRetain();
  v6 = sub_18328B3EC(0x7FFFFFFFFFFFFFFFLL, 1, sub_18328C204, (uint64_t)v57, a1, a2);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    result = swift_bridgeObjectRelease();
    v17 = 0;
LABEL_22:
    *a3 = v17;
    return result;
  }
  v50 = a3;
  swift_bridgeObjectRetain();
  v8 = 0;
  v56 = v6;
  v9 = (unint64_t *)(v6 + 56);
  while (1)
  {
    v11 = *(v9 - 3);
    v10 = *(v9 - 2);
    if ((v10 ^ v11) < 0x4000)
      goto LABEL_10;
    v13 = *(v9 - 1);
    v12 = *v9;
    if ((*v9 & 0x1000000000000000) == 0)
      break;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = sub_18328B9E0(v11, v10, v13, v12, 16);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v16 & 0x100) == 0)
      goto LABEL_16;
LABEL_10:
    ++v8;
    v9 += 4;
    if (v7 == v8)
      goto LABEL_20;
  }
  if ((v12 & 0x2000000000000000) != 0)
  {
    v60 = *(v9 - 1);
    v61 = v12 & 0xFFFFFFFFFFFFFFLL;
    v14 = &v60;
  }
  else if ((v13 & 0x1000000000000000) != 0)
  {
    v14 = (uint64_t *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v14 = (uint64_t *)sub_183B91E78();
  }
  result = sub_18328C258((uint64_t)v14, v11, v10, v13, v12, 16);
  v59 = BYTE1(result) & 1;
  if ((result & 0x100) != 0)
    goto LABEL_10;
LABEL_16:
  if (v7 >= v8)
  {
    if (v7 == v8)
    {
LABEL_20:
      result = swift_bridgeObjectRelease_n();
LABEL_21:
      v17 = 0;
      a3 = v50;
      goto LABEL_22;
    }
    v18 = 1;
    v19 = v7;
  }
  else
  {
    v18 = -1;
    v19 = v8;
    v8 = v7;
  }
  v20 = 0;
  v52 = v18;
  v54 = v6 + 88;
  v51 = v19;
  do
  {
    v22 = __OFADD__(v20, v18);
    v20 += v18;
    if (v22)
      goto LABEL_81;
    if (v8 == v7)
      goto LABEL_82;
    v21 = v8 + 1;
    if (v8 + 1 != v7)
    {
      v23 = (unint64_t *)(v54 + 32 * v8);
      while (v8 >= -1)
      {
        if (v21 >= *(_QWORD *)(v56 + 16))
          goto LABEL_80;
        v25 = *(v23 - 3);
        v24 = *(v23 - 2);
        if ((v24 ^ v25) >= 0x4000)
        {
          v27 = *(v23 - 1);
          v26 = *v23;
          if ((*v23 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v29 = sub_18328B9E0(v25, v24, v27, v26, 16);
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if ((v29 & 0x100) == 0)
              goto LABEL_44;
          }
          else
          {
            if ((v26 & 0x2000000000000000) != 0)
            {
              v60 = *(v23 - 1);
              v61 = v26 & 0xFFFFFFFFFFFFFFLL;
              v28 = &v60;
            }
            else if ((v27 & 0x1000000000000000) != 0)
            {
              v28 = (uint64_t *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else
            {
              v28 = (uint64_t *)sub_183B91E78();
            }
            result = sub_18328C258((uint64_t)v28, v25, v24, v27, v26, 16);
            v59 = BYTE1(result) & 1;
            if ((result & 0x100) == 0)
              goto LABEL_44;
          }
        }
        ++v21;
        v23 += 4;
        if (v7 == v21)
        {
          v21 = v7;
LABEL_44:
          v19 = v51;
          v18 = v52;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    v21 = v7;
LABEL_25:
    v8 = v21;
  }
  while (v21 != v19);
  swift_bridgeObjectRelease();
  if (v20 <= 5)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  result = swift_bridgeObjectRetain_n();
  v55 = 0;
  v30 = 0;
  v17 = (char *)MEMORY[0x1E0DEE9D8];
  v31 = v56 + 56;
  v53 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
LABEL_48:
  v32 = (unint64_t *)(v31 + 32 * v30++);
  while ((unint64_t)(v30 - 1) < *(_QWORD *)(v56 + 16))
  {
    v34 = *(v32 - 3);
    v33 = *(v32 - 2);
    if ((v33 ^ v34) >> 14)
    {
      v36 = *(v32 - 1);
      v35 = *v32;
      if ((*v32 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        LOWORD(v33) = sub_18328B9E0(v34, v33, v36, v35, 16);
        result = swift_bridgeObjectRelease();
        if ((v33 & 0x100) == 0)
          goto LABEL_62;
      }
      else
      {
        if ((v35 & 0x2000000000000000) != 0)
        {
          v60 = *(v32 - 1);
          v61 = v35 & 0xFFFFFFFFFFFFFFLL;
          v37 = &v60;
        }
        else if ((v36 & 0x1000000000000000) != 0)
        {
          v37 = (uint64_t *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v37 = (uint64_t *)sub_183B91E78();
        }
        result = sub_18328C258((uint64_t)v37, v34, v33, v36, v35, 16);
        LOBYTE(v33) = result;
        v59 = BYTE1(result) & 1;
        if ((result & 0x100) == 0)
        {
LABEL_62:
          v38 = v55;
          if (!v55)
          {
            v39 = *((_QWORD *)v17 + 3);
            if ((uint64_t)((v39 >> 1) + 0x4000000000000000) < 0)
              goto LABEL_86;
            v40 = v39 & 0xFFFFFFFFFFFFFFFELL;
            if (v40 <= 1)
              v41 = 1;
            else
              v41 = v40;
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC1A0);
            v42 = (char *)swift_allocObject();
            v43 = 2 * _swift_stdlib_malloc_size(v42) - 64;
            *((_QWORD *)v42 + 2) = v41;
            *((_QWORD *)v42 + 3) = v43;
            v44 = v42 + 32;
            v45 = *((_QWORD *)v17 + 3) >> 1;
            if (*((_QWORD *)v17 + 2))
            {
              v46 = v17 + 32;
              if (v42 != v17 || v44 >= &v46[v45])
                memmove(v42 + 32, v46, v45);
              *((_QWORD *)v17 + 2) = 0;
            }
            v53 = &v44[v45];
            v38 = (v43 >> 1) - v45;
            result = swift_release();
            v17 = v42;
          }
          v31 = v56 + 56;
          v55 = v38 - 1;
          if (__OFSUB__(v38, 1))
            goto LABEL_84;
          *v53++ = v33;
          if (v30 != v7)
            goto LABEL_48;
LABEL_75:
          result = swift_bridgeObjectRelease();
          v47 = *((_QWORD *)v17 + 3);
          a3 = v50;
          if (v47 >= 2)
          {
            v48 = v47 >> 1;
            v22 = __OFSUB__(v48, v55);
            v49 = v48 - v55;
            if (v22)
              goto LABEL_85;
            *((_QWORD *)v17 + 2) = v49;
          }
          result = swift_bridgeObjectRelease_n();
          goto LABEL_22;
        }
      }
    }
    ++v30;
    v32 += 4;
    if (v30 - v7 == 1)
      goto LABEL_75;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

uint64_t NWEthernetChannel.EthernetAddress.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDD1E0);
  result = swift_allocObject();
  v3 = MEMORY[0x1E0DEDE70];
  *(_OWORD *)(result + 16) = xmmword_183B9FD30;
  v4 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(result + 56) = v3;
  *(_QWORD *)(result + 64) = v4;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  *(_BYTE *)(result + 32) = *(_BYTE *)(v1 + 32);
  *(_QWORD *)(result + 96) = v3;
  *(_QWORD *)(result + 104) = v4;
  if (v5 == 1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *(_BYTE *)(result + 72) = *(_BYTE *)(v1 + 33);
  *(_QWORD *)(result + 136) = v3;
  *(_QWORD *)(result + 144) = v4;
  if (v5 < 3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_BYTE *)(result + 112) = *(_BYTE *)(v1 + 34);
  *(_QWORD *)(result + 176) = v3;
  *(_QWORD *)(result + 184) = v4;
  if (v5 == 3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(_BYTE *)(result + 152) = *(_BYTE *)(v1 + 35);
  *(_QWORD *)(result + 216) = v3;
  *(_QWORD *)(result + 224) = v4;
  if (v5 < 5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(_BYTE *)(result + 192) = *(_BYTE *)(v1 + 36);
  *(_QWORD *)(result + 256) = v3;
  *(_QWORD *)(result + 264) = v4;
  if (v5 != 5)
  {
    *(_BYTE *)(result + 232) = *(_BYTE *)(v1 + 37);
    return sub_183B91704();
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t NWEthernetChannel.EthernetAddress.rawValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_183261930(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t NWEthernetChannel.EthernetAddress.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  result = sub_183B9225C();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = v1 + 32;
    do
    {
      ++v4;
      result = sub_183B92268();
      --v3;
    }
    while (v3);
  }
  return result;
}

BOOL static NWEthernetChannel.EthernetAddress.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_183289774(*a1, *a2);
}

uint64_t NWEthernetChannel.EthernetAddress.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  sub_183B92250();
  sub_183B9225C();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      ++v3;
      sub_183B92268();
      --v2;
    }
    while (v2);
  }
  return sub_183B9228C();
}

uint64_t sub_18328AA4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  result = sub_183B9225C();
  if (v2)
  {
    v4 = v1 + 32;
    do
    {
      ++v4;
      result = sub_183B92268();
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_18328AA9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  sub_183B92250();
  v2 = *(_QWORD *)(v1 + 16);
  sub_183B9225C();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      ++v3;
      sub_183B92268();
      --v2;
    }
    while (v2);
  }
  return sub_183B9228C();
}

BOOL sub_18328AB08(uint64_t *a1, uint64_t *a2)
{
  return sub_183289774(*a1, *a2);
}

uint64_t NWEthernetChannel.send(content:to:vlanTag:completion:)(uint64_t a1, uint64_t a2, char **a3, uint16_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char *v13;

  v7 = v6;
  v13 = *a3;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_18328BD88((uint64_t)v13);
  sub_18328ABB0((unsigned __int8 *)v13 + 32, v7, a1, a2, a4, a5, a6);
  return swift_bridgeObjectRelease();
}

void sub_18328ABB0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint16_t a5, uint64_t a6, uint64_t a7)
{
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[6];

  v11 = *(NSObject **)(a2 + 16);
  swift_unknownObjectRetain();
  v12 = (void *)sub_183B9141C();
  v14 = NWCreateDispatchDataFromNSData(v12, v13);

  if (v14)
  {
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = a6;
    *(_QWORD *)(v15 + 24) = a7;
    v17[4] = sub_183083EF8;
    v17[5] = v15;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 1107296256;
    v17[2] = sub_183056AB0;
    v17[3] = &block_descriptor_44;
    v16 = _Block_copy(v17);
    swift_retain();
    swift_release();
    nw_ethernet_channel_send(v11, v14, a5, a1, v16);
    _Block_release(v16);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t (*NWEthernetChannel.receiveHandler.getter())(uint64_t, uint64_t, __int16, uint64_t, uint64_t)
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 17;
  os_unfair_lock_lock(v1 + 17);
  sub_18328B254(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(_QWORD)v6)
    return 0;
  v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_18328C6AC;
}

double sub_18328AD70@<D0>(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  double result;
  __int128 v9;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 24);
  v6 = v5 + 4;
  v7 = v5 + 17;
  os_unfair_lock_lock(v5 + 17);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_18328ADE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, __int16, uint64_t, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18328C6AC;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_183061488(v1);
  NWEthernetChannel.receiveHandler.setter((uint64_t)v4, v3);
}

void NWEthernetChannel.receiveHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v5 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 68));
  v6 = *(_QWORD *)(v5 + 40);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 68));
  if (a1)
  {
    v7 = *(NSObject **)(v2 + 16);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v10[4] = sub_18328C6B0;
    v10[5] = v8;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_18328B1E0;
    v10[3] = &block_descriptor_20;
    v9 = _Block_copy(v10);
    sub_183061488(a1);
    sub_183061488(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_ethernet_channel_set_receive_handler(v7, v9);
    sub_1830630AC(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_1830630AC(a1);
  }
  else
  {
    nw_ethernet_channel_set_receive_handler(*(nw_ethernet_channel_t *)(v2 + 16), 0);
  }
}

void *sub_18328AFC4(void *a1, uint64_t a2, _BYTE *a3)
{
  void *result;
  void *v5;

  result = NWCreateNSDataFromDispatchData(a1);
  if (result)
  {
    v5 = result;
    sub_183B91428();

    sub_1832BDCC4(a3, 6);
    __asm { BR              X10 }
  }
  return result;
}

void sub_18328B1E0(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_18328B254@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, unsigned __int16 *, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_18328CB94;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_183061488(v3);
}

uint64_t (*NWEthernetChannel.receiveHandler.modify(uint64_t (**a1)(uint64_t, uint64_t, __int16, uint64_t, uint64_t)))(uint64_t *a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t (*v6)(uint64_t, uint64_t, __int16, uint64_t, uint64_t);
  uint64_t v7;
  __int128 v9;
  __int128 v10;

  a1[2] = (uint64_t (*)(uint64_t, uint64_t, __int16, uint64_t, uint64_t))v1;
  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 17;
  os_unfair_lock_lock(v3 + 17);
  sub_18328B254(v4, &v10);
  os_unfair_lock_unlock(v5);
  v6 = (uint64_t (*)(uint64_t, uint64_t, __int16, uint64_t, uint64_t))v10;
  if ((_QWORD)v10)
  {
    v9 = v10;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    v6 = sub_18328C6AC;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t, __int16, uint64_t, uint64_t))v7;
  return sub_18328B370;
}

uint64_t sub_18328B370(uint64_t *a1, char a2)
{
  return sub_18324FA8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))NWEthernetChannel.receiveHandler.setter, (void (*)(uint64_t, uint64_t))sub_183061488, (uint64_t (*)(uint64_t, uint64_t))sub_1830630AC);
}

uint64_t NWEthernetChannel.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWEthernetChannel.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_18328B3EC(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_18328B888(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_183B9186C();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_183B917DC();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_183B917DC();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_183B91884();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_183242A00(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_183242A00((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_183B917DC();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_183B91884();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_183242A00(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_183242A00((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_183B91F50();
  __break(1u);
LABEL_42:
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_18328B888(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_183B91884();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_183242A00(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_183242A00((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_183B91F50();
  __break(1u);
  return result;
}

uint64_t sub_18328B9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_18328CBCC();
  swift_bridgeObjectRetain();
  v7 = sub_183B91878();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_1832F5B78();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_183B91E78();
  }
LABEL_7:
  v13 = (unsigned __int16)sub_18328BACC(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 & 0x1FF;
}

unsigned __int8 *sub_18328BACC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_18328BD74(_QWORD *a1)
{
  return sub_183242484(0, a1[2], 0, a1);
}

char *sub_18328BD88(uint64_t a1)
{
  return sub_1832428E0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_18328BD9C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_183B91F68();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x186DB2318);
}

void sub_18328BE04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_183B9144C();
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

_QWORD *sub_18328BE80()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC1A0);
    v4 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    sub_18324A994(v2, v0);
    v7 = sub_183B913E0();
    sub_18308485C(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x18328BF54);
    }
  }
  return v4;
}

uint64_t _s7Network17NWEthernetChannelC5StateO2eeoiySbAE_AEtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v10;

  v2 = *((unsigned __int8 *)a1 + 4);
  v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  v5 = v2 >> 6;
  if (v5)
  {
    if (v5 != 1)
      __asm { BR              X10 }
    if (((v4 >> 38) & 3) != 1)
      return 0;
    v6 = HIDWORD(v3) & 0x3F;
    v7 = HIDWORD(v4) & 0x3F;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 1)
        return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
      return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
    }
    goto LABEL_20;
  }
  if (((v4 >> 38) & 3) != 0)
    return 0;
  LODWORD(v7) = BYTE4(v4);
  if (!HIDWORD(v3))
  {
LABEL_20:
    if (!(_DWORD)v7)
    {
      v10 = sub_183B915F0();
      if (v10 == sub_183B915F0())
        return 1;
    }
    return 0;
  }
  if (HIDWORD(v3) != 1)
    return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
  return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
}

uint64_t sub_18328C090()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18328C0B4()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

void sub_18328C0E8(uint64_t a1, NSObject *a2)
{
  uint64_t v2;

  sub_183289C88(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(int *))(v2 + 24));
}

uint64_t sub_18328C0F4(NSObject **a1, uint16_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  os_unfair_lock_s *v11;
  nw_ethernet_channel_t v12;
  nw_parameters_t parameters;

  v4 = v3;
  v7 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD8B0);
  result = swift_allocObject();
  *(_DWORD *)(result + 68) = 0;
  *(_BYTE *)(result + 20) = 0x80;
  *(_DWORD *)(result + 16) = 0;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 49) = 0u;
  *(_QWORD *)(v4 + 24) = result;
  *(_WORD *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 40) = v7;
  if (v7)
  {
    v9 = *(_QWORD *)(a3 + 16);
    v10 = (_QWORD *)(v9 + 16);
    v11 = (os_unfair_lock_s *)(v9 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v11);
    sub_183226978(v10, &parameters);
    os_unfair_lock_unlock(v11);
    v12 = nw_ethernet_channel_create_with_parameters(a2, v7, parameters);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(_QWORD *)(v4 + 16) = v12;
    sub_183061488(0);
    NWEthernetChannel.stateUpdateHandler.setter(0, 0);
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18328C204(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_183B920F4() & 1;
}

uint64_t sub_18328C258(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned __int8 v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned int v41;
  unsigned int v42;
  char v43;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_18329687C(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = sub_183B9183C();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_18329687C(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_18329687C(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = sub_183B9183C();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 87;
        if (a6 > 10)
        {
          v32 = a6 + 55;
        }
        else
        {
          v31 = 97;
          v32 = 65;
        }
        if (a6 <= 10)
          v33 = a6 + 48;
        else
          v33 = 58;
        if (v19)
        {
          LOBYTE(v24) = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v33)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                v30 = 1;
                if (v36 < 0x61 || v36 >= v31)
                  return v29 | (v30 << 8);
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0)
              goto LABEL_96;
            v24 = (v24 * a6) + (v36 + v37);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_96;
            ++v34;
            --v35;
          }
          while (v35);
LABEL_72:
          v30 = 0;
          v29 = v24;
          return v29 | (v30 << 8);
        }
        goto LABEL_95;
      }
LABEL_96:
      v29 = 0;
      v30 = 1;
      return v29 | (v30 << 8);
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v38 = a6 + 87;
      if (a6 > 10)
      {
        v39 = a6 + 55;
      }
      else
      {
        v38 = 97;
        v39 = 65;
      }
      if (a6 <= 10)
        v40 = a6 + 48;
      else
        v40 = 58;
      if (v19)
      {
        LOBYTE(v41) = 0;
        do
        {
          v42 = *v19;
          if (v42 < 0x30 || v42 >= v40)
          {
            if (v42 < 0x41 || v42 >= v39)
            {
              v29 = 0;
              v30 = 1;
              if (v42 < 0x61 || v42 >= v38)
                return v29 | (v30 << 8);
              v43 = -87;
            }
            else
            {
              v43 = -55;
            }
          }
          else
          {
            v43 = -48;
          }
          if (((v41 * (unsigned __int16)a6) & 0xFF00) != 0)
            goto LABEL_96;
          v41 = (v41 * a6) + (v42 + v43);
          if (((v41 >> 8) & 1) != 0)
            goto LABEL_96;
          ++v19;
          --result;
        }
        while (result);
        v30 = 0;
        v29 = v41;
        return v29 | (v30 << 8);
      }
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        LOBYTE(v24) = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | (v30 << 8);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0)
            goto LABEL_96;
          v24 = (v24 * a6) - (v27 + v28);
          if ((v24 & 0xFFFFFF00) != 0)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_72;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | (v30 << 8);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

void *sub_18328C6B0(void *a1, uint64_t a2, _BYTE *a3)
{
  return sub_18328AFC4(a1, a2, a3);
}

unint64_t sub_18328C6BC()
{
  unint64_t result;

  result = qword_1EDCDD8B8;
  if (!qword_1EDCDD8B8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWEthernetChannel.EthernetAddress, &type metadata for NWEthernetChannel.EthernetAddress);
    atomic_store(result, (unint64_t *)&qword_1EDCDD8B8);
  }
  return result;
}

double sub_18328C700@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18328AD70(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_183289DCC, a2);
}

double sub_18328C720@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18328AD70(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_18328B254, a2);
}

uint64_t type metadata accessor for NWEthernetChannel()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWEthernetChannel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWEthernetChannel.__allocating_init(on:etherType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWEthernetChannel.__allocating_init(on:etherType:parameters:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for NWEthernetChannel.State()
{
  return &type metadata for NWEthernetChannel.State;
}

ValueMetadata *type metadata accessor for NWEthernetChannel.EthernetAddress()
{
  return &type metadata for NWEthernetChannel.EthernetAddress;
}

void destroy for NWEthernetChannel.LockedState(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    swift_release();
  if (*(_QWORD *)(a1 + 24))
    swift_release();

}

uint64_t initializeWithCopy for NWEthernetChannel.LockedState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  v8 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for NWEthernetChannel.LockedState(uint64_t a1, int *a2)
{
  int v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  v5 = (_OWORD *)(a1 + 8);
  v7 = a2 + 2;
  v6 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      v8 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v8;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v6)
  {
    v9 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v9;
    swift_retain();
    goto LABEL_8;
  }
  *v5 = *v7;
LABEL_8:
  v10 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v10)
    {
      v12 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v12;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 6);
    goto LABEL_15;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_14;
  }
  v11 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  swift_retain();
  swift_release();
LABEL_15:
  v13 = *(void **)(a1 + 40);
  v14 = (void *)*((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v14;
  v15 = v14;

  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NWEthernetChannel.LockedState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v11;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  swift_release();
LABEL_15:
  v12 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWEthernetChannel.LockedState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWEthernetChannel.LockedState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWEthernetChannel.LockedState()
{
  return &type metadata for NWEthernetChannel.LockedState;
}

uint64_t sub_18328CB54(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, __int16 *, uint64_t, uint64_t);
  __int16 v8;
  _QWORD v9[2];

  v6 = *(uint64_t (**)(_QWORD *, __int16 *, uint64_t, uint64_t))(v5 + 16);
  v9[0] = a1;
  v9[1] = a2;
  v8 = a3;
  return v6(v9, &v8, a4, a5);
}

uint64_t sub_18328CB94(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v4 + 16))(*a1, a1[1], *a2, a3, a4);
}

unint64_t sub_18328CBCC()
{
  unint64_t result;

  result = qword_1EDCDD920;
  if (!qword_1EDCDD920)
  {
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EDCDD920);
  }
  return result;
}

uint64_t sub_18328CC10()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18328CC34()
{
  return swift_deallocObject();
}

void sub_18328CC7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD950);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7618);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD948);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1 + OBJC_IVAR____TtC7Network7Browser_startContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12))
  {
    if (!*(_QWORD *)(v1 + 24))
      goto LABEL_4;
    goto LABEL_3;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  sub_183B91A04();
  v29 = v5;
  v24 = v6;
  v25 = v8;
  v26 = v4;
  sub_1832904DC();
  v27 = swift_allocError();
  sub_183B91650();
  v31 = v27;
  v4 = v26;
  v8 = v25;
  v6 = v24;
  v5 = v29;
  sub_183B919E0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (*(_QWORD *)(v1 + 24))
  {
LABEL_3:
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
    sub_183B91AD0();
    swift_release();
  }
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  swift_beginAccess();
  sub_183290498((uint64_t)v11, v16, &qword_1EDCDD948);
  swift_endAccess();
  *(_QWORD *)(v1 + 24) = 0;
  swift_release();
  v17 = v1 + OBJC_IVAR____TtC7Network7Browser_endpointSelectionContinuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v17, v5);
    sub_183B91A04();
    sub_1832904DC();
    v18 = swift_allocError();
    sub_183B91650();
    v30 = v18;
    sub_183B919E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v19 = OBJC_IVAR____TtC7Network7Browser_endpointSelectionTask;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7Network7Browser_endpointSelectionTask))
  {
    type metadata accessor for NWEndpoint();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
    sub_183B91AD0();
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  swift_beginAccess();
  sub_183290498((uint64_t)v4, v17, &qword_1EDCDD950);
  swift_endAccess();
  *(_QWORD *)(v1 + v19) = 0;
  swift_release();
  v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Network7Browser_browser);
  if (nw_utilities_minos_atleast())
  {
    v21 = *(os_unfair_lock_s **)(v20 + 24);
    v22 = (uint64_t *)&v21[4];
    v23 = v21 + 20;
    os_unfair_lock_lock(v21 + 20);
    sub_18324FC2C(v22);
    os_unfair_lock_unlock(v23);
  }
  nw_browser_cancel(*(nw_browser_t *)(v20 + 16));
}

uint64_t sub_18328D098()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD468);
  *(_QWORD *)(v1 + 24) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18328D0F4()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = sub_18328FF08;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_1832BA0F8(*(_QWORD *(**)(uint64_t *__return_ptr))(v3 + 16), v25);
  os_unfair_lock_unlock(v2 + 4);
  v4 = v25[0];
  swift_release();
  swift_task_dealloc();
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 16);
    v6 = *(os_unfair_lock_s **)(v1 + 16);
    v7 = swift_task_alloc();
    *(_QWORD *)(v7 + 16) = sub_18328FF64;
    *(_QWORD *)(v7 + 24) = v5;
    swift_retain();
    os_unfair_lock_lock(v6 + 4);
    (*(void (**)(_QWORD *__return_ptr))(v7 + 16))(v25);
    v9 = v25[0];
    *(_QWORD *)(v0 + 32) = v25[0];
    os_unfair_lock_unlock(v6 + 4);
    swift_release();
    swift_task_dealloc();
    if (v9)
    {
      if (qword_1EDCDC580 != -1)
        swift_once();
      v10 = sub_183B915CC();
      __swift_project_value_buffer(v10, (uint64_t)qword_1EDCDD930);
      v11 = sub_183B915B4();
      v12 = sub_183B91C80();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_182FBE000, v11, v12, "Waiting on browser to start", v13, 2u);
        MEMORY[0x186DB563C](v13, -1, -1);
      }

      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 40) = v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
      *v14 = v0;
      v14[1] = sub_18328D47C;
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 16);
      v16 = *(_QWORD *)(v0 + 24);
      v17 = sub_183B91A34();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
      v18 = (_QWORD *)swift_allocObject();
      v18[2] = 0;
      v18[3] = 0;
      v18[4] = v15;
      swift_retain();
      v19 = sub_18328F290(v16, (uint64_t)&unk_1EDCDD980, (uint64_t)v18);
      *(_QWORD *)(v0 + 56) = v19;
      v20 = *(os_unfair_lock_s **)(v1 + 16);
      v21 = swift_task_alloc();
      *(_QWORD *)(v21 + 16) = v15;
      *(_QWORD *)(v21 + 24) = v19;
      v22 = swift_task_alloc();
      *(_QWORD *)(v22 + 16) = sub_183290014;
      *(_QWORD *)(v22 + 24) = v21;
      swift_retain();
      os_unfair_lock_lock(v20 + 4);
      sub_183273D38(v23, *(uint64_t (**)(void))(v22 + 16));
      os_unfair_lock_unlock(v20 + 4);
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      v24 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 64) = v24;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
      *v24 = v0;
      v24[1] = sub_18328D51C;
    }
    return sub_183B91AC4();
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18328D47C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18328D4E0()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18328D51C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18328D580()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18328D5BC()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18328D5F8()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18328D634(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD468);
  v2[4] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  v2[5] = swift_task_alloc();
  v3 = type metadata accessor for NWEndpoint();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18328D6DC()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = sub_18328FDF0;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_183273D38(v4, *(uint64_t (**)(void))(v3 + 16));
  os_unfair_lock_unlock(v2 + 4);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  swift_release();
  swift_task_dealloc();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    v8 = *(_QWORD *)(v0 + 24);
    sub_1830620D4(*(_QWORD *)(v0 + 40), qword_1ECD84160);
    v9 = *(os_unfair_lock_s **)(v1 + 16);
    v10 = swift_task_alloc();
    *(_QWORD *)(v10 + 16) = sub_18328FE04;
    *(_QWORD *)(v10 + 24) = v8;
    swift_retain();
    os_unfair_lock_lock(v9 + 4);
    (*(void (**)(uint64_t *__return_ptr))(v10 + 16))(&v34);
    v14 = v34;
    *(_QWORD *)(v0 + 72) = v34;
    os_unfair_lock_unlock(v9 + 4);
    swift_release();
    swift_task_dealloc();
    if (v14)
    {
      if (qword_1EDCDC580 != -1)
        swift_once();
      v15 = sub_183B915CC();
      __swift_project_value_buffer(v15, (uint64_t)qword_1EDCDD930);
      v16 = sub_183B915B4();
      v17 = sub_183B91C80();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_182FBE000, v16, v17, "Waiting for endpoint", v18, 2u);
        MEMORY[0x186DB563C](v18, -1, -1);
      }

      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 80) = v19;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
      *v19 = v0;
      v19[1] = sub_18328DB74;
    }
    else
    {
      if (qword_1EDCDC580 != -1)
        swift_once();
      v20 = sub_183B915CC();
      __swift_project_value_buffer(v20, (uint64_t)qword_1EDCDD930);
      v21 = sub_183B915B4();
      v22 = sub_183B91C80();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_182FBE000, v21, v22, "Starting to find endpoint", v23, 2u);
        MEMORY[0x186DB563C](v23, -1, -1);
      }
      v25 = *(_QWORD *)(v0 + 24);
      v24 = *(_QWORD *)(v0 + 32);

      v26 = sub_183B91A34();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v24, 1, 1, v26);
      v27 = (_QWORD *)swift_allocObject();
      v27[2] = 0;
      v27[3] = 0;
      v27[4] = v25;
      swift_retain();
      v28 = sub_18328F3C4(v24, (uint64_t)&unk_1EDCDD968, (uint64_t)v27);
      *(_QWORD *)(v0 + 96) = v28;
      v29 = *(os_unfair_lock_s **)(v1 + 16);
      v30 = swift_task_alloc();
      *(_QWORD *)(v30 + 16) = v25;
      *(_QWORD *)(v30 + 24) = v28;
      v31 = swift_task_alloc();
      *(_QWORD *)(v31 + 16) = sub_18328FE90;
      *(_QWORD *)(v31 + 24) = v30;
      swift_retain();
      os_unfair_lock_lock(v29 + 4);
      sub_183273D38(v32, *(uint64_t (**)(void))(v31 + 16));
      os_unfair_lock_unlock(v29 + 4);
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      v33 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 104) = v33;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDE130);
      *v33 = v0;
      v33[1] = sub_18328DC28;
    }
    return sub_183B91AC4();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 16);
    sub_183058EC4(*(_QWORD *)(v0 + 40), v11, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    sub_183058EC4(v11, v12, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_18328DB74()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18328DBD8()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18328DC28()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18328DC8C()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18328DCDC()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18328DD34()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18328DD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_183B915CC();
  __swift_allocate_value_buffer(v0, qword_1EDCDD930);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCDD930);
  if (qword_1EDCDC620 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EDCF2A90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_18328DE1C(__int128 *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v5 = v4;
  v32 = a3;
  v9 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *a1;
  v13 = *((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  v15 = *((_BYTE *)a1 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDCDB1F0);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v5 + 16) = v16;
  *(_QWORD *)(v5 + 24) = 0;
  v17 = v5 + OBJC_IVAR____TtC7Network7Browser_startContinuation;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC7Network7Browser_endpointSelectionTask) = 0;
  v19 = v5 + OBJC_IVAR____TtC7Network7Browser_endpointSelectionContinuation;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7618);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = v5 + OBJC_IVAR____TtC7Network7Browser_endpoint;
  v22 = type metadata accessor for NWEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC7Network7Browser_queue) = a4;
  v33 = v31;
  v34 = v13;
  v35 = v14;
  v36 = v15;
  type metadata accessor for NWBrowser();
  swift_allocObject();
  v23 = a4;
  v30[1] = a2;
  *(_QWORD *)&v31 = v23;
  swift_retain();
  *(_QWORD *)(v5 + OBJC_IVAR____TtC7Network7Browser_browser) = NWBrowser.init(for:using:)((uint64_t)&v33, a2);
  v24 = swift_allocObject();
  swift_weakInit();
  v25 = v32;
  sub_183058C44(v32, (uint64_t)v12, type metadata accessor for NWActorDiscoveryMechanism.Target);
  v26 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v24;
  sub_183058EC4((uint64_t)v12, v27 + v26, type metadata accessor for NWActorDiscoveryMechanism.Target);
  swift_retain();
  sub_183061488((uint64_t)sub_1832901D0);
  NWBrowser.browseResultsChangedHandler.setter((uint64_t)sub_1832901D0, v27);
  swift_release();
  swift_release();
  v28 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_183061488((uint64_t)sub_183290220);
  NWBrowser.stateUpdateHandler.setter((uint64_t)sub_183290220, v28);
  swift_release();

  sub_183058AE0(v25, type metadata accessor for NWActorDiscoveryMechanism.Target);
  swift_release_n();
  return v5;
}

uint64_t sub_18328E10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  int v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v7 = type metadata accessor for NWBrowser.Result(0);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v33 = (uint64_t)v28 - v11;
  v12 = type metadata accessor for NWEndpoint();
  v32 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = MEMORY[0x1E0DEE9D8];
  if (v15)
  {
    v28[1] = a3;
    v29 = a4;
    v36 = MEMORY[0x1E0DEE9D8];
    sub_183306BC0(0, v15, 0);
    result = sub_183290240(a1);
    v18 = result;
    v20 = v19;
    v22 = v21 & 1;
    v31 = a1 + 56;
    v30 = v14;
    while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(v31 + (((unint64_t)v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_17;
      if (*(_DWORD *)(a1 + 36) != v20)
        goto LABEL_18;
      v23 = v33;
      sub_183058C44(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v34 + 72) * v18, v33, type metadata accessor for NWBrowser.Result);
      sub_183058EC4(v23, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
      sub_183058C44((uint64_t)&v10[*(int *)(v35 + 20)], (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      sub_183058AE0((uint64_t)v10, type metadata accessor for NWBrowser.Result);
      v16 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_183306BC0(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v36;
      }
      v25 = *(_QWORD *)(v16 + 16);
      v24 = *(_QWORD *)(v16 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_183306BC0(v24 > 1, v25 + 1, 1);
        v16 = v36;
      }
      *(_QWORD *)(v16 + 16) = v25 + 1;
      v14 = v30;
      sub_183058EC4((uint64_t)v30, v16+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v25, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      result = sub_1832902E0(v18, v20, v22 & 1, a1);
      v18 = result;
      v20 = v26;
      v22 = v27 & 1;
      if (!--v15)
      {
        sub_1832903C4(result, v26, v27 & 1);
        a4 = v29;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_18328E3F4(v16, a4);
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18328E3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  void (**v49)(uint64_t);
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint8_t *v77;
  char *v78;
  uint64_t v79;
  void (**v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[3];

  v81 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD950);
  v4 = MEMORY[0x1E0C80A78](v3);
  v82 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v69 - v6;
  v8 = type metadata accessor for NWEndpoint();
  v83 = *(char **)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v76 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v69 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (uint8_t *)&v69 - v14;
  v79 = type metadata accessor for NWActorDiscoveryMechanism.Target(0);
  MEMORY[0x1E0C80A78](v79);
  v80 = (void (**)(uint64_t))((char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18);
  v72 = (char *)&v69 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v69 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v69 - v26;
  if (qword_1EDCDC580 != -1)
    swift_once();
  v28 = sub_183B915CC();
  v29 = __swift_project_value_buffer(v28, (uint64_t)qword_1EDCDD930);
  swift_bridgeObjectRetain_n();
  v73 = v29;
  v30 = sub_183B915B4();
  v31 = sub_183B91C80();
  v32 = os_log_type_enabled(v30, v31);
  v78 = v7;
  v74 = a1;
  v75 = v13;
  if (v32)
  {
    v33 = swift_slowAlloc();
    v77 = v15;
    v34 = (uint8_t *)v33;
    v70 = swift_slowAlloc();
    v86[0] = v70;
    *(_DWORD *)v34 = 136315138;
    v69 = v34 + 4;
    v35 = swift_bridgeObjectRetain();
    v36 = v25;
    v37 = MEMORY[0x186DB1E44](v35, v8);
    v71 = v20;
    v39 = v38;
    swift_bridgeObjectRelease();
    v40 = v37;
    v25 = v36;
    v85 = sub_183273D70(v40, v39, v86);
    sub_183B91D1C();
    swift_bridgeObjectRelease_n();
    v20 = v71;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v30, v31, "Browser endpoints changed to %s", v34, 0xCu);
    v41 = v70;
    swift_arrayDestroy();
    MEMORY[0x186DB563C](v41, -1, -1);
    v42 = v34;
    v15 = v77;
    MEMORY[0x186DB563C](v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v43 = *(os_unfair_lock_s **)(v84 + 16);
  swift_retain();
  os_unfair_lock_lock(v43 + 4);
  sub_183273D38(v44, (uint64_t (*)(void))sub_18328FDF0);
  os_unfair_lock_unlock(v43 + 4);
  swift_release();
  v45 = (uint64_t)v83;
  v46 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v83 + 6);
  LODWORD(v43) = v46(v27, 1, v8);
  result = sub_1830620D4((uint64_t)v27, qword_1ECD84160);
  if ((_DWORD)v43 == 1)
  {
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
    v48(v25, 1, 1, v8);
    v49 = v80;
    sub_183058C44(v81, (uint64_t)v80, type metadata accessor for NWActorDiscoveryMechanism.Target);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1830620D4((uint64_t)v25, qword_1ECD84160);
      sub_183058EC4((uint64_t)v49, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      v48(v25, 0, 1, v8);
    }
    else
    {
      v50 = (uint64_t)v72;
      (*v49)(v74);
      swift_release();
      sub_1830620D4((uint64_t)v25, qword_1ECD84160);
      sub_183290450(v50, (uint64_t)v25);
    }
    sub_183062090((uint64_t)v25, (uint64_t)v20, qword_1ECD84160);
    if (v46(v20, 1, v8) == 1)
    {
      v51 = qword_1ECD84160;
      sub_1830620D4((uint64_t)v25, qword_1ECD84160);
      v52 = (uint64_t)v20;
      return sub_1830620D4(v52, v51);
    }
    v83 = v25;
    sub_183058EC4((uint64_t)v20, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v53 = (uint64_t)v75;
    sub_183058C44((uint64_t)v15, (uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v54 = sub_183B915B4();
    v55 = sub_183B91C80();
    if (os_log_type_enabled(v54, v55))
    {
      v77 = v15;
      v56 = (uint8_t *)swift_slowAlloc();
      v57 = swift_slowAlloc();
      v86[0] = v57;
      *(_DWORD *)v56 = 136315138;
      sub_183058C44(v53, v76, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      v58 = sub_183B9174C();
      v85 = sub_183273D70(v58, v59, v86);
      v15 = v77;
      sub_183B91D1C();
      swift_bridgeObjectRelease();
      sub_183058AE0(v53, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      _os_log_impl(&dword_182FBE000, v54, v55, "Endpoint selected: %s", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186DB563C](v57, -1, -1);
      MEMORY[0x186DB563C](v56, -1, -1);
    }
    else
    {
      sub_183058AE0(v53, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    }

    v60 = (uint64_t)v78;
    v61 = *(os_unfair_lock_s **)(v84 + 16);
    MEMORY[0x1E0C80A78](v62);
    *(&v69 - 2) = v63;
    *(&v69 - 1) = v15;
    swift_retain();
    os_unfair_lock_lock(v61 + 4);
    sub_183273D38(v64, (uint64_t (*)(void))sub_183290438);
    os_unfair_lock_unlock(v61 + 4);
    swift_release();
    v65 = v82;
    sub_183062090(v60, v82, &qword_1EDCDD950);
    v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7618);
    v67 = *(_QWORD *)(v66 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66) == 1)
    {
      v51 = &qword_1EDCDD950;
      sub_1830620D4(v60, &qword_1EDCDD950);
      sub_1830620D4((uint64_t)v83, qword_1ECD84160);
      sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
      v52 = v82;
      return sub_1830620D4(v52, v51);
    }
    sub_183058C44((uint64_t)v15, v76, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v68 = v82;
    sub_183B919EC();
    sub_1830620D4(v60, &qword_1EDCDD950);
    sub_1830620D4((uint64_t)v83, qword_1ECD84160);
    sub_183058AE0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v68, v66);
  }
  return result;
}

uint64_t sub_18328EBE0(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  char v5;

  v1 = *((unsigned __int8 *)a1 + 4);
  v2 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = v2;
    v5 = (v2 | (unint64_t)(v1 << 32)) >> 32;
    sub_18328EC58(&v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_18328EC58(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD v36[2];
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD948);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v36 - v10;
  v12 = *((unsigned __int8 *)a1 + 4);
  v13 = *a1;
  if (qword_1EDCDC580 != -1)
    swift_once();
  v38 = v5;
  v14 = v13 | (v12 << 32);
  v15 = sub_183B915CC();
  v36[1] = __swift_project_value_buffer(v15, (uint64_t)qword_1EDCDD930);
  v16 = sub_183B915B4();
  v17 = sub_183B91C80();
  v18 = os_log_type_enabled(v16, v17);
  v37 = v14;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v36[0] = v3;
    v21 = v20;
    *(_DWORD *)v19 = 136315138;
    v41 = v20;
    BYTE4(v40) = BYTE4(v14);
    LODWORD(v40) = v14;
    v22 = sub_183B9174C();
    v40 = sub_183273D70(v22, v23, &v41);
    sub_183B91D1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_182FBE000, v16, v17, "Browser state changed to %s", v19, 0xCu);
    swift_arrayDestroy();
    v24 = v21;
    v3 = v36[0];
    MEMORY[0x186DB563C](v24, -1, -1);
    MEMORY[0x186DB563C](v19, -1, -1);
  }

  v25 = *(os_unfair_lock_s **)(v39 + 16);
  swift_retain();
  os_unfair_lock_lock(v25 + 4);
  sub_183273D38(v26, (uint64_t (*)(void))sub_183290228);
  os_unfair_lock_unlock(v25 + 4);
  swift_release();
  sub_183062090((uint64_t)v11, (uint64_t)v9, &qword_1EDCDD948);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_1830620D4((uint64_t)v11, &qword_1EDCDD948);
    v27 = (uint64_t)v9;
  }
  else
  {
    v28 = v38;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v38, v9, v2);
    v29 = (v37 >> 38) & 3;
    if ((_DWORD)v29 == 2 && (v37 & 0xFFFFFFFFFFLL) == 0x8000000001)
    {
      v30 = sub_183B915B4();
      v31 = sub_183B91C80();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_182FBE000, v30, v31, "Browser started", v32, 2u);
        MEMORY[0x186DB563C](v32, -1, -1);
      }

      sub_183B919EC();
    }
    else if (!(_DWORD)v29)
    {
      sub_183274368();
      v33 = swift_allocError();
      *v34 = 0;
      v34[1] = 0;
      v34[2] = 0xB000000000000000;
      v41 = v33;
      sub_183B919E0();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v28, v2);
    v27 = (uint64_t)v11;
  }
  return sub_1830620D4(v27, &qword_1EDCDD948);
}

uint64_t sub_18328F058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch();
}

uint64_t sub_18328F070()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_18328F0F0;
  return sub_183B9219C();
}

uint64_t sub_18328F0F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_18328F15C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v3 = *(os_unfair_lock_s **)(a2 + 16);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  sub_183273D38(v4, sub_183290054);
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  if (qword_1EDCDC580 != -1)
    swift_once();
  v5 = sub_183B915CC();
  __swift_project_value_buffer(v5, (uint64_t)qword_1EDCDD930);
  v6 = sub_183B915B4();
  v7 = sub_183B91C80();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_182FBE000, v6, v7, "Starting browser", v8, 2u);
    MEMORY[0x186DB563C](v8, -1, -1);
  }

  NWBrowser.start(queue:)(*(void **)(a2 + OBJC_IVAR____TtC7Network7Browser_queue));
}

uint64_t sub_18328F290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_183B91A34();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_183B91A28();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1830620D4(a1, &qword_1EDCDD468);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_183B919D4();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_18328F3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_183B91A34();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_183B91A28();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1830620D4(a1, &qword_1EDCDD468);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_183B919D4();
    swift_unknownObjectRelease();
  }
LABEL_5:
  type metadata accessor for NWEndpoint();
  return swift_task_create();
}

uint64_t sub_18328F4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch();
}

uint64_t sub_18328F50C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  type metadata accessor for NWEndpoint();
  *v1 = v0;
  v1[1] = sub_18328F590;
  return sub_183B9219C();
}

uint64_t sub_18328F590()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_18328F5FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18328F608(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = *(os_unfair_lock_s **)(a2 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_183273D38(v3, sub_18328FED8);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t sub_18328F670(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v10 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a2, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  v15 = a1 + *a5;
  swift_beginAccess();
  sub_183290498((uint64_t)v12, v15, a3);
  return swift_endAccess();
}

uint64_t sub_18328F768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE v15[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD948);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v15[-v8];
  v10 = a1 + OBJC_IVAR____TtC7Network7Browser_startContinuation;
  swift_beginAccess();
  sub_183062090(v10, (uint64_t)v9, &qword_1EDCDD948);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7630);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) == 1)
  {
    sub_1830620D4((uint64_t)v9, &qword_1EDCDD948);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, 1, 1, v11);
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(a2, v9, v11);
    v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v14(v7, 1, 1, v11);
    swift_beginAccess();
    sub_183290498((uint64_t)v7, v10, &qword_1EDCDD948);
    swift_endAccess();
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14)(a2, 0, 1, v11);
  }
}

uint64_t sub_18328F904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE v22[24];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD950);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v11 = &v22[-v10];
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_183058C44(a2, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  v15 = type metadata accessor for NWEndpoint();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 0, 1, v15);
  v16 = a1 + OBJC_IVAR____TtC7Network7Browser_endpoint;
  swift_beginAccess();
  sub_183290498((uint64_t)v14, v16, qword_1ECD84160);
  swift_endAccess();
  v17 = a1 + OBJC_IVAR____TtC7Network7Browser_endpointSelectionContinuation;
  swift_beginAccess();
  sub_183062090(v17, (uint64_t)v11, &qword_1EDCDD950);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCD7618);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v18) == 1)
  {
    sub_1830620D4((uint64_t)v11, &qword_1EDCDD950);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, 1, 1, v18);
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v19 + 32))(a3, v11, v18);
    v21 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v21(v9, 1, 1, v18);
    swift_beginAccess();
    sub_183290498((uint64_t)v9, v17, &qword_1EDCDD950);
    swift_endAccess();
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v21)(a3, 0, 1, v18);
  }
}

uint64_t sub_18328FB58()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_1830620D4(v0 + OBJC_IVAR____TtC7Network7Browser_startContinuation, &qword_1EDCDD948);
  swift_release();
  sub_1830620D4(v0 + OBJC_IVAR____TtC7Network7Browser_endpointSelectionContinuation, &qword_1EDCDD950);

  swift_release();
  sub_1830620D4(v0 + OBJC_IVAR____TtC7Network7Browser_endpoint, qword_1ECD84160);
  return v0;
}

uint64_t sub_18328FBF4()
{
  sub_18328FB58();
  return swift_deallocClassInstance();
}

uint64_t sub_18328FC18()
{
  return type metadata accessor for Browser();
}

uint64_t type metadata accessor for Browser()
{
  uint64_t result;

  result = qword_1EDCD7608;
  if (!qword_1EDCD7608)
    return swift_getSingletonMetadata();
  return result;
}

void sub_18328FC5C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_18328FD50(319, &qword_1EDCD7638, &qword_1EDCD7630);
  if (v0 <= 0x3F)
  {
    sub_18328FD50(319, (unint64_t *)&unk_1EDCD7620, &qword_1EDCD7618);
    if (v1 <= 0x3F)
    {
      sub_18328FD9C();
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

void sub_18328FD50(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v4 = sub_183B91CF8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_18328FD9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ECD841F0)
  {
    type metadata accessor for NWEndpoint();
    v0 = sub_183B91CF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ECD841F0);
  }
}

uint64_t sub_18328FDF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1832903D0(a1);
}

uint64_t sub_18328FE04@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Network7Browser_endpointSelectionTask);
  return swift_retain();
}

uint64_t sub_18328FE2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_183243DAC;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t sub_18328FE90()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7Network7Browser_endpointSelectionTask) = *(_QWORD *)(v0 + 24);
  swift_release();
  return swift_retain();
}

uint64_t sub_18328FED0(uint64_t a1)
{
  uint64_t v1;

  return sub_18328F608(a1, v1);
}

uint64_t sub_18328FED8()
{
  uint64_t v0;

  return sub_18328F670(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1EDCDD950, &qword_1EDCD7618, &OBJC_IVAR____TtC7Network7Browser_endpointSelectionContinuation);
}

uint64_t sub_18328FF08@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;
  unsigned int v3;
  unsigned __int8 v4;

  result = NWBrowser.state.getter((uint64_t)&v3);
  *a1 = (v3 | ((unint64_t)v4 << 32)) == 0x8000000000;
  return result;
}

uint64_t sub_18328FF64@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
  return swift_retain();
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18328FFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_183246848;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t sub_183290014()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = *(_QWORD *)(v0 + 24);
  swift_release();
  return swift_retain();
}

void sub_18329004C(uint64_t a1)
{
  uint64_t v1;

  sub_18328F15C(a1, v1);
}

uint64_t sub_183290054()
{
  uint64_t v0;

  return sub_18328F670(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1EDCDD948, &qword_1EDCD7630, &OBJC_IVAR____TtC7Network7Browser_startContinuation);
}

uint64_t sub_183290084()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1832900A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NWActorDiscoveryMechanism.Target(0) - 8) + 80);
  v2 = (v1 + 24) & ~v1;
  swift_release();
  v3 = v0 + v2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v3 + 48) != 1)
          goto LABEL_9;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v4 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0 + v2, v4);
        break;
      case 4u:
LABEL_9:
        swift_unknownObjectRelease();
        break;
      default:
        return swift_deallocObject();
    }
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1832901D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NWActorDiscoveryMechanism.Target(0) - 8) + 80);
  return sub_18328E10C(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_183290220(unsigned int *a1)
{
  return sub_18328EBE0(a1);
}

uint64_t sub_183290228@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_18328F768(v1, a1);
}

uint64_t sub_183290240(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1832902E0(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1832903C4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1832903D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC7Network7Browser_endpoint;
  swift_beginAccess();
  return sub_183062090(v3, a1, qword_1ECD84160);
}

uint64_t sub_183290438@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_18328F904(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_183290450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_183290498(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_1832904DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDD988;
  if (!qword_1EDCDD988)
  {
    v1 = sub_183B91A04();
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DF05E8], v1);
    atomic_store(result, (unint64_t *)&qword_1EDCDD988);
  }
  return result;
}

uint64_t sub_183290528(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v7 = result;
  v8 = a5;
  if (!a2)
  {
    v9 = 0;
    goto LABEL_15;
  }
  v9 = a3;
  if (!a3)
  {
LABEL_15:
    *(_QWORD *)v7 = a4;
    *(_WORD *)(v7 + 8) = v8;
    return v9;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a5 == 0xFFFF)
    {
      v9 = 0;
      LOWORD(v8) = -1;
    }
    else
    {
      if (*(_QWORD *)(a4 + 16) <= (unint64_t)a5)
      {
LABEL_12:
        __break(1u);
LABEL_13:
        LOWORD(v8) = -1;
        v9 = v5;
      }
      else
      {
        v10 = a2;
        v5 = 1;
        while (1)
        {
          v11 = a4 + 32 + (v8 << 6);
          v12 = *(_QWORD *)(v11 + 8);
          v13 = *(_QWORD *)(v11 + 16);
          v14 = *(_QWORD *)(v11 + 24);
          v15 = *(_BYTE *)(v11 + 32);
          v16 = *(_QWORD *)(v11 + 40);
          v17 = *(_QWORD *)(v11 + 48);
          v8 = *(unsigned __int16 *)(v11 + 56);
          *(_QWORD *)v10 = *(_QWORD *)v11;
          *(_QWORD *)(v10 + 8) = v12;
          *(_QWORD *)(v10 + 16) = v13;
          *(_QWORD *)(v10 + 24) = v14;
          *(_BYTE *)(v10 + 32) = v15;
          *(_QWORD *)(v10 + 40) = v16;
          *(_QWORD *)(v10 + 48) = v17;
          if (v9 == v5)
            break;
          if ((_DWORD)v8 == 0xFFFF)
            goto LABEL_13;
          ++v5;
          v18 = *(_QWORD *)(a4 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v10 += 56;
          if (v18 <= v8)
            goto LABEL_12;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

unint64_t sub_183290648(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result;
  unint64_t v9;
  uint64_t v10;

  result = swift_beginAccess();
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
  if (v9 < a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v9 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= (unint64_t)a2)
      goto LABEL_10;
    return 0;
  }
  if (v10 <= 0 && v10 > a2)
    return 0;
LABEL_10:
  result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (result > v9)
LABEL_16:
    __break(1u);
  return result;
}

unint64_t HTTPFields.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *(*v17)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>);
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *(*v37)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>);
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  type metadata accessor for HTTPFields._Storage();
  v3 = (_QWORD *)swift_allocObject();
  v4 = MEMORY[0x1E0DEE9D8];
  v3[2] = MEMORY[0x1E0DEE9D8];
  v27 = v3 + 2;
  v3[3] = sub_1832F2514(v4);
  v5 = (_DWORD *)swift_slowAlloc();
  v3[4] = v5;
  *v5 = 0;
  v31 = *(_QWORD *)(a1 + 16);
  if (!v31)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v30 = a1 + 32;
  result = swift_retain_n();
  v7 = 0;
  v28 = a1;
  v29 = v3;
  while (2)
  {
    if (v7 >= *(_QWORD *)(a1 + 16))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v13 = (uint64_t *)(v30 + 48 * v7);
    v15 = *v13;
    v14 = v13[1];
    v17 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>))v13[2];
    v16 = v13[3];
    v8 = v13[4];
    v9 = v13[5];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v18 = sub_183B91860();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v33 = v15;
    v32 = v16;
    v34 = v7 + 1;
    if ((v9 & 0x2000000000000000) != 0)
      v19 = HIBYTE(v9) & 0xF;
    else
      v19 = v8 & 0xFFFFFFFFFFFFLL;
    v20 = (v8 >> 59) & 1;
    if ((v9 & 0x1000000000000000) == 0)
      LOBYTE(v20) = 1;
    v21 = 4 << v20;
    v22 = 15;
    while (4 * v19 != v22 >> 14)
    {
      v23 = v22 & 0xC;
      result = v22;
      if (v23 == v21)
        result = sub_18329687C(v22, v8, v9);
      v24 = result >> 16;
      if (result >> 16 >= v19)
      {
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      if ((v9 & 0x1000000000000000) != 0)
      {
        result = sub_183B91848();
        v25 = result;
        if (v23 == v21)
          goto LABEL_30;
LABEL_25:
        if ((v9 & 0x1000000000000000) == 0)
          goto LABEL_13;
LABEL_26:
        if (v19 <= v22 >> 16)
          goto LABEL_37;
        v22 = sub_183B91818();
        if (v25 < 0)
        {
LABEL_3:
          v35 = v8;
          v36 = v9;
          v37 = sub_1832FE3C4;
          v38 = 0;
          v42 = 0;
          v43 = 0xE000000000000000;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
          sub_18327DAB4((unint64_t *)&qword_1EDCDD518, &qword_1EDCDD510, MEMORY[0x1E0DEC858]);
          sub_183B91794();
          swift_bridgeObjectRelease();
          v8 = v42;
          v9 = v43;
          break;
        }
      }
      else
      {
        if ((v9 & 0x2000000000000000) != 0)
        {
          v35 = v8;
          v36 = v9 & 0xFFFFFFFFFFFFFFLL;
          v25 = *((_BYTE *)&v35 + v24);
          if (v23 == v21)
            goto LABEL_30;
          goto LABEL_25;
        }
        result = (v9 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v8 & 0x1000000000000000) == 0)
          result = sub_183B91E78();
        v25 = *(_BYTE *)(result + v24);
        if (v23 != v21)
          goto LABEL_25;
LABEL_30:
        result = sub_18329687C(v22, v8, v9);
        v22 = result;
        if ((v9 & 0x1000000000000000) != 0)
          goto LABEL_26;
LABEL_13:
        v22 = (v22 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v25 < 0)
          goto LABEL_3;
      }
    }
    a1 = v28;
    v3 = v29;
    v10 = sub_18327D86C(v8, v9);
    v12 = v11;
    swift_bridgeObjectRelease();
    v35 = v33;
    v36 = v14;
    v37 = v17;
    v38 = v32;
    v39 = 0;
    v40 = v10;
    v41 = v12;
    sub_1832912E8((uint64_t *)&v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v7 = v34;
    if (v34 != v31)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  swift_release_n();
LABEL_34:
  result = swift_beginAccess();
  if (*(_QWORD *)(*v27 + 16) <= 0xFFFEuLL)
  {
    *a2 = v3;
    return result;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t HTTPFields.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = sub_183290BA0();
  if (*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_1832F67A0(v2, v1);
    if ((v5 & 1) != 0)
      v6 = *(_WORD *)(*(_QWORD *)(v3 + 56) + 4 * v4);
    else
      v6 = -1;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = -1;
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7 = swift_bridgeObjectRetain();
  v8 = sub_183296AA0(v7, v6);
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v4 = *v1;
  v5 = sub_183290BA0();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain();
  v6 = sub_1832F67A0(v3, v2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    return 0;
  }
  v8 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 56) + 4 * v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_beginAccess();
  if (v8 == 0xFFFF)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)(v4 + 16) + 16) > v8)
  {
    if (v3 != 0x65696B6F6F63 || v2 != 0xE600000000000000)
      sub_183B920F4();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD990);
    sub_18327DAB4(&qword_1EDCDD998, &qword_1EDCDD990, MEMORY[0x1E0DEC858]);
    sub_1832616B0();
    v10 = sub_183B918F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_183290BA0();
  if (*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_1832F67A0(v1, v2);
    if ((v5 & 1) != 0)
      v6 = *(_WORD *)(*(_QWORD *)(v3 + 56) + 4 * v4);
    else
      v6 = -1;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = -1;
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7 = swift_bridgeObjectRetain();
  v8 = sub_183293290(v7, v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_183290B64()
{
  uint64_t v0;

  MEMORY[0x186DB563C](*(_QWORD *)(v0 + 32), -1, -1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_183290BA0()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t (*v4)();
  uint64_t (*v5)@<X0>(_DWORD *@<X8>);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  unint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t result;
  unint64_t (*v35)();
  uint64_t (*v36)@<X0>(_DWORD *@<X8>);
  _QWORD *v37;
  os_unfair_lock_s *lock;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = (os_unfair_lock_s *)v0[4];
  os_unfair_lock_lock(v1);
  swift_beginAccess();
  v2 = (_QWORD *)v0[3];
  if (v2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v1);
    return (uint64_t)v2;
  }
  v37 = v0 + 3;
  lock = v1;
  swift_beginAccess();
  v40 = *(_QWORD *)(v0[2] + 16);
  if (!v40)
  {
    v35 = 0;
    v36 = 0;
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_30:
    *v37 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(lock);
    sub_1830630AC((uint64_t)v35);
    sub_1830630AC((uint64_t)v36);
    return (uint64_t)v2;
  }
  v39 = v0 + 2;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v35 = sub_183298DBC;
  v36 = sub_183298DD4;
  while (v6 < *(_QWORD *)(*v39 + 16))
  {
    v8 = *v39 + v3 * 8;
    v9 = *(_QWORD *)(v8 + 56);
    v41 = (uint64_t)v5;
    v42 = *(_QWORD *)(v8 + 48);
    swift_beginAccess();
    v10 = (_QWORD *)*v39;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v39 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_18328BD74(v10);
      *v39 = v10;
    }
    if (v6 >= v10[2])
      goto LABEL_33;
    LOWORD(v10[v3 + 11]) = -1;
    swift_endAccess();
    if (v2[2])
    {
      swift_bridgeObjectRetain();
      v12 = sub_1832F67A0(v42, v9);
      if ((v13 & 1) != 0)
      {
        v14 = *(unsigned __int16 *)(v2[7] + 4 * v12 + 2);
        swift_bridgeObjectRelease();
        if (v6 >= 0x10000)
          goto LABEL_37;
        swift_beginAccess();
        v15 = (_QWORD *)*v39;
        v16 = swift_isUniquelyReferenced_nonNull_native();
        *v39 = v15;
        if ((v16 & 1) == 0)
        {
          v15 = sub_18328BD74(v15);
          *v39 = v15;
        }
        if (v15[2] <= v14)
          goto LABEL_36;
        LOWORD(v15[8 * v14 + 11]) = v6;
        swift_endAccess();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v6;
    sub_1830630AC((uint64_t)v4);
    if (v6 == 0x10000)
      goto LABEL_37;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = sub_183298DBC;
    *(_QWORD *)(v18 + 24) = v17;
    sub_1830630AC(v41);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v21 = sub_1832F67A0(v42, v9);
    v22 = v2[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      goto LABEL_34;
    v25 = v20;
    if (v2[3] >= v24)
    {
      if ((v19 & 1) == 0)
        sub_1832FB0CC();
    }
    else
    {
      sub_1832F77E0(v24, v19);
      v26 = sub_1832F67A0(v42, v9);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_38;
      v21 = v26;
    }
    swift_bridgeObjectRelease();
    v28 = swift_bridgeObjectRetain();
    if ((v25 & 1) == 0)
    {
      v29 = (*(uint64_t (**)(uint64_t))(v18 + 16))(v28);
      v2[(v21 >> 6) + 8] |= 1 << v21;
      v30 = (uint64_t *)(v2[6] + 16 * v21);
      *v30 = v42;
      v30[1] = v9;
      *(_DWORD *)(v2[7] + 4 * v21) = v29;
      v31 = v2[2];
      v32 = __OFADD__(v31, 1);
      v33 = v31 + 1;
      if (v32)
        goto LABEL_35;
      v2[2] = v33;
      swift_bridgeObjectRetain();
    }
    v7 = v2[7];
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 4 * v21 + 2) = v6;
    swift_bridgeObjectRelease();
    v3 += 8;
    v4 = sub_183298DBC;
    v5 = sub_183298DD4;
    if (v40 == ++v6)
      goto LABEL_30;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  sub_183B91F50();
  __break(1u);
LABEL_38:
  result = sub_183B921CC();
  __break(1u);
  return result;
}

unint64_t sub_183291018(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0 || result >= 0x10000)
  {
    result = sub_183B91F50();
    __break(1u);
  }
  return result;
}

_QWORD *sub_1832910C0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v1 = (_QWORD *)swift_allocObject();
  v2 = MEMORY[0x1E0DEE9D8];
  v1[2] = MEMORY[0x1E0DEE9D8];
  v1[3] = sub_1832F2514(v2);
  v3 = (_DWORD *)swift_slowAlloc();
  v1[4] = v3;
  *v3 = 0;
  swift_beginAccess();
  v4 = v0[2];
  swift_beginAccess();
  v1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (os_unfair_lock_s *)v0[4];
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  v6 = v0[3];
  swift_beginAccess();
  v1[3] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v5);
  return v1;
}

uint64_t sub_1832911D4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1832912E8(uint64_t *a1)
{
  uint64_t (*v1)@<X0>(_DWORD *@<X8>);
  unint64_t *v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t (*v19)@<X0>(_DWORD *@<X8>);
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  __int16 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)@<X0>(_DWORD *@<X8>);

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[3];
  v7 = *((_BYTE *)a1 + 32);
  v8 = a1[5];
  v39 = a1[6];
  v40 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_183B91860();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v2 = (unint64_t *)((char *)v1 + 16);
  swift_beginAccess();
  v10 = *(_QWORD *)(*((_QWORD *)v1 + 2) + 16);
  if (v10 >= 0x10000)
    goto LABEL_33;
  v3 = (uint64_t (*)())((char *)v1 + 24);
  swift_beginAccess();
  v11 = *((_QWORD *)v1 + 3);
  if (!v11 || !*(_QWORD *)(v11 + 16))
    goto LABEL_10;
  swift_bridgeObjectRetain();
  v12 = sub_1832F67A0(v40, v6);
  if ((v13 & 1) != 0)
  {
    v9 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 56) + 4 * v12 + 2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v14 = (_QWORD *)*v2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v2 = (unint64_t)v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_18328BD74(v14);
      *v2 = (unint64_t)v14;
    }
    if (v14[2] > v9)
    {
      LOWORD(v14[8 * v9 + 11]) = v10;
LABEL_10:
      swift_endAccess();
      goto LABEL_11;
    }
    __break(1u);
LABEL_33:
    sub_183B91F50();
    __break(1u);
    goto LABEL_34;
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
LABEL_11:
  v36 = v8;
  v37 = v7;
  v38 = v5;
  swift_beginAccess();
  v1 = *(uint64_t (**)@<X0>(_DWORD *@<X8>))v3;
  if (!*(_QWORD *)v3)
  {
    v3 = 0;
    goto LABEL_21;
  }
  v16 = swift_allocObject();
  v35 = v10;
  *(_WORD *)(v16 + 16) = v10;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_183298DE8;
  *(_QWORD *)(v17 + 24) = v16;
  swift_bridgeObjectRetain();
  v18 = swift_isUniquelyReferenced_nonNull_native();
  v19 = *(uint64_t (**)@<X0>(_DWORD *@<X8>))v3;
  v41 = *(uint64_t (**)@<X0>(_DWORD *@<X8>))v3;
  *(_QWORD *)v3 = 0x8000000000000000;
  v21 = sub_1832F67A0(v40, v6);
  v22 = *((_QWORD *)v19 + 2);
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
    goto LABEL_30;
  LOBYTE(v9) = v20;
  if (*((_QWORD *)v19 + 3) >= v24)
  {
    if ((v18 & 1) == 0)
      goto LABEL_31;
    goto LABEL_18;
  }
  sub_1832F77E0(v24, v18);
  v19 = v41;
  v25 = sub_1832F67A0(v40, v6);
  if ((v9 & 1) != (v26 & 1))
  {
LABEL_34:
    result = sub_183B921CC();
    __break(1u);
    return result;
  }
  v21 = v25;
  while (1)
  {
LABEL_18:
    *(_QWORD *)v3 = v19;
    swift_bridgeObjectRelease();
    v27 = *(_QWORD **)v3;
    swift_bridgeObjectRetain();
    if ((v9 & 1) == 0)
    {
      v28 = sub_183298DE8();
      sub_1832FAB80(v21, v40, v6, v28, v27);
      swift_bridgeObjectRetain();
    }
    v29 = v27[7];
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 4 * v21 + 2) = v35;
    swift_bridgeObjectRelease();
    v1 = sub_183298DD4;
    v3 = sub_183298DE8;
LABEL_21:
    swift_endAccess();
    swift_beginAccess();
    v9 = *v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v9;
    if ((v30 & 1) == 0)
    {
LABEL_28:
      v9 = (unint64_t)sub_183242484(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
      *v2 = v9;
    }
    v21 = *(_QWORD *)(v9 + 16);
    v31 = *(_QWORD *)(v9 + 24);
    if (v21 >= v31 >> 1)
    {
      v9 = (unint64_t)sub_183242484((_QWORD *)(v31 > 1), v21 + 1, 1, (_QWORD *)v9);
      *v2 = v9;
    }
    *(_QWORD *)(v9 + 16) = v21 + 1;
    v32 = v9 + (v21 << 6);
    *(_QWORD *)(v32 + 32) = v38;
    *(_QWORD *)(v32 + 40) = v4;
    *(_QWORD *)(v32 + 48) = v40;
    *(_QWORD *)(v32 + 56) = v6;
    *(_BYTE *)(v32 + 64) = v37;
    *(_QWORD *)(v32 + 72) = v36;
    *(_QWORD *)(v32 + 80) = v39;
    *(_WORD *)(v32 + 88) = -1;
    v33 = *v2;
    swift_endAccess();
    v6 = *(_QWORD *)(v33 + 16);
    sub_1830630AC((uint64_t)v3);
    result = sub_1830630AC((uint64_t)v1);
    if (v6 <= 0xFFFE)
      break;
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    sub_1832FB0CC();
    v19 = v41;
  }
  return result;
}

uint64_t sub_183291764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_183B92250();
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v1 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v3 += 64;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

uint64_t sub_183291888()
{
  return sub_183291764();
}

uint64_t sub_1832918A8()
{
  return sub_1832911D4();
}

uint64_t sub_1832918C8()
{
  sub_183B92250();
  sub_1832911D4();
  return sub_183B9228C();
}

uint64_t sub_183291904(uint64_t *a1, uint64_t *a2)
{
  return sub_183297E78(*a1, *a2);
}

_DWORD *HTTPFields.init()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *result;

  type metadata accessor for HTTPFields._Storage();
  v2 = (_QWORD *)swift_allocObject();
  v3 = MEMORY[0x1E0DEE9D8];
  v2[2] = MEMORY[0x1E0DEE9D8];
  v2[3] = sub_1832F2514(v3);
  result = (_DWORD *)swift_slowAlloc();
  v2[4] = result;
  *result = 0;
  *a1 = v2;
  return result;
}

uint64_t sub_183291B38(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9[4];

  v3 = a3[1];
  v4 = a3[2];
  v5 = a3[3];
  v6 = *a1;
  v7 = a1[1];
  v9[0] = *a3;
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return HTTPFields.subscript.setter(v6, v7, v9);
}

uint64_t HTTPFields.subscript.setter(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *(*v18)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>);
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a3;
  v3 = a3[1];
  v6 = a3[2];
  v5 = a3[3];
  if (a2)
  {
    v7 = a2;
    v9 = v6 == 0x65696B6F6F63 && v5 == 0xE600000000000000;
    if (v9 || (sub_183B920F4() & 1) != 0)
    {
      v16 = a1;
      v17 = v7;
      sub_1832984EC();
      v10 = sub_183B91BFC();
      swift_bridgeObjectRelease();
      v11 = (_QWORD *)swift_allocObject();
      v11[2] = v4;
      v11[3] = v3;
      v11[4] = v6;
      v11[5] = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_183291F6C(v10, (void (*)(_QWORD *__return_ptr, _QWORD))sub_183298534, (uint64_t)v11, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      if ((sub_18324BC90(a1, v7) & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v16 = a1;
        v17 = v7;
        v18 = sub_1832FE3C4;
        v19 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
        sub_18327DAB4((unint64_t *)&qword_1EDCDD518, &qword_1EDCDD510, MEMORY[0x1E0DEC858]);
        sub_183B91794();
        swift_bridgeObjectRelease();
        a1 = 0;
        v7 = 0xE000000000000000;
      }
      v13 = sub_18327D86C(a1, v7);
      v15 = v14;
      swift_bridgeObjectRelease();
      v16 = v4;
      v17 = v3;
      v18 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>))v6;
      v19 = v5;
      v20 = 0;
      v21 = v13;
      v22 = v15;
      sub_1832923B4(&v16, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    sub_183298308(*a3, a3[1], a3[2], v5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_183291E48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x186DB1C70](v11, v12, v13, v14);
  v17 = v16;
  *(_BYTE *)(a6 + 32) = 0;
  *(_QWORD *)a6 = a2;
  *(_QWORD *)(a6 + 8) = a3;
  *(_QWORD *)(a6 + 16) = a4;
  *(_QWORD *)(a6 + 24) = a5;
  if ((sub_18324BC90(v15, v16) & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
    sub_18327DAB4((unint64_t *)&qword_1EDCDD518, &qword_1EDCDD510, MEMORY[0x1E0DEC858]);
    sub_183B91794();
    swift_bridgeObjectRelease();
    v15 = 0;
    v17 = 0xE000000000000000;
  }
  v18 = sub_18327D86C(v15, v17);
  v20 = v19;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a6 + 40) = v18;
  *(_QWORD *)(a6 + 48) = v20;
  return result;
}

uint64_t sub_183291F6C(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t result;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(_QWORD *__return_ptr, _QWORD);
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[4];
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v8 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v7 = sub_1832910C0();
    swift_release();
  }
  v12 = sub_183290BA0();
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_22;
  swift_bridgeObjectRetain();
  v13 = sub_1832F67A0(a6, a7);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v15 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 56) + 4 * v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15 != 0xFFFF)
  {
    v16 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v18 = 0;
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v42 = a2;
    v41 = v16;
    while (1)
    {
      if (v18 == v16)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = sub_183242B0C(0, v19[2] + 1, 1, v19);
        v21 = v19[2];
        v20 = v19[3];
        if (v21 >= v20 >> 1)
          v19 = sub_183242B0C((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
        v22 = v15;
        v19[2] = v21 + 1;
        v19[v21 + 4] = v15;
        v18 = v16;
      }
      else
      {
        if (v18 >= v16)
          goto LABEL_32;
        v23 = a1 + 32 + 32 * v18;
        v24 = *(_QWORD *)(v23 + 16);
        v25 = *(_QWORD *)(v23 + 24);
        v52 = *(_OWORD *)v23;
        v53 = v24;
        v54 = v25;
        swift_bridgeObjectRetain();
        a2(v48, &v52);
        swift_bridgeObjectRelease();
        v26 = v48[1];
        v27 = v48[3];
        v46 = v48[2];
        v47 = v48[0];
        v45 = v49;
        v28 = v51;
        v44 = v50;
        v29 = *v8;
        v30 = (uint64_t *)(*v8 + 16);
        swift_beginAccess();
        v31 = *(_QWORD **)(v29 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v29 + 16) = v31;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_18328BD74(v31);
          v31 = (_QWORD *)result;
          *v30 = result;
        }
        v22 = v15;
        if (v31[2] <= (unint64_t)v15)
          goto LABEL_33;
        v32 = &v31[8 * (unint64_t)v15];
        ++v18;
        v32[4] = v47;
        v32[5] = v26;
        v32[6] = v46;
        v32[7] = v27;
        *((_BYTE *)v32 + 64) = v45;
        v32[9] = v44;
        v32[10] = v28;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a2 = v42;
        v16 = v41;
      }
      v33 = *v8;
      result = swift_beginAccess();
      v34 = *(_QWORD *)(v33 + 16);
      if (*(_QWORD *)(v34 + 16) <= v22)
        break;
      v15 = *(unsigned __int16 *)(v34 + (v22 << 6) + 88);
      if (v15 == 0xFFFF)
        goto LABEL_24;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  swift_retain();
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_24:
  if (v19[2])
  {
    swift_beginAccess();
    sub_1832939FC((uint64_t)v19);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v35 = *v8;
    swift_beginAccess();
    *(_QWORD *)(v35 + 24) = 0;
  }
  result = swift_bridgeObjectRelease();
  v36 = *(_QWORD *)(a1 + 16);
  v37 = v36 - v18;
  if (v36 == v18)
    goto LABEL_30;
  if (v36 > v18)
  {
    v38 = (uint64_t *)(a1 + 32 * v18 + 56);
    do
    {
      v39 = *(v38 - 1);
      v40 = *v38;
      v52 = *(_OWORD *)(v38 - 3);
      v53 = v39;
      v54 = v40;
      swift_bridgeObjectRetain();
      a2(v48, &v52);
      swift_bridgeObjectRelease();
      sub_1832912E8(v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 += 4;
      --v37;
    }
    while (v37);
LABEL_30:
    swift_release();
    return swift_bridgeObjectRelease();
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1832923B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t result;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35[4];
  char v36;
  uint64_t v37;
  uint64_t v38;

  v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v5 = sub_1832910C0();
    swift_release();
  }
  v10 = sub_183290BA0();
  if (*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    v11 = sub_1832F67A0(a4, a5);
    if ((v12 & 1) != 0)
      LODWORD(v13) = *(unsigned __int16 *)(*(_QWORD *)(v10 + 56) + 4 * v11);
    else
      LODWORD(v13) = 0xFFFF;
    swift_bridgeObjectRelease();
  }
  else
  {
    LODWORD(v13) = 0xFFFF;
  }
  swift_bridgeObjectRelease();
  v14 = *a1;
  v15 = a1[1];
  v16 = a1[2];
  v17 = a1[3];
  v34 = *((_BYTE *)a1 + 32);
  v18 = a1[5];
  v33 = a1[6];
  if ((_DWORD)v13 == 0xFFFF)
  {
    sub_18324C26C((uint64_t)a1);
    a1 = (uint64_t *)MEMORY[0x1E0DEE9D8];
    v19 = v16;
    v20 = v17;
    v22 = v33;
    v21 = v34;
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_11;
  }
  else
  {
    v32 = *a1;
    v25 = *v6;
    v26 = *v6 + 2;
    swift_beginAccess();
    v27 = v25[2];
    sub_18324C26C((uint64_t)a1);
    sub_18324C26C((uint64_t)a1);
    result = swift_isUniquelyReferenced_nonNull_native();
    v25[2] = v27;
    if ((result & 1) == 0)
      goto LABEL_29;
    while (1)
    {
      v28 = v13;
      if (*(_QWORD *)(v27 + 16) <= (unint64_t)v13)
      {
        __break(1u);
        return result;
      }
      v29 = v27 + ((unint64_t)v13 << 6);
      v27 = *(_QWORD *)(v29 + 56);
      v13 = *(_QWORD *)(v29 + 80);
      *(_QWORD *)(v29 + 32) = v32;
      *(_QWORD *)(v29 + 40) = v15;
      *(_QWORD *)(v29 + 48) = v16;
      *(_QWORD *)(v29 + 56) = v17;
      *(_BYTE *)(v29 + 64) = v34;
      *(_QWORD *)(v29 + 72) = v18;
      *(_QWORD *)(v29 + 80) = v33;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18324C2B4((uint64_t)a1);
      v26 = *v6;
      swift_beginAccess();
      v30 = v26[2];
      if (*(_QWORD *)(v30 + 16) > v28)
        break;
LABEL_28:
      __break(1u);
LABEL_29:
      result = (uint64_t)sub_18328BD74((_QWORD *)v27);
      v27 = result;
      *v26 = result;
    }
    a1 = (uint64_t *)MEMORY[0x1E0DEE9D8];
    v27 = 0xFFFFLL;
    while (1)
    {
      v28 = *(unsigned __int16 *)(v30 + (v28 << 6) + 88);
      if (v28 == 0xFFFF)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a1 = sub_183242B0C(0, a1[2] + 1, 1, a1);
      v15 = a1[2];
      v31 = a1[3];
      if (v15 >= v31 >> 1)
        a1 = sub_183242B0C((_QWORD *)(v31 > 1), v15 + 1, 1, a1);
      a1[2] = v15 + 1;
      a1[v15 + 4] = v28;
      v26 = *v6;
      swift_beginAccess();
      v30 = v26[2];
      if (*(_QWORD *)(v30 + 16) <= v28)
        goto LABEL_28;
    }
    v14 = 0;
    v15 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v18 = 0;
    v22 = 0;
    if (a1[2])
    {
LABEL_11:
      swift_beginAccess();
      sub_1832939FC((uint64_t)a1);
      swift_endAccess();
      swift_bridgeObjectRelease();
      v23 = *v6;
      swift_beginAccess();
      v23[3] = 0;
      result = swift_bridgeObjectRelease();
      if (!v15)
        return result;
      goto LABEL_12;
    }
  }
  result = swift_bridgeObjectRelease();
  if (v15)
  {
LABEL_12:
    v35[0] = v14;
    v35[1] = v15;
    v35[2] = v19;
    v35[3] = v20;
    v36 = v21;
    v37 = v18;
    v38 = v22;
    sub_1832912E8(v35);
    return sub_18324C184(v14, v15);
  }
  return result;
}

uint64_t sub_183292730(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t result;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(_QWORD *__return_ptr, _QWORD);
  uint64_t v40;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[4];
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  _QWORD v51[4];

  v8 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v7 = sub_1832910C0();
    swift_release();
  }
  v12 = sub_183290BA0();
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_22;
  swift_bridgeObjectRetain();
  v13 = sub_1832F67A0(a6, a7);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v15 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 56) + 4 * v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15 != 0xFFFF)
  {
    v16 = *(_QWORD *)(a1 + 16);
    v40 = a1 + 32;
    swift_bridgeObjectRetain();
    result = swift_retain();
    v18 = 0;
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v39 = a2;
    v38 = v16;
    while (1)
    {
      if (v18 == v16)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = sub_183242B0C(0, v19[2] + 1, 1, v19);
        v21 = v19[2];
        v20 = v19[3];
        if (v21 >= v20 >> 1)
          v19 = sub_183242B0C((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
        v22 = v15;
        v19[2] = v21 + 1;
        v19[v21 + 4] = v15;
        v18 = v16;
      }
      else
      {
        if (v18 >= v16)
          goto LABEL_32;
        v23 = *(_QWORD *)(v40 + 16 * v18 + 8);
        v51[0] = *(_QWORD *)(v40 + 16 * v18);
        v51[1] = v23;
        swift_bridgeObjectRetain();
        a2(v46, v51);
        swift_bridgeObjectRelease();
        v24 = v46[1];
        v25 = v46[3];
        v44 = v46[2];
        v45 = v46[0];
        v43 = v47;
        v26 = v49;
        v42 = v48;
        v27 = *v8;
        v28 = (uint64_t *)(*v8 + 16);
        swift_beginAccess();
        v29 = *(_QWORD **)(v27 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v27 + 16) = v29;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_18328BD74(v29);
          v29 = (_QWORD *)result;
          *v28 = result;
        }
        v22 = v15;
        if (v29[2] <= (unint64_t)v15)
          goto LABEL_33;
        v30 = &v29[8 * (unint64_t)v15];
        ++v18;
        v30[4] = v45;
        v30[5] = v24;
        v30[6] = v44;
        v30[7] = v25;
        *((_BYTE *)v30 + 64) = v43;
        v30[9] = v42;
        v30[10] = v26;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a2 = v39;
        v16 = v38;
      }
      v31 = *v8;
      result = swift_beginAccess();
      v32 = *(_QWORD *)(v31 + 16);
      if (*(_QWORD *)(v32 + 16) <= v22)
        break;
      v15 = *(unsigned __int16 *)(v32 + (v22 << 6) + 88);
      if (v15 == 0xFFFF)
        goto LABEL_24;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  swift_retain();
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_24:
  if (v19[2])
  {
    swift_beginAccess();
    sub_1832939FC((uint64_t)v19);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v33 = *v8;
    swift_beginAccess();
    *(_QWORD *)(v33 + 24) = 0;
  }
  result = swift_bridgeObjectRelease();
  v34 = *(_QWORD *)(a1 + 16);
  v35 = v34 - v18;
  if (v34 == v18)
    goto LABEL_30;
  if (v34 > v18)
  {
    v36 = (uint64_t *)(a1 + 16 * v18 + 40);
    do
    {
      v37 = *v36;
      v50[0] = *(v36 - 1);
      v50[1] = v37;
      swift_bridgeObjectRetain();
      a2(v46, v50);
      swift_bridgeObjectRelease();
      sub_1832912E8(v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 += 2;
      --v35;
    }
    while (v35);
LABEL_30:
    swift_release();
    return swift_bridgeObjectRelease();
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_183292B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[4];
  char v46;
  uint64_t v47;
  uint64_t v48;

  v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v5 = sub_1832910C0();
    swift_release();
  }
  v9 = sub_183290BA0();
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_22;
  swift_bridgeObjectRetain();
  v10 = sub_1832F67A0(a4, a5);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v12 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 56) + 4 * v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((_DWORD)v12 != 0xFFFF)
  {
    v13 = *(_QWORD *)(a1 + 16);
    result = swift_bridgeObjectRetain();
    v15 = 0;
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v39 = v13;
    while (1)
    {
      if (v15 == v13)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = sub_183242B0C(0, v16[2] + 1, 1, v16);
        v18 = v16[2];
        v17 = v16[3];
        if (v18 >= v17 >> 1)
          v16 = sub_183242B0C((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
        v16[2] = v18 + 1;
        v16[v18 + 4] = v12;
        v15 = v13;
      }
      else
      {
        if (v15 >= v13)
          goto LABEL_32;
        v19 = a1 + 32 + 56 * v15;
        v20 = *(_QWORD *)(v19 + 8);
        v21 = *(_QWORD *)(v19 + 24);
        v43 = *(_QWORD *)(v19 + 16);
        v44 = *(_QWORD *)v19;
        v42 = *(_BYTE *)(v19 + 32);
        v22 = *(_QWORD *)(v19 + 48);
        v41 = *(_QWORD *)(v19 + 40);
        v23 = *v6;
        v24 = (uint64_t *)(*v6 + 16);
        swift_beginAccess();
        v25 = *(_QWORD **)(v23 + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 16) = v25;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_18328BD74(v25);
          v25 = (_QWORD *)result;
          *v24 = result;
        }
        if (v25[2] <= v12)
          goto LABEL_33;
        v26 = &v25[8 * v12];
        ++v15;
        v26[4] = v44;
        v26[5] = v20;
        v26[6] = v43;
        v26[7] = v21;
        *((_BYTE *)v26 + 64) = v42;
        v26[9] = v41;
        v26[10] = v22;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = v39;
      }
      v27 = *v6;
      result = swift_beginAccess();
      v28 = *(_QWORD *)(v27 + 16);
      if (*(_QWORD *)(v28 + 16) <= v12)
        break;
      v12 = *(unsigned __int16 *)(v28 + (v12 << 6) + 88);
      if ((_DWORD)v12 == 0xFFFF)
        goto LABEL_24;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  v15 = 0;
  v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_24:
  if (v16[2])
  {
    swift_beginAccess();
    sub_1832939FC((uint64_t)v16);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v29 = *v6;
    swift_beginAccess();
    *(_QWORD *)(v29 + 24) = 0;
  }
  result = swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a1 + 16);
  v31 = v30 - v15;
  if (v30 == v15)
    return swift_bridgeObjectRelease();
  if (v30 > v15)
  {
    v32 = (_QWORD *)(a1 + 56 * v15 + 80);
    do
    {
      v33 = *(v32 - 5);
      v34 = *(v32 - 4);
      v35 = *(v32 - 3);
      v36 = *((_BYTE *)v32 - 16);
      v37 = *(v32 - 1);
      v38 = *v32;
      v45[0] = *(v32 - 6);
      v45[1] = v33;
      v45[2] = v34;
      v45[3] = v35;
      v46 = v36;
      v47 = v37;
      v48 = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1832912E8(v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 += 7;
      --v31;
    }
    while (v31);
    return swift_bridgeObjectRelease();
  }
LABEL_34:
  __break(1u);
  return result;
}

void (*HTTPFields.subscript.modify(_QWORD *a1, uint64_t *a2))(uint64_t **a1, char a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];

  v5 = malloc(0x38uLL);
  *a1 = v5;
  v7 = *a2;
  v6 = a2[1];
  v5[2] = v2;
  v5[3] = v7;
  v8 = a2[2];
  v9 = a2[3];
  v5[4] = v6;
  v5[5] = v8;
  v5[6] = v9;
  v10 = *v2;
  v13[3] = v9;
  v13[4] = v10;
  v13[0] = v7;
  v13[1] = v6;
  v13[2] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *v5 = HTTPFields.subscript.getter((uint64_t)v13);
  v5[1] = v11;
  return sub_183292FD8;
}

{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v7 = *a2;
  v6 = a2[1];
  v5[1] = v2;
  v5[2] = v7;
  v8 = a2[2];
  v9 = a2[3];
  v5[3] = v6;
  v5[4] = v8;
  v5[5] = v9;
  v10 = *v2;
  v12[3] = v9;
  v12[4] = v10;
  v12[0] = v7;
  v12[1] = v6;
  v12[2] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *v5 = HTTPFields.subscript.getter((uint64_t)v12);
  return sub_1832935B8;
}

{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v7 = *a2;
  v6 = a2[1];
  v5[1] = v2;
  v5[2] = v7;
  v8 = a2[2];
  v9 = a2[3];
  v5[3] = v6;
  v5[4] = v8;
  v5[5] = v9;
  v10 = *v2;
  v12[3] = v9;
  v12[4] = v10;
  v12[0] = v7;
  v12[1] = v6;
  v12[2] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *v5 = HTTPFields.subscript.getter((uint64_t)v12);
  return sub_183293848;
}

void sub_183292FD8(uint64_t **a1, char a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[4];

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v6 = (*a1)[5];
  v5 = (*a1)[6];
  v7 = (*a1)[4];
  v8[0] = (*a1)[3];
  v8[1] = v7;
  v8[2] = v6;
  v8[3] = v5;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    HTTPFields.subscript.setter(v4, v3, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    HTTPFields.subscript.setter(v4, v3, v8);
  }
  free(v2);
}

uint64_t sub_183293128(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = a3[3];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v4;
  v7[4] = v5;
  v7[5] = v6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v8 = swift_bridgeObjectRetain();
  sub_183292730(v8, (void (*)(_QWORD *__return_ptr, _QWORD))sub_183298F84, (uint64_t)v7, v3, v4, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t HTTPFields.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v4;
  v7[4] = v5;
  v7[5] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_183292730(a1, (void (*)(_QWORD *__return_ptr, _QWORD))sub_183298544, (uint64_t)v7, v3, v4, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  sub_183292B68(a1, *a2, a2[1], a2[2], a2[3]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_183293290(uint64_t a1, unsigned __int16 a2)
{
  int v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (unsigned __int16)~a2;
  v18 = MEMORY[0x1E0DEE9D8];
  sub_183306BDC(0, 0, 0);
  result = swift_bridgeObjectRetain();
  if (v4)
  {
    v6 = a2;
    v7 = a1 + 32;
    v17 = a1 + 32;
    while (*(_QWORD *)(a1 + 16) > v6)
    {
      v8 = v7 + (v6 << 6);
      v9 = *(_QWORD *)(v8 + 40);
      v10 = *(_QWORD *)(v8 + 48);
      v6 = *(unsigned __int16 *)(v8 + 56);
      if ((sub_18324BC90(v9, v10) & 1) != 0)
      {
        result = swift_bridgeObjectRetain();
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = sub_1832FE3D0(v9, v10);
        v11 = a1;
        v13 = v12;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v10 = v13;
        a1 = v11;
        v7 = v17;
      }
      v15 = *(_QWORD *)(v18 + 16);
      v14 = *(_QWORD *)(v18 + 24);
      if (v15 >= v14 >> 1)
        result = sub_183306BDC(v14 > 1, v15 + 1, 1);
      *(_QWORD *)(v18 + 16) = v15 + 1;
      v16 = v18 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v9;
      *(_QWORD *)(v16 + 40) = v10;
      if (v6 == 0xFFFF)
        goto LABEL_2;
    }
    __break(1u);
  }
  else
  {
LABEL_2:
    swift_bridgeObjectRelease();
    return v18;
  }
  return result;
}

uint64_t sub_183293424@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = *a1;
  v7 = a1[1];
  *(_BYTE *)(a6 + 32) = 0;
  *(_QWORD *)a6 = a2;
  *(_QWORD *)(a6 + 8) = a3;
  *(_QWORD *)(a6 + 16) = a4;
  *(_QWORD *)(a6 + 24) = a5;
  if ((sub_18324BC90(v8, v7) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD510);
    sub_18327DAB4((unint64_t *)&qword_1EDCDD518, &qword_1EDCDD510, MEMORY[0x1E0DEC858]);
    sub_183B91794();
    v8 = 0;
    v7 = 0xE000000000000000;
  }
  v9 = sub_18327D86C(v8, v7);
  v11 = v10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a6 + 40) = v9;
  *(_QWORD *)(a6 + 48) = v11;
  return result;
}

void sub_1832935B8(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *a1;
  v4 = (*a1)[4];
  v3 = (*a1)[5];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v6;
    v8[3] = v5;
    v8[4] = v4;
    v8[5] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = swift_bridgeObjectRetain();
    sub_183292730(v9, (void (*)(_QWORD *__return_ptr, _QWORD))sub_183298F84, (uint64_t)v8, v6, v5, v4, v3);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v6;
    v10[3] = v5;
    v10[4] = v4;
    v10[5] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_183292730(v7, (void (*)(_QWORD *__return_ptr, _QWORD))sub_183298F84, (uint64_t)v10, v6, v5, v4, v3);
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t sub_1832936F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = a3[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  sub_183292B68(v7, v3, v4, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_183293848(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v4 = (*a1)[4];
  v3 = (*a1)[5];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    v8 = swift_bridgeObjectRetain();
    sub_183292B68(v8, v6, v5, v4, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_183292B68(v7, v6, v5, v4, v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t sub_1832938F8@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = v1[4];
  if (v2 == 0xFFFF)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (*(_QWORD *)(*(_QWORD *)v1 + 16) <= v2)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)v1 + (v2 << 6);
    v5 = *(_QWORD *)(v3 + 32);
    v4 = *(_QWORD *)(v3 + 40);
    v6 = *(_QWORD *)(v3 + 48);
    v7 = *(_QWORD *)(v3 + 56);
    v8 = *(unsigned __int8 *)(v3 + 64);
    v9 = *(_QWORD *)(v3 + 72);
    v10 = *(_QWORD *)(v3 + 80);
    v1[4] = *(_WORD *)(v3 + 88);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_18329399C(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;

  v2 = *(_WORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_WORD *)(a1 + 8) = v2;
}

uint64_t sub_1832939B0()
{
  return 0;
}

uint64_t sub_1832939B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_183296AA0(*(_QWORD *)v0, *(_WORD *)(v0 + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1832939F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_183290528(a1, a2, a3, *(_QWORD *)v3, *(_WORD *)(v3 + 8));
}

uint64_t sub_1832939FC(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  v4 = v3 == 0;
  if (v3)
  {
    v5 = *(_QWORD *)(result + 32);
    v6 = 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_QWORD *)*v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    v32 = *(_QWORD *)(*v1 + 16);
    swift_bridgeObjectRetain();
    v8 = v7;
    result = swift_isUniquelyReferenced_nonNull_native();
    v27 = v1;
    if ((result & 1) != 0)
    {
      v9 = (uint64_t)v7;
    }
    else
    {
LABEL_51:
      result = (uint64_t)sub_18328BD74(v8);
      v9 = result;
    }
    v10 = 0;
    v11 = 0;
    v29 = v2 + 32;
    v30 = v3;
    v31 = v9 + 32;
    v28 = v3 + 1;
    v12 = v32;
    do
    {
      if (v11 == v12)
        goto LABEL_44;
      if (v4)
      {
        v4 = 1;
      }
      else
      {
        if (__OFADD__(v11, v10))
          goto LABEL_46;
        if (v11 + v10 == v5)
        {
          v13 = v10 + 1;
          if (__OFADD__(v10, 1))
            goto LABEL_50;
          if (v6 != v3)
          {
            v10 = v28 + v10 - v6;
            if (v6 <= v3)
              v24 = v3;
            else
              v24 = v6;
            while (v24 != v6)
            {
              v25 = v11 + v13;
              if (__OFADD__(v11, v13))
                goto LABEL_42;
              v5 = *(_QWORD *)(v29 + 8 * v6);
              v4 = v25 == v5;
              if (v25 != v5)
              {
                ++v6;
                v10 = v13;
                goto LABEL_18;
              }
              if (__OFADD__(v13, 1))
                goto LABEL_43;
              ++v6;
              ++v13;
              if (v3 == v6)
              {
                v5 = 0;
                v6 = v3;
                goto LABEL_18;
              }
            }
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
          v5 = 0;
          v4 = 1;
          ++v10;
          v6 = v3;
        }
        else
        {
          v4 = 0;
        }
      }
LABEL_18:
      v14 = v11 + v10;
      if (__OFADD__(v11, v10))
        goto LABEL_45;
      v15 = *(_QWORD *)(v9 + 16);
      if ((uint64_t)v14 >= (uint64_t)v15)
        break;
      if (v11 != v14)
      {
        if (v11 >= v15)
          goto LABEL_47;
        if ((v14 & 0x8000000000000000) != 0)
          goto LABEL_48;
        v40 = v10;
        v16 = (uint64_t *)(v31 + (v11 << 6));
        v17 = v16[2];
        v38 = v16[1];
        v39 = *v16;
        v37 = v16[3];
        v36 = *((_BYTE *)v16 + 32);
        v34 = v16[6];
        v35 = v16[5];
        v33 = *((_WORD *)v16 + 28);
        v2 = v31 + (v14 << 6);
        v18 = *(_QWORD *)(v2 + 8);
        v19 = *(_QWORD *)(v2 + 16);
        v3 = *(_QWORD *)(v2 + 24);
        v20 = *(_BYTE *)(v2 + 32);
        v21 = *(_QWORD *)(v2 + 40);
        v8 = *(_QWORD **)(v2 + 48);
        v22 = *(_WORD *)(v2 + 56);
        *v16 = *(_QWORD *)v2;
        v16[1] = v18;
        v16[2] = v19;
        v16[3] = v3;
        *((_BYTE *)v16 + 32) = v20;
        v16[5] = v21;
        v16[6] = (uint64_t)v8;
        *((_WORD *)v16 + 28) = v22;
        v23 = v9;
        v41 = *(_QWORD *)(v9 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 >= v41)
          goto LABEL_49;
        v8 = *(_QWORD **)(v2 + 24);
        *(_QWORD *)v2 = v39;
        *(_QWORD *)(v2 + 8) = v38;
        *(_QWORD *)(v2 + 16) = v17;
        *(_QWORD *)(v2 + 24) = v37;
        *(_BYTE *)(v2 + 32) = v36;
        *(_QWORD *)(v2 + 40) = v35;
        *(_QWORD *)(v2 + 48) = v34;
        *(_WORD *)(v2 + 56) = v33;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v3 = v30;
        v9 = v23;
        v12 = v32;
        v10 = v40;
      }
      ++v11;
    }
    while (v11 != v12);
    *v27 = v9;
    if (!v10)
      return swift_bridgeObjectRelease();
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v26 = *(_QWORD *)(v9 + 16);
      result = v26 - v10;
      if (v26 >= v10)
      {
        sub_183275534(result);
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t HTTPFields.contains(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(sub_183290BA0() + 16))
  {
    swift_bridgeObjectRetain();
    sub_1832F67A0(v2, v1);
    v4 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t HTTPFields.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  result = swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64;
      --v4;
    }
    while (v4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static HTTPFields.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_183297E78(*a1, *a2);
}

uint64_t HTTPFields.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  sub_183B92250();
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return sub_183B9228C();
}

uint64_t sub_183293FEC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  result = swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B92268();
      swift_bridgeObjectRetain();
      sub_183B917C4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t HTTPFields.startIndex.getter()
{
  return 0;
}

uint64_t HTTPFields.endIndex.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
}

BOOL HTTPFields.isEmpty.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) == 0;
}

uint64_t HTTPFields.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    v5 = *v2;
    result = swift_beginAccess();
    v6 = *(_QWORD *)(v5 + 16);
    if (*(_QWORD *)(v6 + 16) > v3)
    {
      v7 = v6 + (v3 << 6);
      v8 = *(_QWORD *)(v7 + 40);
      v9 = *(_QWORD *)(v7 + 48);
      v10 = *(_QWORD *)(v7 + 56);
      v11 = *(_BYTE *)(v7 + 64);
      v12 = *(_QWORD *)(v7 + 72);
      v13 = *(_QWORD *)(v7 + 80);
      *(_QWORD *)a2 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(a2 + 8) = v8;
      *(_QWORD *)(a2 + 16) = v9;
      *(_QWORD *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = v11;
      *(_QWORD *)(a2 + 40) = v12;
      *(_QWORD *)(a2 + 48) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }
  }
  __break(1u);
  return result;
}

double sub_183294234@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  HTTPFields.subscript.getter(*a1, (uint64_t)&v9);
  result = *(double *)&v9;
  v4 = v10;
  v5 = v11;
  v6 = v12;
  v7 = v13;
  v8 = v14;
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_183294290(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[4];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v11[0] = *(_QWORD *)a1;
  v11[1] = v4;
  v11[2] = v5;
  v11[3] = v6;
  v12 = v7;
  v13 = v8;
  v14 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return HTTPFields.subscript.setter(v11, v3);
}

uint64_t HTTPFields.subscript.setter(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v9 = (uint64_t **)v3;
  v8 = a2;
  v11 = *a1;
  v2 = a1[1];
  v6 = a1[2];
  v4 = a1[3];
  v29 = *((unsigned __int8 *)a1 + 32);
  v7 = a1[5];
  v5 = a1[6];
  v3 = (uint64_t *)*v3;
  swift_beginAccess();
  v12 = v3[2];
  if (*(_QWORD *)(v12 + 16) <= v8)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    result = (uint64_t)sub_18328BD74(v9);
    v9 = (uint64_t **)result;
    *v3 = result;
    goto LABEL_25;
  }
  v27 = v11;
  v28 = v7;
  v7 = v8 << 6;
  v13 = v12 + (v8 << 6);
  v14 = *(unsigned __int8 *)(v13 + 64);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = *(_QWORD *)(v13 + 80);
  v17 = *(_QWORD *)(v13 + 48) == v6 && *(_QWORD *)(v13 + 56) == v4;
  if ((v17 || (sub_183B920F4() & 1) != 0) && v14 == v29)
  {
    v18 = v15 == v28 && v16 == v5;
    if (v18 || (sub_183B920F4() & 1) != 0)
      goto LABEL_27;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v9 = sub_1832910C0();
    swift_release();
  }
  v3 = *v9;
  swift_beginAccess();
  v19 = v3[2];
  v10 = v27;
  if (*(_QWORD *)(v19 + 16) <= v8)
    goto LABEL_30;
  v20 = v19 + v7;
  v21 = v6 == *(_QWORD *)(v20 + 48) && v4 == *(_QWORD *)(v20 + 56);
  if (!v21 && (sub_183B920F4() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = sub_183B91860();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      goto LABEL_33;
    v24 = *v9;
    swift_beginAccess();
    v24[3] = 0;
    swift_bridgeObjectRelease();
  }
  v25 = *v9;
  v3 = *v9 + 2;
  swift_beginAccess();
  v9 = (uint64_t **)v25[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  v25[2] = (uint64_t)v9;
  if ((result & 1) == 0)
    goto LABEL_31;
LABEL_25:
  if ((unint64_t)v9[2] > v8)
  {
    v26 = (char *)v9 + v7;
    *((_QWORD *)v26 + 4) = v10;
    *((_QWORD *)v26 + 5) = v2;
    *((_QWORD *)v26 + 6) = v6;
    *((_QWORD *)v26 + 7) = v4;
    v26[64] = v29;
    *((_QWORD *)v26 + 9) = v28;
    *((_QWORD *)v26 + 10) = v5;
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

void (*HTTPFields.subscript.modify(void (**a1)(uint64_t **a1, char a2), unint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void (*result)(uint64_t **, char);
  void (*v6)(uint64_t **, char);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  result = (void (*)(uint64_t **, char))malloc(0x60uLL);
  *a1 = result;
  *((_QWORD *)result + 10) = a2;
  *((_QWORD *)result + 11) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = *v2;
    result = (void (*)(uint64_t **, char))swift_beginAccess();
    v8 = *(_QWORD *)(v7 + 16);
    if (*(_QWORD *)(v8 + 16) > a2)
    {
      v9 = v8 + (a2 << 6);
      v10 = *(_QWORD *)(v9 + 40);
      v11 = *(_QWORD *)(v9 + 48);
      v12 = *(_QWORD *)(v9 + 56);
      v13 = *(_BYTE *)(v9 + 64);
      v14 = *(_QWORD *)(v9 + 72);
      v15 = *(_QWORD *)(v9 + 80);
      *(_QWORD *)v6 = *(_QWORD *)(v9 + 32);
      *((_QWORD *)v6 + 1) = v10;
      *((_QWORD *)v6 + 2) = v11;
      *((_QWORD *)v6 + 3) = v12;
      *((_BYTE *)v6 + 32) = v13;
      *((_QWORD *)v6 + 5) = v14;
      *((_QWORD *)v6 + 6) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return sub_183294670;
    }
  }
  __break(1u);
  return result;
}

void sub_183294670(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11[4];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = *((_BYTE *)v2 + 32);
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[10];
  v11[0] = v4;
  v11[1] = v3;
  v11[2] = v5;
  v11[3] = v6;
  v12 = v7;
  v13 = v8;
  v14 = v9;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HTTPFields.subscript.setter(v11, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    HTTPFields.subscript.setter(v11, v10);
  }
  free(v2);
}

uint64_t sub_183294730(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _OWORD v39[3];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _OWORD v45[3];

  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v3 = (uint64_t)sub_1832910C0();
    swift_release();
  }
  v8 = *v3;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v8 + 16) + 16) == a1)
  {
    v9 = *(_OWORD *)(a3 + 16);
    v41 = *(_OWORD *)a3;
    v42 = v9;
    v43 = *(_OWORD *)(a3 + 32);
    v44 = *(_QWORD *)(a3 + 48);
    v45[0] = v41;
    v45[1] = v9;
    sub_18324C26C(a3);
    sub_183298D44((uint64_t)v45);
    v10 = sub_183B91860();
    sub_183298D78((uint64_t)v45);
    if ((v10 & 1) == 0)
    {
      v39[0] = v41;
      v39[1] = v42;
      v39[2] = v43;
      v40 = v44;
      sub_1832912E8((uint64_t *)v39);
      return sub_18324C2B4(a3);
    }
    __break(1u);
    goto LABEL_29;
  }
  swift_beginAccess();
  *(_QWORD *)(v8 + 24) = 0;
  swift_bridgeObjectRelease();
  v12 = *v4 + 16;
  swift_beginAccess();
  if (a1 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v13 = *(_QWORD **)v12;
  v14 = *(_QWORD *)(*(_QWORD *)v12 + 16);
  if (v14 < a2)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v38 = (_QWORD *)v12;
  v15 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v16 = 1 - v15;
  if (__OFSUB__(1, v15))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v17 = v14 + v16;
  if (__OFADD__(v14, v16))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  sub_18324C26C(a3);
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v38 = v13;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v17 > v13[3] >> 1)
  {
    if (v14 <= v17)
      v19 = v14 + v16;
    else
      v19 = v14;
    v13 = sub_183242484(isUniquelyReferenced_nonNull_native, v19, 1, v13);
    *v38 = v13;
  }
  v20 = (uint64_t)&v13[8 * a1 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC368);
  swift_arrayDestroy();
  if (v16)
  {
    v21 = v13[2];
    v22 = __OFSUB__(v21, a2);
    v23 = v21 - a2;
    if (v22)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v23 < 0)
    {
LABEL_38:
      result = sub_183B91F98();
      __break(1u);
      return result;
    }
    v24 = (char *)(v20 + 64);
    v25 = (char *)&v13[8 * a2 + 4];
    v26 = v23 << 6;
    if ((char *)(v20 + 64) != v25 || v24 >= &v25[v26])
      memmove(v24, v25, v26);
    v27 = v13[2];
    v22 = __OFADD__(v27, v16);
    v28 = v27 + v16;
    if (v22)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v13[2] = v28;
  }
  v29 = *(_QWORD *)a3;
  v30 = *(_QWORD *)(a3 + 8);
  v32 = *(_QWORD *)(a3 + 16);
  v31 = *(_QWORD *)(a3 + 24);
  v33 = *(_BYTE *)(a3 + 32);
  v36 = *(_QWORD *)(a3 + 48);
  v37 = *(_QWORD *)(a3 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = sub_183B91860();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
    goto LABEL_34;
  *(_QWORD *)v20 = v29;
  *(_QWORD *)(v20 + 8) = v30;
  *(_QWORD *)(v20 + 16) = v32;
  *(_QWORD *)(v20 + 24) = v31;
  *(_BYTE *)(v20 + 32) = v33;
  *(_QWORD *)(v20 + 40) = v37;
  *(_QWORD *)(v20 + 48) = v36;
  *(_WORD *)(v20 + 56) = 0;
  sub_18324C26C(a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v38 = v13;
  swift_endAccess();
  v35 = *v4;
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v35 + 16) + 16) > 0xFFFEuLL)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  return result;
}

uint64_t HTTPFields.replaceSubrange<A>(_:with:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t AssociatedTypeWitness;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = v5;
  v32 = a2;
  v33 = a3;
  v34 = a1;
  v31 = a5;
  v8 = sub_183B91DE8();
  v29 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v28 - v9;
  v28[1] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDC368);
  v30 = sub_183B91EFC();
  v11 = MEMORY[0x1E0C80A78](v30);
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28[0] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)v28 - v15;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v5 = sub_1832910C0();
    swift_release();
  }
  v17 = *v5;
  swift_beginAccess();
  if (*(_QWORD **)(*(_QWORD *)(v17 + 16) + 16) == v34)
  {
    v34 = v6;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v33, a4);
    sub_183B91890();
    swift_getAssociatedConformanceWitness();
    sub_183B91D10();
    v18 = v37;
    if (!v37)
      return (*(uint64_t (**)(char *, uint64_t))(v28[0] + 8))(v16, AssociatedTypeWitness);
    v19 = v36;
    v20 = v38;
    v21 = v39;
    v23 = v40;
    v22 = v41;
    v24 = v42;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = sub_183B91860();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
        break;
      v36 = v19;
      v37 = v18;
      v38 = v20;
      v39 = v21;
      LOBYTE(v40) = v23;
      v41 = v22;
      v42 = v24;
      sub_1832912E8(&v36);
      sub_18324C184(v19, v18);
      sub_183B91D10();
      v19 = v36;
      v18 = v37;
      v20 = v38;
      v21 = v39;
      v23 = v40;
      v22 = v41;
      v24 = v42;
      if (!v37)
        return (*(uint64_t (**)(char *, uint64_t))(v28[0] + 8))(v16, AssociatedTypeWitness);
    }
    __break(1u);
    goto LABEL_12;
  }
  swift_beginAccess();
  *(_QWORD *)(v17 + 24) = 0;
  swift_bridgeObjectRelease();
  sub_183B918D8();
  MEMORY[0x186DB5558](MEMORY[0x1E0DEC330], v8);
  sub_183B91FBC();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD9A8);
  v43 = v31;
  MEMORY[0x186DB5558](MEMORY[0x1E0DEC860], v30, &v43);
  sub_183B9195C();
  swift_endAccess();
  v27 = *v6;
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v27 + 16) + 16) > 0xFFFEuLL)
LABEL_12:
    __break(1u);
  return result;
}

uint64_t sub_183294EE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = *((_BYTE *)a1 + 32);
  v9 = a1[5];
  v8 = a1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_183B91860();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v5;
    *(_BYTE *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 48) = v8;
    *(_WORD *)(a2 + 56) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

Swift::Void __swiftcall HTTPFields.reserveCapacity(_:)(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  Swift::Int v8;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = sub_1832910C0();
    swift_release();
  }
  v3 = *v1;
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 24))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD9B0);
    sub_183B91668();
  }
  swift_endAccess();
  v4 = *v1;
  v5 = (_QWORD *)(*v1 + 16);
  swift_beginAccess();
  v6 = *(_QWORD **)(v4 + 16);
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 16) = v6;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || a1 > v6[3] >> 1)
  {
    if (v6[2] <= a1)
      v8 = a1;
    else
      v8 = v6[2];
    v6 = sub_183242484(isUniquelyReferenced_nonNull_native, v8, 0, v6);
  }
  *v5 = v6;
  swift_endAccess();
}

_DWORD *sub_183295098@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *result;

  type metadata accessor for HTTPFields._Storage();
  v2 = (_QWORD *)swift_allocObject();
  v3 = MEMORY[0x1E0DEE9D8];
  v2[2] = MEMORY[0x1E0DEE9D8];
  v2[3] = sub_1832F2514(v3);
  result = (_DWORD *)swift_slowAlloc();
  v2[4] = result;
  *result = 0;
  *a1 = v2;
  return result;
}

uint64_t sub_1832950F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  HTTPFields.replaceSubrange<A>(_:with:)(*(_QWORD **)a1, *(_QWORD *)(a1 + 8), a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

_DWORD *sub_18329514C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;

  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  return sub_183295184((uint64_t)v5, a2, a3);
}

_DWORD *sub_183295184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *result;
  uint64_t v15;
  _QWORD v17[4];
  char v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  type metadata accessor for HTTPFields._Storage();
  v12 = (_QWORD *)swift_allocObject();
  v13 = MEMORY[0x1E0DEE9D8];
  v12[2] = MEMORY[0x1E0DEE9D8];
  v12[3] = sub_1832F2514(v13);
  result = (_DWORD *)swift_slowAlloc();
  v12[4] = result;
  *result = 0;
  if (!a2)
  {
    result = (_DWORD *)sub_18324C2B4(a1);
LABEL_7:
    *a3 = v12;
    return result;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    v17[0] = v6;
    v17[1] = v5;
    v17[2] = v8;
    v17[3] = v7;
    v18 = v9;
    v19 = v10;
    v20 = v11;
    do
    {
      swift_beginAccess();
      v15 = *(_QWORD *)(v12[2] + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_183294730(v15, v15, (uint64_t)v17);
      sub_18324C2B4(a1);
      --a2;
    }
    while (a2);
    result = (_DWORD *)sub_18324C2B4(a1);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1832952BC()
{
  return sub_183B91C50();
}

uint64_t sub_1832952D4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = *((_BYTE *)a1 + 32);
  v8 = a1[5];
  v7 = a1[6];
  v9 = *v1;
  swift_beginAccess();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 16);
  v12[0] = v3;
  v12[1] = v2;
  v12[2] = v5;
  v12[3] = v4;
  v13 = v6;
  v14 = v8;
  v15 = v7;
  sub_183294730(v10, v10, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_183295378()
{
  return sub_183B91C38();
}

uint64_t sub_183295390(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *((_BYTE *)a1 + 32);
  v7 = a1[5];
  v8 = a1[6];
  v9 = *a2;
  v11[0] = v2;
  v11[1] = v3;
  v11[2] = v4;
  v11[3] = v5;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  sub_183294730(v9, v9, (uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1832953FC()
{
  return sub_183B91C44();
}

uint64_t sub_183295414@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_18329541C(*a1, a2);
}

uint64_t sub_18329541C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *v2;
  result = swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 > a1)
  {
    v9 = v7 + (a1 << 6);
    v10 = *(_QWORD *)(v9 + 40);
    v16 = *(_QWORD *)(v9 + 32);
    v12 = *(_QWORD *)(v9 + 48);
    v11 = *(_QWORD *)(v9 + 56);
    v13 = *(_BYTE *)(v9 + 64);
    v15 = *(_QWORD *)(v9 + 72);
    v14 = *(_QWORD *)(v9 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_183298C44(a1);
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v11;
    *(_BYTE *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 40) = v15;
    *(_QWORD *)(a2 + 48) = v14;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1832954F4(uint64_t *a1)
{
  return sub_183298C44(*a1);
}

double sub_183295500@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_183295518@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = *v1;
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(v5 + 40);
  v8 = *(_QWORD *)(v5 + 48);
  v9 = *(_QWORD *)(v5 + 56);
  v10 = *(_BYTE *)(v5 + 64);
  v11 = *(_QWORD *)(v5 + 72);
  v12 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)a1 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  result = sub_183290648(0, 1, v6, v3);
  if ((v13 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return sub_183298C44(0);
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t sub_1832955E0(unint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (result)
  {
    v2 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v3 = *v1;
      swift_beginAccess();
      result = sub_183290648(0, v2, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16), v3);
      if ((v4 & 1) != 0)
      {
LABEL_9:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) == 0)
        return sub_183298C44(0);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

_DWORD *sub_18329566C(char a1)
{
  _QWORD *v1;
  _DWORD *result;
  _QWORD *v3;
  uint64_t v4;

  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    return (_DWORD *)sub_183298C44(0);
  }
  else
  {
    swift_release();
    type metadata accessor for HTTPFields._Storage();
    v3 = (_QWORD *)swift_allocObject();
    v4 = MEMORY[0x1E0DEE9D8];
    v3[2] = MEMORY[0x1E0DEE9D8];
    v3[3] = sub_1832F2514(v4);
    result = (_DWORD *)swift_slowAlloc();
    v3[4] = result;
    *result = 0;
    *v1 = v3;
  }
  return result;
}

uint64_t sub_183295708(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1832970EC(a1, a2);
  if (!v3)
  {
    v5 = result;
    v6 = *v2;
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v6 + 16) + 16) < v5)
      __break(1u);
    else
      return sub_183298C44(v5);
  }
  return result;
}

uint64_t sub_183295784(uint64_t *a1, unint64_t *a2)
{
  return HTTPFields.subscript.setter(a1, *a2);
}

void (*sub_18329578C(void (***a1)(uint64_t **a1, char a2), unint64_t *a2))(_QWORD *)
{
  void (**v4)(uint64_t **, char);

  v4 = (void (**)(uint64_t **, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = HTTPFields.subscript.modify(v4, *a2);
  return sub_1832957D8;
}

uint64_t sub_1832957DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1832968F4(v2, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return swift_release();
}

void (*sub_183295814(_QWORD *a1, uint64_t *a2))(_QWORD *)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_183295860(v4, *a2, a2[1]);
  return sub_1832957D8;
}

void (*sub_183295860(_QWORD *a1, uint64_t a2, uint64_t a3))(unint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  void (*result)(unint64_t **, char);

  v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  v8 = *v3;
  result = (void (*)(unint64_t **, char))swift_beginAccess();
  if (a2 < 0 || *(_QWORD *)(*(_QWORD *)(v8 + 16) + 16) < a3)
  {
    __break(1u);
  }
  else
  {
    v7[1] = a3;
    v7[2] = v8;
    *v7 = a2;
    swift_retain();
    return sub_1832958FC;
  }
  return result;
}

void sub_1832958FC(unint64_t **a1, char a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (*a1)[7];
  v7 = (uint64_t *)(*a1)[8];
  v8 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_1832968F4(v7, v8, v6, v3, v4, v5);
    swift_release();
  }
  else
  {
    sub_1832968F4((uint64_t *)(*a1)[8], v8, v6, v3, v4, v5);
  }
  swift_release();
  free(v2);
}

uint64_t sub_18329599C@<X0>(uint64_t (*a1)(uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_18329747C(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_1832959C4(uint64_t *a1, unint64_t *a2)
{
  return sub_1832959D0(*a1, *a2);
}

uint64_t sub_1832959D0(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[4];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[4];
  char v27;
  uint64_t v28;
  uint64_t v29;

  if (result != a2)
  {
    v3 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v5 = *v2;
      result = swift_beginAccess();
      v6 = *(_QWORD *)(v5 + 16);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7 > v3)
      {
        v8 = v6 + 32;
        v9 = v8 + (v3 << 6);
        result = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 16);
        v11 = *(_QWORD *)(v9 + 24);
        v12 = *(_BYTE *)(v9 + 32);
        v13 = *(_QWORD *)(v9 + 40);
        v14 = *(_QWORD *)(v9 + 48);
        v26[0] = *(_QWORD *)v9;
        v26[1] = result;
        v26[2] = v10;
        v26[3] = v11;
        v27 = v12;
        v28 = v13;
        v29 = v14;
        if (v7 > a2)
        {
          v15 = v8 + (a2 << 6);
          v16 = *(_QWORD *)(v15 + 8);
          v17 = *(_QWORD *)(v15 + 16);
          v18 = *(_QWORD *)(v15 + 24);
          v19 = *(_BYTE *)(v15 + 32);
          v20 = *(_QWORD *)(v15 + 40);
          v21 = *(_QWORD *)(v15 + 48);
          v22[0] = *(_QWORD *)v15;
          v22[1] = v16;
          v22[2] = v17;
          v22[3] = v18;
          v23 = v19;
          v24 = v20;
          v25 = v21;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          HTTPFields.subscript.setter(v22, v3);
          return HTTPFields.subscript.setter(v26, a2);
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_183295AE8()
{
  return sub_183B916B0();
}

uint64_t sub_183295B08()
{
  return sub_183B916A4();
}

uint64_t sub_183295B28@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *a1 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16);
  return result;
}

uint64_t type metadata accessor for HTTPFields._Storage()
{
  return objc_opt_self();
}

void (*sub_183295B90(void (***a1)(void **a1), unint64_t *a2))(_QWORD *)
{
  void (**v4)(void **);

  v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_183295BDC(v4, *a2);
  return sub_1832957D8;
}

void (*sub_183295BDC(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t *v2;
  void (*result)(void **);
  void (*v6)(void **);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  result = (void (*)(void **))malloc(0x50uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = *v2;
    result = (void (*)(void **))swift_beginAccess();
    v8 = *(_QWORD *)(v7 + 16);
    if (*(_QWORD *)(v8 + 16) > a2)
    {
      v9 = v8 + (a2 << 6);
      v10 = *(_QWORD *)(v9 + 40);
      v11 = *(_QWORD *)(v9 + 48);
      v12 = *(_QWORD *)(v9 + 56);
      v13 = *(_BYTE *)(v9 + 64);
      v14 = *(_QWORD *)(v9 + 72);
      v15 = *(_QWORD *)(v9 + 80);
      *(_QWORD *)v6 = *(_QWORD *)(v9 + 32);
      *((_QWORD *)v6 + 1) = v10;
      *((_QWORD *)v6 + 2) = v11;
      *((_QWORD *)v6 + 3) = v12;
      *((_BYTE *)v6 + 32) = v13;
      *((_QWORD *)v6 + 5) = v14;
      *((_QWORD *)v6 + 6) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return sub_183295C90;
    }
  }
  __break(1u);
  return result;
}

void sub_183295C90(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t sub_183295CD8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *v2;
  result = swift_beginAccess();
  if (v4 < 0 || *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16) < v5)
  {
    __break(1u);
  }
  else
  {
    a2[1] = v5;
    a2[2] = v6;
    *a2 = v4;
    return swift_retain();
  }
  return result;
}

uint64_t sub_183295D48@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *v1;
  result = swift_beginAccess();
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16);
  *a1 = 0;
  a1[1] = v5;
  return result;
}

BOOL sub_183295D90()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) == 0;
}

uint64_t *sub_183295DD8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *sub_183295DF4(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_183295E10(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

uint64_t sub_183295E2C@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v5 = *v2;
  result = swift_beginAccess();
  if (v4 >= *(_QWORD *)(*(_QWORD *)(v5 + 16) + 16))
    __break(1u);
  else
    *a2 = v4 + 1;
  return result;
}

uint64_t sub_183295E90(unint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = *a1;
  result = swift_beginAccess();
  if (v4 >= *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16))
    __break(1u);
  else
    *a1 = v4 + 1;
  return result;
}

_QWORD *sub_183295EF4@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;

  v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = *v2;
    result = (_QWORD *)swift_beginAccess();
    if (v4 < *(_QWORD *)(*(_QWORD *)(v5 + 16) + 16))
    {
      *a2 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *sub_183295F60(unint64_t *result)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    v4 = *v1;
    result = (unint64_t *)swift_beginAccess();
    if (v2 < *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16))
    {
      *v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_183295FCC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;

  v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    v6 = *v3;
    result = (_QWORD *)swift_beginAccess();
    if (v5 <= *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16))
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_183296038@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  unint64_t result;
  char v7;

  result = sub_183290648(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_183296070(unint64_t *a1, unint64_t *a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  v3 = *a1;
  v4 = *a2;
  v5 = *v2;
  result = swift_beginAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 16);
  if (v3 > v7)
  {
    __break(1u);
  }
  else if (v4 <= v7)
  {
    return v4 - v3;
  }
  __break(1u);
  return result;
}

void sub_1832960DC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1832960E8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
}

_QWORD *sub_183296128()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = sub_1832F6034(*v0);
  swift_release();
  return v1;
}

uint64_t sub_18329615C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1832F6398(a1, a2, a3, *v3);
}

uint64_t HTTPFields.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC368);
  v4 = MEMORY[0x186DB1E44](v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1832961E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC368);
  v4 = MEMORY[0x186DB1E44](v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t HTTPFields.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922F8();
  v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  sub_183298580();
  sub_1832985C4();
  sub_183B920B8();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v4);
}

uint64_t HTTPFields.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  char v9;
  int64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[4];
  char v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  _QWORD v27[4];
  char v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;

  type metadata accessor for HTTPFields._Storage();
  v5 = (_QWORD *)swift_allocObject();
  v6 = MEMORY[0x1E0DEE9D8];
  v5[2] = MEMORY[0x1E0DEE9D8];
  v5[3] = sub_1832F2514(v6);
  v7 = (_DWORD *)swift_slowAlloc();
  v5[4] = v7;
  *v7 = 0;
  v31 = v5;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922C8();
  if (v2)
  {
    swift_release();
  }
  else
  {
    __swift_project_boxed_opaque_existential_2(v25, v26);
    v8 = sub_183B92094();
    if ((v9 & 1) == 0)
    {
      v10 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v11 = sub_1832910C0();
        v31 = v11;
        swift_release();
        v5 = v11;
      }
      swift_beginAccess();
      if (v5[3])
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDD9B0);
        sub_183B91668();
      }
      swift_endAccess();
      swift_beginAccess();
      v12 = (_QWORD *)v5[2];
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      v5[2] = v12;
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v12[3] >> 1)
      {
        if (v12[2] <= v10)
          v14 = v10;
        else
          v14 = v12[2];
        v12 = sub_183242484(isUniquelyReferenced_nonNull_native, v14, 0, v12);
      }
      v5[2] = v12;
      swift_endAccess();
    }
    __swift_project_boxed_opaque_existential_2(v25, v26);
    if ((sub_183B920AC() & 1) != 0)
    {
LABEL_19:
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v25);
      *a2 = v31;
    }
    else
    {
      while (1)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25, v26);
        sub_183298608();
        sub_183B920A0();
        v16 = v23;
        v15 = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17 = sub_183B91860();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0)
          break;
        v18 = v31;
        swift_beginAccess();
        v19 = *(_QWORD *)(v18[2] + 16);
        v27[0] = v21[0];
        v27[1] = v21[1];
        v27[2] = v21[2];
        v27[3] = v21[3];
        v28 = v22;
        v29 = v23;
        v30 = v24;
        sub_183294730(v19, v19, (uint64_t)v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_project_boxed_opaque_existential_2(v25, v26);
        if ((sub_183B920AC() & 1) != 0)
          goto LABEL_19;
      }
      sub_18324A894((uint64_t)v25, (uint64_t)v21);
      sub_183B91DB8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_183B917F4();
      if ((sub_18324BC90(v16, v15) & 1) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1832FE3D0(v16, v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_183B917F4();
      swift_bridgeObjectRelease();
      sub_183B917F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_183B917F4();
      sub_183B91E54();
      swift_allocError();
      sub_183B91E30();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v21);
      swift_willThrow();
      swift_release();
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v25);
    }
  }
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

uint64_t sub_1832967B8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return HTTPFields.init(from:)(a1, a2);
}

uint64_t sub_1832967CC(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183B922F8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_183298580();
  sub_1832985C4();
  sub_183B920B8();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t sub_18329687C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_183B91854();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x186DB1D3C](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_1832968F4(uint64_t *a1, unint64_t a2, int64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[4];
  char v27;
  uint64_t v28;
  uint64_t v29;

  v12 = *a1;
  result = swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0 || *(_QWORD *)(*(_QWORD *)(v12 + 16) + 16) < a3)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a2 != a3)
  {
    if (a4 == a5)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if ((uint64_t)a2 >= a3)
    {
LABEL_26:
      __break(1u);
      return result;
    }
    v14 = a6 + 16;
    result = swift_beginAccess();
    v15 = (a4 << 6) + 80;
    v16 = a3 - 1;
    v17 = a4;
    while ((uint64_t)v17 < a5)
    {
      if ((a4 & 0x8000000000000000) != 0)
        goto LABEL_19;
      if (v17 >= *(_QWORD *)(*(_QWORD *)v14 + 16))
        goto LABEL_20;
      v18 = (_QWORD *)(*(_QWORD *)v14 + v15);
      v19 = *(v18 - 5);
      v20 = *(v18 - 4);
      v21 = *(v18 - 3);
      v22 = *((_BYTE *)v18 - 16);
      v23 = *(v18 - 1);
      v24 = *v18;
      v26[0] = *(v18 - 6);
      v26[1] = v19;
      v26[2] = v20;
      v26[3] = v21;
      v27 = v22;
      v28 = v23;
      v29 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      HTTPFields.subscript.setter(v26, a2);
      v25 = *a1;
      result = swift_beginAccess();
      if (a2 >= *(_QWORD *)(*(_QWORD *)(v25 + 16) + 16))
        goto LABEL_21;
      if (v17 >= *(_QWORD *)(*(_QWORD *)v14 + 16))
        goto LABEL_22;
      ++v17;
      if (v16 == a2)
        goto LABEL_15;
      v15 += 64;
      ++a2;
      if (a5 == v17)
      {
        __break(1u);
LABEL_15:
        a4 = v17;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_16:
  if (a4 != a5)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_183296AA0(uint64_t result, unsigned __int16 a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;

  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (a2 == 0xFFFF)
  {
    v2 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(result + 16);
    v5 = a2;
    v26 = result;
    result = swift_bridgeObjectRetain();
    if (v4 > v5)
    {
      v2 = 0;
      v6 = (uint64_t)(v3 + 4);
      v27 = v4;
      do
      {
        v7 = v26 + 32 + (v5 << 6);
        v9 = *(_QWORD *)v7;
        v8 = *(_QWORD *)(v7 + 8);
        v11 = *(_QWORD *)(v7 + 16);
        v10 = *(_QWORD *)(v7 + 24);
        v29 = *(_BYTE *)(v7 + 32);
        v12 = *(_QWORD *)(v7 + 48);
        v28 = *(_QWORD *)(v7 + 40);
        v5 = *(unsigned __int16 *)(v7 + 56);
        if (v2)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          result = swift_bridgeObjectRetain();
          v13 = __OFSUB__(v2--, 1);
          if (v13)
            goto LABEL_31;
        }
        else
        {
          v14 = v3[3];
          if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_32;
          v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 <= 1)
            v16 = 1;
          else
            v16 = v15;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC390);
          v17 = (_QWORD *)swift_allocObject();
          v18 = (uint64_t)(_swift_stdlib_malloc_size(v17) - 32) / 56;
          v17[2] = v16;
          v17[3] = 2 * v18;
          v19 = v17 + 4;
          v20 = v3[3] >> 1;
          v6 = (uint64_t)&v17[7 * v20 + 4];
          v21 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - v20;
          if (v3[2])
          {
            if (v17 != v3 || v19 >= &v3[7 * v20 + 4])
              memmove(v19, v3 + 4, 56 * v20);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v3[2] = 0;
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          result = swift_release();
          v3 = v17;
          v4 = v27;
          v13 = __OFSUB__(v21, 1);
          v2 = v21 - 1;
          if (v13)
          {
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            return result;
          }
        }
        *(_QWORD *)v6 = v9;
        *(_QWORD *)(v6 + 8) = v8;
        *(_QWORD *)(v6 + 16) = v11;
        *(_QWORD *)(v6 + 24) = v10;
        *(_BYTE *)(v6 + 32) = v29;
        *(_QWORD *)(v6 + 40) = v28;
        *(_QWORD *)(v6 + 48) = v12;
        if ((_DWORD)v5 == 0xFFFF)
          goto LABEL_25;
        v6 += 56;
      }
      while (v4 > v5);
    }
    __break(1u);
LABEL_25:
    result = swift_bridgeObjectRelease();
  }
  v23 = v3[3];
  if (v23 >= 2)
  {
    v24 = v23 >> 1;
    v13 = __OFSUB__(v24, v2);
    v25 = v24 - v2;
    if (v13)
      goto LABEL_33;
    v3[2] = v25;
  }
  return (uint64_t)v3;
}

unint64_t sub_183296CE8()
{
  unint64_t result;
  _QWORD *v1;
  char v2;
  size_t v3;
  _BYTE *v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  result = sub_1832976AC();
  v1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((result & 0x100) == 0)
  {
    v2 = result;
    v3 = 0;
    v4 = (_BYTE *)(MEMORY[0x1E0DEE9D8] + 32);
    while (1)
    {
      if (!v3)
      {
        v5 = v1[3];
        if ((uint64_t)((v5 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        if (v6 <= 1)
          v7 = 1;
        else
          v7 = v6;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC1A0);
        v8 = (_QWORD *)swift_allocObject();
        v9 = 2 * _swift_stdlib_malloc_size(v8) - 64;
        v8[2] = v7;
        v8[3] = v9;
        v10 = (unint64_t)(v8 + 4);
        v11 = v1[3] >> 1;
        if (v1[2])
        {
          if (v8 != v1 || v10 >= (unint64_t)v1 + v11 + 32)
            memmove(v8 + 4, v1 + 4, v11);
          v1[2] = 0;
        }
        v4 = (_BYTE *)(v10 + v11);
        v3 = (v9 >> 1) - v11;
        result = swift_release();
        v1 = v8;
      }
      v13 = __OFSUB__(v3--, 1);
      if (v13)
        break;
      *v4++ = v2;
      result = sub_1832976AC();
      v2 = result;
      if ((result & 0x100) != 0)
        goto LABEL_21;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v3 = 0;
LABEL_21:
  swift_release();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  v14 = v1[3];
  if (v14 < 2)
    return (unint64_t)v1;
  v15 = v14 >> 1;
  v13 = __OFSUB__(v15, v3);
  v16 = v15 - v3;
  if (!v13)
  {
    v1[2] = v16;
    return (unint64_t)v1;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_183296EB4(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = sub_183B9180C();
    v2 = result;
    if (result > 0)
    {
LABEL_6:
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC1A0);
      v3 = (_QWORD *)swift_allocObject();
      result = _swift_stdlib_malloc_size(v3);
      v4 = 2 * result - 64;
      v3[2] = v2;
      v3[3] = v4;
      goto LABEL_9;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
      v2 = HIBYTE(a2) & 0xF;
    else
      v2 = result & 0xFFFFFFFFFFFFLL;
    if (v2 > 0)
      goto LABEL_6;
  }
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24);
LABEL_9:
  if (v2 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v5 = v3 + 4;
  v6 = v4 >> 1;
  if (v2)
  {
    v6 -= v2;
    swift_bridgeObjectRetain();
    swift_retain();
    while (1)
    {
      result = sub_183297CE4();
      if ((result & 0x100) != 0)
        goto LABEL_42;
      *v5++ = result;
      if (!--v2)
        goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  swift_retain();
LABEL_16:
  result = sub_183297CE4();
  if ((result & 0x100) == 0)
  {
    v7 = result;
    while (1)
    {
      if (!v6)
      {
        v8 = v3[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_39;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDC1A0);
        v11 = (_QWORD *)swift_allocObject();
        v12 = 2 * _swift_stdlib_malloc_size(v11) - 64;
        v11[2] = v10;
        v11[3] = v12;
        v13 = (unint64_t)(v11 + 4);
        v14 = v3[3] >> 1;
        if (v3[2])
        {
          if (v11 != v3 || v13 >= (unint64_t)v3 + v14 + 32)
            memmove(v11 + 4, v3 + 4, v14);
          v3[2] = 0;
        }
        v5 = (_BYTE *)(v13 + v14);
        v6 = (v12 >> 1) - v14;
        result = swift_release();
        v3 = v11;
      }
      v16 = __OFSUB__(v6--, 1);
      if (v16)
        break;
      *v5++ = v7;
      result = sub_183297CE4();
      v7 = result;
      if ((result & 0x100) != 0)
        goto LABEL_34;
    }
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
LABEL_34:
  swift_release();
  result = swift_bridgeObjectRelease();
  v17 = v3[3];
  if (v17 < 2)
    return (uint64_t)v3;
  v18 = v17 >> 1;
  v16 = __OFSUB__(v18, v6);
  v19 = v18 - v6;
  if (!v16)
  {
    v3[2] = v19;
    return (uint64_t)v3;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1832970EC(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53[4];
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = a2;
  v4 = *v2;
  v5 = (uint64_t *)(v4 + 16);
  swift_retain();
  result = swift_beginAccess();
  v51 = v4;
  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = 144;
    v10 = 1;
    while (1)
    {
      v11 = v10 - 1;
      if (v10 - 1 >= v8)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v12 = v7 + v9;
      v13 = *(_QWORD *)(v12 - 104);
      v14 = *(_QWORD *)(v12 - 96);
      v15 = *(_QWORD *)(v12 - 88);
      v16 = *(_BYTE *)(v12 - 80);
      v17 = *(_QWORD *)(v12 - 72);
      v18 = *(_QWORD *)(v12 - 64);
      v57 = *(_QWORD *)(v12 - 112);
      v58 = v13;
      v59 = v14;
      v60 = v15;
      v61 = v16;
      v62 = v17;
      v63 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = a1(&v57);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v11;
      }
      v20 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        break;
      v7 = *v5;
      v8 = *(_QWORD *)(*v5 + 16);
      if (v11 >= v8)
        goto LABEL_27;
      v9 += 64;
      if (v10++ == v8)
        goto LABEL_9;
    }
    v22 = v51;
    swift_release();
    if (v11 < *(_QWORD *)(*(_QWORD *)(v51 + 16) + 16))
      goto LABEL_15;
    __break(1u);
LABEL_13:
    v22 = v51;
    while (1)
    {
      result = swift_beginAccess();
      v9 += 64;
      if (v10++ >= *(_QWORD *)(*(_QWORD *)(v22 + 16) + 16))
        break;
LABEL_15:
      v24 = (uint64_t *)(v22 + 16);
      result = swift_beginAccess();
      v51 = v22;
      v25 = *(_QWORD *)(v22 + 16);
      v26 = *(_QWORD *)(v25 + 16);
      if (v10 == v26)
        return v11;
      if (v10 >= v26)
        goto LABEL_28;
      v27 = (_QWORD *)(v25 + v9);
      v28 = *(v27 - 5);
      v29 = *(v27 - 4);
      v30 = *(v27 - 3);
      v31 = *((_BYTE *)v27 - 16);
      v32 = *(v27 - 1);
      v33 = *v27;
      v57 = *(v27 - 6);
      v58 = v28;
      v59 = v29;
      v60 = v30;
      v61 = v31;
      v62 = v32;
      v63 = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34 = a1(&v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v34 & 1) != 0)
        goto LABEL_13;
      if (v10 != v11)
      {
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_31;
        v35 = *v24;
        v36 = *(_QWORD *)(*v24 + 16);
        if (v11 >= v36)
          goto LABEL_32;
        v37 = v35 + (v11 << 6);
        result = *(_QWORD *)(v37 + 40);
        v38 = *(_QWORD *)(v37 + 48);
        v39 = *(_QWORD *)(v37 + 56);
        v40 = *(_BYTE *)(v37 + 64);
        v41 = *(_QWORD *)(v37 + 72);
        v42 = *(_QWORD *)(v37 + 80);
        v57 = *(_QWORD *)(v37 + 32);
        v58 = result;
        v59 = v38;
        v60 = v39;
        v61 = v40;
        v62 = v41;
        v63 = v42;
        if (v10 >= v36)
          goto LABEL_33;
        v43 = (_QWORD *)(v35 + v9);
        v44 = *(v43 - 5);
        v45 = *(v43 - 4);
        v46 = *(v43 - 3);
        v47 = *((_BYTE *)v43 - 16);
        v48 = *(v43 - 1);
        v49 = *v43;
        v53[0] = *(v43 - 6);
        v53[1] = v44;
        v53[2] = v45;
        v53[3] = v46;
        v54 = v47;
        v55 = v48;
        v56 = v49;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        HTTPFields.subscript.setter(v53, v11);
        HTTPFields.subscript.setter(&v57, v10);
      }
      v22 = *v50;
      result = swift_beginAccess();
      if (v11 >= *(_QWORD *)(*(_QWORD *)(v22 + 16) + 16))
        goto LABEL_30;
      ++v11;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_release();
    return *(_QWORD *)(*(_QWORD *)(v51 + 16) + 16);
  }
  return result;
}

uint64_t sub_18329747C(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  v4 = *v2;
  swift_beginAccess();
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16);
  if (v5)
  {
    v27 = v2;
    v6 = 0;
    while (1)
    {
      v7 = v4 + 16;
      result = swift_beginAccess();
      v9 = *(_QWORD *)(v4 + 16);
      if (v6 >= *(_QWORD *)(v9 + 16))
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      v10 = v9 + (v6 << 6);
      v11 = *(_QWORD *)(v10 + 40);
      v12 = *(_QWORD *)(v10 + 48);
      v13 = *(_QWORD *)(v10 + 56);
      v14 = *(_BYTE *)(v10 + 64);
      v15 = *(_QWORD *)(v10 + 72);
      v16 = *(_QWORD *)(v10 + 80);
      v29 = *(_QWORD *)(v10 + 32);
      v30 = v11;
      v31 = v12;
      v32 = v13;
      v33 = v14;
      v34 = v15;
      v35 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = a1(&v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v3)
        return v6;
      if ((v17 & 1) != 0)
        break;
      if (v6 >= *(_QWORD *)(*(_QWORD *)v7 + 16))
        goto LABEL_20;
LABEL_14:
      if ((uint64_t)++v6 >= v5)
        return v6;
    }
    v18 = v5 << 6;
    do
    {
      if (--v5 >= *(_QWORD *)(*(_QWORD *)v7 + 16))
      {
        __break(1u);
        goto LABEL_19;
      }
      if ((uint64_t)v6 >= v5)
        return v6;
      v19 = *(_QWORD *)v7 + v18;
      v20 = *(_QWORD *)(v19 - 24);
      v21 = *(_QWORD *)(v19 - 16);
      v22 = *(_QWORD *)(v19 - 8);
      v23 = *(_BYTE *)v19;
      v24 = *(_QWORD *)(v19 + 8);
      v25 = *(_QWORD *)(v19 + 16);
      v29 = *(_QWORD *)(v19 - 32);
      v30 = v20;
      v31 = v21;
      v32 = v22;
      v33 = v23;
      v34 = v24;
      v35 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26 = a1(&v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v18 -= 64;
    }
    while ((v26 & 1) != 0);
    sub_1832959D0(v6, v5);
    v4 = *v27;
    result = swift_beginAccess();
    if (v6 < *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16))
      goto LABEL_14;
LABEL_21:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

unint64_t sub_1832976AC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(unint64_t *__return_ptr, char *);
  unint64_t v3;
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  unint64_t v17;
  __int128 v18;
  void (*v19)(unint64_t *__return_ptr, char *);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v1 = v0;
  v2 = (void (*)(unint64_t *__return_ptr, char *))(v0 + 8);
  if (*(_BYTE *)v0 != 1)
  {
    while (1)
    {
      v17 = *(_QWORD *)(v1 + 56);
      v18 = *((_OWORD *)v2 + 1);
      v32 = *(_OWORD *)v2;
      v33 = v18;
      v34 = *((_OWORD *)v2 + 2);
      if (v17 >> 14 == sub_183297A94() >> 14)
        goto LABEL_54;
      v5 = *((_QWORD *)&v32 + 1);
      v6 = v32;
      v19 = (void (*)(unint64_t *__return_ptr, char *))v33;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v20 = sub_183297A94();
      swift_release();
      swift_release();
      result = swift_bridgeObjectRelease();
      if (v17 >> 14 >= v20 >> 14)
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v21 = (v6 >> 59) & 1;
      if ((v5 & 0x1000000000000000) == 0)
        LOBYTE(v21) = 1;
      v22 = 4 << v21;
      if ((v17 & 0xC) == 4 << v21)
      {
        result = sub_18329687C(v17, v6, v5);
        v17 = result;
        if ((v5 & 0x1000000000000000) == 0)
        {
LABEL_23:
          result = (v17 & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_24;
        }
      }
      else if ((v5 & 0x1000000000000000) == 0)
      {
        goto LABEL_23;
      }
      v26 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v26 = v6 & 0xFFFFFFFFFFFFLL;
      if (v26 <= v17 >> 16)
      {
        __break(1u);
        return result;
      }
      result = sub_183B91818();
LABEL_24:
      *(_QWORD *)(v1 + 56) = result;
      if ((result & 0xC) == v22)
      {
        result = sub_18329687C(result, v6, v5);
        if (result < 0x4000)
          goto LABEL_56;
      }
      else if (result < 0x4000)
      {
        goto LABEL_56;
      }
      if ((v5 & 0x1000000000000000) != 0)
      {
        v23 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0)
          v23 = v6 & 0xFFFFFFFFFFFFLL;
        if (v23 < result >> 16)
          goto LABEL_58;
        result = sub_183B91824();
      }
      else
      {
        result = (result & 0xFFFFFFFFFFFF0000) - 65532;
      }
      if ((result & 0xC) == v22)
        result = sub_18329687C(result, v6, v5);
      v24 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v24 = v6 & 0xFFFFFFFFFFFFLL;
      v25 = result >> 16;
      if (result >> 16 >= v24)
        goto LABEL_57;
      if ((v5 & 0x1000000000000000) != 0)
      {
        v15 = sub_183B91848();
      }
      else if ((v5 & 0x2000000000000000) != 0)
      {
        v28 = v6;
        v29 = v5 & 0xFFFFFFFFFFFFFFLL;
        v15 = *((_BYTE *)&v28 + v25);
      }
      else if ((v6 & 0x1000000000000000) != 0)
      {
        v15 = *(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (result >> 16));
      }
      else
      {
        v15 = *(_BYTE *)(sub_183B91E78() + v25);
      }
      v30 = v15;
      v19(&v28, &v30);
      v16 = v28;
      v31 = v28;
      if (((*(uint64_t (**)(char *))(v1 + 64))(&v31) & 1) == 0)
      {
        v27 = 0;
        *(_BYTE *)v1 = 1;
        return v16 | (v27 << 8);
      }
    }
  }
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_OWORD *)(v0 + 24);
  v32 = *(_OWORD *)v2;
  v33 = v4;
  v34 = *(_OWORD *)(v0 + 40);
  if (v3 >> 14 == sub_183297A94() >> 14)
  {
LABEL_54:
    v16 = 0;
    v27 = 1;
    return v16 | (v27 << 8);
  }
  v5 = *((_QWORD *)&v32 + 1);
  v6 = v32;
  v2 = (void (*)(unint64_t *__return_ptr, char *))v33;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v7 = sub_183297A94();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v3 >> 14 >= v7 >> 14)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    result = sub_18329687C(result, v6, v5);
    goto LABEL_7;
  }
  v9 = sub_1832981D8(v3, v32, *((unint64_t *)&v32 + 1));
  *(_QWORD *)(v1 + 56) = v9;
  result = sub_183298268(v9, v6, v5);
  v10 = (v6 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  if ((result & 0xC) == 4 << v10)
    goto LABEL_60;
LABEL_7:
  v11 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v11 = v6 & 0xFFFFFFFFFFFFLL;
  v12 = result >> 16;
  if (result >> 16 >= v11)
  {
    __break(1u);
  }
  else if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      v28 = v6;
      v29 = v5 & 0xFFFFFFFFFFFFFFLL;
      v14 = *((_BYTE *)&v28 + v12);
    }
    else
    {
      if ((v6 & 0x1000000000000000) != 0)
        v13 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v13 = sub_183B91E78();
      v14 = *(_BYTE *)(v13 + v12);
    }
    goto LABEL_52;
  }
  v14 = sub_183B91848();
LABEL_52:
  v31 = v14;
  v2(&v28, &v31);
  v27 = 0;
  v16 = v28;
  return v16 | (v27 << 8);
}

unint64_t sub_183297A94()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t *);
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  void (*v14)(uint64_t *__return_ptr, _QWORD *);
  _QWORD v15[2];
  uint64_t v16;

  v1 = *v0;
  v2 = v0[1];
  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  else
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  v4 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LODWORD(v4) = 1;
  v5 = 11;
  if ((_DWORD)v4)
    v5 = 7;
  v6 = v5 | (v3 << 16);
  if (!v3)
    return v6;
  v7 = (uint64_t (*)(uint64_t *))v0[4];
  v8 = 4 << v4;
  v14 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[2];
  while (1)
  {
    result = v6;
    if ((v6 & 0xC) == v8)
    {
      result = sub_18329687C(v6, v1, v2);
      if (result < 0x4000)
        goto LABEL_40;
    }
    else if (v6 < 0x4000)
    {
      goto LABEL_40;
    }
    if ((v2 & 0x1000000000000000) != 0)
    {
      if (v3 < result >> 16)
        goto LABEL_42;
      result = sub_183B91824();
    }
    else
    {
      result = (result & 0xFFFFFFFFFFFF0000) - 65532;
    }
    if ((result & 0xC) == v8)
      result = sub_18329687C(result, v1, v2);
    v10 = result >> 16;
    if (result >> 16 >= v3)
      break;
    if ((v2 & 0x1000000000000000) != 0)
    {
      v12 = sub_183B91848();
    }
    else if ((v2 & 0x2000000000000000) != 0)
    {
      v15[0] = v1;
      v15[1] = v2 & 0xFFFFFFFFFFFFFFLL;
      v12 = *((_BYTE *)v15 + v10);
    }
    else
    {
      v11 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v1 & 0x1000000000000000) == 0)
        v11 = sub_183B91E78();
      v12 = *(_BYTE *)(v11 + v10);
    }
    LOBYTE(v15[0]) = v12;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v14(&v16, v15);
    swift_release();
    swift_bridgeObjectRelease();
    v13 = v7(&v16);
    result = swift_release();
    if ((v13 & 1) == 0)
      return v6;
    if ((v6 & 0xC) == v8)
    {
      result = sub_18329687C(v6, v1, v2);
      v6 = result;
      if (result < 0x4000)
        goto LABEL_41;
    }
    else if (v6 < 0x4000)
    {
      goto LABEL_41;
    }
    if ((v2 & 0x1000000000000000) != 0)
    {
      if (v3 < v6 >> 16)
        goto LABEL_43;
      v6 = sub_183B91824();
      if (v6 < 0x4000)
        return v6;
    }
    else
    {
      v6 = (v6 & 0xFFFFFFFFFFFF0000) - 65532;
      if (v6 < 0x4000)
        return v6;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

unint64_t sub_183297CE4()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, _QWORD *);
  unint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  v2 = v0[1];
  v1 = v0[2];
  v3 = *v0;
  if ((v2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v2) & 0xF;
  else
    v4 = *v0 & 0xFFFFFFFFFFFFLL;
  v5 = v1 >> 14;
  if (v1 >> 14 == 4 * v4)
  {
    v6 = 0;
    return v6 | ((v5 == 4 * v4) << 8);
  }
  v7 = (v3 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((v0[2] & 0xC) == 4 << v7)
    v1 = sub_18329687C(v1, *v0, v0[1]);
  v8 = v1 >> 16;
  if (v1 >> 16 >= v4)
  {
    __break(1u);
    goto LABEL_25;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
LABEL_25:
    v10 = sub_183B91848();
    goto LABEL_17;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    v18[0] = v3;
    v18[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    v10 = *((_BYTE *)v18 + v8);
  }
  else
  {
    if ((v3 & 0x1000000000000000) != 0)
      v9 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v9 = sub_183B91E78();
    v10 = *(_BYTE *)(v9 + v8);
  }
LABEL_17:
  v11 = *v0;
  v12 = v0[1];
  result = v0[2];
  v14 = ((unint64_t)*v0 >> 59) & 1;
  if ((v12 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  if ((v0[2] & 0xC) == 4 << v14)
  {
    result = sub_18329687C(result, *v0, v0[1]);
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_21;
  }
  else if ((v12 & 0x1000000000000000) == 0)
  {
LABEL_21:
    v15 = (result & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_22:
    v0[2] = v15;
    v16 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[3];
    LOBYTE(v18[0]) = v10;
    v16(&v19, v18);
    v6 = v19;
    return v6 | ((v5 == 4 * v4) << 8);
  }
  v17 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v17 = v11 & 0xFFFFFFFFFFFFLL;
  if (v17 > result >> 16)
  {
    v15 = sub_183B91818();
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_183297E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;

  v4 = sub_183290BA0();
  result = sub_183290BA0();
  v6 = result;
  if (*(_QWORD *)(v4 + 16) == *(_QWORD *)(result + 16))
  {
    v7 = 0;
    v38 = v4 + 64;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = -1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v44 = a1 + 16;
    v11 = a2 + 16;
    v39 = (unint64_t)(v8 + 63) >> 6;
    v40 = result;
    v41 = v4;
    while (1)
    {
      if (v10)
      {
        v12 = __clz(__rbit64(v10));
        v13 = (v10 - 1) & v10;
        v14 = v12 | (v7 << 6);
        if (!*(_QWORD *)(v6 + 16))
          goto LABEL_51;
      }
      else
      {
        v15 = v7 + 1;
        if (__OFADD__(v7, 1))
          goto LABEL_56;
        if (v15 >= v39)
        {
LABEL_53:
          swift_bridgeObjectRelease();
          swift_release();
          return 1;
        }
        v16 = *(_QWORD *)(v38 + 8 * v15);
        ++v7;
        if (!v16)
        {
          v7 = v15 + 1;
          if (v15 + 1 >= v39)
            goto LABEL_53;
          v16 = *(_QWORD *)(v38 + 8 * v7);
          if (!v16)
          {
            v7 = v15 + 2;
            if (v15 + 2 >= v39)
              goto LABEL_53;
            v16 = *(_QWORD *)(v38 + 8 * v7);
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v39)
                goto LABEL_53;
              v16 = *(_QWORD *)(v38 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  v7 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_57;
                  if (v7 >= v39)
                    goto LABEL_53;
                  v16 = *(_QWORD *)(v38 + 8 * v7);
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v7 = v17;
            }
          }
        }
LABEL_23:
        v13 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v7 << 6);
        if (!*(_QWORD *)(v6 + 16))
        {
LABEL_51:
          swift_release();
          goto LABEL_49;
        }
      }
      v42 = v13;
      v43 = v7;
      v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
      v19 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 56) + 4 * v14);
      v21 = *v18;
      v20 = v18[1];
      swift_bridgeObjectRetain();
      v22 = sub_1832F67A0(v21, v20);
      if ((v23 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      v24 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 56) + 4 * v22);
      result = swift_bridgeObjectRelease();
      v25 = v19 == 0xFFFF || v24 == 0xFFFF;
      if (!v25)
        break;
LABEL_5:
      v25 = v19 == v24;
      v6 = v40;
      v4 = v41;
      v10 = v42;
      v7 = v43;
      if (!v25)
      {
LABEL_47:
        swift_bridgeObjectRelease();
        swift_release();
        return 0;
      }
    }
    swift_beginAccess();
    result = swift_beginAccess();
    while (*(_QWORD *)(*(_QWORD *)v44 + 16) > (unint64_t)v19)
    {
      if (*(_QWORD *)(*(_QWORD *)v11 + 16) <= (unint64_t)v24)
        goto LABEL_55;
      v27 = *(_QWORD *)v44 + ((unint64_t)v19 << 6);
      result = *(_QWORD *)(v27 + 48);
      v28 = *(_QWORD *)(v27 + 56);
      v29 = *(unsigned __int8 *)(v27 + 64);
      v30 = *(_QWORD *)(v27 + 72);
      v31 = *(_QWORD *)(v27 + 80);
      v19 = *(unsigned __int16 *)(v27 + 88);
      v32 = *(_QWORD *)v11 + ((unint64_t)v24 << 6);
      v33 = *(unsigned __int8 *)(v32 + 64);
      v34 = *(_QWORD *)(v32 + 72);
      v35 = *(_QWORD *)(v32 + 80);
      v24 = *(unsigned __int16 *)(v32 + 88);
      if (result != *(_QWORD *)(v32 + 48) || v28 != *(_QWORD *)(v32 + 56))
      {
        result = sub_183B920F4();
        if ((result & 1) == 0)
          goto LABEL_47;
      }
      if (v29 != v33)
        goto LABEL_47;
      if (v30 != v34 || v31 != v35)
      {
        result = sub_183B920F4();
        if ((result & 1) == 0)
          goto LABEL_47;
      }
      if (v19 == 0xFFFF || v24 == 0xFFFF)
        goto LABEL_5;
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_49:
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

unint64_t sub_1832981D8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
  {
    result = sub_18329687C(result, a2, a3);
    if ((a3 & 0x1000000000000000) == 0)
      return (result & 0xFFFFFFFFFFFF0000) + 65540;
  }
  else if ((a3 & 0x1000000000000000) == 0)
  {
    return (result & 0xFFFFFFFFFFFF0000) + 65540;
  }
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 > result >> 16)
    return sub_183B91818();
  __break(1u);
  return result;
}

unint64_t sub_183298268(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) != 4 << v5)
  {
    if (result >= 0x4000)
      goto LABEL_5;
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = sub_18329687C(result, a2, a3);
  if (result < 0x4000)
    goto LABEL_8;
LABEL_5:
  if ((a3 & 0x1000000000000000) == 0)
    return (result & 0xFFFFFFFFFFFF0000) - 65532;
LABEL_9:
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 >= result >> 16)
    return sub_183B91824();
  __break(1u);
  return result;
}

uint64_t sub_183298308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v4 = (uint64_t)sub_1832910C0();
    swift_release();
  }
  v8 = sub_183290BA0();
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_15;
  swift_bridgeObjectRetain();
  v9 = sub_1832F67A0(a3, a4);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v11 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 56) + 4 * v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((_DWORD)v11 != 0xFFFF)
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = sub_183242B0C(0, v12[2] + 1, 1, v12);
      v14 = v12[2];
      v13 = v12[3];
      if (v14 >= v13 >> 1)
        v12 = sub_183242B0C((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
      v12[2] = v14 + 1;
      v12[v14 + 4] = v11;
      v15 = *v5;
      result = swift_beginAccess();
      v17 = *(_QWORD *)(v15 + 16);
      if (*(_QWORD *)(v17 + 16) <= v11)
        break;
      v11 = *(unsigned __int16 *)(v17 + (v11 << 6) + 88);
      if ((_DWORD)v11 == 0xFFFF)
        goto LABEL_17;
    }
    __break(1u);
    return result;
  }
LABEL_16:
  v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
  if (v12[2])
  {
    swift_beginAccess();
    sub_1832939FC((uint64_t)v12);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v18 = *v5;
    swift_beginAccess();
    *(_QWORD *)(v18 + 24) = 0;
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1832984EC()
{
  unint64_t result;

  result = qword_1EDCDD9A0;
  if (!qword_1EDCDD9A0)
  {
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EDCDD9A0);
  }
  return result;
}

uint64_t sub_183298534@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_183291E48(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_183298544@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_183293424(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_183298580()
{
  unint64_t result;

  result = qword_1EDCDD9B8;
  if (!qword_1EDCDD9B8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDD9B8);
  }
  return result;
}

unint64_t sub_1832985C4()
{
  unint64_t result;

  result = qword_1EDCDD9C0;
  if (!qword_1EDCDD9C0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPField, &type metadata for HTTPField);
    atomic_store(result, (unint64_t *)&qword_1EDCDD9C0);
  }
  return result;
}

unint64_t sub_183298608()
{
  unint64_t result;

  result = qword_1EDCDD9C8;
  if (!qword_1EDCDD9C8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPField, &type metadata for HTTPField);
    atomic_store(result, (unint64_t *)&qword_1EDCDD9C8);
  }
  return result;
}

unint64_t sub_183298650()
{
  unint64_t result;

  result = qword_1EDCDD9D0;
  if (!qword_1EDCDD9D0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDD9D0);
  }
  return result;
}

unint64_t sub_183298698()
{
  unint64_t result;

  result = qword_1EDCDD9D8;
  if (!qword_1EDCDD9D8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDD9D8);
  }
  return result;
}

uint64_t sub_1832986DC()
{
  return sub_1832989A8(&qword_1EDCDD9E0, (uint64_t (*)(void))sub_183298708, MEMORY[0x1E0DEDE50]);
}

unint64_t sub_183298708()
{
  unint64_t result;

  result = qword_1EDCDD9F0;
  if (!qword_1EDCDD9F0)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDD9F0);
  }
  return result;
}

unint64_t sub_183298750()
{
  unint64_t result;

  result = qword_1EDCDD9F8;
  if (!qword_1EDCDD9F8)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDD9F8);
  }
  return result;
}

uint64_t sub_183298794()
{
  return sub_183298910(&qword_1EDCDDA00, MEMORY[0x1E0DEB8B8]);
}

uint64_t sub_1832987B8()
{
  return sub_1832989A8(&qword_1EDCDDA10, (uint64_t (*)(void))sub_1832987E4, MEMORY[0x1E0DEDE40]);
}

unint64_t sub_1832987E4()
{
  unint64_t result;

  result = qword_1EDCDDA18;
  if (!qword_1EDCDDA18)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDDA18);
  }
  return result;
}

uint64_t sub_183298828()
{
  return sub_1832989A8(&qword_1EDCDDA20, (uint64_t (*)(void))sub_183298854, MEMORY[0x1E0DEDE30]);
}

unint64_t sub_183298854()
{
  unint64_t result;

  result = qword_1EDCDDA28;
  if (!qword_1EDCDDA28)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_1EDCDDA28);
  }
  return result;
}

uint64_t sub_18329889C()
{
  return sub_183298910(&qword_1EDCDDA30, MEMORY[0x1E0DEB8C0]);
}

uint64_t sub_1832988C0()
{
  return sub_18327DAB4(&qword_1EDCDDA38, &qword_1EDCDD9E8, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_1832988EC()
{
  return sub_183298910(&qword_1EDCDDA40, MEMORY[0x1E0DEB890]);
}

uint64_t sub_183298910(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDDA08);
    v6 = sub_183243EE0();
    v7[0] = MEMORY[0x1E0DEB458];
    v7[1] = v6;
    result = MEMORY[0x186DB5558](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18329897C()
{
  return sub_1832989A8(&qword_1EDCDDA48, (uint64_t (*)(void))sub_183298750, MEMORY[0x1E0DEDE28]);
}

uint64_t sub_1832989A8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDCDD9E8);
    v8 = a2();
    result = MEMORY[0x186DB5558](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_183298A10()
{
  return sub_18327DAB4(&qword_1EDCDDA50, &qword_1EDCDDA58, MEMORY[0x1E0DEC908]);
}

uint64_t sub_183298A3C@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 3);
  v12 = *a1;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  result = HTTPFields.subscript.getter((uint64_t)&v9);
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_183298A8C()
{
  return 0;
}

uint64_t sub_183298A9C@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_12Tm(a1, a2, (uint64_t (*)(__int128 *))HTTPFields.subscript.getter, a3);
}

uint64_t sub_183298AAC()
{
  return 0;
}

uint64_t sub_183298ABC@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_12Tm(a1, a2, (uint64_t (*)(__int128 *))HTTPFields.subscript.getter, a3);
}

uint64_t keypath_get_12Tm@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t (*a3)(__int128 *)@<X3>, uint64_t *a4@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  v12 = *a1;
  v9 = v5;
  v10 = v6;
  v11 = v7;
  result = a3(&v9);
  *a4 = result;
  return result;
}

uint64_t sub_183298B18()
{
  return 0;
}

uint64_t sub_183298B30()
{
  return 0;
}

ValueMetadata *type metadata accessor for HTTPFields()
{
  return &type metadata for HTTPFields;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for HTTPFields.HTTPFieldSequence()
{
  return &type metadata for HTTPFields.HTTPFieldSequence;
}

unint64_t sub_183298B84()
{
  unint64_t result;

  result = qword_1EDCDDA60;
  if (!qword_1EDCDDA60)
  {
    result = MEMORY[0x186DB5558](&unk_183BA26FC, &type metadata for HTTPFields.HTTPFieldSequence.Iterator);
    atomic_store(result, (unint64_t *)&qword_1EDCDDA60);
  }
  return result;
}

unint64_t sub_183298BCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDCDDA68;
  if (!qword_1EDCDDA68)
  {
    v1 = type metadata accessor for HTTPFields._Storage();
    result = MEMORY[0x186DB5558](&unk_183BA272C, v1);
    atomic_store(result, (unint64_t *)&qword_1EDCDDA68);
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_183298C44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = (uint64_t)sub_1832910C0();
    swift_release();
  }
  v4 = *v1;
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v4 + 16) + 16) != a1)
  {
    swift_beginAccess();
    *(_QWORD *)(v4 + 24) = 0;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_183275534(a1);
    swift_endAccess();
    v6 = *v2;
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v6 + 16) + 16) > 0xFFFEuLL)
      __break(1u);
  }
  return result;
}

uint64_t sub_183298D44(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_183298D78(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_183298DAC()
{
  return swift_deallocObject();
}

unint64_t sub_183298DBC()
{
  uint64_t v0;

  return sub_183291018(*(_QWORD *)(v0 + 16));
}

uint64_t sub_183298DC4()
{
  return swift_deallocObject();
}

uint64_t sub_183298DD8()
{
  return swift_deallocObject();
}

uint64_t sub_183298DE8()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 16);
}

uint64_t sub_183298DF0()
{
  return swift_deallocObject();
}

uint64_t sub_183298E00@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HTTPFields.HTTPFieldSequence.Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7Network10HTTPFieldsV17HTTPFieldSequenceVwca_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for HTTPFields.HTTPFieldSequence.Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t _s7Network10HTTPFieldsV17HTTPFieldSequenceVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 10))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_183298F2C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 10) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPFields.HTTPFieldSequence.Iterator()
{
  return &type metadata for HTTPFields.HTTPFieldSequence.Iterator;
}

uint64_t sub_183298F94()
{
  nw_protocol_definition_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v0 = nw_protocol_copy_ip_definition();
  type metadata accessor for NWProtocolDefinition();
  v1 = (_QWORD *)swift_allocObject();
  v1[4] = v0;
  v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  v3 = sub_183B916E0();
  v5 = v4;

  result = swift_unknownObjectRelease();
  v1[2] = v3;
  v1[3] = v5;
  qword_1EDCDDA70 = (uint64_t)v1;
  return result;
}

uint64_t static NWProtocolIP.definition.getter()
{
  if (qword_1EDCDC588 != -1)
    swift_once();
  return swift_retain();
}

void sub_183299068(char *a1)
{
  uint64_t v1;

  nw_ip_options_set_version(*(nw_protocol_options_t *)(v1 + 16), dword_183BA29A4[*a1]);
}

uint64_t sub_183299080@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = nw_ip_options_get_version(*(void **)(v1 + 16));
  v4 = 2 * ((_DWORD)result == 6);
  if ((_DWORD)result == 4)
    v4 = 1;
  *a1 = v4;
  return result;
}

void (*sub_1832990BC(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  int version;
  char v5;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  version = nw_ip_options_get_version(v3);
  v5 = 2 * (version == 6);
  if (version == 4)
    v5 = 1;
  *(_BYTE *)(a1 + 8) = v5;
  return sub_183299108;
}

void sub_183299108(uint64_t a1)
{
  nw_ip_options_set_version(*(nw_protocol_options_t *)a1, dword_183BA29A4[*(char *)(a1 + 8)]);
}

void sub_183299120(uint8_t a1)
{
  uint64_t v1;

  nw_ip_options_set_hop_limit(*(nw_protocol_options_t *)(v1 + 16), a1);
}

uint64_t sub_183299130()
{
  uint64_t v0;

  return nw_ip_options_get_hop_limit(*(void **)(v0 + 16));
}

void (*sub_183299148(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_hop_limit(v3);
  return sub_183299180;
}

void sub_183299180(uint64_t a1)
{
  nw_ip_options_set_hop_limit(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_183299190(char a1)
{
  uint64_t v1;

  nw_ip_options_set_use_minimum_mtu(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832991A0()
{
  uint64_t v0;

  return nw_ip_options_get_use_minimum_mtu(*(void **)(v0 + 16));
}

void (*sub_1832991B8(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_use_minimum_mtu(v3);
  return sub_1832991F0;
}

void sub_1832991F0(uint64_t a1)
{
  nw_ip_options_set_use_minimum_mtu(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_183299200(char a1)
{
  uint64_t v1;

  nw_ip_options_set_disable_fragmentation(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_183299210()
{
  uint64_t v0;

  return nw_ip_options_get_fragmentation_value(*(void **)(v0 + 16)) == 1;
}

void (*sub_183299230(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_fragmentation_value(v3) == 1;
  return sub_183299270;
}

void sub_183299270(uint64_t a1)
{
  nw_ip_options_set_disable_fragmentation(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_183299280(char a1)
{
  uint64_t v1;

  nw_ip_options_set_calculate_receive_time(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_183299290()
{
  uint64_t v0;

  return nw_ip_options_get_calculate_receive_time(*(void **)(v0 + 16));
}

void (*sub_1832992A8(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_calculate_receive_time(v3);
  return sub_1832992E0;
}

void sub_1832992E0(uint64_t a1)
{
  nw_ip_options_set_calculate_receive_time(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

void sub_1832992F4(unsigned __int8 *a1)
{
  uint64_t v1;

  nw_ip_options_set_local_address_preference(*(nw_protocol_options_t *)(v1 + 16), (nw_ip_local_address_preference_t)*a1);
}

uint64_t sub_183299300@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = nw_ip_options_get_local_address_preference(*(void **)(v1 + 16));
  v4 = 2 * ((_DWORD)result == 2);
  if ((_DWORD)result == 1)
    v4 = 1;
  *a1 = v4;
  return result;
}

uint64_t (*sub_18329933C(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  void *v3;
  int local_address_preference;
  char v5;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  local_address_preference = nw_ip_options_get_local_address_preference(v3);
  v5 = 2 * (local_address_preference == 2);
  if (local_address_preference == 1)
    v5 = 1;
  *(_BYTE *)(a1 + 8) = v5;
  return sub_183299388;
}

uint64_t sub_183299388(uint64_t a1, uint64_t a2)
{
  return sub_183299630(a1, a2, (uint64_t (*)(_QWORD, _QWORD))nw_ip_options_set_local_address_preference);
}

void sub_183299394(char a1)
{
  uint64_t v1;

  nw_ip_options_set_disable_multicast_loopback(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

BOOL sub_1832993A4()
{
  uint64_t v0;

  return nw_ip_options_get_disable_multicast_loopback(*(void **)(v0 + 16));
}

void (*sub_1832993BC(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_disable_multicast_loopback(v3);
  return sub_1832993F4;
}

void sub_1832993F4(uint64_t a1)
{
  nw_ip_options_set_disable_multicast_loopback(*(nw_protocol_options_t *)a1, *(_BYTE *)(a1 + 8));
}

BOOL sub_183299404(NSObject *a1)
{
  NSObject *v1;
  NSObject *v2;
  _BOOL8 is_equal;

  v1 = nw_protocol_options_copy_definition(a1);
  v2 = nw_protocol_copy_ip_definition();
  is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolIP.Options.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

BOOL static NWProtocolIP.ECN.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWProtocolIP.ECN.hash(into:)()
{
  return sub_183B9225C();
}

void sub_1832994B8(char *a1, uint64_t a2)
{
  nw_ip_metadata_set_ecn_flag(*(nw_protocol_metadata_t *)(*(_QWORD *)a2 + 16), dword_183BA29B0[*a1]);
}

void sub_1832994D4(char *a1)
{
  uint64_t v1;

  nw_ip_metadata_set_ecn_flag(*(nw_protocol_metadata_t *)(v1 + 16), dword_183BA29B0[*a1]);
}

uint64_t sub_1832994EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  unsigned int v4;

  result = nw_ip_metadata_get_ecn_flag(*(nw_protocol_metadata_t *)(v1 + 16));
  v4 = 0x3010200u >> (8 * result);
  if (result >= 4)
    LOBYTE(v4) = 0;
  *a1 = v4;
  return result;
}

void (*sub_18329952C(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  nw_ip_ecn_flag_t ecn_flag;
  unsigned int v5;

  v3 = *(NSObject **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  ecn_flag = nw_ip_metadata_get_ecn_flag(v3);
  v5 = 0x3010200u >> (8 * ecn_flag);
  if (ecn_flag >= 4)
    LOBYTE(v5) = 0;
  *(_BYTE *)(a1 + 8) = v5;
  return sub_18329957C;
}

void sub_18329957C(uint64_t a1)
{
  nw_ip_metadata_set_ecn_flag(*(nw_protocol_metadata_t *)a1, dword_183BA29B0[*(char *)(a1 + 8)]);
}

void sub_183299594(unsigned __int8 *a1, uint64_t a2)
{
  nw_ip_metadata_set_service_class(*(nw_protocol_metadata_t *)(*(_QWORD *)a2 + 16), (nw_service_class_t)*a1);
}

void sub_1832995A8(unsigned __int8 *a1)
{
  uint64_t v1;

  nw_ip_metadata_set_service_class(*(nw_protocol_metadata_t *)(v1 + 16), (nw_service_class_t)*a1);
}

uint64_t sub_1832995B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = nw_ip_metadata_get_service_class(*(nw_protocol_metadata_t *)(v1 + 16));
  if (result >= 6)
    v4 = 0;
  else
    v4 = result;
  *a1 = v4;
  return result;
}

uint64_t (*sub_1832995E4(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  NSObject *v3;
  nw_service_class_t service_class;
  char v5;

  v3 = *(NSObject **)(v1 + 16);
  *(_QWORD *)a1 = v3;
  service_class = nw_ip_metadata_get_service_class(v3);
  if (service_class >= (nw_service_class_responsive_data|nw_service_class_interactive_video))
    v5 = 0;
  else
    v5 = service_class;
  *(_BYTE *)(a1 + 8) = v5;
  return sub_183299624;
}

uint64_t sub_183299624(uint64_t a1, uint64_t a2)
{
  return sub_183299630(a1, a2, (uint64_t (*)(_QWORD, _QWORD))nw_ip_metadata_set_service_class);
}

uint64_t sub_183299630(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_18329963C()
{
  uint64_t v0;

  return nw_ip_metadata_get_receive_time(*(nw_protocol_metadata_t *)(v0 + 16));
}

BOOL sub_183299644(NSObject *a1)
{
  return nw_protocol_metadata_is_ip(a1);
}

uint64_t NWProtocolIP.Metadata.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = nw_ip_create_metadata();
  return v0;
}

uint64_t NWProtocolIP.Metadata.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = nw_ip_create_metadata();
  return v0;
}

uint64_t NWProtocolIP.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NWProtocolIP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t sub_1832996CC()
{
  unint64_t result;

  result = qword_1EDCDDA78;
  if (!qword_1EDCDDA78)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolIP.Options.Version, &type metadata for NWProtocolIP.Options.Version);
    atomic_store(result, (unint64_t *)&qword_1EDCDDA78);
  }
  return result;
}

unint64_t sub_183299714()
{
  unint64_t result;

  result = qword_1EDCDDA80;
  if (!qword_1EDCDDA80)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolIP.Options.AddressPreference, &type metadata for NWProtocolIP.Options.AddressPreference);
    atomic_store(result, (unint64_t *)&qword_1EDCDDA80);
  }
  return result;
}

unint64_t sub_18329975C()
{
  unint64_t result;

  result = qword_1EDCDDA88;
  if (!qword_1EDCDDA88)
  {
    result = MEMORY[0x186DB5558](&protocol conformance descriptor for NWProtocolIP.ECN, &type metadata for NWProtocolIP.ECN);
    atomic_store(result, (unint64_t *)&qword_1EDCDDA88);
  }
  return result;
}

uint64_t sub_1832997A0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = nw_ip_options_get_version(*(void **)(*(_QWORD *)a1 + 16));
  v4 = 2 * ((_DWORD)result == 6);
  if ((_DWORD)result == 4)
    v4 = 1;
  *a2 = v4;
  return result;
}

void sub_1832997E0(char *a1, uint64_t a2)
{
  nw_ip_options_set_version(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), dword_183BA29A4[*a1]);
}

uint64_t sub_1832997FC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = nw_ip_options_get_hop_limit(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183299828(uint8_t *a1, uint64_t a2)
{
  nw_ip_options_set_hop_limit(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

BOOL sub_18329983C@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_ip_options_get_use_minimum_mtu(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183299868(BOOL *a1, uint64_t a2)
{
  nw_ip_options_set_use_minimum_mtu(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t sub_18329987C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result;

  result = nw_ip_options_get_fragmentation_value(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = (_DWORD)result == 1;
  return result;
}

void sub_1832998B0(BOOL *a1, uint64_t a2)
{
  nw_ip_options_set_disable_fragmentation(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

BOOL sub_1832998C4@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_ip_options_get_calculate_receive_time(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_1832998F0(BOOL *a1, uint64_t a2)
{
  nw_ip_options_set_calculate_receive_time(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t sub_183299904@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = nw_ip_options_get_local_address_preference(*(void **)(*(_QWORD *)a1 + 16));
  v4 = 2 * ((_DWORD)result == 2);
  if ((_DWORD)result == 1)
    v4 = 1;
  *a2 = v4;
  return result;
}

void sub_183299944(unsigned __int8 *a1, uint64_t a2)
{
  nw_ip_options_set_local_address_preference(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), (nw_ip_local_address_preference_t)*a1);
}

BOOL sub_183299958@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = nw_ip_options_get_disable_multicast_loopback(*(void **)(*(_QWORD *)a1 + 16));
  *a2 = result;
  return result;
}

void sub_183299984(BOOL *a1, uint64_t a2)
{
  nw_ip_options_set_disable_multicast_loopback(*(nw_protocol_options_t *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t sub_183299998@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1832994EC(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1832999D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1832995B4(&v3);
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for NWProtocolIP()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolIP.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolIP.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolIP.Options.version.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.version.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.version.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.hopLimit.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.hopLimit.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.hopLimit.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.useMinimumMTU.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.useMinimumMTU.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.useMinimumMTU.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableFragmentation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableFragmentation.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableFragmentation.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.shouldCalculateReceiveTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.shouldCalculateReceiveTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.shouldCalculateReceiveTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.localAddressPreference.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.localAddressPreference.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.localAddressPreference.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableMulticastLoopback.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableMulticastLoopback.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableMulticastLoopback.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

ValueMetadata *type metadata accessor for NWProtocolIP.Options.Version()
{
  return &type metadata for NWProtocolIP.Options.Version;
}

uint64_t _s7Network12NWProtocolIPC7OptionsC7VersionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_183299BB8 + 4 * byte_183BA27A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_183299BEC + 4 * asc_183BA27A0[v4]))();
}

uint64_t sub_183299BEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183299BF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183299BFCLL);
  return result;
}

uint64_t sub_183299C08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183299C10);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_183299C14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183299C1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolIP.Options.AddressPreference()
{
  return &type metadata for NWProtocolIP.Options.AddressPreference;
}

uint64_t getEnumTagSinglePayload for NWProtocolIP.ECN(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolIP.ECN(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_183299D14 + 4 * byte_183BA27AF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_183299D48 + 4 * byte_183BA27AA[v4]))();
}

uint64_t sub_183299D48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183299D50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183299D58);
  return result;
}

uint64_t sub_183299D64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183299D6CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_183299D70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183299D78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolIP.ECN()
{
  return &type metadata for NWProtocolIP.ECN;
}

uint64_t type metadata accessor for NWProtocolIP.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolIP.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolIP.Metadata.serviceClass.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolIP.Metadata.serviceClass.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NWProtocolIP.Metadata.receiveTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NWProtocolIP.Metadata.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t Listener1.__allocating_init(using:ready:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18329A818(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))Listener1.init(using:ready:));
}

void Listener1.init(using:ready:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + qword_1EDCDDA90;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + qword_1EDCDDAA0;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)v3 = 0;
  type metadata accessor for Connection1();
}

_QWORD *sub_183299ED8()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  nw_parameters_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;

  v5 = sub_183B91A7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = *(_QWORD *)(*v0 + 152);
  swift_checkMetadataState();
  *(_QWORD *)((char *)v0 + v6) = sub_183B91644();
  v7 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v8 + 16) = v9;
  v16 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v8, &v16);
  if (v2)
  {
    swift_release();
    sub_18329A134(v3);
    v11 = sub_183B91CF8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v4, v11);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v0[2] = v10;
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v0;
    v12[3] = v15;
    v12[4] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329A178);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_18329A178, (uint64_t)v12);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329A1A4);
    NWListener.newConnectionHandler.setter((uint64_t)sub_18329A1A4, (uint64_t)v0);
    swift_release();
    swift_release();
    v13 = qword_1EDCDC5C8;
    swift_retain();
    if (v13 != -1)
      swift_once();
    NWListener.start(queue:)((void *)qword_1EDCF2A70);
    swift_release();
    swift_release();
  }
  return v0;
}

uint64_t sub_18329A134(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDAB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18329A178(unsigned int *a1)
{
  uint64_t v1;

  return sub_18329B394(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(int *))(v1 + 24), *(_QWORD *)(v1 + 32), &qword_1EDCDDA90, &qword_1EDCDDAA0);
}

void sub_18329A1A4()
{
  sub_18329BAA0();
}

void Listener1.__allocating_init(for:using:)()
{
  swift_allocObject();
  Listener1.init(for:using:)();
}

uint64_t sub_18329A1FC()
{
  uint64_t v0;

  return v0;
}

void Listener1.init(for:using:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + qword_1EDCDDA90;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDDA98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + qword_1EDCDDAA0;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)v3 = 0;
  type metadata accessor for Connection1();
}

void sub_18329A2E8()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  nw_parameters_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  _QWORD v28[9];
  __int128 v29;
  __int16 v30;
  char v31;

  v6 = sub_183B91A7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
  v7 = *(_QWORD *)(*v0 + 152);
  swift_checkMetadataState();
  *(_QWORD *)((char *)v0 + v7) = sub_183B91644();
  v8 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDBA80);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v9 + 16) = v10;
  v27 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v9, &v27);
  if (v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183253844(v2);
    sub_18329A134(v3);
    v12 = sub_183B91CF8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v4, v12);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v13 = v11;
    v0[2] = v11;
    if (v2)
      v14 = v24;
    else
      v14 = 0;
    v15 = *(_QWORD *)(v5 - 72);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1832506C0(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183253844(v2);
    v28[0] = 0;
    v28[1] = v22;
    v28[2] = v25;
    v28[3] = v21;
    v28[4] = v26;
    v28[5] = v20;
    v28[6] = v15;
    v28[7] = v2;
    v28[8] = v14;
    v29 = xmmword_183B9FD50;
    v30 = 768;
    v16 = *(os_unfair_lock_s **)(v13 + 16);
    v17 = (uint64_t)&v16[4];
    v18 = v16 + 48;
    v31 = 0;
    os_unfair_lock_lock(v16 + 48);
    sub_183277CF0(v17, (uint64_t)v28, v13);
    os_unfair_lock_unlock(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_183253844(v2);
    sub_183084848(0, 0xF000000000000000);
    swift_release();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329C924);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_18329C924, (uint64_t)v0);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_183061488((uint64_t)sub_18329A1A4);
    NWListener.newConnectionHandler.setter((uint64_t)sub_18329A1A4, (uint64_t)v0);
    swift_release();
    swift_release();
    v19 = qword_1EDCDC5C8;
    swift_retain();
    if (v19 != -1)
      swift_once();
    NWListener.start(queue:)((void *)qword_1EDCF2A70);
    swift_release();
  }
}

