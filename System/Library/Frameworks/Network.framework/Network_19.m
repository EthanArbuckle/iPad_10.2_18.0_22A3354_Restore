uint64_t __nw_http_connection_metadata_increment_outbound_message_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a2 + 168) + 1;
  v4 = v3 << 31 >> 31;
  *(_DWORD *)(a2 + 168) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(unsigned int *)(a2 + 168);
        v8 = 136446978;
        v9 = "nw_http_connection_metadata_increment_outbound_message_count_block_invoke";
        v10 = 2082;
        v11 = "http_metadata->outbound_message_count";
        v12 = 2048;
        v13 = 1;
        v14 = 2048;
        v15 = v7;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", (uint8_t *)&v8, 0x2Au);
      }

    }
    *(_DWORD *)(a2 + 168) = -1;
  }
  return 1;
}

void nw_http_connection_metadata_increment_inbound_message_count(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  BOOL is_equal_unsafe;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http_connection_metadata_increment_inbound_message_count";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http_connection_metadata_increment_inbound_message_count";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_http_connection_metadata_increment_inbound_message_count";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8)
          goto LABEL_7;
LABEL_42:
        free(v8);
        goto LABEL_7;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http_connection_metadata_increment_inbound_message_count";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http_connection_metadata_increment_inbound_message_count";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v3 = v1;
  v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v6 = *((_QWORD *)v3 + 4);
    if (v6)
      __nw_http_connection_metadata_increment_inbound_message_count_block_invoke((uint64_t)&__block_literal_global_68, v6);
    goto LABEL_7;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_http_connection_metadata_increment_inbound_message_count";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http_connection_metadata_increment_inbound_message_count";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v21)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http_connection_metadata_increment_inbound_message_count";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http_connection_metadata_increment_inbound_message_count";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_http_connection_metadata_increment_inbound_message_count";
    v25 = 2082;
    v26 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_connection_metadata_increment_inbound_message_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a2 + 172) + 1;
  v4 = v3 << 31 >> 31;
  *(_DWORD *)(a2 + 172) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(unsigned int *)(a2 + 172);
        v8 = 136446978;
        v9 = "nw_http_connection_metadata_increment_inbound_message_count_block_invoke";
        v10 = 2082;
        v11 = "http_metadata->inbound_message_count";
        v12 = 2048;
        v13 = 1;
        v14 = 2048;
        v15 = v7;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", (uint8_t *)&v8, 0x2Au);
      }

    }
    *(_DWORD *)(a2 + 172) = -1;
  }
  return 1;
}

uint64_t __nw_http_connection_metadata_get_message_counts_block_invoke(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(a1 + 32);
  if (v2)
    *v2 = *(_DWORD *)(a2 + 168);
  v3 = *(_DWORD **)(a1 + 40);
  if (v3)
    *v3 = *(_DWORD *)(a2 + 172);
  return 1;
}

BOOL __nw_http_connection_metadata_copy_cached_token_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t length;
  void *v6;
  _BYTE *v7;
  _BOOL8 result;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;

  if ((*(_BYTE *)(a2 + 196) & 4) != 0)
  {
    v7 = *(_BYTE **)(a1 + 40);
    if (v7)
      *v7 = 1;
    return 1;
  }
  v4 = *(void **)(a2 + 88);
  if (!v4)
    return 1;
  length = xpc_data_get_length(v4);
  if (!length)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    v10 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v10);
    if (result)
      goto LABEL_13;
    free(v10);
  }
  v6 = malloc_type_malloc(length, 0xF2B69DE5uLL);
  if (v6)
  {
LABEL_5:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
    **(_QWORD **)(a1 + 48) = xpc_data_get_bytes(*(xpc_object_t *)(a2 + 88), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0, length);
    return 1;
  }
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  v12 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_5;
  }
LABEL_13:
  __break(1u);
  return result;
}

void nw_http_connection_metadata_set_cached_token(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  id v7;
  BOOL is_equal_unsafe;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  os_log_type_t v31;
  _QWORD v32[6];
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v7 = *((id *)v5 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v36 = "nw_protocol_metadata_copy_definition";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v11, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_protocol_metadata_copy_definition";
          v37 = 2082;
          v38 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v12, v29, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v11)
    free(v11);
  v7 = 0;
LABEL_3:

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_http_connection_metadata_set_cached_token";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v15, &type, &v33))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http_connection_metadata_set_cached_token";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (v33)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v16, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_http_connection_metadata_set_cached_token";
          v37 = 2082;
          v38 = v23;
          _os_log_impl(&dword_182FBE000, v16, v24, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
LABEL_62:
        if (!v15)
          goto LABEL_9;
LABEL_63:
        free(v15);
        goto LABEL_9;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http_connection_metadata_set_cached_token";
        _os_log_impl(&dword_182FBE000, v16, v24, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http_connection_metadata_set_cached_token";
        _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = __nw_http_connection_metadata_set_cached_token_block_invoke;
  v32[3] = &__block_descriptor_48_e9_B16__0_v8l;
  v32[4] = a2;
  v32[5] = a3;
  if (v6)
  {
    v9 = v6[4];
    if (v9)
      __nw_http_connection_metadata_set_cached_token_block_invoke((uint64_t)v32, v9);
    goto LABEL_9;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v36 = "nw_protocol_metadata_access_handle";
  v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (!__nwlog_fault(v15, &type, &v33))
    goto LABEL_62;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null metadata", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v33)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v31 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v16, v31, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v16 = objc_claimAutoreleasedReturnValue();
  v27 = type;
  v28 = os_log_type_enabled(v16, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v36 = "nw_protocol_metadata_access_handle";
    v37 = 2082;
    v38 = v26;
    _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v15)
    goto LABEL_63;
LABEL_9:

}

uint64_t __nw_http_connection_metadata_set_cached_token_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  xpc_object_t v6;
  void *v7;

  *(_BYTE *)(a2 + 196) &= ~4u;
  v4 = *(const void **)(a1 + 32);
  if (v4 && (v5 = *(_QWORD *)(a1 + 40)) != 0)
  {
    v6 = xpc_data_create(v4, v5);
    v7 = *(void **)(a2 + 88);
    *(_QWORD *)(a2 + 88) = v6;
  }
  else
  {
    v7 = *(void **)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
  }

  return 1;
}

void nw_http_connection_metadata_mark_cached_token_failed(void *a1)
{
  id v1;
  _QWORD *v2;
  id v3;
  BOOL is_equal_unsafe;
  uint64_t v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((id *)v1 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v32 = "nw_protocol_metadata_copy_definition";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (__nwlog_fault(v8, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_protocol_metadata_copy_definition";
          v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v9, v26, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v8)
    free(v8);
  v3 = 0;
LABEL_3:

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v3, nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_http_connection_metadata_mark_cached_token_failed";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v12, &type, &v29))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_connection_metadata_mark_cached_token_failed";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (v29)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v13, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_http_connection_metadata_mark_cached_token_failed";
          v33 = 2082;
          v34 = v20;
          _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
LABEL_62:
        if (!v12)
          goto LABEL_9;
LABEL_63:
        free(v12);
        goto LABEL_9;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_connection_metadata_mark_cached_token_failed";
        _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_connection_metadata_mark_cached_token_failed";
        _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (v2)
  {
    v5 = v2[4];
    if (v5)
    {
      v6 = *(void **)(v5 + 88);
      *(_QWORD *)(v5 + 88) = 0;

      *(_BYTE *)(v5 + 196) |= 4u;
    }
    goto LABEL_9;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v32 = "nw_protocol_metadata_access_handle";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v12, &type, &v29))
    goto LABEL_62;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v32 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null metadata", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v29)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v28 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v32 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  v23 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v24 = type;
  v25 = os_log_type_enabled(v13, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      v32 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    v32 = "nw_protocol_metadata_access_handle";
    v33 = 2082;
    v34 = v23;
    _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v23);
  if (v12)
    goto LABEL_63;
LABEL_9:

}

uint64_t nw_http_connection_metadata_get_next_connect_ip_request_id(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t *isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_connection_metadata_get_next_connect_ip_request_id_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t *)v2[4].isa;
      if (isa)
      {
        __nw_http_connection_metadata_get_next_connect_ip_request_id_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_next_connect_ip_request_id";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_connection_metadata_get_next_connect_ip_request_id_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if ((unint64_t)(*a2 + 1) <= 0x3FFFFFFFFFFFFFFELL)
    v2 = *a2 + 1;
  else
    v2 = 1;
  *a2 = v2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v2;
  return 1;
}

uint64_t __nw_http_connection_metadata_set_path_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *v4;

  v3 = nw_path_copy_without_parameters(*(void **)(a1 + 32));
  v4 = *(void **)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v3;

  return 1;
}

id nw_http_connection_metadata_get_path(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL is_equal;
  uint64_t isa;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint8_t v30[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v27 = __Block_byref_object_copy__4;
    v28 = __Block_byref_object_dispose__5;
    v29 = 0;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_path_block_invoke;
    v23[3] = &unk_1E14A9D68;
    v23[4] = buf;
    if (v1)
    {
      isa = (uint64_t)v1[4].isa;
      if (isa)
        __nw_http_connection_metadata_get_path_block_invoke((uint64_t)v23, isa);
LABEL_7:
      v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_8;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v30 = 136446210;
    v31 = "nw_protocol_metadata_access_handle";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v30 = 136446210;
          v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", v30, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)v30 = 136446466;
            v31 = "nw_protocol_metadata_access_handle";
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v30, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)v30 = 136446210;
          v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, no backtrace", v30, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v30 = 136446210;
          v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v30, 0xCu);
        }
      }

    }
LABEL_44:
    if (v12)
      free(v12);
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_path";
  v8 = (char *)_os_log_send_and_compose_impl();

  v30[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v30, &type))
  {
    if (v30[0] == 17)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_path";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = v30[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v30[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_path";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_path";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_38:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_path_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 96));
  return 1;
}

uint64_t __nw_http_connection_metadata_set_establishment_report_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 104), *(id *)(a1 + 32));
  return 1;
}

id nw_http_connection_metadata_get_establishment_report(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL is_equal;
  uint64_t isa;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint8_t v30[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v27 = __Block_byref_object_copy__4;
    v28 = __Block_byref_object_dispose__5;
    v29 = 0;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_establishment_report_block_invoke;
    v23[3] = &unk_1E14A9D68;
    v23[4] = buf;
    if (v1)
    {
      isa = (uint64_t)v1[4].isa;
      if (isa)
        __nw_http_connection_metadata_get_establishment_report_block_invoke((uint64_t)v23, isa);
LABEL_7:
      v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_8;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v30 = 136446210;
    v31 = "nw_protocol_metadata_access_handle";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v30 = 136446210;
          v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", v30, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)v30 = 136446466;
            v31 = "nw_protocol_metadata_access_handle";
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v30, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)v30 = 136446210;
          v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, no backtrace", v30, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v30 = 136446210;
          v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v30, 0xCu);
        }
      }

    }
LABEL_44:
    if (v12)
      free(v12);
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
  v8 = (char *)_os_log_send_and_compose_impl();

  v30[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v30, &type))
  {
    if (v30[0] == 17)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = v30[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v30[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_38:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_establishment_report_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 104));
  return 1;
}

void nw_http_connection_metadata_set_sec_metadata(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_connection_metadata_set_sec_metadata";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_sec_metadata";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_connection_metadata_set_sec_metadata";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_sec_metadata";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_sec_metadata";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_set_sec_metadata_block_invoke;
    v24[3] = &unk_1E14A9F20;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_connection_metadata_set_sec_metadata_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_connection_metadata_set_sec_metadata";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_sec_metadata";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_sec_metadata";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_sec_metadata";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_connection_metadata_set_sec_metadata";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_connection_metadata_set_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 112), *(id *)(a1 + 32));
  return 1;
}

id nw_http_connection_metadata_get_sec_metadata(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL is_equal;
  uint64_t isa;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint8_t v30[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v27 = __Block_byref_object_copy__4;
    v28 = __Block_byref_object_dispose__5;
    v29 = 0;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_sec_metadata_block_invoke;
    v23[3] = &unk_1E14A9D68;
    v23[4] = buf;
    if (v1)
    {
      isa = (uint64_t)v1[4].isa;
      if (isa)
        __nw_http_connection_metadata_get_sec_metadata_block_invoke((uint64_t)v23, isa);
LABEL_7:
      v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_8;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v30 = 136446210;
    v31 = "nw_protocol_metadata_access_handle";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v30 = 136446210;
          v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", v30, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)v30 = 136446466;
            v31 = "nw_protocol_metadata_access_handle";
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v30, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)v30 = 136446210;
          v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, no backtrace", v30, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v30 = 136446210;
          v31 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v30, 0xCu);
        }
      }

    }
LABEL_44:
    if (v12)
      free(v12);
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
  v8 = (char *)_os_log_send_and_compose_impl();

  v30[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v30, &type))
  {
    if (v30[0] == 17)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = v30[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v30[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_38:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 112));
  return 1;
}

void nw_http_connection_metadata_set_privacy_stance(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  int v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_connection_metadata_set_privacy_stance";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_privacy_stance";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_connection_metadata_set_privacy_stance";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_privacy_stance";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_privacy_stance";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_set_privacy_stance_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v24 = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_connection_metadata_set_privacy_stance_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_connection_metadata_set_privacy_stance";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_privacy_stance";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v25)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_privacy_stance";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_privacy_stance";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_connection_metadata_set_privacy_stance";
    v29 = 2082;
    v30 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_connection_metadata_set_privacy_stance_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 164) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_connection_metadata_get_privacy_stance(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  _BYTE buf[24];
  int v27;
  uint8_t v28[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v27 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_privacy_stance_block_invoke;
    v23[3] = &unk_1E14A9D68;
    v23[4] = buf;
    if (v1)
    {
      isa = (uint64_t)v1[4].isa;
      if (isa)
        __nw_http_connection_metadata_get_privacy_stance_block_invoke((uint64_t)v23, isa);
LABEL_7:
      v5 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_8;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v28 = 136446210;
    v29 = "nw_protocol_metadata_access_handle";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v28 = 136446210;
          v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", v28, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)v28 = 136446466;
            v29 = "nw_protocol_metadata_access_handle";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v28, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)v28 = 136446210;
          v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, no backtrace", v28, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v28 = 136446210;
          v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v28, 0xCu);
        }
      }

    }
LABEL_44:
    if (v12)
      free(v12);
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
  v8 = (char *)_os_log_send_and_compose_impl();

  v28[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v28, &type))
  {
    if (v28[0] == 17)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = v28[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v28[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_38:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_privacy_stance_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 164);
  return 1;
}

uint64_t __nw_http_connection_metadata_is_multipath_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 196) & 1;
  return 1;
}

uint64_t __nw_http_connection_metadata_is_unlisted_tracker_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(_BYTE *)(a2 + 196) & 2) != 0;
  return 1;
}

void nw_http_connection_metadata_set_uuid(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_connection_metadata_set_uuid";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_connection_metadata_set_uuid";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_connection_metadata_set_uuid";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_connection_metadata_set_uuid";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_connection_metadata_set_uuid";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_set_uuid_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_connection_metadata_set_uuid_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_connection_metadata_set_uuid";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_connection_metadata_set_uuid";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_connection_metadata_set_uuid";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_connection_metadata_set_uuid";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_connection_metadata_set_uuid";
    v28 = 2082;
    v29 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_connection_metadata_set_uuid_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 180) = *(_OWORD *)*(_QWORD *)(a1 + 32);
  return 1;
}

void nw_http_connection_metadata_get_uuid(void *a1, uint64_t a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  BOOL is_equal_unsafe;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  _QWORD v30[5];
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((id *)v3 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_protocol_metadata_copy_definition";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v9, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_protocol_metadata_copy_definition";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v27, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v9)
    free(v9);
  v5 = 0;
LABEL_3:

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_http_connection_metadata_get_uuid";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_http_connection_metadata_get_uuid";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (v31)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_http_connection_metadata_get_uuid";
          v35 = 2082;
          v36 = v21;
          _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
LABEL_62:
        if (!v13)
          goto LABEL_9;
LABEL_63:
        free(v13);
        goto LABEL_9;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_http_connection_metadata_get_uuid";
        _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_http_connection_metadata_get_uuid";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __nw_http_connection_metadata_get_uuid_block_invoke;
  v30[3] = &__block_descriptor_40_e9_B16__0_v8l;
  v30[4] = a2;
  if (v4)
  {
    v7 = v4[4];
    if (v7)
      __nw_http_connection_metadata_get_uuid_block_invoke((uint64_t)v30, v7);
    goto LABEL_9;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_protocol_metadata_access_handle";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (!__nwlog_fault(v13, &type, &v31))
    goto LABEL_62;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null metadata", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v31)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v29 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  v24 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  v25 = type;
  v26 = os_log_type_enabled(v14, type);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    v34 = "nw_protocol_metadata_access_handle";
    v35 = 2082;
    v36 = v24;
    _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v24);
  if (v13)
    goto LABEL_63;
LABEL_9:

}

uint64_t __nw_http_connection_metadata_get_uuid_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)*(_QWORD *)(a1 + 32) = *(_OWORD *)(a2 + 180);
  return 1;
}

void nw_http_connection_metadata_received_certificate(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_connection_metadata_received_certificate";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_received_certificate";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_connection_metadata_received_certificate";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_received_certificate";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_received_certificate";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_received_certificate_block_invoke;
    v24[3] = &unk_1E14A9F20;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_connection_metadata_received_certificate_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_connection_metadata_received_certificate";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_received_certificate";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_received_certificate";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_received_certificate";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_connection_metadata_received_certificate";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_connection_metadata_received_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    if (v4)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(v3, v4, *(_QWORD *)(a1 + 32));
  }
  return 1;
}

void nw_http_connection_metadata_send_certificate(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_connection_metadata_send_certificate";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_send_certificate";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_connection_metadata_send_certificate";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_send_certificate";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_send_certificate";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_send_certificate_block_invoke;
    v24[3] = &unk_1E14A9F20;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_connection_metadata_send_certificate_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_connection_metadata_send_certificate";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_send_certificate";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_send_certificate";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_send_certificate";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_connection_metadata_send_certificate";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_connection_metadata_send_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(v3, v4, *(_QWORD *)(a1 + 32));
  }
  return 1;
}

uint64_t __nw_http_connection_metadata_set_send_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  void *v4;
  void *v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a2 + 24))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v7 = 136446210;
      v8 = "nw_http_connection_metadata_set_send_certificate_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of nw_http_connection_metadata_set_send_certificate", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    v4 = _Block_copy(*(const void **)(a1 + 32));
    v5 = *(void **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v4;

  }
  return 1;
}

void nw_http_connection_metadata_set_receive_certificate(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  BOOL is_equal_unsafe;
  id v10;
  uint64_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD v26[6];
  char v27;
  os_log_type_t v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http_connection_metadata_set_receive_certificate";
    v13 = (char *)_os_log_send_and_compose_impl();

    v28 = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v13, &v28, &v27))
      goto LABEL_42;
    if (v28 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = v28;
      if (os_log_type_enabled(v14, v28))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_connection_metadata_set_receive_certificate";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = v28;
      v20 = os_log_type_enabled(v14, v28);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_http_connection_metadata_set_receive_certificate";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v13)
          goto LABEL_8;
LABEL_43:
        free(v13);
        goto LABEL_8;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_connection_metadata_set_receive_certificate";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v24 = v28;
      if (os_log_type_enabled(v14, v28))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_connection_metadata_set_receive_certificate";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v7 = v5;
  v8 = *((id *)v7 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v8, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __nw_http_connection_metadata_set_receive_certificate_block_invoke;
    v26[3] = &unk_1E14AA3E0;
    v26[5] = a2;
    v10 = v6;
    v26[4] = v10;
    v11 = *((_QWORD *)v7 + 4);
    if (v11)
      __nw_http_connection_metadata_set_receive_certificate_block_invoke((uint64_t)v26, v11);

    goto LABEL_8;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_http_connection_metadata_set_receive_certificate";
  v13 = (char *)_os_log_send_and_compose_impl();

  v28 = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (!__nwlog_fault(v13, &v28, &v27))
    goto LABEL_42;
  if (v28 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v17 = v28;
    if (os_log_type_enabled(v14, v28))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_connection_metadata_set_receive_certificate";
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v27)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v25 = v28;
    if (os_log_type_enabled(v14, v28))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_connection_metadata_set_receive_certificate";
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v21 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  v22 = v28;
  v23 = os_log_type_enabled(v14, v28);
  if (!v21)
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_connection_metadata_set_receive_certificate";
      _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v23)
  {
    *(_DWORD *)buf = 136446466;
    v30 = "nw_http_connection_metadata_set_receive_certificate";
    v31 = 2082;
    v32 = v21;
    _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v21);
  if (v13)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_connection_metadata_set_receive_certificate_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  void *v4;
  void *v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a2 + 40))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v7 = 136446210;
      v8 = "nw_http_connection_metadata_set_receive_certificate_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of nw_http_connection_metadata_set_receive_certificate", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    v4 = _Block_copy(*(const void **)(a1 + 32));
    v5 = *(void **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v4;

  }
  return 1;
}

uint64_t __nw_http_connection_metadata_set_certificate_added_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  void *v4;
  void *v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a2 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v7 = 136446210;
      v8 = "nw_http_connection_metadata_set_certificate_added_handler_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of nw_http_connection_metadata_set_certificate_added_handler", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    v4 = _Block_copy(*(const void **)(a1 + 32));
    v5 = *(void **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v4;

  }
  return 1;
}

void nw_http_connection_metadata_store_secondary_certificate(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  _QWORD *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_connection_metadata_store_secondary_certificate";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_store_secondary_certificate";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_connection_metadata_store_secondary_certificate";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_store_secondary_certificate";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_store_secondary_certificate";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_store_secondary_certificate_block_invoke;
    v24[3] = &unk_1E14A9F20;
    v8 = v4;
    v24[4] = v8;
    v9 = v5[4];
    if (v9)
      __nw_http_connection_metadata_store_secondary_certificate_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_connection_metadata_store_secondary_certificate";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_store_secondary_certificate";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_store_secondary_certificate";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_store_secondary_certificate";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_connection_metadata_store_secondary_certificate";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_connection_metadata_store_secondary_certificate_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  uint64_t v7;

  v4 = a2[8];
  if (!v4)
  {
    v5 = nw_array_create();
    v6 = (void *)a2[8];
    a2[8] = v5;

    v4 = a2[8];
  }
  nw_array_append(v4, *(void **)(a1 + 32));
  if (a2[6])
  {
    v7 = a2[7];
    if (v7)
      (*(void (**)(void))(v7 + 16))();
  }
  return 1;
}

uint64_t nw_http_connection_metadata_get_secondary_certificate_count(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v16[5];
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
LABEL_27:
    v6 = 0;
    goto LABEL_28;
  }
  v3 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_secondary_certificate_count";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_25:
    if (v8)
      free(v8);
    goto LABEL_27;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v20 = 0;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __nw_http_connection_metadata_get_secondary_certificate_count_block_invoke;
  v16[3] = &unk_1E14A9D68;
  v16[4] = buf;
  isa = (uint64_t)v2[4].isa;
  if (isa)
  {
    __nw_http_connection_metadata_get_secondary_certificate_count_block_invoke((uint64_t)v16, isa);
    v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
  }
  else
  {
    v6 = 0;
  }
  _Block_object_dispose(buf, 8);
LABEL_28:

  return v6;
}

uint64_t __nw_http_connection_metadata_get_secondary_certificate_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 64);
  if (v2)
    v2 = (uint64_t)(*(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 16)) >> 3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v2;
  return 1;
}

void nw_http_connection_metadata_enumerate_secondary_certificates(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke;
    v24[3] = &unk_1E14A9DD0;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_connection_metadata_enumerate_secondary_certificates";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  _QWORD v4[4];
  id v5;

  v2 = *(unsigned __int8 **)(a2 + 64);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke_2;
  v4[3] = &unk_1E14AC278;
  v5 = *(id *)(a1 + 32);
  nw_array_apply(v2, (uint64_t)v4);

  return 1;
}

uint64_t __nw_http_connection_metadata_enumerate_secondary_certificates_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void nw_http_connection_metadata_set_shared_connection_pool_metadata(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_connection_metadata_set_shared_connection_pool_metadata_block_invoke;
    v24[3] = &unk_1E14A9F20;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_connection_metadata_set_shared_connection_pool_metadata_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_connection_metadata_set_shared_connection_pool_metadata";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_connection_metadata_set_shared_connection_pool_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 72), *(id *)(a1 + 32));
  return 1;
}

CFTypeRef nw_http_connection_metadata_find_or_create_pat_timestamps_array(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL is_equal;
  uint64_t isa;
  CFTypeRef v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v27;
  uint8_t v28[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v27 = 0;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_find_or_create_pat_timestamps_array_block_invoke;
    v23[3] = &unk_1E14A9D68;
    v23[4] = buf;
    if (v1)
    {
      isa = (uint64_t)v1[4].isa;
      if (isa)
        __nw_http_connection_metadata_find_or_create_pat_timestamps_array_block_invoke((uint64_t)v23, isa);
LABEL_7:
      v5 = CFRetain(*(CFTypeRef *)(*(_QWORD *)&buf[8] + 24));
      _Block_object_dispose(buf, 8);
      goto LABEL_8;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v28 = 136446210;
    v29 = "nw_protocol_metadata_access_handle";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v28 = 136446210;
          v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", v28, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)v28 = 136446466;
            v29 = "nw_protocol_metadata_access_handle";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v28, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)v28 = 136446210;
          v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, no backtrace", v28, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v28 = 136446210;
          v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v28, 0xCu);
        }
      }

    }
LABEL_44:
    if (v12)
      free(v12);
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
  v8 = (char *)_os_log_send_and_compose_impl();

  v28[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v28, &type))
  {
    if (v28[0] == 17)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = v28[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v28[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_38:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_8:

  return v5;
}

void sub_183A6CC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_connection_metadata_find_or_create_pat_timestamps_array_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 72))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = nw_http_connection_metadata_find_or_create_pat_timestamps_array();
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 80);
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    }
  }
  return 1;
}

uint64_t nw_http_connection_metadata_get_last_application_stream_id(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v27;
  uint8_t v28[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = nw_protocol_metadata_copy_definition(v1);
  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

  if (is_equal)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v27 = -1;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_get_last_application_stream_id_block_invoke;
    v23[3] = &unk_1E14A9D68;
    v23[4] = buf;
    if (v1)
    {
      isa = (uint64_t)v1[4].isa;
      if (isa)
        __nw_http_connection_metadata_get_last_application_stream_id_block_invoke((uint64_t)v23, isa);
LABEL_7:
      v5 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_8;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v28 = 136446210;
    v29 = "nw_protocol_metadata_access_handle";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v28 = 136446210;
          v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", v28, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)v28 = 136446466;
            v29 = "nw_protocol_metadata_access_handle";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", v28, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v20)
        {
          *(_DWORD *)v28 = 136446210;
          v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null metadata, no backtrace", v28, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)v28 = 136446210;
          v29 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null metadata, backtrace limit exceeded", v28, 0xCu);
        }
      }

    }
LABEL_44:
    if (v12)
      free(v12);
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
  v8 = (char *)_os_log_send_and_compose_impl();

  v28[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v28, &type))
  {
    if (v28[0] == 17)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }
    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = v28[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v28[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_38:
  if (v8)
    free(v8);
  v5 = -1;
LABEL_8:

  return v5;
}

uint64_t __nw_http_connection_metadata_get_last_application_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 8);
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_create_options()
{
  if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);
  return nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
}

uint64_t tcp_connection_fallback_watcher_create(int a1, dispatch_queue_t queue, void *a3)
{
  uint32_t v5;
  uint32_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  uint64_t v11;
  char *v12;
  _BOOL4 v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  char v24;
  _QWORD handler[5];
  int out_token;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint32_t v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!queue)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "tcp_connection_fallback_watcher_create";
    v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(out_token) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, &out_token, &type))
      goto LABEL_22;
    if (out_token == 17)
    {
      v18 = __nwlog_obj();
      v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v29 = "tcp_connection_fallback_watcher_create";
      v10 = "%{public}s called with null queue";
      goto LABEL_52;
    }
    if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = out_token;
      v21 = os_log_type_enabled(v18, (os_log_type_t)out_token);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "tcp_connection_fallback_watcher_create";
          v30 = 2082;
          v31 = backtrace_string;
          v22 = "%{public}s called with null queue, dumping backtrace:%{public}s";
LABEL_42:
          _os_log_impl(&dword_182FBE000, v18, v19, v22, buf, 0x16u);
        }
LABEL_43:
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v21)
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v29 = "tcp_connection_fallback_watcher_create";
      v10 = "%{public}s called with null queue, no backtrace";
    }
    else
    {
      v18 = __nwlog_obj();
      v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v29 = "tcp_connection_fallback_watcher_create";
      v10 = "%{public}s called with null queue, backtrace limit exceeded";
    }
LABEL_52:
    v14 = v18;
    v15 = v19;
    v16 = 12;
    goto LABEL_21;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "tcp_connection_fallback_watcher_create";
    v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(out_token) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, &out_token, &type))
      goto LABEL_22;
    if (out_token == 17)
    {
      v18 = __nwlog_obj();
      v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v29 = "tcp_connection_fallback_watcher_create";
      v10 = "%{public}s called with null block";
      goto LABEL_52;
    }
    if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = out_token;
      v23 = os_log_type_enabled(v18, (os_log_type_t)out_token);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "tcp_connection_fallback_watcher_create";
          v30 = 2082;
          v31 = backtrace_string;
          v22 = "%{public}s called with null block, dumping backtrace:%{public}s";
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      if (!v23)
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v29 = "tcp_connection_fallback_watcher_create";
      v10 = "%{public}s called with null block, no backtrace";
    }
    else
    {
      v18 = __nwlog_obj();
      v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v29 = "tcp_connection_fallback_watcher_create";
      v10 = "%{public}s called with null block, backtrace limit exceeded";
    }
    goto LABEL_52;
  }
  out_token = -1;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = __tcp_connection_fallback_watcher_create_block_invoke;
  handler[3] = &unk_1E14AA498;
  handler[4] = a3;
  v5 = notify_register_dispatch("com.apple.networkextension.fallback_in_use", &out_token, queue, handler);
  if (v5)
  {
    v6 = v5;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    v29 = "tcp_connection_fallback_watcher_create";
    v30 = 2082;
    v31 = "com.apple.networkextension.fallback_in_use";
    v32 = 1024;
    v33 = v6;
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v7, &type, &v24))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446722;
      v29 = "tcp_connection_fallback_watcher_create";
      v30 = 2082;
      v31 = "com.apple.networkextension.fallback_in_use";
      v32 = 1024;
      v33 = v6;
      v10 = "%{public}s notify_register_dispatch(%{public}s) [status %u] failed";
      goto LABEL_20;
    }
    if (!v24)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446722;
      v29 = "tcp_connection_fallback_watcher_create";
      v30 = 2082;
      v31 = "com.apple.networkextension.fallback_in_use";
      v32 = 1024;
      v33 = v6;
      v10 = "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, backtrace limit exceeded";
      goto LABEL_20;
    }
    v12 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    v9 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446978;
        v29 = "tcp_connection_fallback_watcher_create";
        v30 = 2082;
        v31 = "com.apple.networkextension.fallback_in_use";
        v32 = 1024;
        v33 = v6;
        v34 = 2082;
        v35 = v12;
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, dumping backtrace:%{public}s", buf, 0x26u);
      }
      free(v12);
      goto LABEL_22;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      v29 = "tcp_connection_fallback_watcher_create";
      v30 = 2082;
      v31 = "com.apple.networkextension.fallback_in_use";
      v32 = 1024;
      v33 = v6;
      v10 = "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, no backtrace";
LABEL_20:
      v14 = v8;
      v15 = v9;
      v16 = 28;
LABEL_21:
      _os_log_impl(&dword_182FBE000, v14, v15, v10, buf, v16);
    }
LABEL_22:
    if (v7)
      free(v7);
    return 0;
  }
  v11 = out_token;
  if (out_token == -1)
    return 0;
  if (tcp_fallback_watcher_fallback_inuse(out_token))
    dispatch_async(queue, a3);
  return v11;
}

uint64_t __tcp_connection_fallback_watcher_create_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

BOOL tcp_fallback_watcher_fallback_inuse(uint64_t a1)
{
  uint32_t state;
  uint32_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *v8;
  _BOOL4 v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  uint64_t state64;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  _WORD v23[17];

  *(_QWORD *)&v23[13] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "tcp_fallback_watcher_fallback_inuse";
    v3 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(state64) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v3, &state64, &type))
      goto LABEL_19;
    if (state64 == 17)
    {
      v13 = __nwlog_obj();
      v14 = state64;
      if (!os_log_type_enabled(v13, (os_log_type_t)state64))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v21 = "tcp_fallback_watcher_fallback_inuse";
      v6 = "%{public}s called with null watcher";
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = state64;
      v16 = os_log_type_enabled(v13, (os_log_type_t)state64);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "tcp_fallback_watcher_fallback_inuse";
          v22 = 2082;
          *(_QWORD *)v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null watcher, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_19;
      }
      if (!v16)
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v21 = "tcp_fallback_watcher_fallback_inuse";
      v6 = "%{public}s called with null watcher, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = state64;
      if (!os_log_type_enabled(v13, (os_log_type_t)state64))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v21 = "tcp_fallback_watcher_fallback_inuse";
      v6 = "%{public}s called with null watcher, backtrace limit exceeded";
    }
    v10 = v13;
    v11 = v14;
    v12 = 12;
    goto LABEL_18;
  }
  state64 = 0;
  state = notify_get_state(a1, &state64);
  if (!state)
    return state64 != 0;
  v2 = state;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v21 = "tcp_fallback_watcher_fallback_inuse";
  v22 = 1024;
  *(_DWORD *)v23 = v2;
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v3, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v21 = "tcp_fallback_watcher_fallback_inuse";
        v22 = 1024;
        *(_DWORD *)v23 = v2;
        v6 = "%{public}s notify_get_state [%u] failed";
LABEL_17:
        v10 = v4;
        v11 = v5;
        v12 = 18;
LABEL_18:
        _os_log_impl(&dword_182FBE000, v10, v11, v6, buf, v12);
      }
    }
    else if (v17)
    {
      v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v8)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446722;
          v21 = "tcp_fallback_watcher_fallback_inuse";
          v22 = 1024;
          *(_DWORD *)v23 = v2;
          v23[2] = 2082;
          *(_QWORD *)&v23[3] = v8;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s notify_get_state [%u] failed, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v8);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "tcp_fallback_watcher_fallback_inuse";
        v22 = 1024;
        *(_DWORD *)v23 = v2;
        v6 = "%{public}s notify_get_state [%u] failed, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v21 = "tcp_fallback_watcher_fallback_inuse";
        v22 = 1024;
        *(_DWORD *)v23 = v2;
        v6 = "%{public}s notify_get_state [%u] failed, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_19:
  if (v3)
    free(v3);
  return 0;
}

void tcp_connection_fallback_watcher_destroy(uint64_t a1)
{
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  const char *v4;
  char *backtrace_string;
  _BOOL4 v6;
  char v7;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    notify_cancel(a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v10 = "tcp_connection_fallback_watcher_destroy";
  v1 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v7 = 0;
  if (__nwlog_fault(v1, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v2 = __nwlog_obj();
      v3 = type;
      if (!os_log_type_enabled(v2, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v10 = "tcp_connection_fallback_watcher_destroy";
      v4 = "%{public}s called with null watcher";
      goto LABEL_16;
    }
    if (!v7)
    {
      v2 = __nwlog_obj();
      v3 = type;
      if (!os_log_type_enabled(v2, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v10 = "tcp_connection_fallback_watcher_destroy";
      v4 = "%{public}s called with null watcher, backtrace limit exceeded";
      goto LABEL_16;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v2 = __nwlog_obj();
    v3 = type;
    v6 = os_log_type_enabled(v2, type);
    if (backtrace_string)
    {
      if (v6)
      {
        *(_DWORD *)buf = 136446466;
        v10 = "tcp_connection_fallback_watcher_destroy";
        v11 = 2082;
        v12 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v2, v3, "%{public}s called with null watcher, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_17;
    }
    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      v10 = "tcp_connection_fallback_watcher_destroy";
      v4 = "%{public}s called with null watcher, no backtrace";
LABEL_16:
      _os_log_impl(&dword_182FBE000, v2, v3, v4, buf, 0xCu);
    }
  }
LABEL_17:
  if (v1)
    free(v1);
}

void nw_string::_destroy(nw_string *this)
{
  void (*v2)(_QWORD);

  if (this)
  {
    v2 = (void (*)(_QWORD))*((_QWORD *)this + 8);
    if (v2)
    {
      *((_QWORD *)this + 8) = 0;
      v2(*((_QWORD *)this + 3));
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    if (*((char *)this + 63) < 0)
      operator delete(*((void **)this + 5));
    free(this);
  }
}

uint64_t *nw_string_create()
{
  unsigned __int8 v0;
  uint64_t **v1;
  uint64_t *v2;
  void *v3;
  unsigned __int8 v5;

    goto LABEL_2;
  v2 = &nw::object::_class(void)::instance;
  if ((v5 & 1) == 0)
    goto LABEL_11;
  while (1)
  {
    nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
    unk_1ECD84EA0 = 12;
    xmmword_1ECD84EA8 = 0u;
    unk_1ECD84EB8 = 0u;
    xmmword_1ECD84EC8 = 0u;
    xmmword_1ECD84EE8 = 0u;
    *(_OWORD *)&qword_1ECD84EF8 = 0u;
    qword_1ECD84F08 = (uint64_t)v2;
    unk_1ECD84F10 = 4096;
    qword_1ECD84F18 = 0;
    qword_1ECD84F20 = 0;
    qword_1ECD84F28 = (uint64_t)&qword_1ECD84F28;
    qword_1ECD84F30 = (uint64_t)&qword_1ECD84F28;
    qword_1ECD84F38 = 0;
    dword_1ECD84F40 = 0;
    xmmword_1ECD84ED8 = 0u;
    nw::object::class_def::setup(v2, (int64x2_t *)&xmmword_1ECD84ED8);
LABEL_2:
    v1 = nw::object::operator new();
    v2 = (uint64_t *)v1;
    if (v1)
    {
      *((_DWORD *)v1 + 3) = 0;
      *(_OWORD *)(v1 + 3) = 0u;
      *(_OWORD *)(v1 + 5) = 0u;
      v1[7] = 0;
      return v2;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    v3 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v3))
      break;
    __break(1u);
LABEL_11:
    {
      *v2 = (uint64_t)"object";
      v2[1] = 6;
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *((_OWORD *)v2 + 3) = 0u;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      v2[18] = (uint64_t)(v2 + 18);
      v2[19] = (uint64_t)(v2 + 18);
      v2[20] = 0;
      *((_DWORD *)v2 + 42) = 0;
    }
  }
  free(v3);
  return v2;
}

BOOL nw_string_create_with_string(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t **v3;
  uint64_t **v4;
  std::string *v5;
  const std::string::value_type *v6;
  uint64_t *v7;
  void *v8;
  _BOOL8 result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  nw::object *v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_string_create_with_string";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &type, &v19))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_string_create_with_string";
      v13 = "%{public}s called with null string";
      goto LABEL_26;
    }
    if (!v19)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_string_create_with_string";
      v13 = "%{public}s called with null string, backtrace limit exceeded";
      goto LABEL_26;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v17)
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_string_create_with_string";
      v13 = "%{public}s called with null string, no backtrace";
      goto LABEL_26;
    }
    if (!v17)
      goto LABEL_19;
    *(_DWORD *)buf = 136446466;
    v22 = "nw_string_create_with_string";
    v23 = 2082;
    v24 = backtrace_string;
    v16 = "%{public}s called with null string, dumping backtrace:%{public}s";
    goto LABEL_18;
  }
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      nw::object::_class(v18);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1ECD84EA0 = 12;
      xmmword_1ECD84EA8 = 0u;
      unk_1ECD84EB8 = 0u;
      xmmword_1ECD84EC8 = 0u;
      xmmword_1ECD84EE8 = 0u;
      *(_OWORD *)&qword_1ECD84EF8 = 0u;
      qword_1ECD84F08 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1ECD84F10 = 4096;
      qword_1ECD84F18 = 0;
      qword_1ECD84F20 = 0;
      qword_1ECD84F28 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F30 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F38 = 0;
      dword_1ECD84F40 = 0;
      xmmword_1ECD84ED8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_1ECD84ED8);
    }
  }
  v3 = nw::object::operator new();
  if (v3)
  {
    v4 = v3;
    *(_OWORD *)(v3 + 5) = 0u;
    v5 = (std::string *)(v3 + 5);
    HIDWORD(v5[-2].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v5[-1].__r_.__value_.__r.__words[1] = 0u;
    v5->__r_.__value_.__r.__words[2] = 0;
    v6 = *(const std::string::value_type **)(a1 + 24);
    if (v6)
    {
      std::string::__assign_external(v5, v6);
      LODWORD(v7) = *((char *)v4 + 63);
      if ((v7 & 0x80000000) != 0)
      {
        v5 = (std::string *)v4[5];
        v7 = v4[6];
        goto LABEL_21;
      }
      v5 = (std::string *)(v4 + 5);
    }
    else
    {
      LOBYTE(v7) = 0;
    }
    v7 = (uint64_t *)v7;
LABEL_21:
    v4[3] = (uint64_t *)v5;
    v4[4] = v7;
    return (BOOL)v4;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v22 = "operator()";
  v23 = 2080;
  v24 = "auto nw_string_create_with_string(nw_string_t)::(anonymous class)::operator()() const";
  v8 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_string_create_with_string";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &type, &v19))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_string_create_with_string";
        v13 = "%{public}s called with null self";
LABEL_26:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_string_create_with_string";
        v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_26;
      }
LABEL_27:
      if (v10)
        free(v10);
      return 0;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_string_create_with_string";
        v13 = "%{public}s called with null self, no backtrace";
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    if (!v15)
    {
LABEL_19:
      free(backtrace_string);
      goto LABEL_27;
    }
    *(_DWORD *)buf = 136446466;
    v22 = "nw_string_create_with_string";
    v23 = 2082;
    v24 = backtrace_string;
    v16 = "%{public}s called with null self, dumping backtrace:%{public}s";
LABEL_18:
    _os_log_impl(&dword_182FBE000, v11, v12, v16, buf, 0x16u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

BOOL nw_string_create_with_c_string(const std::string::value_type *a1)
{
  unsigned __int8 v2;
  uint64_t **v3;
  uint64_t **v4;
  std::string *v5;
  std::string *v6;
  uint64_t *v7;
  void *v8;
  _BOOL8 result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  nw::object *v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_string_create_with_c_string";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &type, &v19))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_string_create_with_c_string";
      v13 = "%{public}s called with null c_str";
      goto LABEL_23;
    }
    if (!v19)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_string_create_with_c_string";
      v13 = "%{public}s called with null c_str, backtrace limit exceeded";
      goto LABEL_23;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v17)
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_string_create_with_c_string";
      v13 = "%{public}s called with null c_str, no backtrace";
      goto LABEL_23;
    }
    if (!v17)
      goto LABEL_18;
    *(_DWORD *)buf = 136446466;
    v22 = "nw_string_create_with_c_string";
    v23 = 2082;
    v24 = backtrace_string;
    v16 = "%{public}s called with null c_str, dumping backtrace:%{public}s";
    goto LABEL_17;
  }
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      nw::object::_class(v18);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1ECD84EA0 = 12;
      xmmword_1ECD84EA8 = 0u;
      unk_1ECD84EB8 = 0u;
      xmmword_1ECD84EC8 = 0u;
      xmmword_1ECD84EE8 = 0u;
      *(_OWORD *)&qword_1ECD84EF8 = 0u;
      qword_1ECD84F08 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1ECD84F10 = 4096;
      qword_1ECD84F18 = 0;
      qword_1ECD84F20 = 0;
      qword_1ECD84F28 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F30 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F38 = 0;
      dword_1ECD84F40 = 0;
      xmmword_1ECD84ED8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_1ECD84ED8);
    }
  }
  v3 = nw::object::operator new();
  if (v3)
  {
    v4 = v3;
    *(_OWORD *)(v3 + 5) = 0u;
    v5 = (std::string *)(v3 + 5);
    HIDWORD(v5[-2].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v5[-1].__r_.__value_.__r.__words[1] = 0u;
    v5->__r_.__value_.__r.__words[2] = 0;
    v6 = std::string::__assign_external(v5, a1);
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = (std::string *)v4[5];
      v7 = v4[6];
    }
    else
    {
      v7 = (uint64_t *)HIBYTE(v6->__r_.__value_.__r.__words[2]);
    }
    v4[3] = (uint64_t *)v6;
    v4[4] = v7;
    return (BOOL)v4;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v22 = "operator()";
  v23 = 2080;
  v24 = "auto nw_string_create_with_c_string(const char *)::(anonymous class)::operator()() const";
  v8 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_string_create_with_c_string";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &type, &v19))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_string_create_with_c_string";
        v13 = "%{public}s called with null self";
LABEL_23:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_string_create_with_c_string";
        v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_23;
      }
LABEL_24:
      if (v10)
        free(v10);
      return 0;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_string_create_with_c_string";
        v13 = "%{public}s called with null self, no backtrace";
        goto LABEL_23;
      }
      goto LABEL_24;
    }
    if (!v15)
    {
LABEL_18:
      free(backtrace_string);
      goto LABEL_24;
    }
    *(_DWORD *)buf = 136446466;
    v22 = "nw_string_create_with_c_string";
    v23 = 2082;
    v24 = backtrace_string;
    v16 = "%{public}s called with null self, dumping backtrace:%{public}s";
LABEL_17:
    _os_log_impl(&dword_182FBE000, v11, v12, v16, buf, 0x16u);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

BOOL nw_string_create_with_c_string_no_copy(const char *a1, uint64_t *a2)
{
  unsigned __int8 v4;
  uint64_t **v5;
  uint64_t **v6;
  size_t v7;
  void *v8;
  _BOOL8 result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  nw::object *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_string_create_with_c_string_no_copy";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_string_create_with_c_string_no_copy";
      v13 = "%{public}s called with null c_str";
      goto LABEL_21;
    }
    if (!v20)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_string_create_with_c_string_no_copy";
      v13 = "%{public}s called with null c_str, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v17)
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_string_create_with_c_string_no_copy";
      v13 = "%{public}s called with null c_str, no backtrace";
      goto LABEL_21;
    }
    if (!v17)
      goto LABEL_16;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_string_create_with_c_string_no_copy";
    v24 = 2082;
    v25 = backtrace_string;
    v16 = "%{public}s called with null c_str, dumping backtrace:%{public}s";
    goto LABEL_15;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_string_create_with_c_string_no_copy";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_string_create_with_c_string_no_copy";
      v13 = "%{public}s called with null free_func";
      goto LABEL_21;
    }
    if (!v20)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_string_create_with_c_string_no_copy";
      v13 = "%{public}s called with null free_func, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v18 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_string_create_with_c_string_no_copy";
      v13 = "%{public}s called with null free_func, no backtrace";
      goto LABEL_21;
    }
    if (!v18)
      goto LABEL_16;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_string_create_with_c_string_no_copy";
    v24 = 2082;
    v25 = backtrace_string;
    v16 = "%{public}s called with null free_func, dumping backtrace:%{public}s";
    goto LABEL_15;
  }
  if ((v4 & 1) == 0)
  {
    if ((_DWORD)v19)
    {
      nw::object::_class(v19);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1ECD84EA0 = 12;
      xmmword_1ECD84EA8 = 0u;
      unk_1ECD84EB8 = 0u;
      xmmword_1ECD84EC8 = 0u;
      xmmword_1ECD84EE8 = 0u;
      *(_OWORD *)&qword_1ECD84EF8 = 0u;
      qword_1ECD84F08 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1ECD84F10 = 4096;
      qword_1ECD84F18 = 0;
      qword_1ECD84F20 = 0;
      qword_1ECD84F28 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F30 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F38 = 0;
      dword_1ECD84F40 = 0;
      xmmword_1ECD84ED8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_1ECD84ED8);
    }
  }
  v5 = nw::object::operator new();
  if (v5)
  {
    v6 = v5;
    *((_DWORD *)v5 + 3) = 0;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    v5[7] = 0;
    v7 = strlen(a1);
    v6[3] = (uint64_t *)a1;
    v6[4] = (uint64_t *)v7;
    v6[8] = a2;
    return (BOOL)v6;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v23 = "operator()";
  v24 = 2080;
  v25 = "auto nw_string_create_with_c_string_no_copy(char *, void (*)(char *))::(anonymous class)::operator()() const";
  v8 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_string_create_with_c_string_no_copy";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_string_create_with_c_string_no_copy";
        v13 = "%{public}s called with null self";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        goto LABEL_22;
      }
      goto LABEL_22;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_string_create_with_c_string_no_copy";
        v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_21;
      }
LABEL_22:
      if (v10)
        free(v10);
      return 0;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_string_create_with_c_string_no_copy";
        v13 = "%{public}s called with null self, no backtrace";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (!v15)
    {
LABEL_16:
      free(backtrace_string);
      goto LABEL_22;
    }
    *(_DWORD *)buf = 136446466;
    v23 = "nw_string_create_with_c_string_no_copy";
    v24 = 2082;
    v25 = backtrace_string;
    v16 = "%{public}s called with null self, dumping backtrace:%{public}s";
LABEL_15:
    _os_log_impl(&dword_182FBE000, v11, v12, v16, buf, 0x16u);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

BOOL nw_string_create_with_dispatch_data(NSObject *a1)
{
  unsigned __int8 v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  _BOOL8 result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  nw::object *v18;
  _QWORD applier[5];
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_string_create_with_dispatch_data";
    v10 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &v21, &v20))
      goto LABEL_24;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = v21;
      if (!os_log_type_enabled(v11, v21))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_string_create_with_dispatch_data";
      v13 = "%{public}s called with null data";
      goto LABEL_23;
    }
    if (!v20)
    {
      v11 = __nwlog_obj();
      v12 = v21;
      if (!os_log_type_enabled(v11, v21))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_string_create_with_dispatch_data";
      v13 = "%{public}s called with null data, backtrace limit exceeded";
      goto LABEL_23;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = v21;
    v17 = os_log_type_enabled(v11, v21);
    if (!backtrace_string)
    {
      if (!v17)
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_string_create_with_dispatch_data";
      v13 = "%{public}s called with null data, no backtrace";
      goto LABEL_23;
    }
    if (!v17)
      goto LABEL_18;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_string_create_with_dispatch_data";
    v24 = 2082;
    v25 = backtrace_string;
    v16 = "%{public}s called with null data, dumping backtrace:%{public}s";
    goto LABEL_17;
  }
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      nw::object::_class(v18);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1ECD84EA0 = 12;
      xmmword_1ECD84EA8 = 0u;
      unk_1ECD84EB8 = 0u;
      xmmword_1ECD84EC8 = 0u;
      xmmword_1ECD84EE8 = 0u;
      *(_OWORD *)&qword_1ECD84EF8 = 0u;
      qword_1ECD84F08 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1ECD84F10 = 4096;
      qword_1ECD84F18 = 0;
      qword_1ECD84F20 = 0;
      qword_1ECD84F28 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F30 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F38 = 0;
      dword_1ECD84F40 = 0;
      xmmword_1ECD84ED8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_1ECD84ED8);
    }
  }
  v3 = nw::object::operator new();
  if (v3)
  {
    v4 = v3;
    *((_DWORD *)v3 + 3) = 0;
    *(_OWORD *)(v3 + 3) = 0u;
    *(_OWORD *)(v3 + 5) = 0u;
    v5 = v3 + 5;
    v6 = MEMORY[0x1E0C809B0];
    v3[7] = 0;
    applier[0] = v6;
    applier[1] = 0x40000000;
    applier[2] = __nw_string_create_with_dispatch_data_block_invoke;
    applier[3] = &__block_descriptor_tmp_75726;
    applier[4] = v3;
    dispatch_data_apply(a1, applier);
    if (*((char *)v4 + 63) < 0)
    {
      v5 = (uint64_t **)v4[5];
      v7 = v4[6];
    }
    else
    {
      v7 = (uint64_t *)*((unsigned __int8 *)v4 + 63);
    }
    v4[3] = (uint64_t *)v5;
    v4[4] = v7;
    return (BOOL)v4;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v23 = "operator()";
  v24 = 2080;
  v25 = "auto nw_string_create_with_dispatch_data(dispatch_data_t)::(anonymous class)::operator()() const";
  v8 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_string_create_with_dispatch_data";
    v10 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &v21, &v20))
      goto LABEL_24;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = v21;
      if (os_log_type_enabled((os_log_t)gLogObj, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_string_create_with_dispatch_data";
        v13 = "%{public}s called with null self";
LABEL_23:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = v21;
      if (os_log_type_enabled((os_log_t)gLogObj, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_string_create_with_dispatch_data";
        v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_23;
      }
LABEL_24:
      if (v10)
        free(v10);
      return 0;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = v21;
    v15 = os_log_type_enabled((os_log_t)gLogObj, v21);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_string_create_with_dispatch_data";
        v13 = "%{public}s called with null self, no backtrace";
        goto LABEL_23;
      }
      goto LABEL_24;
    }
    if (!v15)
    {
LABEL_18:
      free(backtrace_string);
      goto LABEL_24;
    }
    *(_DWORD *)buf = 136446466;
    v23 = "nw_string_create_with_dispatch_data";
    v24 = 2082;
    v25 = backtrace_string;
    v16 = "%{public}s called with null self, dumping backtrace:%{public}s";
LABEL_17:
    _os_log_impl(&dword_182FBE000, v11, v12, v16, buf, 0x16u);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t __nw_string_create_with_dispatch_data_block_invoke(uint64_t a1, int a2, int a3, std::string::value_type *__s, std::string::size_type __n)
{
  std::string::append((std::string *)(*(_QWORD *)(a1 + 32) + 40), __s, __n);
  return 1;
}

BOOL nw_string_is_empty(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 32) == 0;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_string_is_empty";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_string_is_empty";
        v5 = "%{public}s called with null string";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "nw_string_is_empty";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_string_is_empty";
        v5 = "%{public}s called with null string, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_string_is_empty";
        v5 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

BOOL nw_string_copy(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t **v3;
  uint64_t **v4;
  std::string *v5;
  const std::string::value_type *v6;
  uint64_t *v7;
  void *v8;
  _BOOL8 result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  nw::object *v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_string_copy";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &type, &v19))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_string_copy";
      v13 = "%{public}s called with null string";
      goto LABEL_26;
    }
    if (!v19)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_string_copy";
      v13 = "%{public}s called with null string, backtrace limit exceeded";
      goto LABEL_26;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v17)
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_string_copy";
      v13 = "%{public}s called with null string, no backtrace";
      goto LABEL_26;
    }
    if (!v17)
      goto LABEL_19;
    *(_DWORD *)buf = 136446466;
    v22 = "nw_string_copy";
    v23 = 2082;
    v24 = backtrace_string;
    v16 = "%{public}s called with null string, dumping backtrace:%{public}s";
    goto LABEL_18;
  }
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      nw::object::_class(v18);
      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      unk_1ECD84EA0 = 12;
      xmmword_1ECD84EA8 = 0u;
      unk_1ECD84EB8 = 0u;
      xmmword_1ECD84EC8 = 0u;
      xmmword_1ECD84EE8 = 0u;
      *(_OWORD *)&qword_1ECD84EF8 = 0u;
      qword_1ECD84F08 = (uint64_t)&nw::object::_class(void)::instance;
      unk_1ECD84F10 = 4096;
      qword_1ECD84F18 = 0;
      qword_1ECD84F20 = 0;
      qword_1ECD84F28 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F30 = (uint64_t)&qword_1ECD84F28;
      qword_1ECD84F38 = 0;
      dword_1ECD84F40 = 0;
      xmmword_1ECD84ED8 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_1ECD84ED8);
    }
  }
  v3 = nw::object::operator new();
  if (v3)
  {
    v4 = v3;
    *(_OWORD *)(v3 + 5) = 0u;
    v5 = (std::string *)(v3 + 5);
    HIDWORD(v5[-2].__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)&v5[-1].__r_.__value_.__r.__words[1] = 0u;
    v5->__r_.__value_.__r.__words[2] = 0;
    v6 = *(const std::string::value_type **)(a1 + 24);
    if (v6)
    {
      std::string::__assign_external(v5, v6);
      LODWORD(v7) = *((char *)v4 + 63);
      if ((v7 & 0x80000000) != 0)
      {
        v5 = (std::string *)v4[5];
        v7 = v4[6];
        goto LABEL_21;
      }
      v5 = (std::string *)(v4 + 5);
    }
    else
    {
      LOBYTE(v7) = 0;
    }
    v7 = (uint64_t *)v7;
LABEL_21:
    v4[3] = (uint64_t *)v5;
    v4[4] = v7;
    return (BOOL)v4;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v22 = "operator()";
  v23 = 2080;
  v24 = "auto nw_string_copy(nw_string_t)::(anonymous class)::operator()() const";
  v8 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_string_copy";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &type, &v19))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_string_copy";
        v13 = "%{public}s called with null self";
LABEL_26:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_string_copy";
        v13 = "%{public}s called with null self, backtrace limit exceeded";
        goto LABEL_26;
      }
LABEL_27:
      if (v10)
        free(v10);
      return 0;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_string_copy";
        v13 = "%{public}s called with null self, no backtrace";
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    if (!v15)
    {
LABEL_19:
      free(backtrace_string);
      goto LABEL_27;
    }
    *(_DWORD *)buf = 136446466;
    v22 = "nw_string_copy";
    v23 = 2082;
    v24 = backtrace_string;
    v16 = "%{public}s called with null self, dumping backtrace:%{public}s";
LABEL_18:
    _os_log_impl(&dword_182FBE000, v11, v12, v16, buf, 0x16u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

BOOL nw_string_is_equal_to_string(uint64_t a1, uint64_t a2)
{
  size_t v2;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_string_is_equal_to_string";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_32;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v12)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_string_is_equal_to_string";
        v7 = "%{public}s called with null string1, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v9)
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_string_is_equal_to_string";
        v7 = "%{public}s called with null string1, no backtrace";
        goto LABEL_31;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v15 = "nw_string_is_equal_to_string";
        v16 = 2082;
        v17 = backtrace_string;
        v10 = "%{public}s called with null string1, dumping backtrace:%{public}s";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
      }
LABEL_22:
      free(backtrace_string);
      goto LABEL_32;
    }
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_string_is_equal_to_string";
    v7 = "%{public}s called with null string1";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
LABEL_32:
    if (v4)
      free(v4);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_string_is_equal_to_string";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_string_is_equal_to_string";
      v7 = "%{public}s called with null string2";
      goto LABEL_31;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_string_is_equal_to_string";
      v7 = "%{public}s called with null string2, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v15 = "nw_string_is_equal_to_string";
        v16 = 2082;
        v17 = backtrace_string;
        v10 = "%{public}s called with null string2, dumping backtrace:%{public}s";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (!v11)
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_string_is_equal_to_string";
    v7 = "%{public}s called with null string2, no backtrace";
    goto LABEL_31;
  }
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 == *(_QWORD *)(a2 + 32))
    return memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), v2) == 0;
  return 0;
}

BOOL nw_string_is_equal_to_c_string(uint64_t a1, char *__s)
{
  size_t v4;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_string_is_equal_to_c_string";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14))
      goto LABEL_32;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        v7 = __nwlog_obj();
        v8 = type;
        if (!os_log_type_enabled(v7, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_string_is_equal_to_c_string";
        v9 = "%{public}s called with null string1, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = type;
      v11 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v11)
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_string_is_equal_to_c_string";
        v9 = "%{public}s called with null string1, no backtrace";
        goto LABEL_31;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_string_is_equal_to_c_string";
        v18 = 2082;
        v19 = backtrace_string;
        v12 = "%{public}s called with null string1, dumping backtrace:%{public}s";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v7, v8, v12, buf, 0x16u);
      }
LABEL_22:
      free(backtrace_string);
      goto LABEL_32;
    }
    v7 = __nwlog_obj();
    v8 = type;
    if (!os_log_type_enabled(v7, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_string_is_equal_to_c_string";
    v9 = "%{public}s called with null string1";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
LABEL_32:
    if (v6)
      free(v6);
    return 0;
  }
  if (!__s)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_string_is_equal_to_c_string";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_string_is_equal_to_c_string";
      v9 = "%{public}s called with null string2";
      goto LABEL_31;
    }
    if (!v14)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_string_is_equal_to_c_string";
      v9 = "%{public}s called with null string2, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v13 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_string_is_equal_to_c_string";
        v18 = 2082;
        v19 = backtrace_string;
        v12 = "%{public}s called with null string2, dumping backtrace:%{public}s";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (!v13)
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_string_is_equal_to_c_string";
    v9 = "%{public}s called with null string2, no backtrace";
    goto LABEL_31;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == strlen(__s))
    return memcmp(*(const void **)(a1 + 24), __s, v4) == 0;
  return 0;
}

void nw_string_append_string(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_string_append_string";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_string_append_string";
      v12 = "%{public}s called with null string1";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_string_append_string";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null string1, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_43:
        if (!v9)
          return;
LABEL_44:
        free(v9);
        return;
      }
      if (!v14)
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_string_append_string";
      v12 = "%{public}s called with null string1, no backtrace";
    }
    else
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_string_append_string";
      v12 = "%{public}s called with null string1, backtrace limit exceeded";
    }
LABEL_42:
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
    goto LABEL_43;
  }
  if (a2)
  {
    if (*(_QWORD *)(a1 + 64))
    {
      v4 = a1 + 40;
      std::string::__assign_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
      v5 = *(void (**)(_QWORD))(a1 + 64);
      if (v5)
      {
        *(_QWORD *)(a1 + 64) = 0;
        v5(*(_QWORD *)(a1 + 24));
      }
      if (*(char *)(a1 + 63) < 0)
      {
        v4 = *(_QWORD *)(a1 + 40);
        v6 = *(_QWORD *)(a1 + 48);
      }
      else
      {
        v6 = *(unsigned __int8 *)(a1 + 63);
      }
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v6;
    }
    v7 = a1 + 40;
    std::string::append((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    if (*(char *)(a1 + 63) < 0)
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      v8 = *(unsigned __int8 *)(a1 + 63);
    }
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_string_append_string";
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (!__nwlog_fault(v9, &type, &v17))
    goto LABEL_43;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_43;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_string_append_string";
    v12 = "%{public}s called with null string2";
    goto LABEL_42;
  }
  if (!v17)
  {
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_43;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_string_append_string";
    v12 = "%{public}s called with null string2, backtrace limit exceeded";
    goto LABEL_42;
  }
  v15 = (char *)__nw_create_backtrace_string();
  v10 = __nwlog_obj();
  v11 = type;
  v16 = os_log_type_enabled(v10, type);
  if (!v15)
  {
    if (!v16)
      goto LABEL_43;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_string_append_string";
    v12 = "%{public}s called with null string2, no backtrace";
    goto LABEL_42;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v20 = "nw_string_append_string";
    v21 = 2082;
    v22 = v15;
    _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null string2, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v15);
  if (v9)
    goto LABEL_44;
}

void nw_string_append_c_string(uint64_t a1, char *__s)
{
  uint64_t v4;
  void (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char *v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_string_append_c_string";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_string_append_c_string";
      v13 = "%{public}s called with null string1";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_string_append_c_string";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null string1, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_43:
        if (!v10)
          return;
LABEL_44:
        free(v10);
        return;
      }
      if (!v15)
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_string_append_c_string";
      v13 = "%{public}s called with null string1, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_string_append_c_string";
      v13 = "%{public}s called with null string1, backtrace limit exceeded";
    }
LABEL_42:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_43;
  }
  if (__s)
  {
    if (*(_QWORD *)(a1 + 64))
    {
      v4 = a1 + 40;
      std::string::__assign_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
      v5 = *(void (**)(_QWORD))(a1 + 64);
      if (v5)
      {
        *(_QWORD *)(a1 + 64) = 0;
        v5(*(_QWORD *)(a1 + 24));
      }
      if (*(char *)(a1 + 63) < 0)
      {
        v4 = *(_QWORD *)(a1 + 40);
        v6 = *(_QWORD *)(a1 + 48);
      }
      else
      {
        v6 = *(unsigned __int8 *)(a1 + 63);
      }
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v6;
    }
    v7 = a1 + 40;
    v8 = strlen(__s);
    std::string::append((std::string *)(a1 + 40), __s, v8);
    if (*(char *)(a1 + 63) < 0)
    {
      v7 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      v9 = *(unsigned __int8 *)(a1 + 63);
    }
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v9;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_string_append_c_string";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v10, &type, &v18))
    goto LABEL_43;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_43;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_string_append_c_string";
    v13 = "%{public}s called with null string2";
    goto LABEL_42;
  }
  if (!v18)
  {
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_43;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_string_append_c_string";
    v13 = "%{public}s called with null string2, backtrace limit exceeded";
    goto LABEL_42;
  }
  v16 = (char *)__nw_create_backtrace_string();
  v11 = __nwlog_obj();
  v12 = type;
  v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17)
      goto LABEL_43;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_string_append_c_string";
    v13 = "%{public}s called with null string2, no backtrace";
    goto LABEL_42;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v21 = "nw_string_append_c_string";
    v22 = 2082;
    v23 = v16;
    _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null string2, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v10)
    goto LABEL_44;
}

void nw_string_append_dispatch_data(uint64_t a1, dispatch_data_t data)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  _QWORD applier[5];
  char v14;
  os_log_type_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_string_append_dispatch_data";
    v5 = (char *)_os_log_send_and_compose_impl();
    v15 = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v5, &v15, &v14))
      goto LABEL_36;
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = v15;
      if (!os_log_type_enabled(v6, v15))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_string_append_dispatch_data";
      v8 = "%{public}s called with null string";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = v15;
      v10 = os_log_type_enabled(v6, v15);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_string_append_dispatch_data";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v5)
          return;
LABEL_37:
        free(v5);
        return;
      }
      if (!v10)
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_string_append_dispatch_data";
      v8 = "%{public}s called with null string, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = v15;
      if (!os_log_type_enabled(v6, v15))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_string_append_dispatch_data";
      v8 = "%{public}s called with null string, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_36;
  }
  if (data)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 0x40000000;
    applier[2] = __nw_string_append_dispatch_data_block_invoke;
    applier[3] = &__block_descriptor_tmp_4_75796;
    applier[4] = a1;
    dispatch_data_apply(data, applier);
    if (*(char *)(a1 + 63) < 0)
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      v3 = a1 + 40;
      v4 = *(unsigned __int8 *)(a1 + 63);
    }
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_string_append_dispatch_data";
  v5 = (char *)_os_log_send_and_compose_impl();
  v15 = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v5, &v15, &v14))
    goto LABEL_36;
  if (v15 == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = v15;
    if (!os_log_type_enabled(v6, v15))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_string_append_dispatch_data";
    v8 = "%{public}s called with null data";
    goto LABEL_35;
  }
  if (!v14)
  {
    v6 = __nwlog_obj();
    v7 = v15;
    if (!os_log_type_enabled(v6, v15))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_string_append_dispatch_data";
    v8 = "%{public}s called with null data, backtrace limit exceeded";
    goto LABEL_35;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = v15;
  v12 = os_log_type_enabled(v6, v15);
  if (!v11)
  {
    if (!v12)
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_string_append_dispatch_data";
    v8 = "%{public}s called with null data, no backtrace";
    goto LABEL_35;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_string_append_dispatch_data";
    v18 = 2082;
    v19 = v11;
    _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5)
    goto LABEL_37;
}

uint64_t __nw_string_append_dispatch_data_block_invoke(uint64_t a1, int a2, int a3, std::string::value_type *__s, std::string::size_type __n)
{
  std::string::append((std::string *)(*(_QWORD *)(a1 + 32) + 40), __s, __n);
  return 1;
}

uint64_t nw_string_get_length(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 32);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_string_get_length";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_string_get_length";
        v5 = "%{public}s called with null string";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "nw_string_get_length";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_string_get_length";
        v5 = "%{public}s called with null string, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_string_get_length";
        v5 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

uint64_t nw_string_get_c_string(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 24);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_string_get_c_string";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_string_get_c_string";
        v5 = "%{public}s called with null string";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "nw_string_get_c_string";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_string_get_c_string";
        v5 = "%{public}s called with null string, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_string_get_c_string";
        v5 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

uint64_t nw_string_get_char_at_index(uint64_t a1, unint64_t a2)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_string_get_char_at_index";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v3, &type, &v10))
      goto LABEL_18;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_string_get_char_at_index";
      v6 = "%{public}s called with null string";
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_string_get_char_at_index";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null string, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (!v8)
      {
LABEL_18:
        if (v3)
          free(v3);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v13 = "nw_string_get_char_at_index";
      v6 = "%{public}s called with null string, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_string_get_char_at_index";
      v6 = "%{public}s called with null string, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 32) <= a2)
    return 0;
  return *(char *)(*(_QWORD *)(a1 + 24) + a2);
}

BOOL nw_string_get_bytes(uint64_t a1, void *__dst, size_t a3, unint64_t a4, size_t a5, size_t *a6)
{
  unint64_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  char *backtrace_string;
  _BOOL4 v22;
  const char *v23;
  _BOOL4 v24;
  NSObject *v25;
  _BOOL4 v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  size_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_string_get_bytes";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_string_get_bytes";
      v20 = "%{public}s called with null string";
      goto LABEL_55;
    }
    if (!v27)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_string_get_bytes";
      v20 = "%{public}s called with null string, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v22 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v22)
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_string_get_bytes";
      v20 = "%{public}s called with null string, no backtrace";
      goto LABEL_55;
    }
    if (!v22)
      goto LABEL_42;
    *(_DWORD *)buf = 136446466;
    v30 = "nw_string_get_bytes";
    v31 = 2082;
    v32 = backtrace_string;
    v23 = "%{public}s called with null string, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_182FBE000, v18, v19, v23, buf, 0x16u);
    goto LABEL_42;
  }
  if (!__dst)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_string_get_bytes";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_string_get_bytes";
      v20 = "%{public}s called with null buffer";
      goto LABEL_55;
    }
    if (!v27)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_string_get_bytes";
      v20 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v24 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v24)
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_string_get_bytes";
      v20 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_55;
    }
    if (!v24)
      goto LABEL_42;
    *(_DWORD *)buf = 136446466;
    v30 = "nw_string_get_bytes";
    v31 = 2082;
    v32 = backtrace_string;
    v23 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
    goto LABEL_41;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_string_get_bytes";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_string_get_bytes";
      v20 = "%{public}s called with null bytes_copied";
      goto LABEL_55;
    }
    if (!v27)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_string_get_bytes";
      v20 = "%{public}s called with null bytes_copied, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v26 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_string_get_bytes";
        v31 = 2082;
        v32 = backtrace_string;
        v23 = "%{public}s called with null bytes_copied, dumping backtrace:%{public}s";
        goto LABEL_41;
      }
LABEL_42:
      free(backtrace_string);
      goto LABEL_56;
    }
    if (!v26)
      goto LABEL_56;
    *(_DWORD *)buf = 136446210;
    v30 = "nw_string_get_bytes";
    v20 = "%{public}s called with null bytes_copied, no backtrace";
LABEL_55:
    _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
LABEL_56:
    if (v17)
      free(v17);
    return 0;
  }
  *a6 = 0;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v12 - a4;
  if (v12 < a4)
  {
    if (gLogDatapath)
    {
      v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v30 = "nw_string_get_bytes";
        v31 = 2082;
        v32 = "bytes_left";
        v33 = 2048;
        v34 = a4;
        v35 = 2048;
        v36 = v13;
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }
    }
    v13 = 0;
  }
  if (a5 >= v13)
    v14 = v13;
  else
    v14 = a5;
  if (v14 >= a3)
    v15 = a3;
  else
    v15 = v14;
  *a6 = v15;
  if (v15)
  {
    memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 24) + a4), v15);
    return *a6 != 0;
  }
  return 0;
}

uint64_t nw_string_find_c_string(uint64_t a1, char *__s)
{
  char *v4;
  uint64_t result;
  int64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  void *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_string_find_c_string";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_string_find_c_string";
        v17 = "%{public}s called with null string";
LABEL_42:
        _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
      }
LABEL_43:
      if (v14)
        free(v14);
      return -1;
    }
    if (!v22)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_string_find_c_string";
        v17 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v19 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_string_find_c_string";
        v17 = "%{public}s called with null string, no backtrace";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_string_find_c_string";
      v26 = 2082;
      v27 = backtrace_string;
      v20 = "%{public}s called with null string, dumping backtrace:%{public}s";
LABEL_32:
      _os_log_impl(&dword_182FBE000, v15, v16, v20, buf, 0x16u);
    }
LABEL_33:
    free(backtrace_string);
    goto LABEL_43;
  }
  if (!__s)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_string_find_c_string";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_string_find_c_string";
        v17 = "%{public}s called with null substring";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (!v22)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_string_find_c_string";
        v17 = "%{public}s called with null substring, backtrace limit exceeded";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_string_find_c_string";
        v17 = "%{public}s called with null substring, no backtrace";
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_string_find_c_string";
      v26 = 2082;
      v27 = backtrace_string;
      v20 = "%{public}s called with null substring, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  v4 = *(char **)(a1 + 24);
  result = strlen(__s);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = &v4[v7];
    if (v7 >= result)
    {
      v10 = *__s;
      v11 = v4;
      do
      {
        v12 = v7 - v6;
        if (v12 == -1)
          break;
        v13 = (char *)memchr(v11, v10, v12 + 1);
        if (!v13)
          break;
        v9 = v13;
        if (!memcmp(v13, __s, v6))
          goto LABEL_6;
        v11 = v9 + 1;
        v7 = v8 - (v9 + 1);
      }
      while (v7 >= v6);
    }
    v9 = v8;
LABEL_6:
    if (v9 == v8)
      return -1;
    else
      return v9 - v4;
  }
  return result;
}

BOOL nw_protocol_http_messaging_create(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  char *v6;
  _BOOL4 logging_disabled;
  char v8;
  BOOL v9;
  void *v10;
  char v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL8 result;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  _BOOL4 v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_protocol_http_messaging_create";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v16, &type, &v29))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_http_messaging_create";
        v19 = "%{public}s called with null endpoint";
LABEL_57:
        _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
      }
LABEL_58:
      if (v16)
        free(v16);
      return 0;
    }
    if (!v29)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_http_messaging_create";
        v19 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v26 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_http_messaging_create";
        v19 = "%{public}s called with null endpoint, no backtrace";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_protocol_http_messaging_create";
      v33 = 2082;
      v34 = (uint64_t)backtrace_string;
      v27 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_182FBE000, v17, v18, v27, buf, 0x16u);
    }
LABEL_48:
    free(backtrace_string);
    goto LABEL_58;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_protocol_http_messaging_create";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v16, &type, &v29))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_http_messaging_create";
        v19 = "%{public}s called with null parameters";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (!v29)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_http_messaging_create";
        v19 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v28 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_protocol_http_messaging_create";
        v19 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_protocol_http_messaging_create";
      v33 = 2082;
      v34 = (uint64_t)backtrace_string;
      v27 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  v6 = (char *)malloc_type_calloc(1uLL, 0x118uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_4:
    *((_QWORD *)v6 + 34) = 0;
    *((_OWORD *)v6 + 15) = 0u;
    *((_OWORD *)v6 + 16) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)v6 = 0u;
    logging_disabled = nw_path_parameters_get_logging_disabled(a4[13]);
    if (logging_disabled)
      v8 = 2;
    else
      v8 = 0;
    v6[272] = v6[272] & 0xFD | v8;
    if (v6)
      v9 = logging_disabled;
    else
      v9 = 0;
    if (!v9)
    {
      if (gLogDatapath)
      {
        v22 = __nwlog_obj();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          v23 = "";
          v24 = v6 + 188;
          if (!v6)
            v24 = "";
          *(_DWORD *)buf = 136446722;
          v32 = "nw_protocol_http_messaging_create";
          if (v6)
            v23 = " ";
          v33 = 2082;
          v34 = (uint64_t)v24;
          v35 = 2080;
          v36 = (uint64_t)v23;
          _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    if (nw_protocol_http_messaging_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_75867);
    *((_QWORD *)v6 + 2) = nw_protocol_http_messaging_identifier::protocol_identifier;
    if (nw_protocol_http_messaging_get_callbacks(void)::onceToken != -1)
      dispatch_once(&nw_protocol_http_messaging_get_callbacks(void)::onceToken, &__block_literal_global_14_75868);
    *((_QWORD *)v6 + 3) = &nw_protocol_http_messaging_get_callbacks(void)::protocol_callbacks;
    *((_QWORD *)v6 + 5) = v6;
    if (nw_protocol_http_messaging_get_listen_callbacks(void)::onceToken != -1)
      dispatch_once(&nw_protocol_http_messaging_get_listen_callbacks(void)::onceToken, &__block_literal_global_19_75869);
    *((_QWORD *)v6 + 8) = &nw_protocol_http_messaging_get_listen_callbacks(void)::listen_protocol_callbacks;
    *((_QWORD *)v6 + 11) = v6;
    v10 = os_retain(a3);
    v11 = v6[120];
    if ((v11 & 1) != 0)
    {
      v12 = (void *)*((_QWORD *)v6 + 14);
      if (v12)
      {
        os_release(v12);
        v11 = v6[120];
      }
    }
    *((_QWORD *)v6 + 14) = v10;
    v6[120] = v11 | 1;
    v13 = a4;
    v14 = v13[12];

    v6[272] = v6[272] & 0xFE | ((v14 & 0x8000) != 0);
    return (BOOL)v6;
  }
  v20 = __nwlog_obj();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v32 = "strict_calloc";
  v33 = 2048;
  v34 = 1;
  v35 = 2048;
  v36 = 280;
  v21 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v21);
  if (!result)
  {
    free(v21);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void ___ZL47nw_protocol_http_messaging_get_listen_callbacksv_block_invoke()
{
  nw_protocol_http_messaging_get_listen_callbacks(void)::listen_protocol_callbacks = (uint64_t)nw_protocol_http_messaging_listen_protocol_new_flow;
  unk_1EDCE38C0 = nw_protocol_http_messaging_listen_protocol_disconnected;
}

uint64_t nw_protocol_http_messaging_listen_protocol_new_flow(nw_listen_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  _BYTE *handle;
  _QWORD *v6;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  NSObject *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  nw_endpoint *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      v11 = "%{public}s called with null listener";
      goto LABEL_21;
    }
    if (!v18)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      v11 = "%{public}s called with null listener, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v16 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      v11 = "%{public}s called with null listener, no backtrace";
      goto LABEL_21;
    }
    if (!v16)
      goto LABEL_16;
    *(_DWORD *)buf = 136446466;
    v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    v22 = 2082;
    v23 = backtrace_string;
    v14 = "%{public}s called with null listener, dumping backtrace:%{public}s";
    goto LABEL_15;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      v11 = "%{public}s called with null http_messaging";
      goto LABEL_21;
    }
    if (!v18)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      v11 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v17)
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      v11 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_21;
    }
    if (!v17)
      goto LABEL_16;
    *(_DWORD *)buf = 136446466;
    v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    v22 = 2082;
    v23 = backtrace_string;
    v14 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_15;
  }
  if ((handle[272] & 2) == 0)
  {
    if (gLogDatapath)
    {
      v15 = __nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
        v22 = 2082;
        v23 = handle + 188;
        v24 = 2080;
        v25 = " ";
        v26 = 2112;
        v27 = a2;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%screating new inbound flow from %@", buf, 0x2Au);
      }
    }
  }
  v6 = (_QWORD *)*((_QWORD *)handle + 16);
  if (v6 != *((_QWORD **)handle + 17))
    return (**(uint64_t (***)(_QWORD, nw_endpoint *, nw_parameters *))*v6)(*v6, a2, a3);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v8, &type, &v18))
    goto LABEL_22;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
      v11 = "%{public}s No listen handler found for inbound stream";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  if (v18)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
        v11 = "%{public}s No listen handler found for inbound stream, no backtrace";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (!v13)
    {
LABEL_16:
      free(backtrace_string);
      goto LABEL_22;
    }
    *(_DWORD *)buf = 136446466;
    v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    v22 = 2082;
    v23 = backtrace_string;
    v14 = "%{public}s No listen handler found for inbound stream, dumping backtrace:%{public}s";
LABEL_15:
    _os_log_impl(&dword_182FBE000, v9, v10, v14, buf, 0x16u);
    goto LABEL_16;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = gLogObj;
  v10 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http_messaging_listen_protocol_new_flow";
    v11 = "%{public}s No listen handler found for inbound stream, backtrace limit exceeded";
    goto LABEL_21;
  }
LABEL_22:
  if (v8)
    free(v8);
  return 0;
}

void nw_protocol_http_messaging_listen_protocol_disconnected(nw_listen_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  nw_protocol **handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *v9;
  _BOOL4 v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  NSObject *v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v4, &type, &v17))
      goto LABEL_24;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v5 = __nwlog_obj();
        v6 = type;
        v13 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          v7 = "%{public}s called with null listener, no backtrace";
          goto LABEL_23;
        }
      }
      else
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          v7 = "%{public}s called with null listener, backtrace limit exceeded";
          goto LABEL_23;
        }
      }
      goto LABEL_24;
    }
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_24;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    v7 = "%{public}s called with null listener";
LABEL_23:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_24;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v4, &type, &v17))
      goto LABEL_24;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v17)
      {
        v9 = (char *)__nw_create_backtrace_string();
        v5 = __nwlog_obj();
        v6 = type;
        v14 = os_log_type_enabled(v5, type);
        if (v9)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
            v21 = 2082;
            v22 = v9;
            v11 = "%{public}s called with null existing_protocol, dumping backtrace:%{public}s";
            goto LABEL_16;
          }
LABEL_17:
          free(v9);
          if (!v4)
            return;
LABEL_25:
          free(v4);
          return;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          v7 = "%{public}s called with null existing_protocol, no backtrace";
          goto LABEL_23;
        }
      }
      else
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          v7 = "%{public}s called with null existing_protocol, backtrace limit exceeded";
          goto LABEL_23;
        }
      }
      goto LABEL_24;
    }
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_24;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    v7 = "%{public}s called with null existing_protocol";
    goto LABEL_23;
  }
  handle = (nw_protocol **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v4, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          v7 = "%{public}s called with null http_messaging";
          goto LABEL_23;
        }
      }
      else if (v17)
      {
        v9 = (char *)__nw_create_backtrace_string();
        v5 = __nwlog_obj();
        v6 = type;
        v15 = os_log_type_enabled(v5, type);
        if (v9)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
            v21 = 2082;
            v22 = v9;
            v11 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
            goto LABEL_16;
          }
          goto LABEL_17;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          v7 = "%{public}s called with null http_messaging, no backtrace";
          goto LABEL_23;
        }
      }
      else
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
          v7 = "%{public}s called with null http_messaging, backtrace limit exceeded";
          goto LABEL_23;
        }
      }
    }
LABEL_24:
    if (!v4)
      return;
    goto LABEL_25;
  }
  if (handle[19] != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v4, &type, &v17))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      v7 = "%{public}s Ignoring listen protocol disconnected, not sent by version specific protocol";
      goto LABEL_23;
    }
    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      v7 = "%{public}s Ignoring listen protocol disconnected, not sent by version specific protocol, backtrace limit exceeded";
      goto LABEL_23;
    }
    v9 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v9)
    {
      if (!v10)
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      v7 = "%{public}s Ignoring listen protocol disconnected, not sent by version specific protocol, no backtrace";
      goto LABEL_23;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      v21 = 2082;
      v22 = v9;
      v11 = "%{public}s Ignoring listen protocol disconnected, not sent by version specific protocol, dumping backtrace:%{public}s";
LABEL_16:
      _os_log_impl(&dword_182FBE000, v5, v6, v11, buf, 0x16u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  if (((_BYTE)handle[34] & 2) == 0 && gLogDatapath)
  {
    v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v20 = "nw_protocol_http_messaging_listen_protocol_disconnected";
      v21 = 2082;
      v22 = (char *)handle + 188;
      v23 = 2080;
      v24 = " ";
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%slower protocol is disconnected", buf, 0x20u);
    }
  }
  *((_BYTE *)handle + 272) |= 8u;
  nw_protocol_http_messaging_teardown((uint64_t)handle, a3);
}

void nw_protocol_http_messaging_teardown(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char *v18;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http_messaging_teardown";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v12, &type, &v20))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http_messaging_teardown";
      v15 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_http_messaging_teardown";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_46:
        if (!v12)
          return;
        goto LABEL_47;
      }
      if (!v17)
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http_messaging_teardown";
      v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http_messaging_teardown";
      v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_45:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_46;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 272) & 0x20) != 0)
      return;
    *(_BYTE *)(v2 + 272) |= 0x20u;
    nw_protocol_remove_instance(v2);
    v5 = *(_BYTE **)(v2 + 128);
    v4 = *(_BYTE **)(v2 + 136);
    v6 = v4 - v5;
    if (v4 == v5)
    {
      v7 = 0;
      v10 = *(_QWORD *)(v2 + 152);
      if (!v10)
      {
LABEL_10:
        v11 = *(_BYTE *)(v2 + 272);
        *(_BYTE *)(v2 + 272) = v11 & 0xDF;
        if ((v11 & 4) == 0 && !*(_QWORD *)(v2 + 48) && *(_QWORD *)(v2 + 160) == *(_QWORD *)(v2 + 168))
          nw_http_messaging_destroy(v2);
        if (v7)
          operator delete(v7);
        return;
      }
    }
    else
    {
      if (v6 < 0)
        abort();
      v7 = (char *)operator new(v4 - v5);
      memcpy(v7, v5, v6);
      v8 = 0;
      v9 = 8 * (v6 >> 3);
      do
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v7[v8] + 8))(*(_QWORD *)&v7[v8], v2, a2);
        v8 += 8;
      }
      while (v9 != v8);
      v10 = *(_QWORD *)(v2 + 152);
      if (!v10)
        goto LABEL_10;
    }
    nw_protocol_remove_listen_handler(v10, v2 + 64);
    *(_QWORD *)(v2 + 152) = 0;
    goto LABEL_10;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_http_messaging_teardown";
  v12 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v12, &type, &v20))
    goto LABEL_46;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http_messaging_teardown";
    v15 = "%{public}s called with null http_messaging";
    goto LABEL_45;
  }
  if (!v20)
  {
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http_messaging_teardown";
    v15 = "%{public}s called with null http_messaging, backtrace limit exceeded";
    goto LABEL_45;
  }
  v18 = (char *)__nw_create_backtrace_string();
  v13 = __nwlog_obj();
  v14 = type;
  v19 = os_log_type_enabled(v13, type);
  if (!v18)
  {
    if (!v19)
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http_messaging_teardown";
    v15 = "%{public}s called with null http_messaging, no backtrace";
    goto LABEL_45;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_protocol_http_messaging_teardown";
    v24 = 2082;
    v25 = v18;
    _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v18);
  if (v12)
LABEL_47:
    free(v12);
}

void nw_http_messaging_destroy(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 272) & 2) == 0)
  {
    if (gLogDatapath)
    {
      v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = 136446722;
        v14 = "nw_http_messaging_destroy";
        v15 = 2082;
        v16 = a1 + 188;
        v17 = 2080;
        v18 = " ";
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v13, 0x20u);
      }
    }
  }
  v3 = *(_BYTE **)(a1 + 128);
  v2 = *(_BYTE **)(a1 + 136);
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v5 = 0;
  }
  else
  {
    if (v4 < 0)
      abort();
    v5 = (char *)operator new(v2 - v3);
    memcpy(v5, v3, v4);
    v6 = 0;
    v7 = 8 * (v4 >> 3);
    do
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)&v5[v6] + 8))(*(_QWORD *)&v5[v6], a1, 0);
      v6 += 8;
    }
    while (v7 != v6);
  }
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(void **)(a1 + 160);
  if (v8)
  {
    *(_QWORD *)(a1 + 168) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 128);
  if (v9)
  {
    *(_QWORD *)(a1 + 136) = v9;
    operator delete(v9);
  }
  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    v10 = *(void **)(a1 + 112);
    if (v10)
      os_release(v10);
  }
  *(_QWORD *)(a1 + 112) = 0;
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    v11 = *(void **)(a1 + 96);
    if (v11)
      os_release(v11);
  }
  free((void *)a1);
  if (v5)
    operator delete(v5);
}

void ___ZL40nw_protocol_http_messaging_get_callbacksv_block_invoke()
{
  qword_1EDCE37F0 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_1EDCE37F8 = nw_protocol_common_get_output_frames;
  qword_1EDCE37E0 = (uint64_t)nw_protocol_common_input_available;
  unk_1EDCE37E8 = nw_protocol_common_output_available;
  qword_1EDCE3860 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCE3868 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCE38A0 = (uint64_t)nw_protocol_common_reset;
  unk_1EDCE38A8 = nw_protocol_common_input_flush;
  qword_1EDCE3850 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_1EDCE3858 = nw_protocol_common_input_finished;
  qword_1EDCE3870 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_1EDCE3878 = nw_protocol_common_waiting_for_output;
  qword_1EDCE3830 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCE3838 = nw_protocol_common_unregister_notification;
  qword_1EDCE3840 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCE3848 = nw_protocol_common_updated_path;
  qword_1EDCE3800 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_1EDCE3808 = nw_protocol_common_link_state;
  nw_protocol_http_messaging_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http_messaging_add_input_handler;
  *(_QWORD *)algn_1EDCE37A8 = nw_protocol_http_messaging_remove_input_handler;
  qword_1EDCE3810 = (uint64_t)nw_protocol_http_messaging_get_parameters;
  unk_1EDCE3818 = nw_protocol_common_get_path;
  qword_1EDCE3820 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCE3828 = nw_protocol_http_messaging_get_remote_endpoint;
  qword_1EDCE37B0 = (uint64_t)nw_protocol_http_messaging_replace_input_handler;
  unk_1EDCE37B8 = nw_protocol_http_messaging_connect;
  qword_1EDCE37C0 = (uint64_t)nw_protocol_http_messaging_disconnect;
  unk_1EDCE37C8 = nw_protocol_http_messaging_connected;
  qword_1EDCE37D0 = (uint64_t)nw_protocol_http_messaging_disconnected;
  unk_1EDCE37D8 = nw_protocol_http_messaging_error;
  qword_1EDCE3880 = (uint64_t)nw_protocol_http_messaging_copy_info;
  unk_1EDCE3888 = nw_protocol_http_messaging_add_listen_handler;
  qword_1EDCE3890 = (uint64_t)nw_protocol_http_messaging_remove_listen_handler;
  unk_1EDCE3898 = nw_protocol_common_get_message_properties;
}

uint64_t nw_protocol_http_messaging_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  nw_protocol *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  void *parameters;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  _BOOL4 v34;
  NSObject *v35;
  char *v36;
  const char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  char *backtrace_string;
  _BOOL4 v42;
  const char *v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  _BOOL4 v47;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  nw_protocol *v53;
  __int16 v54;
  char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_http_messaging_add_input_handler";
    v37 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v37, &type, &v48))
      goto LABEL_100;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v40 = "%{public}s called with null protocol";
      goto LABEL_99;
    }
    if (!v48)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v40 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_99;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v38 = __nwlog_obj();
    v39 = type;
    v42 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_http_messaging_add_input_handler";
        v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_99;
      }
      goto LABEL_100;
    }
    if (!v42)
      goto LABEL_78;
    *(_DWORD *)buf = 136446466;
    v51 = "nw_protocol_http_messaging_add_input_handler";
    v52 = 2082;
    v53 = (nw_protocol *)backtrace_string;
    v43 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_77:
    _os_log_impl(&dword_182FBE000, v38, v39, v43, buf, 0x16u);
    goto LABEL_78;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_http_messaging_add_input_handler";
    v37 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v37, &type, &v48))
      goto LABEL_100;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v40 = "%{public}s called with null http_messaging";
      goto LABEL_99;
    }
    if (!v48)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v40 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_99;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v38 = __nwlog_obj();
    v39 = type;
    v44 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_http_messaging_add_input_handler";
        v40 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_99;
      }
      goto LABEL_100;
    }
    if (!v44)
      goto LABEL_78;
    *(_DWORD *)buf = 136446466;
    v51 = "nw_protocol_http_messaging_add_input_handler";
    v52 = 2082;
    v53 = (nw_protocol *)backtrace_string;
    v43 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_77;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_http_messaging_add_input_handler";
    v37 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v37, &type, &v48))
      goto LABEL_100;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v40 = "%{public}s called with null input_protocol";
      goto LABEL_99;
    }
    if (!v48)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v40 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_99;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v38 = __nwlog_obj();
    v39 = type;
    v45 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_http_messaging_add_input_handler";
        v40 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_99;
      }
      goto LABEL_100;
    }
    if (!v45)
      goto LABEL_78;
    *(_DWORD *)buf = 136446466;
    v51 = "nw_protocol_http_messaging_add_input_handler";
    v52 = 2082;
    v53 = (nw_protocol *)backtrace_string;
    v43 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_77;
  }
  if (*((_QWORD *)handle + 19))
    return nw_http_messaging_add_to_version_specific_protocol((uint64_t)a1->handle, (uint64_t)a2);
  v6 = (nw_protocol *)*((_QWORD *)handle + 6);
  if (!v6)
  {
    nw_protocol_set_input_handler((uint64_t)a1->handle, (uint64_t)a2);
    *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
    parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
    if (parameters)
    {
      v11 = nw_parameters_copy_protocol_options_legacy(parameters, a1);
      if (v11)
      {
        v12 = v11;
        v13 = v12;
        v14 = 0;
        handle[188] = 0;
        v15 = handle + 188;
        v16 = 84;
        while (1)
        {
          v17 = v12[v14 + 48];
          v15[v14] = v17;
          if (!v17)
            break;
          --v16;
          ++v14;
          if (v16 <= 1)
          {
            v15[v14] = 0;
            break;
          }
        }

        os_release(v13);
        if (a2->output_handler)
          goto LABEL_40;
        goto LABEL_17;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v37 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (!__nwlog_fault(v37, &type, &v48))
        goto LABEL_100;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_protocol_http_messaging_add_input_handler";
          v40 = "%{public}s called with null options";
          goto LABEL_99;
        }
LABEL_100:
        if (!v37)
          return 0;
        v36 = (char *)v37;
        goto LABEL_50;
      }
      if (!v48)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (!os_log_type_enabled(v38, type))
          goto LABEL_100;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_http_messaging_add_input_handler";
        v40 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_99;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v38 = __nwlog_obj();
      v39 = type;
      v47 = os_log_type_enabled(v38, type);
      if (!backtrace_string)
      {
        if (!v47)
          goto LABEL_100;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_http_messaging_add_input_handler";
        v40 = "%{public}s called with null options, no backtrace";
        goto LABEL_99;
      }
      if (v47)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "nw_protocol_http_messaging_add_input_handler";
        v52 = 2082;
        v53 = (nw_protocol *)backtrace_string;
        v43 = "%{public}s called with null options, dumping backtrace:%{public}s";
        goto LABEL_77;
      }
LABEL_78:
      free(backtrace_string);
      goto LABEL_100;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_http_messaging_add_input_handler";
    v37 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v37, &type, &v48))
      goto LABEL_100;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v48)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (!os_log_type_enabled(v38, type))
          goto LABEL_100;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_http_messaging_add_input_handler";
        v40 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_99;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v38 = __nwlog_obj();
      v39 = type;
      v46 = os_log_type_enabled(v38, type);
      if (!backtrace_string)
      {
        if (!v46)
          goto LABEL_100;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_http_messaging_add_input_handler";
        v40 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_99;
      }
      if (!v46)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v52 = 2082;
      v53 = (nw_protocol *)backtrace_string;
      v43 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_77;
    }
    v38 = __nwlog_obj();
    v39 = type;
    if (!os_log_type_enabled(v38, type))
      goto LABEL_100;
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_http_messaging_add_input_handler";
    v40 = "%{public}s called with null parameters";
LABEL_99:
    _os_log_impl(&dword_182FBE000, v38, v39, v40, buf, 0xCu);
    goto LABEL_100;
  }
  if (v6 != a2)
  {
    v8 = (char *)*((_QWORD *)handle + 21);
    v7 = *((_QWORD *)handle + 22);
    if ((unint64_t)v8 >= v7)
    {
      v22 = (char *)*((_QWORD *)handle + 20);
      v23 = (v8 - v22) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        abort();
      v25 = v7 - (_QWORD)v22;
      if (v25 >> 3 > v24)
        v24 = v25 >> 3;
      v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0;
      v27 = 0xFFFFFFFFFFFFFFFLL;
      if (!v26)
        v27 = v24;
      if (v27 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v28 = 16 * v27;
      v29 = (char *)operator new(16 * v27);
      v30 = &v29[16 * v23];
      v31 = &v29[v28];
      *(_QWORD *)v30 = a2;
      *((_DWORD *)v30 + 2) = 0;
      v9 = v30 + 16;
      if (v8 == v22)
      {
        v32 = &v29[16 * v23];
      }
      else
      {
        do
        {
          v32 = v30 - 16;
          *((_OWORD *)v30 - 1) = *((_OWORD *)v8 - 1);
          v8 -= 16;
          v30 -= 16;
        }
        while (v8 != v22);
      }
      *((_QWORD *)handle + 20) = v32;
      *((_QWORD *)handle + 21) = v9;
      *((_QWORD *)handle + 22) = v31;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_QWORD *)v8 = a2;
      *((_DWORD *)v8 + 2) = 0;
      v9 = v8 + 16;
    }
    *((_QWORD *)handle + 21) = v9;
    if (a2->output_handler)
    {
LABEL_40:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v35 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_http_messaging_add_input_handler";
        _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, "%{public}s Output handler already exists for protocol being added as input handler", buf, 0xCu);
      }
      return 1;
    }
LABEL_17:
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v51 = "nw_protocol_http_messaging_add_input_handler";
  v52 = 2048;
  v53 = a2;
  v18 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v48 = 0;
  if (__nwlog_fault(v18, &type, &v48))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = gLogObj;
      v20 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v52 = 2048;
      v53 = a2;
      v21 = "%{public}s Adding the same input handler more than once to messaging %p";
LABEL_47:
      _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0x16u);
      goto LABEL_48;
    }
    if (!v48)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v52 = 2048;
      v53 = a2;
      v21 = "%{public}s Adding the same input handler more than once to messaging %p, backtrace limit exceeded";
      goto LABEL_47;
    }
    v33 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    v20 = type;
    v34 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v33)
    {
      if (!v34)
        goto LABEL_48;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v52 = 2048;
      v53 = a2;
      v21 = "%{public}s Adding the same input handler more than once to messaging %p, no backtrace";
      goto LABEL_47;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446722;
      v51 = "nw_protocol_http_messaging_add_input_handler";
      v52 = 2048;
      v53 = a2;
      v54 = 2082;
      v55 = v33;
      _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s Adding the same input handler more than once to messaging %p, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v33);
  }
LABEL_48:
  if (v18)
  {
    v36 = (char *)v18;
LABEL_50:
    free(v36);
  }
  return 0;
}

uint64_t nw_protocol_http_messaging_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  void *handle;
  nw_protocol **v6;
  nw_protocol **v7;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *v13;
  _BOOL4 v14;
  char *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_messaging_replace_input_handler";
    v16 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_84;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_protocol_http_messaging_replace_input_handler";
          v19 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_protocol_http_messaging_replace_input_handler";
          v19 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      if (!v21)
        goto LABEL_66;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2082;
      v31 = (nw_protocol *)backtrace_string;
      v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_84;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_messaging_replace_input_handler";
    v19 = "%{public}s called with null protocol";
LABEL_83:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
    goto LABEL_84;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_messaging_replace_input_handler";
    v16 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_84;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_protocol_http_messaging_replace_input_handler";
          v19 = "%{public}s called with null http_messaging, backtrace limit exceeded";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v23 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_protocol_http_messaging_replace_input_handler";
          v19 = "%{public}s called with null http_messaging, no backtrace";
          goto LABEL_83;
        }
        goto LABEL_84;
      }
      if (!v23)
        goto LABEL_66;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2082;
      v31 = (nw_protocol *)backtrace_string;
      v22 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_84;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_messaging_replace_input_handler";
    v19 = "%{public}s called with null http_messaging";
    goto LABEL_83;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_messaging_replace_input_handler";
    v16 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_84;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_84;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v19 = "%{public}s called with null old_input_protocol";
      goto LABEL_83;
    }
    if (!v26)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_messaging_replace_input_handler";
        v19 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v24 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_messaging_replace_input_handler";
        v19 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    if (!v24)
      goto LABEL_66;
    *(_DWORD *)buf = 136446466;
    v29 = "nw_protocol_http_messaging_replace_input_handler";
    v30 = 2082;
    v31 = (nw_protocol *)backtrace_string;
    v22 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_182FBE000, v17, v18, v22, buf, 0x16u);
    goto LABEL_66;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_http_messaging_replace_input_handler";
    v16 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_84;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_messaging_replace_input_handler";
        v19 = "%{public}s called with null new_input_protocol";
        goto LABEL_83;
      }
LABEL_84:
      if (!v16)
        return 0;
      v15 = (char *)v16;
      goto LABEL_30;
    }
    if (!v26)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_messaging_replace_input_handler";
        v19 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v25 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_http_messaging_replace_input_handler";
        v19 = "%{public}s called with null new_input_protocol, no backtrace";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2082;
      v31 = (nw_protocol *)backtrace_string;
      v22 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }
LABEL_66:
    free(backtrace_string);
    goto LABEL_84;
  }
  if (*((nw_protocol **)handle + 6) == a2)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    nw_protocol_set_input_handler((uint64_t)handle, (uint64_t)a3);
    return 1;
  }
  v7 = (nw_protocol **)*((_QWORD *)handle + 20);
  v6 = (nw_protocol **)*((_QWORD *)handle + 21);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      v7 += 2;
      if (v7 == v6)
        goto LABEL_14;
    }
  }
  if (v7 != v6)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    *v7 = a3;
    return 1;
  }
LABEL_14:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v29 = "nw_protocol_http_messaging_replace_input_handler";
  v30 = 2048;
  v31 = a2;
  v9 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v9, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_27:
      _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0x16u);
      goto LABEL_28;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
      goto LABEL_27;
    }
    v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    v11 = type;
    v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v13)
    {
      if (!v14)
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
      goto LABEL_27;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446722;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = v13;
      _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v13);
  }
LABEL_28:
  if (v9)
  {
    v15 = (char *)v9;
LABEL_30:
    free(v15);
  }
  return 0;
}

uint64_t nw_protocol_http_messaging_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  nw_protocol *handle;
  nw_protocol *v6;
  nw_protocol *output_handler;
  nw_protocol *v8;
  nw_protocol_identifier **p_identifier;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  nw_protocol *v17;
  nw_protocol *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char identifier;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *v29;
  _BOOL4 v30;
  const char *v31;
  _BOOL4 v32;
  char v33;
  uint64_t v34;
  char v35;
  char *v36;
  const char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  char *backtrace_string;
  _BOOL4 v43;
  const char *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  char v47;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  nw_protocol *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  nw_protocol *v56;
  __int16 v57;
  unint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_protocol_http_messaging_remove_input_handler";
    v38 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v38, &type, &v47))
      goto LABEL_117;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (!os_log_type_enabled(v39, type))
        goto LABEL_117;
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http_messaging_remove_input_handler";
      v41 = "%{public}s called with null protocol";
LABEL_116:
      _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
      goto LABEL_117;
    }
    if (!v47)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = __nwlog_obj();
    v40 = type;
    v43 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    if (!v43)
      goto LABEL_103;
    *(_DWORD *)buf = 136446466;
    v50 = "nw_protocol_http_messaging_remove_input_handler";
    v51 = 2082;
    v52 = (nw_protocol *)backtrace_string;
    v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_102:
    _os_log_impl(&dword_182FBE000, v39, v40, v44, buf, 0x16u);
    goto LABEL_103;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_protocol_http_messaging_remove_input_handler";
    v38 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v38, &type, &v47))
      goto LABEL_117;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (!os_log_type_enabled(v39, type))
        goto LABEL_117;
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http_messaging_remove_input_handler";
      v41 = "%{public}s called with null http_messaging";
      goto LABEL_116;
    }
    if (!v47)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v41 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = __nwlog_obj();
    v40 = type;
    v45 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v41 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    if (!v45)
      goto LABEL_103;
    *(_DWORD *)buf = 136446466;
    v50 = "nw_protocol_http_messaging_remove_input_handler";
    v51 = 2082;
    v52 = (nw_protocol *)backtrace_string;
    v44 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_102;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_protocol_http_messaging_remove_input_handler";
    v38 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v38, &type, &v47))
      goto LABEL_117;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v41 = "%{public}s called with null other_protocol";
        goto LABEL_116;
      }
LABEL_117:
      if (!v38)
        return 0;
      v36 = (char *)v38;
      goto LABEL_75;
    }
    if (!v47)
    {
      v39 = __nwlog_obj();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v41 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = __nwlog_obj();
    v40 = type;
    v46 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v41 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      v50 = "nw_protocol_http_messaging_remove_input_handler";
      v51 = 2082;
      v52 = (nw_protocol *)backtrace_string;
      v44 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_102;
    }
LABEL_103:
    free(backtrace_string);
    goto LABEL_117;
  }
  if (handle->default_input_handler != a2)
  {
    output_handler = handle[2].output_handler;
    v6 = (nw_protocol *)handle[2].handle;
    v8 = output_handler;
    if (output_handler != v6)
    {
      while (*(nw_protocol **)v8->flow_id != a2)
      {
        v8 = (nw_protocol *)((char *)v8 + 16);
        if (v8 == v6)
          goto LABEL_29;
      }
    }
    if (v8 != v6)
    {
      p_identifier = &v8->identifier;
      if (&v8->identifier != (nw_protocol_identifier **)v6)
      {
        v10 = (char *)v6 - (char *)v8 - 32;
        if (v10 > 0xF)
        {
          v11 = ((char *)v8 - (char *)output_handler) >> 4;
          v12 = (v10 >> 4) + 1;
          v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFELL);
          v8 = (nw_protocol *)((char *)v8 + v13);
          v14 = (uint64_t)(&output_handler->callbacks + 2 * v11);
          v15 = v12 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v16 = *(_QWORD *)(v14 + 8);
            *(_QWORD *)(v14 - 24) = *(_QWORD *)(v14 - 8);
            *(_QWORD *)(v14 - 8) = v16;
            LODWORD(v16) = *(_DWORD *)(v14 + 16);
            *(_DWORD *)(v14 - 16) = *(_DWORD *)v14;
            *(_DWORD *)v14 = v16;
            v14 += 32;
            v15 -= 2;
          }
          while (v15);
          if (v12 == (v12 & 0x1FFFFFFFFFFFFFFELL))
            goto LABEL_17;
          p_identifier = (nw_protocol_identifier **)((char *)p_identifier + v13);
        }
        do
        {
          *(_QWORD *)v8->flow_id = *p_identifier;
          *(_DWORD *)&v8->flow_id[8] = *((_DWORD *)p_identifier + 2);
          v8 = (nw_protocol *)((char *)v8 + 16);
          p_identifier += 2;
        }
        while (p_identifier != (nw_protocol_identifier **)v6);
      }
LABEL_17:
      handle[2].handle = v8;
      goto LABEL_52;
    }
LABEL_29:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v50 = "nw_protocol_http_messaging_remove_input_handler";
    v51 = 2048;
    v52 = a2;
    v25 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v25, &type, &v47))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = gLogObj;
      v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        v52 = a2;
        v28 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_72:
        _os_log_impl(&dword_182FBE000, v26, v27, v28, buf, 0x16u);
        goto LABEL_73;
      }
      goto LABEL_73;
    }
    if (!v47)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = gLogObj;
      v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        v52 = a2;
        v28 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = gLogObj;
    v27 = type;
    v30 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v29)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        v52 = a2;
        v28 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446722;
      v50 = "nw_protocol_http_messaging_remove_input_handler";
      v51 = 2048;
      v52 = a2;
      v53 = 2082;
      v54 = v29;
      v31 = "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s";
LABEL_45:
      _os_log_impl(&dword_182FBE000, v26, v27, v31, buf, 0x20u);
      goto LABEL_46;
    }
    goto LABEL_46;
  }
  if (((uint64_t)handle[4].identifier & 0x40) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v50 = "nw_protocol_http_messaging_remove_input_handler";
    v51 = 2048;
    v52 = a2;
    v25 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v25, &type, &v47))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = gLogObj;
      v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        v52 = a2;
        v28 = "%{public}s Reentrantly removing default input handler %p";
        goto LABEL_72;
      }
LABEL_73:
      if (!v25)
        return 0;
      v36 = (char *)v25;
LABEL_75:
      free(v36);
      return 0;
    }
    if (!v47)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = gLogObj;
      v27 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        v52 = a2;
        v28 = "%{public}s Reentrantly removing default input handler %p, backtrace limit exceeded";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = gLogObj;
    v27 = type;
    v32 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v29)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http_messaging_remove_input_handler";
        v51 = 2048;
        v52 = a2;
        v28 = "%{public}s Reentrantly removing default input handler %p, no backtrace";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446722;
      v50 = "nw_protocol_http_messaging_remove_input_handler";
      v51 = 2048;
      v52 = a2;
      v53 = 2082;
      v54 = v29;
      v31 = "%{public}s Reentrantly removing default input handler %p, dumping backtrace:%{public}s";
      goto LABEL_45;
    }
LABEL_46:
    free(v29);
    goto LABEL_73;
  }
  nw_protocol_http_messaging_teardown((uint64_t)a1->handle, 89);
  v18 = handle[2].output_handler;
  v17 = (nw_protocol *)handle[2].handle;
  v19 = (char *)v17 - (char *)v18;
  if (v17 == v18)
  {
    v20 = 0;
    identifier = (char)handle[4].identifier;
  }
  else
  {
    if ((v19 & 0x8000000000000000) != 0)
      abort();
    v20 = (char *)operator new((char *)v17 - (char *)v18);
    v21 = v19 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF0);
    identifier = (char)handle[4].identifier;
    if ((v19 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      if (((uint64_t)handle[4].identifier & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447234;
          v50 = "nw_protocol_http_messaging_remove_input_handler";
          v51 = 2082;
          v52 = (nw_protocol *)((char *)handle + 188);
          v53 = 2080;
          v54 = " ";
          v55 = 2048;
          v56 = a2;
          v57 = 2048;
          v58 = v19 >> 4;
          _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfirst input handler %p bailed, restarting %zu input protocols", buf, 0x34u);
        }
      }
      v24 = 0;
      LOBYTE(handle[4].identifier) |= 0x40u;
      do
      {
        if (*(_DWORD *)&v20[v24 + 8] != 2)
          nw_protocol_notify(*(_QWORD **)&v20[v24], (uint64_t)handle, 22);
        v24 += 16;
      }
      while (v21 != v24);
      v33 = (char)handle[4].identifier;
      goto LABEL_50;
    }
  }
  v33 = identifier | 0x40;
LABEL_50:
  LOBYTE(handle[4].identifier) = v33 & 0xBF;
  nw_protocol_set_input_handler((uint64_t)handle, 0);
  if (v20)
    operator delete(v20);
LABEL_52:
  if (a2->output_handler != handle)
  {
    if (!handle[2].callbacks)
      goto LABEL_56;
    return 1;
  }
  nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (handle[2].callbacks)
    return 1;
LABEL_56:
  if (handle->default_input_handler || handle[2].output_handler != handle[2].handle)
    return 1;
  if (a3)
    v35 = 4;
  else
    v35 = 0;
  LOBYTE(handle[4].identifier) = (uint64_t)handle[4].identifier & 0xFB | v35;
  v34 = nw_protocol_remove_input_handler((uint64_t)handle->output_handler, (uint64_t)handle);
  if (a3)
  {
    LOBYTE(handle[4].identifier) |= 8u;
    nw_protocol_remove_instance((uint64_t)handle);
    nw_http_messaging_destroy((uint64_t)handle);
  }
  return v34;
}

uint64_t nw_protocol_http_messaging_get_parameters(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t result;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_messaging_get_parameters";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_get_parameters";
      v6 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v11)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http_messaging_get_parameters";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_http_messaging_get_parameters";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v3)
          return 0;
        goto LABEL_34;
      }
      if (!v8)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_get_parameters";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_32:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_33;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_messaging_get_parameters";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_get_parameters";
      v6 = "%{public}s called with null http_messaging";
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_get_parameters";
      v6 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_32;
    }
    v9 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!v9)
    {
      if (!v10)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_get_parameters";
      v6 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http_messaging_get_parameters";
      v15 = 2082;
      v16 = v9;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v9);
LABEL_33:
    if (!v3)
      return 0;
LABEL_34:
    free(v3);
    return 0;
  }
  result = handle[12];
  if (!result)
    return nw_protocol_get_parameters(handle[6]);
  return result;
}

uint64_t nw_protocol_http_messaging_get_remote_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t v2;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v2 = handle[6];
      if (v2)
        return nw_protocol_get_remote_endpoint(v2);
      else
        return handle[14];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http_messaging_get_remote_endpoint";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        v7 = "%{public}s called with null http_messaging";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        v7 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        v7 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_http_messaging_get_remote_endpoint";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_http_messaging_get_remote_endpoint";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_34;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http_messaging_get_remote_endpoint";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_http_messaging_get_remote_endpoint";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http_messaging_get_remote_endpoint";
    v7 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_34:
  if (v4)
    free(v4);
  return 0;
}

uint64_t nw_protocol_http_messaging_connect(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *handle;
  nw_protocol *output_handler;
  nw_protocol *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  uint64_t v11;
  id v12;
  _BOOL8 v13;
  char v14;
  nw_protocol *v15;
  nw_protocol_stack_t v16;
  unsigned __int8 *v17;
  NWConcrete_nw_protocol_options *v18;
  id v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  char *v28;
  _BOOL4 v29;
  char *v30;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  nw_protocol *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_http_messaging_connect";
    v7 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v7, &type, &v35))
      goto LABEL_49;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v8 = __nwlog_obj();
        v9 = type;
        v32 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (!v32)
            goto LABEL_38;
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_http_messaging_connect";
          v39 = 2082;
          v40 = (nw_protocol *)backtrace_string;
          v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
          goto LABEL_37;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_http_messaging_connect";
          v10 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_48;
        }
      }
      else
      {
        v8 = __nwlog_obj();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_http_messaging_connect";
          v10 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_48;
        }
      }
      goto LABEL_49;
    }
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_49;
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_http_messaging_connect";
    v10 = "%{public}s called with null protocol";
LABEL_48:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_49;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_http_messaging_connect";
    v7 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v7, &type, &v35))
      goto LABEL_49;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v8 = __nwlog_obj();
        v9 = type;
        v33 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (!v33)
            goto LABEL_38;
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_http_messaging_connect";
          v39 = 2082;
          v40 = (nw_protocol *)backtrace_string;
          v27 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
          goto LABEL_37;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_http_messaging_connect";
          v10 = "%{public}s called with null http_messaging, no backtrace";
          goto LABEL_48;
        }
      }
      else
      {
        v8 = __nwlog_obj();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_http_messaging_connect";
          v10 = "%{public}s called with null http_messaging, backtrace limit exceeded";
          goto LABEL_48;
        }
      }
      goto LABEL_49;
    }
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_49;
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_http_messaging_connect";
    v10 = "%{public}s called with null http_messaging";
    goto LABEL_48;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_http_messaging_connect";
    v7 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v7, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v8 = __nwlog_obj();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_http_messaging_connect";
          v10 = "%{public}s called with null other_protocol";
          goto LABEL_48;
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v8 = __nwlog_obj();
        v9 = type;
        v34 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (!v34)
            goto LABEL_38;
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_http_messaging_connect";
          v39 = 2082;
          v40 = (nw_protocol *)backtrace_string;
          v27 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
          goto LABEL_37;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_http_messaging_connect";
          v10 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_48;
        }
      }
      else
      {
        v8 = __nwlog_obj();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_http_messaging_connect";
          v10 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_48;
        }
      }
    }
LABEL_49:
    if (v7)
    {
      v30 = (char *)v7;
LABEL_58:
      free(v30);
    }
    return 0;
  }
  if (!a1->output_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_http_messaging_connect";
    v7 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v7, &type, &v35))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_http_messaging_connect";
      v10 = "%{public}s connect requires an output handler";
      goto LABEL_48;
    }
    if (!v35)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_http_messaging_connect";
      v10 = "%{public}s connect requires an output handler, backtrace limit exceeded";
      goto LABEL_48;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    v9 = type;
    v26 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v26)
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_http_messaging_connect";
      v10 = "%{public}s connect requires an output handler, no backtrace";
      goto LABEL_48;
    }
    if (!v26)
    {
LABEL_38:
      free(backtrace_string);
      goto LABEL_49;
    }
    *(_DWORD *)buf = 136446466;
    v38 = "nw_protocol_http_messaging_connect";
    v39 = 2082;
    v40 = (nw_protocol *)backtrace_string;
    v27 = "%{public}s connect requires an output handler, dumping backtrace:%{public}s";
LABEL_37:
    _os_log_impl(&dword_182FBE000, v8, v9, v27, buf, 0x16u);
    goto LABEL_38;
  }
  if (handle->default_input_handler != a2)
  {
    output_handler = handle[2].output_handler;
    v6 = (nw_protocol *)handle[2].handle;
    if (output_handler != v6)
    {
      while (*(nw_protocol **)output_handler->flow_id != a2)
      {
        output_handler = (nw_protocol *)((char *)output_handler + 16);
        if (output_handler == v6)
          goto LABEL_29;
      }
    }
    if (output_handler != v6)
    {
      v11 = 1;
      *(_DWORD *)&output_handler->flow_id[8] = 1;
      return v11;
    }
LABEL_29:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v38 = "nw_protocol_http_messaging_connect";
    v39 = 2048;
    v40 = a2;
    v21 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v21, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = gLogObj;
        v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_56;
        *(_DWORD *)buf = 136446466;
        v38 = "nw_protocol_http_messaging_connect";
        v39 = 2048;
        v40 = a2;
        v24 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_55:
        _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0x16u);
        goto LABEL_56;
      }
      if (!v35)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = gLogObj;
        v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_56;
        *(_DWORD *)buf = 136446466;
        v38 = "nw_protocol_http_messaging_connect";
        v39 = 2048;
        v40 = a2;
        v24 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
        goto LABEL_55;
      }
      v28 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = gLogObj;
      v23 = type;
      v29 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v28)
      {
        if (!v29)
          goto LABEL_56;
        *(_DWORD *)buf = 136446466;
        v38 = "nw_protocol_http_messaging_connect";
        v39 = 2048;
        v40 = a2;
        v24 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
        goto LABEL_55;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446722;
        v38 = "nw_protocol_http_messaging_connect";
        v39 = 2048;
        v40 = a2;
        v41 = 2082;
        v42 = v28;
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v28);
    }
LABEL_56:
    if (v21)
    {
      v30 = (char *)v21;
      goto LABEL_58;
    }
    return 0;
  }
  v12 = (id)nw_protocol_get_parameters((uint64_t)a2);
  v13 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v12, 0, 1);

  v14 = (char)handle[1].handle;
  if ((v14 & 1) != 0)
  {
    v15 = handle[1].output_handler;
    if (v15)
    {
      os_release(v15);
      v14 = (char)handle[1].handle;
    }
  }
  handle[1].output_handler = (nw_protocol *)v13;
  LOBYTE(handle[1].handle) = v14 | 1;
  v16 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v13);
  v17 = nw_parameters_copy_protocol_options_legacy(handle[1].output_handler, handle);
  v18 = nw_protocol_options_copy(v17);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  v19 = (id)nw_protocol_copy_http_messaging_definition_definition;
  nw_parameters_set_protocol_instance(v18, v20, (uint64_t)handle);
  if (v19)
    os_release(v19);
  nw_protocol_stack_replace_protocol_with_handle(v16, (uint64_t)handle, v18);
  nw_endpoint_add_edges_for_instance(handle[1].default_input_handler, handle->flow_id, 0);
  v11 = nw_protocol_connect((uint64_t)a1->output_handler, (uint64_t)a1);
  if (v18)
    os_release(v18);
  if (v17)
    os_release(v17);
  if (v16)
    os_release(v16);
  return v11;
}

void sub_183A782CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_http_messaging_connected(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *object_at_index;
  NSObject *v9;
  _BOOL4 is_tls;
  NSObject *v11;
  sec_protocol_metadata_t v12;
  const char *negotiated_protocol;
  NSObject *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  NSObject *v24;
  int *v25;
  uint64_t internal;
  uint64_t v27;
  char *v28;
  pthread_once_t *v29;
  void (*v30)(void);
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *parameters;
  NSObject *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  const char *v57;
  void (*v58)(void);
  pthread_once_t *v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  int v66;
  _BOOL4 is_quic_stream;
  const char *v68;
  NSObject *v69;
  const char *v70;
  NSObject *v71;
  os_log_type_t v72;
  const char *v73;
  const char *v74;
  NSObject *v75;
  os_log_type_t v76;
  const char *v77;
  char *v78;
  _BOOL4 v79;
  char *v80;
  _BOOL4 v81;
  char *v82;
  _BOOL4 v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  const char *v87;
  char *v88;
  NSObject *v89;
  char *backtrace_string;
  _BOOL4 v91;
  char *v92;
  _BOOL4 v93;
  const char *v94;
  _BOOL4 v95;
  NSObject *v96;
  char *v97;
  char v98;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v101;
  __int16 v102;
  char *v103;
  __int16 v104;
  const char *v105;
  __int16 v106;
  const char *v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_http_messaging_connected";
    v84 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (!__nwlog_fault(v84, &type, &v98))
      goto LABEL_193;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v85 = __nwlog_obj();
      v86 = type;
      if (!os_log_type_enabled(v85, type))
        goto LABEL_193;
      *(_DWORD *)buf = 136446210;
      v101 = "nw_protocol_http_messaging_connected";
      v87 = "%{public}s called with null protocol";
    }
    else if (v98)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v85 = __nwlog_obj();
      v86 = type;
      v91 = os_log_type_enabled(v85, type);
      if (backtrace_string)
      {
        if (v91)
        {
          *(_DWORD *)buf = 136446466;
          v101 = "nw_protocol_http_messaging_connected";
          v102 = 2082;
          v103 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_193:
        if (!v84)
          return;
        goto LABEL_194;
      }
      if (!v91)
        goto LABEL_193;
      *(_DWORD *)buf = 136446210;
      v101 = "nw_protocol_http_messaging_connected";
      v87 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v85 = __nwlog_obj();
      v86 = type;
      if (!os_log_type_enabled(v85, type))
        goto LABEL_193;
      *(_DWORD *)buf = 136446210;
      v101 = "nw_protocol_http_messaging_connected";
      v87 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_192;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_http_messaging_connected";
    v84 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (!__nwlog_fault(v84, &type, &v98))
      goto LABEL_193;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v98)
      {
        v85 = __nwlog_obj();
        v86 = type;
        if (!os_log_type_enabled(v85, type))
          goto LABEL_193;
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_http_messaging_connected";
        v87 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_192;
      }
      v92 = (char *)__nw_create_backtrace_string();
      v85 = __nwlog_obj();
      v86 = type;
      v93 = os_log_type_enabled(v85, type);
      if (!v92)
      {
        if (!v93)
          goto LABEL_193;
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_http_messaging_connected";
        v87 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_192;
      }
      if (v93)
      {
        *(_DWORD *)buf = 136446466;
        v101 = "nw_protocol_http_messaging_connected";
        v102 = 2082;
        v103 = v92;
        v94 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_177:
        _os_log_impl(&dword_182FBE000, v85, v86, v94, buf, 0x16u);
      }
LABEL_178:
      free(v92);
      if (!v84)
        return;
LABEL_194:
      free(v84);
      return;
    }
    v85 = __nwlog_obj();
    v86 = type;
    if (!os_log_type_enabled(v85, type))
      goto LABEL_193;
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_http_messaging_connected";
    v87 = "%{public}s called with null http_messaging";
LABEL_192:
    _os_log_impl(&dword_182FBE000, v85, v86, v87, buf, 0xCu);
    goto LABEL_193;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_http_messaging_connected";
    v84 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (!__nwlog_fault(v84, &type, &v98))
      goto LABEL_193;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v85 = __nwlog_obj();
      v86 = type;
      if (!os_log_type_enabled(v85, type))
        goto LABEL_193;
      *(_DWORD *)buf = 136446210;
      v101 = "nw_protocol_http_messaging_connected";
      v87 = "%{public}s called with null other_protocol";
      goto LABEL_192;
    }
    if (!v98)
    {
      v85 = __nwlog_obj();
      v86 = type;
      if (!os_log_type_enabled(v85, type))
        goto LABEL_193;
      *(_DWORD *)buf = 136446210;
      v101 = "nw_protocol_http_messaging_connected";
      v87 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_192;
    }
    v92 = (char *)__nw_create_backtrace_string();
    v85 = __nwlog_obj();
    v86 = type;
    v95 = os_log_type_enabled(v85, type);
    if (!v92)
    {
      if (!v95)
        goto LABEL_193;
      *(_DWORD *)buf = 136446210;
      v101 = "nw_protocol_http_messaging_connected";
      v87 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_192;
    }
    if (v95)
    {
      *(_DWORD *)buf = 136446466;
      v101 = "nw_protocol_http_messaging_connected";
      v102 = 2082;
      v103 = v92;
      v94 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_177;
    }
    goto LABEL_178;
  }
  if ((handle[272] & 0x10) != 0)
  {
    if ((handle[272] & 2) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      return;
    *(_DWORD *)buf = 136446722;
    v101 = "nw_protocol_http_messaging_connected";
    v102 = 2082;
    v103 = handle + 188;
    v104 = 2080;
    v105 = " ";
    v20 = "%{public}s %{public}s%signoring connected";
    v21 = v19;
    v22 = OS_LOG_TYPE_INFO;
LABEL_29:
    _os_log_impl(&dword_182FBE000, v21, v22, v20, buf, 0x20u);
    return;
  }
  v4 = (_QWORD *)*((_QWORD *)handle + 6);
  if (!v4)
  {
    if ((handle[272] & 2) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136446722;
    v101 = "nw_protocol_http_messaging_connected";
    v102 = 2082;
    v103 = handle + 188;
    v104 = 2080;
    v105 = " ";
    v20 = "%{public}s %{public}s%sno default input handler, ignoring connected";
    v21 = v23;
    v22 = OS_LOG_TYPE_ERROR;
    goto LABEL_29;
  }
  nw_protocol_connected(v4, (uint64_t)a2);
  if (*((nw_protocol **)handle + 4) == a2)
  {
    if ((handle[272] & 2) == 0)
    {
      if (gLogDatapath)
      {
        v96 = __nwlog_obj();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v101 = "nw_http_messaging_get_http_version_from_alpn";
          v102 = 2082;
          v103 = handle + 188;
          v104 = 2080;
          v105 = " ";
          _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    v5 = nw_protocol_copy_info(*((_QWORD *)handle + 4), 255);
    v6 = (void *)v5;
    if (v5
      && (v7 = *(_QWORD *)(v5 + 24) - *(_QWORD *)(v5 + 16)) != 0
      && (object_at_index = nw_array_get_object_at_index(v5, (v7 >> 3) - 1)) != 0)
    {
      v9 = object_at_index;
      is_tls = nw_protocol_metadata_is_tls(object_at_index);
      v11 = v9;
      v12 = v11;
      if (is_tls)
      {
        negotiated_protocol = sec_protocol_metadata_get_negotiated_protocol(v11);
        if ((handle[272] & 2) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v14 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            v101 = "nw_http_messaging_get_http_version_from_alpn";
            v102 = 2082;
            v103 = handle + 188;
            v104 = 2080;
            v105 = " ";
            v106 = 2082;
            v107 = negotiated_protocol;
            _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sFound TLS metadata with ALPN %{public}s", buf, 0x2Au);
          }
        }
        if (negotiated_protocol)
        {
          if (!strcmp(negotiated_protocol, "h2"))
          {
            v66 = 4;
            goto LABEL_149;
          }
          if (strcmp(negotiated_protocol, "http/1.1"))
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446466;
            v101 = "nw_http_messaging_get_http_version_from_alpn";
            v102 = 2080;
            v103 = (char *)negotiated_protocol;
            v15 = (char *)_os_log_send_and_compose_impl();
            type = OS_LOG_TYPE_ERROR;
            v98 = 0;
            if (__nwlog_fault(v15, &type, &v98))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                v16 = __nwlog_obj();
                v17 = type;
                if (os_log_type_enabled(v16, type))
                {
                  *(_DWORD *)buf = 136446466;
                  v101 = "nw_http_messaging_get_http_version_from_alpn";
                  v102 = 2080;
                  v103 = (char *)negotiated_protocol;
                  v18 = "%{public}s Invalid TLS ALPN %s";
LABEL_145:
                  _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0x16u);
                }
              }
              else if (v98)
              {
                v82 = (char *)__nw_create_backtrace_string();
                v16 = __nwlog_obj();
                v17 = type;
                v83 = os_log_type_enabled(v16, type);
                if (v82)
                {
                  if (v83)
                  {
                    *(_DWORD *)buf = 136446722;
                    v101 = "nw_http_messaging_get_http_version_from_alpn";
                    v102 = 2080;
                    v103 = (char *)negotiated_protocol;
                    v104 = 2082;
                    v105 = v82;
                    _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s Invalid TLS ALPN %s, dumping backtrace:%{public}s", buf, 0x20u);
                  }
                  free(v82);
                  goto LABEL_146;
                }
                if (v83)
                {
                  *(_DWORD *)buf = 136446466;
                  v101 = "nw_http_messaging_get_http_version_from_alpn";
                  v102 = 2080;
                  v103 = (char *)negotiated_protocol;
                  v18 = "%{public}s Invalid TLS ALPN %s, no backtrace";
                  goto LABEL_145;
                }
              }
              else
              {
                v16 = __nwlog_obj();
                v17 = type;
                if (os_log_type_enabled(v16, type))
                {
                  *(_DWORD *)buf = 136446466;
                  v101 = "nw_http_messaging_get_http_version_from_alpn";
                  v102 = 2080;
                  v103 = (char *)negotiated_protocol;
                  v18 = "%{public}s Invalid TLS ALPN %s, backtrace limit exceeded";
                  goto LABEL_145;
                }
              }
            }
LABEL_146:
            if (v15)
              free(v15);
            v66 = 0;
            goto LABEL_149;
          }
        }
        v66 = 3;
LABEL_149:
        os_release(v12);
        goto LABEL_150;
      }
      if (nw_protocol_metadata_is_quic_connection(v11))
      {

LABEL_81:
        v12 = nw_quic_copy_sec_protocol_metadata(v12);
        v68 = sec_protocol_metadata_get_negotiated_protocol(v12);
        if ((handle[272] & 2) == 0)
        {
          v69 = __nwlog_obj();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            v101 = "nw_http_messaging_get_http_version_from_alpn";
            v102 = 2082;
            v103 = handle + 188;
            v104 = 2080;
            v105 = " ";
            v106 = 2082;
            v107 = v68;
            _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sFound QUIC metadata with ALPN %{public}s", buf, 0x2Au);
          }
        }
        if (v68)
        {
          if (!strcmp(v68, "h3"))
          {
            v66 = 5;
            goto LABEL_141;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446466;
          v101 = "nw_http_messaging_get_http_version_from_alpn";
          v102 = 2080;
          v103 = (char *)v68;
          v70 = (const char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v98 = 0;
          if (__nwlog_fault(v70, &type, &v98))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              v71 = __nwlog_obj();
              v72 = type;
              if (!os_log_type_enabled(v71, type))
                goto LABEL_132;
              *(_DWORD *)buf = 136446466;
              v101 = "nw_http_messaging_get_http_version_from_alpn";
              v102 = 2080;
              v103 = (char *)v68;
              v73 = "%{public}s Invalid QUIC ALPN %s";
LABEL_131:
              _os_log_impl(&dword_182FBE000, v71, v72, v73, buf, 0x16u);
              goto LABEL_132;
            }
            if (!v98)
            {
              v71 = __nwlog_obj();
              v72 = type;
              if (!os_log_type_enabled(v71, type))
                goto LABEL_132;
              *(_DWORD *)buf = 136446466;
              v101 = "nw_http_messaging_get_http_version_from_alpn";
              v102 = 2080;
              v103 = (char *)v68;
              v73 = "%{public}s Invalid QUIC ALPN %s, backtrace limit exceeded";
              goto LABEL_131;
            }
            v78 = (char *)__nw_create_backtrace_string();
            v71 = __nwlog_obj();
            v72 = type;
            v79 = os_log_type_enabled(v71, type);
            if (!v78)
            {
              if (!v79)
                goto LABEL_132;
              *(_DWORD *)buf = 136446466;
              v101 = "nw_http_messaging_get_http_version_from_alpn";
              v102 = 2080;
              v103 = (char *)v68;
              v73 = "%{public}s Invalid QUIC ALPN %s, no backtrace";
              goto LABEL_131;
            }
            if (v79)
            {
              *(_DWORD *)buf = 136446722;
              v101 = "nw_http_messaging_get_http_version_from_alpn";
              v102 = 2080;
              v103 = (char *)v68;
              v104 = 2082;
              v105 = v78;
              _os_log_impl(&dword_182FBE000, v71, v72, "%{public}s Invalid QUIC ALPN %s, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v78);
          }
LABEL_132:
          if (v70)
          {
            v88 = (char *)v70;
LABEL_139:
            free(v88);
            goto LABEL_140;
          }
          goto LABEL_140;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v101 = "nw_http_messaging_get_http_version_from_alpn";
        v74 = (const char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v98 = 0;
        if (__nwlog_fault(v74, &type, &v98))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v75 = __nwlog_obj();
            v76 = type;
            if (!os_log_type_enabled(v75, type))
              goto LABEL_137;
            *(_DWORD *)buf = 136446210;
            v101 = "nw_http_messaging_get_http_version_from_alpn";
            v77 = "%{public}s Missing QUIC ALPN";
LABEL_136:
            _os_log_impl(&dword_182FBE000, v75, v76, v77, buf, 0xCu);
            goto LABEL_137;
          }
          if (!v98)
          {
            v75 = __nwlog_obj();
            v76 = type;
            if (!os_log_type_enabled(v75, type))
              goto LABEL_137;
            *(_DWORD *)buf = 136446210;
            v101 = "nw_http_messaging_get_http_version_from_alpn";
            v77 = "%{public}s Missing QUIC ALPN, backtrace limit exceeded";
            goto LABEL_136;
          }
          v80 = (char *)__nw_create_backtrace_string();
          v75 = __nwlog_obj();
          v76 = type;
          v81 = os_log_type_enabled(v75, type);
          if (!v80)
          {
            if (!v81)
              goto LABEL_137;
            *(_DWORD *)buf = 136446210;
            v101 = "nw_http_messaging_get_http_version_from_alpn";
            v77 = "%{public}s Missing QUIC ALPN, no backtrace";
            goto LABEL_136;
          }
          if (v81)
          {
            *(_DWORD *)buf = 136446466;
            v101 = "nw_http_messaging_get_http_version_from_alpn";
            v102 = 2082;
            v103 = v80;
            _os_log_impl(&dword_182FBE000, v75, v76, "%{public}s Missing QUIC ALPN, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v80);
        }
LABEL_137:
        if (v74)
        {
          v88 = (char *)v74;
          goto LABEL_139;
        }
LABEL_140:
        v66 = 0;
LABEL_141:
        if (!v12)
        {
LABEL_150:
          os_release(v6);
          v25 = 0;
          *((_DWORD *)handle + 46) = v66;
          switch(v66)
          {
            case 0:
              nw_protocol_http_messaging_error((nw_protocol *)handle, (nw_protocol *)handle);
              nw_protocol_http_messaging_disconnected((nw_protocol *)handle, (nw_protocol *)handle);
              return;
            case 3:
              goto LABEL_37;
            case 4:
              if (nw_protocol_http2_identifier::onceToken[0] != -1)
                dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_83230);
              v25 = &nw_protocol_http2_identifier::http2_protocol_identifier;
              if ((handle[272] & 1) != 0)
                goto LABEL_40;
              goto LABEL_159;
            case 5:
              if (nw_protocol_http3_identifier::onceToken[0] != -1)
                dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
              v25 = &nw_protocol_http3_identifier::http3_protocol_identifier;
              if ((handle[272] & 1) != 0)
                goto LABEL_40;
LABEL_159:
              if (nw_endpoint_is_registered(*((void **)handle + 14)))
              {
                nw_endpoint_add_edges_for_instance(*((void **)handle + 14), (unsigned __int8 *)handle, 1);
              }
              else if ((handle[272] & 2) == 0)
              {
                v89 = __nwlog_obj();
                if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  v101 = "nw_protocol_http_messaging_connected";
                  v102 = 2082;
                  v103 = handle + 188;
                  v104 = 2080;
                  v105 = " ";
                  _os_log_impl(&dword_182FBE000, v89, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sconnection's endpoint is not registered, cannot add edges", buf, 0x20u);
                }
              }
              break;
            default:
              goto LABEL_40;
          }
          goto LABEL_40;
        }
        goto LABEL_149;
      }
      is_quic_stream = nw_protocol_metadata_is_quic_stream(v12);

      if (is_quic_stream)
        goto LABEL_81;
    }
    else
    {
      if ((handle[272] & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446722;
          v101 = "nw_http_messaging_get_http_version_from_alpn";
          v102 = 2082;
          v103 = handle + 188;
          v104 = 2080;
          v105 = " ";
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sTop metadata isn't TLS, assuming HTTP/1.1", buf, 0x20u);
        }
      }
      if (!v6)
        goto LABEL_36;
    }
    os_release(v6);
LABEL_36:
    *((_DWORD *)handle + 46) = 3;
LABEL_37:
    if (nw_protocol_http1_identifier::onceToken != -1)
      dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
    v25 = &nw_protocol_http1_identifier::http1_protocol_identifier;
LABEL_40:
    internal = nw_protocol_create_internal((uint64_t)v25, *((void **)handle + 14), *((const char **)handle + 12), 0);
    *((_QWORD *)handle + 19) = internal;
    *(_QWORD *)(internal + 16) = *((_QWORD *)handle + 2);
    v27 = *((_QWORD *)handle + 6);
    nw_protocol_set_input_handler((uint64_t)handle, 0);
    nw_http_messaging_add_to_version_specific_protocol((uint64_t)handle, v27);
    nw_protocol_add_listen_handler(*((_QWORD *)handle + 19), (uint64_t)(handle + 64));
    nw_protocol_replace_input_handler(*((_QWORD *)handle + 4), (uint64_t)handle, *(_QWORD *)(v27 + 32));
    nw_protocol_set_output_handler((uint64_t)handle, 0);
    nw_protocol_connect(*(_QWORD *)(v27 + 32), v27);
    v28 = handle + 188;
    v29 = &nwlog_legacy_init(void)::init_once;
    v30 = nwlog_legacy_init_once;
    v31 = &unk_1ECD84000;
    v32 = "nw_protocol_http_messaging_connected";
    while (1)
    {
      v34 = *((_QWORD *)handle + 20);
      v33 = *((_QWORD *)handle + 21);
      v35 = v34;
      if (v34 != v33)
      {
        while (*(_DWORD *)(v35 + 8) == 2)
        {
          v35 += 16;
          if (v35 == v33)
            return;
        }
      }
      if (v35 == v33)
        return;
      v36 = *(_QWORD **)v35;
      v37 = *(_DWORD *)(v35 + 8);
      v38 = v35 + 16;
      if (v35 + 16 != v33)
      {
        v39 = v33 - v35 - 32;
        if (v39 >= 0x10)
        {
          v40 = (v35 - v34) >> 4;
          v41 = (v39 >> 4) + 1;
          v42 = 16 * (v41 & 0x1FFFFFFFFFFFFFFELL);
          v35 += v42;
          v43 = v34 + 16 * v40 + 24;
          v44 = v41 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v45 = *(_QWORD *)(v43 + 8);
            *(_QWORD *)(v43 - 24) = *(_QWORD *)(v43 - 8);
            *(_QWORD *)(v43 - 8) = v45;
            LODWORD(v45) = *(_DWORD *)(v43 + 16);
            *(_DWORD *)(v43 - 16) = *(_DWORD *)v43;
            *(_DWORD *)v43 = v45;
            v43 += 32;
            v44 -= 2;
          }
          while (v44);
          if (v41 == (v41 & 0x1FFFFFFFFFFFFFFELL))
            goto LABEL_53;
          v38 += v42;
        }
        do
        {
          *(_QWORD *)v35 = *(_QWORD *)v38;
          *(_DWORD *)(v35 + 8) = *(_DWORD *)(v38 + 8);
          v35 += 16;
          v38 += 16;
        }
        while (v38 != v33);
      }
LABEL_53:
      *((_QWORD *)handle + 21) = v35;
      parameters = (void *)nw_protocol_get_parameters((uint64_t)v36);
      if (nw_protocol_http_messaging_accept((uint64_t)handle, *((void **)handle + 14), parameters)
        && (nw_http_messaging_add_to_version_specific_protocol((uint64_t)handle, (uint64_t)v36) & 1) != 0)
      {
        if (v37 == 1)
          nw_protocol_connect(v36[4], (uint64_t)v36);
      }
      else
      {
        if ((handle[272] & 2) == 0)
        {
          pthread_once(v29, v30);
          networkd_settings_init();
          v47 = *((_QWORD *)v31 + 463);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446722;
            v101 = v32;
            v102 = 2082;
            v103 = v28;
            v104 = 2080;
            v105 = " ";
            _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sVersion specific protocol cannot accept stream", buf, 0x20u);
          }
        }
        v49 = (char *)*((_QWORD *)handle + 21);
        v48 = *((_QWORD *)handle + 22);
        if ((unint64_t)v49 >= v48)
        {
          v97 = v28;
          v51 = (char *)*((_QWORD *)handle + 20);
          v52 = (v49 - v51) >> 4;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 60)
            abort();
          v54 = v48 - (_QWORD)v51;
          if (v54 >> 3 > v53)
            v53 = v54 >> 3;
          v55 = (unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0;
          v56 = 0xFFFFFFFFFFFFFFFLL;
          if (!v55)
            v56 = v53;
          if (v56 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v57 = v32;
          v58 = v30;
          v59 = v29;
          v60 = v31;
          v61 = 16 * v56;
          v62 = (char *)operator new(16 * v56);
          v63 = &v62[16 * v52];
          *(_QWORD *)v63 = v36;
          *((_DWORD *)v63 + 2) = 2;
          if (v49 == v51)
          {
            v65 = &v62[16 * v52];
          }
          else
          {
            v64 = &v62[16 * v52];
            do
            {
              v65 = v64 - 16;
              *((_OWORD *)v64 - 1) = *((_OWORD *)v49 - 1);
              v49 -= 16;
              v64 -= 16;
            }
            while (v49 != v51);
          }
          v50 = v63 + 16;
          *((_QWORD *)handle + 20) = v65;
          *((_QWORD *)handle + 21) = v63 + 16;
          *((_QWORD *)handle + 22) = &v62[v61];
          if (v51)
            operator delete(v51);
          v31 = v60;
          v29 = v59;
          v30 = v58;
          v32 = v57;
          v28 = v97;
        }
        else
        {
          *(_QWORD *)v49 = v36;
          *((_DWORD *)v49 + 2) = 2;
          v50 = v49 + 16;
        }
        *((_QWORD *)handle + 21) = v50;
        nw_protocol_error(v36, (uint64_t)handle);
        nw_protocol_disconnected(v36, (uint64_t)handle);
      }
    }
  }
}

void sub_183A79750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_http_messaging_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  _BOOL4 v12;
  char *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  char *v20;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  nw_protocol *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_messaging_disconnect";
    v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_disconnect";
      v17 = "%{public}s called with null protocol";
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_http_messaging_disconnect";
          v28 = 2082;
          v29 = (nw_protocol *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_74:
        if (!v14)
          return;
        goto LABEL_75;
      }
      if (!v19)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_disconnect";
      v17 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_disconnect";
      v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_73;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_messaging_disconnect";
    v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24))
      goto LABEL_74;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_messaging_disconnect";
        v17 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_73;
      }
      v20 = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21)
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_messaging_disconnect";
        v17 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_73;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http_messaging_disconnect";
        v28 = 2082;
        v29 = (nw_protocol *)v20;
        v22 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_58:
        _os_log_impl(&dword_182FBE000, v15, v16, v22, buf, 0x16u);
      }
LABEL_59:
      free(v20);
      if (!v14)
        return;
LABEL_75:
      v13 = (char *)v14;
LABEL_31:
      free(v13);
      return;
    }
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_74;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_messaging_disconnect";
    v17 = "%{public}s called with null http_messaging";
LABEL_73:
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
    goto LABEL_74;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_messaging_disconnect";
    v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v14, &type, &v24))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_disconnect";
      v17 = "%{public}s called with null other_protocol";
      goto LABEL_73;
    }
    if (!v24)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_disconnect";
      v17 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_73;
    }
    v20 = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_disconnect";
      v17 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_73;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_http_messaging_disconnect";
      v28 = 2082;
      v29 = (nw_protocol *)v20;
      v22 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  if (*((nw_protocol **)handle + 6) != a2)
  {
    nw_protocol_disconnected(a2, (uint64_t)handle);
    v4 = *((_QWORD *)handle + 20);
    v5 = *((_QWORD *)handle + 21);
    if (v4 != v5)
    {
      while (*(nw_protocol **)v4 != a2)
      {
        v4 += 16;
        if (v4 == v5)
          goto LABEL_15;
      }
    }
    if (v4 != v5)
    {
      *(_DWORD *)(v4 + 8) = 2;
      return;
    }
LABEL_15:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_http_messaging_disconnect";
    v28 = 2048;
    v29 = a2;
    v7 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v7, &type, &v24))
      goto LABEL_29;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http_messaging_disconnect";
        v28 = 2048;
        v29 = a2;
        v10 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_28:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0x16u);
      }
    }
    else if (v24)
    {
      v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v11)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          v27 = "nw_protocol_http_messaging_disconnect";
          v28 = 2048;
          v29 = a2;
          v30 = 2082;
          v31 = v11;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v11);
        goto LABEL_29;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http_messaging_disconnect";
        v28 = 2048;
        v29 = a2;
        v10 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
        goto LABEL_28;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http_messaging_disconnect";
        v28 = 2048;
        v29 = a2;
        v10 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
        goto LABEL_28;
      }
    }
LABEL_29:
    if (!v7)
      return;
    v13 = (char *)v7;
    goto LABEL_31;
  }
  if ((handle[272] & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "nw_protocol_http_messaging_disconnect";
      v28 = 2082;
      v29 = (nw_protocol *)(handle + 188);
      v30 = 2080;
      v31 = " ";
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sdisconnecting output handler", buf, 0x20u);
    }
  }
  handle[272] |= 0x10u;
  nw_protocol_disconnect(*((_QWORD **)handle + 4), (uint64_t)handle);
}

void nw_protocol_http_messaging_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD **handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_messaging_disconnected";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_46;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_messaging_disconnected";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v9)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_messaging_disconnected";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http_messaging_disconnected";
        v18 = 2082;
        v19 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_46;
    }
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_messaging_disconnected";
    v7 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_46;
  }
  handle = (_QWORD **)a1->handle;
  if (handle)
  {
    if (a2)
    {
      nw_protocol_remove_instance((uint64_t)a1->handle);
      nw_protocol_disconnected(handle[6], (uint64_t)a2);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_messaging_disconnected";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v4, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_messaging_disconnected";
        v7 = "%{public}s called with null other_protocol";
        goto LABEL_45;
      }
      if (!v14)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_messaging_disconnected";
        v7 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      v10 = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v13 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v13)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_messaging_disconnected";
        v7 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_45;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http_messaging_disconnected";
        v18 = 2082;
        v19 = v10;
        v12 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
LABEL_46:
    if (!v4)
      return;
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_http_messaging_disconnected";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v4, &type, &v14))
    goto LABEL_46;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_messaging_disconnected";
    v7 = "%{public}s called with null http_messaging";
    goto LABEL_45;
  }
  if (!v14)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_messaging_disconnected";
    v7 = "%{public}s called with null http_messaging, backtrace limit exceeded";
    goto LABEL_45;
  }
  v10 = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11)
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_messaging_disconnected";
    v7 = "%{public}s called with null http_messaging, no backtrace";
    goto LABEL_45;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_protocol_http_messaging_disconnected";
    v18 = 2082;
    v19 = v10;
    v12 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_182FBE000, v5, v6, v12, buf, 0x16u);
  }
LABEL_31:
  free(v10);
  if (v4)
LABEL_47:
    free(v4);
}

void nw_protocol_http_messaging_error(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD **handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_messaging_error";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v3, &type, &v13))
      goto LABEL_46;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v13)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_messaging_error";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (!backtrace_string)
      {
        if (!v8)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_messaging_error";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_protocol_http_messaging_error";
        v17 = 2082;
        v18 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_46;
    }
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_messaging_error";
    v6 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_46;
  }
  handle = (_QWORD **)a1->handle;
  if (handle)
  {
    if (a2)
    {
      nw_protocol_error(handle[6], (uint64_t)a2);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_messaging_error";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v3, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_messaging_error";
        v6 = "%{public}s called with null other_protocol";
        goto LABEL_45;
      }
      if (!v13)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_messaging_error";
        v6 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      v9 = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v12 = os_log_type_enabled(v4, type);
      if (!v9)
      {
        if (!v12)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http_messaging_error";
        v6 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_45;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_protocol_http_messaging_error";
        v17 = 2082;
        v18 = v9;
        v11 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
LABEL_46:
    if (!v3)
      return;
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_http_messaging_error";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (!__nwlog_fault(v3, &type, &v13))
    goto LABEL_46;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_messaging_error";
    v6 = "%{public}s called with null http_messaging";
    goto LABEL_45;
  }
  if (!v13)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_messaging_error";
    v6 = "%{public}s called with null http_messaging, backtrace limit exceeded";
    goto LABEL_45;
  }
  v9 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10)
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http_messaging_error";
    v6 = "%{public}s called with null http_messaging, no backtrace";
    goto LABEL_45;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v16 = "nw_protocol_http_messaging_error";
    v17 = 2082;
    v18 = v9;
    v11 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_182FBE000, v4, v5, v11, buf, 0x16u);
  }
LABEL_31:
  free(v9);
  if (v3)
LABEL_47:
    free(v3);
}

uint64_t nw_protocol_http_messaging_copy_info(uint64_t a1, int a2)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_messaging_copy_info";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_copy_info";
      v6 = "%{public}s called with null protocol";
      goto LABEL_33;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_copy_info";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v8)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_copy_info";
      v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http_messaging_copy_info";
      v15 = 2082;
      v16 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v3)
      return 0;
LABEL_35:
    free(v3);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_messaging_copy_info";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_copy_info";
      v6 = "%{public}s called with null http_messaging";
      goto LABEL_33;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_copy_info";
      v6 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_33;
    }
    v9 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (v9)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v14 = "nw_protocol_http_messaging_copy_info";
        v15 = 2082;
        v16 = v9;
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v9);
      if (!v3)
        return 0;
      goto LABEL_35;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_messaging_copy_info";
      v6 = "%{public}s called with null http_messaging, no backtrace";
LABEL_33:
      _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  if (a2 == 253)
    return 0;
  return nw_protocol_common_copy_info(a1, a2);
}

uint64_t nw_protocol_http_messaging_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  _BYTE *handle;
  char *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  char *backtrace_string;
  _BOOL4 v22;
  const char *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  NSObject *v33;
  _BOOL4 v34;
  _BOOL4 v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  nw_listen_protocol *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_protocol_http_messaging_add_listen_handler";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v17, &type, &v36))
      goto LABEL_47;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_protocol_http_messaging_add_listen_handler";
      v20 = "%{public}s called with null protocol";
      goto LABEL_46;
    }
    if (!v36)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_protocol_http_messaging_add_listen_handler";
      v20 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v34 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v34)
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_protocol_http_messaging_add_listen_handler";
      v20 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_46;
    }
    if (!v34)
      goto LABEL_27;
    *(_DWORD *)buf = 136446466;
    v39 = "nw_protocol_http_messaging_add_listen_handler";
    v40 = 2082;
    v41 = backtrace_string;
    v23 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_26;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_protocol_http_messaging_add_listen_handler";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v17, &type, &v36))
      goto LABEL_47;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_protocol_http_messaging_add_listen_handler";
      v20 = "%{public}s called with null http_messaging";
      goto LABEL_46;
    }
    if (!v36)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_protocol_http_messaging_add_listen_handler";
      v20 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v35 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v35)
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_protocol_http_messaging_add_listen_handler";
      v20 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_46;
    }
    if (!v35)
      goto LABEL_27;
    *(_DWORD *)buf = 136446466;
    v39 = "nw_protocol_http_messaging_add_listen_handler";
    v40 = 2082;
    v41 = backtrace_string;
    v23 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_26;
  }
  if ((handle[272] & 2) == 0)
  {
    if (gLogDatapath)
    {
      v33 = __nwlog_obj();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v39 = "nw_protocol_http_messaging_add_listen_handler";
        v40 = 2082;
        v41 = handle + 188;
        v42 = 2080;
        v43 = " ";
        v44 = 2048;
        v45 = a2;
        _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled with listen_protocol %p", buf, 0x2Au);
      }
    }
  }
  v7 = (char *)*((_QWORD *)handle + 16);
  v8 = (char *)*((_QWORD *)handle + 17);
  if (v7 == v8 || (handle[272] & 1) == 0)
  {
    v9 = *((_QWORD *)handle + 18);
    if ((unint64_t)v8 >= v9)
    {
      v11 = v8 - v7;
      v12 = (v8 - v7) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        abort();
      v14 = v9 - (_QWORD)v7;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v24 = &v16[8 * v12];
      v25 = &v16[8 * v15];
      *v24 = a2;
      v10 = v24 + 1;
      if (v7 != v8)
      {
        if ((unint64_t)(v11 - 8) < 0x58)
          goto LABEL_81;
        if ((unint64_t)(v7 - v16) < 0x20)
          goto LABEL_81;
        v26 = ((unint64_t)(v11 - 8) >> 3) + 1;
        v27 = &v16[8 * v12 - 16];
        v28 = v8 - 16;
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        v24 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_81:
          do
          {
            v31 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *--v24 = v31;
          }
          while (v8 != v7);
          v7 = (char *)*((_QWORD *)handle + 16);
        }
      }
      *((_QWORD *)handle + 16) = v24;
      *((_QWORD *)handle + 17) = v10;
      *((_QWORD *)handle + 18) = v25;
      if (v7)
        operator delete(v7);
    }
    else
    {
      *(_QWORD *)v8 = a2;
      v10 = v8 + 8;
    }
    *((_QWORD *)handle + 17) = v10;
    a2->protocol_handler = a1;
    if ((a3 & 1) != 0)
      nw_protocol_remove_instance((uint64_t)a1);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_protocol_http_messaging_add_listen_handler";
  v17 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (!__nwlog_fault(v17, &type, &v36))
    goto LABEL_47;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = gLogObj;
    v19 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_protocol_http_messaging_add_listen_handler";
      v20 = "%{public}s already have a server listen handler, ignoring add";
LABEL_46:
      _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
      goto LABEL_47;
    }
    goto LABEL_47;
  }
  if (v36)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = gLogObj;
    v19 = type;
    v22 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_protocol_http_messaging_add_listen_handler";
        v20 = "%{public}s already have a server listen handler, ignoring add, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v22)
    {
LABEL_27:
      free(backtrace_string);
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446466;
    v39 = "nw_protocol_http_messaging_add_listen_handler";
    v40 = 2082;
    v41 = backtrace_string;
    v23 = "%{public}s already have a server listen handler, ignoring add, dumping backtrace:%{public}s";
LABEL_26:
    _os_log_impl(&dword_182FBE000, v18, v19, v23, buf, 0x16u);
    goto LABEL_27;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v18 = gLogObj;
  v19 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    v39 = "nw_protocol_http_messaging_add_listen_handler";
    v20 = "%{public}s already have a server listen handler, ignoring add, backtrace limit exceeded";
    goto LABEL_46;
  }
LABEL_47:
  if (v17)
    free(v17);
  return 0;
}

uint64_t nw_protocol_http_messaging_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  char *handle;
  nw_listen_protocol **v4;
  nw_listen_protocol **v5;
  nw_listen_protocol **v6;
  nw_listen_protocol **v7;
  char *v8;
  nw_listen_protocol **v9;
  nw_listen_protocol **v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  uint64_t result;
  char *backtrace_string;
  _BOOL4 v19;
  const char *v20;
  NSObject *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  nw_listen_protocol *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_messaging_remove_listen_handler";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_remove_listen_handler";
      v16 = "%{public}s called with null protocol";
      goto LABEL_39;
    }
    if (!v24)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_remove_listen_handler";
      v16 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v22)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_remove_listen_handler";
      v16 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_39;
    }
    if (!v22)
      goto LABEL_34;
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_http_messaging_remove_listen_handler";
    v28 = 2082;
    v29 = backtrace_string;
    v20 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_33;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_messaging_remove_listen_handler";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_remove_listen_handler";
      v16 = "%{public}s called with null http_messaging";
      goto LABEL_39;
    }
    if (!v24)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_remove_listen_handler";
      v16 = "%{public}s called with null http_messaging, backtrace limit exceeded";
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v23 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v23)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_messaging_remove_listen_handler";
      v16 = "%{public}s called with null http_messaging, no backtrace";
      goto LABEL_39;
    }
    if (!v23)
      goto LABEL_34;
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_http_messaging_remove_listen_handler";
    v28 = 2082;
    v29 = backtrace_string;
    v20 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
    goto LABEL_33;
  }
  if ((handle[272] & 2) == 0)
  {
    if (gLogDatapath)
    {
      v21 = __nwlog_obj();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v27 = "nw_protocol_http_messaging_remove_listen_handler";
        v28 = 2082;
        v29 = handle + 188;
        v30 = 2080;
        v31 = " ";
        v32 = 2048;
        v33 = a2;
        _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled with listen_protocol %p", buf, 0x2Au);
      }
    }
  }
  v5 = (nw_listen_protocol **)*((_QWORD *)handle + 16);
  v4 = (nw_listen_protocol **)*((_QWORD *)handle + 17);
  v6 = v4;
  if (v5 != v4)
  {
    v6 = (nw_listen_protocol **)*((_QWORD *)handle + 16);
    while (*v6 != a2)
    {
      if (++v6 == v4)
      {
        v6 = (nw_listen_protocol **)*((_QWORD *)handle + 17);
        break;
      }
    }
  }
  if (v6 == v4 || (v7 = v6 + 1, v6 + 1 == v4))
  {
    v8 = (char *)*((_QWORD *)handle + 16);
    v9 = (nw_listen_protocol **)*((_QWORD *)handle + 17);
    if (v6 == v4)
      goto LABEL_21;
    goto LABEL_18;
  }
  do
  {
    if (*v7 != a2)
      *v6++ = *v7;
    ++v7;
  }
  while (v7 != v4);
  v8 = (char *)*((_QWORD *)handle + 16);
  v9 = (nw_listen_protocol **)*((_QWORD *)handle + 17);
  if (v6 != v9)
  {
LABEL_18:
    v10 = v6;
    v11 = (char *)v9 - (char *)v6;
    v12 = (char *)v9 - ((char *)v10 + v11);
    if (v9 != (nw_listen_protocol **)((char *)v10 + v11))
    {
      memmove(v10, (char *)v10 + v11, (char *)v9 - ((char *)v10 + v11));
      v8 = (char *)*((_QWORD *)handle + 16);
    }
    v9 = (nw_listen_protocol **)((char *)v10 + v12);
    *((_QWORD *)handle + 17) = (char *)v10 + v12;
  }
LABEL_21:
  if ((char *)v4 - (char *)v5 == (char *)v9 - v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_messaging_remove_listen_handler";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_messaging_remove_listen_handler";
        v16 = "%{public}s ignoring request to remove protocol listen handler, does not match our handler";
LABEL_39:
        _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
        goto LABEL_40;
      }
      goto LABEL_40;
    }
    if (!v24)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_messaging_remove_listen_handler";
        v16 = "%{public}s ignoring request to remove protocol listen handler, does not match our handler, backtrace limit exceeded";
        goto LABEL_39;
      }
LABEL_40:
      if (v13)
        free(v13);
      return 0;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = gLogObj;
    v15 = type;
    v19 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_messaging_remove_listen_handler";
        v16 = "%{public}s ignoring request to remove protocol listen handler, does not match our handler, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (!v19)
    {
LABEL_34:
      free(backtrace_string);
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_http_messaging_remove_listen_handler";
    v28 = 2082;
    v29 = backtrace_string;
    v20 = "%{public}s ignoring request to remove protocol listen handler, does not match our handler, dumping backtrace:%{public}s";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v14, v15, v20, buf, 0x16u);
    goto LABEL_34;
  }
  a2->protocol_handler = 0;
  result = 1;
  if ((handle[272] & 8) == 0 && v8 == (char *)v9)
  {
    nw_protocol_http_messaging_teardown((uint64_t)handle, 0);
    return 1;
  }
  return result;
}

uint64_t nw_http_messaging_add_to_version_specific_protocol(uint64_t a1, uint64_t a2)
{
  void *parameters;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  id v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char *v18;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_http_messaging_add_to_version_specific_protocol";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_http_messaging_add_to_version_specific_protocol";
      v15 = "%{public}s called with null input_protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_http_messaging_add_to_version_specific_protocol";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_50:
        if (!v12)
          return 0;
LABEL_51:
        free(v12);
        return 0;
      }
      if (!v17)
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_http_messaging_add_to_version_specific_protocol";
      v15 = "%{public}s called with null input_protocol, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_http_messaging_add_to_version_specific_protocol";
      v15 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }
    goto LABEL_49;
  }
  parameters = (void *)nw_protocol_get_parameters(a2);
  if (!parameters)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_http_messaging_add_to_version_specific_protocol";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22))
      goto LABEL_50;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        v13 = __nwlog_obj();
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_50;
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http_messaging_add_to_version_specific_protocol";
        v15 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_49;
      }
      v18 = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v19 = os_log_type_enabled(v13, type);
      if (!v18)
      {
        if (!v19)
          goto LABEL_50;
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http_messaging_add_to_version_specific_protocol";
        v15 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_49;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_http_messaging_add_to_version_specific_protocol";
        v26 = 2082;
        v27 = v18;
        v20 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_182FBE000, v13, v14, v20, buf, 0x16u);
      }
LABEL_35:
      free(v18);
      if (!v12)
        return 0;
      goto LABEL_51;
    }
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_50;
    *(_DWORD *)buf = 136446210;
    v25 = "nw_http_messaging_add_to_version_specific_protocol";
    v15 = "%{public}s called with null parameters";
LABEL_49:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_50;
  }
  v5 = nw_parameters_copy_protocol_options_legacy(parameters, (nw_protocol *)a1);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_http_messaging_add_to_version_specific_protocol";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_http_messaging_add_to_version_specific_protocol";
      v15 = "%{public}s called with null options";
      goto LABEL_49;
    }
    if (!v22)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_http_messaging_add_to_version_specific_protocol";
      v15 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_49;
    }
    v18 = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21)
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_http_messaging_add_to_version_specific_protocol";
      v15 = "%{public}s called with null options, no backtrace";
      goto LABEL_49;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_http_messaging_add_to_version_specific_protocol";
      v26 = 2082;
      v27 = v18;
      v20 = "%{public}s called with null options, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  v6 = v5;
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  v7 = (id)nw_protocol_copy_http_messaging_definition_definition;
  v8 = *(_QWORD *)(a1 + 152);
  v9 = v6;
  *((_QWORD *)v9 + 2) = v8;

  if (v7)
    os_release(v7);
  nw_protocol_set_output_handler(a2, 0);
  v10 = nw_protocol_add_input_handler(*(_QWORD *)(a1 + 152), a2);
  os_release(v9);
  return v10;
}

BOOL nw_protocol_http_messaging_accept(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  void *v6;
  unsigned __int8 *v7;
  NSObject *v8;
  id v9;
  id v10;
  NSObject *v11;
  BOOL is_equal;
  id v13;
  id v14;
  _BOOL4 v15;
  NSObject *v16;
  _BOOL8 result;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  char *v24;
  _BOOL4 v25;
  const char *v26;
  _BOOL4 v27;
  _BOOL4 v28;
  char v29;
  os_log_type_t type[8];
  os_log_type_t *v31;
  uint64_t v32;
  char v33;
  _BYTE buf[24];
  const char *v35;
  __int128 v36;
  os_log_type_t *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
    v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v18, type, &v29))
      goto LABEL_74;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type[0];
      if (!os_log_type_enabled(v19, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      v21 = "%{public}s called with null protocol";
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = type[0];
      v23 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_74:
        if (!v18)
          return 0;
LABEL_75:
        free(v18);
        return 0;
      }
      if (!v23)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      v21 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v19 = __nwlog_obj();
      v20 = type[0];
      if (!os_log_type_enabled(v19, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      v21 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_73;
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
    v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v18, type, &v29))
      goto LABEL_74;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v29)
      {
        v19 = __nwlog_obj();
        v20 = type[0];
        if (!os_log_type_enabled(v19, type[0]))
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
        v21 = "%{public}s called with null http_messaging, backtrace limit exceeded";
        goto LABEL_73;
      }
      v24 = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = type[0];
      v25 = os_log_type_enabled(v19, type[0]);
      if (!v24)
      {
        if (!v25)
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
        v21 = "%{public}s called with null http_messaging, no backtrace";
        goto LABEL_73;
      }
      if (!v25)
        goto LABEL_55;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v24;
      v26 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
    v19 = __nwlog_obj();
    v20 = type[0];
    if (!os_log_type_enabled(v19, type[0]))
      goto LABEL_74;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
    v21 = "%{public}s called with null http_messaging";
LABEL_73:
    _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
    goto LABEL_74;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
    v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v18, type, &v29))
      goto LABEL_74;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type[0];
      if (!os_log_type_enabled(v19, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      v21 = "%{public}s called with null endpoint";
      goto LABEL_73;
    }
    if (!v29)
    {
      v19 = __nwlog_obj();
      v20 = type[0];
      if (!os_log_type_enabled(v19, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      v21 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_73;
    }
    v24 = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = type[0];
    v27 = os_log_type_enabled(v19, type[0]);
    if (!v24)
    {
      if (!v27)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      v21 = "%{public}s called with null endpoint, no backtrace";
      goto LABEL_73;
    }
    if (!v27)
      goto LABEL_55;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v24;
    v26 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_54:
    _os_log_impl(&dword_182FBE000, v19, v20, v26, buf, 0x16u);
    goto LABEL_55;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
    v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v18, type, &v29))
      goto LABEL_74;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type[0];
      if (!os_log_type_enabled(v19, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      v21 = "%{public}s called with null parameters";
      goto LABEL_73;
    }
    if (!v29)
    {
      v19 = __nwlog_obj();
      v20 = type[0];
      if (!os_log_type_enabled(v19, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      v21 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_73;
    }
    v24 = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = type[0];
    v28 = os_log_type_enabled(v19, type[0]);
    if (!v24)
    {
      if (!v28)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      v21 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_73;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v24;
      v26 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
LABEL_55:
    free(v24);
    if (!v18)
      return 0;
    goto LABEL_75;
  }
  v6 = *(void **)(v3 + 96);
  if (v6)
  {
    v7 = nw_parameters_copy_protocol_options_legacy(v6, (nw_protocol *)v3);
    if (v7)
    {
      v8 = v7;
      v9 = a2;
      v10 = a3;
      v11 = nw_protocol_options_copy_definition(v8);
      if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
      is_equal = nw_protocol_definition_is_equal(v11, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

      if (is_equal)
      {
        *(_QWORD *)type = 0;
        v31 = type;
        v32 = 0x2020000000;
        v33 = 1;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nw_http_messaging_options_can_accept_block_invoke;
        v35 = (const char *)&unk_1E14AA288;
        v37 = type;
        v13 = v9;
        *(_QWORD *)&v36 = v13;
        v14 = v10;
        *((_QWORD *)&v36 + 1) = v14;
        nw_protocol_options_access_handle(v8, buf);
        v15 = *((_BYTE *)v31 + 24) == 0;

        _Block_object_dispose(type, 8);
        if (v15)
        {
          if ((*(_BYTE *)(v3 + 272) & 2) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_protocol_http_messaging_accept";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v3 + 188;
              *(_WORD *)&buf[22] = 2080;
              v35 = " ";
              LOWORD(v36) = 2112;
              *(_QWORD *)((char *)&v36 + 2) = v13;
              _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sOverrided accept handler for endpoint %@ rejected join attempt", buf, 0x2Au);
            }
          }
          os_release(v8);
          return 0;
        }
      }
      else
      {

      }
      os_release(v8);
    }
  }
  result = 1;
  switch(*(_DWORD *)(v3 + 184))
  {
    case 0:
      return result;
    case 3:
      result = nw_protocol_http1_accept(*(_QWORD *)(v3 + 152), (uint64_t)a2, (uint64_t)a3);
      break;
    case 4:
      result = nw_protocol_http2_accept(*(_QWORD *)(v3 + 152));
      break;
    case 5:
      result = nw_protocol_http3_accept(*(_QWORD *)(v3 + 152));
      break;
    default:
      return 0;
  }
  return result;
}

void sub_183A7CD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double __nw_protocol_http_messaging_identifier_block_invoke()
{
  double result;

  strcpy((char *)nw_protocol_http_messaging_identifier::protocol_identifier, "http_messaging");
  *(_QWORD *)&result = 0x200000004;
  qword_1EDCE5230 = 0x200000004;
  return result;
}

uint64_t nw_http_field_name_find_well_known(unint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  uint64_t result;
  NSObject *v4;
  void *v5;

  if (a1)
  {
    v1 = (a1 - (unint64_t)":method") >> 5;
    if (((a1 - (_QWORD)":method") & 0x1F) != 0)
      LODWORD(v1) = -1;
    if (a1 <= (unint64_t)"Multipath")
      v2 = v1;
    else
      v2 = -1;
    if (a1 >= (unint64_t)":method")
      return v2;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    v5 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v5);
    if ((_DWORD)result)
    {
      __break(1u);
    }
    else
    {
      free(v5);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t nw_http_is_valid_token_char(unsigned __int8 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  if (a1 - 48 < 0xA || (a1 & 0xDFu) - 65 < 0x1A)
    return 1;
  result = 1;
  switch(v1)
  {
    case '!':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '*':
    case '+':
    case '-':
    case '.':
    case '^':
    case '_':
    case '|':
    case '~':
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t nw_http_field_name_is_valid(unsigned __int8 *a1, char *a2)
{
  unint64_t v4;
  BOOL v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  char v9;
  uint64_t result;
  int v11;
  NSObject *v12;
  void *v13;

  if (a1)
  {
    v4 = a1 - ":method";
    v5 = a1 < ":method" || a1 > "Multipath";
    if (!v5 && (v4 & 0x1F) == 0 && (v4 >> 5) != -1)
    {
LABEL_13:
      if (a2)
      {
        v9 = 0;
LABEL_15:
        *a2 = v9;
      }
      return 1;
    }
  }
  else
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    v13 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v13);
    if ((_DWORD)result)
    {
      __break(1u);
      return result;
    }
    free(v13);
    if (nw_http_field_name_find_well_known(0) != -1)
      goto LABEL_13;
  }
  v8 = *a1;
  v6 = a1 + 1;
  v7 = v8;
  v9 = 1;
  while (1)
  {
    result = nw_http_is_valid_token_char(v7);
    if (!(_DWORD)result)
      return result;
    v9 &= (v7 - 91) < 0xE6u;
    v11 = *v6++;
    v7 = v11;
    if (!v11)
    {
      if (a2)
        goto LABEL_15;
      return 1;
    }
  }
}

BOOL nw_http_field_value_is_valid(_BYTE *a1)
{
  int v2;
  _BOOL8 result;
  unsigned __int8 *v4;
  BOOL v5;
  int v6;
  NSObject *v8;
  void *v9;

  if (a1)
  {
    v2 = *a1;
    if (*a1)
      goto LABEL_3;
    return 1;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (result)
  {
    __break(1u);
    return result;
  }
  free(v9);
  v2 = MEMORY[0];
  if (!MEMORY[0])
    return 1;
LABEL_3:
  if (v2 != 9 && v2 != 32)
  {
    v4 = a1 - 1;
    while (1)
    {
      v5 = (v2 - 33) < 0x5E || v2 == 9;
      if (!v5 && v2 != 32 && (v2 & 0x80) == 0)
        break;
      v2 = v4[2];
      ++v4;
      if (!v2)
      {
        v6 = *v4;
        return v6 != 9 && v6 != 32;
      }
    }
  }
  return 0;
}

uint64_t nw_http_field_has_name(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;

  if (a1)
  {
    if (a2)
      return _nw_http_field_has_name(a1, a2);
  }
  else
  {
    __nwlog_obj();
    v5 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    v6 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v6);
    if ((_DWORD)result)
      goto LABEL_8;
    free(v6);
    if (a2)
      return _nw_http_field_has_name(a1, a2);
  }
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  v8 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v8);
  if (!(_DWORD)result)
  {
    free(v8);
    return _nw_http_field_has_name(a1, a2);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t nw_http_field_set_value(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *v7;

  if (a1)
  {
    if (a2)
      return _nw_http_field_set_value();
  }
  else
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    v5 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v5);
    if ((_DWORD)result)
      goto LABEL_8;
    free(v5);
    if (a2)
      return _nw_http_field_set_value();
  }
  __nwlog_obj();
  v6 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  v7 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v7);
  if (!(_DWORD)result)
  {
    free(v7);
    return _nw_http_field_set_value();
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_field_access(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
LABEL_3:
      _nw_http_field_access(a1, v4);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    v6 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v6))
      goto LABEL_8;
    free(v6);
    if (v4)
      goto LABEL_3;
  }
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  v8 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v8))
  {
    free(v8);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_field_access_canonical(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
LABEL_3:
      _nw_http_field_access_canonical(a1, v4);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    v6 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v6))
      goto LABEL_8;
    free(v6);
    if (v4)
      goto LABEL_3;
  }
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  v8 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v8))
  {
    free(v8);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

uint64_t nw_http_field_set_indexing_strategy(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  NSObject *v5;
  void *v6;

  if (a1)
    return _nw_http_field_set_indexing_strategy(a1, a2);
  __nwlog_obj();
  v5 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  v6 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v6);
  if (!(_DWORD)result)
  {
    free(v6);
    return _nw_http_field_set_indexing_strategy(a1, a2);
  }
  __break(1u);
  return result;
}

uint64_t nw_http_field_get_indexing_strategy(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  void *v4;

  if (a1)
    return _nw_http_field_get_indexing_strategy(a1);
  __nwlog_obj();
  v3 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v4);
  if (!(_DWORD)result)
  {
    free(v4);
    return _nw_http_field_get_indexing_strategy(a1);
  }
  __break(1u);
  return result;
}

BOOL nw_http_fields_copy(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2 = _nw_http_fields_copy((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_fields_is_equal(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t is_equal;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      is_equal = _nw_http_fields_is_equal((uint64_t)v3);

      return is_equal;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_fields_get_count(void *a1)
{
  id v1;
  uint64_t count;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    count = _nw_http_fields_get_count();

    return count;
  }
  __break(1u);
  return result;
}

void nw_http_fields_append(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_11;
    free(v7);
    if (a2)
      goto LABEL_3;
LABEL_7:
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v9))
      goto LABEL_11;
    free(v9);
    if (a3)
      goto LABEL_4;
    goto LABEL_9;
  }
  if (!a2)
    goto LABEL_7;
LABEL_3:
  if (a3)
  {
LABEL_4:
    _nw_http_fields_append(v5, a2, a3);

    return;
  }
LABEL_9:
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_4;
  }
LABEL_11:
  __break(1u);
}

void nw_http_fields_set_value_by_name(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_11;
    free(v7);
    if (a2)
      goto LABEL_3;
LABEL_7:
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v9))
      goto LABEL_11;
    free(v9);
    if (a3)
      goto LABEL_4;
    goto LABEL_9;
  }
  if (!a2)
    goto LABEL_7;
LABEL_3:
  if (a3)
  {
LABEL_4:
    _nw_http_fields_set_value_by_name(v5, a2, a3);

    return;
  }
LABEL_9:
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_4;
  }
LABEL_11:
  __break(1u);
}

void nw_http_fields_remove_by_name(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *v7;

  v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      _nw_http_fields_remove_by_name(v3, a2);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    v5 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v5))
      goto LABEL_8;
    free(v5);
    if (a2)
      goto LABEL_3;
  }
  __nwlog_obj();
  v6 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_fields_remove(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;

  v3 = a1;
  if (v3)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_fields_remove((uint64_t)v3, a2);

    return;
  }
  __break(1u);
}

BOOL nw_http_fields_copy_value_by_name(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  _BOOL8 result;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      v4 = _nw_http_fields_copy_value_by_name(v3, a2);

      return v4;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v7);
    if (result)
      goto LABEL_8;
    free(v7);
    if (a2)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_fields_have_field_with_name(void *a1, unint64_t a2)
{
  id v3;
  uint64_t have_field_with_name;
  _BOOL8 result;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v3, a2);

      return have_field_with_name;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v7);
    if (result)
      goto LABEL_8;
    free(v7);
    if (a2)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_fields_append_advanced(void *a1, unint64_t a2, uint64_t a3, char *a4, size_t a5, void *a6)
{
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  void *v20;

  v11 = a1;
  v12 = a6;
  if (v11)
  {
    if (a2)
      goto LABEL_3;
LABEL_8:
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    v16 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v16))
      goto LABEL_14;
    free(v16);
    if (a4)
      goto LABEL_4;
LABEL_10:
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    v18 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v18))
      goto LABEL_14;
    free(v18);
    if (v12)
      goto LABEL_5;
    goto LABEL_12;
  }
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  v14 = (void *)_os_log_send_and_compose_impl();

  if (__nwlog_abort((uint64_t)v14))
    goto LABEL_14;
  free(v14);
  if (!a2)
    goto LABEL_8;
LABEL_3:
  if (!a4)
    goto LABEL_10;
LABEL_4:
  if (v12)
  {
LABEL_5:
    _nw_http_fields_append_advanced((uint64_t)v11, a2, a3, a4, a5, v12);

    return;
  }
LABEL_12:
  __nwlog_obj();
  v19 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
  v20 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v20))
  {
    free(v20);
    goto LABEL_5;
  }
LABEL_14:
  __break(1u);
}

void nw_http_fields_access_value_by_name(void *a1, unint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;

  v5 = a1;
  v6 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    v8 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v8))
      goto LABEL_11;
    free(v8);
    if (a2)
      goto LABEL_3;
LABEL_7:
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    v10 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v10))
      goto LABEL_11;
    free(v10);
    if (v6)
      goto LABEL_4;
    goto LABEL_9;
  }
  if (!a2)
    goto LABEL_7;
LABEL_3:
  if (v6)
  {
LABEL_4:
    _nw_http_fields_access_value_by_name((uint64_t)v5, a2, v6);

    return;
  }
LABEL_9:
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  v12 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v12))
  {
    free(v12);
    goto LABEL_4;
  }
LABEL_11:
  __break(1u);
}

void nw_http_fields_access_field(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    if (v6)
    {
LABEL_3:
      _nw_http_fields_access_field((uint64_t)v5, a2, v7);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v9))
      goto LABEL_8;
    free(v9);
    if (v7)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_fields_enumerate_by_name(void *a1, unint64_t a2, void *a3)
{
  id v5;
  id v6;
  unint64_t v7;
  _BOOL8 result;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;

  v5 = a1;
  v6 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    v10 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v10);
    if (result)
      goto LABEL_11;
    free(v10);
    if (a2)
      goto LABEL_3;
LABEL_7:
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    v12 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v12);
    if (result)
      goto LABEL_11;
    free(v12);
    if (v6)
      goto LABEL_4;
    goto LABEL_9;
  }
  if (!a2)
    goto LABEL_7;
LABEL_3:
  if (v6)
  {
LABEL_4:
    v7 = _nw_http_fields_enumerate_by_name((uint64_t)v5, a2, v6);

    return v7;
  }
LABEL_9:
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  v14 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_4;
  }
LABEL_11:
  __break(1u);
  return result;
}

BOOL nw_http_fields_enumerate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      v6 = _nw_http_fields_enumerate((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_fields_enumerate_field(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      v6 = _nw_http_fields_enumerate_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_fields_enumerate_const_field(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_fields_enumerate_const_field((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

uint64_t nw_http_request_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  NSObject *v9;
  void *v10;

  if (a1)
    return _nw_http_request_create(a1, a2, a3, a4);
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  v10 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v10);
  if (!(_DWORD)result)
  {
    free(v10);
    return _nw_http_request_create(a1, a2, a3, a4);
  }
  __break(1u);
  return result;
}

uint64_t nw_http_request_create_from_url(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;

  if (a1)
  {
    if (a2)
      return _nw_http_request_create_from_url(a1, a2);
  }
  else
  {
    __nwlog_obj();
    v5 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    v6 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v6);
    if ((_DWORD)result)
      goto LABEL_8;
    free(v6);
    if (a2)
      return _nw_http_request_create_from_url(a1, a2);
  }
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  v8 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v8);
  if (!(_DWORD)result)
  {
    free(v8);
    return _nw_http_request_create_from_url(a1, a2);
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_copy(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2 = _nw_http_fields_copy((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_request_is_equal(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t is_equal;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      is_equal = _nw_http_fields_is_equal((uint64_t)v3);

      return is_equal;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_has_method(void *a1, uint64_t a2)
{
  id v3;
  uint64_t has_method;
  _BOOL8 result;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      has_method = _nw_http_request_has_method((uint64_t)v3);

      return has_method;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v7);
    if (result)
      goto LABEL_8;
    free(v7);
    if (a2)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_request_set_method(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *v7;

  v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      _nw_http_request_set_method(v3, a2);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    v5 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v5))
      goto LABEL_8;
    free(v5);
    if (a2)
      goto LABEL_3;
  }
  __nwlog_obj();
  v6 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_set_scheme(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;

  v3 = a1;
  if (v3)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_scheme(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_request_set_authority(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;

  v3 = a1;
  if (v3)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_authority(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_request_set_path(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;

  v3 = a1;
  if (v3)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_path(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_request_set_extended_connect_protocol(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;

  v3 = a1;
  if (v3)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_request_set_extended_connect_protocol(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_request_access_method(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_method((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_access_scheme(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_scheme((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_access_authority(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_authority((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_access_path(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_path((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_access_extended_connect_protocol(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_extended_connect_protocol((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_request_access_method_field(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_access_method_field((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_request_access_scheme_field(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      v6 = _nw_http_request_access_scheme_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_access_authority_field(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      v6 = _nw_http_request_access_authority_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_access_path_field(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      v6 = _nw_http_request_access_path_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_request_access_extended_connect_protocol_field(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      v6 = _nw_http_request_access_extended_connect_protocol_field((uint64_t)v3, v5);

      return v6;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_request_set_url(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *v7;

  v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      _nw_http_request_set_url(v3, a2);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    v5 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v5))
      goto LABEL_8;
    free(v5);
    if (a2)
      goto LABEL_3;
  }
  __nwlog_obj();
  v6 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_request_copy_url(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2 = _nw_http_request_copy_url(v1);

    return v2;
  }
  __break(1u);
  return result;
}

void nw_http_request_set_header_fields(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_request_set_header_fields((uint64_t)v3, (uint64_t)v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_request_copy_header_fields(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2 = _nw_http_request_copy_header_fields((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

uint64_t nw_http_response_create_well_known(uint64_t a1)
{
  if ((_DWORD)a1 == 507)
    return _nw_http_response_create(a1, "Insufficient Storage");
  else
    return _nw_http_response_create_well_known(a1);
}

BOOL nw_http_response_copy(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2 = _nw_http_fields_copy((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_response_is_equal(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t is_equal;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      is_equal = _nw_http_fields_is_equal((uint64_t)v3);

      return is_equal;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void nw_http_response_set_status_code(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;

  v3 = a1;
  if (v3)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_response_set_status_code(v3, a2);

    return;
  }
  __break(1u);
}

BOOL nw_http_response_get_status_code(void *a1)
{
  id v1;
  uint64_t status_code;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    status_code = _nw_http_response_get_status_code();

    return status_code;
  }
  __break(1u);
  return result;
}

void nw_http_response_set_reason_phrase(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;

  v3 = a1;
  if (v3)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v5))
  {
    free(v5);
LABEL_2:
    _nw_http_response_set_reason_phrase(v3, a2);

    return;
  }
  __break(1u);
}

void nw_http_response_access_reason_phrase(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_response_access_reason_phrase((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_response_access_status_field(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_response_access_status_field((uint64_t)v3, v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

void nw_http_response_set_header_fields(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
LABEL_3:
      _nw_http_response_set_header_fields((uint64_t)v3, (uint64_t)v5);

      return;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v7))
      goto LABEL_8;
    free(v7);
    if (v5)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v9))
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
}

BOOL nw_http_response_copy_header_fields(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2 = _nw_http_response_copy_header_fields((uint64_t)v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_add(void *a1, char *a2, size_t a3, char *a4, size_t a5)
{
  id v9;
  uint64_t v10;
  _BOOL8 result;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;

  v9 = a1;
  if (!v9)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    v13 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v13);
    if (result)
      goto LABEL_11;
    free(v13);
    if (a2)
      goto LABEL_3;
LABEL_7:
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    v15 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v15);
    if (result)
      goto LABEL_11;
    free(v15);
    if (a4)
      goto LABEL_4;
    goto LABEL_9;
  }
  if (!a2)
    goto LABEL_7;
LABEL_3:
  if (a4)
  {
LABEL_4:
    v10 = _nw_http_parsed_fields_add((int)v9, a2, a3, a4, a5);

    return v10;
  }
LABEL_9:
  __nwlog_obj();
  v16 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  v17 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
    goto LABEL_4;
  }
LABEL_11:
  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_copy_request(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2 = _nw_http_parsed_fields_copy_request(v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_copy_response(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2 = _nw_http_parsed_fields_copy_response(v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_parsed_fields_copy_trailer_fields(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  if (v1)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2 = _nw_http_parsed_fields_copy_trailer_fields(v1);

    return v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_fields_legacy_serialize(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  _BOOL8 result;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v3 = a1;
  if (v3)
  {
    if (a2)
    {
LABEL_3:
      v4 = _nw_http_fields_legacy_serialize(v3, a2);

      return v4;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v7);
    if (result)
      goto LABEL_8;
    free(v7);
    if (a2)
      goto LABEL_3;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t nw_http_request_create_from_url_request(void *a1)
{
  uint64_t result;
  NSObject *v3;
  void *v4;

  if (a1)
    return _nw_http_request_create_from_url_request(a1);
  __nwlog_obj();
  v3 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v4);
  if (!(_DWORD)result)
  {
    free(v4);
    return _nw_http_request_create_from_url_request(a1);
  }
  __break(1u);
  return result;
}

BOOL nw_http_request_copy_url_request(void *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;

  v5 = a1;
  if (v5)
  {
    if (a2)
    {
LABEL_3:
      v6 = _nw_http_request_copy_url_request((uint64_t)v5, a2, a3);

      return v6;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v9 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v9);
    if (result)
      goto LABEL_8;
    free(v9);
    if (a2)
      goto LABEL_3;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL nw_http_response_copy_url_response(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  _BOOL8 result;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;

  v7 = a1;
  v8 = a2;
  if (v7)
  {
    if (a4)
    {
LABEL_3:
      v9 = _nw_http_response_copy_url_response((uint64_t)v7, (uint64_t)v8, a3, a4);

      return v9;
    }
  }
  else
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    v12 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v12);
    if (result)
      goto LABEL_8;
    free(v12);
    if (a4)
      goto LABEL_3;
  }
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  v14 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_183A83F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_183A84F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_application_id_validate_bundle_id(NWConcrete_nw_application_id *a1)
{
  NWConcrete_nw_application_id *v1;
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)NEHelperCacheCopyAppUUIDMappingExtended();
  v3 = v2;
  if (v2 && object_getClass(v2) == (Class)MEMORY[0x1E0C812C8] && xpc_array_get_count(v3))
  {
    *((_OWORD *)v1 + 1) = *(_OWORD *)xpc_array_get_uuid(v3, 0);
    v6 = 1;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *((_QWORD *)v1 + 10);
      v8 = 136446466;
      v9 = "nw_application_id_validate_bundle_id";
      v10 = 2082;
      v11 = v5;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s Failed to convert from bundle ID (%{public}s) to UUID.", (uint8_t *)&v8, 0x16u);
    }

    v6 = 0;
  }

  return v6;
}

void sub_183A850CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_application_id_copy_redacted_description(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  _BOOL8 result;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  size_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_application_id_copy_redacted_description";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_application_id_copy_redacted_description";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null application_id", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_application_id_copy_redacted_description";
            v28 = 2082;
            v29 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_application_id_copy_redacted_description";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_application_id_copy_redacted_description";
          _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_27:
    if (v9)
      free(v9);
    v6 = 0;
    goto LABEL_5;
  }
  objc_msgSend(v1, "redactedDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "length");
  v5 = v4 + 1;
  if (v4 == -1)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v27 = "nw_application_id_copy_redacted_description";
    v13 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v13);
    if (result)
      goto LABEL_30;
    free(v13);
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v27 = "strict_calloc";
    LODWORD(v23) = 12;
    v22 = buf;
    v15 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v15);
    if (result)
      goto LABEL_30;
    free(v15);
  }
  v6 = malloc_type_calloc(1uLL, v5, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_4:
    objc_msgSend(v3, "getCString:maxLength:encoding:", v6, v5, 4, v22, v23);

LABEL_5:
    return (BOOL)v6;
  }
  __nwlog_obj();
  v16 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v27 = "strict_calloc";
  v28 = 2048;
  v29 = 1;
  v30 = 2048;
  v31 = v5;
  LODWORD(v23) = 32;
  v22 = buf;
  v17 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
    goto LABEL_4;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_183A85584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_application_id_create_with_uuid(unsigned __int8 *a1)
{
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!uuid_is_null(a1))
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]([NWConcrete_nw_application_id alloc], a1, 0, 0, 0);
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_application_id_create_with_uuid";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_application_id_create_with_uuid";
        v7 = "%{public}s uuid is null";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            v13 = "nw_application_id_create_with_uuid";
            v14 = 2082;
            v15 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s uuid is null, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v9)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_application_id_create_with_uuid";
        v7 = "%{public}s uuid is null, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_application_id_create_with_uuid";
        v7 = "%{public}s uuid is null, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v4)
    free(v4);
  return 0;
}

BOOL nw_application_id_create_with_audit_token(__int128 *a1)
{
  __int128 v1;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  __int128 v12;
  __int128 v13;
  _BYTE buf[22];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v12 = *a1;
  v13 = v1;
  if ((unint64_t)v12 | *((_QWORD *)&v12 + 1) | (unint64_t)v1 | *((_QWORD *)&v1 + 1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]([NWConcrete_nw_application_id alloc], buf, a1, 0, 0);
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_application_id_create_with_audit_token";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_audit_token";
        v7 = "%{public}s audit token is null";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_application_id_create_with_audit_token";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s audit token is null, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v9)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_audit_token";
        v7 = "%{public}s audit token is null, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_audit_token";
        v7 = "%{public}s audit token is null, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v4)
    free(v4);
  return 0;
}

BOOL nw_application_id_create_with_bundle_id(const char *a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  _BYTE buf[22];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]([NWConcrete_nw_application_id alloc], buf, 0, a1, 0);
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_application_id_create_with_bundle_id";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_bundle_id";
        v6 = "%{public}s called with null bundle_id";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_application_id_create_with_bundle_id";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null bundle_id, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v8)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_bundle_id";
        v6 = "%{public}s called with null bundle_id, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_bundle_id";
        v6 = "%{public}s called with null bundle_id, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v3)
    free(v3);
  return 0;
}

BOOL nw_application_id_create_with_external_bundle_id(const char *a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  _BYTE buf[22];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]([NWConcrete_nw_application_id alloc], buf, 0, a1, 1);
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_application_id_create_with_external_bundle_id";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_external_bundle_id";
        v6 = "%{public}s called with null bundle_id";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_application_id_create_with_external_bundle_id";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null bundle_id, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v8)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_external_bundle_id";
        v6 = "%{public}s called with null bundle_id, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_external_bundle_id";
        v6 = "%{public}s called with null bundle_id, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_application_id_set_persona(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(_OWORD *)(v3 + 88) = *a2;
      v5 = 1;
      goto LABEL_4;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_application_id_set_persona";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null persona", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v20)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null persona, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null persona, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_application_id_set_persona";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null persona, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_application_id_set_persona";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null application_id", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v20)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_application_id_set_persona";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_4:

  return v5;
}

void nw_application_id_get_persona(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_application_id_get_persona";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_application_id_get_persona";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_application_id_get_persona";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_application_id_get_persona";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_application_id_get_persona";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 88);
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_application_id_get_persona";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_application_id_get_persona";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null persona_id", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_application_id_get_persona";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null persona_id, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_application_id_get_persona";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null persona_id, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_application_id_get_persona";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null persona_id, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

BOOL nw_application_id_copy_serialized_bytes(void *a1, char **a2)
{
  const unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _OWORD *v6;
  _BOOL8 result;
  char *v8;
  size_t v9;
  char *v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  NSObject *v32;
  void *v33;
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;
  _OWORD *v41;
  __int16 v42;
  int64_t v43;
  __int16 v44;
  char *v45;
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (unsigned __int8 *)v3;
  if (!v3)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_application_id_copy_serialized_bytes";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v20, &type, &v34))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null application_id", buf, 0xCu);
      }
      goto LABEL_63;
    }
    if (!v34)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_63;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
      goto LABEL_63;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "nw_application_id_copy_serialized_bytes";
      v38 = 2082;
      v39 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (!a2)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_application_id_copy_serialized_bytes";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v20, &type, &v34))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null length", buf, 0xCu);
      }
LABEL_63:

LABEL_64:
      if (v20)
        free(v20);
      goto LABEL_5;
    }
    if (!v34)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v21, v31, "%{public}s called with null length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_63;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v28 = type;
    v29 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null length, no backtrace", buf, 0xCu);
      }
      goto LABEL_63;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "nw_application_id_copy_serialized_bytes";
      v38 = 2082;
      v39 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_49:

    free(backtrace_string);
    goto LABEL_64;
  }
  *a2 = 0;
  if (uuid_is_null(v3 + 16) || (v5 = *((unsigned int *)v4 + 8), v5 > 0x20))
  {
LABEL_5:
    v6 = 0;
LABEL_6:

    return (BOOL)v6;
  }
  v8 = (char *)(v5 + 36);
  v6 = malloc_type_malloc(v5 + 36, 0xF2B69DE5uLL);
  if (v6)
  {
LABEL_8:
    *v6 = *((_OWORD *)v4 + 1);
    v6[1] = *(_OWORD *)(v4 + 88);
    v9 = *((unsigned int *)v4 + 8);
    *((_DWORD *)v6 + 8) = v9;
    v10 = (char *)v6 + 36;
    if ((_DWORD)v9)
    {
      memcpy((char *)v6 + 36, v4 + 36, v9);
      v10 += *((unsigned int *)v4 + 8);
    }
    *a2 = v8;
    if ((char *)(v10 - (char *)v6) == v8)
      goto LABEL_6;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136447234;
    v37 = "nw_application_id_copy_serialized_bytes";
    v38 = 2048;
    v39 = v10;
    v40 = 2048;
    v41 = v6;
    v42 = 2048;
    v43 = v10 - (char *)v6;
    v44 = 2048;
    v45 = v8;
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v12, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136447234;
          v37 = "nw_application_id_copy_serialized_bytes";
          v38 = 2048;
          v39 = v10;
          v40 = 2048;
          v41 = v6;
          v42 = 2048;
          v43 = v10 - (char *)v6;
          v44 = 2048;
          v45 = v8;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu", buf, 0x34u);
        }
      }
      else if (v34)
      {
        v15 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v13, type);
        if (v15)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136447490;
            v37 = "nw_application_id_copy_serialized_bytes";
            v38 = 2048;
            v39 = v10;
            v40 = 2048;
            v41 = v6;
            v42 = 2048;
            v43 = v10 - (char *)v6;
            v44 = 2048;
            v45 = v8;
            v46 = 2082;
            v47 = v15;
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu, dumping backtrace:%{public}s", buf, 0x3Eu);
          }

          free(v15);
          if (!v12)
            goto LABEL_6;
          goto LABEL_29;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136447234;
          v37 = "nw_application_id_copy_serialized_bytes";
          v38 = 2048;
          v39 = v10;
          v40 = 2048;
          v41 = v6;
          v42 = 2048;
          v43 = v10 - (char *)v6;
          v44 = 2048;
          v45 = v8;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu, no backtrace", buf, 0x34u);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136447234;
          v37 = "nw_application_id_copy_serialized_bytes";
          v38 = 2048;
          v39 = v10;
          v40 = 2048;
          v41 = v6;
          v42 = 2048;
          v43 = v10 - (char *)v6;
          v44 = 2048;
          v45 = v8;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu, backtrace limit exceeded", buf, 0x34u);
        }
      }

    }
    if (!v12)
      goto LABEL_6;
LABEL_29:
    free(v12);
    goto LABEL_6;
  }
  __nwlog_obj();
  v32 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v37 = "strict_malloc";
  v38 = 2048;
  v39 = v8;
  v33 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v33);
  if (!result)
  {
    free(v33);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_183A87188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_application_id_create_self()
{
  id *v0;
  int v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  size_t v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uuid_t uu;
  __int128 v18;
  size_t __n[2];
  __int128 v20;
  int v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  *(_OWORD *)__n = 0u;
  v20 = 0u;
  v18 = 0u;
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v0 = (id *)(id)nw_context_copy_implicit_context::implicit_context;
  nw_path_shared_necp_fd(v0);

  if (necp_client_action())
  {
    v1 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_application_id_create_self";
      v24 = 1024;
      v25 = v1;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_GET_SIGNED_CLIENT_ID %{darwin.errno}d", buf, 0x12u);
    }

    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v23 = "nw_application_id_create_self";
    v24 = 1040;
    v25 = 16;
    v26 = 2096;
    v27 = (unsigned __int8 *)&v18;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s Got client UUID=%{uuid_t}.16P", buf, 0x1Cu);
  }

  v6 = nw_application_id_create_with_uuid((unsigned __int8 *)&v18);
  v3 = v6;
  if (v6)
  {
    v7 = LODWORD(__n[0]);
    if (LODWORD(__n[0]))
    {
      if (LODWORD(__n[0]) <= 0x20)
      {
        *(_DWORD *)(v6 + 32) = __n[0];
        memcpy((void *)(v6 + 36), (char *)__n + 4, v7);
        memset(uu, 0, sizeof(uu));
        uuid_clear(uu);
        gotLoadHelper_x20__OBJC_CLASS___UMUserManager(v8);
        if (objc_opt_class())
        {
          objc_msgSend(v0[476], "sharedManager");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "currentPersona");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "userPersonaUniqueString");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (v11)
          {
            v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v11);
            v13 = v12;
            if (v12)
            {
              objc_msgSend(v12, "getUUIDBytes:", uu);
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v14 = (id)gLogObj;
              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136446722;
                v23 = "nw_application_id_get_current_persona";
                v24 = 1040;
                v25 = 16;
                v26 = 2096;
                v27 = uu;
                _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s Current persona id is '%{uuid_t}.16P'", buf, 0x1Cu);
              }

              *(_OWORD *)(v3 + 88) = *(_OWORD *)uu;
              return v3;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v15 = (id)gLogObj;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              v23 = "nw_application_id_get_current_persona";
              v16 = "%{public}s Failed to get current persona id, personaUniqueIdentifier is not a valid UUID";
              goto LABEL_23;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v15 = (id)gLogObj;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              v23 = "nw_application_id_get_current_persona";
              v16 = "%{public}s Failed to get current persona id, no personaUniqueIdentifier set";
LABEL_23:
              _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0xCu);
            }
          }

        }
      }
    }
  }
  return v3;
}

void sub_183A875C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_application_id_set_self(void *a1)
{
  unsigned int *v1;
  size_t v2;
  id v3;
  uint64_t v4;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  _OWORD v23[3];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v16 = 1;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  nw_application_id_get_uuid(v1, v23);
  v2 = v1[8];
  if ((v2 - 1) <= 0x1F)
  {
    LODWORD(v23[1]) = v1[8];
    memcpy((char *)&v23[1] + 4, v1 + 9, v2);
  }
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v3 = (id)nw_context_copy_implicit_context::implicit_context;
  nw_path_shared_necp_fd(v3);

  if (!necp_client_action())
  {
    v4 = 0;
    goto LABEL_14;
  }
  v4 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v18 = "nw_application_id_set_self";
  v19 = 1024;
  v20 = v4;
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446466;
        v18 = "nw_application_id_set_self";
        v19 = 1024;
        v20 = v4;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d", buf, 0x12u);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          v18 = "nw_application_id_set_self";
          v19 = 1024;
          v20 = v4;
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v11, "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(backtrace_string);
        if (v6)
          goto LABEL_12;
        goto LABEL_14;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v18 = "nw_application_id_set_self";
        v19 = 1024;
        v20 = v4;
        _os_log_impl(&dword_182FBE000, v7, v11, "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d, no backtrace", buf, 0x12u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446466;
        v18 = "nw_application_id_set_self";
        v19 = 1024;
        v20 = v4;
        _os_log_impl(&dword_182FBE000, v7, v13, "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
      }
    }

  }
  if (v6)
LABEL_12:
    free(v6);
LABEL_14:

  return v4;
}

void sub_183A879F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_application_id_get_uuid(void *a1, _OWORD *a2)
{
  _OWORD *v3;
  char *v4;
  _OWORD *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (char *)v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_application_id_get_uuid";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_application_id_get_uuid";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_application_id_get_uuid";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8)
          goto LABEL_8;
LABEL_43:
        free(v8);
        goto LABEL_8;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_application_id_get_uuid";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_application_id_get_uuid";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (a2)
  {
    v5 = v3 + 1;
    if (uuid_is_null((const unsigned __int8 *)v3 + 16))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_application_id_get_uuid";
        v25 = 2112;
        v26 = v4;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %@ has no uuid", buf, 0x16u);
      }

    }
    else
    {
      *a2 = *v5;
    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_application_id_get_uuid";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_application_id_get_uuid";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null out_uuid", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v21)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_application_id_get_uuid";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null out_uuid, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_application_id_get_uuid";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_application_id_get_uuid";
    v25 = 2082;
    v26 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_43;
LABEL_8:

}

void sub_183A87F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_application_id_create_with_serialized_bytes(__int128 *a1, unint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type[16];
  _BYTE buf[22];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v9, type, &v26))
      goto LABEL_56;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null data", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (!v26)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v23 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v10, v23, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type[0];
    v18 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(backtrace_string);
    goto LABEL_56;
  }
  if (a2 <= 0x23)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v9, type, &v26))
      goto LABEL_56;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t)))", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (!v26)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t))), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v19 = type[0];
    v20 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t))), no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t))), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (a2 < 0x45)
  {
    v3 = *a1;
    *(_OWORD *)type = a1[1];
    *(_OWORD *)buf = v3;
    v4 = nw_application_id_create_with_uuid(buf);
    v5 = v4;
    if (v4)
    {
      *(_OWORD *)(v4 + 88) = *(_OWORD *)type;
      v6 = *((unsigned int *)a1 + 8);
      *(_DWORD *)(v4 + 32) = v6;
      if ((v6 - 1) <= 0x1F)
        memcpy((void *)(v4 + 36), (char *)a1 + 36, v6);
    }
    return v5;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
  v9 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v9, type, &v26))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32))", buf, 0xCu);
      }
LABEL_55:

      goto LABEL_56;
    }
    if (!v26)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32)), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type[0];
    v22 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32)), no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_application_id_create_with_serialized_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32)), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
LABEL_56:
  if (v9)
    free(v9);
  return 0;
}

uint64_t nw_application_id_delegate_socket(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  __int128 uu;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_application_id_delegate_socket";
    v6 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(uu) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v6, &uu, &type))
      goto LABEL_24;
    if (uu == 17)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = uu;
      if (os_log_type_enabled(v17, (os_log_type_t)uu))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_application_id_delegate_socket";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = uu;
      v21 = os_log_type_enabled(v17, (os_log_type_t)uu);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_application_id_delegate_socket";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_24:
        if (v6)
LABEL_25:
          free(v6);
LABEL_26:
        v9 = 0;
        goto LABEL_27;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_application_id_delegate_socket";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = uu;
      if (os_log_type_enabled(v17, (os_log_type_t)uu))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_application_id_delegate_socket";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_24;
  }
  uu = 0uLL;
  nw_application_id_get_uuid(v3, &uu);
  if (uuid_is_null((const unsigned __int8 *)&uu))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_application_id_delegate_socket";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v6, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_application_id_delegate_socket";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s Passed UUID is null", buf, 0xCu);
        }
      }
      else if (v23)
      {
        v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v12 = type;
        v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_application_id_delegate_socket";
            v28 = 2082;
            v29 = v11;
            _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s Passed UUID is null, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v11);
          if (!v6)
            goto LABEL_26;
          goto LABEL_25;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_application_id_delegate_socket";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s Passed UUID is null, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v14 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_application_id_delegate_socket";
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s Passed UUID is null, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    goto LABEL_24;
  }
  if (!setsockopt(a2, 0xFFFF, 4360, &uu, 0x10u))
    goto LABEL_26;
  v9 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_application_id_delegate_socket";
    v28 = 1024;
    LODWORD(v29) = a2;
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s Setting delegate socket uuid failed for fd: %u", buf, 0x12u);
  }

LABEL_27:
  return v9;
}

void sub_183A88BE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_application_id_is_equal(void *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  if (v3 && v4)
  {
    if (v3[2] != v4[2])
    {
      v6 = 0;
      goto LABEL_10;
    }
    v5 = v3[3] == v4[3];
  }
  else
  {
    v5 = v3 == v4;
  }
  v6 = v5;
LABEL_10:

  return v6;
}

void nw_application_id_get_audit_token(void *a1, _OWORD *a2)
{
  char *v3;
  char *v4;
  __int128 v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_application_id_get_audit_token";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_application_id_get_audit_token";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_application_id_get_audit_token";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8)
          goto LABEL_8;
LABEL_43:
        free(v8);
        goto LABEL_8;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_application_id_get_audit_token";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_application_id_get_audit_token";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (a2)
  {
    if (*(_QWORD *)(v3 + 108) | *(_QWORD *)(v3 + 116) | *(_QWORD *)(v3 + 124) | *(_QWORD *)(v3 + 132))
    {
      v5 = *(_OWORD *)(v3 + 124);
      *a2 = *(_OWORD *)(v3 + 108);
      a2[1] = v5;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_application_id_get_audit_token";
        v25 = 2112;
        v26 = v4;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %@ has no audit token", buf, 0x16u);
      }

    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_application_id_get_audit_token";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_application_id_get_audit_token";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null out_audit_token", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v21)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_application_id_get_audit_token";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null out_audit_token, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_application_id_get_audit_token";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null out_audit_token, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_application_id_get_audit_token";
    v25 = 2082;
    v26 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null out_audit_token, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_43;
LABEL_8:

}

uint64_t nw_application_id_get_bundle_id(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 10);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_application_id_get_bundle_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_application_id_get_bundle_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_application_id_get_bundle_id";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_application_id_get_bundle_id";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_application_id_get_bundle_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_parallel_array_create()
{
  uint64_t v0;
  _BOOL8 result;
  NSObject *v2;
  void *v3;

  objc_opt_class();
  v0 = _os_object_alloc();
  if (v0)
    goto LABEL_2;
  v2 = __nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  v3 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    atomic_store(0, (unsigned __int8 *)(v0 + 64));
    return v0;
  }
  __break(1u);
  return result;
}

void nw_parallel_array_append(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  char *v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  char *v19;
  _BOOL4 v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_parallel_array_append";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21))
      goto LABEL_47;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parallel_array_append";
      v16 = "%{public}s called with null parray";
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_parallel_array_append";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_47:
        if (v9)
          goto LABEL_6;
        return;
      }
      if (!v18)
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parallel_array_append";
      v16 = "%{public}s called with null parray, no backtrace";
    }
    else
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parallel_array_append";
      v16 = "%{public}s called with null parray, backtrace limit exceeded";
    }
LABEL_46:
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
    goto LABEL_47;
  }
  v4 = a1 + 16;
  v5 = a1 + 40;
  if (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_parallel_array_append";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21))
      goto LABEL_47;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parallel_array_append";
      v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
    }
    else if (v21)
    {
      v19 = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v20 = os_log_type_enabled(v14, type);
      if (v19)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_parallel_array_append";
          v25 = 2082;
          v26 = v19;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v19);
        if (v9)
          goto LABEL_6;
        return;
      }
      if (!v20)
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parallel_array_append";
      v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    }
    else
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parallel_array_append";
      v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
    }
    goto LABEL_46;
  }
  if ((unint64_t)nw_parallel_array_get_count((_QWORD *)a1) > 0xFFFFFFFFFFFFFFFDLL
    || (v8 = atomic_load((unsigned __int8 *)(a1 + 64))) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v24 = "nw_parallel_array_append";
    v9 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v9))
    {
LABEL_6:
      free(v9);
      return;
    }
    __break(1u);
  }
  else
  {
    v10 = *(void ***)(a1 + 24);
    if ((unint64_t)v10 >= *(_QWORD *)(a1 + 32))
    {
      v11 = std::vector<nw_object_wrapper_t>::__emplace_back_slow_path<nw_object *&>(v4, a2);
    }
    else
    {
      if (a2)
        *v10 = os_retain(a2);
      else
        *v10 = 0;
      v11 = v10 + 1;
    }
    *(_QWORD *)(a1 + 24) = v11;
    v12 = *(_QWORD **)(a1 + 48);
    if ((unint64_t)v12 >= *(_QWORD *)(a1 + 56))
    {
      *(_QWORD *)(a1 + 48) = std::vector<nw_object_wrapper_t>::__emplace_back_slow_path<nw_object *&>(v5, a3);
    }
    else
    {
      if (a3)
        v13 = os_retain(a3);
      else
        v13 = 0;
      *v12 = v13;
      *(_QWORD *)(a1 + 48) = v12 + 1;
    }
  }
}

uint64_t nw_parallel_array_get_count(_QWORD *a1)
{
  uint64_t result;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_parallel_array_get_count";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_parallel_array_get_count";
      v6 = "%{public}s called with null parray";
    }
    else
    {
      if (!v11)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_parallel_array_get_count";
        v6 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_parallel_array_get_count";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v3)
          return 0;
        goto LABEL_33;
      }
      if (!v8)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_parallel_array_get_count";
      v6 = "%{public}s called with null parray, no backtrace";
    }
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_32;
  }
  result = (uint64_t)(a1[3] - a1[2]) >> 3;
  if (result != (uint64_t)(a1[6] - a1[5]) >> 3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_parallel_array_get_count";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_parallel_array_get_count";
      v6 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_31;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_parallel_array_get_count";
      v6 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
      goto LABEL_31;
    }
    v9 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!v9)
    {
      if (!v10)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_parallel_array_get_count";
      v6 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
      goto LABEL_31;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_parallel_array_get_count";
      v15 = 2082;
      v16 = v9;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v9);
LABEL_32:
    if (!v3)
      return 0;
LABEL_33:
    free(v3);
    return 0;
  }
  return result;
}

void nw_parallel_array_get_at_index(_QWORD *a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  _BOOL4 v12;
  char *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  char *v20;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parallel_array_get_at_index";
    v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v14, &type, &v25))
      goto LABEL_78;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_78;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parallel_array_get_at_index";
        v17 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_77;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v19 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (!v19)
          goto LABEL_78;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parallel_array_get_at_index";
        v17 = "%{public}s called with null parray, no backtrace";
        goto LABEL_77;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_parallel_array_get_at_index";
        v29 = 2082;
        v30 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_78:
      if (v14)
        goto LABEL_79;
      return;
    }
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_78;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parallel_array_get_at_index";
    v17 = "%{public}s called with null parray";
    goto LABEL_77;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parallel_array_get_at_index";
    v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v14, &type, &v25))
      goto LABEL_78;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_78;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parallel_array_get_at_index";
        v17 = "%{public}s called with null first, backtrace limit exceeded";
        goto LABEL_77;
      }
      v20 = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21)
          goto LABEL_78;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_parallel_array_get_at_index";
        v17 = "%{public}s called with null first, no backtrace";
        goto LABEL_77;
      }
      if (!v21)
        goto LABEL_59;
      *(_DWORD *)buf = 136446466;
      v28 = "nw_parallel_array_get_at_index";
      v29 = 2082;
      v30 = v20;
      v22 = "%{public}s called with null first, dumping backtrace:%{public}s";
      goto LABEL_58;
    }
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_78;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parallel_array_get_at_index";
    v17 = "%{public}s called with null first";
LABEL_77:
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
    goto LABEL_78;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parallel_array_get_at_index";
    v14 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v14, &type, &v25))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_parallel_array_get_at_index";
      v17 = "%{public}s called with null second";
      goto LABEL_77;
    }
    if (!v25)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_parallel_array_get_at_index";
      v17 = "%{public}s called with null second, backtrace limit exceeded";
      goto LABEL_77;
    }
    v20 = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23)
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_parallel_array_get_at_index";
      v17 = "%{public}s called with null second, no backtrace";
      goto LABEL_77;
    }
    if (!v23)
      goto LABEL_59;
    *(_DWORD *)buf = 136446466;
    v28 = "nw_parallel_array_get_at_index";
    v29 = 2082;
    v30 = v20;
    v22 = "%{public}s called with null second, dumping backtrace:%{public}s";
LABEL_58:
    _os_log_impl(&dword_182FBE000, v15, v16, v22, buf, 0x16u);
    goto LABEL_59;
  }
  *a3 = 0;
  *a4 = 0;
  v4 = a1[2];
  v5 = (a1[3] - v4) >> 3;
  if (v5 == (uint64_t)(a1[6] - a1[5]) >> 3)
  {
    if (v5 > a2)
    {
      *a3 = *(_QWORD *)(v4 + 8 * a2);
      *a4 = *(_QWORD *)(a1[5] + 8 * a2);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v28 = "nw_parallel_array_get_at_index";
    v29 = 2048;
    v30 = (char *)a2;
    v7 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v7, &type, &v25))
      goto LABEL_21;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_parallel_array_get_at_index";
        v29 = 2048;
        v30 = (char *)a2;
        v10 = "%{public}s array index out of range: %lu";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0x16u);
      }
    }
    else if (v25)
    {
      v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v11)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          v28 = "nw_parallel_array_get_at_index";
          v29 = 2048;
          v30 = (char *)a2;
          v31 = 2082;
          v32 = v11;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s array index out of range: %lu, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v11);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_parallel_array_get_at_index";
        v29 = 2048;
        v30 = (char *)a2;
        v10 = "%{public}s array index out of range: %lu, no backtrace";
        goto LABEL_20;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_parallel_array_get_at_index";
        v29 = 2048;
        v30 = (char *)a2;
        v10 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:
    if (!v7)
      return;
    v13 = (char *)v7;
    goto LABEL_23;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_parallel_array_get_at_index";
  v14 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v14, &type, &v25))
    goto LABEL_78;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_78;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parallel_array_get_at_index";
    v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
    goto LABEL_77;
  }
  if (!v25)
  {
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_78;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parallel_array_get_at_index";
    v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
    goto LABEL_77;
  }
  v20 = (char *)__nw_create_backtrace_string();
  v15 = __nwlog_obj();
  v16 = type;
  v24 = os_log_type_enabled(v15, type);
  if (!v20)
  {
    if (!v24)
      goto LABEL_78;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_parallel_array_get_at_index";
    v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    goto LABEL_77;
  }
  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_parallel_array_get_at_index";
    v29 = 2082;
    v30 = v20;
    v22 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
    goto LABEL_58;
  }
LABEL_59:
  free(v20);
  if (v14)
  {
LABEL_79:
    v13 = (char *)v14;
LABEL_23:
    free(v13);
  }
}

void nw_parallel_array_remove_at_index(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  const char *v6;
  char *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  char *backtrace_string;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_parallel_array_remove_at_index";
    v6 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v6, &type, &v37))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_parallel_array_remove_at_index";
      v32 = "%{public}s called with null parray";
LABEL_75:
      _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0xCu);
      goto LABEL_76;
    }
    if (!v37)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_parallel_array_remove_at_index";
      v32 = "%{public}s called with null parray, backtrace limit exceeded";
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type;
    v34 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (!v34)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_parallel_array_remove_at_index";
      v32 = "%{public}s called with null parray, no backtrace";
      goto LABEL_75;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_parallel_array_remove_at_index";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_76:
    if (!v6)
      return;
LABEL_6:
    v7 = (char *)v6;
LABEL_46:
    free(v7);
    return;
  }
  v3 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  if (v3 == (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3)
  {
    if (v3 > a2)
    {
      if (atomic_load((unsigned __int8 *)(a1 + 64)))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        v40 = "nw_parallel_array_remove_at_index";
        v6 = (const char *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v6))
        {
          __break(1u);
          return;
        }
        goto LABEL_6;
      }
      v14 = *(_QWORD *)(a1 + 24);
      v15 = *(_QWORD *)(a1 + 16) + 8 * a2;
      v16 = v15 + 8;
      if (v15 + 8 == v14)
      {
        if (v16 == v15)
          goto LABEL_27;
      }
      else
      {
        do
        {
          if (*(_QWORD *)v15)
            os_release(*(void **)v15);
          v17 = v15 + 8;
          *(_QWORD *)v15 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          v18 = v15 + 16;
          v15 += 8;
        }
        while (v18 != v14);
        v16 = *(_QWORD *)(a1 + 24);
        v15 = v17;
        if (v16 == v17)
        {
LABEL_27:
          *(_QWORD *)(a1 + 24) = v15;
          v22 = *(_QWORD *)(a1 + 48);
          v23 = *(_QWORD *)(a1 + 40) + 8 * a2;
          v24 = v23 + 8;
          if (v23 + 8 == v22)
          {
            if (v24 == v23)
            {
LABEL_38:
              *(_QWORD *)(a1 + 48) = v23;
              return;
            }
          }
          else
          {
            do
            {
              if (*(_QWORD *)v23)
                os_release(*(void **)v23);
              v25 = v23 + 8;
              *(_QWORD *)v23 = *(_QWORD *)(v23 + 8);
              *(_QWORD *)(v23 + 8) = 0;
              v26 = v23 + 16;
              v23 += 8;
            }
            while (v26 != v22);
            v24 = *(_QWORD *)(a1 + 48);
            v23 = v25;
            if (v24 == v25)
              goto LABEL_38;
          }
          v27 = v24;
          do
          {
            v29 = *(void **)(v27 - 8);
            v27 -= 8;
            v28 = v29;
            if (v29)
              os_release(v28);
            *(_QWORD *)(v24 - 8) = 0;
            v24 = v27;
          }
          while (v27 != v23);
          goto LABEL_38;
        }
      }
      v19 = v16;
      do
      {
        v21 = *(void **)(v19 - 8);
        v19 -= 8;
        v20 = v21;
        if (v21)
          os_release(v20);
        *(_QWORD *)(v16 - 8) = 0;
        v16 = v19;
      }
      while (v19 != v15);
      goto LABEL_27;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v40 = "nw_parallel_array_remove_at_index";
    v41 = 2048;
    v42 = (char *)a2;
    v8 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v8, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = gLogObj;
        v10 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_parallel_array_remove_at_index";
          v41 = 2048;
          v42 = (char *)a2;
          v11 = "%{public}s array index out of range: %lu";
LABEL_43:
          _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0x16u);
        }
      }
      else if (v37)
      {
        v12 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = gLogObj;
        v10 = type;
        v13 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v12)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446722;
            v40 = "nw_parallel_array_remove_at_index";
            v41 = 2048;
            v42 = (char *)a2;
            v43 = 2082;
            v44 = v12;
            _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s array index out of range: %lu, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v12);
          goto LABEL_44;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_parallel_array_remove_at_index";
          v41 = 2048;
          v42 = (char *)a2;
          v11 = "%{public}s array index out of range: %lu, no backtrace";
          goto LABEL_43;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = gLogObj;
        v10 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_parallel_array_remove_at_index";
          v41 = 2048;
          v42 = (char *)a2;
          v11 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
          goto LABEL_43;
        }
      }
    }
LABEL_44:
    if (!v8)
      return;
    v7 = (char *)v8;
    goto LABEL_46;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_parallel_array_remove_at_index";
  v6 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v6, &type, &v37))
    goto LABEL_76;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_76;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_parallel_array_remove_at_index";
    v32 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
    goto LABEL_75;
  }
  if (!v37)
  {
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_76;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_parallel_array_remove_at_index";
    v32 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
    goto LABEL_75;
  }
  v35 = (char *)__nw_create_backtrace_string();
  v30 = __nwlog_obj();
  v31 = type;
  v36 = os_log_type_enabled(v30, type);
  if (!v35)
  {
    if (!v36)
      goto LABEL_76;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_parallel_array_remove_at_index";
    v32 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    goto LABEL_75;
  }
  if (v36)
  {
    *(_DWORD *)buf = 136446466;
    v40 = "nw_parallel_array_remove_at_index";
    v41 = 2082;
    v42 = v35;
    _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v35);
  if (v6)
    goto LABEL_6;
}

uint64_t nw_parallel_array_find(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char *v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_parallel_array_find";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_parallel_array_find";
      v11 = "%{public}s called with null parray";
    }
    else
    {
      if (!v16)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_40;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_parallel_array_find";
        v11 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_parallel_array_find";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v8)
          return 0xFFFFFFFFLL;
        goto LABEL_41;
      }
      if (!v13)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_parallel_array_find";
      v11 = "%{public}s called with null parray, no backtrace";
    }
LABEL_39:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    goto LABEL_40;
  }
  v3 = a1[2];
  v4 = a1[3];
  v5 = (v4 - v3) >> 3;
  v6 = a1[5];
  if (v5 != (a1[6] - v6) >> 3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_parallel_array_find";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_parallel_array_find";
      v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_39;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_parallel_array_find";
      v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
      goto LABEL_39;
    }
    v14 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v15 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v15)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_parallel_array_find";
      v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
      goto LABEL_39;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_parallel_array_find";
      v20 = 2082;
      v21 = v14;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v14);
LABEL_40:
    if (!v8)
      return 0xFFFFFFFFLL;
LABEL_41:
    free(v8);
    return 0xFFFFFFFFLL;
  }
  if (v4 == v3)
    return -1;
  result = 0;
  if (v5 <= 1)
    v5 = 1;
  while (*(_QWORD *)(v3 + 8 * result) != a2 || *(_QWORD *)(v6 + 8 * result) != a3)
  {
    if (v5 == ++result)
      return -1;
  }
  return result;
}

BOOL nw_parallel_array_contains(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1[3] - a1[2] == a1[6] - a1[5])
      return nw_parallel_array_find(a1, a2, a3) != -1;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_parallel_array_contains";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_parallel_array_contains";
        v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_parallel_array_contains";
        v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_parallel_array_contains";
        v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_parallel_array_contains";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_parallel_array_contains";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_parallel_array_contains";
        v7 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_parallel_array_contains";
        v7 = "%{public}s called with null parray, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_parallel_array_contains";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_parallel_array_contains";
    v7 = "%{public}s called with null parray";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_32:
  if (v4)
    free(v4);
  return 0;
}

BOOL nw_parallel_array_is_equal(_QWORD *a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  BOOL v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  const char *v19;
  _BOOL4 v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_parallel_array_is_equal";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21))
      goto LABEL_46;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v24 = "nw_parallel_array_is_equal";
        v16 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v18 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (!v18)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v24 = "nw_parallel_array_is_equal";
        v16 = "%{public}s called with null parray, no backtrace";
        goto LABEL_45;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_parallel_array_is_equal";
        v25 = 2082;
        v26 = backtrace_string;
        v19 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_35:
        _os_log_impl(&dword_182FBE000, v14, v15, v19, buf, 0x16u);
      }
LABEL_36:
      free(backtrace_string);
      goto LABEL_46;
    }
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_parallel_array_is_equal";
    v16 = "%{public}s called with null parray";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
LABEL_46:
    if (v13)
      free(v13);
    return 1;
  }
  v3 = (char *)a1[2];
  v2 = (char *)a1[3];
  v4 = v2 - v3;
  v6 = a1[5];
  v5 = a1[6];
  if (v2 - v3 != v5 - v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_parallel_array_is_equal";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parallel_array_is_equal";
      v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_45;
    }
    if (!v21)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parallel_array_is_equal";
      v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v20 = os_log_type_enabled(v14, type);
    if (backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_parallel_array_is_equal";
        v25 = 2082;
        v26 = backtrace_string;
        v19 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v20)
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_parallel_array_is_equal";
    v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    goto LABEL_45;
  }
  if (a1 == a2)
    return 1;
  if (!a2)
    return 0;
  v7 = (_QWORD *)a2[2];
  if (v4 != a2[3] - (_QWORD)v7)
    return 0;
  if (v3 != v2)
  {
    while (*(_QWORD *)v3 == *v7)
    {
      v3 += 8;
      ++v7;
      if (v3 == v2)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v8 = (uint64_t *)a2[5];
  if (v4 != a2[6] - (_QWORD)v8)
    return 0;
  if (v6 == v5)
    return 1;
  v9 = v6 + 8;
  do
  {
    v10 = *v8++;
    result = *(_QWORD *)(v9 - 8) == v10;
    v12 = *(_QWORD *)(v9 - 8) != v10 || v9 == v5;
    v9 += 8;
  }
  while (!v12);
  return result;
}

void ***nw_parallel_array_copy(void ***a1)
{
  void ***v1;
  _BOOL8 v2;
  _BOOL8 v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    if ((char *)a1[3] - (char *)a1[2] == (char *)a1[6] - (char *)a1[5])
    {
      v2 = nw_parallel_array_create();
      if ((void ***)v2 != v1)
      {
        v3 = v2;
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v2 + 16, v1[2], v1[3], v1[3] - v1[2]);
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v3 + 40, v1[5], v1[6], v1[6] - v1[5]);
        return (void ***)v3;
      }
      return v1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_parallel_array_copy";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parallel_array_copy";
        v8 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parallel_array_copy";
        v8 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parallel_array_copy";
        v8 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "nw_parallel_array_copy";
      v17 = 2082;
      v18 = backtrace_string;
      v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parallel_array_copy";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13))
    goto LABEL_33;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parallel_array_copy";
        v8 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parallel_array_copy";
        v8 = "%{public}s called with null parray, no backtrace";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "nw_parallel_array_copy";
      v17 = 2082;
      v18 = backtrace_string;
      v11 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_22:
      _os_log_impl(&dword_182FBE000, v6, v7, v11, buf, 0x16u);
    }
LABEL_23:
    free(backtrace_string);
    goto LABEL_33;
  }
  v6 = __nwlog_obj();
  v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    v16 = "nw_parallel_array_copy";
    v8 = "%{public}s called with null parray";
LABEL_32:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
  }
LABEL_33:
  if (v5)
    free(v5);
  return 0;
}

uint64_t nw_parallel_array_apply(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_parallel_array_apply";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_46;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parallel_array_apply";
        v7 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v9)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parallel_array_apply";
        v7 = "%{public}s called with null parray, no backtrace";
        goto LABEL_45;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_parallel_array_apply";
        v18 = 2082;
        v19 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null parray, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_46;
    }
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_parallel_array_apply";
    v7 = "%{public}s called with null parray";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_46;
  }
  v2 = (uint64_t)(a1[3] - a1[2]) >> 3;
  if (v2 != (uint64_t)(a1[6] - a1[5]) >> 3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_parallel_array_apply";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_46;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parallel_array_apply";
        v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_45;
      }
      v10 = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v11 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v11)
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parallel_array_apply";
        v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_45;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_parallel_array_apply";
        v18 = 2082;
        v19 = v10;
        v12 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
LABEL_30:
        _os_log_impl(&dword_182FBE000, v5, v6, v12, buf, 0x16u);
      }
LABEL_31:
      free(v10);
      if (!v4)
        return 1;
      goto LABEL_47;
    }
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_parallel_array_apply";
    v7 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
    goto LABEL_45;
  }
  if (a2)
    return nw_parallel_array_apply_with_range(a1, 0, v2, a2);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parallel_array_apply";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v4, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_parallel_array_apply";
      v7 = "%{public}s called with null applier";
      goto LABEL_45;
    }
    if (!v14)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_parallel_array_apply";
      v7 = "%{public}s called with null applier, backtrace limit exceeded";
      goto LABEL_45;
    }
    v10 = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v13 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v13)
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_parallel_array_apply";
      v7 = "%{public}s called with null applier, no backtrace";
      goto LABEL_45;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_parallel_array_apply";
      v18 = 2082;
      v19 = v10;
      v12 = "%{public}s called with null applier, dumping backtrace:%{public}s";
      goto LABEL_30;
    }
    goto LABEL_31;
  }
LABEL_46:
  if (v4)
LABEL_47:
    free(v4);
  return 1;
}

uint64_t nw_parallel_array_apply_with_range(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  _BOOL8 v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  NSObject *v18;
  void *v19;
  int v20;
  NSObject *v22;
  void *v23;
  char *backtrace_string;
  _BOOL4 v25;
  const char *v26;
  _BOOL4 v27;
  _BOOL4 v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_parallel_array_apply_with_range";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v14, &type, &v29))
      goto LABEL_63;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_parallel_array_apply_with_range";
      v17 = "%{public}s called with null parray";
LABEL_62:
      _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
      goto LABEL_63;
    }
    if (!v29)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_parallel_array_apply_with_range";
        v17 = "%{public}s called with null parray, backtrace limit exceeded";
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v25 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_parallel_array_apply_with_range";
        v17 = "%{public}s called with null parray, no backtrace";
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    if (!v25)
      goto LABEL_49;
    *(_DWORD *)buf = 136446466;
    v32 = "nw_parallel_array_apply_with_range";
    v33 = 2082;
    v34 = backtrace_string;
    v26 = "%{public}s called with null parray, dumping backtrace:%{public}s";
LABEL_48:
    _os_log_impl(&dword_182FBE000, v15, v16, v26, buf, 0x16u);
    goto LABEL_49;
  }
  if (a1[3] - a1[2] != a1[6] - a1[5])
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_parallel_array_apply_with_range";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v14, &type, &v29))
      goto LABEL_63;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_parallel_array_apply_with_range";
      v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_62;
    }
    if (!v29)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_parallel_array_apply_with_range";
        v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v27 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_parallel_array_apply_with_range";
        v17 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    if (!v27)
      goto LABEL_49;
    *(_DWORD *)buf = 136446466;
    v32 = "nw_parallel_array_apply_with_range";
    v33 = 2082;
    v34 = backtrace_string;
    v26 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
    goto LABEL_48;
  }
  if (a4)
  {
    v8 = (unsigned __int8 *)(a1 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    if (v9 == 255)
    {
      v18 = __nwlog_obj();
      os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v32 = "nw_parallel_array_apply_with_range";
      v19 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v19))
        goto LABEL_66;
      free(v19);
      if (a2 < a3)
        goto LABEL_8;
    }
    else if (a2 < a3)
    {
LABEL_8:
      if ((*(unsigned int (**)(uint64_t, unint64_t, _QWORD, _QWORD))(a4 + 16))(a4, a2, *(_QWORD *)(a1[2] + 8 * a2), *(_QWORD *)(a1[5] + 8 * a2)))
      {
        v10 = a2 + 1;
        while (a3 != v10)
        {
          v11 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD))(a4 + 16))(a4, v10, *(_QWORD *)(a1[2] + 8 * v10), *(_QWORD *)(a1[5] + 8 * v10));
          ++v10;
          if ((v11 & 1) == 0)
          {
            v12 = v10 - 1;
            goto LABEL_15;
          }
        }
        v12 = a3;
LABEL_15:
        v13 = v12 >= a3;
      }
      else
      {
        v13 = 0;
      }
      goto LABEL_31;
    }
    v13 = 1;
    do
LABEL_31:
      v20 = __ldxr(v8);
    while (__stlxr(v20 - 1, v8));
    if (v20 != 255)
      return v13;
    v22 = __nwlog_obj();
    os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v32 = "nw_parallel_array_apply_with_range";
    v23 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v23))
    {
      free(v23);
      return v13;
    }
LABEL_66:
    __break(1u);
    JUMPOUT(0x183A8CCFCLL);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v32 = "nw_parallel_array_apply_with_range";
  v14 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v14, &type, &v29))
    goto LABEL_63;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v29)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_parallel_array_apply_with_range";
        v17 = "%{public}s called with null applier, backtrace limit exceeded";
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v28 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_parallel_array_apply_with_range";
        v17 = "%{public}s called with null applier, no backtrace";
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_parallel_array_apply_with_range";
      v33 = 2082;
      v34 = backtrace_string;
      v26 = "%{public}s called with null applier, dumping backtrace:%{public}s";
      goto LABEL_48;
    }
LABEL_49:
    free(backtrace_string);
    goto LABEL_63;
  }
  v15 = __nwlog_obj();
  v16 = type;
  if (os_log_type_enabled(v15, type))
  {
    *(_DWORD *)buf = 136446210;
    v32 = "nw_parallel_array_apply_with_range";
    v17 = "%{public}s called with null applier";
    goto LABEL_62;
  }
LABEL_63:
  if (v14)
    free(v14);
  return 1;
}

uint64_t ___ZL38nw_endpoint_transform_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke_102(uint64_t a1)
{
  return nw_endpoint_transform_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

uint64_t __Block_byref_object_copy__77389(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__77390(uint64_t a1)
{

}

BOOL ___ZL36nw_endpoint_transform_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_100(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  id v10;

  v5 = a3;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned int *)(v7 + 40);
  if (v8 > a2)
  {
    if (*(id *)(a1 + 40) == v5)
    {
      *(_DWORD *)(v7 + 88) = a2;
    }
    else
    {
      v9 = nw_endpoint_handler_copy_parameters(v5);
      if (nw_parameters_get_upper_transport_protocol(v9) == 253)
      {
        v10 = nw_endpoint_handler_copy_association(*(void **)(a1 + 48), 0);
        nw_quic_report_race_result_on_queue(v10, 0, 1);

      }
      nw_endpoint_handler_cancel(v6, 0, 0);

    }
  }

  return v8 > a2;
}

void sub_183A8DC98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_94(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  id v15;
  uint64_t v16;
  char v17;
  NSObject *v18;
  const char *id_string;
  const char *v20;
  const char *v21;
  const char *logging_description;
  const char *v23;
  const char *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  void *v29;
  nw_endpoint_t v31;
  nw_endpoint_t v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  id v48;
  __int16 v49;
  id v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  if (v7
    && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)
    && nw_protocol_transform_contains_protocol(*(void **)(a1 + 32), v7))
  {
    if (v6 == &__block_literal_global_6232)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v18 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          v20 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          v21 = id_string;
          v32 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          logging_description = nw_endpoint_get_logging_description(v32);
          v23 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          v24 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          v25 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136448002;
          v34 = "nw_endpoint_transform_add_children_block_invoke";
          v35 = 2082;
          v36 = v21;
          v37 = 2082;
          v38 = v20;
          v39 = 2082;
          v40 = logging_description;
          v41 = 2082;
          v42 = v23;
          v43 = 2082;
          v44 = v24;
          v45 = 2114;
          v46 = v25;
          v47 = 2112;
          v48 = v7;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Transform including protocol %@ cannot be used, unknown endpoint", buf, 0x52u);

        }
      }
      v26 = *(_QWORD *)(a1 + 48);
      v16 = a1 + 48;
      v27 = *(_QWORD *)(v26 + 32);
      if (!v27)
      {
        v28 = nw_array_create();
        v29 = *(void **)(*(_QWORD *)v16 + 32);
        *(_QWORD *)(*(_QWORD *)v16 + 32) = v28;

        v27 = *(_QWORD *)(*(_QWORD *)v16 + 32);
      }
      nw_array_append(v27, v7);
      v17 = 0;
    }
    else
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          v9 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          v10 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          v11 = v9;
          v31 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          v12 = nw_endpoint_get_logging_description(v31);
          v13 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          v14 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          v15 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136448258;
          v34 = "nw_endpoint_transform_add_children_block_invoke";
          v35 = 2082;
          v36 = v11;
          v37 = 2082;
          v38 = v10;
          v39 = 2082;
          v40 = v12;
          v41 = 2082;
          v42 = v13;
          v43 = 2082;
          v44 = v14;
          v45 = 2114;
          v46 = v15;
          v47 = 2112;
          v48 = v7;
          v49 = 2112;
          v50 = v6;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Transform including protocol %@ using endpoint %@", buf, 0x5Cu);

        }
      }
      v16 = a1 + 48;
      v17 = 1;
    }
    *(_BYTE *)(*(_QWORD *)v16 + 95) = v17;
  }

  return 1;
}

void sub_183A8E060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

BOOL ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_96(uint64_t a1, uint64_t a2, void *a3)
{
  _BOOL4 v4;

  v4 = nw_proxy_config_supports_connection(a3, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(void **)(a1 + 32), *(void **)(a1 + 40));
  if (v4)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  return !v4;
}

BOOL NWPBServiceEndpointReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  BOOL v54;
  unint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v14 = (_BYTE *)(a2 + *v8);
      if (*v14)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0)
        goto LABEL_40;
      v17 = *v3;
      v18 = *(_QWORD *)(a2 + v17);
      if (v18 == -1 || v18 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v19 = v18 + 1;
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v18);
      *(_QWORD *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0)
        goto LABEL_40;
      v21 = *v3;
      v22 = *(_QWORD *)(a2 + v21);
      if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v23 = v22 + 1;
      v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
      *(_QWORD *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_40;
      v25 = *v3;
      v26 = *(_QWORD *)(a2 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v27 = v26 + 1;
      v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
      *(_QWORD *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0)
        goto LABEL_40;
      v29 = *v3;
      v30 = *(_QWORD *)(a2 + v29);
      if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v31 = v30 + 1;
      v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
      *(_QWORD *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0)
        goto LABEL_40;
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v35 = v34 + 1;
      v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
      *(_QWORD *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0)
        goto LABEL_40;
      v37 = *v3;
      v38 = *(_QWORD *)(a2 + v37);
      if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v39 = v38 + 1;
      v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
      *(_QWORD *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0)
        goto LABEL_40;
      v41 = *v3;
      v42 = *(_QWORD *)(a2 + v41);
      if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v43 = v42 + 1;
      v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
      *(_QWORD *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0)
        goto LABEL_40;
      v45 = *v3;
      v46 = *(_QWORD *)(a2 + v45);
      if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v47 = v46 + 1;
      v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
      *(_QWORD *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0)
        goto LABEL_40;
      v49 = *v3;
      v50 = *(_QWORD *)(a2 + v49);
      if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_38:
        v14 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }
      v51 = v50 + 1;
      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
      *(_QWORD *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        v16 = 0;
        v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }
LABEL_40:
      v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v16 = 0;
LABEL_42:
      if (v53)
        v54 = 1;
      else
        v54 = (v16 & 7) == 4;
      if (v54)
        return *(_BYTE *)(a2 + *v8) == 0;
      v55 = v16 >> 3;
      if ((v16 >> 3) == 3)
      {
        PBReaderReadString();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = 8;
        goto LABEL_4;
      }
      if ((_DWORD)v55 == 2)
      {
        PBReaderReadString();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = 24;
LABEL_4:
        v13 = *(void **)(a1 + v12);
        *(_QWORD *)(a1 + v12) = v11;

        goto LABEL_5;
      }
      if ((_DWORD)v55 == 1)
      {
        PBReaderReadString();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = 16;
        goto LABEL_4;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v16 = 0;
LABEL_39:
    *v14 = 1;
    goto LABEL_40;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL nw_establishment_report_get_l4s_enabled(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  _BOOL8 v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _QWORD v18[5];
  os_log_type_t type[8];
  os_log_type_t *v20;
  uint64_t v21;
  char v22;
  char v23;
  _BYTE buf[24];
  void *v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)type = 0;
    v20 = type;
    v21 = 0x2020000000;
    v3 = MEMORY[0x1E0C809B0];
    v22 = 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __nw_establishment_report_get_l4s_enabled_block_invoke;
    v18[3] = &unk_1E14AAD70;
    v18[4] = type;
    v4 = v1;
    v5 = v18;
    v6 = (unsigned __int8 *)v4[8];
    *(_QWORD *)buf = v3;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_establishment_report_enumerate_protocol_l4s_state_block_invoke;
    v25 = &unk_1E14AC278;
    v7 = v5;
    v26 = v7;
    nw_array_apply(v6, (uint64_t)buf);

    v8 = *((_BYTE *)v20 + 24) != 0;
    _Block_object_dispose(type, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_establishment_report_get_l4s_enabled";
  v11 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v11, type, &v23))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_l4s_enabled";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type[0];
      v16 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_establishment_report_get_l4s_enabled";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_l4s_enabled";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_l4s_enabled";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_3:

  return v8;
}

uint64_t __nw_establishment_report_get_l4s_enabled_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  id v7;
  id v8;
  id v9;
  _BOOL4 is_equal_unsafe;
  uint64_t v11;

  v7 = a2;
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
  v8 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8))
  {

  }
  else
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_54912);
    v9 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v9);

    if (!is_equal_unsafe)
    {
      v11 = 1;
      goto LABEL_10;
    }
  }
  v11 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a5;
LABEL_10:

  return v11;
}

void sub_183A92924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_establishment_report_get_handshake_ms_for_protocol(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _QWORD enumerate_block[4];
  id v19;
  id v20;
  _BYTE *v21;
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v25 = 0;
    enumerate_block[0] = MEMORY[0x1E0C809B0];
    enumerate_block[1] = 3221225472;
    enumerate_block[2] = ___ZL53nw_establishment_report_get_handshake_ms_for_protocolPU37objcproto26OS_nw_establishment_report8NSObjectPU36objcproto25OS_nw_protocol_definitionS_S3__block_invoke;
    enumerate_block[3] = &unk_1E14AAEC8;
    v19 = v6;
    v20 = v7;
    v21 = buf;
    nw_establishment_report_enumerate_protocols(v5, enumerate_block);
    v8 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v11, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null match_protocol", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null match_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null match_protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null match_protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_3:

  return v8;
}

uint64_t ___ZL53nw_establishment_report_get_handshake_ms_for_protocolPU37objcproto26OS_nw_establishment_report8NSObjectPU36objcproto25OS_nw_protocol_definitionS_S3__block_invoke(uint64_t *a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2;
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, a1[4])
    || (v6 = a1[5]) != 0 && nw_protocol_definition_is_equal_unsafe((uint64_t)v5, v6))
  {
    v7 = 0;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a3;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_183A92CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_enable_stats_report_on_nw_queue(void *a1, int a2)
{
  void **v3;
  void **v4;
  char v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  NSObject *v15;
  void *v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_connection_enable_stats_report_on_nw_queue";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_connection_enable_stats_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_connection_enable_stats_report_on_nw_queue";
            v21 = 2082;
            v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_connection_enable_stats_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_connection_enable_stats_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_26:
    if (v8)
      free(v8);
    goto LABEL_7;
  }
  nw_context_assert_queue(v3[3]);
  v5 = *((_BYTE *)v4 + 108);
  if ((v5 & 1) != 0)
  {
LABEL_7:

    return;
  }
  if (v4[12])
  {
LABEL_6:
    *((_DWORD *)v4 + 26) = a2;
    *((_BYTE *)v4 + 108) = v5 | 1;
    goto LABEL_7;
  }
  v6 = malloc_type_calloc(1uLL, 0xD60uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_5:
    v4[12] = v6;
    v5 = *((_BYTE *)v4 + 108);
    goto LABEL_6;
  }
  __nwlog_obj();
  v15 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v20 = "strict_calloc";
  v21 = 2048;
  v22 = 1;
  v23 = 2048;
  v24 = 3424;
  v16 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v16))
  {
    free(v16);
    v6 = 0;
    goto LABEL_5;
  }
  __break(1u);
}

void sub_183A93090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue(void *a1, void *a2, uint64_t a3)
{
  void **v5;
  id v6;
  id *v7;
  NWConcrete_nw_connection *v8;
  _DWORD *v9;
  int v10;
  int event_milliseconds;
  uint64_t start_time;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  id v19;
  _DWORD *v20;
  void *v21;
  int v22;
  id *v23;
  _QWORD *v24;
  NSObject *p_super;
  int v26;
  NWConcrete_nw_connection *v27;
  unsigned int v28;
  unsigned int v29;
  _BOOL4 v31;
  __int16 v32;
  __int16 v33;
  id *v34;
  NSObject *v35;
  NWConcrete_nw_connection *v36;
  void **v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  _QWORD *v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int8x16_t v50;
  int32x2_t v51;
  int64x2_t v52;
  int32x4_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int64x2_t v58;
  int32x4_t v59;
  int64x2_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int8x16_t v66;
  id v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  const char *v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  os_log_type_t v75;
  os_log_type_t v76;
  void *v77;
  char *v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  char *backtrace_string;
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  os_log_type_t v86;
  void *v87;
  char *v88;
  char *v89;
  NSObject *v90;
  os_log_type_t v91;
  char *v92;
  NSObject *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  os_log_type_t v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  void *v101;
  id v102;
  char v103;
  os_log_type_t type;
  void *v105;
  unsigned __int16 v106;
  _QWORD v107[4];
  NWConcrete_nw_connection *v108;
  uint64_t v109;
  uint8_t v110[4];
  const char *v111;
  __int16 v112;
  char *v113;
  _DWORD buf[12];
  __int128 v115;
  _DWORD v116[20];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  nw_context_assert_queue(v5[3]);
  v7 = (id *)nw_endpoint_handler_copy_current_path(v6);
  if (v7)
  {
    v107[0] = MEMORY[0x1E0C809B0];
    v107[1] = 3221225472;
    v107[2] = ___ZL70nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queueP24NWConcrete_nw_connectionPU33objcproto22OS_nw_endpoint_handler8NSObjectP35netcore_stats_tcp_statistics_report_block_invoke;
    v107[3] = &unk_1E14AAEF0;
    v8 = v5;
    v108 = v8;
    v109 = a3;
    nw_endpoint_handler_access_resolver_handler(v6, v107);
    v102 = v7[12];
    if (v102)
    {
      v9 = v102;
      v10 = v9[24];

      *(_DWORD *)(a3 + 196) = v10;
    }
    v106 = WORD2(v6) ^ WORD1(v6) ^ HIWORD(v6) ^ (unsigned __int16)v6;
    event_milliseconds = nw_connection_get_event_milliseconds(v8, 3, 3, &v106, 0);
    if (event_milliseconds != -1)
      *(_DWORD *)(a3 + 140) = event_milliseconds;
    v101 = (void *)nw_endpoint_handler_copy_connected_path(v6);
    if (!v101)
      goto LABEL_41;
    *(_DWORD *)(a3 + 144) = nw_connection_get_transport_connect_milliseconds(v8, v106, 1);
    *(_DWORD *)(a3 + 148) = nw_connection_get_transport_connect_milliseconds(v8, v106, 0);
    start_time = v8->start_time;
    v13 = mach_continuous_time();
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    v15 = nw_delta_nanos(start_time, v14);
    v16 = *(_DWORD *)(a3 + 144);
    *(_DWORD *)(a3 + 152) = v15 / 0xF4240 - v16;
    if ((v15 / 0xF4240) < v16)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v97 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          v98 = *(unsigned int *)(a3 + 144);
          v99 = *(unsigned int *)(a3 + 152);
          buf[0] = 136446978;
          *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
          LOWORD(buf[3]) = 2082;
          *(_QWORD *)((char *)&buf[3] + 2) = "statistics_report->flow_duration_msecs";
          HIWORD(buf[5]) = 2048;
          *(_QWORD *)&buf[6] = v98;
          LOWORD(buf[8]) = 2048;
          *(_QWORD *)((char *)&buf[8] + 2) = v99;
          _os_log_impl(&dword_182FBE000, v97, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", (uint8_t *)buf, 0x2Au);
        }

      }
      *(_DWORD *)(a3 + 152) = 0;
    }
    v100 = nw_path_copy_interface(v101);
    if (v100)
    {
      v17 = v100;
      v18 = v17[24];

      *(_DWORD *)(a3 + 200) = v18;
    }
    *(_WORD *)(a3 + 208) |= 2u;
    v19 = v6;
    while (1)
    {
      v20 = v19;
      if (!v20)
        break;
      v21 = v20;
      v22 = v20[29];

      if (v22 == 4)
      {
        v27 = v8;
        LOWORD(buf[0]) = WORD2(v21) ^ WORD1(v21) ^ HIWORD(v21) ^ (unsigned __int16)v21;
        v28 = nw_connection_get_event_milliseconds(v27, 5, 3, buf, 0);
        v29 = nw_connection_get_event_milliseconds(v27, 5, 4, buf, 0);
        if (v29 == -1 || v28 == -1)
          v31 = v29 != -1;
        else
          v31 = v28 >= v29;

        if (v31)
          v32 = 4;
        else
          v32 = 0;
        *(_WORD *)(a3 + 208) = *(_WORD *)(a3 + 208) & 0xFFFB | v32;
        if (nw_endpoint_handler_used_prefer_fallback(v21))
          v33 = 16;
        else
          v33 = 0;
        *(_WORD *)(a3 + 208) = *(_WORD *)(a3 + 208) & 0xFFEF | v33;
        goto LABEL_39;
      }
      v23 = v21;
      v19 = v23[9];

      if (!v19)
        goto LABEL_40;
    }
    __nwlog_obj();
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(_QWORD *)&buf[1] = "nw_endpoint_handler_get_mode";
    v78 = (char *)_os_log_send_and_compose_impl();

    v110[0] = 16;
    LOBYTE(v105) = 0;
    if (__nwlog_fault(v78, v110, &v105))
    {
      if (v110[0] == 17)
      {
        v79 = v78;
        __nwlog_obj();
        v80 = objc_claimAutoreleasedReturnValue();
        v81 = v110[0];
        if (os_log_type_enabled(v80, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s called with null handler", (uint8_t *)buf, 0xCu);
        }
LABEL_89:

        v78 = v79;
        goto LABEL_90;
      }
      if (!(_BYTE)v105)
      {
        v79 = v78;
        __nwlog_obj();
        v80 = objc_claimAutoreleasedReturnValue();
        v86 = v110[0];
        if (os_log_type_enabled(v80, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v80, v86, "%{public}s called with null handler, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_89;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v83 = objc_claimAutoreleasedReturnValue();
      v84 = v110[0];
      v85 = os_log_type_enabled(v83, (os_log_type_t)v110[0]);
      if (backtrace_string)
      {
        if (v85)
        {
          buf[0] = 136446466;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_get_mode";
          LOWORD(buf[3]) = 2082;
          *(_QWORD *)((char *)&buf[3] + 2) = backtrace_string;
          _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s called with null handler, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }

        free(backtrace_string);
      }
      else
      {
        if (v85)
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s called with null handler, no backtrace", (uint8_t *)buf, 0xCu);
        }

      }
    }
LABEL_90:
    if (v78)
      free(v78);
    __nwlog_obj();
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(_QWORD *)&buf[1] = "nw_endpoint_handler_copy_parent";
    v88 = (char *)_os_log_send_and_compose_impl();

    v110[0] = 16;
    LOBYTE(v105) = 0;
    if (__nwlog_fault(v88, v110, &v105))
    {
      if (v110[0] == 17)
      {
        v89 = v88;
        __nwlog_obj();
        v90 = objc_claimAutoreleasedReturnValue();
        v91 = v110[0];
        if (os_log_type_enabled(v90, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_182FBE000, v90, v91, "%{public}s called with null handler", (uint8_t *)buf, 0xCu);
        }
LABEL_104:

        v88 = v89;
        goto LABEL_105;
      }
      if (!(_BYTE)v105)
      {
        v89 = v88;
        __nwlog_obj();
        v90 = objc_claimAutoreleasedReturnValue();
        v96 = v110[0];
        if (os_log_type_enabled(v90, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_182FBE000, v90, v96, "%{public}s called with null handler, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_104;
      }
      v92 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v93 = objc_claimAutoreleasedReturnValue();
      v94 = v110[0];
      v95 = os_log_type_enabled(v93, (os_log_type_t)v110[0]);
      if (v92)
      {
        if (v95)
        {
          buf[0] = 136446466;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_copy_parent";
          LOWORD(buf[3]) = 2082;
          *(_QWORD *)((char *)&buf[3] + 2) = v92;
          _os_log_impl(&dword_182FBE000, v93, v94, "%{public}s called with null handler, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }

        free(v92);
      }
      else
      {
        if (v95)
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_182FBE000, v93, v94, "%{public}s called with null handler, no backtrace", (uint8_t *)buf, 0xCu);
        }

      }
    }
LABEL_105:
    if (v88)
      free(v88);
    v21 = 0;
LABEL_39:

LABEL_40:
LABEL_41:
    v34 = v7;
    v35 = v34[2];

    *(_DWORD *)(a3 + 156) = nw_parameters_get_traffic_class(v35);
    *(_DWORD *)(a3 + 204) = nw_parameters_get_multipath_service(v35);
    v133 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    memset(v116, 0, sizeof(v116));
    memset(buf, 0, sizeof(buf));
    if (!nw_parameters_get_multipath(v35))
    {
      v36 = v8;
      nw_context_assert_queue(v5[3]);
      v37 = v36;
      if (nw_parameters_get_ip_protocol(v37[2]) == 6)
      {
        v38 = nw_endpoint_handler_fillout_tcp_info(v37[18], buf);

        if (v38)
        {
          *(_WORD *)(a3 + 208) = *(_WORD *)(a3 + 208) & 0xFE1F | (32 * (_BYTE)v123) & 0x20 | (8 * v123) & 0x40 | (32 * (_BYTE)v123) & 0x80 | (((v123 & 2) != 0) << 8);
          v39 = *(_QWORD *)&v116[3];
          *(_QWORD *)a3 = *(_QWORD *)&v116[11];
          *(_QWORD *)(a3 + 8) = v39;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)&v116[13];
          v40 = *(_QWORD *)&v116[9];
          *(_QWORD *)(a3 + 32) = *(_QWORD *)&v116[5];
          *(_QWORD *)(a3 + 40) = v40;
          *(_QWORD *)(a3 + 48) = *(_QWORD *)&v116[1];
          *(_QWORD *)(a3 + 56) = 0;
          *(_QWORD *)(a3 + 64) = 0;
          *(_QWORD *)(a3 + 72) = 0;
          v41 = vrev64q_s32(*(int32x4_t *)&buf[5]);
          v41.i64[0] = *(_QWORD *)&buf[5];
          *(int32x4_t *)(a3 + 160) = v41;
          *(_DWORD *)(a3 + 176) = LOBYTE(v116[19]);
          if (nw_parameters_get_tfo(v35) && (BYTE4(v123) & 8) != 0)
            *(_WORD *)(a3 + 208) |= 0x200u;
          goto LABEL_74;
        }
      }
      else
      {

      }
    }
    if (nw_endpoint_handler_is_multipath(v6))
    {
      v105 = 0;
      if (nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue(v8, (uint64_t)&v105))
      {
        v44 = v105;
        if (v105)
        {
          if (*(_QWORD *)v105)
          {
            v45 = *(_QWORD *)(*(_QWORD *)v105 + 32);
            if (v45)
            {
              v42.i32[0] = 0;
              v43.i32[0] = *(_BYTE *)(v45 + 116) & 1;
              v46 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v43, v42), 0);
              v47 = *(int8x16_t *)(v45 + 120);
              v48 = (int64x2_t)vbicq_s8(v47, v46);
              v49 = (int64x2_t)vandq_s8(v47, v46);
              v50 = *(int8x16_t *)(v45 + 48);
              v51 = vdup_n_s32((*(_BYTE *)(v45 + 44) & 1) == 0);
              v52.i64[0] = v51.u32[0];
              v52.i64[1] = v51.u32[1];
              v53 = (int32x4_t)vcltzq_s64(vshlq_n_s64(v52, 0x3FuLL));
              v54 = (int64x2_t)vbicq_s8(v50, (int8x16_t)v53);
              v55 = (int64x2_t)vandq_s8(v50, (int8x16_t)v53);
              v53.i32[0] = *(_BYTE *)(v45 + 188) & 1;
              v56 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v53, v42), 0);
              v57 = *(int8x16_t *)(v45 + 192);
              v58 = (int64x2_t)vbicq_s8(v57, v56);
              v59 = (int32x4_t)vandq_s8(v57, v56);
              v60 = vaddq_s64(v49, (int64x2_t)v59);
              v59.i32[0] = *(_BYTE *)(v45 + 260) & 1;
              v61 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v59, v42), 0);
              v62 = *(int8x16_t *)(v45 + 264);
              v63 = (int64x2_t)vbicq_s8(v62, v61);
              v64 = vaddq_s64(v55, vaddq_s64(v60, (int64x2_t)vandq_s8(v62, v61)));
              v65 = vaddq_s64(v54, vaddq_s64(vaddq_s64(v48, v58), v63));
              *(_WORD *)(a3 + 208) = ((*(_WORD *)(v45 + 328) & 1) << 10) | *(_WORD *)(a3 + 208) & 0xFBFF;
              *(int8x16_t *)(a3 + 80) = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL);
              *(int8x16_t *)(a3 + 96) = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL);
              *(_OWORD *)(a3 + 112) = *(_OWORD *)(v45 + 24);
              v66 = (int8x16_t)vaddq_s64(v64, v65);
              *(int8x16_t *)a3 = vextq_s8(v66, v66, 8uLL);
            }
          }
        }
        freemptcpinfo(v44);
        goto LABEL_74;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v67 = (id)gLogObj;
      *(_DWORD *)v110 = 136446210;
      v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
      v68 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v103 = 0;
      if (__nwlog_fault(v68, &type, &v103))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v69 = (id)gLogObj;
          v70 = type;
          if (os_log_type_enabled(v69, type))
          {
            *(_DWORD *)v110 = 136446210;
            v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed", v110, 0xCu);
          }
        }
        else if (v103)
        {
          v71 = __nw_create_backtrace_string();
          if (v71)
          {
            v72 = (char *)v71;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v73 = (id)gLogObj;
            v74 = type;
            if (os_log_type_enabled(v73, type))
            {
              *(_DWORD *)v110 = 136446466;
              v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
              v112 = 2082;
              v113 = v72;
              _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed, dumping backtrace:%{public}s", v110, 0x16u);
            }

            free(v72);
            if (!v68)
              goto LABEL_74;
            goto LABEL_73;
          }
          __nwlog_obj();
          v69 = objc_claimAutoreleasedReturnValue();
          v76 = type;
          if (os_log_type_enabled(v69, type))
          {
            *(_DWORD *)v110 = 136446210;
            v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v69, v76, "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed, no backtrace", v110, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v69 = (id)gLogObj;
          v75 = type;
          if (os_log_type_enabled(v69, type))
          {
            *(_DWORD *)v110 = 136446210;
            v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v69, v75, "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed, backtrace limit exceeded", v110, 0xCu);
          }
        }

      }
      if (v68)
LABEL_73:
        free(v68);
    }
LABEL_74:

    p_super = &v108->super;
LABEL_75:

    goto LABEL_76;
  }
  v24 = v5[2];
  if (v24 && !nw_path_parameters_get_logging_disabled(v24[13]))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    p_super = (id)gconnectionLogObj;
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
    {
      v26 = *((_DWORD *)v5 + 112);
      buf[0] = 136446466;
      *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v26;
      _os_log_impl(&dword_182FBE000, p_super, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No path found for endpoint handler", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_75;
  }
LABEL_76:

}

void sub_183A93E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void nw_connection_send_report_to_symptoms(NWConcrete_nw_connection *a1, netcore_stats_tcp_report *a2, int a3)
{
  NWConcrete_nw_connection *v5;
  const char *effective_bundle_id;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (nw_connection_get_symptom_reporter_handle::once[0] != -1)
    dispatch_once(nw_connection_get_symptom_reporter_handle::once, &__block_literal_global_77956);
  symptom_new();
  symptom_set_qualifier();
  symptom_set_additional_qualifier();
  if (a2->delegated)
  {
    v7 = 0uLL;
    nw_parameters_get_proc_uuid(v5->parameters, &v7);
    symptom_set_additional_qualifier();
    nw_parameters_get_pid(v5->parameters);
    symptom_set_qualifier();
    effective_bundle_id = (const char *)nw_parameters_get_effective_bundle_id(v5->parameters);
    if (effective_bundle_id)
    {
      strlen(effective_bundle_id);
      symptom_set_additional_qualifier();
    }
  }
  if (a3)
    symptom_send_immediate();
  else
    symptom_send();

}

void sub_183A94028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_stats_fill_in_nw_report_on_nw_queue(NWConcrete_nw_connection *a1, nw_connection_report_s *a2)
{
  NWConcrete_nw_connection *v3;
  NWConcrete_nw_connection *v4;
  NWConcrete_nw_endpoint_handler *v5;
  NWConcrete_nw_connection *v6;
  id *v7;
  unsigned int v8;
  int v9;
  NWConcrete_nw_connection *v10;
  OS_nw_parameters *parameters;
  const char *effective_process_name;
  int apple_app_for_string;
  unsigned __int8 *v14;
  char *effective_bundle_id;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  char *bundle_id;
  uint64_t v20;
  int v21;
  OS_nw_parameters *v22;
  pid_t v23;
  NWConcrete_nw_connection *v24;
  unsigned __int8 *v25;
  int v26;
  _BOOL4 tfo;
  unsigned int *v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unint64_t v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  char v55;
  _QWORD *v56;
  NWConcrete_nw_endpoint_handler *v57;
  uint64_t v58;
  NWConcrete_nw_endpoint_handler *v59;
  OS_nw_path *v60;
  OS_nw_path *v61;
  char v62;
  NSObject *v63;
  int v64;
  unsigned __int8 *v65;
  unsigned int event_milliseconds;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  OS_nw_parameters *v71;
  BOOL v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  id v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  int v84;
  unint64_t v85;
  os_log_type_t v86;
  id *v87;
  id *v88;
  id v89;
  _DWORD *v90;
  void *v91;
  int v92;
  nw_connection_report_s *v93;
  id v94;
  id *v95;
  NWConcrete_nw_endpoint_handler *v96;
  NWConcrete_nw_endpoint_handler *v97;
  int mode;
  id *v99;
  unsigned int *v100;
  char *v101;
  unsigned int v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  int v106;
  unint64_t v107;
  id *v108;
  id *v109;
  unsigned __int8 *v110;
  int v111;
  int v112;
  id v113;
  char *v114;
  NSObject *v115;
  os_log_type_t v116;
  char *v117;
  os_log_type_t v118;
  _BOOL4 v119;
  os_log_type_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  NWConcrete_nw_connection *v126;
  OS_nw_parameters *v127;
  OS_nw_parameters *v128;
  char *v129;
  char v130;
  nw_connection_report_s *v131;
  id v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  NWConcrete_nw_connection *v138;
  _QWORD *v139;
  _QWORD *v140;
  unsigned __int8 *v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unsigned __int8 *v146;
  _QWORD *v147;
  OS_nw_parameters *v148;
  NSObject *v149;
  unsigned int top_id;
  uint64_t v151;
  void **v152;
  NWConcrete_nw_endpoint_handler *v153;
  _QWORD *v154;
  NWConcrete_nw_endpoint_handler *v155;
  NWConcrete_nw_endpoint_handler *v156;
  int v157;
  id *v158;
  nw_endpoint_t v159;
  nw_endpoint_t v160;
  NSObject *v161;
  int v162;
  nw_connection_report_s *v163;
  NWConcrete_nw_connection *v164;
  id v165;
  char *v166;
  NSObject *v167;
  os_log_type_t v168;
  char *v169;
  NSObject *v170;
  os_log_type_t v171;
  _BOOL4 v172;
  os_log_type_t v173;
  NSObject *v174;
  NWConcrete_nw_path *v175;
  unsigned int nexus_protocol_level;
  int v177;
  uint64x2_t v178;
  void **v179;
  void **v180;
  _BOOL4 v181;
  unint64_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int **v186;
  uint64_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int64x2_t v190;
  int64x2_t v191;
  int8x16_t v192;
  int32x2_t v193;
  int64x2_t v194;
  int32x4_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int64x2_t v200;
  int32x4_t v201;
  int64x2_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  uint64_t v208;
  unint64_t v209;
  int8x16_t v210;
  int v211;
  char v212;
  uint64_t v213;
  int32x4_t v214;
  id v215;
  void *v216;
  NSObject *v217;
  os_log_type_t v218;
  const char *v219;
  char *v220;
  NSObject *v221;
  os_log_type_t v222;
  os_log_type_t v223;
  os_log_type_t v224;
  unsigned int v225;
  NWConcrete_nw_connection *v226;
  unsigned int v227;
  unsigned int v228;
  id v229;
  char *v230;
  NSObject *v231;
  os_log_type_t v232;
  NWConcrete_nw_connection *v233;
  NWConcrete_nw_connection *v234;
  unint64_t v235;
  nw_connection_timestamp_s *timestamps;
  unsigned __int16 *p_event;
  unint64_t v238;
  unint64_t v239;
  id v240;
  char *v241;
  NSObject *v242;
  os_log_type_t v243;
  char *v244;
  NSObject *v245;
  os_log_type_t v246;
  _BOOL4 v247;
  os_log_type_t v248;
  uint64_t v249;
  void *v250;
  char *v251;
  NSObject *v252;
  os_log_type_t v253;
  _BOOL4 v254;
  os_log_type_t v255;
  void *v256;
  char *v257;
  NSObject *v258;
  os_log_type_t v259;
  char *backtrace_string;
  os_log_type_t v261;
  _BOOL4 v262;
  void *v263;
  char *v264;
  NSObject *v265;
  os_log_type_t v266;
  void *v267;
  char *v268;
  NSObject *v269;
  os_log_type_t v270;
  os_log_type_t v271;
  char *v272;
  NSObject *v273;
  os_log_type_t v274;
  _BOOL4 v275;
  void *v276;
  char *v277;
  NSObject *v278;
  os_log_type_t v279;
  char *v280;
  NSObject *v281;
  os_log_type_t v282;
  _BOOL4 v283;
  char *v284;
  NSObject *v285;
  os_log_type_t v286;
  _BOOL4 v287;
  os_log_type_t v288;
  os_log_type_t v289;
  int tls;
  char v291;
  unsigned int *v292;
  unint64_t v293;
  void *v294;
  double v295;
  double Helper_x8__nwswifttls_copy_definition;
  uint64_t v297;
  void *inited;
  NSObject *v299;
  _BOOL4 v300;
  int v301;
  unint64_t v302;
  void *v303;
  NSObject *v304;
  _BOOL4 enable_encrypted_client_hello;
  uint64_t v306;
  unint64_t v307;
  NWConcrete_nw_connection *v308;
  NWConcrete_nw_connection *v309;
  unint64_t v310;
  nw_connection_timestamp_s *v311;
  unsigned __int16 *v312;
  unint64_t v313;
  NWConcrete_nw_connection *v314;
  uint64_t v315;
  uint64_t v316;
  NWConcrete_nw_connection *v317;
  unsigned __int16 used_timestamps;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  nw_connection_timestamp_s *v324;
  void *v325;
  char *v326;
  NSObject *v327;
  os_log_type_t v328;
  char *v329;
  NSObject *v330;
  os_log_type_t v331;
  _BOOL4 v332;
  os_log_type_t v333;
  NWConcrete_nw_connection *v334;
  uint64_t v335;
  uint64_t v336;
  NWConcrete_nw_connection *v337;
  unsigned __int16 v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  nw_connection_timestamp_s *v344;
  void *v345;
  char *v346;
  NSObject *v347;
  os_log_type_t v348;
  char *v349;
  NSObject *v350;
  os_log_type_t v351;
  _BOOL4 v352;
  os_log_type_t v353;
  unsigned __int8 *activities;
  NWConcrete_nw_connection *v355;
  OS_nw_parameters *v356;
  NSObject *v357;
  unsigned int v358;
  int v359;
  _BOOL4 quic_enabled;
  uint64_t v361;
  unint64_t v362;
  nw_connection_report_s *v363;
  BOOL l4s_enabled;
  unint64_t v365;
  uint64_t errors;
  void *v367;
  void *v368;
  _DWORD *v369;
  int v370;
  NWConcrete_nw_connection *v371;
  NWConcrete_nw_connection *v372;
  unint64_t v373;
  nw_connection_timestamp_s *v374;
  unsigned __int16 *v375;
  BOOL v376;
  os_log_type_t v377;
  NWConcrete_nw_endpoint_handler *v378;
  NWConcrete_nw_endpoint_handler *v379;
  id v380;
  unsigned __int8 *v381;
  NWConcrete_nw_endpoint_handler *v382;
  NWConcrete_nw_connection *v383;
  NWConcrete_nw_connection *v384;
  void *v385;
  OS_nw_parameters *v386;
  nw_connection_report_s *v387;
  _QWORD v388[4];
  NWConcrete_nw_connection *v389;
  _DWORD *v390;
  nw_connection_report_s *v391;
  char v392;
  os_log_type_t type;
  uint64_t v394;
  _QWORD v395[2];
  void (*v396)(uint64_t, void *);
  void *v397;
  nw_connection_report_s *v398;
  _QWORD v399[4];
  void **v400;
  nw_connection_report_s *v401;
  _QWORD v402[4];
  NWConcrete_nw_connection *v403;
  _BYTE *v404;
  nw_connection_report_s *v405;
  _QWORD v406[4];
  NWConcrete_nw_connection *v407;
  _BYTE *v408;
  nw_connection_report_s *v409;
  _QWORD v410[5];
  _QWORD v411[6];
  __int16 v412;
  __int16 v413;
  _QWORD v414[5];
  char v415;
  _DWORD buf[12];
  __int128 v417;
  _OWORD v418[11];
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  uint64_t v429;
  _BYTE v430[24];
  char v431;
  uint64_t v432;

  v432 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v383 = v3;
  if (!a2)
  {
    __nwlog_obj();
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    v257 = (char *)_os_log_send_and_compose_impl();

    v430[0] = 16;
    LOBYTE(v394) = 0;
    if (__nwlog_fault(v257, v430, &v394))
    {
      if (v430[0] == 17)
      {
        __nwlog_obj();
        v258 = objc_claimAutoreleasedReturnValue();
        v259 = v430[0];
        if (os_log_type_enabled(v258, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v258, v259, "%{public}s called with null report", (uint8_t *)buf, 0xCu);
        }
      }
      else if ((_BYTE)v394)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v258 = objc_claimAutoreleasedReturnValue();
        v261 = v430[0];
        v262 = os_log_type_enabled(v258, (os_log_type_t)v430[0]);
        if (backtrace_string)
        {
          if (v262)
          {
            buf[0] = 136446466;
            *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            LOWORD(buf[3]) = 2082;
            *(_QWORD *)((char *)&buf[3] + 2) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v258, v261, "%{public}s called with null report, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_393;
        }
        if (v262)
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v258, v261, "%{public}s called with null report, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v258 = objc_claimAutoreleasedReturnValue();
        v271 = v430[0];
        if (os_log_type_enabled(v258, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v258, v271, "%{public}s called with null report, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }

    }
LABEL_393:
    if (v257)
      free(v257);
    goto LABEL_548;
  }
  v4 = v3;
  nw_context_assert_queue(v3->context);
  if ((*((_BYTE *)v4 + 109) & 0x40) != 0)
  {
    v5 = nw_endpoint_handler_copy_connected_flow_handler(v4->parent_endpoint_handler);

  }
  else
  {
    v5 = 0;
  }
  v6 = v4;
  v386 = v6->parameters;

  if (v5)
  {
    v7 = v5;
    v380 = v7[4];

  }
  else
  {
    v380 = 0;
  }
  v8 = *((char *)v6 + 108);
  v9 = v8 & 1 | (4 * ((v8 >> 5) & 1)) | (v8 >> 1) & 2;
  if ((v8 & 0x80000000) != 0)
    v9 |= 8u;
  a2->connection_report_reason = v9 & 0xFFFFFFDF | (v8 >> 2) & 0x10 | (32 * ((*((unsigned __int8 *)v4 + 109) >> 1) & 1));
  v379 = v5;
  a2->apple_host = nw_connection_stats_get_apple_host(v6);
  v10 = v6;
  parameters = v6->parameters;
  if (parameters
    && (effective_process_name = (const char *)nw_parameters_get_effective_process_name(parameters)) != 0)
  {
    apple_app_for_string = nw_connection_stats_get_apple_app_for_string(effective_process_name);
  }
  else
  {
    if (nw_connection_stats_get_current_app(BOOL *)::onceToken != -1)
      dispatch_once(&nw_connection_stats_get_current_app(BOOL *)::onceToken, &__block_literal_global_61_78063);
    apple_app_for_string = nw_connection_stats_get_current_app(BOOL *)::current_app;
  }

  a2->apple_app = apple_app_for_string;
  v14 = (unsigned __int8 *)nw_parameters_get_effective_process_name(v6->parameters);
  if (v14)
  {
    effective_bundle_id = a2->effective_bundle_id;
    v16 = 256;
    while (1)
    {
      v17 = *v14;
      *effective_bundle_id = v17;
      if (!v17)
        break;
      ++effective_bundle_id;
      ++v14;
      if ((unint64_t)--v16 <= 1)
      {
        *effective_bundle_id = 0;
        break;
      }
    }
  }
  if (nw_utilities_get_self_name::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44028);
  v18 = (unsigned __int8 *)nw_utilities_get_self_name::name;
  if (nw_utilities_get_self_name::name)
  {
    bundle_id = a2->bundle_id;
    v20 = 256;
    while (1)
    {
      v21 = *v18;
      *bundle_id = v21;
      if (!v21)
        break;
      ++bundle_id;
      ++v18;
      if ((unint64_t)--v20 <= 1)
      {
        *bundle_id = 0;
        break;
      }
    }
  }
  if (nw_parameters_get_effective_bundle_id(v6->parameters)
    || (v22 = v6->parameters, v23 = getpid(), nw_parameters_has_delegated_proc_pid(v22, v23))
    || nw_parameters_has_delegated_proc_uuid(v6->parameters))
  {
    *(_DWORD *)((char *)a2 + 1706) |= 0x800000u;
  }
  else
  {
    if (nw_connection_stats_get_current_app(BOOL *)::onceToken != -1)
      dispatch_once(&nw_connection_stats_get_current_app(BOOL *)::onceToken, &__block_literal_global_61_78063);
    v84 = 0x800000;
    if (!nw_connection_stats_get_current_app(BOOL *)::is_daemon)
      v84 = 0;
    v85 = *(_DWORD *)((char *)a2 + 1706) & 0xFF7FFFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
    *(_DWORD *)((char *)a2 + 1706) = *(_DWORD *)((char *)a2 + 1706) & 0xFF7FFFFF | v84;
    *((_WORD *)a2 + 855) = WORD2(v85);
  }
  v24 = v10;
  uuid_clear(a2->connection_uuid);
  *(_OWORD *)a2->connection_uuid = *(_OWORD *)v24->top_uuid;

  nw_connection_get_parent_uuid(v24, a2->parent_uuid);
  a2->seconds_since_interface_change = v24->interface_time_delta;
  v384 = v6;
  if (!v386)
  {
    v52 = v380;
    if (!v380)
    {
      v55 = 1;
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  v25 = v386;
  v26 = v25[92];

  a2->connection_mode = v26;
  tfo = nw_parameters_get_tfo(v25);
  v28 = (unsigned int *)((char *)a2 + 1706);
  v29 = 4096;
  if (!tfo)
    v29 = 0;
  v30 = *(_DWORD *)((char *)a2 + 1706) & 0xFFFFEFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  *v28 = *(_DWORD *)((char *)a2 + 1706) & 0xFFFFEFFF | v29;
  *((_WORD *)a2 + 855) = WORD2(v30);
  v31 = v25;
  v32 = *(_DWORD *)(*((_QWORD *)v31 + 13) + 103) != 0;

  v33 = *v28 & 0xFFFFDFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  *v28 = *v28 & 0xFFFFDFFF | (v32 << 13);
  *((_WORD *)a2 + 855) = WORD2(v33);
  v34 = v31;
  v35 = *(_DWORD *)(*((_QWORD *)v31 + 13) + 103);

  a2->multipath_service_type = v35;
  v36 = v34;
  v37 = *(_DWORD *)(*((_QWORD *)v31 + 13) + 72);

  a2->traffic_class = v37;
  v38 = v36;
  v39 = *(_WORD *)(*((_QWORD *)v31 + 13) + 100) & 1;

  v40 = *v28 & 0xF7FFFFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  *v28 = *v28 & 0xF7FFFFFF | (v39 << 27);
  *((_WORD *)a2 + 855) = WORD2(v40);
  v41 = v38;
  v42 = *(_WORD *)(*((_QWORD *)v31 + 13) + 100) & 2;

  v43 = *v28 & 0xEFFFFFFF | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  *v28 = *v28 & 0xEFFFFFFF | (v42 << 27);
  *((_WORD *)a2 + 855) = WORD2(v43);
  v44 = v41;
  v45 = *((_DWORD *)v44 + 24) & 0x400;

  v46 = (*v28 | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  *v28 = *v28;
  *((_WORD *)a2 + 855) = (v46 | (v45 << 22)) >> 32;
  v47 = v44;
  LODWORD(v45) = *(unsigned __int16 *)(*((_QWORD *)v31 + 13) + 108);

  v48 = *v28 & 0xFFFFFFFD | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32);
  *v28 = *v28 & 0xFFFFFFFD | (v45 >> 14) & 2;
  *((_WORD *)a2 + 855) = WORD2(v48);
  v49 = v47;
  v50 = (*(unsigned __int8 *)(*((_QWORD *)v31 + 13) + 110) << 16) & 0x40000;

  v51 = (*v28 | ((unint64_t)*((unsigned __int16 *)a2 + 855) << 32)) & 0xFFFFFDFFFFFFFFFFLL | (v50 << 23);
  *v28 = *v28;
  *((_WORD *)a2 + 855) = WORD2(v51);
  v52 = v380;
  if (v380)
  {
LABEL_38:
    v56 = v52;
    v54 = *(unsigned __int16 *)(v56[13] + 108) | (*(unsigned __int8 *)(v56[13] + 110) << 16);

    v55 = 0;
    v28 = (unsigned int *)((char *)a2 + 1706);
    goto LABEL_39;
  }
  v53 = v49;
  v54 = *(unsigned __int16 *)(*((_QWORD *)v31 + 13) + 108) | (*(unsigned __int8 *)(*((_QWORD *)v31 + 13) + 110) << 16);

  v55 = 1;
LABEL_39:
  *v28 = *v28 & 0xFFFFFFFE | (v54 >> 14) & 1;
LABEL_40:
  v57 = v5;
  v58 = MEMORY[0x1E0C809B0];
  v382 = v57;
  if (v5 || (v57 = v24->parent_endpoint_handler) != 0)
  {
    v59 = v57;
    os_unfair_lock_lock(&v59->lock);
    v60 = v59->current_path;
    os_unfair_lock_unlock(&v59->lock);
    v378 = v59;

    if (v60)
    {
      v61 = v60;
      v62 = *((_BYTE *)v61 + 473);

      if ((v62 & 0x40) != 0)
        *(_DWORD *)((char *)a2 + 1706) |= 0x40000u;
      v63 = v61;
      v64 = *((char *)v61 + 473);

      if (v64 < 0)
        *(_DWORD *)((char *)a2 + 1706) |= 0x80000u;
      if (nw_path_is_expensive(v63))
        *(_DWORD *)((char *)a2 + 1706) |= 0x2000000u;
      if (nw_path_is_constrained(v63))
        *(_DWORD *)((char *)a2 + 1706) |= 0x4000000u;
      v65 = (unsigned __int8 *)nw_path_copy_resolver_configs(v63);
      v414[0] = v58;
      v414[1] = 3221225472;
      v414[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke;
      v414[3] = &__block_descriptor_40_e35_B24__0Q8__NSObject_OS_nw_object__16l;
      v414[4] = a2;
      nw_array_apply(v65, (uint64_t)v414);

    }
  }
  else
  {
    v378 = 0;
  }
  v413 = 0;
  event_milliseconds = nw_connection_get_event_milliseconds(v24, 1, 2, &v413, 0);
  if (event_milliseconds != -1)
  {
    v67 = event_milliseconds;
    v68 = 0;
    *(_DWORD *)((char *)a2 + 1706) |= 4u;
    while (1)
    {
      v69 = nw_connection_get_event_milliseconds(v24, 1, 3, &v413, v68);
      if (v69 == -1)
        break;
      v68 = (v68 + 1);
      if (v69 >= v67)
      {
        a2->path_trigger_milliseconds = v69 - v67;
        break;
      }
    }
  }
  v412 = 0;
  v70 = nw_connection_get_event_milliseconds(v24, 4, 1, &v412, 0);
  v387 = a2;
  if (v386)
  {
    v71 = v386;
    if (nw_context_has_proxies(*(void **)(*((_QWORD *)v71 + 13) + 136)))
    {

    }
    else
    {
      v72 = *((_QWORD *)v71 + 22) == 0;

      if (v72)
        goto LABEL_63;
    }
    *(_DWORD *)((char *)a2 + 1706) |= 0x10u;
  }
LABEL_63:
  if (v70 == -1)
  {
    if (!v5)
      goto LABEL_150;
    goto LABEL_112;
  }
  v73 = *(_DWORD *)((char *)a2 + 1706);
  if ((v73 & 0x10) == 0)
  {
    *((_WORD *)a2 + 855) = *((_WORD *)a2 + 855);
    *(_DWORD *)((char *)a2 + 1706) = v73 | 8;
  }
  v74 = nw_connection_get_event_milliseconds(v24, 4, 4, &v412, 0);
  if (v74 == -1)
    goto LABEL_97;
  v75 = v74;
  if (v74 >= v70)
  {
    a2->proxy_milliseconds = v74 - v70;
    goto LABEL_97;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v76 = (id)gLogObj;
  buf[0] = 136446722;
  *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
  LOWORD(buf[3]) = 1024;
  *(_DWORD *)((char *)&buf[3] + 2) = v75;
  HIWORD(buf[4]) = 1024;
  buf[5] = v70;
  v77 = (char *)_os_log_send_and_compose_impl();

  v430[0] = 16;
  LOBYTE(v394) = 0;
  if (!__nwlog_fault(v77, v430, &v394))
  {
LABEL_95:
    v5 = v379;
    if (!v77)
      goto LABEL_97;
    goto LABEL_96;
  }
  if (v430[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v78 = (id)gLogObj;
    v79 = v430[0];
    if (os_log_type_enabled(v78, (os_log_type_t)v430[0]))
    {
      buf[0] = 136446722;
      *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v75;
      HIWORD(buf[4]) = 1024;
      buf[5] = v70;
      _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s proxy_finish %u < proxy_start %u", (uint8_t *)buf, 0x18u);
    }
LABEL_72:

    goto LABEL_95;
  }
  if (!(_BYTE)v394)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v78 = (id)gLogObj;
    v86 = v430[0];
    if (os_log_type_enabled(v78, (os_log_type_t)v430[0]))
    {
      buf[0] = 136446722;
      *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v75;
      HIWORD(buf[4]) = 1024;
      buf[5] = v70;
      _os_log_impl(&dword_182FBE000, v78, v86, "%{public}s proxy_finish %u < proxy_start %u, backtrace limit exceeded", (uint8_t *)buf, 0x18u);
    }
    goto LABEL_72;
  }
  v80 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v81 = (id)gLogObj;
  v82 = v430[0];
  v83 = os_log_type_enabled(v81, (os_log_type_t)v430[0]);
  if (!v80)
  {
    if (v83)
    {
      buf[0] = 136446722;
      *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v75;
      HIWORD(buf[4]) = 1024;
      buf[5] = v70;
      _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s proxy_finish %u < proxy_start %u, no backtrace", (uint8_t *)buf, 0x18u);
    }

    goto LABEL_95;
  }
  if (v83)
  {
    buf[0] = 136446978;
    *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = v75;
    HIWORD(buf[4]) = 1024;
    buf[5] = v70;
    LOWORD(buf[6]) = 2082;
    *(_QWORD *)((char *)&buf[6] + 2) = v80;
    _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s proxy_finish %u < proxy_start %u, dumping backtrace:%{public}s", (uint8_t *)buf, 0x22u);
  }

  free(v80);
  v5 = v379;
  if (v77)
LABEL_96:
    free(v77);
LABEL_97:
  if ((v55 & 1) == 0)
  {
    v87 = (id *)v380;
    if (v87)
    {
      v88 = v87;
      v89 = v87[23];

      if (!v89)
        goto LABEL_109;
      v90 = v89;
      v91 = v90;
      v92 = 1;
      switch(v90[38])
      {
        case 1:
          v92 = v90[39];
          break;
        case 2:
          v92 = 1002;
          break;
        case 3:
          v92 = 1001;
          break;
        case 4:
          break;
        default:
          v92 = 0;
          break;
      }

      v93 = v387;
      v387->used_proxy_type = v92;
      v89 = v91;
      v94 = v89;
      if (v387->used_proxy_type == 1)
      {
        v95 = v88;
        v94 = v95[24];

        v93 = v387;
        if (!v94)
          goto LABEL_109;
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[2] = buf;
      *(_QWORD *)&buf[4] = 0x2020000000;
      LOBYTE(buf[6]) = 0;
      v411[0] = MEMORY[0x1E0C809B0];
      v411[1] = 3221225472;
      v411[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_43;
      v411[3] = &unk_1E14AADD8;
      v411[4] = buf;
      v411[5] = v93;
      nw_proxy_config_enumerate_endpoints(v94, v411);
      _Block_object_dispose(buf, 8);
LABEL_108:

LABEL_109:
      v5 = v379;
      goto LABEL_110;
    }
    __nwlog_obj();
    v267 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(_QWORD *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
    v268 = (char *)_os_log_send_and_compose_impl();

    v430[0] = 16;
    LOBYTE(v394) = 0;
    if (__nwlog_fault(v268, v430, &v394))
    {
      if (v430[0] == 17)
      {
        __nwlog_obj();
        v269 = objc_claimAutoreleasedReturnValue();
        v270 = v430[0];
        if (os_log_type_enabled(v269, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
          _os_log_impl(&dword_182FBE000, v269, v270, "%{public}s called with null parameters", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        if ((_BYTE)v394)
        {
          v280 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v281 = objc_claimAutoreleasedReturnValue();
          v282 = v430[0];
          v283 = os_log_type_enabled(v281, (os_log_type_t)v430[0]);
          if (v280)
          {
            if (v283)
            {
              buf[0] = 136446466;
              *(_QWORD *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
              LOWORD(buf[3]) = 2082;
              *(_QWORD *)((char *)&buf[3] + 2) = v280;
              _os_log_impl(&dword_182FBE000, v281, v282, "%{public}s called with null parameters, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v280);
          }
          else
          {
            if (v283)
            {
              buf[0] = 136446210;
              *(_QWORD *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
              _os_log_impl(&dword_182FBE000, v281, v282, "%{public}s called with null parameters, no backtrace", (uint8_t *)buf, 0xCu);
            }

          }
          goto LABEL_552;
        }
        __nwlog_obj();
        v269 = objc_claimAutoreleasedReturnValue();
        v289 = v430[0];
        if (os_log_type_enabled(v269, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_parameters_copy_effective_proxy_config";
          _os_log_impl(&dword_182FBE000, v269, v289, "%{public}s called with null parameters, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }

    }
LABEL_552:
    if (v268)
      free(v268);
    v94 = 0;
    v89 = 0;
    goto LABEL_108;
  }
LABEL_110:
  if (!v5)
    goto LABEL_150;
  v410[0] = MEMORY[0x1E0C809B0];
  v410[1] = 3221225472;
  v410[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2_44;
  v410[3] = &__block_descriptor_40_e42_v16__0__NSObject_OS_nw_endpoint_handler__8l;
  v410[4] = v387;
  nw_endpoint_handler_access_proxy_handler(v382, v410);
LABEL_112:
  v96 = v382;
  while (1)
  {
    v97 = v96;
    mode = v97->mode;

    if (mode == 4)
      break;
    v99 = v97;
    v96 = (NWConcrete_nw_endpoint_handler *)v99[9];

    if (!v96)
      goto LABEL_150;
  }
  v100 = (unsigned int *)((char *)v387 + 1706);
  *(_DWORD *)((char *)v387 + 1706) |= 0x20u;
  v101 = v24;
  LOWORD(buf[0]) = WORD2(v97) ^ WORD1(v97) ^ HIWORD(v97) ^ (unsigned __int16)v97;
  v102 = nw_connection_get_event_milliseconds(v101, 5, 3, buf, 0);
  v103 = nw_connection_get_event_milliseconds(v101, 5, 4, buf, 0);
  v104 = v103 == -1 || v102 == -1;
  if (v104)
    v105 = v103 != -1;
  else
    v105 = v102 >= v103;

  v106 = 256;
  if (!v105)
    v106 = 0;
  v107 = *(_DWORD *)((char *)v387 + 1706) & 0xFFFFFEFF | ((unint64_t)*((unsigned __int16 *)v387 + 855) << 32);
  *v100 = *v100 & 0xFFFFFEFF | v106;
  *((_WORD *)v387 + 855) = WORD2(v107);
  v108 = v97;
  v109 = v108;
  if (v97->mode != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v113 = (id)gLogObj;
    buf[0] = 136446210;
    *(_QWORD *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
    v114 = (char *)_os_log_send_and_compose_impl();

    v430[0] = 16;
    LOBYTE(v394) = 0;
    if (__nwlog_fault(v114, v430, &v394))
    {
      if (v430[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v115 = (id)gLogObj;
        v116 = v430[0];
        if (os_log_type_enabled(v115, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
          _os_log_impl(&dword_182FBE000, v115, v116, "%{public}s Endpoint handler is not in fallback mode", (uint8_t *)buf, 0xCu);
        }
      }
      else if ((_BYTE)v394)
      {
        v117 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v115 = (id)gLogObj;
        v118 = v430[0];
        v119 = os_log_type_enabled(v115, (os_log_type_t)v430[0]);
        if (v117)
        {
          if (v119)
          {
            buf[0] = 136446466;
            *(_QWORD *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
            LOWORD(buf[3]) = 2082;
            *(_QWORD *)((char *)&buf[3] + 2) = v117;
            _os_log_impl(&dword_182FBE000, v115, v118, "%{public}s Endpoint handler is not in fallback mode, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }

          free(v117);
          if (!v114)
            goto LABEL_146;
          goto LABEL_145;
        }
        if (v119)
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
          _os_log_impl(&dword_182FBE000, v115, v118, "%{public}s Endpoint handler is not in fallback mode, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v115 = (id)gLogObj;
        v120 = v430[0];
        if (os_log_type_enabled(v115, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
          _os_log_impl(&dword_182FBE000, v115, v120, "%{public}s Endpoint handler is not in fallback mode, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }

    }
    if (!v114)
    {
LABEL_146:

      v112 = 0;
      goto LABEL_147;
    }
LABEL_145:
    free(v114);
    goto LABEL_146;
  }
  v110 = (unsigned __int8 *)v108[31];
  if (!v110)
  {
    __nwlog_obj();
    v276 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(_QWORD *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
    v277 = (char *)_os_log_send_and_compose_impl();

    v430[0] = 16;
    LOBYTE(v394) = 0;
    if (__nwlog_fault(v277, v430, &v394))
    {
      if (v430[0] == 17)
      {
        __nwlog_obj();
        v278 = objc_claimAutoreleasedReturnValue();
        v279 = v430[0];
        if (os_log_type_enabled(v278, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
          _os_log_impl(&dword_182FBE000, v278, v279, "%{public}s called with null fallback", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        if ((_BYTE)v394)
        {
          v284 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v285 = objc_claimAutoreleasedReturnValue();
          v286 = v430[0];
          v287 = os_log_type_enabled(v285, (os_log_type_t)v430[0]);
          if (v284)
          {
            if (v287)
            {
              buf[0] = 136446466;
              *(_QWORD *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
              LOWORD(buf[3]) = 2082;
              *(_QWORD *)((char *)&buf[3] + 2) = v284;
              _os_log_impl(&dword_182FBE000, v285, v286, "%{public}s called with null fallback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v284);
          }
          else
          {
            if (v287)
            {
              buf[0] = 136446210;
              *(_QWORD *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
              _os_log_impl(&dword_182FBE000, v285, v286, "%{public}s called with null fallback, no backtrace", (uint8_t *)buf, 0xCu);
            }

          }
          goto LABEL_561;
        }
        __nwlog_obj();
        v278 = objc_claimAutoreleasedReturnValue();
        v377 = v430[0];
        if (os_log_type_enabled(v278, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_endpoint_fallback_used_weak_fallback";
          _os_log_impl(&dword_182FBE000, v278, v377, "%{public}s called with null fallback, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }

    }
LABEL_561:
    if (v277)
      free(v277);
    goto LABEL_146;
  }
  v111 = v110[108];

  v112 = (32 * v111) & 0x40;
LABEL_147:
  v121 = *v100;
  v122 = v121 & 0xFFFFFFFFFFFFFFBFLL | ((unint64_t)*((unsigned __int16 *)v387 + 855) << 32);
  *v100 = v121 & 0xFFFFFFBF | v112;
  *((_WORD *)v387 + 855) = WORD2(v122);
  v123 = nw_endpoint_handler_used_prefer_fallback(v109);
  v124 = 128;
  if (!v123)
    v124 = 0;
  v125 = *(_DWORD *)((char *)v387 + 1706) & 0xFFFFFF7F | ((unint64_t)*((unsigned __int16 *)v387 + 855) << 32);
  *v100 = *v100 & 0xFFFFFF7F | v124;
  *((_WORD *)v387 + 855) = WORD2(v125);

LABEL_150:
  v387->privacy_stance = v24->privacy_stance;
  v126 = v24;
  v127 = v384->parameters;

  if (!v127)
    goto LABEL_172;
  v128 = v127;
  v129 = *(char **)(*((_QWORD *)v128 + 13) + 112);

  if (!v129)
    goto LABEL_172;
  if (v129 == "com.apple.news.urlresolution" || !strcmp(v129, "com.apple.news.urlresolution"))
  {
    v130 = 1;
  }
  else if (v129 == "com.apple.news.embedded-content" || !strcmp(v129, "com.apple.news.embedded-content"))
  {
    v130 = 2;
  }
  else
  {
    if (v129 == "com.apple.exposurenotification.sensitive" || !strcmp(v129, "com.apple.exposurenotification.sensitive"))
      goto LABEL_172;
    if (v129 == "com.apple.trustd.TrustURLSession" || !strcmp(v129, "com.apple.trustd.TrustURLSession"))
    {
      v130 = 4;
    }
    else if (v129 == "com.apple.dprivacyd.upload" || !strcmp(v129, "com.apple.dprivacyd.upload"))
    {
      v130 = 5;
    }
    else if (v129 == "com.apple.networkQuality.private-relay"
           || !strcmp(v129, "com.apple.networkQuality.private-relay"))
    {
      v130 = 6;
    }
    else if (v129 == "com.apple.CommCenter.BrandedCalling" || !strcmp(v129, "com.apple.CommCenter.BrandedCalling"))
    {
      v130 = 7;
    }
    else if (v129 == "com.apple.ap.promotedcontentd.proxied-requests"
           || !strcmp(v129, "com.apple.ap.promotedcontentd.proxied-requests"))
    {
      v130 = 8;
    }
    else if (v129 == "com.apple.appstored.skadnetwork.crowdanonymity"
           || !strcmp(v129, "com.apple.appstored.skadnetwork.crowdanonymity"))
    {
      v130 = 9;
    }
    else
    {
      if (v129 != "com.apple.Passwords.PRIconFetching" && strcmp(v129, "com.apple.Passwords.PRIconFetching"))
      {
LABEL_172:
        v130 = 0;
        goto LABEL_175;
      }
      v130 = 10;
    }
  }
LABEL_175:

  v131 = v387;
  v387->privacy_proxy_client = v130;
  v387->protocol_establishment_reports[0].protocol_index = -1;
  v387->protocol_establishment_reports[1].protocol_index = -1;
  v387->protocol_establishment_reports[2].protocol_index = -1;
  v387->protocol_establishment_reports[3].protocol_index = -1;
  v387->protocol_establishment_reports[4].protocol_index = -1;
  v387->protocol_establishment_reports[5].protocol_index = -1;
  v387->protocol_establishment_reports[6].protocol_index = -1;
  v387->protocol_establishment_reports[7].protocol_index = -1;
  v387->protocol_establishment_reports[8].protocol_index = -1;
  v387->protocol_establishment_reports[9].protocol_index = -1;
  v132 = nw_connection_copy_establishment_report_on_queue(v126);
  v385 = v132;
  if (v132)
  {
    v133 = v132;
    v134 = v133[1];

    v387->attempt_delay_msecs = v134;
    v135 = v133;
    v136 = v135[2];

    v387->attempt_establishment_msecs = v136;
    *(_QWORD *)v430 = 0;
    *(_QWORD *)&v430[8] = v430;
    *(_QWORD *)&v430[16] = 0x2020000000;
    v431 = 0;
    v137 = MEMORY[0x1E0C809B0];
    v406[0] = MEMORY[0x1E0C809B0];
    v406[1] = 3221225472;
    v406[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_3;
    v406[3] = &unk_1E14AAF78;
    v408 = v430;
    v409 = v387;
    v138 = v126;
    v407 = v138;
    v139 = v135;
    v140 = v406;
    v141 = (unsigned __int8 *)v139[8];
    *(_QWORD *)buf = v137;
    *(_QWORD *)&buf[2] = 3221225472;
    *(_QWORD *)&buf[4] = __nw_establishment_report_enumerate_protocols_block_invoke;
    *(_QWORD *)&buf[6] = &unk_1E14AC278;
    v142 = v140;
    *(_QWORD *)&buf[8] = v142;
    nw_array_apply(v141, (uint64_t)buf);

    if ((v387->privacy_stance & 0xFE) == 2)
    {
      *(_BYTE *)(*(_QWORD *)&v430[8] + 24) = 0;
      v143 = MEMORY[0x1E0C809B0];
      v402[0] = MEMORY[0x1E0C809B0];
      v402[1] = 3221225472;
      v402[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_46;
      v402[3] = &unk_1E14AAFA0;
      v404 = v430;
      v405 = v387;
      v403 = v138;
      v144 = v139;
      v145 = v402;
      v146 = (unsigned __int8 *)v144[5];
      *(_QWORD *)buf = v143;
      *(_QWORD *)&buf[2] = 3221225472;
      *(_QWORD *)&buf[4] = __nw_establishment_report_enumerate_proxy_endpoints_block_invoke;
      *(_QWORD *)&buf[6] = &unk_1E14AC278;
      v147 = v145;
      *(_QWORD *)&buf[8] = v147;
      nw_array_apply(v146, (uint64_t)buf);

    }
    _Block_object_dispose(v430, 8);
LABEL_186:
    v131 = v387;
    goto LABEL_187;
  }
  v148 = v384->parameters;
  if (v148 && !nw_path_parameters_get_logging_disabled(*((_QWORD *)v148 + 13)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v149 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
    {
      top_id = v126->top_id;
      buf[0] = 136446466;
      *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = top_id;
      _os_log_impl(&dword_182FBE000, v149, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] did not receive establishment report", (uint8_t *)buf, 0x12u);
    }

    goto LABEL_186;
  }
LABEL_187:
  if (v379)
  {
    v151 = MEMORY[0x1E0C809B0];
    v399[0] = MEMORY[0x1E0C809B0];
    v399[1] = 3221225472;
    v399[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_48;
    v399[3] = &unk_1E14AAEF0;
    v152 = v126;
    v400 = v152;
    v401 = v131;
    nw_endpoint_handler_access_resolver_handler(v382, v399);
    v395[0] = v151;
    v395[1] = 3221225472;
    v396 = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_50;
    v397 = &__block_descriptor_40_e42_v16__0__NSObject_OS_nw_endpoint_handler__8l;
    v398 = v131;
    v153 = v382;
    v154 = v395;
    v155 = v153;
    v156 = v155;
    while (1)
    {
      v156 = v156;
      v157 = v156->mode;

      if (v157 == 5)
        break;
      v158 = v156;
      v156 = (NWConcrete_nw_endpoint_handler *)v158[9];

      if (!v156)
        goto LABEL_193;
    }
    v396((uint64_t)v154, v156);
LABEL_193:

    v159 = nw_endpoint_handler_copy_endpoint(v155);
    v160 = v159;
    if (v159)
    {
      v161 = v159;
      v162 = -[NSObject type](v161, "type");

      v104 = v162 == 1;
      v163 = v387;
      v164 = v384;
      if (v104)
        v387->connected_address_family = nw_endpoint_get_address(v161)->sa_family;
      goto LABEL_215;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v165 = (id)gLogObj;
    buf[0] = 136446210;
    *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    v166 = (char *)_os_log_send_and_compose_impl();

    v430[0] = 16;
    LOBYTE(v394) = 0;
    if (__nwlog_fault(v166, v430, &v394))
    {
      if (v430[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v167 = (id)gLogObj;
        v168 = v430[0];
        if (os_log_type_enabled(v167, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v167, v168, "%{public}s called with null connected_endpoint", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        if ((_BYTE)v394)
        {
          v169 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v170 = (id)gLogObj;
          v171 = v430[0];
          v172 = os_log_type_enabled(v170, (os_log_type_t)v430[0]);
          if (v169)
          {
            if (v172)
            {
              buf[0] = 136446466;
              *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
              LOWORD(buf[3]) = 2082;
              *(_QWORD *)((char *)&buf[3] + 2) = v169;
              _os_log_impl(&dword_182FBE000, v170, v171, "%{public}s called with null connected_endpoint, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v169);
          }
          else
          {
            if (v172)
            {
              buf[0] = 136446210;
              *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v170, v171, "%{public}s called with null connected_endpoint, no backtrace", (uint8_t *)buf, 0xCu);
            }

          }
          goto LABEL_213;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v167 = (id)gLogObj;
        v173 = v430[0];
        if (os_log_type_enabled(v167, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v167, v173, "%{public}s called with null connected_endpoint, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }

    }
LABEL_213:
    v163 = v387;
    v164 = v384;
    if (v166)
      free(v166);
LABEL_215:
    v174 = nw_endpoint_handler_copy_connected_path(v155);
    v175 = (NWConcrete_nw_path *)v174;
    if (!v174)
    {
LABEL_240:
      v163->transport_protocol = nw_parameters_get_ip_protocol(v386);
      if (nw_parameters_get_ip_protocol(v386) == 6 && !nw_parameters_get_multipath(v386))
      {
        v429 = 0;
        v427 = 0u;
        v428 = 0u;
        v425 = 0u;
        v426 = 0u;
        v423 = 0u;
        v424 = 0u;
        v421 = 0u;
        v422 = 0u;
        v419 = 0u;
        v420 = 0u;
        v417 = 0u;
        memset(v418, 0, sizeof(v418));
        memset(buf, 0, sizeof(buf));
        v179 = v152;
        nw_context_assert_queue(v383->context);
        v180 = v179;
        if (nw_parameters_get_ip_protocol(v164->parameters) == 6)
        {
          v181 = nw_endpoint_handler_fillout_tcp_info(v180[18], buf);

          v163 = v387;
          if (v181)
          {
            v182 = *(_QWORD *)((char *)v418 + 12);
            v387->bytes_in = *(_QWORD *)((char *)&v418[2] + 12);
            v387->bytes_out = v182;
            *(_OWORD *)&v387->bytes_duplicate = *(_OWORD *)((char *)&v418[3] + 4);
            v387->bytes_retransmitted = *(_QWORD *)((char *)&v418[1] + 4);
            v387->packets_in = *(_QWORD *)((char *)&v418[2] + 4);
            v387->packets_out = *(_QWORD *)((char *)v418 + 4);
            v183 = vrev64q_s32(*(int32x4_t *)&buf[5]);
            v183.i64[0] = *(_QWORD *)&buf[5];
            *(int32x4_t *)&v387->current_rtt_msecs = v183;
            v387->syn_retransmission_count = BYTE12(v418[4]);
            if (nw_parameters_get_tfo(v386) && (BYTE4(v419) & 8) != 0)
              *(_DWORD *)((char *)v387 + 1706) |= 0x100000u;
          }
        }
        else
        {

          v163 = v387;
        }
      }
      if (nw_parameters_get_ip_protocol(v386) == 6)
      {
        if (nw_endpoint_handler_is_multipath(v152[18]))
        {
          *(_QWORD *)buf = 0;
          if (nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue(v152, (uint64_t)buf))
          {
            v186 = *(int ***)buf;
            if (*(_QWORD *)buf)
            {
              if (**(_QWORD **)buf)
              {
                v187 = *(_QWORD *)(**(_QWORD **)buf + 32);
                if (v187)
                {
                  v184.i32[0] = 0;
                  v185.i32[0] = *(_BYTE *)(v187 + 116) & 1;
                  v188 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v185, v184), 0);
                  v189 = *(int8x16_t *)(v187 + 120);
                  v190 = (int64x2_t)vbicq_s8(v189, v188);
                  v191 = (int64x2_t)vandq_s8(v189, v188);
                  v192 = *(int8x16_t *)(v187 + 48);
                  v193 = vdup_n_s32((*(_BYTE *)(v187 + 44) & 1) == 0);
                  v194.i64[0] = v193.u32[0];
                  v194.i64[1] = v193.u32[1];
                  v195 = (int32x4_t)vcltzq_s64(vshlq_n_s64(v194, 0x3FuLL));
                  v196 = (int64x2_t)vbicq_s8(v192, (int8x16_t)v195);
                  v197 = (int64x2_t)vandq_s8(v192, (int8x16_t)v195);
                  v195.i32[0] = *(_BYTE *)(v187 + 188) & 1;
                  v198 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v195, v184), 0);
                  v199 = *(int8x16_t *)(v187 + 192);
                  v200 = (int64x2_t)vbicq_s8(v199, v198);
                  v201 = (int32x4_t)vandq_s8(v199, v198);
                  v202 = vaddq_s64(v191, (int64x2_t)v201);
                  v201.i32[0] = *(_BYTE *)(v187 + 260) & 1;
                  v203 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v201, v184), 0);
                  v204 = *(int8x16_t *)(v187 + 264);
                  v205 = (int64x2_t)vbicq_s8(v204, v203);
                  v206 = vaddq_s64(v197, vaddq_s64(v202, (int64x2_t)vandq_s8(v204, v203)));
                  v207 = vaddq_s64(v196, vaddq_s64(vaddq_s64(v190, v200), v205));
                  v208 = *(unsigned int *)((char *)v163 + 1706);
                  v209 = v208 & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)*((unsigned __int16 *)v163 + 855) << 32);
                  *(_DWORD *)((char *)v163 + 1706) = v208 & 0xFFBFFFFF | ((*(_DWORD *)(v187 + 328) & 1) << 22);
                  *((_WORD *)v163 + 855) = WORD2(v209);
                  *(int8x16_t *)&v163->multipath_bytes_in_cell = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL);
                  *(int8x16_t *)&v163->multipath_bytes_in_wifi = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL);
                  *(_OWORD *)&v163->multipath_bytes_in_initial = *(_OWORD *)(v187 + 24);
                  v210 = (int8x16_t)vaddq_s64(v206, v207);
                  *(int8x16_t *)&v163->bytes_in = vextq_s8(v210, v210, 8uLL);
                  v163->mptcp_version = 0;
                  v211 = **v186;
                  if ((v211 & 0x500) == 0x100)
                  {
                    if ((v211 & 0x1000) != 0)
                      v212 = 2;
                    else
                      v212 = 1;
                    v163->mptcp_version = v212;
                  }
                }
              }
            }
            freemptcpinfo(v186);
          }
        }
      }
      if (nw_parameters_get_upper_transport_protocol(v386) != 253)
        goto LABEL_287;
      *(_QWORD *)v430 = 0;
      v394 = 0;
      v415 = 0;
      v163->transport_protocol = 253;
      nw_connection_fillout_data_transfer_snapshot_on_nw_queue(v152, (uint64_t *)v430, &v394, &v415, 0);
      v213 = *(_QWORD *)v430;
      if (*(_QWORD *)v430 && v394)
      {
        v163->bytes_in = *(_QWORD *)(*(_QWORD *)v430 + 48);
        v163->bytes_out = *(_QWORD *)(v213 + 72);
        *(_OWORD *)&v163->bytes_duplicate = *(_OWORD *)(v213 + 56);
        *(_OWORD *)&v163->bytes_retransmitted = *(_OWORD *)(v213 + 80);
        *(_OWORD *)&v163->ecn_capable_packets_acked = *(_OWORD *)(v213 + 96);
        v163->ecn_capable_packets_lost = *(_QWORD *)(v213 + 112);
        *(_OWORD *)&v163->packets_in = *(_OWORD *)(v213 + 8);
        *(_OWORD *)&v163->ect0_packets_in = *(_OWORD *)(v213 + 24);
        v163->packets_out = *(_QWORD *)(v213 + 40);
        v214 = vuzp1q_s32(*(int32x4_t *)(v213 + 120), *(int32x4_t *)(v213 + 136));
        *(int32x4_t *)&v163->current_rtt_msecs = vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v214, (int8x16_t)v214, 4uLL), v214);
        v163->syn_retransmission_count = 0;
        if (!v415)
          goto LABEL_287;
        goto LABEL_285;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v215 = (id)gLogObj;
      buf[0] = 136446210;
      *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      v216 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v392 = 0;
      if (__nwlog_fault((const char *)v216, &type, &v392))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v217 = (id)gLogObj;
          v218 = type;
          if (os_log_type_enabled(v217, type))
          {
            buf[0] = 136446210;
            *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v217, v218, "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed", (uint8_t *)buf, 0xCu);
          }
        }
        else if (v392)
        {
          v219 = __nw_create_backtrace_string();
          if (v219)
          {
            v220 = (char *)v219;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v221 = (id)gLogObj;
            v222 = type;
            if (os_log_type_enabled(v221, type))
            {
              buf[0] = 136446466;
              *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
              LOWORD(buf[3]) = 2082;
              *(_QWORD *)((char *)&buf[3] + 2) = v220;
              _os_log_impl(&dword_182FBE000, v221, v222, "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v220);
            if (!v216)
            {
LABEL_284:
              v213 = *(_QWORD *)v430;
              if (!v415)
              {
LABEL_287:

                v131 = v387;
                goto LABEL_288;
              }
LABEL_285:
              if (v213)
                free((void *)v213);
              goto LABEL_287;
            }
LABEL_283:
            free(v216);
            goto LABEL_284;
          }
          __nwlog_obj();
          v217 = objc_claimAutoreleasedReturnValue();
          v224 = type;
          if (os_log_type_enabled(v217, type))
          {
            buf[0] = 136446210;
            *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v217, v224, "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed, no backtrace", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v217 = (id)gLogObj;
          v223 = type;
          if (os_log_type_enabled(v217, type))
          {
            buf[0] = 136446210;
            *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v217, v223, "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }

      }
      if (!v216)
        goto LABEL_284;
      goto LABEL_283;
    }
    *(_DWORD *)((char *)v163 + 1706) |= 0x4000u;
    if (nw_path_uses_interface_type(v174, nw_interface_type_wifi))
    {
      v163->connected_interface_type = 1;
    }
    else if (nw_path_uses_interface_type(&v175->super, nw_interface_type_cellular))
    {
      v163->connected_interface_type = 2;
    }
    else if (nw_path_uses_interface_type(&v175->super, nw_interface_type_wired))
    {
      v163->connected_interface_type = 3;
    }
    else if (nw_path_uses_interface_type(&v175->super, nw_interface_type_loopback))
    {
      v163->connected_interface_type = 4;
    }
    else
    {
      v163->connected_interface_type = 0;
    }
    if (nw_path_uses_interface_subtype(v175, 1001))
    {
      v163->connected_interface_subtype = 1001;
    }
    else if (nw_path_uses_interface_subtype(v175, 1002))
    {
      v163->connected_interface_subtype = 1002;
    }
    else if (nw_path_uses_interface_subtype(v175, 4001))
    {
      v163->connected_interface_subtype = 4001;
    }
    else if (nw_path_uses_interface_subtype(v175, 5001))
    {
      v163->connected_interface_subtype = 5001;
    }
    else
    {
      v163->connected_interface_subtype = 0;
    }
    if (nw_path_uses_nexus_internal(v175, 0))
    {
      nexus_protocol_level = nw_path_get_nexus_protocol_level(v175);
      if (nexus_protocol_level >= 6)
      {
LABEL_239:
        v178.i64[0] = v175->estimates.up;
        v178.i64[1] = v175->estimates.down;
        *(int8x16_t *)&v163->estimated_upload_throughput = vbicq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_n_s64(0x8000uLL), v178), (int8x16_t)vcgtq_u64(v178, (uint64x2_t)vdupq_n_s64(0x30uLL))), (int8x16_t)vceqzq_s64((int64x2_t)v178));
        goto LABEL_240;
      }
      v177 = *((_DWORD *)&unk_183C6F0D0 + nexus_protocol_level);
    }
    else
    {
      v177 = 1;
    }
    v163->stack_level = v177;
    goto LABEL_239;
  }
LABEL_288:
  v131->flow_connect_milliseconds = nw_connection_get_transport_connect_milliseconds(v126, 0, 0);
  LOWORD(v394) = 0;
  v225 = nw_connection_get_event_milliseconds(v126, 3, 6, &v394, 0);
  v226 = v383;
  if (v225 == -1)
  {
    v225 = nw_connection_get_event_milliseconds(v126, 3, 13, &v394, 0);
    if (v225 == -1)
      goto LABEL_330;
  }
  v227 = nw_connection_get_event_milliseconds(v126, 3, 10, &v394, 0);
  if (v227 == -1)
  {
    v233 = v126;
    v234 = v233;
    if (v233)
    {
      if (v233->used_timestamps)
      {
        v235 = 0;
        timestamps = v233->timestamps;
        p_event = &timestamps->var1.event;
        while (*p_event != 8 || *(p_event - 1) != 1)
        {
          ++v235;
          p_event += 8;
          if (v235 >= v233->used_timestamps)
          {

            goto LABEL_413;
          }
        }
        v238 = nw_delta_nanos(v233->start_time, *(&timestamps->var0 + 2 * v235));

        v239 = v238 / 0xF4240;
        v226 = v383;
        v131 = v387;
        if ((v238 / 0xF4240) == -1)
          goto LABEL_330;
        if (v239 < v225)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v240 = (id)gLogObj;
          buf[0] = 136446722;
          *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v238 / 0xF4240;
          HIWORD(buf[4]) = 1024;
          buf[5] = v225;
          v241 = (char *)_os_log_send_and_compose_impl();

          v430[0] = 16;
          v415 = 0;
          if (__nwlog_fault(v241, v430, &v415))
          {
            if (v430[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v242 = (id)gLogObj;
              v243 = v430[0];
              if (os_log_type_enabled(v242, (os_log_type_t)v430[0]))
              {
                buf[0] = 136446722;
                *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = v239;
                HIWORD(buf[4]) = 1024;
                buf[5] = v225;
                _os_log_impl(&dword_182FBE000, v242, v243, "%{public}s connection_cancel %u < flow_finish %u", (uint8_t *)buf, 0x18u);
              }
            }
            else
            {
              if (v415)
              {
                v251 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v252 = objc_claimAutoreleasedReturnValue();
                v253 = v430[0];
                v254 = os_log_type_enabled(v252, (os_log_type_t)v430[0]);
                if (v251)
                {
                  if (v254)
                  {
                    buf[0] = 136446978;
                    *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = v239;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = v225;
                    LOWORD(buf[6]) = 2082;
                    *(_QWORD *)((char *)&buf[6] + 2) = v251;
                    _os_log_impl(&dword_182FBE000, v252, v253, "%{public}s connection_cancel %u < flow_finish %u, dumping backtrace:%{public}s", (uint8_t *)buf, 0x22u);
                  }

                  free(v251);
                }
                else
                {
                  if (v254)
                  {
                    buf[0] = 136446722;
                    *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = v239;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = v225;
                    _os_log_impl(&dword_182FBE000, v252, v253, "%{public}s connection_cancel %u < flow_finish %u, no backtrace", (uint8_t *)buf, 0x18u);
                  }

                }
                goto LABEL_346;
              }
              __nwlog_obj();
              v242 = objc_claimAutoreleasedReturnValue();
              v255 = v430[0];
              if (os_log_type_enabled(v242, (os_log_type_t)v430[0]))
              {
                buf[0] = 136446722;
                *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = v239;
                HIWORD(buf[4]) = 1024;
                buf[5] = v225;
                _os_log_impl(&dword_182FBE000, v242, v255, "%{public}s connection_cancel %u < flow_finish %u, backtrace limit exceeded", (uint8_t *)buf, 0x18u);
              }
            }

          }
LABEL_346:
          if (v241)
            free(v241);
LABEL_413:
          v131 = v387;
          if ((*((_BYTE *)v383 + 109) & 0x40) != 0)
            goto LABEL_414;
          goto LABEL_331;
        }
        v387->flow_duration_milliseconds = v239 - v225;
LABEL_330:
        if ((*((_BYTE *)v226 + 109) & 0x40) != 0)
          goto LABEL_414;
        goto LABEL_331;
      }
LABEL_412:

      goto LABEL_413;
    }
    __nwlog_obj();
    v263 = (void *)objc_claimAutoreleasedReturnValue();
    buf[0] = 136446210;
    *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
    v264 = (char *)_os_log_send_and_compose_impl();

    v430[0] = 16;
    v415 = 0;
    if (__nwlog_fault(v264, v430, &v415))
    {
      if (v430[0] == 17)
      {
        __nwlog_obj();
        v265 = objc_claimAutoreleasedReturnValue();
        v266 = v430[0];
        if (os_log_type_enabled(v265, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
          _os_log_impl(&dword_182FBE000, v265, v266, "%{public}s called with null connection", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        if (v415)
        {
          v272 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v273 = objc_claimAutoreleasedReturnValue();
          v274 = v430[0];
          v275 = os_log_type_enabled(v273, (os_log_type_t)v430[0]);
          if (v272)
          {
            if (v275)
            {
              buf[0] = 136446466;
              *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
              LOWORD(buf[3]) = 2082;
              *(_QWORD *)((char *)&buf[3] + 2) = v272;
              _os_log_impl(&dword_182FBE000, v273, v274, "%{public}s called with null connection, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v272);
          }
          else
          {
            if (v275)
            {
              buf[0] = 136446210;
              *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
              _os_log_impl(&dword_182FBE000, v273, v274, "%{public}s called with null connection, no backtrace", (uint8_t *)buf, 0xCu);
            }

          }
          goto LABEL_410;
        }
        __nwlog_obj();
        v265 = objc_claimAutoreleasedReturnValue();
        v288 = v430[0];
        if (os_log_type_enabled(v265, (os_log_type_t)v430[0]))
        {
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
          _os_log_impl(&dword_182FBE000, v265, v288, "%{public}s called with null connection, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }

    }
LABEL_410:
    if (v264)
      free(v264);
    goto LABEL_412;
  }
  v228 = v227;
  if (v227 >= v225)
  {
    v131->flow_duration_milliseconds = v227 - v225;
    if ((*((_BYTE *)v383 + 109) & 0x40) != 0)
      goto LABEL_414;
    goto LABEL_331;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v229 = (id)gLogObj;
  buf[0] = 136446722;
  *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
  LOWORD(buf[3]) = 1024;
  *(_DWORD *)((char *)&buf[3] + 2) = v228;
  HIWORD(buf[4]) = 1024;
  buf[5] = v225;
  v230 = (char *)_os_log_send_and_compose_impl();

  v430[0] = 16;
  v415 = 0;
  if (!__nwlog_fault(v230, v430, &v415))
  {
LABEL_325:
    v131 = v387;
    if (!v230)
      goto LABEL_327;
    goto LABEL_326;
  }
  if (v430[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v231 = (id)gLogObj;
    v232 = v430[0];
    if (os_log_type_enabled(v231, (os_log_type_t)v430[0]))
    {
      buf[0] = 136446722;
      *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v228;
      HIWORD(buf[4]) = 1024;
      buf[5] = v225;
      _os_log_impl(&dword_182FBE000, v231, v232, "%{public}s flow_disconnect %u < flow_finish %u", (uint8_t *)buf, 0x18u);
    }
LABEL_296:

    goto LABEL_325;
  }
  if (!v415)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v231 = (id)gLogObj;
    v248 = v430[0];
    if (os_log_type_enabled(v231, (os_log_type_t)v430[0]))
    {
      buf[0] = 136446722;
      *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v228;
      HIWORD(buf[4]) = 1024;
      buf[5] = v225;
      _os_log_impl(&dword_182FBE000, v231, v248, "%{public}s flow_disconnect %u < flow_finish %u, backtrace limit exceeded", (uint8_t *)buf, 0x18u);
    }
    goto LABEL_296;
  }
  v244 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v245 = (id)gLogObj;
  v246 = v430[0];
  v247 = os_log_type_enabled(v245, (os_log_type_t)v430[0]);
  if (!v244)
  {
    if (v247)
    {
      buf[0] = 136446722;
      *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v228;
      HIWORD(buf[4]) = 1024;
      buf[5] = v225;
      _os_log_impl(&dword_182FBE000, v245, v246, "%{public}s flow_disconnect %u < flow_finish %u, no backtrace", (uint8_t *)buf, 0x18u);
    }

    goto LABEL_325;
  }
  if (v247)
  {
    buf[0] = 136446978;
    *(_QWORD *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = v228;
    HIWORD(buf[4]) = 1024;
    buf[5] = v225;
    LOWORD(buf[6]) = 2082;
    *(_QWORD *)((char *)&buf[6] + 2) = v244;
    _os_log_impl(&dword_182FBE000, v245, v246, "%{public}s flow_disconnect %u < flow_finish %u, dumping backtrace:%{public}s", (uint8_t *)buf, 0x22u);
  }

  free(v244);
  v131 = v387;
  if (v230)
LABEL_326:
    free(v230);
LABEL_327:
  if ((*((_BYTE *)v383 + 109) & 0x40) != 0)
  {
LABEL_414:
    v250 = v385;
    tls = nw_endpoint_handler_stack_uses_tls(v126->parent_endpoint_handler);
    if (v386)
      v291 = tls;
    else
      v291 = 1;
    if ((v291 & 1) != 0)
    {
LABEL_419:
      v249 = 1024;
      if (!tls)
        v249 = 0;
      goto LABEL_421;
    }
LABEL_418:
    tls = nw_parameters_get_tls(v386);
    goto LABEL_419;
  }
LABEL_331:
  v249 = (uint64_t)v386;
  v250 = v385;
  if (v386)
    goto LABEL_418;
LABEL_421:
  v292 = (unsigned int *)((char *)v131 + 1706);
  v293 = *(_DWORD *)((char *)v131 + 1706) & 0xFFFFFBFF | ((unint64_t)*((unsigned __int16 *)v131 + 855) << 32) | v249;
  *(_DWORD *)((char *)v131 + 1706) = v293;
  if (v250)
  {
    v294 = (void *)nw_protocol_boringssl_copy_definition();
    Helper_x8__nwswifttls_copy_definition = gotLoadHelper_x8__nwswifttls_copy_definition(v295);
    if (*(_QWORD *)(v297 + 2312))
    {
      inited = (void *)nwswifttls_copy_definition_delayInitStub(Helper_x8__nwswifttls_copy_definition);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v299 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136446466;
        *(_QWORD *)&buf[1] = "nw_protocol_copy_swift_tls_definition_if_present";
        LOWORD(buf[3]) = 2048;
        *(_QWORD *)((char *)&buf[3] + 2) = inited;
        _os_log_impl(&dword_182FBE000, v299, OS_LOG_TYPE_DEBUG, "%{public}s SwiftTLS protocol definition %p", (uint8_t *)buf, 0x16u);
      }
      v250 = v385;
    }
    else
    {
      inited = 0;
    }
    v131->tls_milliseconds = nw_establishment_report_get_handshake_ms_for_protocol(v250, v294, inited);

    v293 = *v292 | ((unint64_t)*((unsigned __int16 *)v131 + 855) << 32);
    v131 = v387;
  }
  else
  {
    v131->tls_milliseconds = 0;
  }
  *((_WORD *)v292 + 2) = WORD2(v293);
  *v292 = v293 & 0xFFFF7FFF | (((~(_WORD)v293 & 0x4400) == 0) << 15);
  v131->tls_version = nw_connection_get_tls_version(v126);
  v300 = networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_disable_tls13);
  v301 = 2048;
  if (v300)
    v301 = 0;
  v302 = *v292 & 0xFFFFF7FF | ((unint64_t)*((unsigned __int16 *)v292 + 2) << 32);
  *v292 = *v292 & 0xFFFFF7FF | v301;
  *((_WORD *)v292 + 2) = WORD2(v302);
  v303 = (void *)nw_protocol_boringssl_copy_definition();
  v381 = nw_parameters_copy_protocol_options_for_definition(v386, v303);

  if (v381)
  {
    v304 = v381;
    enable_encrypted_client_hello = sec_protocol_options_get_enable_encrypted_client_hello(v304);
    v306 = 0x10000000000;
    if (!enable_encrypted_client_hello)
      v306 = 0;
    v307 = (*v292 | ((unint64_t)*((unsigned __int16 *)v292 + 2) << 32)) & 0xFFFFFEFFFFFFFFFFLL;
    *v292 = *v292;
    *((_WORD *)v292 + 2) = (v307 | v306) >> 32;

  }
  if ((*v292 & 0x400) != 0)
  {
    v308 = v126;
    v309 = v308;
    if (v308->used_timestamps)
    {
      v310 = 0;
      v311 = v308->timestamps;
      v312 = &v311->var1.event;
      while (*v312 != 5 || *(v312 - 1) != 5)
      {
        ++v310;
        v312 += 8;
        if (v310 >= v308->used_timestamps)
          goto LABEL_443;
      }
      v313 = nw_delta_nanos(v308->start_time, *(&v311->var0 + 2 * v310));

      if ((v313 / 0xF4240) != -1)
        *v292 |= 0x1000000u;
    }
    else
    {
LABEL_443:

    }
  }
  v314 = v126;
  v315 = 0;
  do
  {
    v316 = v315;
    if ((_DWORD)v315 == 255)
      break;
    v317 = v314;
    if (!v314)
    {
      __nwlog_obj();
      v325 = (void *)objc_claimAutoreleasedReturnValue();
      buf[0] = 136446210;
      *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
      v326 = (char *)_os_log_send_and_compose_impl();

      v430[0] = 16;
      v415 = 0;
      if (__nwlog_fault(v326, v430, &v415))
      {
        if (v430[0] == 17)
        {
          __nwlog_obj();
          v327 = objc_claimAutoreleasedReturnValue();
          v328 = v430[0];
          if (os_log_type_enabled(v327, (os_log_type_t)v430[0]))
          {
            buf[0] = 136446210;
            *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl(&dword_182FBE000, v327, v328, "%{public}s called with null connection", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          if (v415)
          {
            v329 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v330 = objc_claimAutoreleasedReturnValue();
            v331 = v430[0];
            v332 = os_log_type_enabled(v330, (os_log_type_t)v430[0]);
            if (v329)
            {
              if (v332)
              {
                buf[0] = 136446466;
                *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
                LOWORD(buf[3]) = 2082;
                *(_QWORD *)((char *)&buf[3] + 2) = v329;
                _os_log_impl(&dword_182FBE000, v330, v331, "%{public}s called with null connection, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
              }

              free(v329);
            }
            else
            {
              if (v332)
              {
                buf[0] = 136446210;
                *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
                _os_log_impl(&dword_182FBE000, v330, v331, "%{public}s called with null connection, no backtrace", (uint8_t *)buf, 0xCu);
              }

            }
            goto LABEL_474;
          }
          __nwlog_obj();
          v327 = objc_claimAutoreleasedReturnValue();
          v333 = v430[0];
          if (os_log_type_enabled(v327, (os_log_type_t)v430[0]))
          {
            buf[0] = 136446210;
            *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl(&dword_182FBE000, v327, v333, "%{public}s called with null connection, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }

      }
LABEL_474:
      if (v326)
        free(v326);
      LODWORD(v316) = 0;
LABEL_477:

      break;
    }
    used_timestamps = v314->used_timestamps;
    if (!used_timestamps)
      goto LABEL_477;
    v319 = 0;
    v320 = 0;
    LODWORD(v321) = -1;
    v322 = v316;
    while (1)
    {
      v324 = v314->timestamps;
      if (*(unsigned __int16 *)((char *)&v324->var1.event + v319) == 2
        && *(unsigned __int16 *)((char *)&v324->var1.domain + v319) == 6)
      {
        break;
      }
      v323 = v322;
LABEL_450:
      ++v320;
      v319 += 16;
      v322 = v323;
      if (v320 >= used_timestamps)
        goto LABEL_456;
    }
    v323 = (v322 - 1);
    if (v323 < 0xFFFFFFFE)
      goto LABEL_450;
    v321 = nw_delta_nanos(v314->start_time, *(unint64_t *)((char *)&v324->var0 + v319)) / 0xF4240uLL;
    if ((_DWORD)v322 == -1)
    {
      used_timestamps = v314->used_timestamps;
      v323 = 0xFFFFFFFFLL;
      goto LABEL_450;
    }
LABEL_456:

    v315 = (v316 + 1);
  }
  while ((_DWORD)v321 != -1);

  v387->data_stall_count = v316;
  v334 = v314;
  v335 = 0;
  do
  {
    v336 = v335;
    if ((_DWORD)v335 == 255)
      break;
    v337 = v334;
    if (!v314)
    {
      __nwlog_obj();
      v345 = (void *)objc_claimAutoreleasedReturnValue();
      buf[0] = 136446210;
      *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
      v346 = (char *)_os_log_send_and_compose_impl();

      v430[0] = 16;
      v415 = 0;
      if (__nwlog_fault(v346, v430, &v415))
      {
        if (v430[0] == 17)
        {
          __nwlog_obj();
          v347 = objc_claimAutoreleasedReturnValue();
          v348 = v430[0];
          if (os_log_type_enabled(v347, (os_log_type_t)v430[0]))
          {
            buf[0] = 136446210;
            *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl(&dword_182FBE000, v347, v348, "%{public}s called with null connection", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          if (v415)
          {
            v349 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v350 = objc_claimAutoreleasedReturnValue();
            v351 = v430[0];
            v352 = os_log_type_enabled(v350, (os_log_type_t)v430[0]);
            if (v349)
            {
              if (v352)
              {
                buf[0] = 136446466;
                *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
                LOWORD(buf[3]) = 2082;
                *(_QWORD *)((char *)&buf[3] + 2) = v349;
                _os_log_impl(&dword_182FBE000, v350, v351, "%{public}s called with null connection, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
              }

              free(v349);
            }
            else
            {
              if (v352)
              {
                buf[0] = 136446210;
                *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
                _os_log_impl(&dword_182FBE000, v350, v351, "%{public}s called with null connection, no backtrace", (uint8_t *)buf, 0xCu);
              }

            }
            goto LABEL_508;
          }
          __nwlog_obj();
          v347 = objc_claimAutoreleasedReturnValue();
          v353 = v430[0];
          if (os_log_type_enabled(v347, (os_log_type_t)v430[0]))
          {
            buf[0] = 136446210;
            *(_QWORD *)&buf[1] = "nw_connection_get_event_milliseconds";
            _os_log_impl(&dword_182FBE000, v347, v353, "%{public}s called with null connection, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }

      }
LABEL_508:
      if (v346)
        free(v346);
      LODWORD(v336) = 0;
LABEL_511:

      break;
    }
    v338 = v314->used_timestamps;
    if (!v338)
      goto LABEL_511;
    v339 = 0;
    v340 = 0;
    LODWORD(v341) = -1;
    v342 = v336;
    while (1)
    {
      v344 = v314->timestamps;
      if (*(unsigned __int16 *)((char *)&v344->var1.event + v339) == 1
        && *(unsigned __int16 *)((char *)&v344->var1.domain + v339) == 6)
      {
        break;
      }
      v343 = v342;
LABEL_484:
      ++v340;
      v339 += 16;
      v342 = v343;
      if (v340 >= v338)
        goto LABEL_490;
    }
    v343 = (v342 - 1);
    if (v343 < 0xFFFFFFFE)
      goto LABEL_484;
    v341 = nw_delta_nanos(v314->start_time, *(unint64_t *)((char *)&v344->var0 + v339)) / 0xF4240uLL;
    if ((_DWORD)v342 == -1)
    {
      v338 = v314->used_timestamps;
      v343 = 0xFFFFFFFFLL;
      goto LABEL_484;
    }
LABEL_490:

    v335 = (v336 + 1);
  }
  while ((_DWORD)v341 != -1);

  v387->connection_reuse_count = v336;
  if ((*((_BYTE *)v384 + 108) & 0x20) != 0)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[2] = buf;
    buf[6] = 0;
    *(_QWORD *)&buf[4] = 0x2020000000;
    activities = (unsigned __int8 *)v334->activities;
    v388[0] = MEMORY[0x1E0C809B0];
    v388[1] = 3221225472;
    v388[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_51;
    v388[3] = &unk_1E14AAFC8;
    v390 = buf;
    v355 = v334;
    v389 = v355;
    v391 = v387;
    nw_array_apply(activities, (uint64_t)v388);
    v356 = v384->parameters;
    if (v356 && !nw_path_parameters_get_logging_disabled(*((_QWORD *)v356 + 13)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v357 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v357, OS_LOG_TYPE_INFO))
      {
        v358 = v355->top_id;
        v359 = *(_DWORD *)(*(_QWORD *)&buf[2] + 24);
        *(_DWORD *)v430 = 136446722;
        *(_QWORD *)&v430[4] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
        *(_WORD *)&v430[12] = 1024;
        *(_DWORD *)&v430[14] = v358;
        *(_WORD *)&v430[18] = 1024;
        *(_DWORD *)&v430[20] = v359;
        _os_log_impl(&dword_182FBE000, v357, OS_LOG_TYPE_INFO, "%{public}s [C%u] Copied %u activities to connection report", v430, 0x18u);
      }

    }
    _Block_object_dispose(buf, 8);
  }
  quic_enabled = nw_settings_get_quic_enabled();
  v361 = 0x200000000;
  if (!quic_enabled)
    v361 = 0;
  v362 = (*v292 | ((unint64_t)*((unsigned __int16 *)v292 + 2) << 32)) & 0xFFFFFFFDFFFFFFFFLL | v361;
  *((_WORD *)v292 + 2) = WORD2(v362);
  buf[0] = 0;
  *(_DWORD *)v430 = 0;
  if (v385)
  {
    nw_establishment_report_get_accurate_ecn_state(v385, buf, v430);
    v363 = v387;
    v387->client_accurate_ecn_state = buf[0];
    v387->server_accurate_ecn_state = *(_DWORD *)v430;
    l4s_enabled = nw_establishment_report_get_l4s_enabled(v385);
    v362 = *v292 | ((unint64_t)*((unsigned __int16 *)v292 + 2) << 32);
  }
  else
  {
    l4s_enabled = 0;
    v363 = v387;
    *(_QWORD *)&v387->client_accurate_ecn_state = 0;
  }
  v365 = v362 & 0xFFFFFBFFFFFFFFFFLL | ((unint64_t)l4s_enabled << 42);
  *v292 = v362;
  *((_WORD *)v292 + 2) = WORD2(v365);
  v363->failure_reason = 0;
  errors = (uint64_t)v334->errors;
  if (!errors)
    goto LABEL_538;
  if (*(_QWORD *)(errors + 24) == *(_QWORD *)(errors + 16))
    goto LABEL_537;
  nw_array_get_object_at_index(errors, 0);
  v367 = (void *)objc_claimAutoreleasedReturnValue();
  v368 = v367;
  if (v367)
  {
    v369 = v367;
    v370 = v369[2];

    if (v370 == 2)
      goto LABEL_535;
    if (v370 == 3)
    {
      v370 = 4;
      goto LABEL_535;
    }
    if ((*v292 & 0x4000) == 0 && v370 == 1)
    {
      v370 = 3;
LABEL_535:
      v387->failure_reason = v370;
    }
  }

  if (!v387->failure_reason)
  {
LABEL_537:
    LODWORD(v365) = *v292;
LABEL_538:
    if ((v365 & 0x4000) == 0)
    {
      v371 = v334;
      v372 = v371;
      if (v314->used_timestamps)
      {
        v373 = 0;
        v374 = v314->timestamps;
        v375 = &v374->var1.event;
        while (*v375 != 6 || *(v375 - 1) != 1)
        {
          ++v373;
          v375 += 8;
          if (v373 >= v314->used_timestamps)
            goto LABEL_546;
        }
        v376 = (nw_delta_nanos(v314->start_time, *(&v374->var0 + 2 * v373)) / 0xF4240uLL) == -1;

        if (!v376)
          v387->failure_reason = 1;
      }
      else
      {
LABEL_546:

      }
    }
  }

LABEL_548:
}

void sub_183A97B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  void *v47;
  void *v48;

  _Unwind_Resume(a1);
}

void nw_connection_log_summary_on_nw_queue(NWConcrete_nw_connection *a1)
{
  NWConcrete_nw_connection *v1;
  NWConcrete_nw_endpoint_handler *v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  id *v8;
  unint64_t v9;
  int v10;
  id *v12;
  id v13;
  int ip_protocol;
  const char *v15;
  NWConcrete_nw_endpoint_handler *v16;
  int v17;
  NSObject *v18;
  nw_endpoint_type_t type;
  unsigned int used_timestamps;
  uint64_t v21;
  unint64_t v22;
  nw_connection_timestamp_s *timestamps;
  int v24;
  NWConcrete_nw_connection *v25;
  NWConcrete_nw_connection *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  NSObject *v39;
  NSObject *v40;
  NWConcrete_nw_connection *v41;
  unsigned int v42;
  const char *v43;
  OS_nw_parameters *v44;
  id v45;
  void *v46;
  double v47;
  double Helper_x8__nwswifttls_copy_definition;
  uint64_t v49;
  void *inited;
  NSObject *v51;
  unsigned int handshake_ms_for_protocol;
  NWConcrete_nw_endpoint_handler *v53;
  id v54;
  id v55;
  uint64_t start_time;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  NSObject *v62;
  unsigned int v63;
  OS_nw_parameters *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  unsigned int v70;
  const char *v71;
  OS_nw_parameters *v72;
  const char *v73;
  const char *v74;
  const char *v75;
  const char *v76;
  unsigned int v77;
  const char *v78;
  OS_nw_parameters *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  uint64_t v84;
  unsigned int v85;
  const char *v86;
  OS_nw_parameters *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *v91;
  unsigned int v92;
  const char *v93;
  OS_nw_parameters *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  const char *v98;
  unsigned int v99;
  const char *v100;
  OS_nw_parameters *v101;
  const char *v102;
  const char *v103;
  const char *v104;
  const char *v105;
  unsigned int v106;
  OS_nw_parameters *v107;
  const char *v108;
  const char *v109;
  const char *v110;
  const char *v111;
  unsigned int v112;
  const char *v113;
  OS_nw_parameters *v114;
  const char *v115;
  const char *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  NSObject *v130;
  uint32_t v131;
  unsigned int top_id;
  OS_nw_parameters *parameters;
  const char *id_string;
  const char *description;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  const char *v149;
  OS_nw_parameters *v150;
  const char *v151;
  const char *v152;
  const char *v153;
  unsigned int v154;
  const char *v155;
  OS_nw_parameters *v156;
  const char *v157;
  const char *v158;
  const char *v159;
  unsigned int v160;
  const char *v161;
  OS_nw_parameters *v162;
  const char *v163;
  const char *v164;
  unsigned int v165;
  const char *v166;
  OS_nw_parameters *v167;
  const char *v168;
  const char *v169;
  const char *v170;
  const char *v171;
  unsigned int v172;
  const char *v173;
  OS_nw_parameters *v174;
  const char *v175;
  const char *v176;
  const char *v177;
  const char *v178;
  unsigned int v179;
  const char *v180;
  OS_nw_parameters *v181;
  const char *v182;
  const char *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  const char *v196;
  OS_nw_parameters *v197;
  const char *v198;
  const char *v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  NSObject *v212;
  uint32_t v213;
  unsigned int v214;
  const char *v215;
  OS_nw_parameters *v216;
  const char *v217;
  const char *v218;
  const char *v219;
  const char *v220;
  unsigned int v221;
  const char *v222;
  OS_nw_parameters *v223;
  const char *v224;
  const char *v225;
  const char *v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  const char *v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  id v262;
  id v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  const char *v268;
  OS_nw_parameters *v269;
  const char *v270;
  const char *v271;
  const char *v272;
  unsigned int v273;
  const char *v274;
  OS_nw_parameters *v275;
  const char *v276;
  const char *v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  const char *v290;
  OS_nw_parameters *v291;
  const char *v292;
  const char *v293;
  const char *v294;
  unsigned int v295;
  const char *v296;
  OS_nw_parameters *v297;
  const char *v298;
  const char *v299;
  const char *v300;
  unsigned int v301;
  const char *v302;
  OS_nw_parameters *v303;
  const char *v304;
  const char *v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  const char *v349;
  const char *v350;
  int privacy_stance;
  const char *logging_description;
  const char *v353;
  unsigned int v354;
  unsigned int transport_connect_milliseconds;
  void *v356;
  void *v357;
  unsigned int v358;
  unsigned int v359;
  const char *v360;
  uint64_t v361;
  const char *v362;
  uint64_t v363;
  const char *v364;
  OS_nw_parameters *v365;
  unsigned int v366;
  const char *v367;
  char v368;
  uint64_t v369;
  void *v370;
  uint8_t buf[4];
  _BYTE v372[30];
  _BYTE v373[10];
  __int16 v374;
  const char *v375;
  __int16 v376;
  int v377;
  __int16 v378;
  _QWORD *v379;
  __int16 v380;
  const char *v381;
  __int16 v382;
  const char *v383;
  __int16 v384;
  void *v385;
  __int16 v386;
  _BYTE v387[10];
  _DWORD v388[3];
  _BYTE v389[194];
  __int16 v390;
  uint64_t v391;
  __int16 v392;
  uint64_t v393;
  _QWORD v394[5];

  v394[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  nw_context_assert_queue(v1->context);
  if (nw_parameters_get_logging_disabled((uint64_t)v1->parameters))
    goto LABEL_274;
  v2 = nw_endpoint_handler_copy_connected_flow_handler(v1->parent_endpoint_handler);
  if (v2)
  {
    v3 = 0;
    LOWORD(v4) = 0;
    v5 = 0;
    v6 = 0;
    privacy_stance = v1->privacy_stance;
    v367 = "?";
    do
    {
      v9 = v2;
      v10 = *(_DWORD *)(v9 + 116);

      if (v10 == 2 && (unsigned __int16)v4 == 0)
      {
        v3 = nw_endpoint_handler_stack_uses_tls(v1->parent_endpoint_handler);
        v12 = (id *)(id)v9;
        v13 = v12[4];

        if (v13)
        {
          ip_protocol = nw_parameters_get_ip_protocol(v13);
          v15 = "QUIC";
          if (nw_parameters_get_upper_transport_protocol(v13) != 253)
          {
            if (ip_protocol == 17)
            {
              v15 = "UDP";
            }
            else
            {
              v15 = v367;
              if (ip_protocol == 6)
              {
                if (nw_connection_uses_multipath(v1))
                  v15 = "MPTCP";
                else
                  v15 = "TCP";
              }
            }
          }
        }
        else
        {
          v15 = v367;
        }
        v4 = HIDWORD(v9) ^ (v9 >> 16) ^ HIWORD(v9) ^ v9;

        v367 = v15;
      }
      v16 = (NWConcrete_nw_endpoint_handler *)(id)v9;
      v17 = *(_DWORD *)(v9 + 116);

      if (v17 == 1)
      {
        v18 = nw_endpoint_handler_copy_endpoint(v16);
        type = nw_endpoint_get_type(v18);

        if (type != nw_endpoint_type_host || v5)
        {
          v7 = (unsigned __int16)(WORD2(v16) ^ WORD1(v16) ^ HIWORD(v16) ^ (unsigned __int16)v16);
          if (v6)
            v7 = v6;
          if (type == nw_endpoint_type_bonjour_service)
            v6 = v7;
        }
        else
        {
          v5 = (unsigned __int16)(WORD2(v16) ^ WORD1(v16) ^ HIWORD(v16) ^ (unsigned __int16)v16);
        }
      }
      v8 = v16;
      v2 = (NWConcrete_nw_endpoint_handler *)v8[9];

    }
    while (v2);
    used_timestamps = v1->used_timestamps;
    if (v1->used_timestamps)
    {
      v21 = 0;
      v22 = 0;
      v366 = -1;
      LODWORD(v363) = -1;
      v358 = -1;
      v359 = -1;
      LODWORD(v361) = -1;
      while (1)
      {
        timestamps = v1->timestamps;
        v24 = *(unsigned __int16 *)((char *)&timestamps->var1.domain + v21);
        if (v24 == 3)
          break;
        if (v24 == 2)
        {
          v25 = v1;
          nw_context_assert_queue(v1->context);
          switch(*(unsigned __int16 *)((char *)&timestamps->var1.event + v21))
          {
            case 1u:
              if (v5)
              {
                if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) != v5)
                  goto LABEL_80;
              }
              else
              {
                v5 = *(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21);
              }
              v35 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
              v36 = v35 / 0xF4240;
              if (v35 > 0xF423FFFFFFFFFLL)
                LODWORD(v36) = -1;
              v359 = v36;
              goto LABEL_80;
            case 2u:
              if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) == v5 && (_DWORD)v363 == -1)
              {
                if (v359 == -1)
                {
                  LODWORD(v363) = -1;
                  v359 = -1;
                }
                else
                {
                  v28 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
                  v29 = v28 / 0xF4240;
                  if (v28 > 0xF423FFFFFFFFFLL)
                    LODWORD(v29) = -1;
                  v363 = v29 - v359;
                  if (v29 < v359)
                  {
                    if (gLogDatapath)
                    {
                      __nwlog_obj();
                      v39 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)v372 = "nw_connection_log_summary_resolver_on_nw_queue";
                        *(_WORD *)&v372[8] = 2082;
                        *(_QWORD *)&v372[10] = "dns->receive";
                        *(_WORD *)&v372[18] = 2048;
                        *(_QWORD *)&v372[20] = v359;
                        *(_WORD *)&v372[28] = 2048;
                        *(_QWORD *)v373 = v363;
                        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
                      }
                      LODWORD(v363) = 0;
                      goto LABEL_87;
                    }
                    LODWORD(v363) = 0;
                  }
                }
              }
              goto LABEL_80;
            case 3u:
              if (!v6)
              {
                v6 = *(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21);
LABEL_75:
                v37 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
                v38 = v37 / 0xF4240;
                if (v37 > 0xF423FFFFFFFFFLL)
                  LODWORD(v38) = -1;
                goto LABEL_79;
              }
              if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) == v6)
                goto LABEL_75;
              break;
            case 4u:
              if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) == v6 && (_DWORD)v361 == -1)
              {
                if (v358 == -1)
                {
                  LODWORD(v361) = -1;
                  LODWORD(v38) = -1;
LABEL_79:
                  v358 = v38;
                }
                else
                {
                  v31 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
                  v32 = v31 / 0xF4240;
                  if (v31 > 0xF423FFFFFFFFFLL)
                    LODWORD(v32) = -1;
                  v361 = v32 - v358;
                  if (v32 < v358)
                  {
                    if (gLogDatapath)
                    {
                      __nwlog_obj();
                      v39 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)v372 = "nw_connection_log_summary_resolver_on_nw_queue";
                        *(_WORD *)&v372[8] = 2082;
                        *(_QWORD *)&v372[10] = "bonjour->receive";
                        *(_WORD *)&v372[18] = 2048;
                        *(_QWORD *)&v372[20] = v358;
                        *(_WORD *)&v372[28] = 2048;
                        *(_QWORD *)v373 = v361;
                        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
                      }
                      LODWORD(v361) = 0;
LABEL_87:

                    }
                    else
                    {
                      LODWORD(v361) = 0;
                    }
                  }
                }
              }
              goto LABEL_80;
            default:
              goto LABEL_80;
          }
          goto LABEL_80;
        }
LABEL_30:
        ++v22;
        v21 += 16;
        if (v22 >= used_timestamps)
          goto LABEL_94;
      }
      v26 = v1;
      nw_context_assert_queue(v1->context);
      if (*(unsigned __int16 *)((char *)&timestamps->var1.event + v21) == 3)
      {
        if ((_WORD)v4)
        {
          if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) != (unsigned __int16)v4)
            goto LABEL_80;
        }
        else
        {
          LOWORD(v4) = *(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21);
        }
        v33 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
        v34 = v33 / 0xF4240;
        if (v33 > 0xF423FFFFFFFFFLL)
          LODWORD(v34) = -1;
        v366 = v34;
      }
LABEL_80:

      used_timestamps = v1->used_timestamps;
      goto LABEL_30;
    }
    LODWORD(v361) = -1;
    LODWORD(v363) = -1;
    v358 = -1;
    v359 = -1;
    v366 = -1;
LABEL_94:
    if ((_WORD)v4)
    {
      transport_connect_milliseconds = nw_connection_get_transport_connect_milliseconds(v1, v4, 0);
      if ((v3 & 1) != 0)
      {
        v45 = nw_connection_copy_establishment_report_on_queue(v1);
        if (v45)
        {
          v46 = (void *)nw_protocol_boringssl_copy_definition();
          Helper_x8__nwswifttls_copy_definition = gotLoadHelper_x8__nwswifttls_copy_definition(v47);
          if (*(_QWORD *)(v49 + 2312))
          {
            inited = (void *)nwswifttls_copy_definition_delayInitStub(Helper_x8__nwswifttls_copy_definition);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v51 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)v372 = "nw_protocol_copy_swift_tls_definition_if_present";
              *(_WORD *)&v372[8] = 2048;
              *(_QWORD *)&v372[10] = inited;
              _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s SwiftTLS protocol definition %p", buf, 0x16u);
            }
          }
          else
          {
            inited = 0;
          }
          handshake_ms_for_protocol = nw_establishment_report_get_handshake_ms_for_protocol(v45, v46, inited);

        }
        else
        {
          handshake_ms_for_protocol = -1;
        }

      }
      else
      {
        handshake_ms_for_protocol = -1;
      }
    }
    else
    {
      handshake_ms_for_protocol = -1;
      transport_connect_milliseconds = -1;
    }
    v369 = 0;
    v370 = 0;
    v368 = 0;
    nw_connection_fillout_data_transfer_snapshot_on_nw_queue(v1, (uint64_t *)&v370, &v369, &v368, 0);
    v53 = nw_endpoint_handler_copy_connected_flow_handler(v1->parent_endpoint_handler);
    v394[0] = 0;
    v394[1] = 0;
    nw_endpoint_handler_get_client_id(v53, (unsigned __int8 *)v394);
    v357 = (void *)nw_endpoint_handler_copy_connected_path(v53);
    v54 = nw_connection_copy_connected_local_endpoint(v1);
    v55 = nw_connection_copy_connected_remote_endpoint(v1);
    start_time = v1->start_time;
    v57 = mach_continuous_time();
    if (v57 <= 1)
      v58 = 1;
    else
      v58 = v57;
    v59 = nw_delta_nanos(start_time, v58);
    v60 = v59 / 0xF4240;
    if (v59 > 0xF423FFFFFFFFFLL)
      LODWORD(v60) = -1;
    v354 = v60;
    if (v6)
    {
      if ((v3 & 1) != 0)
      {
        v61 = *((_QWORD *)&off_1E14AB0D0 + nw_connection_get_tls_version(v1));
        if (v370)
        {
          if ((*((_BYTE *)v1 + 109) & 4) != 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              goto LABEL_270;
            v356 = v55;
            top_id = v1->top_id;
            logging_description = nw_endpoint_get_logging_description(v1->endpoint);
            parameters = v1->parameters;
            id_string = nw_endpoint_handler_get_id_string(v53);
            description = nw_endpoint_get_description(v54);
            v136 = nw_endpoint_get_logging_description(v356);
            v137 = *((_QWORD *)v370 + 1);
            v138 = *((_QWORD *)v370 + 5);
            v139 = *((_QWORD *)v370 + 6);
            v140 = *((_QWORD *)v370 + 14);
            v141 = *((_QWORD *)v370 + 15) % 0x3E8;
            v142 = *((_QWORD *)v370 + 8);
            v143 = *((_QWORD *)v370 + 9);
            v145 = *((_QWORD *)v370 + 10);
            v144 = *((_QWORD *)v370 + 11);
            v147 = *((_QWORD *)v370 + 12);
            v146 = *((_QWORD *)v370 + 13);
            *(_DWORD *)&v389[134] = *((_QWORD *)v370 + 15) / 0x3E8;
            *(_QWORD *)&v389[146] = v145;
            *(_QWORD *)&v389[166] = v144;
            *(_QWORD *)&v389[176] = v147;
            *(_QWORD *)&v389[186] = v146;
            *(_DWORD *)v372 = top_id;
            *(_QWORD *)&v372[12] = v1->top_uuid;
            *(_QWORD *)&v372[22] = logging_description;
            *(_QWORD *)&v373[2] = parameters;
            v375 = id_string;
            *(_WORD *)&v372[4] = 1042;
            v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            v378 = 2098;
            v379 = v394;
            v381 = description;
            v383 = v136;
            *(_WORD *)v373 = 2114;
            v384 = 2114;
            *(_DWORD *)v387 = v354 / 0x3E8;
            *(_DWORD *)((char *)v388 + 2) = v358 / 0x3E8;
            v388[2] = v358 % 0x3E8;
            *(_DWORD *)&v389[2] = v361 / 0x3E8;
            *(_DWORD *)&v389[8] = v361 % 0x3E8;
            *(_DWORD *)&v389[14] = v359 / 0x3E8;
            *(_DWORD *)&v389[20] = v359 % 0x3E8;
            *(_DWORD *)&v389[26] = v363 / 0x3E8;
            *(_DWORD *)&v389[32] = v363 % 0x3E8;
            *(_QWORD *)&v389[38] = v367;
            *(_DWORD *)&v389[48] = v366 / 0x3E8;
            *(_DWORD *)&v389[54] = v366 % 0x3E8;
            *(_DWORD *)&v389[60] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[66] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            v374 = 2082;
            v380 = 2082;
            v382 = 2082;
            *(_WORD *)&v389[36] = 2082;
            *(_WORD *)&v389[70] = 2082;
            *(_QWORD *)&v389[72] = v61;
            *(_DWORD *)&v389[82] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[88] = handshake_ms_for_protocol % 0x3E8;
            *(_QWORD *)&v389[94] = v139;
            *(_QWORD *)&v389[104] = v143;
            *(_QWORD *)&v389[114] = v137;
            *(_QWORD *)&v389[124] = v138;
            *(_DWORD *)&v389[140] = v141;
            *(_QWORD *)&v389[156] = v142;
            *(_WORD *)&v389[92] = 2048;
            *(_WORD *)&v389[102] = 2048;
            *(_WORD *)&v389[112] = 2048;
            *(_WORD *)&v389[122] = 2048;
            *(_WORD *)&v389[144] = 2048;
            *(_WORD *)&v389[154] = 2048;
            *(_WORD *)&v389[164] = 2048;
            *(_WORD *)&v389[174] = 2048;
            *(_WORD *)&v389[184] = 2048;
            v390 = 2048;
            v391 = v140;
            LOWORD(v388[0]) = 1024;
            HIWORD(v388[1]) = 1024;
            *(_WORD *)v389 = 1024;
            *(_WORD *)&v389[6] = 1024;
            *(_WORD *)&v389[12] = 1024;
            *(_WORD *)&v389[18] = 1024;
            *(_WORD *)&v389[24] = 1024;
            *(_WORD *)&v389[30] = 1024;
            *(_WORD *)&v389[46] = 1024;
            *(_WORD *)&v389[52] = 1024;
            *(_WORD *)&v389[58] = 1024;
            *(_WORD *)&v389[64] = 1024;
            *(_WORD *)&v389[80] = 1024;
            *(_WORD *)&v389[86] = 1024;
            *(_WORD *)&v389[132] = 1024;
            *(_WORD *)&v389[138] = 1024;
            v386 = 1024;
            *(_WORD *)&v387[4] = 1024;
            *(_DWORD *)&v387[6] = v354 % 0x3E8;
            *(_DWORD *)buf = 67119362;
            v385 = v357;
            v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%0"
                   "3us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v130 = v62;
            v131 = 328;
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              goto LABEL_270;
            v356 = v55;
            v63 = v1->top_id;
            v349 = nw_endpoint_get_logging_description(v1->endpoint);
            v64 = v1->parameters;
            v65 = nw_endpoint_handler_get_id_string(v53);
            v66 = nw_endpoint_get_description(v54);
            v67 = nw_endpoint_get_logging_description(v356);
            if ((privacy_stance - 1) > 4)
              v68 = "Unknown";
            else
              v68 = off_1E149B4A0[privacy_stance - 1];
            v238 = *((_QWORD *)v370 + 1);
            v239 = *((_QWORD *)v370 + 6);
            v240 = *((_QWORD *)v370 + 14);
            v241 = *((_QWORD *)v370 + 15) / 0x3E8;
            v242 = *((_QWORD *)v370 + 15) % 0x3E8;
            v243 = *((_QWORD *)v370 + 8);
            v244 = *((_QWORD *)v370 + 9);
            v246 = *((_QWORD *)v370 + 10);
            v245 = *((_QWORD *)v370 + 11);
            v247 = *((_QWORD *)v370 + 12);
            v248 = *((_QWORD *)v370 + 13);
            *(_QWORD *)&v389[134] = *((_QWORD *)v370 + 5);
            *(_DWORD *)&v389[150] = v242;
            *(_QWORD *)&v389[166] = v243;
            *(_QWORD *)&v389[176] = v245;
            *(_QWORD *)&v389[186] = v247;
            v393 = v240;
            *(_DWORD *)v372 = v63;
            *(_QWORD *)&v372[12] = v1->top_uuid;
            *(_QWORD *)&v372[22] = v349;
            *(_QWORD *)&v373[2] = v64;
            v375 = v65;
            *(_WORD *)&v372[4] = 1042;
            v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            v378 = 2098;
            v379 = v394;
            v381 = v66;
            v383 = v67;
            *(_WORD *)v373 = 2114;
            v384 = 2114;
            *(_QWORD *)v387 = v68;
            v388[0] = v354 / 0x3E8;
            *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
            *(_DWORD *)v389 = v358 / 0x3E8;
            *(_DWORD *)&v389[6] = v358 % 0x3E8;
            *(_DWORD *)&v389[12] = v361 / 0x3E8;
            *(_DWORD *)&v389[18] = v361 % 0x3E8;
            *(_DWORD *)&v389[24] = v359 / 0x3E8;
            *(_DWORD *)&v389[30] = v359 % 0x3E8;
            *(_DWORD *)&v389[36] = v363 / 0x3E8;
            *(_DWORD *)&v389[42] = v363 % 0x3E8;
            *(_QWORD *)&v389[48] = v367;
            *(_DWORD *)&v389[58] = v366 / 0x3E8;
            *(_DWORD *)&v389[64] = v366 % 0x3E8;
            *(_DWORD *)&v389[70] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[76] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            v374 = 2082;
            v380 = 2082;
            v382 = 2082;
            v386 = 2082;
            *(_WORD *)&v389[46] = 2082;
            *(_WORD *)&v389[80] = 2082;
            *(_QWORD *)&v389[82] = v61;
            *(_DWORD *)&v389[92] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[98] = handshake_ms_for_protocol % 0x3E8;
            *(_QWORD *)&v389[104] = v239;
            *(_QWORD *)&v389[114] = v244;
            *(_QWORD *)&v389[124] = v238;
            *(_DWORD *)&v389[144] = v241;
            *(_QWORD *)&v389[156] = v246;
            v391 = v248;
            *(_WORD *)&v389[102] = 2048;
            *(_WORD *)&v389[112] = 2048;
            *(_WORD *)&v389[122] = 2048;
            *(_WORD *)&v389[132] = 2048;
            *(_WORD *)&v389[154] = 2048;
            *(_WORD *)&v389[164] = 2048;
            *(_WORD *)&v389[174] = 2048;
            *(_WORD *)&v389[184] = 2048;
            v390 = 2048;
            v392 = 2048;
            LOWORD(v388[1]) = 1024;
            HIWORD(v388[2]) = 1024;
            *(_WORD *)&v389[4] = 1024;
            *(_WORD *)&v389[10] = 1024;
            *(_WORD *)&v389[16] = 1024;
            *(_WORD *)&v389[22] = 1024;
            *(_WORD *)&v389[28] = 1024;
            *(_WORD *)&v389[34] = 1024;
            *(_WORD *)&v389[40] = 1024;
            *(_WORD *)&v389[56] = 1024;
            *(_WORD *)&v389[62] = 1024;
            *(_WORD *)&v389[68] = 1024;
            *(_WORD *)&v389[74] = 1024;
            *(_WORD *)&v389[90] = 1024;
            *(_WORD *)&v389[96] = 1024;
            *(_WORD *)&v389[142] = 1024;
            *(_WORD *)&v389[148] = 1024;
            *(_WORD *)&v387[8] = 1024;
            *(_DWORD *)buf = 67119618;
            v385 = v357;
            v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%0"
                   "3us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v130 = v62;
            v131 = 338;
          }
        }
        else if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_270;
          v356 = v55;
          v160 = v1->top_id;
          v161 = nw_endpoint_get_logging_description(v1->endpoint);
          v162 = v1->parameters;
          v163 = nw_endpoint_handler_get_id_string(v53);
          v353 = nw_endpoint_get_description(v54);
          v164 = nw_endpoint_get_logging_description(v356);
          *(_DWORD *)buf = 67116290;
          *(_DWORD *)v372 = v160;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(_QWORD *)&v372[22] = v161;
          *(_WORD *)v373 = 2114;
          *(_QWORD *)&v373[2] = v162;
          v374 = 2082;
          v375 = v163;
          v376 = 1042;
          v377 = 16;
          v378 = 2098;
          v379 = v394;
          v380 = 2082;
          v381 = v353;
          v382 = 2082;
          v383 = v164;
          v384 = 2114;
          v385 = v357;
          v386 = 1024;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          LOWORD(v388[0]) = 1024;
          *(_DWORD *)((char *)v388 + 2) = v358 / 0x3E8;
          HIWORD(v388[1]) = 1024;
          v388[2] = v358 % 0x3E8;
          *(_WORD *)v389 = 1024;
          *(_DWORD *)&v389[2] = v361 / 0x3E8;
          *(_WORD *)&v389[6] = 1024;
          *(_DWORD *)&v389[8] = v361 % 0x3E8;
          *(_WORD *)&v389[12] = 1024;
          *(_DWORD *)&v389[14] = v359 / 0x3E8;
          *(_WORD *)&v389[18] = 1024;
          *(_DWORD *)&v389[20] = v359 % 0x3E8;
          *(_WORD *)&v389[24] = 1024;
          *(_DWORD *)&v389[26] = v363 / 0x3E8;
          *(_WORD *)&v389[30] = 1024;
          *(_DWORD *)&v389[32] = v363 % 0x3E8;
          *(_WORD *)&v389[36] = 2082;
          *(_QWORD *)&v389[38] = v367;
          *(_WORD *)&v389[46] = 1024;
          *(_DWORD *)&v389[48] = v366 / 0x3E8;
          *(_WORD *)&v389[52] = 1024;
          *(_DWORD *)&v389[54] = v366 % 0x3E8;
          *(_WORD *)&v389[58] = 1024;
          *(_DWORD *)&v389[60] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[64] = 1024;
          *(_DWORD *)&v389[66] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[70] = 2082;
          *(_QWORD *)&v389[72] = v61;
          *(_WORD *)&v389[80] = 1024;
          *(_DWORD *)&v389[82] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[86] = 1024;
          *(_DWORD *)&v389[88] = handshake_ms_for_protocol % 0x3E8;
          v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us, %{public}s took %u.%03us";
          v130 = v62;
          v131 = 216;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_270;
          v356 = v55;
          v106 = v1->top_id;
          v350 = nw_endpoint_get_logging_description(v1->endpoint);
          v107 = v1->parameters;
          v108 = nw_endpoint_handler_get_id_string(v53);
          v109 = nw_endpoint_get_description(v54);
          v110 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4)
            v111 = "Unknown";
          else
            v111 = off_1E149B4A0[privacy_stance - 1];
          *(_DWORD *)buf = 67116546;
          *(_DWORD *)v372 = v106;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(_QWORD *)&v372[22] = v350;
          *(_WORD *)v373 = 2114;
          *(_QWORD *)&v373[2] = v107;
          v374 = 2082;
          v375 = v108;
          v376 = 1042;
          v377 = 16;
          v378 = 2098;
          v379 = v394;
          v380 = 2082;
          v381 = v109;
          v382 = 2082;
          v383 = v110;
          v384 = 2114;
          v385 = v357;
          v386 = 2082;
          *(_QWORD *)v387 = v111;
          *(_WORD *)&v387[8] = 1024;
          v388[0] = v354 / 0x3E8;
          LOWORD(v388[1]) = 1024;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          HIWORD(v388[2]) = 1024;
          *(_DWORD *)v389 = v358 / 0x3E8;
          *(_WORD *)&v389[4] = 1024;
          *(_DWORD *)&v389[6] = v358 % 0x3E8;
          *(_WORD *)&v389[10] = 1024;
          *(_DWORD *)&v389[12] = v361 / 0x3E8;
          *(_WORD *)&v389[16] = 1024;
          *(_DWORD *)&v389[18] = v361 % 0x3E8;
          *(_WORD *)&v389[22] = 1024;
          *(_DWORD *)&v389[24] = v359 / 0x3E8;
          *(_WORD *)&v389[28] = 1024;
          *(_DWORD *)&v389[30] = v359 % 0x3E8;
          *(_WORD *)&v389[34] = 1024;
          *(_DWORD *)&v389[36] = v363 / 0x3E8;
          *(_WORD *)&v389[40] = 1024;
          *(_DWORD *)&v389[42] = v363 % 0x3E8;
          *(_WORD *)&v389[46] = 2082;
          *(_QWORD *)&v389[48] = v367;
          *(_WORD *)&v389[56] = 1024;
          *(_DWORD *)&v389[58] = v366 / 0x3E8;
          *(_WORD *)&v389[62] = 1024;
          *(_DWORD *)&v389[64] = v366 % 0x3E8;
          *(_WORD *)&v389[68] = 1024;
          *(_DWORD *)&v389[70] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[74] = 1024;
          *(_DWORD *)&v389[76] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[80] = 2082;
          *(_QWORD *)&v389[82] = v61;
          *(_WORD *)&v389[90] = 1024;
          *(_DWORD *)&v389[92] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[96] = 1024;
          *(_DWORD *)&v389[98] = handshake_ms_for_protocol % 0x3E8;
          v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us, %{public}s took %u.%03us";
          v130 = v62;
          v131 = 226;
        }
      }
      else if (v370)
      {
        if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_270;
          v356 = v55;
          v112 = v1->top_id;
          v113 = nw_endpoint_get_logging_description(v1->endpoint);
          v114 = v1->parameters;
          v115 = nw_endpoint_handler_get_id_string(v53);
          v116 = nw_endpoint_get_description(v54);
          v117 = nw_endpoint_get_logging_description(v356);
          v118 = *((_QWORD *)v370 + 1);
          v119 = *((_QWORD *)v370 + 5);
          v120 = *((_QWORD *)v370 + 6);
          v121 = *((_QWORD *)v370 + 8);
          v122 = *((_QWORD *)v370 + 9);
          *(_DWORD *)v372 = v112;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          v124 = *((_QWORD *)v370 + 10);
          v123 = *((_QWORD *)v370 + 11);
          *(_QWORD *)&v372[22] = v113;
          *(_QWORD *)&v373[2] = v114;
          v126 = *((_QWORD *)v370 + 12);
          v125 = *((_QWORD *)v370 + 13);
          v375 = v115;
          v128 = *((_QWORD *)v370 + 14);
          v127 = *((_QWORD *)v370 + 15);
          *(_QWORD *)&v389[134] = v121;
          *(_QWORD *)&v389[144] = v123;
          *(_QWORD *)&v389[154] = v126;
          *(_QWORD *)&v389[174] = v128;
          *(_WORD *)&v372[4] = 1042;
          v376 = 1042;
          *(_DWORD *)&v372[6] = 16;
          v377 = 16;
          *(_WORD *)&v372[10] = 2098;
          v378 = 2098;
          v379 = v394;
          v381 = v116;
          v383 = v117;
          *(_WORD *)v373 = 2114;
          v384 = 2114;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_DWORD *)((char *)v388 + 2) = v358 / 0x3E8;
          v388[2] = v358 % 0x3E8;
          *(_DWORD *)&v389[2] = v361 / 0x3E8;
          *(_DWORD *)&v389[8] = v361 % 0x3E8;
          *(_DWORD *)&v389[14] = v359 / 0x3E8;
          *(_DWORD *)&v389[20] = v359 % 0x3E8;
          *(_DWORD *)&v389[26] = v363 / 0x3E8;
          *(_DWORD *)&v389[32] = v363 % 0x3E8;
          *(_WORD *)&v372[20] = 2082;
          v374 = 2082;
          v380 = 2082;
          v382 = 2082;
          *(_WORD *)&v389[36] = 2082;
          *(_QWORD *)&v389[38] = v367;
          *(_DWORD *)&v389[48] = v366 / 0x3E8;
          *(_DWORD *)&v389[54] = v366 % 0x3E8;
          *(_DWORD *)&v389[60] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v389[66] = transport_connect_milliseconds % 0x3E8;
          *(_QWORD *)&v389[72] = v120;
          *(_QWORD *)&v389[82] = v122;
          *(_QWORD *)&v389[92] = v118;
          *(_QWORD *)&v389[102] = v119;
          *(_DWORD *)&v389[112] = v127 / 0x3E8;
          *(_DWORD *)&v389[118] = v127 % 0x3E8;
          *(_QWORD *)&v389[124] = v124;
          *(_QWORD *)&v389[164] = v125;
          *(_WORD *)&v389[70] = 2048;
          *(_WORD *)&v389[80] = 2048;
          *(_WORD *)&v389[90] = 2048;
          *(_WORD *)&v389[100] = 2048;
          *(_WORD *)&v389[122] = 2048;
          *(_WORD *)&v389[132] = 2048;
          *(_WORD *)&v389[142] = 2048;
          *(_WORD *)&v389[152] = 2048;
          *(_WORD *)&v389[162] = 2048;
          *(_WORD *)&v389[172] = 2048;
          LOWORD(v388[0]) = 1024;
          HIWORD(v388[1]) = 1024;
          *(_WORD *)v389 = 1024;
          *(_WORD *)&v389[6] = 1024;
          *(_WORD *)&v389[12] = 1024;
          *(_WORD *)&v389[18] = 1024;
          *(_WORD *)&v389[24] = 1024;
          *(_WORD *)&v389[30] = 1024;
          *(_WORD *)&v389[46] = 1024;
          *(_WORD *)&v389[52] = 1024;
          *(_WORD *)&v389[58] = 1024;
          *(_WORD *)&v389[64] = 1024;
          *(_WORD *)&v389[110] = 1024;
          *(_WORD *)&v389[116] = 1024;
          v386 = 1024;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          *(_DWORD *)buf = 67118594;
          v385 = v357;
          v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us\n"
                 "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-"
                 "order bytes: %llu\n"
                 "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
          v130 = v62;
          v131 = 306;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_270;
          v356 = v55;
          v77 = v1->top_id;
          v78 = nw_endpoint_get_logging_description(v1->endpoint);
          v79 = v1->parameters;
          v80 = nw_endpoint_handler_get_id_string(v53);
          v81 = nw_endpoint_get_description(v54);
          v82 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4)
            v83 = "Unknown";
          else
            v83 = off_1E149B4A0[privacy_stance - 1];
          v228 = *((_QWORD *)v370 + 1);
          v229 = *((_QWORD *)v370 + 5);
          v230 = *((_QWORD *)v370 + 6);
          v231 = *((_QWORD *)v370 + 8);
          v232 = *((_QWORD *)v370 + 9);
          v233 = *((_QWORD *)v370 + 11);
          v234 = *((_QWORD *)v370 + 12);
          v235 = *((_QWORD *)v370 + 13);
          v237 = *((_QWORD *)v370 + 14);
          v236 = *((_QWORD *)v370 + 15);
          *(_QWORD *)&v389[134] = *((_QWORD *)v370 + 10);
          *(_QWORD *)&v389[144] = v231;
          *(_QWORD *)&v389[154] = v233;
          *(_QWORD *)&v389[174] = v235;
          *(_QWORD *)&v389[184] = v237;
          *(_DWORD *)v372 = v77;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          *(_QWORD *)&v372[22] = v78;
          *(_QWORD *)&v373[2] = v79;
          v375 = v80;
          *(_WORD *)&v372[4] = 1042;
          v376 = 1042;
          *(_DWORD *)&v372[6] = 16;
          v377 = 16;
          *(_WORD *)&v372[10] = 2098;
          v378 = 2098;
          v379 = v394;
          v381 = v81;
          v383 = v82;
          *(_WORD *)v373 = 2114;
          v384 = 2114;
          *(_QWORD *)v387 = v83;
          v388[0] = v354 / 0x3E8;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          *(_DWORD *)v389 = v358 / 0x3E8;
          *(_DWORD *)&v389[6] = v358 % 0x3E8;
          *(_DWORD *)&v389[12] = v361 / 0x3E8;
          *(_DWORD *)&v389[18] = v361 % 0x3E8;
          *(_DWORD *)&v389[24] = v359 / 0x3E8;
          *(_DWORD *)&v389[30] = v359 % 0x3E8;
          *(_DWORD *)&v389[36] = v363 / 0x3E8;
          *(_DWORD *)&v389[42] = v363 % 0x3E8;
          *(_WORD *)&v372[20] = 2082;
          v374 = 2082;
          v380 = 2082;
          v382 = 2082;
          v386 = 2082;
          *(_WORD *)&v389[46] = 2082;
          *(_QWORD *)&v389[48] = v367;
          *(_DWORD *)&v389[58] = v366 / 0x3E8;
          *(_DWORD *)&v389[64] = v366 % 0x3E8;
          *(_DWORD *)&v389[70] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v389[76] = transport_connect_milliseconds % 0x3E8;
          *(_QWORD *)&v389[82] = v230;
          *(_QWORD *)&v389[92] = v232;
          *(_QWORD *)&v389[102] = v228;
          *(_QWORD *)&v389[112] = v229;
          *(_DWORD *)&v389[122] = v236 / 0x3E8;
          *(_DWORD *)&v389[128] = v236 % 0x3E8;
          *(_QWORD *)&v389[164] = v234;
          *(_WORD *)&v389[80] = 2048;
          *(_WORD *)&v389[90] = 2048;
          *(_WORD *)&v389[100] = 2048;
          *(_WORD *)&v389[110] = 2048;
          *(_WORD *)&v389[132] = 2048;
          *(_WORD *)&v389[142] = 2048;
          *(_WORD *)&v389[152] = 2048;
          *(_WORD *)&v389[162] = 2048;
          *(_WORD *)&v389[172] = 2048;
          *(_WORD *)&v389[182] = 2048;
          LOWORD(v388[1]) = 1024;
          HIWORD(v388[2]) = 1024;
          *(_WORD *)&v389[4] = 1024;
          *(_WORD *)&v389[10] = 1024;
          *(_WORD *)&v389[16] = 1024;
          *(_WORD *)&v389[22] = 1024;
          *(_WORD *)&v389[28] = 1024;
          *(_WORD *)&v389[34] = 1024;
          *(_WORD *)&v389[40] = 1024;
          *(_WORD *)&v389[56] = 1024;
          *(_WORD *)&v389[62] = 1024;
          *(_WORD *)&v389[68] = 1024;
          *(_WORD *)&v389[74] = 1024;
          *(_WORD *)&v389[120] = 1024;
          *(_WORD *)&v389[126] = 1024;
          *(_WORD *)&v387[8] = 1024;
          *(_DWORD *)buf = 67118850;
          v385 = v357;
          v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us\n"
                 "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-"
                 "order bytes: %llu\n"
                 "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
          v130 = v62;
          v131 = 316;
        }
      }
      else if ((*((_BYTE *)v1 + 109) & 4) != 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          goto LABEL_270;
        v356 = v55;
        v154 = v1->top_id;
        v155 = nw_endpoint_get_logging_description(v1->endpoint);
        v156 = v1->parameters;
        v157 = nw_endpoint_handler_get_id_string(v53);
        v158 = nw_endpoint_get_description(v54);
        v159 = nw_endpoint_get_logging_description(v356);
        *(_DWORD *)buf = 67115522;
        *(_DWORD *)v372 = v154;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(_QWORD *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(_QWORD *)&v372[22] = v155;
        *(_WORD *)v373 = 2114;
        *(_QWORD *)&v373[2] = v156;
        v374 = 2082;
        v375 = v157;
        v376 = 1042;
        v377 = 16;
        v378 = 2098;
        v379 = v394;
        v380 = 2082;
        v381 = v158;
        v382 = 2082;
        v383 = v159;
        v384 = 2114;
        v385 = v357;
        v386 = 1024;
        *(_DWORD *)v387 = v354 / 0x3E8;
        *(_WORD *)&v387[4] = 1024;
        *(_DWORD *)&v387[6] = v354 % 0x3E8;
        LOWORD(v388[0]) = 1024;
        *(_DWORD *)((char *)v388 + 2) = v358 / 0x3E8;
        HIWORD(v388[1]) = 1024;
        v388[2] = v358 % 0x3E8;
        *(_WORD *)v389 = 1024;
        *(_DWORD *)&v389[2] = v361 / 0x3E8;
        *(_WORD *)&v389[6] = 1024;
        *(_DWORD *)&v389[8] = v361 % 0x3E8;
        *(_WORD *)&v389[12] = 1024;
        *(_DWORD *)&v389[14] = v359 / 0x3E8;
        *(_WORD *)&v389[18] = 1024;
        *(_DWORD *)&v389[20] = v359 % 0x3E8;
        *(_WORD *)&v389[24] = 1024;
        *(_DWORD *)&v389[26] = v363 / 0x3E8;
        *(_WORD *)&v389[30] = 1024;
        *(_DWORD *)&v389[32] = v363 % 0x3E8;
        *(_WORD *)&v389[36] = 2082;
        *(_QWORD *)&v389[38] = v367;
        *(_WORD *)&v389[46] = 1024;
        *(_DWORD *)&v389[48] = v366 / 0x3E8;
        *(_WORD *)&v389[52] = 1024;
        *(_DWORD *)&v389[54] = v366 % 0x3E8;
        *(_WORD *)&v389[58] = 1024;
        *(_DWORD *)&v389[60] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[64] = 1024;
        *(_DWORD *)&v389[66] = transport_connect_milliseconds % 0x3E8;
        v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        v130 = v62;
        v131 = 194;
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          goto LABEL_270;
        v356 = v55;
        v99 = v1->top_id;
        v100 = nw_endpoint_get_logging_description(v1->endpoint);
        v101 = v1->parameters;
        v102 = nw_endpoint_handler_get_id_string(v53);
        v103 = nw_endpoint_get_description(v54);
        v104 = nw_endpoint_get_logging_description(v356);
        if ((privacy_stance - 1) > 4)
          v105 = "Unknown";
        else
          v105 = off_1E149B4A0[privacy_stance - 1];
        *(_DWORD *)buf = 67115778;
        *(_DWORD *)v372 = v99;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(_QWORD *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(_QWORD *)&v372[22] = v100;
        *(_WORD *)v373 = 2114;
        *(_QWORD *)&v373[2] = v101;
        v374 = 2082;
        v375 = v102;
        v376 = 1042;
        v377 = 16;
        v378 = 2098;
        v379 = v394;
        v380 = 2082;
        v381 = v103;
        v382 = 2082;
        v383 = v104;
        v384 = 2114;
        v385 = v357;
        v386 = 2082;
        *(_QWORD *)v387 = v105;
        *(_WORD *)&v387[8] = 1024;
        v388[0] = v354 / 0x3E8;
        LOWORD(v388[1]) = 1024;
        *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
        HIWORD(v388[2]) = 1024;
        *(_DWORD *)v389 = v358 / 0x3E8;
        *(_WORD *)&v389[4] = 1024;
        *(_DWORD *)&v389[6] = v358 % 0x3E8;
        *(_WORD *)&v389[10] = 1024;
        *(_DWORD *)&v389[12] = v361 / 0x3E8;
        *(_WORD *)&v389[16] = 1024;
        *(_DWORD *)&v389[18] = v361 % 0x3E8;
        *(_WORD *)&v389[22] = 1024;
        *(_DWORD *)&v389[24] = v359 / 0x3E8;
        *(_WORD *)&v389[28] = 1024;
        *(_DWORD *)&v389[30] = v359 % 0x3E8;
        *(_WORD *)&v389[34] = 1024;
        *(_DWORD *)&v389[36] = v363 / 0x3E8;
        *(_WORD *)&v389[40] = 1024;
        *(_DWORD *)&v389[42] = v363 % 0x3E8;
        *(_WORD *)&v389[46] = 2082;
        *(_QWORD *)&v389[48] = v367;
        *(_WORD *)&v389[56] = 1024;
        *(_DWORD *)&v389[58] = v366 / 0x3E8;
        *(_WORD *)&v389[62] = 1024;
        *(_DWORD *)&v389[64] = v366 % 0x3E8;
        *(_WORD *)&v389[68] = 1024;
        *(_DWORD *)&v389[70] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[74] = 1024;
        *(_DWORD *)&v389[76] = transport_connect_milliseconds % 0x3E8;
        v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tPrivacy Stance: %{public}s\n"
               "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        v130 = v62;
        v131 = 204;
      }
      goto LABEL_253;
    }
    if (v5)
    {
      if ((v3 & 1) != 0)
      {
        v69 = *((_QWORD *)&off_1E14AB0D0 + nw_connection_get_tls_version(v1));
        if (v370)
        {
          if ((*((_BYTE *)v1 + 109) & 4) != 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              goto LABEL_270;
            v356 = v55;
            v348 = v54;
            v195 = v1->top_id;
            v196 = nw_endpoint_get_logging_description(v1->endpoint);
            v197 = v1->parameters;
            v198 = nw_endpoint_handler_get_id_string(v53);
            v199 = nw_endpoint_get_description(v348);
            v200 = nw_endpoint_get_logging_description(v356);
            v201 = *((_QWORD *)v370 + 1);
            v202 = *((_QWORD *)v370 + 5);
            v203 = *((_QWORD *)v370 + 6);
            v205 = *((_QWORD *)v370 + 8);
            v204 = *((_QWORD *)v370 + 9);
            v206 = *((_QWORD *)v370 + 10);
            v208 = *((_QWORD *)v370 + 12);
            v207 = *((_QWORD *)v370 + 13);
            v209 = *((_QWORD *)v370 + 14);
            v210 = *((_QWORD *)v370 + 15);
            *(_QWORD *)&v389[142] = *((_QWORD *)v370 + 11);
            *(_QWORD *)&v389[152] = v208;
            *(_QWORD *)&v389[162] = v207;
            *(_DWORD *)v372 = v195;
            *(_QWORD *)&v372[12] = v1->top_uuid;
            *(_QWORD *)&v372[22] = v196;
            *(_QWORD *)&v373[2] = v197;
            v375 = v198;
            *(_WORD *)&v372[4] = 1042;
            v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            v378 = 2098;
            v379 = v394;
            v381 = v199;
            v383 = v200;
            *(_WORD *)v373 = 2114;
            v384 = 2114;
            *(_DWORD *)v387 = v354 / 0x3E8;
            *(_DWORD *)((char *)v388 + 2) = v359 / 0x3E8;
            v388[2] = v359 % 0x3E8;
            *(_DWORD *)&v389[2] = v363 / 0x3E8;
            *(_DWORD *)&v389[8] = v363 % 0x3E8;
            *(_QWORD *)&v389[14] = v367;
            *(_DWORD *)&v389[24] = v366 / 0x3E8;
            *(_DWORD *)&v389[30] = v366 % 0x3E8;
            *(_DWORD *)&v389[36] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[42] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            v374 = 2082;
            v380 = 2082;
            v382 = 2082;
            *(_WORD *)&v389[12] = 2082;
            *(_WORD *)&v389[46] = 2082;
            *(_QWORD *)&v389[48] = v69;
            *(_DWORD *)&v389[58] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[64] = handshake_ms_for_protocol % 0x3E8;
            *(_QWORD *)&v389[70] = v203;
            *(_QWORD *)&v389[80] = v204;
            *(_QWORD *)&v389[90] = v201;
            *(_QWORD *)&v389[100] = v202;
            *(_DWORD *)&v389[110] = v210 / 0x3E8;
            *(_DWORD *)&v389[116] = v210 % 0x3E8;
            *(_QWORD *)&v389[122] = v206;
            *(_QWORD *)&v389[132] = v205;
            *(_WORD *)&v389[68] = 2048;
            *(_WORD *)&v389[78] = 2048;
            *(_WORD *)&v389[88] = 2048;
            *(_WORD *)&v389[98] = 2048;
            *(_WORD *)&v389[120] = 2048;
            *(_WORD *)&v389[130] = 2048;
            *(_WORD *)&v389[140] = 2048;
            *(_WORD *)&v389[150] = 2048;
            *(_WORD *)&v389[160] = 2048;
            *(_WORD *)&v389[170] = 2048;
            *(_QWORD *)&v389[172] = v209;
            LOWORD(v388[0]) = 1024;
            HIWORD(v388[1]) = 1024;
            *(_WORD *)v389 = 1024;
            *(_WORD *)&v389[6] = 1024;
            *(_WORD *)&v389[22] = 1024;
            *(_WORD *)&v389[28] = 1024;
            *(_WORD *)&v389[34] = 1024;
            *(_WORD *)&v389[40] = 1024;
            *(_WORD *)&v389[56] = 1024;
            *(_WORD *)&v389[62] = 1024;
            *(_WORD *)&v389[108] = 1024;
            *(_WORD *)&v389[114] = 1024;
            v386 = 1024;
            *(_WORD *)&v387[4] = 1024;
            *(_DWORD *)&v387[6] = v354 % 0x3E8;
            *(_DWORD *)buf = 67118338;
            v385 = v357;
            v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s too"
                   "k %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v212 = v62;
            v213 = 304;
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              goto LABEL_270;
            v356 = v55;
            v348 = v54;
            v70 = v1->top_id;
            v71 = nw_endpoint_get_logging_description(v1->endpoint);
            v72 = v1->parameters;
            v73 = nw_endpoint_handler_get_id_string(v53);
            v74 = nw_endpoint_get_description(v348);
            v75 = nw_endpoint_get_logging_description(v356);
            if ((privacy_stance - 1) > 4)
              v76 = "Unknown";
            else
              v76 = off_1E149B4A0[privacy_stance - 1];
            v317 = *((_QWORD *)v370 + 1);
            v318 = *((_QWORD *)v370 + 5);
            v319 = *((_QWORD *)v370 + 6);
            v320 = *((_QWORD *)v370 + 9);
            v322 = *((_QWORD *)v370 + 10);
            v321 = *((_QWORD *)v370 + 11);
            v323 = *((_QWORD *)v370 + 12);
            v324 = *((_QWORD *)v370 + 13);
            v326 = *((_QWORD *)v370 + 14);
            v325 = *((_QWORD *)v370 + 15);
            *(_QWORD *)&v389[142] = *((_QWORD *)v370 + 8);
            *(_QWORD *)&v389[152] = v321;
            *(_QWORD *)&v389[162] = v323;
            *(_QWORD *)&v389[182] = v326;
            *(_DWORD *)v372 = v70;
            *(_QWORD *)&v372[12] = v1->top_uuid;
            *(_QWORD *)&v372[22] = v71;
            *(_QWORD *)&v373[2] = v72;
            v375 = v73;
            *(_WORD *)&v372[4] = 1042;
            v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            v378 = 2098;
            v379 = v394;
            v381 = v74;
            v383 = v75;
            *(_WORD *)v373 = 2114;
            v384 = 2114;
            *(_QWORD *)v387 = v76;
            v388[0] = v354 / 0x3E8;
            *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
            *(_DWORD *)v389 = v359 / 0x3E8;
            *(_DWORD *)&v389[6] = v359 % 0x3E8;
            *(_DWORD *)&v389[12] = v363 / 0x3E8;
            *(_DWORD *)&v389[18] = v363 % 0x3E8;
            *(_QWORD *)&v389[24] = v367;
            *(_DWORD *)&v389[34] = v366 / 0x3E8;
            *(_DWORD *)&v389[40] = v366 % 0x3E8;
            *(_DWORD *)&v389[46] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[52] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            v374 = 2082;
            v380 = 2082;
            v382 = 2082;
            v386 = 2082;
            *(_WORD *)&v389[22] = 2082;
            *(_WORD *)&v389[56] = 2082;
            *(_QWORD *)&v389[58] = v69;
            *(_DWORD *)&v389[68] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[74] = handshake_ms_for_protocol % 0x3E8;
            *(_QWORD *)&v389[80] = v319;
            *(_QWORD *)&v389[90] = v320;
            *(_QWORD *)&v389[100] = v317;
            *(_QWORD *)&v389[110] = v318;
            *(_DWORD *)&v389[120] = v325 / 0x3E8;
            *(_DWORD *)&v389[126] = v325 % 0x3E8;
            *(_QWORD *)&v389[132] = v322;
            *(_QWORD *)&v389[172] = v324;
            *(_WORD *)&v389[78] = 2048;
            *(_WORD *)&v389[88] = 2048;
            *(_WORD *)&v389[98] = 2048;
            *(_WORD *)&v389[108] = 2048;
            *(_WORD *)&v389[130] = 2048;
            *(_WORD *)&v389[140] = 2048;
            *(_WORD *)&v389[150] = 2048;
            *(_WORD *)&v389[160] = 2048;
            *(_WORD *)&v389[170] = 2048;
            *(_WORD *)&v389[180] = 2048;
            LOWORD(v388[1]) = 1024;
            HIWORD(v388[2]) = 1024;
            *(_WORD *)&v389[4] = 1024;
            *(_WORD *)&v389[10] = 1024;
            *(_WORD *)&v389[16] = 1024;
            *(_WORD *)&v389[32] = 1024;
            *(_WORD *)&v389[38] = 1024;
            *(_WORD *)&v389[44] = 1024;
            *(_WORD *)&v389[50] = 1024;
            *(_WORD *)&v389[66] = 1024;
            *(_WORD *)&v389[72] = 1024;
            *(_WORD *)&v389[118] = 1024;
            *(_WORD *)&v389[124] = 1024;
            *(_WORD *)&v387[8] = 1024;
            *(_DWORD *)buf = 67118594;
            v385 = v357;
            v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s too"
                   "k %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v212 = v62;
            v213 = 314;
          }
        }
        else if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_270;
          v356 = v55;
          v348 = v54;
          v289 = v1->top_id;
          v290 = nw_endpoint_get_logging_description(v1->endpoint);
          v291 = v1->parameters;
          v292 = nw_endpoint_handler_get_id_string(v53);
          v293 = nw_endpoint_get_description(v348);
          v294 = nw_endpoint_get_logging_description(v356);
          *(_DWORD *)buf = 67115266;
          *(_DWORD *)v372 = v289;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(_QWORD *)&v372[22] = v290;
          *(_WORD *)v373 = 2114;
          *(_QWORD *)&v373[2] = v291;
          v374 = 2082;
          v375 = v292;
          v376 = 1042;
          v377 = 16;
          v378 = 2098;
          v379 = v394;
          v380 = 2082;
          v381 = v293;
          v382 = 2082;
          v383 = v294;
          v384 = 2114;
          v385 = v357;
          v386 = 1024;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          LOWORD(v388[0]) = 1024;
          *(_DWORD *)((char *)v388 + 2) = v359 / 0x3E8;
          HIWORD(v388[1]) = 1024;
          v388[2] = v359 % 0x3E8;
          *(_WORD *)v389 = 1024;
          *(_DWORD *)&v389[2] = v363 / 0x3E8;
          *(_WORD *)&v389[6] = 1024;
          *(_DWORD *)&v389[8] = v363 % 0x3E8;
          *(_WORD *)&v389[12] = 2082;
          *(_QWORD *)&v389[14] = v367;
          *(_WORD *)&v389[22] = 1024;
          *(_DWORD *)&v389[24] = v366 / 0x3E8;
          *(_WORD *)&v389[28] = 1024;
          *(_DWORD *)&v389[30] = v366 % 0x3E8;
          *(_WORD *)&v389[34] = 1024;
          *(_DWORD *)&v389[36] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[40] = 1024;
          *(_DWORD *)&v389[42] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[46] = 2082;
          *(_QWORD *)&v389[48] = v69;
          *(_WORD *)&v389[56] = 1024;
          *(_DWORD *)&v389[58] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[62] = 1024;
          *(_DWORD *)&v389[64] = handshake_ms_for_protocol % 0x3E8;
          v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v212 = v62;
          v213 = 192;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_270;
          v356 = v55;
          v348 = v54;
          v172 = v1->top_id;
          v173 = nw_endpoint_get_logging_description(v1->endpoint);
          v174 = v1->parameters;
          v175 = nw_endpoint_handler_get_id_string(v53);
          v176 = nw_endpoint_get_description(v348);
          v177 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4)
            v178 = "Unknown";
          else
            v178 = off_1E149B4A0[privacy_stance - 1];
          *(_DWORD *)buf = 67115522;
          *(_DWORD *)v372 = v172;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(_QWORD *)&v372[22] = v173;
          *(_WORD *)v373 = 2114;
          *(_QWORD *)&v373[2] = v174;
          v374 = 2082;
          v375 = v175;
          v376 = 1042;
          v377 = 16;
          v378 = 2098;
          v379 = v394;
          v380 = 2082;
          v381 = v176;
          v382 = 2082;
          v383 = v177;
          v384 = 2114;
          v385 = v357;
          v386 = 2082;
          *(_QWORD *)v387 = v178;
          *(_WORD *)&v387[8] = 1024;
          v388[0] = v354 / 0x3E8;
          LOWORD(v388[1]) = 1024;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          HIWORD(v388[2]) = 1024;
          *(_DWORD *)v389 = v359 / 0x3E8;
          *(_WORD *)&v389[4] = 1024;
          *(_DWORD *)&v389[6] = v359 % 0x3E8;
          *(_WORD *)&v389[10] = 1024;
          *(_DWORD *)&v389[12] = v363 / 0x3E8;
          *(_WORD *)&v389[16] = 1024;
          *(_DWORD *)&v389[18] = v363 % 0x3E8;
          *(_WORD *)&v389[22] = 2082;
          *(_QWORD *)&v389[24] = v367;
          *(_WORD *)&v389[32] = 1024;
          *(_DWORD *)&v389[34] = v366 / 0x3E8;
          *(_WORD *)&v389[38] = 1024;
          *(_DWORD *)&v389[40] = v366 % 0x3E8;
          *(_WORD *)&v389[44] = 1024;
          *(_DWORD *)&v389[46] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[50] = 1024;
          *(_DWORD *)&v389[52] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[56] = 2082;
          *(_QWORD *)&v389[58] = v69;
          *(_WORD *)&v389[66] = 1024;
          *(_DWORD *)&v389[68] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[72] = 1024;
          *(_DWORD *)&v389[74] = handshake_ms_for_protocol % 0x3E8;
          v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v212 = v62;
          v213 = 202;
        }
LABEL_268:
        _os_log_impl(&dword_182FBE000, v212, OS_LOG_TYPE_DEFAULT, v211, buf, v213);
        v54 = v348;
        goto LABEL_269;
      }
      if (v370)
      {
        if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_270;
          v356 = v55;
          v179 = v1->top_id;
          v180 = nw_endpoint_get_logging_description(v1->endpoint);
          v181 = v1->parameters;
          v182 = nw_endpoint_handler_get_id_string(v53);
          v183 = nw_endpoint_get_description(v54);
          v184 = nw_endpoint_get_logging_description(v356);
          v185 = *((_QWORD *)v370 + 1);
          v186 = *((_QWORD *)v370 + 5);
          v187 = *((_QWORD *)v370 + 6);
          v189 = *((_QWORD *)v370 + 8);
          v188 = *((_QWORD *)v370 + 9);
          v191 = *((_QWORD *)v370 + 10);
          v190 = *((_QWORD *)v370 + 11);
          v192 = *((_QWORD *)v370 + 12);
          v193 = *((_QWORD *)v370 + 13);
          v194 = *((_QWORD *)v370 + 15);
          *(_QWORD *)&v389[150] = *((_QWORD *)v370 + 14);
          *(_DWORD *)v372 = v179;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          *(_QWORD *)&v372[22] = v180;
          *(_QWORD *)&v373[2] = v181;
          v375 = v182;
          *(_WORD *)&v372[4] = 1042;
          v376 = 1042;
          *(_DWORD *)&v372[6] = 16;
          v377 = 16;
          *(_WORD *)&v372[10] = 2098;
          v378 = 2098;
          v379 = v394;
          v381 = v183;
          v383 = v184;
          *(_WORD *)v373 = 2114;
          v384 = 2114;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_DWORD *)((char *)v388 + 2) = v359 / 0x3E8;
          v388[2] = v359 % 0x3E8;
          *(_DWORD *)&v389[2] = v363 / 0x3E8;
          *(_DWORD *)&v389[8] = v363 % 0x3E8;
          *(_WORD *)&v372[20] = 2082;
          v374 = 2082;
          v380 = 2082;
          v382 = 2082;
          *(_WORD *)&v389[12] = 2082;
          *(_QWORD *)&v389[14] = v367;
          *(_DWORD *)&v389[24] = v366 / 0x3E8;
          *(_DWORD *)&v389[30] = v366 % 0x3E8;
          *(_DWORD *)&v389[36] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v389[42] = transport_connect_milliseconds % 0x3E8;
          *(_QWORD *)&v389[48] = v187;
          *(_QWORD *)&v389[58] = v188;
          *(_QWORD *)&v389[68] = v185;
          *(_QWORD *)&v389[78] = v186;
          *(_DWORD *)&v389[88] = v194 / 0x3E8;
          *(_DWORD *)&v389[94] = v194 % 0x3E8;
          *(_QWORD *)&v389[100] = v191;
          *(_QWORD *)&v389[110] = v189;
          *(_QWORD *)&v389[120] = v190;
          *(_QWORD *)&v389[130] = v192;
          *(_QWORD *)&v389[140] = v193;
          *(_WORD *)&v389[46] = 2048;
          *(_WORD *)&v389[56] = 2048;
          *(_WORD *)&v389[66] = 2048;
          *(_WORD *)&v389[76] = 2048;
          *(_WORD *)&v389[98] = 2048;
          *(_WORD *)&v389[108] = 2048;
          *(_WORD *)&v389[118] = 2048;
          *(_WORD *)&v389[128] = 2048;
          *(_WORD *)&v389[138] = 2048;
          *(_WORD *)&v389[148] = 2048;
          LOWORD(v388[0]) = 1024;
          HIWORD(v388[1]) = 1024;
          *(_WORD *)v389 = 1024;
          *(_WORD *)&v389[6] = 1024;
          *(_WORD *)&v389[22] = 1024;
          *(_WORD *)&v389[28] = 1024;
          *(_WORD *)&v389[34] = 1024;
          *(_WORD *)&v389[40] = 1024;
          *(_WORD *)&v389[86] = 1024;
          *(_WORD *)&v389[92] = 1024;
          v386 = 1024;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          *(_DWORD *)buf = 67117570;
          v385 = v357;
          v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us\n"
                 "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-"
                 "order bytes: %llu\n"
                 "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
          v130 = v62;
          v131 = 282;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_270;
          v356 = v55;
          v92 = v1->top_id;
          v93 = nw_endpoint_get_logging_description(v1->endpoint);
          v94 = v1->parameters;
          v95 = nw_endpoint_handler_get_id_string(v53);
          v96 = nw_endpoint_get_description(v54);
          v97 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4)
            v98 = "Unknown";
          else
            v98 = off_1E149B4A0[privacy_stance - 1];
          v307 = *((_QWORD *)v370 + 1);
          v308 = *((_QWORD *)v370 + 5);
          v309 = *((_QWORD *)v370 + 6);
          v311 = *((_QWORD *)v370 + 8);
          v310 = *((_QWORD *)v370 + 9);
          v313 = *((_QWORD *)v370 + 10);
          v312 = *((_QWORD *)v370 + 11);
          v314 = *((_QWORD *)v370 + 12);
          v316 = *((_QWORD *)v370 + 14);
          v315 = *((_QWORD *)v370 + 15);
          *(_QWORD *)&v389[150] = *((_QWORD *)v370 + 13);
          *(_QWORD *)&v389[160] = v316;
          *(_DWORD *)v372 = v92;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          *(_QWORD *)&v372[22] = v93;
          *(_QWORD *)&v373[2] = v94;
          v375 = v95;
          *(_WORD *)&v372[4] = 1042;
          v376 = 1042;
          *(_DWORD *)&v372[6] = 16;
          v377 = 16;
          *(_WORD *)&v372[10] = 2098;
          v378 = 2098;
          v379 = v394;
          v381 = v96;
          v383 = v97;
          *(_WORD *)v373 = 2114;
          v384 = 2114;
          *(_QWORD *)v387 = v98;
          v388[0] = v354 / 0x3E8;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          *(_DWORD *)v389 = v359 / 0x3E8;
          *(_DWORD *)&v389[6] = v359 % 0x3E8;
          *(_DWORD *)&v389[12] = v363 / 0x3E8;
          *(_DWORD *)&v389[18] = v363 % 0x3E8;
          *(_WORD *)&v372[20] = 2082;
          v374 = 2082;
          v380 = 2082;
          v382 = 2082;
          v386 = 2082;
          *(_WORD *)&v389[22] = 2082;
          *(_QWORD *)&v389[24] = v367;
          *(_DWORD *)&v389[34] = v366 / 0x3E8;
          *(_DWORD *)&v389[40] = v366 % 0x3E8;
          *(_DWORD *)&v389[46] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v389[52] = transport_connect_milliseconds % 0x3E8;
          *(_QWORD *)&v389[58] = v309;
          *(_QWORD *)&v389[68] = v310;
          *(_QWORD *)&v389[78] = v307;
          *(_QWORD *)&v389[88] = v308;
          *(_DWORD *)&v389[98] = v315 / 0x3E8;
          *(_DWORD *)&v389[104] = v315 % 0x3E8;
          *(_QWORD *)&v389[110] = v313;
          *(_QWORD *)&v389[120] = v311;
          *(_QWORD *)&v389[130] = v312;
          *(_QWORD *)&v389[140] = v314;
          *(_WORD *)&v389[56] = 2048;
          *(_WORD *)&v389[66] = 2048;
          *(_WORD *)&v389[76] = 2048;
          *(_WORD *)&v389[86] = 2048;
          *(_WORD *)&v389[108] = 2048;
          *(_WORD *)&v389[118] = 2048;
          *(_WORD *)&v389[128] = 2048;
          *(_WORD *)&v389[138] = 2048;
          *(_WORD *)&v389[148] = 2048;
          *(_WORD *)&v389[158] = 2048;
          LOWORD(v388[1]) = 1024;
          HIWORD(v388[2]) = 1024;
          *(_WORD *)&v389[4] = 1024;
          *(_WORD *)&v389[10] = 1024;
          *(_WORD *)&v389[16] = 1024;
          *(_WORD *)&v389[32] = 1024;
          *(_WORD *)&v389[38] = 1024;
          *(_WORD *)&v389[44] = 1024;
          *(_WORD *)&v389[50] = 1024;
          *(_WORD *)&v389[96] = 1024;
          *(_WORD *)&v389[102] = 1024;
          *(_WORD *)&v387[8] = 1024;
          *(_DWORD *)buf = 67117826;
          v385 = v357;
          v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us\n"
                 "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-"
                 "order bytes: %llu\n"
                 "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
          v130 = v62;
          v131 = 292;
        }
      }
      else if ((*((_BYTE *)v1 + 109) & 4) != 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          goto LABEL_270;
        v356 = v55;
        v267 = v1->top_id;
        v268 = nw_endpoint_get_logging_description(v1->endpoint);
        v269 = v1->parameters;
        v270 = nw_endpoint_handler_get_id_string(v53);
        v271 = nw_endpoint_get_description(v54);
        v272 = nw_endpoint_get_logging_description(v356);
        *(_DWORD *)buf = 67114498;
        *(_DWORD *)v372 = v267;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(_QWORD *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(_QWORD *)&v372[22] = v268;
        *(_WORD *)v373 = 2114;
        *(_QWORD *)&v373[2] = v269;
        v374 = 2082;
        v375 = v270;
        v376 = 1042;
        v377 = 16;
        v378 = 2098;
        v379 = v394;
        v380 = 2082;
        v381 = v271;
        v382 = 2082;
        v383 = v272;
        v384 = 2114;
        v385 = v357;
        v386 = 1024;
        *(_DWORD *)v387 = v354 / 0x3E8;
        *(_WORD *)&v387[4] = 1024;
        *(_DWORD *)&v387[6] = v354 % 0x3E8;
        LOWORD(v388[0]) = 1024;
        *(_DWORD *)((char *)v388 + 2) = v359 / 0x3E8;
        HIWORD(v388[1]) = 1024;
        v388[2] = v359 % 0x3E8;
        *(_WORD *)v389 = 1024;
        *(_DWORD *)&v389[2] = v363 / 0x3E8;
        *(_WORD *)&v389[6] = 1024;
        *(_DWORD *)&v389[8] = v363 % 0x3E8;
        *(_WORD *)&v389[12] = 2082;
        *(_QWORD *)&v389[14] = v367;
        *(_WORD *)&v389[22] = 1024;
        *(_DWORD *)&v389[24] = v366 / 0x3E8;
        *(_WORD *)&v389[28] = 1024;
        *(_DWORD *)&v389[30] = v366 % 0x3E8;
        *(_WORD *)&v389[34] = 1024;
        *(_DWORD *)&v389[36] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[40] = 1024;
        *(_DWORD *)&v389[42] = transport_connect_milliseconds % 0x3E8;
        v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        v130 = v62;
        v131 = 170;
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          goto LABEL_270;
        v356 = v55;
        v165 = v1->top_id;
        v166 = nw_endpoint_get_logging_description(v1->endpoint);
        v167 = v1->parameters;
        v168 = nw_endpoint_handler_get_id_string(v53);
        v169 = nw_endpoint_get_description(v54);
        v170 = nw_endpoint_get_logging_description(v356);
        if ((privacy_stance - 1) > 4)
          v171 = "Unknown";
        else
          v171 = off_1E149B4A0[privacy_stance - 1];
        *(_DWORD *)buf = 67114754;
        *(_DWORD *)v372 = v165;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(_QWORD *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(_QWORD *)&v372[22] = v166;
        *(_QWORD *)&v373[2] = v167;
        *(_WORD *)v373 = 2114;
        v374 = 2082;
        v375 = v168;
        v376 = 1042;
        v377 = 16;
        v378 = 2098;
        v379 = v394;
        v380 = 2082;
        v381 = v169;
        v382 = 2082;
        v383 = v170;
        v384 = 2114;
        v385 = v357;
        v386 = 2082;
        *(_QWORD *)v387 = v171;
        *(_WORD *)&v387[8] = 1024;
        v388[0] = v354 / 0x3E8;
        LOWORD(v388[1]) = 1024;
        *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
        HIWORD(v388[2]) = 1024;
        *(_DWORD *)v389 = v359 / 0x3E8;
        *(_WORD *)&v389[4] = 1024;
        *(_DWORD *)&v389[6] = v359 % 0x3E8;
        *(_WORD *)&v389[10] = 1024;
        *(_DWORD *)&v389[12] = v363 / 0x3E8;
        *(_WORD *)&v389[16] = 1024;
        *(_DWORD *)&v389[18] = v363 % 0x3E8;
        *(_WORD *)&v389[22] = 2082;
        *(_QWORD *)&v389[24] = v367;
        *(_WORD *)&v389[32] = 1024;
        *(_DWORD *)&v389[34] = v366 / 0x3E8;
        *(_WORD *)&v389[38] = 1024;
        *(_DWORD *)&v389[40] = v366 % 0x3E8;
        *(_WORD *)&v389[44] = 1024;
        *(_DWORD *)&v389[46] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[50] = 1024;
        *(_DWORD *)&v389[52] = transport_connect_milliseconds % 0x3E8;
        v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tPrivacy Stance: %{public}s\n"
               "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        v130 = v62;
        v131 = 180;
      }
    }
    else
    {
      if ((v3 & 1) != 0)
      {
        v356 = v55;
        v84 = *((_QWORD *)&off_1E14AB0D0 + nw_connection_get_tls_version(v1));
        if (v370)
        {
          if ((*((_BYTE *)v1 + 109) & 4) != 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              goto LABEL_269;
            v348 = v54;
            v273 = v1->top_id;
            v274 = nw_endpoint_get_logging_description(v1->endpoint);
            v275 = v1->parameters;
            v276 = nw_endpoint_handler_get_id_string(v53);
            v277 = nw_endpoint_get_description(v348);
            v278 = nw_endpoint_get_logging_description(v356);
            v279 = *((_QWORD *)v370 + 1);
            v280 = *((_QWORD *)v370 + 5);
            v281 = *((_QWORD *)v370 + 6);
            v283 = *((_QWORD *)v370 + 8);
            v282 = *((_QWORD *)v370 + 9);
            v285 = *((_QWORD *)v370 + 10);
            v284 = *((_QWORD *)v370 + 11);
            v286 = *((_QWORD *)v370 + 12);
            v288 = *((_QWORD *)v370 + 14);
            v287 = *((_QWORD *)v370 + 15);
            *(_QWORD *)&v389[138] = *((_QWORD *)v370 + 13);
            *(_DWORD *)v372 = v273;
            *(_QWORD *)&v372[12] = v1->top_uuid;
            *(_QWORD *)&v372[22] = v274;
            *(_QWORD *)&v373[2] = v275;
            v375 = v276;
            *(_WORD *)&v372[4] = 1042;
            v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            v378 = 2098;
            v379 = v394;
            v381 = v277;
            v383 = v278;
            *(_WORD *)v373 = 2114;
            v384 = 2114;
            *(_DWORD *)v387 = v354 / 0x3E8;
            *(_QWORD *)((char *)v388 + 2) = v367;
            *(_DWORD *)v389 = v366 / 0x3E8;
            *(_DWORD *)&v389[6] = v366 % 0x3E8;
            *(_DWORD *)&v389[12] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[18] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            v374 = 2082;
            v380 = 2082;
            v382 = 2082;
            LOWORD(v388[0]) = 2082;
            *(_WORD *)&v389[22] = 2082;
            *(_QWORD *)&v389[24] = v84;
            *(_DWORD *)&v389[34] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[40] = handshake_ms_for_protocol % 0x3E8;
            *(_QWORD *)&v389[46] = v281;
            *(_QWORD *)&v389[56] = v282;
            *(_QWORD *)&v389[66] = v279;
            *(_QWORD *)&v389[76] = v280;
            *(_DWORD *)&v389[86] = v287 / 0x3E8;
            *(_DWORD *)&v389[92] = v287 % 0x3E8;
            *(_QWORD *)&v389[98] = v285;
            *(_QWORD *)&v389[108] = v283;
            *(_QWORD *)&v389[118] = v284;
            *(_QWORD *)&v389[128] = v286;
            *(_WORD *)&v389[44] = 2048;
            *(_WORD *)&v389[54] = 2048;
            *(_WORD *)&v389[64] = 2048;
            *(_WORD *)&v389[74] = 2048;
            *(_WORD *)&v389[96] = 2048;
            *(_WORD *)&v389[106] = 2048;
            *(_WORD *)&v389[116] = 2048;
            *(_WORD *)&v389[126] = 2048;
            *(_WORD *)&v389[136] = 2048;
            *(_WORD *)&v389[146] = 2048;
            *(_QWORD *)&v389[148] = v288;
            HIWORD(v388[2]) = 1024;
            *(_WORD *)&v389[4] = 1024;
            *(_WORD *)&v389[10] = 1024;
            *(_WORD *)&v389[16] = 1024;
            *(_WORD *)&v389[32] = 1024;
            *(_WORD *)&v389[38] = 1024;
            *(_WORD *)&v389[84] = 1024;
            *(_WORD *)&v389[90] = 1024;
            v386 = 1024;
            *(_WORD *)&v387[4] = 1024;
            *(_DWORD *)&v387[6] = v354 % 0x3E8;
            *(_DWORD *)buf = 67117314;
            v385 = v357;
            v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v212 = v62;
            v213 = 280;
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              goto LABEL_269;
            v348 = v54;
            v85 = v1->top_id;
            v86 = nw_endpoint_get_logging_description(v1->endpoint);
            v87 = v1->parameters;
            v88 = nw_endpoint_handler_get_id_string(v53);
            v89 = nw_endpoint_get_description(v348);
            v90 = nw_endpoint_get_logging_description(v356);
            if ((privacy_stance - 1) > 4)
              v91 = "Unknown";
            else
              v91 = off_1E149B4A0[privacy_stance - 1];
            v338 = *((_QWORD *)v370 + 1);
            v339 = *((_QWORD *)v370 + 5);
            v340 = *((_QWORD *)v370 + 6);
            v342 = *((_QWORD *)v370 + 8);
            v341 = *((_QWORD *)v370 + 9);
            v343 = *((_QWORD *)v370 + 10);
            v344 = *((_QWORD *)v370 + 11);
            v345 = *((_QWORD *)v370 + 13);
            v347 = *((_QWORD *)v370 + 14);
            v346 = *((_QWORD *)v370 + 15);
            *(_QWORD *)&v389[138] = *((_QWORD *)v370 + 12);
            *(_QWORD *)&v389[158] = v347;
            *(_DWORD *)v372 = v85;
            *(_QWORD *)&v372[12] = v1->top_uuid;
            *(_QWORD *)&v372[22] = v86;
            *(_QWORD *)&v373[2] = v87;
            v375 = v88;
            *(_WORD *)&v372[4] = 1042;
            v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            v378 = 2098;
            v379 = v394;
            v381 = v89;
            v383 = v90;
            *(_WORD *)v373 = 2114;
            v384 = 2114;
            *(_QWORD *)v387 = v91;
            v388[0] = v354 / 0x3E8;
            *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
            *(_QWORD *)v389 = v367;
            *(_DWORD *)&v389[10] = v366 / 0x3E8;
            *(_DWORD *)&v389[16] = v366 % 0x3E8;
            *(_DWORD *)&v389[22] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[28] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            v374 = 2082;
            v380 = 2082;
            v382 = 2082;
            v386 = 2082;
            HIWORD(v388[2]) = 2082;
            *(_WORD *)&v389[32] = 2082;
            *(_QWORD *)&v389[34] = v84;
            *(_DWORD *)&v389[44] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[50] = handshake_ms_for_protocol % 0x3E8;
            *(_QWORD *)&v389[56] = v340;
            *(_QWORD *)&v389[66] = v341;
            *(_QWORD *)&v389[76] = v338;
            *(_QWORD *)&v389[86] = v339;
            *(_DWORD *)&v389[96] = v346 / 0x3E8;
            *(_DWORD *)&v389[102] = v346 % 0x3E8;
            *(_QWORD *)&v389[108] = v343;
            *(_QWORD *)&v389[118] = v342;
            *(_QWORD *)&v389[128] = v344;
            *(_QWORD *)&v389[148] = v345;
            *(_WORD *)&v389[54] = 2048;
            *(_WORD *)&v389[64] = 2048;
            *(_WORD *)&v389[74] = 2048;
            *(_WORD *)&v389[84] = 2048;
            *(_WORD *)&v389[106] = 2048;
            *(_WORD *)&v389[116] = 2048;
            *(_WORD *)&v389[126] = 2048;
            *(_WORD *)&v389[136] = 2048;
            *(_WORD *)&v389[146] = 2048;
            *(_WORD *)&v389[156] = 2048;
            LOWORD(v388[1]) = 1024;
            *(_WORD *)&v389[8] = 1024;
            *(_WORD *)&v389[14] = 1024;
            *(_WORD *)&v389[20] = 1024;
            *(_WORD *)&v389[26] = 1024;
            *(_WORD *)&v389[42] = 1024;
            *(_WORD *)&v389[48] = 1024;
            *(_WORD *)&v389[94] = 1024;
            *(_WORD *)&v389[100] = 1024;
            *(_WORD *)&v387[8] = 1024;
            *(_DWORD *)buf = 67117570;
            v385 = v357;
            v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v212 = v62;
            v213 = 290;
          }
        }
        else if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_269;
          v348 = v54;
          v301 = v1->top_id;
          v302 = nw_endpoint_get_logging_description(v1->endpoint);
          v303 = v1->parameters;
          v304 = nw_endpoint_handler_get_id_string(v53);
          v305 = nw_endpoint_get_description(v348);
          v306 = nw_endpoint_get_logging_description(v356);
          *(_DWORD *)buf = 67114242;
          *(_DWORD *)v372 = v301;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(_QWORD *)&v372[22] = v302;
          *(_QWORD *)&v373[2] = v303;
          *(_WORD *)v373 = 2114;
          v374 = 2082;
          v375 = v304;
          v376 = 1042;
          v377 = 16;
          v378 = 2098;
          v379 = v394;
          v380 = 2082;
          v381 = v305;
          v382 = 2082;
          v383 = v306;
          v384 = 2114;
          v385 = v357;
          v386 = 1024;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          LOWORD(v388[0]) = 2082;
          *(_QWORD *)((char *)v388 + 2) = v367;
          HIWORD(v388[2]) = 1024;
          *(_DWORD *)v389 = v366 / 0x3E8;
          *(_WORD *)&v389[4] = 1024;
          *(_DWORD *)&v389[6] = v366 % 0x3E8;
          *(_WORD *)&v389[10] = 1024;
          *(_DWORD *)&v389[12] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[16] = 1024;
          *(_DWORD *)&v389[18] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[22] = 2082;
          *(_QWORD *)&v389[24] = v84;
          *(_WORD *)&v389[32] = 1024;
          *(_DWORD *)&v389[34] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[38] = 1024;
          *(_DWORD *)&v389[40] = handshake_ms_for_protocol % 0x3E8;
          v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v212 = v62;
          v213 = 168;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            goto LABEL_269;
          v348 = v54;
          v221 = v1->top_id;
          v222 = nw_endpoint_get_logging_description(v1->endpoint);
          v223 = v1->parameters;
          v224 = nw_endpoint_handler_get_id_string(v53);
          v225 = nw_endpoint_get_description(v54);
          v226 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4)
            v227 = "Unknown";
          else
            v227 = off_1E149B4A0[privacy_stance - 1];
          *(_DWORD *)buf = 67114498;
          *(_DWORD *)v372 = v221;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(_QWORD *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(_QWORD *)&v372[22] = v222;
          *(_QWORD *)&v373[2] = v223;
          *(_WORD *)v373 = 2114;
          v374 = 2082;
          v375 = v224;
          v376 = 1042;
          v377 = 16;
          v378 = 2098;
          v379 = v394;
          v380 = 2082;
          v381 = v225;
          v382 = 2082;
          v383 = v226;
          v384 = 2114;
          v385 = v357;
          v386 = 2082;
          *(_QWORD *)v387 = v227;
          *(_WORD *)&v387[8] = 1024;
          v388[0] = v354 / 0x3E8;
          LOWORD(v388[1]) = 1024;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          HIWORD(v388[2]) = 2082;
          *(_QWORD *)v389 = v367;
          *(_WORD *)&v389[8] = 1024;
          *(_DWORD *)&v389[10] = v366 / 0x3E8;
          *(_WORD *)&v389[14] = 1024;
          *(_DWORD *)&v389[16] = v366 % 0x3E8;
          *(_WORD *)&v389[20] = 1024;
          *(_DWORD *)&v389[22] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[26] = 1024;
          *(_DWORD *)&v389[28] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[32] = 2082;
          *(_QWORD *)&v389[34] = v84;
          *(_WORD *)&v389[42] = 1024;
          *(_DWORD *)&v389[44] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[48] = 1024;
          *(_DWORD *)&v389[50] = handshake_ms_for_protocol % 0x3E8;
          v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v212 = v62;
          v213 = 178;
        }
        goto LABEL_268;
      }
      if (v370)
      {
        if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            v249 = v1->top_id;
            v250 = nw_endpoint_get_logging_description(v1->endpoint);
            v365 = v1->parameters;
            v360 = nw_endpoint_handler_get_id_string(v53);
            v362 = nw_endpoint_get_description(v54);
            v251 = nw_endpoint_get_logging_description(v55);
            v252 = *((_QWORD *)v370 + 1);
            v253 = *((_QWORD *)v370 + 5);
            v254 = *((_QWORD *)v370 + 6);
            v256 = *((_QWORD *)v370 + 8);
            v255 = *((_QWORD *)v370 + 9);
            v258 = *((_QWORD *)v370 + 10);
            v257 = *((_QWORD *)v370 + 11);
            v260 = *((_QWORD *)v370 + 12);
            v259 = *((_QWORD *)v370 + 13);
            v261 = *((_QWORD *)v370 + 14);
            v262 = v55;
            v263 = v54;
            v264 = *((_QWORD *)v370 + 15);
            *(_DWORD *)buf = 67116546;
            v265 = v264 / 0x3E8;
            *(_DWORD *)v372 = v249;
            *(_WORD *)&v372[4] = 1042;
            v266 = v264 % 0x3E8;
            *(_DWORD *)&v372[6] = 16;
            *(_WORD *)&v372[10] = 2098;
            *(_QWORD *)&v372[12] = v1->top_uuid;
            *(_WORD *)&v372[20] = 2082;
            *(_QWORD *)&v372[22] = v250;
            *(_WORD *)v373 = 2114;
            *(_QWORD *)&v373[2] = v365;
            v374 = 2082;
            v375 = v360;
            v376 = 1042;
            v377 = 16;
            v54 = v263;
            v378 = 2098;
            v379 = v394;
            v55 = v262;
            v380 = 2082;
            v381 = v362;
            v382 = 2082;
            v383 = v251;
            v384 = 2114;
            v385 = v357;
            v386 = 1024;
            *(_DWORD *)v387 = v354 / 0x3E8;
            *(_WORD *)&v387[4] = 1024;
            *(_DWORD *)&v387[6] = v354 % 0x3E8;
            LOWORD(v388[0]) = 2082;
            *(_QWORD *)((char *)v388 + 2) = v367;
            HIWORD(v388[2]) = 1024;
            *(_DWORD *)v389 = v366 / 0x3E8;
            *(_WORD *)&v389[4] = 1024;
            *(_DWORD *)&v389[6] = v366 % 0x3E8;
            *(_WORD *)&v389[10] = 1024;
            *(_DWORD *)&v389[12] = transport_connect_milliseconds / 0x3E8;
            *(_WORD *)&v389[16] = 1024;
            *(_DWORD *)&v389[18] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v389[22] = 2048;
            *(_QWORD *)&v389[24] = v254;
            *(_WORD *)&v389[32] = 2048;
            *(_QWORD *)&v389[34] = v255;
            *(_WORD *)&v389[42] = 2048;
            *(_QWORD *)&v389[44] = v252;
            *(_WORD *)&v389[52] = 2048;
            *(_QWORD *)&v389[54] = v253;
            *(_WORD *)&v389[62] = 1024;
            *(_DWORD *)&v389[64] = v265;
            *(_WORD *)&v389[68] = 1024;
            *(_DWORD *)&v389[70] = v266;
            *(_WORD *)&v389[74] = 2048;
            *(_QWORD *)&v389[76] = v258;
            *(_WORD *)&v389[84] = 2048;
            *(_QWORD *)&v389[86] = v256;
            *(_WORD *)&v389[94] = 2048;
            *(_QWORD *)&v389[96] = v257;
            *(_WORD *)&v389[104] = 2048;
            *(_QWORD *)&v389[106] = v260;
            *(_WORD *)&v389[114] = 2048;
            *(_QWORD *)&v389[116] = v259;
            *(_WORD *)&v389[124] = 2048;
            *(_QWORD *)&v389[126] = v261;
            _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_DEFAULT, "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n\tConnected Path: %{public}@\n\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us\n\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-order bytes: %llu\n\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu", buf, 0x102u);
          }
          goto LABEL_270;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
LABEL_270:

          if (v368 && v370)
          {
            free(v370);
            v370 = 0;
          }

          goto LABEL_274;
        }
        v148 = v1->top_id;
        v348 = v54;
        v356 = v55;
        v149 = nw_endpoint_get_logging_description(v1->endpoint);
        v150 = v1->parameters;
        v151 = nw_endpoint_handler_get_id_string(v53);
        v152 = nw_endpoint_get_description(v54);
        v364 = nw_endpoint_get_logging_description(v55);
        if ((privacy_stance - 1) > 4)
          v153 = "Unknown";
        else
          v153 = off_1E149B4A0[privacy_stance - 1];
        v327 = *((_QWORD *)v370 + 1);
        v329 = *((_QWORD *)v370 + 5);
        v328 = *((_QWORD *)v370 + 6);
        v331 = *((_QWORD *)v370 + 8);
        v330 = *((_QWORD *)v370 + 9);
        v332 = *((_QWORD *)v370 + 10);
        v333 = *((_QWORD *)v370 + 11);
        v335 = *((_QWORD *)v370 + 12);
        v334 = *((_QWORD *)v370 + 13);
        v336 = *((_QWORD *)v370 + 14);
        v337 = *((_QWORD *)v370 + 15);
        *(_DWORD *)buf = 67116802;
        *(_DWORD *)v372 = v148;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(_QWORD *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(_QWORD *)&v372[22] = v149;
        *(_WORD *)v373 = 2114;
        *(_QWORD *)&v373[2] = v150;
        v374 = 2082;
        v375 = v151;
        v376 = 1042;
        v377 = 16;
        v378 = 2098;
        v379 = v394;
        v380 = 2082;
        v381 = v152;
        v382 = 2082;
        v383 = v364;
        v384 = 2114;
        v385 = v357;
        v386 = 2082;
        *(_QWORD *)v387 = v153;
        *(_WORD *)&v387[8] = 1024;
        v388[0] = v354 / 0x3E8;
        LOWORD(v388[1]) = 1024;
        *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
        HIWORD(v388[2]) = 2082;
        *(_QWORD *)v389 = v367;
        *(_WORD *)&v389[8] = 1024;
        *(_DWORD *)&v389[10] = v366 / 0x3E8;
        *(_WORD *)&v389[14] = 1024;
        *(_DWORD *)&v389[16] = v366 % 0x3E8;
        *(_WORD *)&v389[20] = 1024;
        *(_DWORD *)&v389[22] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[26] = 1024;
        *(_DWORD *)&v389[28] = transport_connect_milliseconds % 0x3E8;
        *(_WORD *)&v389[32] = 2048;
        *(_QWORD *)&v389[34] = v328;
        *(_WORD *)&v389[42] = 2048;
        *(_QWORD *)&v389[44] = v330;
        *(_WORD *)&v389[52] = 2048;
        *(_QWORD *)&v389[54] = v327;
        *(_WORD *)&v389[62] = 2048;
        *(_QWORD *)&v389[64] = v329;
        *(_WORD *)&v389[72] = 1024;
        *(_DWORD *)&v389[74] = v337 / 0x3E8;
        *(_WORD *)&v389[78] = 1024;
        *(_DWORD *)&v389[80] = v337 % 0x3E8;
        *(_WORD *)&v389[84] = 2048;
        *(_QWORD *)&v389[86] = v332;
        *(_WORD *)&v389[94] = 2048;
        *(_QWORD *)&v389[96] = v331;
        *(_WORD *)&v389[104] = 2048;
        *(_QWORD *)&v389[106] = v333;
        *(_WORD *)&v389[114] = 2048;
        *(_QWORD *)&v389[116] = v335;
        *(_WORD *)&v389[124] = 2048;
        *(_QWORD *)&v389[126] = v334;
        *(_WORD *)&v389[134] = 2048;
        *(_QWORD *)&v389[136] = v336;
        v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tPrivacy Stance: %{public}s\n"
               "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us\n"
               "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-or"
               "der bytes: %llu\n"
               "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
        v212 = v62;
        v213 = 268;
        goto LABEL_268;
      }
      if ((*((_BYTE *)v1 + 109) & 4) != 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          goto LABEL_270;
        v356 = v55;
        v295 = v1->top_id;
        v296 = nw_endpoint_get_logging_description(v1->endpoint);
        v297 = v1->parameters;
        v298 = nw_endpoint_handler_get_id_string(v53);
        v299 = nw_endpoint_get_description(v54);
        v300 = nw_endpoint_get_logging_description(v356);
        *(_DWORD *)buf = 67113474;
        *(_DWORD *)v372 = v295;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_QWORD *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[10] = 2098;
        *(_QWORD *)&v372[22] = v296;
        *(_WORD *)&v372[20] = 2082;
        *(_QWORD *)&v373[2] = v297;
        *(_WORD *)v373 = 2114;
        v374 = 2082;
        v375 = v298;
        v376 = 1042;
        v377 = 16;
        v378 = 2098;
        v379 = v394;
        v380 = 2082;
        v381 = v299;
        v382 = 2082;
        v383 = v300;
        v384 = 2114;
        v385 = v357;
        v386 = 1024;
        *(_DWORD *)v387 = v354 / 0x3E8;
        *(_WORD *)&v387[4] = 1024;
        *(_DWORD *)&v387[6] = v354 % 0x3E8;
        LOWORD(v388[0]) = 2082;
        *(_QWORD *)((char *)v388 + 2) = v367;
        HIWORD(v388[2]) = 1024;
        *(_DWORD *)v389 = v366 / 0x3E8;
        *(_WORD *)&v389[4] = 1024;
        *(_DWORD *)&v389[6] = v366 % 0x3E8;
        *(_WORD *)&v389[10] = 1024;
        *(_DWORD *)&v389[12] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[16] = 1024;
        *(_DWORD *)&v389[18] = transport_connect_milliseconds % 0x3E8;
        v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us";
        v130 = v62;
        v131 = 146;
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          goto LABEL_270;
        v356 = v55;
        v214 = v1->top_id;
        v215 = nw_endpoint_get_logging_description(v1->endpoint);
        v216 = v1->parameters;
        v217 = nw_endpoint_handler_get_id_string(v53);
        v218 = nw_endpoint_get_description(v54);
        v219 = nw_endpoint_get_logging_description(v356);
        if ((privacy_stance - 1) > 4)
          v220 = "Unknown";
        else
          v220 = off_1E149B4A0[privacy_stance - 1];
        *(_DWORD *)buf = 67113730;
        *(_DWORD *)v372 = v214;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_QWORD *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[10] = 2098;
        *(_QWORD *)&v372[22] = v215;
        *(_WORD *)&v372[20] = 2082;
        *(_QWORD *)&v373[2] = v216;
        *(_WORD *)v373 = 2114;
        v374 = 2082;
        v375 = v217;
        v376 = 1042;
        v377 = 16;
        v378 = 2098;
        v379 = v394;
        v380 = 2082;
        v381 = v218;
        v382 = 2082;
        v383 = v219;
        v384 = 2114;
        v385 = v357;
        v386 = 2082;
        *(_QWORD *)v387 = v220;
        *(_WORD *)&v387[8] = 1024;
        v388[0] = v354 / 0x3E8;
        LOWORD(v388[1]) = 1024;
        *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
        HIWORD(v388[2]) = 2082;
        *(_QWORD *)v389 = v367;
        *(_WORD *)&v389[8] = 1024;
        *(_DWORD *)&v389[10] = v366 / 0x3E8;
        *(_WORD *)&v389[14] = 1024;
        *(_DWORD *)&v389[16] = v366 % 0x3E8;
        *(_WORD *)&v389[20] = 1024;
        *(_DWORD *)&v389[22] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[26] = 1024;
        *(_DWORD *)&v389[28] = transport_connect_milliseconds % 0x3E8;
        v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tPrivacy Stance: %{public}s\n"
               "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us";
        v130 = v62;
        v131 = 156;
      }
    }
LABEL_253:
    _os_log_impl(&dword_182FBE000, v130, OS_LOG_TYPE_DEFAULT, v129, buf, v131);
LABEL_269:
    v55 = v356;
    goto LABEL_270;
  }
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v40 = (id)gconnectionLogObj;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    v41 = v1;
    v42 = v1->top_id;
    v43 = nw_endpoint_get_logging_description(v41->endpoint);
    v44 = v41->parameters;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v372 = v42;
    *(_WORD *)&v372[4] = 2082;
    *(_QWORD *)&v372[6] = v43;
    *(_WORD *)&v372[14] = 2114;
    *(_QWORD *)&v372[16] = v44;
    _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEFAULT, "[C%u %{public}s %{public}@] cancelled", buf, 0x1Cu);
    v1 = v41;
  }

LABEL_274:
}

void sub_183A9BECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

uint64_t nw_connection_get_transport_connect_milliseconds(NWConcrete_nw_connection *a1, __int16 a2, char a3)
{
  NWConcrete_nw_connection *v5;
  uint64_t v6;
  unsigned int event_milliseconds;
  unsigned int v8;
  BOOL v9;
  NSObject *v11;
  unsigned int v12;
  __int16 v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v13 = a2;
  LODWORD(v6) = nw_connection_get_event_milliseconds(v5, 3, 6, &v13, 0);
  if ((_DWORD)v6 == -1)
  {
    LODWORD(v6) = nw_connection_get_event_milliseconds(v5, 3, 13, &v13, 0);
    if ((_DWORD)v6 == -1)
    {
LABEL_9:
      v6 = 0;
      goto LABEL_10;
    }
  }
  event_milliseconds = nw_connection_get_event_milliseconds(v5, 3, 5, &v13, 0);
  if (event_milliseconds == -1)
    v6 = v6;
  else
    v6 = event_milliseconds;
  if ((a3 & 1) == 0)
  {
    v8 = nw_connection_get_event_milliseconds(v5, 3, 3, &v13, 0);
    v9 = v6 >= v8;
    v6 = v6 - v8;
    if (!v9)
    {
      if (gLogDatapath)
      {
        v12 = v8;
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          v15 = "nw_connection_get_transport_connect_milliseconds";
          v16 = 2082;
          v17 = "connect_finish";
          v18 = 2048;
          v19 = v12;
          v20 = 2048;
          v21 = v6;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }

      }
      goto LABEL_9;
    }
  }
LABEL_10:

  return v6;
}

uint64_t nw_connection_get_tls_version(NWConcrete_nw_connection *a1)
{
  NWConcrete_nw_connection *v1;
  NSObject *v2;
  nw_protocol_metadata_t v3;
  NSObject *v4;
  int negotiated_tls_protocol_version;
  uint64_t v6;

  v1 = a1;
  v2 = nw_protocol_boringssl_copy_definition();
  v3 = nw_connection_copy_protocol_metadata(&v1->super, v2);

  if (v3)
  {
    v4 = v3;
    negotiated_tls_protocol_version = sec_protocol_metadata_get_negotiated_tls_protocol_version(v4);
    v6 = 2;
    switch(negotiated_tls_protocol_version)
    {
      case 769:
        break;
      case 770:
        v6 = 3;
        break;
      case 771:
        v6 = 4;
        break;
      case 772:
        v6 = 5;
        break;
      default:
        if (negotiated_tls_protocol_version == 65277)
        {
          v6 = 7;
        }
        else if (negotiated_tls_protocol_version == 65279)
        {
          v6 = 6;
        }
        else
        {
          v6 = 0;
        }
        break;
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_183A9C370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_connection_stats_get_apple_host(NWConcrete_nw_connection *a1)
{
  NWConcrete_nw_connection *v1;
  OS_nw_endpoint *endpoint;
  OS_nw_endpoint *v3;
  int v4;
  const char *hostname;
  uint64_t v6;
  size_t v7;
  unint64_t v8;

  v1 = a1;
  endpoint = v1->endpoint;
  if (!endpoint || (v3 = endpoint, v4 = -[OS_nw_endpoint type](v3, "type"), v3, v4 != 2))
  {
LABEL_21:
    v6 = 0;
    goto LABEL_22;
  }
  hostname = nw_endpoint_get_hostname((nw_endpoint_t)v1->endpoint);
  v6 = (uint64_t)hostname;
  if (hostname)
  {
    v7 = strlen(hostname);
    v8 = v7;
    if (v7 >= 0x12 && !strncmp((const char *)(v7 + v6 - 18), ".pancake.apple.com", 0x12uLL)
      || !strcmp((const char *)v6, "pancake.apple.com"))
    {
      v6 = 5;
      goto LABEL_22;
    }
    if (v8 >= 0x15 && !strncmp((const char *)(v8 + v6 - 21), ".clientflow.apple.com", 0x15uLL)
      || !strcmp((const char *)v6, "clientflow.apple.com"))
    {
      v6 = 6;
      goto LABEL_22;
    }
    if (v8 >= 0xA && !strncmp((const char *)(v8 + v6 - 10), ".apple.com", 0xAuLL)
      || !strcmp((const char *)v6, "apple.com"))
    {
      v6 = 1;
      goto LABEL_22;
    }
    if (nw_connection_stats_hostname_has_suffix((const char *)v6, ".icloud.com")
      || !strcmp((const char *)v6, "icloud.com")
      || nw_connection_stats_hostname_has_suffix((const char *)v6, ".icloud-content.com")
      || !strcmp((const char *)v6, "icloud-content.com"))
    {
      v6 = 2;
      goto LABEL_22;
    }
    if (nw_connection_stats_hostname_has_suffix((const char *)v6, ".mzstatic.com")
      || !strcmp((const char *)v6, "mzstatic.com"))
    {
      v6 = 3;
      goto LABEL_22;
    }
    if (nw_connection_stats_hostname_has_suffix((const char *)v6, ".me.com") || !strcmp((const char *)v6, "me.com"))
    {
      v6 = 4;
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_22:

  return v6;
}

void sub_183A9C588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_connection_stats_get_apple_app_for_string(const char *a1)
{
  if (!strcmp(a1, "com.apple.MobileSMS"))
    return 1;
  if (!strcmp(a1, "com.apple.mobilesafari"))
    return 2;
  if (!strcmp(a1, "com.apple.mobilemail"))
    return 3;
  if (!strcmp(a1, "com.apple.Maps"))
    return 4;
  if (!strcmp(a1, "com.apple.mobileslideshow"))
    return 5;
  if (!strcmp(a1, "com.apple.Music"))
    return 6;
  if (!strcmp(a1, "com.apple.AppStore"))
    return 7;
  if (!strcmp(a1, "com.apple.MobileStore"))
    return 8;
  if (!strcmp(a1, "com.apple.assistantd"))
    return 9;
  return 0;
}

uint64_t ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2;
  v4[3] = &__block_descriptor_40_e9_B16__0r_8l;
  v4[4] = *(_QWORD *)(a1 + 32);
  nw_resolver_config_enumerate_name_servers(a3, v4);
  return 1;
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_43(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  const char *hostname;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;

  v3 = a2;
  v4 = v3;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v5 <= 1)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v11 = v3;
    hostname = nw_endpoint_get_hostname(v3);
    v4 = v11;
    if (hostname)
    {
      v8 = (_BYTE *)(v6 + (v5 << 6) + 2272);
      v9 = 64;
      while (1)
      {
        v10 = *(unsigned __int8 *)hostname;
        *v8 = v10;
        if (!v10)
          break;
        ++v8;
        ++hostname;
        if ((unint64_t)--v9 <= 1)
        {
          *v8 = 0;
          break;
        }
      }
      ++*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    }
  }

}

void sub_183A9C7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2_44(uint64_t a1, void *a2)
{
  id v3;
  NWConcrete_nw_endpoint_handler *v4;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v6;
  char v7;
  NSObject *v8;
  const char *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  id v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v18 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_endpoint_handler_get_proxy_result";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v11, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_endpoint_handler_get_proxy_result";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_endpoint_handler_get_proxy_result";
            v23 = 2082;
            v24 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_endpoint_handler_get_proxy_result";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_endpoint_handler_get_proxy_result";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_28:
    if (v11)
      free(v11);
    goto LABEL_10;
  }
  v4 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v4->mode;

  if ((_DWORD)mode != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (mode > 5)
        v9 = "unknown-mode";
      else
        v9 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v22 = "nw_endpoint_handler_get_proxy_result";
      v23 = 2082;
      v24 = (void *)v9;
      v25 = 2082;
      v26 = "proxy";
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }

LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  v6 = nw_endpoint_handler_copy_proxy(v4);
  v7 = *((_BYTE *)v6 + 99);

LABEL_11:
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1704) = v7;

}

void sub_183A9CB48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_3(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *identifier;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  NSObject *v48;
  int v49;
  int v51;
  const char *v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a1[6];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);
  identifier = (unsigned __int8 *)nw_protocol_definition_get_identifier(v7);
  v11 = (_DWORD *)(v8 + 56 * v9 + 1712);
  if (!identifier)
  {
    *(_BYTE *)(v8 + 56 * v9 + 1718) = 110;
    *(_WORD *)(v8 + 56 * v9 + 1716) = 30575;
    *v11 = 1852534389;
    v43 = 7;
    goto LABEL_35;
  }
  v12 = *identifier;
  *(_BYTE *)v11 = v12;
  if (v12)
  {
    v13 = identifier[1];
    *(_BYTE *)(v8 + 56 * v9 + 1713) = v13;
    if (v13)
    {
      v14 = identifier[2];
      *(_BYTE *)(v8 + 56 * v9 + 1714) = v14;
      if (v14)
      {
        v15 = identifier[3];
        *(_BYTE *)(v8 + 56 * v9 + 1715) = v15;
        if (v15)
        {
          v16 = identifier[4];
          *(_BYTE *)(v8 + 56 * v9 + 1716) = v16;
          if (v16)
          {
            v17 = identifier[5];
            *(_BYTE *)(v8 + 56 * v9 + 1717) = v17;
            if (v17)
            {
              v18 = identifier[6];
              *(_BYTE *)(v8 + 56 * v9 + 1718) = v18;
              if (v18)
              {
                v19 = identifier[7];
                *(_BYTE *)(v8 + 56 * v9 + 1719) = v19;
                if (v19)
                {
                  v20 = identifier[8];
                  *(_BYTE *)(v8 + 56 * v9 + 1720) = v20;
                  if (v20)
                  {
                    v21 = identifier[9];
                    *(_BYTE *)(v8 + 56 * v9 + 1721) = v21;
                    if (v21)
                    {
                      v22 = identifier[10];
                      *(_BYTE *)(v8 + 56 * v9 + 1722) = v22;
                      if (v22)
                      {
                        v23 = identifier[11];
                        *(_BYTE *)(v8 + 56 * v9 + 1723) = v23;
                        if (v23)
                        {
                          v24 = identifier[12];
                          *(_BYTE *)(v8 + 56 * v9 + 1724) = v24;
                          if (v24)
                          {
                            v25 = identifier[13];
                            *(_BYTE *)(v8 + 56 * v9 + 1725) = v25;
                            if (v25)
                            {
                              v26 = identifier[14];
                              *(_BYTE *)(v8 + 56 * v9 + 1726) = v26;
                              if (v26)
                              {
                                v27 = identifier[15];
                                *(_BYTE *)(v8 + 56 * v9 + 1727) = v27;
                                if (v27)
                                {
                                  v28 = identifier[16];
                                  *(_BYTE *)(v8 + 56 * v9 + 1728) = v28;
                                  if (v28)
                                  {
                                    v29 = identifier[17];
                                    *(_BYTE *)(v8 + 56 * v9 + 1729) = v29;
                                    if (v29)
                                    {
                                      v30 = identifier[18];
                                      *(_BYTE *)(v8 + 56 * v9 + 1730) = v30;
                                      if (v30)
                                      {
                                        v31 = identifier[19];
                                        *(_BYTE *)(v8 + 56 * v9 + 1731) = v31;
                                        if (v31)
                                        {
                                          v32 = identifier[20];
                                          *(_BYTE *)(v8 + 56 * v9 + 1732) = v32;
                                          if (v32)
                                          {
                                            v33 = identifier[21];
                                            *(_BYTE *)(v8 + 56 * v9 + 1733) = v33;
                                            if (v33)
                                            {
                                              v34 = identifier[22];
                                              *(_BYTE *)(v8 + 56 * v9 + 1734) = v34;
                                              if (v34)
                                              {
                                                v35 = identifier[23];
                                                *(_BYTE *)(v8 + 56 * v9 + 1735) = v35;
                                                if (v35)
                                                {
                                                  v36 = identifier[24];
                                                  *(_BYTE *)(v8 + 56 * v9 + 1736) = v36;
                                                  if (v36)
                                                  {
                                                    v37 = identifier[25];
                                                    *(_BYTE *)(v8 + 56 * v9 + 1737) = v37;
                                                    if (v37)
                                                    {
                                                      v38 = identifier[26];
                                                      *(_BYTE *)(v8 + 56 * v9 + 1738) = v38;
                                                      if (v38)
                                                      {
                                                        v39 = identifier[27];
                                                        *(_BYTE *)(v8 + 56 * v9 + 1739) = v39;
                                                        if (v39)
                                                        {
                                                          v40 = identifier[28];
                                                          *(_BYTE *)(v8 + 56 * v9 + 1740) = v40;
                                                          if (v40)
                                                          {
                                                            v41 = identifier[29];
                                                            *(_BYTE *)(v8 + 56 * v9 + 1741) = v41;
                                                            if (v41)
                                                            {
                                                              v42 = identifier[30];
                                                              *(_BYTE *)(v8 + 56 * v9 + 1742) = v42;
                                                              if (v42)
                                                              {
                                                                v43 = 31;
LABEL_35:
                                                                *((_BYTE *)v11 + v43) = 0;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v44 = v8 + 56 * v9;
  *(_DWORD *)(v44 + 1760) = *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);
  *(_QWORD *)(v44 + 1744) = a3;
  *(_QWORD *)(v44 + 1752) = a4;
  v45 = *(_QWORD *)(a1[5] + 8);
  v46 = *(unsigned __int8 *)(v45 + 24);
  if (v46 > 8)
  {
    v47 = *(_QWORD *)(a1[4] + 16);
    if (v47 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v47 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v48 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        v49 = *(_DWORD *)(a1[4] + 448);
        v51 = 136446466;
        v52 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke_3";
        v53 = 1024;
        v54 = v49;
        _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_INFO, "%{public}s [C%u] max protocol establishment reports, stopping", (uint8_t *)&v51, 0x12u);
      }

    }
  }
  else
  {
    *(_BYTE *)(v45 + 24) = v46 + 1;
  }

  return v46 < 9;
}

uint64_t ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_46(_QWORD *a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *hostname;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1[6];
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);
  hostname = nw_endpoint_get_hostname(v3);
  if (hostname)
  {
    v7 = (_BYTE *)(v4 + (v5 << 6) + 2272);
    v8 = 64;
    while (1)
    {
      v9 = *(unsigned __int8 *)hostname;
      *v7 = v9;
      if (!v9)
        break;
      ++v7;
      ++hostname;
      if ((unint64_t)--v8 <= 1)
      {
        *v7 = 0;
        break;
      }
    }
    v10 = *(_QWORD *)(a1[5] + 8);
    if (*(_BYTE *)(v10 + 24))
    {
      v11 = *(_QWORD *)(a1[4] + 16);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v11 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v13 = *(_DWORD *)(a1[4] + 448);
          v16 = 136446466;
          v17 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
          v18 = 1024;
          v19 = v13;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, "%{public}s [C%u] max proxy hops, stopping", (uint8_t *)&v16, 0x12u);
        }

      }
      v14 = 0;
    }
    else
    {
      v14 = 1;
      *(_BYTE *)(v10 + 24) = 1;
    }
  }
  else
  {
    v14 = 1;
  }

  return v14;
}

void sub_183A9D018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int event_milliseconds;
  unsigned int v6;
  id *v7;
  id *v8;
  _QWORD *v9;
  void *v10;
  unsigned __int8 *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  nw_endpoint_t v28;
  nw_endpoint_t v29;
  NSObject *v30;
  int v31;
  id *v32;
  id v33;
  _QWORD *v34;
  BOOL v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  char *backtrace_string;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  int v46;
  char v47;
  int v48;
  int v49;
  __int16 v50;
  os_log_type_t type[2];
  _BYTE buf[24];
  unint64_t v53;
  __int128 v54;
  int *v55;
  char *v56;
  int *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (!v3)
    goto LABEL_35;
  v50 = WORD2(v3) ^ WORD1(v3) ^ HIWORD(v3) ^ (unsigned __int16)v3;
  event_milliseconds = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 1, &v50, 0);
  v6 = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 2, &v50, 0);
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 1706) |= 0x200u;
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 232) = v6 - event_milliseconds;
  if (v6 < event_milliseconds)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        v37 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 232);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "report->resolution_milliseconds";
        *(_WORD *)&buf[22] = 2048;
        v53 = event_milliseconds;
        LOWORD(v54) = 2048;
        *(_QWORD *)((char *)&v54 + 2) = v37;
        _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }

    }
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 232) = 0;
  }
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v46 = 0;
  v7 = v4;
  v8 = v7;
  if (*((_DWORD *)v7 + 29) == 1)
  {
    v9 = v7[31];
    v10 = v9;
    if (v9)
    {
      v48 = 0;
      v49 = 0;
      v46 = 0;
      v47 = 0;
      v11 = (unsigned __int8 *)v9[5];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_endpoint_resolver_get_details_block_invoke;
      v53 = (unint64_t)&unk_1E149FA48;
      *((_QWORD *)&v54 + 1) = &v49;
      v55 = &v48;
      v56 = &v47;
      *(_QWORD *)&v54 = v9;
      v57 = &v46;
      nw_array_apply(v11, (uint64_t)buf);

LABEL_8:
      goto LABEL_28;
    }
    __nwlog_obj();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_resolver_get_details";
    v39 = (char *)_os_log_send_and_compose_impl();

    type[1] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v39, &type[1], type))
    {
      if (type[1] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = type[1];
        if (os_log_type_enabled(v40, type[1]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_resolver_get_details";
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null endpoint_resolver", buf, 0xCu);
        }
      }
      else if (type[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v43 = type[1];
        v44 = os_log_type_enabled(v40, type[1]);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_resolver_get_details";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v40, v43, "%{public}s called with null endpoint_resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_55;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_resolver_get_details";
          _os_log_impl(&dword_182FBE000, v40, v43, "%{public}s called with null endpoint_resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v45 = type[1];
        if (os_log_type_enabled(v40, type[1]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_resolver_get_details";
          _os_log_impl(&dword_182FBE000, v40, v45, "%{public}s called with null endpoint_resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_55:
    if (v39)
      free(v39);
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_resolver_details";
  v13 = (char *)_os_log_send_and_compose_impl();

  type[1] = OS_LOG_TYPE_ERROR;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v13, &type[1], type))
  {
LABEL_26:
    if (!v13)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (type[1] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v15 = type[1];
    if (os_log_type_enabled(v14, type[1]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_resolver_details";
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
    }
LABEL_25:

    goto LABEL_26;
  }
  if (type[0] == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v19 = type[1];
    if (os_log_type_enabled(v14, type[1]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_resolver_details";
      _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_25;
  }
  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  v17 = type[1];
  v18 = os_log_type_enabled(v14, type[1]);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_resolver_details";
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
    }
    goto LABEL_25;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_resolver_details";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v16;
    _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (!v13)
    goto LABEL_28;
LABEL_27:
  free(v13);
LABEL_28:

  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 288) = nw_endpoint_handler_get_resolution_protocol(v8);
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 336) = nw_endpoint_handler_get_resolution_provider(v8, 0);
  buf[0] = 0;
  *(_WORD *)type = 0;
  nw_endpoint_handler_get_svcb_report(v8, buf, (BOOL *)&type[1], (BOOL *)type);
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(_DWORD *)(v20 + 1706) & 0xDFFFFFFF | ((unint64_t)*(unsigned __int16 *)(v20 + 1710) << 32) | ((unint64_t)buf[0] << 29);
  *(_DWORD *)(v20 + 1706) = *(_DWORD *)(v20 + 1706) & 0xDFFFFFFF | (buf[0] << 29);
  *(_WORD *)(v20 + 1710) = WORD2(v21);
  v22 = *(_QWORD *)(a1 + 40);
  v23 = *(_DWORD *)(v22 + 1706) & 0xBFFFFFFF | ((unint64_t)*(unsigned __int16 *)(v22 + 1710) << 32) | ((unint64_t)type[1] << 30);
  *(_DWORD *)(v22 + 1706) = *(_DWORD *)(v22 + 1706) & 0xBFFFFFFF | (type[1] << 30);
  *(_WORD *)(v22 + 1710) = WORD2(v23);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = *(_DWORD *)(v24 + 1706) & 0x7FFFFFFF | ((unint64_t)*(unsigned __int16 *)(v24 + 1710) << 32) | ((unint64_t)type[0] << 31);
  *(_DWORD *)(v24 + 1706) = *(_DWORD *)(v24 + 1706) & 0x7FFFFFFF | (type[0] << 31);
  *(_WORD *)(v24 + 1710) = WORD2(v25);
  v26 = v48;
  v27 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v27 + 252) = v49;
  *(_DWORD *)(v27 + 256) = v26;
  *(_BYTE *)(v27 + 349) = v47;
  *(_DWORD *)(v27 + 260) = v46;
  v28 = nw_endpoint_handler_copy_endpoint(v8);
  v29 = v28;
  if (v28)
  {
    v30 = v28;
    v31 = -[NSObject type](v30, "type");

    if (v31 == 1)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 1706) |= 0x10000u;
      v32 = v8;
      v33 = v32[4];

      if (v33)
      {
        v34 = v33;
        v35 = (v34[12] & 0x40000) == 0;

        if (!v35)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 1706) |= 0x20000u;
      }

    }
  }

LABEL_35:
}

void sub_183A9D86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_50(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  unsigned __int8 *v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  char *backtrace_string;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  uint64_t v43;
  id v44;
  id *v45;
  char v46;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v44 = v3;
    v4 = (id *)v3;
    v45 = v4;
    if (*((_DWORD *)v4 + 29) == 5)
    {
      v5 = (unsigned __int8 *)v4[31];
      v6 = v5;
      if (v5)
      {
        v7 = *((_QWORD *)v5 + 9);
        v43 = *((_QWORD *)v5 + 10);
        v8 = *((_DWORD *)v5 + 22);
        v9 = v5[92];
        v10 = v5[93];
        v11 = v5[94];
        v12 = v5[95];
        v13 = v5[96];
        v14 = v5[97];
LABEL_5:

LABEL_14:
        v19 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(v19 + 176) = v7;
        *(_QWORD *)(v19 + 296) = v43;
        *(_DWORD *)(v19 + 304) = v8;
        v20 = (*(unsigned int *)(v19 + 1706) | ((unint64_t)*(unsigned __int16 *)(v19 + 1710) << 32)) & 0xFFFFFFFBFFFFFFFFLL;
        *(_DWORD *)(v19 + 1706) = *(_DWORD *)(v19 + 1706);
        *(_WORD *)(v19 + 1710) = (v20 | (v9 << 34)) >> 32;
        v21 = *(_QWORD *)(a1 + 32);
        v22 = (*(unsigned int *)(v21 + 1706) | ((unint64_t)*(unsigned __int16 *)(v21 + 1710) << 32)) & 0xFFFFFFF7FFFFFFFFLL;
        *(_DWORD *)(v21 + 1706) = *(_DWORD *)(v21 + 1706);
        *(_WORD *)(v21 + 1710) = (v22 | (v10 << 35)) >> 32;
        v23 = *(_QWORD *)(a1 + 32);
        v24 = (*(unsigned int *)(v23 + 1706) | ((unint64_t)*(unsigned __int16 *)(v23 + 1710) << 32)) & 0xFFFFFFEFFFFFFFFFLL;
        *(_DWORD *)(v23 + 1706) = *(_DWORD *)(v23 + 1706);
        *(_WORD *)(v23 + 1710) = (v24 | (v11 << 36)) >> 32;
        v25 = *(_QWORD *)(a1 + 32);
        v26 = (*(unsigned int *)(v25 + 1706) | ((unint64_t)*(unsigned __int16 *)(v25 + 1710) << 32)) & 0xFFFFFFDFFFFFFFFFLL;
        *(_DWORD *)(v25 + 1706) = *(_DWORD *)(v25 + 1706);
        *(_WORD *)(v25 + 1710) = (v26 | (v12 << 37)) >> 32;
        v27 = *(_QWORD *)(a1 + 32);
        v28 = (*(unsigned int *)(v27 + 1706) | ((unint64_t)*(unsigned __int16 *)(v27 + 1710) << 32)) & 0xFFFFFFBFFFFFFFFFLL;
        *(_DWORD *)(v27 + 1706) = *(_DWORD *)(v27 + 1706);
        *(_WORD *)(v27 + 1710) = (v28 | (v13 << 38)) >> 32;
        v29 = *(_QWORD *)(a1 + 32);
        v30 = (*(unsigned int *)(v29 + 1706) | ((unint64_t)*(unsigned __int16 *)(v29 + 1710) << 32)) & 0xFFFFFF7FFFFFFFFFLL | (v14 << 39);
        *(_DWORD *)(v29 + 1706) = *(_DWORD *)(v29 + 1706);
        *(_WORD *)(v29 + 1710) = WORD2(v30);
        v3 = v44;
        goto LABEL_15;
      }
      __nwlog_obj();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v49 = "nw_endpoint_transform_get_details";
      v36 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v46 = 0;
      if (__nwlog_fault(v36, &type, &v46))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            v49 = "nw_endpoint_transform_get_details";
            _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null endpoint_transform", buf, 0xCu);
          }
        }
        else if (v46)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v40 = type;
          v41 = os_log_type_enabled(v37, type);
          if (backtrace_string)
          {
            if (v41)
            {
              *(_DWORD *)buf = 136446466;
              v49 = "nw_endpoint_transform_get_details";
              v50 = 2082;
              v51 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v37, v40, "%{public}s called with null endpoint_transform, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_44;
          }
          if (v41)
          {
            *(_DWORD *)buf = 136446210;
            v49 = "nw_endpoint_transform_get_details";
            _os_log_impl(&dword_182FBE000, v37, v40, "%{public}s called with null endpoint_transform, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v42 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            v49 = "nw_endpoint_transform_get_details";
            _os_log_impl(&dword_182FBE000, v37, v42, "%{public}s called with null endpoint_transform, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_44:
      if (v36)
        free(v36);
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v43 = 0;
      goto LABEL_5;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_endpoint_handler_get_transform_details";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v16, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_endpoint_handler_get_transform_details";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Endpoint handler is not a transform", buf, 0xCu);
        }
      }
      else if (v46)
      {
        v31 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v32 = type;
        v33 = os_log_type_enabled(v17, type);
        if (v31)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v49 = "nw_endpoint_handler_get_transform_details";
            v50 = 2082;
            v51 = v31;
            _os_log_impl(&dword_182FBE000, v17, v32, "%{public}s Endpoint handler is not a transform, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v31);
          if (!v16)
            goto LABEL_13;
          goto LABEL_12;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_endpoint_handler_get_transform_details";
          _os_log_impl(&dword_182FBE000, v17, v32, "%{public}s Endpoint handler is not a transform, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v34 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_endpoint_handler_get_transform_details";
          _os_log_impl(&dword_182FBE000, v17, v34, "%{public}s Endpoint handler is not a transform, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v16)
    {
LABEL_13:
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v43 = 0;
      goto LABEL_14;
    }
LABEL_12:
    free(v16);
    goto LABEL_13;
  }
LABEL_15:

}

uint64_t nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue(void *a1, uint64_t a2)
{
  void **v3;
  void **v4;
  id v5;
  void *v6;
  uint64_t fd;
  _QWORD *v8;
  NSObject *v9;
  int v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (a2)
  {
    nw_context_assert_queue(v3[3]);
    v5 = nw_endpoint_handler_copy_connected_socket_wrapper(v4[18]);
    v6 = v5;
    if (v5)
    {
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = ___ZL62nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queueP24NWConcrete_nw_connectionPP9mptcpinfo_block_invoke;
      v20[3] = &__block_descriptor_40_e8_B12__0i8l;
      v20[4] = a2;
      fd = nw_fd_wrapper_get_fd(v5, v20);
    }
    else
    {
      v8 = v4[2];
      if (v8 && !nw_path_parameters_get_logging_disabled(v8[13]))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v9 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          v10 = *((_DWORD *)v4 + 112);
          *(_DWORD *)buf = 136446466;
          v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
          v25 = 1024;
          LODWORD(v26) = v10;
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, "%{public}s [C%u] Cannot get MPTCP info, no socket", buf, 0x12u);
        }

      }
      fd = 0;
    }

    goto LABEL_13;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v13, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null mptcp_info", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null mptcp_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null mptcp_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null mptcp_info, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_30:
  if (v13)
    free(v13);
  fd = 0;
LABEL_13:

  return fd;
}

void sub_183A9E2E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_51(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  NSObject *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  v7 = *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v7 != 50)
  {
    v8 = v5;
    if (nw_activity_is_selected_for_reporting(v8))
    {
      v26 = 0uLL;
      nw_activity_get_token(v8, &v26);
      *(_OWORD *)(a1[6] + 16 * (*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24))++ + 383) = v26;
      v9 = *(_QWORD *)(a1[4] + 16);
      if (v9)
      {
        if (!nw_path_parameters_get_logging_disabled(*(_QWORD *)(v9 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v10 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            v11 = *(_DWORD *)(a1[4] + 448);
            v12 = *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) - 1;
            v16 = 136447234;
            v17 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
            v18 = 1024;
            v19 = v11;
            v20 = 2114;
            v21 = v8;
            v22 = 1024;
            v23 = v12;
            v24 = 2048;
            v25 = a2;
            _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Copied activity %{public}@ to connection report index %u from index %lu", (uint8_t *)&v16, 0x2Cu);
          }

        }
      }
    }
LABEL_16:

    goto LABEL_17;
  }
  v13 = *(_QWORD *)(a1[4] + 16);
  if (v13 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v13 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v8 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_DWORD *)(a1[4] + 448);
      v16 = 136446466;
      v17 = "nw_connection_stats_fill_in_nw_report_on_nw_queue_block_invoke";
      v18 = 1024;
      v19 = v14;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s [C%u] Reached max activities for report, no additional activities will be reported", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_16;
  }
LABEL_17:

  return v7 != 50;
}

BOOL ___ZL62nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queueP24NWConcrete_nw_connectionPP9mptcpinfo_block_invoke(uint64_t a1, int a2)
{
  int v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = copymptcpinfo(a2, *(_QWORD **)(a1 + 32));
  if (v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v4, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        v7 = "%{public}s copymptcpinfo failed";
LABEL_16:
        v12 = v5;
        v13 = v6;
        goto LABEL_17;
      }
      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        v7 = "%{public}s copymptcpinfo failed, backtrace limit exceeded";
        goto LABEL_16;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v9 = type;
      v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_18:

          if (!v4)
            return v2 == 0;
          goto LABEL_12;
        }
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        v7 = "%{public}s copymptcpinfo failed, no backtrace";
        v12 = v5;
        v13 = v9;
LABEL_17:
        _os_log_impl(&dword_182FBE000, v12, v13, v7, buf, 0xCu);
        goto LABEL_18;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue_block_invoke";
        v18 = 2082;
        v19 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s copymptcpinfo failed, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (v4)
LABEL_12:
      free(v4);
  }
  return v2 == 0;
}

uint64_t ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2(uint64_t a1, char *hostname)
{
  NSObject *host;
  const sockaddr *address;
  int sa_family;

  host = nw_endpoint_create_host(hostname, "0");
  if (nw_endpoint_get_type(host) == nw_endpoint_type_address)
  {
    address = nw_endpoint_get_address(host);
    if (address)
    {
      sa_family = address->sa_family;
      if (sa_family == 30)
      {
        ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 276);
      }
      else if (sa_family == 2)
      {
        ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 272);
      }
    }
  }

  return 1;
}

void sub_183A9E8CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_connection_stats_get_current_appPb_block_invoke()
{
  uint64_t result;

  if (nw_utilities_get_self_bundle_id::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
  result = nw_utilities_get_self_bundle_id::bundle_identifier_string;
  if (nw_utilities_get_self_bundle_id::bundle_identifier_string)
  {
    result = nw_connection_stats_get_apple_app_for_string((const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string);
    nw_connection_stats_get_current_app(BOOL *)::current_app = result;
  }
  else
  {
    nw_connection_stats_get_current_app(BOOL *)::is_daemon = 1;
  }
  return result;
}

BOOL nw_connection_stats_hostname_has_suffix(const char *a1, const char *a2)
{
  size_t v4;
  size_t v5;

  v4 = strlen(a1);
  v5 = strlen(a2);
  return v4 >= v5 && strncmp(&a1[v4 - v5], a2, v5) == 0;
}

void ___ZL70nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queueP24NWConcrete_nw_connectionPU33objcproto22OS_nw_endpoint_handler8NSObjectP35netcore_stats_tcp_statistics_report_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int event_milliseconds;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  __int16 v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v11 = WORD2(v3) ^ WORD1(v3) ^ HIWORD(v3) ^ (unsigned __int16)v3;
    event_milliseconds = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 1, &v11, 0);
    v6 = nw_connection_get_event_milliseconds(*(void **)(a1 + 32), 2, 2, &v11, 0);
    v7 = *(_DWORD **)(a1 + 40);
    if (event_milliseconds != -1)
      v7[33] = event_milliseconds;
    if (v6 != -1)
      v7[32] = v6;
    v7[34] = v6 - event_milliseconds;
    if (v6 < event_milliseconds)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          v10 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 136);
          *(_DWORD *)buf = 136446978;
          v13 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue_block_invoke";
          v14 = 2082;
          v15 = "statistics_report->dns_resolved_time_msecs";
          v16 = 2048;
          v17 = event_milliseconds;
          v18 = 2048;
          v19 = v10;
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }

      }
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)(v8 + 136) = 0;
      goto LABEL_10;
    }
    v8 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(v8 + 136) <= 5u)
LABEL_10:
      *(_WORD *)(v8 + 208) |= 1u;
  }

}

void __nw_connection_report_symptom_internal_on_nw_queue_block_invoke(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  nw_endpoint_type_t type;
  nw_endpoint_type_t v6;
  const char *hostname;
  size_t v8;
  NSObject *endpoint;

  v3 = a2;
  v4 = v3;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    endpoint = v3;
    type = nw_endpoint_get_type(v3);
    v4 = endpoint;
    if (type == nw_endpoint_type_url
      || (v6 = nw_endpoint_get_type(endpoint), v4 = endpoint, v6 == nw_endpoint_type_host))
    {
      hostname = nw_endpoint_get_hostname(v4);
      v4 = endpoint;
      if (hostname)
      {
        v8 = strlen(hostname);
        v4 = endpoint;
        if (v8)
        {
          symptom_set_additional_qualifier();
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
          v4 = endpoint;
        }
      }
    }
  }

}

void sub_183A9EC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id nw_connection_copy_endpoint_handler_for_handler_id(NWConcrete_nw_connection *a1, __int16 a2)
{
  id v2;
  _QWORD v4[5];
  __int16 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = __Block_byref_object_copy__78229;
  v10 = __Block_byref_object_dispose__78230;
  v11 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZL50nw_connection_copy_endpoint_handler_for_handler_idP24NWConcrete_nw_connectiont_block_invoke;
  v4[3] = &unk_1E14AB010;
  v5 = a2;
  v4[4] = &v6;
  nw_endpoint_handler_apply_to_leaf_children(a1, v4);
  v2 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v2;
}

void sub_183A9ECCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__78229(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__78230(uint64_t a1)
{

}

uint64_t ___ZL50nw_connection_copy_endpoint_handler_for_handler_idP24NWConcrete_nw_connectiont_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v3 = a2;
  v4 = v3;
  v5 = (unsigned __int16)(WORD2(v3) ^ WORD1(v3) ^ HIWORD(v3) ^ (unsigned __int16)v3);
  if (!v3)
    v5 = 0;
  if (v5 == *(unsigned __int16 *)(a1 + 40))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = v3;
    v8 = *(id *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v7;
LABEL_11:

    v12 = 0;
    goto LABEL_12;
  }
  v9 = nw_endpoint_handler_copy_parent(v3);
  if (v9)
  {
    v10 = v9;
    while (*(unsigned __int16 *)(a1 + 40) != (unsigned __int16)(WORD2(v10) ^ WORD1(v10) ^ HIWORD(v10) ^ (unsigned __int16)v10))
    {
      v11 = (id *)v10;
      v10 = v11[9];

      if (!v10)
        goto LABEL_9;
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v10;
    v8 = v10;

    goto LABEL_11;
  }
LABEL_9:
  v12 = 1;
LABEL_12:

  return v12;
}

BOOL nw_connection_get_tcp_info_for_connected_endpoint_locked(NWConcrete_nw_connection *a1, tcp_info *a2)
{
  NWConcrete_nw_connection *v3;
  NWConcrete_nw_connection *v4;
  void **v5;
  _BOOL8 v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      v5 = v3;
      v6 = nw_parameters_get_ip_protocol(v5[2]) == 6 && nw_endpoint_handler_fillout_tcp_info(v5[18], a2);

      goto LABEL_7;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null tcp_info", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null tcp_info, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null tcp_info, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null tcp_info, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
  }
LABEL_40:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_7:

  return v6;
}

void sub_183A9F2C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_connection_fillout_tcp_connection_info(void *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  _BOOL8 v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[4];
  os_unfair_lock_s *v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  os_log_type_t type;
  _BYTE buf[24];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v27 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_connection_fillout_tcp_connection_info_block_invoke;
      v20[3] = &unk_1E14AAE00;
      v21 = v3;
      v22 = buf;
      v23 = a2;
      os_unfair_lock_lock(v4 + 34);
      __nw_connection_fillout_tcp_connection_info_block_invoke(v20);
      os_unfair_lock_unlock(v4 + 34);
      v5 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v8, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null info_ptr", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v24)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null info_ptr, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null info_ptr, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null info_ptr, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v8, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v24)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_fillout_tcp_connection_info";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_4:

  return v5;
}

void __nw_connection_fillout_tcp_connection_info_block_invoke(_QWORD *a1)
{
  _BYTE *v1;
  id *v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  _OWORD *v9;
  _QWORD *v10;
  void *v11;
  BOOL v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = (_BYTE *)a1[4];
  if ((v1[109] & 0x40) == 0)
    return;
  v3 = v1;
  v4 = v3[2];

  LODWORD(v3) = nw_parameters_get_multipath(v4);
  v5 = (_QWORD *)a1[4];
  if (!(_DWORD)v3)
  {
    v9 = (_OWORD *)a1[6];
    v10 = v5;
    v11 = v10;
    if (v10)
    {
      if (v9)
      {
        v12 = nw_endpoint_handler_fillout_tcp_connection_info((void *)v10[18], v9);
LABEL_13:

        *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v12;
        return;
      }
      __nwlog_obj();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
      v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (__nwlog_fault(v14, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v18 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null tcp_connection_info", buf, 0xCu);
          }
LABEL_46:

          goto LABEL_47;
        }
        if (!v26)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v25 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null tcp_connection_info, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_46;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        v23 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null tcp_connection_info, no backtrace", buf, 0xCu);
          }
          goto LABEL_46;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null tcp_connection_info, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_34;
      }
    }
    else
    {
      __nwlog_obj();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
      v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (__nwlog_fault(v14, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null connection", buf, 0xCu);
          }
          goto LABEL_46;
        }
        if (!v26)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v24 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_46;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        v21 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }
          goto LABEL_46;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_34:

        free(backtrace_string);
      }
    }
LABEL_47:
    if (v14)
      free(v14);
    v12 = 0;
    goto LABEL_13;
  }
  v6 = v5[2];
  if (v6 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v6 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v7 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_DWORD *)(a1[4] + 448);
      *(_DWORD *)buf = 136446466;
      v29 = "nw_connection_fillout_tcp_connection_info_block_invoke";
      v30 = 1024;
      LODWORD(v31) = v8;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s [C%u] MPTCP is currently not supported", buf, 0x12u);
    }

  }
}

void sub_183A9FDC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_connection_used_tfo_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  _BYTE *bytes_ptr;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C812E8] && (bytes_ptr = xpc_data_get_bytes_ptr(v4)) != 0)
  {
    v5 = 1;
    if (xpc_data_get_length(v4) == 408 && (bytes_ptr[244] & 0x10) != 0)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      v5 = 0;
    }
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_183A9FE68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_connection_better_path_available(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_better_path_available_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v15 = buf;
    v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_better_path_available_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_better_path_available";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_better_path_available";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_better_path_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_better_path_available";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_better_path_available";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_connection_better_path_available_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 132) == 1;
  return result;
}

BOOL nw_connection_has_proxy_attempt_locked_on_nw_queue(void *a1)
{
  void **v1;
  void **v2;
  _QWORD *v3;
  NSObject *v4;
  int v5;
  _BOOL8 has_proxy_child_locked;
  _QWORD *v7;
  void *v8;
  NSObject *v9;
  int v10;
  id v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  _WORD v33[9];

  *(_QWORD *)&v33[5] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[3]);
    if (*((_DWORD *)v2 + 20) == 5)
    {
      v3 = v2[2];
      if (v3 && !nw_path_parameters_get_logging_disabled(v3[13]))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v4 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          v5 = *((_DWORD *)v2 + 112);
          *(_DWORD *)buf = 136446466;
          v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          v32 = 1024;
          *(_DWORD *)v33 = v5;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Cancelled, cannot check for proxy attempts", buf, 0x12u);
        }

      }
      goto LABEL_10;
    }
    v8 = v2[18];
    if (v8)
    {
      has_proxy_child_locked = nw_endpoint_handler_has_proxy_child_locked(v8);
      v7 = v2[2];
      if (!v7)
        goto LABEL_20;
      goto LABEL_14;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
    v13 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault((const char *)v13, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Cannot check proxy endpoint without parent endpoint handler", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v17 = type;
        v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
            v32 = 2082;
            *(_QWORD *)v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s Cannot check proxy endpoint without parent endpoint handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v13)
          {
LABEL_10:
            has_proxy_child_locked = 0;
            v7 = v2[2];
            if (!v7)
              goto LABEL_20;
LABEL_14:
            if (!nw_path_parameters_get_logging_disabled(v7[13]))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v9 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
              {
                v10 = *((_DWORD *)v2 + 112);
                *(_DWORD *)buf = 136446722;
                v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
                v32 = 1024;
                *(_DWORD *)v33 = v10;
                v33[2] = 1024;
                *(_DWORD *)&v33[3] = has_proxy_child_locked;
                _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Has proxy attempt: %u", buf, 0x18u);
              }

            }
            goto LABEL_20;
          }
LABEL_39:
          free(v13);
          goto LABEL_10;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s Cannot check proxy endpoint without parent endpoint handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s Cannot check proxy endpoint without parent endpoint handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v13)
      goto LABEL_10;
    goto LABEL_39;
  }
  __nwlog_obj();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
  v21 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (__nwlog_fault(v21, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v28)
    {
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v22, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          v32 = 2082;
          *(_QWORD *)v33 = v24;
          _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_56;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_56:
  if (v21)
    free(v21);
  has_proxy_child_locked = 0;
LABEL_20:

  return has_proxy_child_locked;
}

void sub_183AA0830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_has_proxy_child_locked(void *a1)
{
  id v1;
  void *v2;
  nw_endpoint_t v3;
  nw_endpoint_t v4;
  _BOOL8 v5;
  _BYTE *v6;
  char v7;
  NSObject *v8;
  char *v9;
  char *v10;
  char v11;
  const char *v12;
  nw_endpoint_t v13;
  const char *logging_description;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  id *v19;
  _QWORD *v20;
  _BOOL8 v21;
  void **v22;
  void **v23;
  const char *v24;
  const char *v25;
  void **v26;
  id v27;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  char *backtrace_string;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  os_log_type_t v44;
  const char *v45;
  char *v46;
  const char *v47;
  _QWORD v48[5];
  char v49;
  os_log_type_t type;
  _BYTE buf[24];
  const char *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  id v60;
  __int16 v61;
  nw_endpoint_t v62;
  __int16 v63;
  _BOOL8 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_endpoint_handler_copy_endpoint(v1);
    v4 = v3;
    if (v3)
    {
      v5 = nw_endpoint_copy_proxy_original_endpoint(v3);
      if (v5)
      {
        v6 = v2;
        v7 = v6[268];

        if ((v7 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v8 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            v9 = v6;

            v10 = v9;
            v11 = v6[268];

            if ((v11 & 1) != 0)
              v12 = "dry-run ";
            else
              v12 = "";
            v13 = nw_endpoint_handler_copy_endpoint(v10);
            logging_description = nw_endpoint_get_logging_description(v13);
            v46 = v9 + 168;
            v47 = v12;
            v15 = v10;
            v16 = v15;
            v17 = v15[30];
            if (v17 > 5)
              v18 = "unknown-state";
            else
              v18 = off_1E149FC48[v17];
            v45 = v18;

            v22 = v16;
            v23 = v22;
            v24 = logging_description;
            v25 = "path";
            switch(*((_DWORD *)v22 + 29))
            {
              case 0:
                break;
              case 1:
                v25 = "resolver";
                break;
              case 2:
                v25 = nw_endpoint_flow_mode_string(v22[31]);
                break;
              case 3:
                v25 = "proxy";
                break;
              case 4:
                v25 = "fallback";
                break;
              case 5:
                v25 = "transform";
                break;
              default:
                v25 = "unknown-mode";
                break;
            }

            v26 = v23;
            os_unfair_lock_lock((os_unfair_lock_t)v26 + 28);
            v27 = v26[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v26 + 28);

            *(_DWORD *)buf = 136448258;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v46;
            *(_WORD *)&buf[22] = 2082;
            v52 = v47;
            v53 = 2082;
            v54 = v24;
            v55 = 2082;
            v56 = v45;
            v57 = 2082;
            v58 = v25;
            v59 = 2114;
            v60 = v27;
            v61 = 2112;
            v62 = v4;
            v63 = 2112;
            v64 = v5;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint %@ has proxy original endpoint %@", buf, 0x5Cu);

          }
        }
        v21 = 1;
      }
      else
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        LOBYTE(v52) = 0;
        v48[0] = MEMORY[0x1E0C809B0];
        v48[1] = 3221225472;
        v48[2] = ___ZL42nw_endpoint_handler_has_proxy_child_lockedPU33objcproto22OS_nw_endpoint_handler8NSObject_block_invoke;
        v48[3] = &unk_1E14AB038;
        v48[4] = buf;
        v19 = v2;
        v20 = v48;
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v19[31], "applyWithHandler:toChildren:", v19, v20);

        v21 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
        _Block_object_dispose(buf, 8);
      }

LABEL_28:
      goto LABEL_29;
    }
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
    v34 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (__nwlog_fault(v34, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
          _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v49)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        v42 = os_log_type_enabled(v35, type);
        if (backtrace_string)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v35, v41, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_65;
        }
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
          _os_log_impl(&dword_182FBE000, v35, v41, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
          _os_log_impl(&dword_182FBE000, v35, v44, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_65:
    if (v34)
      free(v34);
    v21 = 0;
    goto LABEL_28;
  }
  __nwlog_obj();
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
  v30 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v49 = 0;
  if (__nwlog_fault(v30, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
        _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v49)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      v39 = os_log_type_enabled(v31, type);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v37;
          _os_log_impl(&dword_182FBE000, v31, v38, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        goto LABEL_59;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
        _os_log_impl(&dword_182FBE000, v31, v38, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_proxy_child_locked";
        _os_log_impl(&dword_182FBE000, v31, v43, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_59:
  if (v30)
    free(v30);
  v21 = 0;
LABEL_29:

  return v21;
}

void sub_183AA0FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_endpoint_handler_has_proxy_child_lockedPU33objcproto22OS_nw_endpoint_handler8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  int has_proxy_child_locked;

  has_proxy_child_locked = nw_endpoint_handler_has_proxy_child_locked(a2);
  if (has_proxy_child_locked)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return has_proxy_child_locked ^ 1u;
}

BOOL nw_connection_has_proxy_attempt_on_nw_queue(void *a1)
{
  id v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 3));
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_has_proxy_attempt_on_nw_queue_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v15 = buf;
    v14 = v2;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_has_proxy_attempt_on_nw_queue_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_has_proxy_attempt_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183AA13B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL __nw_connection_has_proxy_attempt_on_nw_queue_block_invoke(uint64_t a1)
{
  _BOOL8 result;

  result = nw_connection_has_proxy_attempt_locked_on_nw_queue(*(void **)(a1 + 32));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void nw_connection_shares_protocol_stack(void *a1, void *a2, void *a3, void *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  os_log_type_t v37;
  os_log_type_t v38;
  _QWORD v39[4];
  _QWORD *v40;
  _QWORD *v41;
  NSObject *v42;
  id v43;
  _QWORD block[4];
  id v45;
  char v46;
  os_log_type_t v47;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = v10;
  if (!v7)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_connection_shares_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    v47 = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v16, &v47, &v46))
      goto LABEL_81;
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v26 = v47;
      v27 = os_log_type_enabled(v17, v47);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v49 = "nw_connection_shares_protocol_stack";
          v50 = 2082;
          v51 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_81:
        if (!v16)
          goto LABEL_15;
LABEL_82:
        free(v16);
        goto LABEL_15;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v35 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v35, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_80:

    goto LABEL_81;
  }
  if (!v8)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_connection_shares_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    v47 = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v16, &v47, &v46))
      goto LABEL_81;
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null other_connection", buf, 0xCu);
      }
      goto LABEL_80;
    }
    if (!v46)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v36 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v36, "%{public}s called with null other_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_80;
    }
    v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v29 = v47;
    v30 = os_log_type_enabled(v17, v47);
    if (!v28)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v29, "%{public}s called with null other_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_80;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v49 = "nw_connection_shares_protocol_stack";
      v50 = 2082;
      v51 = v28;
      _os_log_impl(&dword_182FBE000, v17, v29, "%{public}s called with null other_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  if (!v9)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_connection_shares_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    v47 = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v16, &v47, &v46))
      goto LABEL_81;
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null completion_queue", buf, 0xCu);
      }
      goto LABEL_80;
    }
    if (!v46)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v37 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v37, "%{public}s called with null completion_queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_80;
    }
    v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v31 = v47;
    v32 = os_log_type_enabled(v17, v47);
    if (!v28)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v31, "%{public}s called with null completion_queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_80;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v49 = "nw_connection_shares_protocol_stack";
      v50 = 2082;
      v51 = v28;
      _os_log_impl(&dword_182FBE000, v17, v31, "%{public}s called with null completion_queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  if (!v10)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_connection_shares_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    v47 = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v16, &v47, &v46))
      goto LABEL_81;
    if (v47 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v24 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null completion", buf, 0xCu);
      }
      goto LABEL_80;
    }
    if (!v46)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v38 = v47;
      if (os_log_type_enabled(v17, v47))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v38, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_80;
    }
    v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v33 = v47;
    v34 = os_log_type_enabled(v17, v47);
    if (!v28)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_shares_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v33, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_80;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v49 = "nw_connection_shares_protocol_stack";
      v50 = 2082;
      v51 = v28;
      _os_log_impl(&dword_182FBE000, v17, v33, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_55:

    free(v28);
    if (!v16)
      goto LABEL_15;
    goto LABEL_82;
  }
  if (v7 == v8)
  {
    v12 = v7[2];
    if (v12 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v12 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v13 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = *((_DWORD *)v7 + 112);
        *(_DWORD *)buf = 136446466;
        v49 = "nw_connection_shares_protocol_stack";
        v50 = 1024;
        LODWORD(v51) = v14;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, "%{public}s [C%u] shares a protocol stack with itself", buf, 0x12u);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_connection_shares_protocol_stack_block_invoke;
    block[3] = &unk_1E14AC390;
    v45 = v11;
    dispatch_async(v9, block);

  }
  else
  {
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = __nw_connection_shares_protocol_stack_block_invoke_2;
    v39[3] = &unk_1E14AAE78;
    v40 = v7;
    v41 = v8;
    v42 = v9;
    v43 = v11;
    nw_connection_async_if_needed(v40, v39);

  }
LABEL_15:

}

void sub_183AA1E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t __nw_connection_shares_protocol_stack_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __nw_connection_shares_protocol_stack_block_invoke_2(uint64_t a1)
{
  void *v2;
  os_unfair_lock_s *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[8];

  v2 = *(void **)(a1 + 40);
  v3 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 32) + 136);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __nw_connection_shares_protocol_stack_block_invoke_3;
  v8[3] = &unk_1E14AAE78;
  v7 = v2;
  v8[4] = v7;
  v4 = *(id *)(a1 + 32);
  v8[5] = v4;
  v5 = *(id *)(a1 + 48);
  v8[6] = v5;
  v6 = *(id *)(a1 + 56);
  v8[7] = v6;
  os_unfair_lock_lock(v3);
  __nw_connection_shares_protocol_stack_block_invoke_3((uint64_t)v8);
  os_unfair_lock_unlock(v3);

}

void __nw_connection_shares_protocol_stack_block_invoke_3(uint64_t a1)
{
  void *v2;
  os_unfair_lock_s *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[8];

  v2 = *(void **)(a1 + 40);
  v3 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 32) + 136);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __nw_connection_shares_protocol_stack_block_invoke_4;
  v8[3] = &unk_1E14AAE78;
  v7 = v2;
  v8[4] = v7;
  v4 = *(id *)(a1 + 32);
  v8[5] = v4;
  v5 = *(id *)(a1 + 48);
  v8[6] = v5;
  v6 = *(id *)(a1 + 56);
  v8[7] = v6;
  os_unfair_lock_lock(v3);
  __nw_connection_shares_protocol_stack_block_invoke_4((uint64_t)v8);
  os_unfair_lock_unlock(v3);

}

void __nw_connection_shares_protocol_stack_block_invoke_4(uint64_t a1)
{
  void *v2;
  void **v3;
  void **v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  int v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *v13;
  _QWORD *v14;
  NSObject *v15;
  int v16;
  void **v17;
  void **v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  id v24;
  id v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  os_log_type_t v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  void *v33;
  NWConcrete_nw_endpoint_mode_handler *v34;
  char *v35;
  const char *v36;
  const char *v37;
  os_log_type_t v38;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  char *backtrace_string;
  os_log_type_t v44;
  _BOOL4 v45;
  void *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  char *v50;
  _BOOL4 v51;
  os_log_type_t v52;
  os_log_type_t v53;
  NSObject *v54;
  const char *v55;
  NSObject *log;
  NWConcrete_nw_endpoint_mode_handler *v57;
  NWConcrete_nw_endpoint_mode_handler *v58;
  NWConcrete_nw_endpoint_handler *v59;
  NWConcrete_nw_endpoint_handler *v60;
  NWConcrete_nw_endpoint_mode_handler *v61;
  NWConcrete_nw_endpoint_mode_handler *type;
  os_log_type_t typea;
  void *v64;
  _QWORD block[4];
  id v66;
  char v67;
  char v68;
  os_log_type_t v69;
  uint8_t buf[4];
  const char *v71;
  __int16 v72;
  _BYTE v73[20];
  const char *v74;
  __int16 v75;
  char *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 40);
  v3 = (void **)*(id *)(a1 + 32);
  v4 = v2;
  if (!v3)
  {
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
    v40 = (char *)_os_log_send_and_compose_impl();

    v69 = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (__nwlog_fault(v40, &v69, &v68))
    {
      if (v69 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v42 = v69;
        if (os_log_type_enabled(v41, v69))
        {
          *(_DWORD *)buf = 136446210;
          v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v68)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v44 = v69;
        v45 = os_log_type_enabled(v41, v69);
        if (backtrace_string)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
            v72 = 2082;
            *(_QWORD *)v73 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_123;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v41 = objc_claimAutoreleasedReturnValue();
        v52 = v69;
        if (os_log_type_enabled(v41, v69))
        {
          *(_DWORD *)buf = 136446210;
          v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v41, v52, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_123:
    if (v40)
      free(v40);
    LOBYTE(v13) = 0;
    goto LABEL_35;
  }
  nw_context_assert_queue(v3[3]);
  nw_context_assert_queue(v4[3]);
  if (*((_DWORD *)v3 + 20) == 5)
  {
    v5 = v3[2];
    if (v5 && !nw_path_parameters_get_logging_disabled(v5[13]))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v6 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        goto LABEL_25;
      goto LABEL_15;
    }
    goto LABEL_95;
  }
  if (*((_DWORD *)v4 + 20) != 5)
  {
    v6 = v3[18];
    if (!v6 || (*((_BYTE *)v3 + 109) & 0x40) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
      v10 = (char *)_os_log_send_and_compose_impl();

      v69 = OS_LOG_TYPE_ERROR;
      v68 = 0;
      if (__nwlog_fault(v10, &v69, &v68))
      {
        if (v69 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v12 = v69;
          if (os_log_type_enabled(v11, v69))
          {
            *(_DWORD *)buf = 136446210;
            v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s Cannot check shares protocol stack without connected endpoint handler", buf, 0xCu);
          }
        }
        else if (v68)
        {
          v21 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v22 = v69;
          v23 = os_log_type_enabled(v11, v69);
          if (v21)
          {
            if (v23)
            {
              *(_DWORD *)buf = 136446466;
              v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
              v72 = 2082;
              *(_QWORD *)v73 = v21;
              _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s Cannot check shares protocol stack without connected endpoint handler, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v21);
            if (!v10)
              goto LABEL_25;
            goto LABEL_24;
          }
          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s Cannot check shares protocol stack without connected endpoint handler, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v29 = v69;
          if (os_log_type_enabled(v11, v69))
          {
            *(_DWORD *)buf = 136446210;
            v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
            _os_log_impl(&dword_182FBE000, v11, v29, "%{public}s Cannot check shares protocol stack without connected endpoint handler, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v10)
        goto LABEL_25;
LABEL_24:
      free(v10);
      goto LABEL_25;
    }
    v24 = v4[18];
    v64 = v24;
    if (v24 && (*((_BYTE *)v4 + 109) & 0x40) != 0)
    {
      v33 = v24;
      v59 = v6;
      v60 = v33;
      type = nw_endpoint_handler_copy_flow(v59);
      v61 = nw_endpoint_handler_copy_flow(v60);
      LODWORD(v13) = 0;
      if (!type)
        goto LABEL_86;
      v34 = v61;
      if (v61)
      {
        v57 = type;
        v58 = v61;
        v13 = (char *)v57 + 376;
        while (*(_DWORD *)(*((_QWORD *)v13 + 2) + 32) == 2)
        {
LABEL_64:
          v13 = (char *)*((_QWORD *)v13 + 4);
          if (!v13)
            goto LABEL_85;
        }
        v35 = (char *)v58 + 376;
        while (1)
        {
          if (*(_DWORD *)(*((_QWORD *)v35 + 2) + 32) != 2)
          {
            if (v13 == v35)
            {
              if (gLogDatapath)
              {
                __nwlog_obj();
                v54 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
                {
                  v55 = "invalid";
                  if (v13 && *((_QWORD *)v13 + 2))
                    v55 = (const char *)*((_QWORD *)v13 + 2);
                  *(_DWORD *)buf = 136447234;
                  v71 = "nw_endpoint_flow_shares_protocol_stack";
                  v72 = 2080;
                  *(_QWORD *)v73 = v55;
                  *(_WORD *)&v73[8] = 2048;
                  *(_QWORD *)&v73[10] = v13;
                  *(_WORD *)&v73[18] = 2080;
                  v74 = v55;
                  v75 = 2048;
                  v76 = v13;
                  _os_log_impl(&dword_182FBE000, v54, OS_LOG_TYPE_DEBUG, "%{public}s protocol %s (%p) matches protocol %s (%p)", buf, 0x34u);
                }

              }
              LODWORD(v13) = 1;
LABEL_85:

LABEL_86:
              v34 = v61;
              break;
            }
            if (gLogDatapath)
            {
              __nwlog_obj();
              log = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
              {
                if (v13)
                {
                  v36 = (const char *)*((_QWORD *)v13 + 2);
                  if (!v36)
                    v36 = "invalid";
                }
                else
                {
                  v36 = "invalid";
                }
                v37 = (const char *)*((_QWORD *)v35 + 2);
                if (!v37)
                  v37 = "invalid";
                *(_DWORD *)buf = 136447234;
                v71 = "nw_endpoint_flow_shares_protocol_stack";
                v72 = 2080;
                *(_QWORD *)v73 = v36;
                *(_WORD *)&v73[8] = 2048;
                *(_QWORD *)&v73[10] = v13;
                *(_WORD *)&v73[18] = 2080;
                v74 = v37;
                v75 = 2048;
                v76 = v35;
                _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s protocol %s (%p) does not match protocol %s (%p)", buf, 0x34u);
              }

            }
          }
          v35 = (char *)*((_QWORD *)v35 + 4);
          if (!v35)
            goto LABEL_64;
        }
      }

      goto LABEL_88;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
    v26 = (char *)_os_log_send_and_compose_impl();

    v69 = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (__nwlog_fault(v26, &v69, &v68))
    {
      if (v69 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (id)gLogObj;
        v28 = v69;
        if (os_log_type_enabled(v27, v69))
        {
          *(_DWORD *)buf = 136446210;
          v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s Cannot check shares protocol stack without connected endpoint handler", buf, 0xCu);
        }
      }
      else if (v68)
      {
        v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v31 = v69;
        v32 = os_log_type_enabled(v27, v69);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
            v72 = 2082;
            *(_QWORD *)v73 = v30;
            _os_log_impl(&dword_182FBE000, v27, v31, "%{public}s Cannot check shares protocol stack without connected endpoint handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v30);
          if (!v26)
            goto LABEL_51;
          goto LABEL_50;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v27, v31, "%{public}s Cannot check shares protocol stack without connected endpoint handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v38 = v69;
        if (os_log_type_enabled(v27, v69))
        {
          *(_DWORD *)buf = 136446210;
          v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v27, v38, "%{public}s Cannot check shares protocol stack without connected endpoint handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v26)
    {
LABEL_51:
      LODWORD(v13) = 0;
LABEL_88:

LABEL_26:
      v14 = v3[2];
      if (!v14)
        goto LABEL_35;
      goto LABEL_27;
    }
LABEL_50:
    free(v26);
    goto LABEL_51;
  }
  v7 = v3[2];
  if (v7 && !nw_path_parameters_get_logging_disabled(v7[13]))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v6 = (id)gconnectionLogObj;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      goto LABEL_25;
LABEL_15:
    v8 = *((_DWORD *)v3 + 112);
    *(_DWORD *)buf = 136446466;
    v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
    v72 = 1024;
    *(_DWORD *)v73 = v8;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Cancelled, cannot check for shares protocol stack", buf, 0x12u);
LABEL_25:
    LODWORD(v13) = 0;
    goto LABEL_26;
  }
LABEL_95:
  LODWORD(v13) = 0;
  v14 = v3[2];
  if (!v14)
    goto LABEL_35;
LABEL_27:
  if (!nw_path_parameters_get_logging_disabled(v14[13]))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v15 = (id)gconnectionLogObj;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      goto LABEL_34;
    v16 = *((_DWORD *)v3 + 112);
    v17 = v4;
    v18 = v17;
    if (v17)
    {
      v19 = *((unsigned int *)v17 + 112);
LABEL_33:

      *(_DWORD *)buf = 136446978;
      v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
      v72 = 1024;
      *(_DWORD *)v73 = v16;
      *(_WORD *)&v73[4] = 2048;
      *(_QWORD *)&v73[6] = v19;
      *(_WORD *)&v73[14] = 1024;
      *(_DWORD *)&v73[16] = (_DWORD)v13;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] shares a protocol stack with [C%llu]: %{BOOL}d", buf, 0x22u);
LABEL_34:

      goto LABEL_35;
    }
    __nwlog_obj();
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v71 = "nw_connection_get_id";
    v47 = (char *)_os_log_send_and_compose_impl();

    v69 = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (__nwlog_fault(v47, &v69, &v68))
    {
      if (v69 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = v69;
        if (os_log_type_enabled(v48, v69))
        {
          *(_DWORD *)buf = 136446210;
          v71 = "nw_connection_get_id";
          _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v68)
      {
        v50 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        typea = v69;
        v51 = os_log_type_enabled(v48, v69);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            v71 = "nw_connection_get_id";
            v72 = 2082;
            *(_QWORD *)v73 = v50;
            _os_log_impl(&dword_182FBE000, v48, typea, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v50);
          goto LABEL_132;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          v71 = "nw_connection_get_id";
          _os_log_impl(&dword_182FBE000, v48, typea, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v53 = v69;
        if (os_log_type_enabled(v48, v69))
        {
          *(_DWORD *)buf = 136446210;
          v71 = "nw_connection_get_id";
          _os_log_impl(&dword_182FBE000, v48, v53, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_132:
    if (v47)
      free(v47);
    v19 = 0;
    goto LABEL_33;
  }
LABEL_35:

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __nw_connection_shares_protocol_stack_block_invoke_5;
  block[3] = &unk_1E14AAE50;
  v20 = *(NSObject **)(a1 + 48);
  v66 = *(id *)(a1 + 56);
  v67 = (char)v13;
  dispatch_async(v20, block);

}

void sub_183AA2F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

uint64_t __nw_connection_shares_protocol_stack_block_invoke_5(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void __nw_connection_start_throughput_monitor_on_nw_queue_block_invoke(uint64_t a1)
{
  void **v1;
  void **v2;
  _QWORD *v3;
  NSObject *v4;
  int v5;
  id *v6;
  id v7;
  id *v8;
  id *v9;
  BOOL v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  NSObject *v18;
  unsigned int v19;
  unsigned int *v20;
  const void *v21;
  void *v22;
  dispatch_qos_class_t v23;
  id v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  char v33;
  uint8_t buf[32];
  __int128 v35;
  __int128 v36;
  _OWORD v37[21];
  uint64_t v38;
  _QWORD v39[4];
  id v40;
  unint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v1 = (void **)*(id *)(a1 + 32);
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[3]);
    if ((*((_BYTE *)v2 + 109) & 0x40) == 0)
    {
      v3 = v2[2];
      if (v3 && !nw_path_parameters_get_logging_disabled(v3[13]))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v4 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v5 = *((_DWORD *)v2 + 112);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_throughput_measure_on_nw_queue";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v5;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection does not have a connected handler", buf, 0x12u);
        }

      }
      goto LABEL_32;
    }
    v38 = 0;
    memset(v37, 0, sizeof(v37));
    v35 = 0u;
    v36 = 0u;
    memset(buf, 0, sizeof(buf));
    v6 = v2;
    v7 = v6[2];

    if (!nw_parameters_get_multipath(v7))
    {
      v8 = v6;
      nw_context_assert_queue(v2[3]);
      v9 = v8;
      if (nw_parameters_get_ip_protocol(v6[2]) == 6)
      {
        v10 = nw_endpoint_handler_fillout_tcp_info(v9[18], buf);

        if (v10)
        {
          v11 = (_BYTE *)(*(_QWORD *)((char *)&v37[2] + 12) + *(_QWORD *)((char *)v37 + 12));
          v12 = mach_continuous_time();
          if (v12 <= 1)
            v13 = 1;
          else
            v13 = v12;
          v14 = (uint64_t)v9[45];
          if (v14)
          {
            v15 = nw_delta_nanos(v14, v13);
            v16 = v6[2];
            v17 = 1000 * (v11 - (_BYTE *)v9[44]) / (v15 / 0xF4240);
            if (v16 && !nw_path_parameters_get_logging_disabled(v16[13]))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v18 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
              {
                v19 = *((_DWORD *)v9 + 112);
                LODWORD(v39[0]) = 136446722;
                *(_QWORD *)((char *)v39 + 4) = "nw_connection_throughput_measure_on_nw_queue";
                WORD2(v39[1]) = 1024;
                *(_DWORD *)((char *)&v39[1] + 6) = v19;
                WORD1(v39[2]) = 2048;
                *(_QWORD *)((char *)&v39[2] + 4) = v17;
                _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] bps: %llu", (uint8_t *)v39, 0x1Cu);
              }

            }
            if (v17 < *((unsigned int *)v9 + 94))
            {
              v20 = v9;
              nw_context_assert_queue(v2[3]);
              v21 = (const void *)*((_QWORD *)v20 + 48);
              if (v21 && v20[20] != 5)
              {
                v22 = _Block_copy(v21);
                v23 = v20[48];
                v39[0] = MEMORY[0x1E0C809B0];
                v39[1] = 3221225472;
                v39[2] = ___ZL45nw_connection_send_low_throughput_on_nw_queueP24NWConcrete_nw_connectiony_block_invoke;
                v39[3] = &unk_1E14AB060;
                v40 = v22;
                v41 = v17;
                v24 = v22;
                nw_connection_async_client(v20, v23, v39);

              }
            }
          }
          *((_OWORD *)v9 + 22) = *((_OWORD *)v9 + 21);
          v9[42] = v11;
          v9[43] = (id)v13;
        }
        goto LABEL_32;
      }

    }
    goto LABEL_32;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_throughput_measure_on_nw_queue";
  v26 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v39[0]) = 16;
  v33 = 0;
  if (__nwlog_fault(v26, v39, &v33))
  {
    if (LOBYTE(v39[0]) == 17)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = v39[0];
      if (os_log_type_enabled(v27, v39[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_throughput_measure_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v30 = v39[0];
      v31 = os_log_type_enabled(v27, v39[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_throughput_measure_on_nw_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_throughput_measure_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v32 = v39[0];
      if (os_log_type_enabled(v27, v39[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_throughput_measure_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_49:
  if (v26)
    free(v26);
LABEL_32:

}

void sub_183AA3508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  _Unwind_Resume(a1);
}

uint64_t ___ZL45nw_connection_send_low_throughput_on_nw_queueP24NWConcrete_nw_connectiony_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void nw_connection_report_estimated_byte_threshold_change_on_queue(NWConcrete_nw_connection *a1, uint64_t a2, int a3, int a4, int a5)
{
  NWConcrete_nw_connection *v9;
  NWConcrete_nw_connection *v10;
  OS_nw_parameters *v11;
  NSObject *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  OS_nw_parameters *parameters;
  NSObject *v20;
  unsigned int top_id;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v23, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
            v34 = 2082;
            v35 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_56;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_56:
    if (v23)
      free(v23);
    goto LABEL_39;
  }
  nw_context_assert_queue(v9->context);
  if ((*((_BYTE *)v10 + 109) & 0x40) != 0)
  {
    v12 = nw_endpoint_handler_copy_connected_path(v10->parent_endpoint_handler);
    if (v12)
    {
      if (a5)
        v14 = 8;
      else
        v14 = 6;
      if (a5)
        v15 = 7;
      else
        v15 = 5;
      if (a4)
        v14 = v15;
      if (a5)
        v16 = 4;
      else
        v16 = 2;
      if (a5)
        v17 = 3;
      else
        v17 = 1;
      if (a4)
        v16 = v17;
      if (a3)
        v18 = v16;
      else
        v18 = v14;
      nw_connection_report_symptom_internal_on_nw_queue(421899, v10->endpoint, v10->parameters, v12, 0, 0, a2, v18, 0, v10->privacy_stance);
    }
    else
    {
      parameters = v10->parameters;
      if (parameters && !nw_path_parameters_get_logging_disabled(*((_QWORD *)parameters + 13)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v20 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          top_id = v10->top_id;
          *(_DWORD *)buf = 136446466;
          v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
          v34 = 1024;
          LODWORD(v35) = top_id;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Not reporting estimated byte threshold change because connection has no connected path", buf, 0x12u);
        }

      }
    }
    goto LABEL_38;
  }
  v11 = v10->parameters;
  if (v11 && !nw_path_parameters_get_logging_disabled(*((_QWORD *)v11 + 13)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v12 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = v10->top_id;
      *(_DWORD *)buf = 136446466;
      v33 = "nw_connection_report_estimated_byte_threshold_change_on_queue";
      v34 = 1024;
      LODWORD(v35) = v13;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Not reporting estimated byte threshold change because connection has no connected endpoint handler", buf, 0x12u);
    }
LABEL_38:

  }
LABEL_39:

}

void sub_183AA39DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_report_excessive_data_usage_event(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  xpc_object_t v6;
  NSObject *v7;
  objc_class *v8;
  nw_path_t v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  id *v13;
  id v14;
  uint64_t effective_process_name;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  id v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  Class isa;
  int v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  Class v28;
  int v29;
  Class v30;
  NSObject *v31;
  int v32;
  os_log_type_t v33;
  unsigned int *v34;
  int v35;
  const char *v36;
  NSObject *v37;
  double v38;
  const char *description;
  NSObject *v40;
  id v41;
  const char *v42;
  id v43;
  const char *logging_description;
  void *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  os_log_type_t v53;
  NSObject *v54;
  const char *v55;
  char *v56;
  char *string;
  NWConcrete_nw_connection *v58;
  char v59;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  char *v68;
  __int16 v69;
  char *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (v5)
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6)
    {
      v7 = v5;
      v8 = v7[1].isa;

      if (!v8)
      {
        isa = v7[2].isa;
        if (!isa || nw_path_parameters_get_logging_disabled(*((_QWORD *)isa + 13)))
        {
          effective_process_name = 0;
          goto LABEL_77;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v24 = (int)v7[56].isa;
          *(_DWORD *)buf = 136446466;
          v62 = "nw_report_excessive_data_usage_event";
          v63 = 1024;
          LODWORD(v64) = v24;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no remote endpoint", buf, 0x12u);
        }
        effective_process_name = 0;
LABEL_76:

LABEL_77:
        goto LABEL_78;
      }
      v9 = nw_connection_copy_current_path(v7);
      v10 = v9;
      if (v9)
      {
        v11 = nw_path_copy_interface(v9);
        if (!v11)
        {
          v30 = v7[2].isa;
          if (v30 && !nw_path_parameters_get_logging_disabled(*((_QWORD *)v30 + 13)))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v31 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              v32 = (int)v7[56].isa;
              *(_DWORD *)buf = 136446466;
              v62 = "nw_report_excessive_data_usage_event";
              v63 = 1024;
              LODWORD(v64) = v32;
              _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no interface", buf, 0x12u);
            }

          }
          v11 = 0;
          effective_process_name = 0;
          goto LABEL_75;
        }
        if (nw_utilities_get_self_name::onceToken != -1)
          dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44028);
        v12 = (const char *)nw_utilities_get_self_name::name;
        if (nw_utilities_get_self_name::name)
        {
          v13 = v7;
          v14 = v13[2];
          v58 = (NWConcrete_nw_connection *)v13;

          effective_process_name = nw_parameters_get_effective_process_name(v14);
          if (effective_process_name)
          {
            v55 = (const char *)effective_process_name;
            v16 = v11;
            v17 = v16[24];

            if (v17 > 4)
              v18 = "unknown";
            else
              v18 = off_1E14AD0B0[v17];
            string = (char *)v18;
            v34 = v16;
            v35 = v34[25];
            v54 = v34;

            if (v35 <= 1001)
            {
              if (!v35)
              {
                v36 = "other";
                goto LABEL_67;
              }
              if (v35 == 1001)
              {
                v36 = "wifi_infrastructure";
                goto LABEL_67;
              }
            }
            else
            {
              switch(v35)
              {
                case 1002:
                  v36 = "wifi_awdl";
                  goto LABEL_67;
                case 4001:
                  v36 = "coprocessor";
                  goto LABEL_67;
                case 5001:
                  v36 = "companion";
LABEL_67:
                  v56 = (char *)v36;
                  xpc_dictionary_set_uint64(v6, "bytes_in", a2);
                  xpc_dictionary_set_uint64(v6, "bytes_out", a3);
                  xpc_dictionary_set_string(v6, "bundle_id", v12);
                  xpc_dictionary_set_string(v6, "effective_bundle_id", v55);
                  xpc_dictionary_set_string(v6, "interface_type", string);
                  xpc_dictionary_set_string(v6, "interface_subtype", v56);
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v37 = (id)gLogObj;
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446722;
                    v62 = "nw_report_excessive_data_usage_event";
                    v63 = 2048;
                    v64 = a2;
                    v65 = 2048;
                    v66 = a3;
                    _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Excessive data usage detected, bytes in/out: %llu/%llu", buf, 0x20u);
                  }

                  if (os_variant_has_internal_diagnostics()
                    && nw_connection_stats_get_apple_host(v58))
                  {
                    description = nw_endpoint_get_description(v8);
                    xpc_dictionary_set_string(v6, "endpoint", description);
                    __nwlog_obj();
                    v40 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                    {
                      v41 = nw_connection_copy_connected_local_endpoint(v58);
                      v42 = nw_endpoint_get_description(v41);
                      v43 = nw_connection_copy_connected_remote_endpoint(v58);
                      logging_description = nw_endpoint_get_logging_description(v43);
                      *(_DWORD *)buf = 136447234;
                      v62 = "nw_report_excessive_data_usage_event";
                      v63 = 2082;
                      v64 = (uint64_t)v42;
                      v65 = 2082;
                      v66 = (uint64_t)logging_description;
                      v67 = 2080;
                      v68 = string;
                      v69 = 2080;
                      v70 = v56;
                      _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s Excessive data usage event: %{public}s<->%{public}s, interface: %s, subtype: %s", buf, 0x34u);

                    }
                  }
                  analytics_send_event_delayInitStub(v38);
                  effective_process_name = 1;
                  v11 = v54;
                  goto LABEL_75;
              }
            }
            v36 = "unknown";
            goto LABEL_67;
          }
LABEL_75:

          goto LABEL_76;
        }
      }
      else
      {
        v28 = v7[2].isa;
        if (!v28 || nw_path_parameters_get_logging_disabled(*((_QWORD *)v28 + 13)))
        {
          v10 = 0;
          effective_process_name = 0;
          goto LABEL_76;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v29 = (int)v7[56].isa;
          *(_DWORD *)buf = 136446466;
          v62 = "nw_report_excessive_data_usage_event";
          v63 = 1024;
          LODWORD(v64) = v29;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no path", buf, 0x12u);
        }
      }
      effective_process_name = 0;
      goto LABEL_75;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v62 = "nw_report_excessive_data_usage_event";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (__nwlog_fault(v20, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_report_excessive_data_usage_event";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v26 = type;
        v27 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v62 = "nw_report_excessive_data_usage_event";
            v63 = 2082;
            v64 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v20)
            goto LABEL_53;
          goto LABEL_52;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_report_excessive_data_usage_event";
          _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v33 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_report_excessive_data_usage_event";
          _os_log_impl(&dword_182FBE000, v21, v33, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v20)
    {
LABEL_53:
      effective_process_name = 0;
LABEL_78:

      goto LABEL_79;
    }
LABEL_52:
    free(v20);
    goto LABEL_53;
  }
  __nwlog_obj();
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v62 = "nw_report_excessive_data_usage_event";
  v47 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v59 = 0;
  if (__nwlog_fault(v47, &type, &v59))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_report_excessive_data_usage_event";
        _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v59)
    {
      v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      v52 = os_log_type_enabled(v48, type);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_report_excessive_data_usage_event";
          v63 = 2082;
          v64 = (uint64_t)v50;
          _os_log_impl(&dword_182FBE000, v48, v51, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v50);
        goto LABEL_98;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_report_excessive_data_usage_event";
        _os_log_impl(&dword_182FBE000, v48, v51, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v53 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_report_excessive_data_usage_event";
        _os_log_impl(&dword_182FBE000, v48, v53, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_98:
  if (v47)
    free(v47);
  effective_process_name = 0;
LABEL_79:

  return effective_process_name;
}

void sub_183AA44B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void nw_connection_add_client_event_internal(void *a1, int a2, void *a3, void *a4)
{
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  int v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  int v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _QWORD v30[4];
  _QWORD *v31;
  id v32;
  id v33;
  uint64_t v34;
  int v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  _BYTE v39[20];
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    v10 = mach_continuous_time();
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    v12 = nw_delta_nanos(v7[9], v11);
    if (v12 > 0xF423FFFFFFFFFLL)
      v13 = -1;
    else
      v13 = v12 / 0xF4240;
    if (nw_parameters_get_logging_disabled(v7[2]))
      goto LABEL_28;
    if ((a2 & 0xFFFFFFFE) == 4)
    {
      if (!v9 || !nw_activity_should_log(v9))
        goto LABEL_28;
      if (__nwlog_activity_log::onceToken != -1)
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
      v14 = (id)gactivityLogObj;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
LABEL_27:

LABEL_28:
        v30[0] = MEMORY[0x1E0C809B0];
        v30[1] = 3221225472;
        v30[2] = ___ZL39nw_connection_add_client_event_internalP24NWConcrete_nw_connection26nw_endpoint_client_event_tPU24objcproto13OS_xpc_object8NSObjectPU25objcproto14OS_nw_activityS2__block_invoke;
        v30[3] = &unk_1E14AB0B0;
        v34 = v11;
        v35 = a2;
        v31 = v7;
        v32 = v8;
        v33 = v9;
        nw_connection_async_if_needed(v31, v30);

        goto LABEL_29;
      }
      if ((unsigned __int16)(a2 - 1) > 4u)
        v15 = "unknown";
      else
        v15 = off_1E14A0358[(unsigned __int16)(a2 - 1)];
      v21 = *((_DWORD *)v7 + 112);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)v39 = v21;
      *(_WORD *)&v39[4] = 2082;
      *(_QWORD *)&v39[6] = v15;
      *(_WORD *)&v39[14] = 1024;
      *(_DWORD *)&v39[16] = v13 / 0x3E8;
      v40 = 1024;
      v41 = v13 % 0x3E8;
      v42 = 2114;
      v43 = v9;
      v18 = "[C%u] event: client:%{public}s @%u.%03us, activity %{public}@";
      v19 = v14;
      v20 = 40;
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v14 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        goto LABEL_27;
      if ((unsigned __int16)(a2 - 1) > 4u)
        v16 = "unknown";
      else
        v16 = off_1E14A0358[(unsigned __int16)(a2 - 1)];
      v17 = *((_DWORD *)v7 + 112);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v39 = v17;
      *(_WORD *)&v39[4] = 2082;
      *(_QWORD *)&v39[6] = v16;
      *(_WORD *)&v39[14] = 1024;
      *(_DWORD *)&v39[16] = v13 / 0x3E8;
      v40 = 1024;
      v41 = v13 % 0x3E8;
      v18 = "[C%u] event: client:%{public}s @%u.%03us";
      v19 = v14;
      v20 = 30;
    }
    _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
    goto LABEL_27;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v39 = "nw_connection_add_client_event_internal";
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (__nwlog_fault(v23, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v39 = "nw_connection_add_client_event_internal";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)v39 = "nw_connection_add_client_event_internal";
          *(_WORD *)&v39[8] = 2082;
          *(_QWORD *)&v39[10] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_46;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v39 = "nw_connection_add_client_event_internal";
        _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v39 = "nw_connection_add_client_event_internal";
        _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_46:
  if (v23)
    free(v23);
LABEL_29:

}

void sub_183AA4A88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL39nw_connection_add_client_event_internalP24NWConcrete_nw_connection26nw_endpoint_client_event_tPU24objcproto13OS_xpc_object8NSObjectPU25objcproto14OS_nw_activityS2__block_invoke(uint64_t a1)
{
  uint64_t v2;
  char *logging_description;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  unsigned __int8 *v9;
  _BOOL8 v10;
  void *v11;
  char *v12;
  int v13;
  uint64_t v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  id v26;
  NWConcrete_nw_endpoint_handler *v27;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v29;
  NWConcrete_nw_endpoint_handler *v30;
  char v31;
  NSObject *v32;
  NWConcrete_nw_endpoint_handler *v33;
  NWConcrete_nw_endpoint_handler *v34;
  char v35;
  const char *v36;
  nw_endpoint_t v37;
  const char *v38;
  char *id_str;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  const char *v43;
  NSObject *v44;
  id v45;
  const char *v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  char *v51;
  BOOL v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  const char *v59;
  char *backtrace_string;
  os_log_type_t v61;
  _BOOL4 v62;
  const char *v63;
  os_log_type_t v64;
  uint64_t v65;
  void **v66;
  void **v67;
  const char *v68;
  os_log_type_t v69;
  NSObject *v70;
  uint64_t v71;
  os_log_type_t v72;
  const char *v73;
  const char *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(void);
  void *v79;
  os_unfair_lock_s *v80;
  os_unfair_lock_s *v81;
  void *v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  void *v86;
  char *v87;
  NSObject *v88;
  os_log_type_t v89;
  void *v90;
  char *v91;
  NSObject *v92;
  os_log_type_t v93;
  char *v94;
  os_log_type_t v95;
  _BOOL4 v96;
  char *v97;
  os_log_type_t v98;
  _BOOL4 v99;
  __int16 v100;
  const char *id_string;
  nw_endpoint_t v102;
  const char *v103;
  const char *v104;
  id v105;
  char *v106;
  os_log_type_t v107;
  _BOOL4 v108;
  os_log_type_t v109;
  os_log_type_t v110;
  os_log_type_t v111;
  const char *v112;
  const char *v113;
  __int16 v114;
  NWConcrete_nw_endpoint_mode_handler *v115;
  NWConcrete_nw_endpoint_mode_handler *v116;
  id v117;
  uint64_t v118;
  _QWORD v119[4];
  os_unfair_lock_s *v120;
  uint64_t v121;
  __int16 v122;
  __int16 v123;
  __int16 v124;
  __int16 v125;
  char v126;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v129;
  __int16 v130;
  char *v131;
  _BYTE v132[24];
  __int16 v133;
  _BYTE v134[24];
  const char *v135;
  _BYTE v136[20];
  __int16 v137;
  const char *v138;
  __int16 v139;
  id v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  LODWORD(logging_description) = *(_DWORD *)(a1 + 64);
  v4 = MEMORY[0x1E0C809B0];
  v5 = &unk_183BA7000;
  switch((int)logging_description)
  {
    case 1:
      v21 = *(_QWORD *)(a1 + 32);
      v22 = *(_QWORD *)(v21 + 96);
      if (v22)
      {
        ++*(_DWORD *)(v22 + 184);
        v21 = *(_QWORD *)(a1 + 32);
      }
      v19 = *(void **)(v21 + 144);
      v20 = 0;
      goto LABEL_17;
    case 2:
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96);
      if (v24)
      {
        ++*(_DWORD *)(v24 + 188);
        v25 = *(void **)(a1 + 40);
        if (v25)
        {
          if (object_getClass(v25) == (Class)MEMORY[0x1E0C81398])
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) + 192) = xpc_uint64_get_value(*(xpc_object_t *)(a1 + 40));
        }
      }
      nw_connection_report_symptom_on_nw_queue(*(void **)(a1 + 32), 421890, 0, 0);
      v26 = *(id *)(*(_QWORD *)(a1 + 32) + 144);
      v118 = v2;
      if (v26)
      {
        v117 = v26;
        v27 = (NWConcrete_nw_endpoint_handler *)v26;
        mode = v27->mode;

        if ((_DWORD)mode == 2)
        {
          v29 = nw_endpoint_handler_copy_flow(v27);
          if (nw_endpoint_handler_get_minimize_logging(v27))
          {
            if ((nw_endpoint_handler_get_logging_disabled(v27) & 1) != 0)
            {
LABEL_100:
              v76 = *((_QWORD *)v29 + 51);
              if (v76)
              {
                v77 = *(_QWORD *)(v76 + 24);
                if (v77)
                {
                  v78 = *(void (**)(void))(v77 + 160);
                  if (v78)
                    v78();
                }
              }

              goto LABEL_117;
            }
            v116 = v29;
            v100 = (__int16)logging_description;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v32 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v27);
              v113 = nw_endpoint_handler_dry_run_string(v27);
              v102 = nw_endpoint_handler_copy_endpoint(v27);
              logging_description = (char *)nw_endpoint_get_logging_description(v102);
              v103 = nw_endpoint_handler_state_string(v27);
              v104 = nw_endpoint_handler_mode_string(v27);
              v105 = nw_endpoint_handler_copy_current_path(v27);
              *(_DWORD *)v134 = 136447746;
              *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(_QWORD *)&v134[14] = id_string;
              *(_WORD *)&v134[22] = 2082;
              v135 = v113;
              *(_WORD *)v136 = 2082;
              *(_QWORD *)&v136[2] = logging_description;
              *(_WORD *)&v136[10] = 2082;
              *(_QWORD *)&v136[12] = v103;
              v137 = 2082;
              v138 = v104;
              v139 = 2114;
              v140 = v105;
              _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Reporting data stall to protocols", v134, 0x48u);

              v29 = v116;
              LOWORD(logging_description) = v100;

            }
          }
          else
          {
            v30 = v27;
            v31 = *((_BYTE *)v30 + 268);

            if ((v31 & 0x20) != 0)
              goto LABEL_100;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v32 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              v115 = v29;
              v33 = v30;

              v34 = v33;
              v35 = *((_BYTE *)v30 + 268);

              if ((v35 & 1) != 0)
                v36 = "dry-run ";
              else
                v36 = "";
              v37 = nw_endpoint_handler_copy_endpoint(v34);
              v38 = nw_endpoint_get_logging_description(v37);
              id_str = v33->id_str;
              v40 = v34;
              v41 = v40;
              v42 = v40[30];
              if (v42 > 5)
                v43 = "unknown-state";
              else
                v43 = off_1E149FC48[v42];
              v112 = v43;

              v66 = v41;
              v67 = v66;
              v114 = (__int16)logging_description;
              v68 = "path";
              switch(v27->mode)
              {
                case 0:
                  break;
                case 1:
                  v68 = "resolver";
                  break;
                case 2:
                  v68 = nw_endpoint_flow_mode_string(v66[31]);
                  break;
                case 3:
                  v68 = "proxy";
                  break;
                case 4:
                  v68 = "fallback";
                  break;
                case 5:
                  v68 = "transform";
                  break;
                default:
                  v68 = "unknown-mode";
                  break;
              }

              logging_description = v67;
              os_unfair_lock_lock((os_unfair_lock_t)logging_description + 28);
              v75 = *((id *)logging_description + 8);
              os_unfair_lock_unlock((os_unfair_lock_t)logging_description + 28);

              *(_DWORD *)v134 = 136447746;
              *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(_QWORD *)&v134[14] = id_str;
              *(_WORD *)&v134[22] = 2082;
              v135 = v36;
              *(_WORD *)v136 = 2082;
              *(_QWORD *)&v136[2] = v38;
              *(_WORD *)&v136[10] = 2082;
              *(_QWORD *)&v136[12] = v112;
              v137 = 2082;
              v138 = v68;
              v139 = 2114;
              v140 = v75;
              _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Reporting data stall to protocols", v134, 0x48u);

              LOWORD(logging_description) = v114;
              v29 = v115;

            }
          }

          v4 = MEMORY[0x1E0C809B0];
          goto LABEL_100;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v45 = (id)gLogObj;
        if (mode > 5)
          v46 = "unknown-mode";
        else
          v46 = off_1E149FC18[mode];
        *(_DWORD *)v134 = 136446722;
        *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
        *(_WORD *)&v134[12] = 2082;
        *(_QWORD *)&v134[14] = v46;
        *(_WORD *)&v134[22] = 2082;
        v135 = "flow";
        v56 = (char *)_os_log_send_and_compose_impl();

        v132[0] = 16;
        buf[0] = 0;
        if (__nwlog_fault(v56, v132, buf))
        {
          if (v132[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v57 = (id)gLogObj;
            v58 = v132[0];
            if (os_log_type_enabled(v57, (os_log_type_t)v132[0]))
            {
              if (mode > 5)
                v59 = "unknown-mode";
              else
                v59 = off_1E149FC18[mode];
              *(_DWORD *)v134 = 136446722;
              *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(_QWORD *)&v134[14] = v59;
              *(_WORD *)&v134[22] = 2082;
              v135 = "flow";
              _os_log_impl(&dword_182FBE000, v57, v58, "%{public}s Handler is in mode %{public}s, expected %{public}s", v134, 0x20u);
            }
          }
          else if (buf[0])
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v57 = (id)gLogObj;
            v61 = v132[0];
            v62 = os_log_type_enabled(v57, (os_log_type_t)v132[0]);
            if (backtrace_string)
            {
              if (v62)
              {
                if (mode > 5)
                  v63 = "unknown-mode";
                else
                  v63 = off_1E149FC18[mode];
                *(_DWORD *)v134 = 136446978;
                *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
                *(_WORD *)&v134[12] = 2082;
                *(_QWORD *)&v134[14] = v63;
                *(_WORD *)&v134[22] = 2082;
                v135 = "flow";
                *(_WORD *)v136 = 2082;
                *(_QWORD *)&v136[2] = backtrace_string;
                _os_log_impl(&dword_182FBE000, v57, v61, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", v134, 0x2Au);
              }

              free(backtrace_string);
              if (!v56)
                goto LABEL_117;
              goto LABEL_116;
            }
            if (v62)
            {
              if (mode > 5)
                v74 = "unknown-mode";
              else
                v74 = off_1E149FC18[mode];
              *(_DWORD *)v134 = 136446722;
              *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(_QWORD *)&v134[14] = v74;
              *(_WORD *)&v134[22] = 2082;
              v135 = "flow";
              _os_log_impl(&dword_182FBE000, v57, v61, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", v134, 0x20u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v57 = (id)gLogObj;
            v72 = v132[0];
            if (os_log_type_enabled(v57, (os_log_type_t)v132[0]))
            {
              if (mode > 5)
                v73 = "unknown-mode";
              else
                v73 = off_1E149FC18[mode];
              *(_DWORD *)v134 = 136446722;
              *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
              *(_WORD *)&v134[12] = 2082;
              *(_QWORD *)&v134[14] = v73;
              *(_WORD *)&v134[22] = 2082;
              v135 = "flow";
              _os_log_impl(&dword_182FBE000, v57, v72, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", v134, 0x20u);
            }
          }

        }
        if (!v56)
        {
LABEL_117:
          v79 = v117;
          goto LABEL_118;
        }
LABEL_116:
        free(v56);
        goto LABEL_117;
      }
      v79 = 0;
      __nwlog_obj();
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v134 = 136446210;
      *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
      v91 = (char *)_os_log_send_and_compose_impl();

      v132[0] = 16;
      buf[0] = 0;
      if (!__nwlog_fault(v91, v132, buf))
        goto LABEL_181;
      if (v132[0] == 17)
      {
        __nwlog_obj();
        v92 = objc_claimAutoreleasedReturnValue();
        v93 = v132[0];
        if (os_log_type_enabled(v92, (os_log_type_t)v132[0]))
        {
          *(_DWORD *)v134 = 136446210;
          *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
          _os_log_impl(&dword_182FBE000, v92, v93, "%{public}s called with null handler", v134, 0xCu);
        }
LABEL_180:

        goto LABEL_181;
      }
      if (!buf[0])
      {
        __nwlog_obj();
        v92 = objc_claimAutoreleasedReturnValue();
        v111 = v132[0];
        if (os_log_type_enabled(v92, (os_log_type_t)v132[0]))
        {
          *(_DWORD *)v134 = 136446210;
          *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
          _os_log_impl(&dword_182FBE000, v92, v111, "%{public}s called with null handler, backtrace limit exceeded", v134, 0xCu);
        }
        goto LABEL_180;
      }
      v106 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v92 = objc_claimAutoreleasedReturnValue();
      v107 = v132[0];
      v108 = os_log_type_enabled(v92, (os_log_type_t)v132[0]);
      if (!v106)
      {
        if (v108)
        {
          *(_DWORD *)v134 = 136446210;
          *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
          _os_log_impl(&dword_182FBE000, v92, v107, "%{public}s called with null handler, no backtrace", v134, 0xCu);
        }
        goto LABEL_180;
      }
      if (v108)
      {
        *(_DWORD *)v134 = 136446466;
        *(_QWORD *)&v134[4] = "nw_endpoint_handler_report_data_stall";
        *(_WORD *)&v134[12] = 2082;
        *(_QWORD *)&v134[14] = v106;
        _os_log_impl(&dword_182FBE000, v92, v107, "%{public}s called with null handler, dumping backtrace:%{public}s", v134, 0x16u);
      }

      free(v106);
LABEL_181:
      if (v91)
        free(v91);
LABEL_118:

      LOWORD(v23) = -1;
      v2 = v118;
LABEL_119:
      v5 = &unk_183BA7000;
LABEL_120:
      v80 = *(os_unfair_lock_s **)(a1 + 32);
      v81 = v80 + 34;
      v119[0] = v4;
      v119[1] = v5[190];
      v119[2] = ___ZL39nw_connection_add_client_event_internalP24NWConcrete_nw_connection26nw_endpoint_client_event_tPU24objcproto13OS_xpc_object8NSObjectPU25objcproto14OS_nw_activityS2__block_invoke_119;
      v119[3] = &unk_1E14AB088;
      v120 = v80;
      v121 = v2;
      v122 = 6;
      v123 = (__int16)logging_description;
      v124 = v23;
      v125 = 0;
      os_unfair_lock_lock(v81);
      ___ZL39nw_connection_add_client_event_internalP24NWConcrete_nw_connection26nw_endpoint_client_event_tPU24objcproto13OS_xpc_object8NSObjectPU25objcproto14OS_nw_activityS2__block_invoke_119((uint64_t)v119);
      os_unfair_lock_unlock(v81);

      return;
    case 3:
      v19 = *(void **)(*(_QWORD *)(a1 + 32) + 144);
      v20 = 1;
LABEL_17:
      nw_endpoint_handler_report_connection_idle(v19, v20);
      LOWORD(v23) = -1;
      goto LABEL_120;
    case 4:
    case 5:
      v6 = *(void **)(a1 + 48);
      if (!v6)
      {
        __nwlog_obj();
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v134 = 136446210;
        *(_QWORD *)&v134[4] = "nw_connection_add_client_event_internal_block_invoke";
        v83 = (char *)_os_log_send_and_compose_impl();

        v132[0] = 16;
        buf[0] = 0;
        if (__nwlog_fault(v83, v132, buf))
        {
          if (v132[0] == 17)
          {
            __nwlog_obj();
            v84 = objc_claimAutoreleasedReturnValue();
            v85 = v132[0];
            if (os_log_type_enabled(v84, (os_log_type_t)v132[0]))
            {
              *(_DWORD *)v134 = 136446210;
              *(_QWORD *)&v134[4] = "nw_connection_add_client_event_internal_block_invoke";
              _os_log_impl(&dword_182FBE000, v84, v85, "%{public}s called with null activity", v134, 0xCu);
            }
          }
          else if (buf[0])
          {
            v94 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v84 = objc_claimAutoreleasedReturnValue();
            v95 = v132[0];
            v96 = os_log_type_enabled(v84, (os_log_type_t)v132[0]);
            if (v94)
            {
              if (v96)
              {
                *(_DWORD *)v134 = 136446466;
                *(_QWORD *)&v134[4] = "nw_connection_add_client_event_internal_block_invoke";
                *(_WORD *)&v134[12] = 2082;
                *(_QWORD *)&v134[14] = v94;
                _os_log_impl(&dword_182FBE000, v84, v95, "%{public}s called with null activity, dumping backtrace:%{public}s", v134, 0x16u);
              }

              free(v94);
              goto LABEL_167;
            }
            if (v96)
            {
              *(_DWORD *)v134 = 136446210;
              *(_QWORD *)&v134[4] = "nw_connection_add_client_event_internal_block_invoke";
              _os_log_impl(&dword_182FBE000, v84, v95, "%{public}s called with null activity, no backtrace", v134, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v84 = objc_claimAutoreleasedReturnValue();
            v109 = v132[0];
            if (os_log_type_enabled(v84, (os_log_type_t)v132[0]))
            {
              *(_DWORD *)v134 = 136446210;
              *(_QWORD *)&v134[4] = "nw_connection_add_client_event_internal_block_invoke";
              _os_log_impl(&dword_182FBE000, v84, v109, "%{public}s called with null activity, backtrace limit exceeded", v134, 0xCu);
            }
          }

        }
LABEL_167:
        if (v83)
          free(v83);
        return;
      }
      v7 = *(id *)(a1 + 32);
      v8 = v6;
      if (!v7)
      {
        __nwlog_obj();
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v132 = 136446210;
        *(_QWORD *)&v132[4] = "nw_connection_add_activity_on_nw_queue";
        v87 = (char *)_os_log_send_and_compose_impl();

        buf[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v87, buf, &type))
        {
          if (buf[0] == 17)
          {
            __nwlog_obj();
            v88 = objc_claimAutoreleasedReturnValue();
            v89 = buf[0];
            if (os_log_type_enabled(v88, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)v132 = 136446210;
              *(_QWORD *)&v132[4] = "nw_connection_add_activity_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v88, v89, "%{public}s called with null connection", v132, 0xCu);
            }
          }
          else if (type)
          {
            v97 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v88 = objc_claimAutoreleasedReturnValue();
            v98 = buf[0];
            v99 = os_log_type_enabled(v88, (os_log_type_t)buf[0]);
            if (v97)
            {
              if (v99)
              {
                *(_DWORD *)v132 = 136446466;
                *(_QWORD *)&v132[4] = "nw_connection_add_activity_on_nw_queue";
                *(_WORD *)&v132[12] = 2082;
                *(_QWORD *)&v132[14] = v97;
                _os_log_impl(&dword_182FBE000, v88, v98, "%{public}s called with null connection, dumping backtrace:%{public}s", v132, 0x16u);
              }

              free(v97);
              goto LABEL_172;
            }
            if (v99)
            {
              *(_DWORD *)v132 = 136446210;
              *(_QWORD *)&v132[4] = "nw_connection_add_activity_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v88, v98, "%{public}s called with null connection, no backtrace", v132, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v88 = objc_claimAutoreleasedReturnValue();
            v110 = buf[0];
            if (os_log_type_enabled(v88, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)v132 = 136446210;
              *(_QWORD *)&v132[4] = "nw_connection_add_activity_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v88, v110, "%{public}s called with null connection, backtrace limit exceeded", v132, 0xCu);
            }
          }

        }
LABEL_172:
        if (v87)
          free(v87);

        LOWORD(v23) = 255;
        goto LABEL_119;
      }
      nw_context_assert_queue(*((void **)v7 + 3));
      v9 = (unsigned __int8 *)*((_QWORD *)v7 + 49);
      if (!v9)
      {
        v10 = nw_array_create();
        v11 = (void *)*((_QWORD *)v7 + 49);
        *((_QWORD *)v7 + 49) = v10;

        v9 = (unsigned __int8 *)*((_QWORD *)v7 + 49);
      }
      *(_QWORD *)v132 = 0;
      *(_QWORD *)&v132[8] = v132;
      *(_QWORD *)&v132[16] = 0x2020000000;
      v133 = -1;
      *(_QWORD *)v134 = v4;
      *(_QWORD *)&v134[8] = 3221225472;
      *(_QWORD *)&v134[16] = ___ZL38nw_connection_add_activity_on_nw_queueP24NWConcrete_nw_connectionPU25objcproto14OS_nw_activity8NSObjectb_block_invoke;
      v135 = (const char *)&unk_1E14AB5F0;
      v12 = (char *)v8;
      *(_QWORD *)v136 = v12;
      *(_QWORD *)&v136[8] = v132;
      nw_array_apply(v9, (uint64_t)v134);
      v13 = *(unsigned __int16 *)(*(_QWORD *)&v132[8] + 24);
      if ((_DWORD)logging_description != 4 && v13 == 0xFFFF)
      {
        v14 = v4;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v129 = "nw_connection_add_activity_on_nw_queue";
        v16 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v126 = 0;
        if (__nwlog_fault(v16, &type, &v126))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v17 = (id)gLogObj;
            v18 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v129 = "nw_connection_add_activity_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot end an activity that was not started", buf, 0xCu);
            }
          }
          else if (v126)
          {
            v47 = __nw_create_backtrace_string();
            if (v47)
            {
              v48 = (char *)v47;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v49 = (id)gLogObj;
              v50 = type;
              if (os_log_type_enabled(v49, type))
              {
                *(_DWORD *)buf = 136446466;
                v129 = "nw_connection_add_activity_on_nw_queue";
                v130 = 2082;
                v131 = v48;
                _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot end an activity that was not started, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v48);
              if (!v16)
                goto LABEL_79;
              goto LABEL_78;
            }
            __nwlog_obj();
            v17 = objc_claimAutoreleasedReturnValue();
            v69 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v129 = "nw_connection_add_activity_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v17, v69, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot end an activity that was not started, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v17 = (id)gLogObj;
            v64 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v129 = "nw_connection_add_activity_on_nw_queue";
              _os_log_impl(&dword_182FBE000, v17, v64, "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot end an activity that was not started, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v16)
        {
LABEL_79:
          v23 = 255;
          goto LABEL_80;
        }
LABEL_78:
        free(v16);
        goto LABEL_79;
      }
      v14 = v4;
      if (v13 != 0xFFFF)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (id)gLogObj;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v129 = "nw_connection_add_activity_on_nw_queue";
          v130 = 2114;
          v131 = v12;
          _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Activity %{public}@ is already present, not adding to connection array", buf, 0x16u);
        }

        v23 = *(unsigned __int16 *)(*(_QWORD *)&v132[8] + 24);
        goto LABEL_80;
      }
      v51 = v12;
      v52 = (v51[17] & 1) == 0;

      if (!v52)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v53 = (id)gLogObj;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v129 = "nw_connection_add_activity_on_nw_queue";
          v130 = 2114;
          v131 = v51;
          _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_DEBUG, "%{public}s Activity %{public}@ selected, connection will report activity metrics", buf, 0x16u);
        }

        *((_BYTE *)v7 + 108) |= 0x20u;
      }
      v54 = *((_QWORD *)v7 + 49);
      if (!v54)
      {
        LOWORD(v65) = 0;
LABEL_73:
        nw_array_append(v54, v51);
        v23 = (unsigned __int16)v65;
        goto LABEL_80;
      }
      v55 = *(_QWORD *)(v54 + 24) - *(_QWORD *)(v54 + 16);
      if ((unint64_t)v55 <= 0x7FFF0)
      {
        v65 = v55 >> 3;
        goto LABEL_73;
      }
      v23 = 0xFFFF;
LABEL_80:

      _Block_object_dispose(v132, 8);
      v4 = v14;
      v5 = (_QWORD *)&unk_183BA7000;
      if (v23 != 0xFFFF)
        goto LABEL_120;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v70 = (id)gLogObj;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        v71 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)v134 = 136446466;
        *(_QWORD *)&v134[4] = "nw_connection_add_client_event_internal_block_invoke";
        *(_WORD *)&v134[12] = 2114;
        *(_QWORD *)&v134[14] = v71;
        _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_ERROR, "%{public}s Cannot add activity %{public}@, nw_connection_add_activity_on_nw_queue failed", v134, 0x16u);
      }

      return;
    default:
      LOWORD(v23) = -1;
      goto LABEL_120;
  }
}

void sub_183AA5FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_connection_add_activity_on_nw_queueP24NWConcrete_nw_connectionPU25objcproto14OS_nw_activity8NSObjectb_block_invoke(uint64_t a1, __int16 a2, void *a3)
{
  int is_equal;

  is_equal = nw_activity_is_equal(*(void **)(a1 + 32), a3);
  if (is_equal)
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return is_equal ^ 1u;
}

void ___ZL39nw_connection_add_client_event_internalP24NWConcrete_nw_connection26nw_endpoint_client_event_tPU24objcproto13OS_xpc_object8NSObjectPU25objcproto14OS_nw_activityS2__block_invoke_119(uint64_t a1)
{
  nw_connection_add_timestamp_locked_on_nw_queue(*(void **)(a1 + 32), (_OWORD *)(a1 + 40));
}

id nw_connection_copy_attempted_endpoint_array(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v19 = __Block_byref_object_copy__78229;
    v20 = __Block_byref_object_dispose__78230;
    v21 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_copy_attempted_endpoint_array_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v14 = v1;
    v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_attempted_endpoint_array_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_attempted_endpoint_array";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_attempted_endpoint_array";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_attempted_endpoint_array";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_attempted_endpoint_array";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_attempted_endpoint_array";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_copy_attempted_endpoint_array_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328);
  if (v1)
  {
    v3 = nw_array_create();
    if (v3 != v1)
    {
      v4 = v3;
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v3 + 16, *(void ***)(v1 + 16), *(void ***)(v1 + 24), (uint64_t)(*(_QWORD *)(v1 + 24) - *(_QWORD *)(v1 + 16)) >> 3);
      v1 = v4;
    }
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v1;

  }
}

void sub_183AA81D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;

  a10.super_class = (Class)NWConcrete_nw_agent_client;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_183AA88B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_agent_get_next_id(void)
{
  unsigned int v0;
  uint64_t result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  do
    v0 = __ldaxr((unsigned int *)&nw_agent_get_next_id(void)::s_last_id);
  while (__stlxr(v0 + 1, (unsigned int *)&nw_agent_get_next_id(void)::s_last_id));
  result = v0 + 1;
  if (v0 == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = 136446466;
      v4 = "nw_agent_get_next_id";
      v5 = 1024;
      v6 = 0;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_ERROR, "%{public}s reached %u agent ids, wrapping", (uint8_t *)&v3, 0x12u);
    }

    return nw_agent_get_next_id();
  }
  return result;
}

uint64_t nw_agent_client_get_next_id(unsigned int *a1)
{
  unsigned int v2;
  uint64_t result;
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  do
  {
    v2 = __ldaxr(a1);
    LODWORD(result) = v2 + 1;
  }
  while (__stlxr(v2 + 1, a1));
  if (result >= 0x100 && (_BYTE)v2 == 0xFF)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446210;
      v6 = "nw_agent_client_get_next_id";
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s reached maximum agent clients, wrapping", (uint8_t *)&v5, 0xCu);
    }

    LOBYTE(result) = nw_agent_client_get_next_id(a1);
  }
  return result;
}

id nw_agent_client_copy_advertise_descriptor(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[7];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_agent_client_copy_advertise_descriptor";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_agent_client_copy_advertise_descriptor";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null client, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_agent_client_copy_browse_descriptor(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[8];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_agent_client_copy_browse_descriptor";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_browse_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_agent_client_copy_browse_descriptor";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_browse_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_browse_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null client, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_agent_client_copy_group_descriptor(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[9];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_agent_client_copy_group_descriptor";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_group_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_agent_client_copy_group_descriptor";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_group_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_client_copy_group_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null client, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_agent_send_error_response(void *a1, void *a2, void *a3)
{
  NWConcrete_nw_agent *v5;
  unsigned __int8 *v6;
  id v7;
  void *v8;
  NSObject *v9;
  int error_code;
  char error_domain;
  char *v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _BOOL8 result;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  _BOOL4 v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  os_log_type_t v41;
  os_log_type_t v42;
  os_log_type_t v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_agent_send_error_response";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v17, &type, &v44))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null agent", buf, 0xCu);
      }
      goto LABEL_70;
    }
    if (!v44)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_182FBE000, v18, v40, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_70;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v31 = type;
    v32 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_182FBE000, v18, v31, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
      goto LABEL_70;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_agent_send_error_response";
      v48 = 2082;
      v49 = (uint64_t)backtrace_string;
      _os_log_impl(&dword_182FBE000, v18, v31, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_71;
  }
  if (!v6)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_agent_send_error_response";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v17, &type, &v44))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null client", buf, 0xCu);
      }
      goto LABEL_70;
    }
    if (!v44)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_182FBE000, v18, v41, "%{public}s called with null client, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_70;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    v34 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_182FBE000, v18, v33, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
      goto LABEL_70;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_agent_send_error_response";
      v48 = 2082;
      v49 = (uint64_t)backtrace_string;
      _os_log_impl(&dword_182FBE000, v18, v33, "%{public}s called with null client, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (!v7)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_agent_send_error_response";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v17, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_agent_send_error_response";
          _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null error", buf, 0xCu);
        }
LABEL_70:

        goto LABEL_71;
      }
      if (!v44)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_agent_send_error_response";
          _os_log_impl(&dword_182FBE000, v18, v42, "%{public}s called with null error, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_70;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_agent_send_error_response";
          _os_log_impl(&dword_182FBE000, v18, v35, "%{public}s called with null error, no backtrace", buf, 0xCu);
        }
        goto LABEL_70;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_agent_send_error_response";
        v48 = 2082;
        v49 = (uint64_t)backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v35, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_44;
    }
LABEL_71:
    if (v17)
      free(v17);
    v14 = 0;
    goto LABEL_8;
  }
  v9 = v7;
  error_code = nw_error_get_error_code(v9);
  error_domain = nw_error_get_error_domain(v9);
  v12 = (char *)malloc_type_calloc(1uLL, 0xDuLL, 0xEAFB8F1AuLL);
  v13 = (unsigned __int8 *)v12;
  if (v12)
  {
    *v12 = -40;
    *(_DWORD *)(v12 + 1) = 8;
    *(_DWORD *)(v12 + 5) = error_code;
    v12[9] = error_domain;
    v12[12] = 0;
    *((_WORD *)v12 + 5) = 0;
LABEL_6:

    v14 = nw_agent_assign(v5, v13, 0xDuLL, v6 + 8, 0);
    if (v13)
      free(v13);
LABEL_8:

    return v14;
  }
  __nwlog_obj();
  v24 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v47 = "strict_calloc";
  v48 = 2048;
  v49 = 1;
  v50 = 2048;
  v51 = 13;
  v25 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v25);
  if (!result)
  {
    free(v25);
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_necp_append_tlv";
    v27 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v27, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null tlv_start", buf, 0xCu);
        }
      }
      else if (v44)
      {
        v37 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        v39 = os_log_type_enabled(v28, type);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v47 = "nw_necp_append_tlv";
            v48 = 2082;
            v49 = (uint64_t)v37;
            _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_77;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v28, v38, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v28, v43, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_77:
    if (v27)
      free(v27);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void sub_183AA9F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_agent_assign(NWConcrete_nw_agent *a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, char a5)
{
  NWConcrete_nw_agent *v9;
  id v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  _OWORD *v14;
  void *v15;
  uint64_t fd;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char *v21;
  _BOOL8 result;
  void *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  NSObject *v27;
  void *v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _QWORD v33[6];
  char v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (!v9)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_agent_assign";
    v24 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v24, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_agent_assign";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null agent", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v31 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_agent_assign";
            v39 = 2082;
            v40 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_agent_assign";
          _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null agent, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_agent_assign";
          _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_47:
    if (!v24)
      goto LABEL_27;
    v21 = (char *)v24;
    goto LABEL_26;
  }
  if (a3 >= 0xFFFFFFF0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v38 = "nw_agent_assign";
    v39 = 2048;
    v40 = a3;
    v11 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v11, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_agent_assign";
          v39 = 2048;
          v40 = a3;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s Invalid data length (%zu)", buf, 0x16u);
        }
      }
      else if (v35)
      {
        v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v18 = type;
        v19 = os_log_type_enabled(v12, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446722;
            v38 = "nw_agent_assign";
            v39 = 2048;
            v40 = a3;
            v41 = 2082;
            v42 = v17;
            _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s Invalid data length (%zu), dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v17);
          if (!v11)
            goto LABEL_27;
LABEL_25:
          v21 = (char *)v11;
LABEL_26:
          free(v21);
          goto LABEL_27;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_agent_assign";
          v39 = 2048;
          v40 = a3;
          _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s Invalid data length (%zu), no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_agent_assign";
          v39 = 2048;
          v40 = a3;
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s Invalid data length (%zu), backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
    if (!v11)
    {
LABEL_27:
      fd = 0;
LABEL_28:

      return fd;
    }
    goto LABEL_25;
  }
  v14 = malloc_type_calloc(1uLL, a3 + 16, 0xEAFB8F1AuLL);
  if (v14)
  {
LABEL_9:
    *v14 = *(_OWORD *)a4;
    if (a3)
      memcpy(v14 + 1, a2, a3);
    v15 = (void *)*((_QWORD *)v9 + 105);
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = ___ZL15nw_agent_assignP19NWConcrete_nw_agentPhmS1_b_block_invoke;
    v33[3] = &__block_descriptor_49_e8_B12__0i8l;
    v34 = a5;
    v33[4] = v14;
    v33[5] = a3 + 16;
    fd = nw_fd_wrapper_get_fd(v15, v33);
    free(v14);
    goto LABEL_28;
  }
  __nwlog_obj();
  v27 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v38 = "strict_calloc";
  v39 = 2048;
  v40 = 1;
  v41 = 2048;
  v42 = (char *)(a3 + 16);
  v28 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v28);
  if (!result)
  {
    free(v28);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_183AAA604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL15nw_agent_assignP19NWConcrete_nw_agentPhmS1_b_block_invoke(uint64_t a1, int a2)
{
  int v3;

  if (*(_BYTE *)(a1 + 48))
    v3 = 20;
  else
    v3 = 11;
  return nw_network_agent_ctl_setsockopt_inner(a2, v3, *(const unsigned __int8 **)(a1 + 32), *(_DWORD *)(a1 + 40), 0, 0) == 0;
}

BOOL nw_agent_send_group_member_update(void *a1, void *a2, void *a3)
{
  NWConcrete_nw_agent *v5;
  unsigned __int8 *v6;
  _BOOL8 v7;
  _BOOL8 v8;
  unint64_t v10;

  v5 = a1;
  v6 = a2;
  v10 = 0;
  v7 = nw_path_create_endpoint_array_result(&v10, a3, 213);
  v8 = nw_agent_assign(v5, (unsigned __int8 *)v7, v10, v6 + 8, 1);
  if (v7)
    free((void *)v7);

  return v8;
}

void sub_183AAA6F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_agent *nw_agent_create(const char *a1, const char *a2, const char *a3, void *a4)
{
  NSObject *v8;
  NSObject *v9;
  NWConcrete_nw_agent *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  _BYTE *v75;
  uint64_t v76;
  int v77;
  _DWORD *v78;
  NSObject *v79;
  uint64_t v80;
  _DWORD *v81;
  NSObject *v82;
  void *v83;
  NSObject *v84;
  NWConcrete_nw_agent *v85;
  void *v87;
  char *v88;
  NSObject *v89;
  os_log_type_t v90;
  void *v91;
  os_log_type_t v92;
  void *v93;
  os_log_type_t v94;
  void *v95;
  os_log_type_t v96;
  void *v97;
  os_log_type_t v98;
  void *v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  void *v103;
  os_log_type_t v104;
  void *v105;
  os_log_type_t v106;
  char *backtrace_string;
  os_log_type_t v108;
  _BOOL4 v109;
  os_log_type_t v110;
  _BOOL4 v111;
  os_log_type_t v112;
  _BOOL4 v113;
  os_log_type_t v114;
  _BOOL4 v115;
  os_log_type_t v116;
  _BOOL4 v117;
  char *v118;
  os_log_type_t v119;
  _BOOL4 v120;
  os_log_type_t v121;
  _BOOL4 v122;
  char *v123;
  os_log_type_t v124;
  _BOOL4 v125;
  os_log_type_t v126;
  os_log_type_t v127;
  os_log_type_t v128;
  os_log_type_t v129;
  os_log_type_t v130;
  os_log_type_t v131;
  os_log_type_t v132;
  os_log_type_t v133;
  _QWORD v134[4];
  NSObject *v135;
  id v136;
  _QWORD handler[4];
  id v138;
  char v139;
  os_log_type_t type;
  _BYTE location[12];
  __int16 v142;
  char *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = v8;
  if (!a1)
  {
    __nwlog_obj();
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(_QWORD *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v139 = 0;
    if (!__nwlog_fault(v88, &type, &v139))
      goto LABEL_214;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v90 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v90, "%{public}s called with null domain", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (!v139)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v126 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v126, "%{public}s called with null domain, backtrace limit exceeded", location, 0xCu);
      }
      goto LABEL_213;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v89 = objc_claimAutoreleasedReturnValue();
    v108 = type;
    v109 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v109)
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v108, "%{public}s called with null domain, no backtrace", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (v109)
    {
      *(_DWORD *)location = 136446466;
      *(_QWORD *)&location[4] = "nw_agent_create";
      v142 = 2082;
      v143 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v89, v108, "%{public}s called with null domain, dumping backtrace:%{public}s", location, 0x16u);
    }
    goto LABEL_146;
  }
  if (!a2)
  {
    __nwlog_obj();
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(_QWORD *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v139 = 0;
    if (!__nwlog_fault(v88, &type, &v139))
      goto LABEL_214;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v92 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v92, "%{public}s called with null type", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (!v139)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v127 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v127, "%{public}s called with null type, backtrace limit exceeded", location, 0xCu);
      }
      goto LABEL_213;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v89 = objc_claimAutoreleasedReturnValue();
    v110 = type;
    v111 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v111)
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v110, "%{public}s called with null type, no backtrace", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (v111)
    {
      *(_DWORD *)location = 136446466;
      *(_QWORD *)&location[4] = "nw_agent_create";
      v142 = 2082;
      v143 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v89, v110, "%{public}s called with null type, dumping backtrace:%{public}s", location, 0x16u);
    }
    goto LABEL_146;
  }
  if (!v8)
  {
    __nwlog_obj();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(_QWORD *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v139 = 0;
    if (!__nwlog_fault(v88, &type, &v139))
      goto LABEL_214;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v94 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v94, "%{public}s called with null queue", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (!v139)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v128 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v128, "%{public}s called with null queue, backtrace limit exceeded", location, 0xCu);
      }
      goto LABEL_213;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v89 = objc_claimAutoreleasedReturnValue();
    v112 = type;
    v113 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v113)
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v112, "%{public}s called with null queue, no backtrace", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (v113)
    {
      *(_DWORD *)location = 136446466;
      *(_QWORD *)&location[4] = "nw_agent_create";
      v142 = 2082;
      v143 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v89, v112, "%{public}s called with null queue, dumping backtrace:%{public}s", location, 0x16u);
    }
    goto LABEL_146;
  }
  if (strlen(a1) >= 0x20)
  {
    __nwlog_obj();
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(_QWORD *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v139 = 0;
    if (!__nwlog_fault(v88, &type, &v139))
      goto LABEL_214;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v96 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v96, "%{public}s called with null (strlen(domain) < 32)", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (!v139)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v129 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v129, "%{public}s called with null (strlen(domain) < 32), backtrace limit exceeded", location, 0xCu);
      }
      goto LABEL_213;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v89 = objc_claimAutoreleasedReturnValue();
    v114 = type;
    v115 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v115)
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v114, "%{public}s called with null (strlen(domain) < 32), no backtrace", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (v115)
    {
      *(_DWORD *)location = 136446466;
      *(_QWORD *)&location[4] = "nw_agent_create";
      v142 = 2082;
      v143 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v89, v114, "%{public}s called with null (strlen(domain) < 32), dumping backtrace:%{public}s", location, 0x16u);
    }
    goto LABEL_146;
  }
  if (strlen(a2) >= 0x20)
  {
    __nwlog_obj();
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(_QWORD *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v139 = 0;
    if (!__nwlog_fault(v88, &type, &v139))
      goto LABEL_214;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v98 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v98, "%{public}s called with null (strlen(type) < 32)", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (!v139)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v130 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v130, "%{public}s called with null (strlen(type) < 32), backtrace limit exceeded", location, 0xCu);
      }
      goto LABEL_213;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v89 = objc_claimAutoreleasedReturnValue();
    v116 = type;
    v117 = os_log_type_enabled(v89, type);
    if (!backtrace_string)
    {
      if (v117)
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v116, "%{public}s called with null (strlen(type) < 32), no backtrace", location, 0xCu);
      }
      goto LABEL_213;
    }
    if (v117)
    {
      *(_DWORD *)location = 136446466;
      *(_QWORD *)&location[4] = "nw_agent_create";
      v142 = 2082;
      v143 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v89, v116, "%{public}s called with null (strlen(type) < 32), dumping backtrace:%{public}s", location, 0x16u);
    }
LABEL_146:

    free(backtrace_string);
    if (!v88)
      goto LABEL_216;
    goto LABEL_215;
  }
  if (a3 && strlen(a3) >= 0x80)
  {
    __nwlog_obj();
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(_QWORD *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v139 = 0;
    if (!__nwlog_fault(v88, &type, &v139))
      goto LABEL_214;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v106 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v106, "%{public}s called with null (strlen(description) < 128)", location, 0xCu);
      }
    }
    else if (v139)
    {
      v123 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v124 = type;
      v125 = os_log_type_enabled(v89, type);
      if (v123)
      {
        if (v125)
        {
          *(_DWORD *)location = 136446466;
          *(_QWORD *)&location[4] = "nw_agent_create";
          v142 = 2082;
          v143 = v123;
          _os_log_impl(&dword_182FBE000, v89, v124, "%{public}s called with null (strlen(description) < 128), dumping backtrace:%{public}s", location, 0x16u);
        }

        free(v123);
LABEL_214:
        if (!v88)
        {
LABEL_216:
          v85 = 0;
          goto LABEL_81;
        }
LABEL_215:
        free(v88);
        goto LABEL_216;
      }
      if (v125)
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v124, "%{public}s called with null (strlen(description) < 128), no backtrace", location, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v89 = objc_claimAutoreleasedReturnValue();
      v133 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_agent_create";
        _os_log_impl(&dword_182FBE000, v89, v133, "%{public}s called with null (strlen(description) < 128), backtrace limit exceeded", location, 0xCu);
      }
    }
LABEL_213:

    goto LABEL_214;
  }
  v10 = objc_alloc_init(NWConcrete_nw_agent);
  if (v10)
  {
    v11 = nw_network_agent_open_control_socket();
    if ((v11 & 0x80000000) == 0)
    {
      v12 = v11;
      v13 = *(unsigned __int8 *)a1;
      *((_BYTE *)v10 + 20) = v13;
      if (v13)
      {
        v14 = *((unsigned __int8 *)a1 + 1);
        *((_BYTE *)v10 + 21) = v14;
        if (v14)
        {
          v15 = *((unsigned __int8 *)a1 + 2);
          *((_BYTE *)v10 + 22) = v15;
          if (v15)
          {
            v16 = *((unsigned __int8 *)a1 + 3);
            *((_BYTE *)v10 + 23) = v16;
            if (v16)
            {
              v17 = *((unsigned __int8 *)a1 + 4);
              *((_BYTE *)v10 + 24) = v17;
              if (v17)
              {
                v18 = *((unsigned __int8 *)a1 + 5);
                *((_BYTE *)v10 + 25) = v18;
                if (v18)
                {
                  v19 = *((unsigned __int8 *)a1 + 6);
                  *((_BYTE *)v10 + 26) = v19;
                  if (v19)
                  {
                    v20 = *((unsigned __int8 *)a1 + 7);
                    *((_BYTE *)v10 + 27) = v20;
                    if (v20)
                    {
                      v21 = *((unsigned __int8 *)a1 + 8);
                      *((_BYTE *)v10 + 28) = v21;
                      if (v21)
                      {
                        v22 = *((unsigned __int8 *)a1 + 9);
                        *((_BYTE *)v10 + 29) = v22;
                        if (v22)
                        {
                          v23 = *((unsigned __int8 *)a1 + 10);
                          *((_BYTE *)v10 + 30) = v23;
                          if (v23)
                          {
                            v24 = *((unsigned __int8 *)a1 + 11);
                            *((_BYTE *)v10 + 31) = v24;
                            if (v24)
                            {
                              v25 = *((unsigned __int8 *)a1 + 12);
                              *((_BYTE *)v10 + 32) = v25;
                              if (v25)
                              {
                                v26 = *((unsigned __int8 *)a1 + 13);
                                *((_BYTE *)v10 + 33) = v26;
                                if (v26)
                                {
                                  v27 = *((unsigned __int8 *)a1 + 14);
                                  *((_BYTE *)v10 + 34) = v27;
                                  if (v27)
                                  {
                                    v28 = *((unsigned __int8 *)a1 + 15);
                                    *((_BYTE *)v10 + 35) = v28;
                                    if (v28)
                                    {
                                      v29 = *((unsigned __int8 *)a1 + 16);
                                      *((_BYTE *)v10 + 36) = v29;
                                      if (v29)
                                      {
                                        v30 = *((unsigned __int8 *)a1 + 17);
                                        *((_BYTE *)v10 + 37) = v30;
                                        if (v30)
                                        {
                                          v31 = *((unsigned __int8 *)a1 + 18);
                                          *((_BYTE *)v10 + 38) = v31;
                                          if (v31)
                                          {
                                            v32 = *((unsigned __int8 *)a1 + 19);
                                            *((_BYTE *)v10 + 39) = v32;
                                            if (v32)
                                            {
                                              v33 = *((unsigned __int8 *)a1 + 20);
                                              *((_BYTE *)v10 + 40) = v33;
                                              if (v33)
                                              {
                                                v34 = *((unsigned __int8 *)a1 + 21);
                                                *((_BYTE *)v10 + 41) = v34;
                                                if (v34)
                                                {
                                                  v35 = *((unsigned __int8 *)a1 + 22);
                                                  *((_BYTE *)v10 + 42) = v35;
                                                  if (v35)
                                                  {
                                                    v36 = *((unsigned __int8 *)a1 + 23);
                                                    *((_BYTE *)v10 + 43) = v36;
                                                    if (v36)
                                                    {
                                                      v37 = *((unsigned __int8 *)a1 + 24);
                                                      *((_BYTE *)v10 + 44) = v37;
                                                      if (v37)
                                                      {
                                                        v38 = *((unsigned __int8 *)a1 + 25);
                                                        *((_BYTE *)v10 + 45) = v38;
                                                        if (v38)
                                                        {
                                                          v39 = *((unsigned __int8 *)a1 + 26);
                                                          *((_BYTE *)v10 + 46) = v39;
                                                          if (v39)
                                                          {
                                                            v40 = *((unsigned __int8 *)a1 + 27);
                                                            *((_BYTE *)v10 + 47) = v40;
                                                            if (v40)
                                                            {
                                                              v41 = *((unsigned __int8 *)a1 + 28);
                                                              *((_BYTE *)v10 + 48) = v41;
                                                              if (v41)
                                                              {
                                                                v42 = *((unsigned __int8 *)a1 + 29);
                                                                *((_BYTE *)v10 + 49) = v42;
                                                                if (v42)
                                                                {
                                                                  v43 = *((unsigned __int8 *)a1 + 30);
                                                                  *((_BYTE *)v10 + 50) = v43;
                                                                  if (v43)
                                                                    *((_BYTE *)v10 + 51) = 0;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v44 = *(unsigned __int8 *)a2;
      *((_BYTE *)v10 + 52) = v44;
      if (v44)
      {
        v45 = *((unsigned __int8 *)a2 + 1);
        *((_BYTE *)v10 + 53) = v45;
        if (v45)
        {
          v46 = *((unsigned __int8 *)a2 + 2);
          *((_BYTE *)v10 + 54) = v46;
          if (v46)
          {
            v47 = *((unsigned __int8 *)a2 + 3);
            *((_BYTE *)v10 + 55) = v47;
            if (v47)
            {
              v48 = *((unsigned __int8 *)a2 + 4);
              *((_BYTE *)v10 + 56) = v48;
              if (v48)
              {
                v49 = *((unsigned __int8 *)a2 + 5);
                *((_BYTE *)v10 + 57) = v49;
                if (v49)
                {
                  v50 = *((unsigned __int8 *)a2 + 6);
                  *((_BYTE *)v10 + 58) = v50;
                  if (v50)
                  {
                    v51 = *((unsigned __int8 *)a2 + 7);
                    *((_BYTE *)v10 + 59) = v51;
                    if (v51)
                    {
                      v52 = *((unsigned __int8 *)a2 + 8);
                      *((_BYTE *)v10 + 60) = v52;
                      if (v52)
                      {
                        v53 = *((unsigned __int8 *)a2 + 9);
                        *((_BYTE *)v10 + 61) = v53;
                        if (v53)
                        {
                          v54 = *((unsigned __int8 *)a2 + 10);
                          *((_BYTE *)v10 + 62) = v54;
                          if (v54)
                          {
                            v55 = *((unsigned __int8 *)a2 + 11);
                            *((_BYTE *)v10 + 63) = v55;
                            if (v55)
                            {
                              v56 = *((unsigned __int8 *)a2 + 12);
                              *((_BYTE *)v10 + 64) = v56;
                              if (v56)
                              {
                                v57 = *((unsigned __int8 *)a2 + 13);
                                *((_BYTE *)v10 + 65) = v57;
                                if (v57)
                                {
                                  v58 = *((unsigned __int8 *)a2 + 14);
                                  *((_BYTE *)v10 + 66) = v58;
                                  if (v58)
                                  {
                                    v59 = *((unsigned __int8 *)a2 + 15);
                                    *((_BYTE *)v10 + 67) = v59;
                                    if (v59)
                                    {
                                      v60 = *((unsigned __int8 *)a2 + 16);
                                      *((_BYTE *)v10 + 68) = v60;
                                      if (v60)
                                      {
                                        v61 = *((unsigned __int8 *)a2 + 17);
                                        *((_BYTE *)v10 + 69) = v61;
                                        if (v61)
                                        {
                                          v62 = *((unsigned __int8 *)a2 + 18);
                                          *((_BYTE *)v10 + 70) = v62;
                                          if (v62)
                                          {
                                            v63 = *((unsigned __int8 *)a2 + 19);
                                            *((_BYTE *)v10 + 71) = v63;
                                            if (v63)
                                            {
                                              v64 = *((unsigned __int8 *)a2 + 20);
                                              *((_BYTE *)v10 + 72) = v64;
                                              if (v64)
                                              {
                                                v65 = *((unsigned __int8 *)a2 + 21);
                                                *((_BYTE *)v10 + 73) = v65;
                                                if (v65)
                                                {
                                                  v66 = *((unsigned __int8 *)a2 + 22);
                                                  *((_BYTE *)v10 + 74) = v66;
                                                  if (v66)
                                                  {
                                                    v67 = *((unsigned __int8 *)a2 + 23);
                                                    *((_BYTE *)v10 + 75) = v67;
                                                    if (v67)
                                                    {
                                                      v68 = *((unsigned __int8 *)a2 + 24);
                                                      *((_BYTE *)v10 + 76) = v68;
                                                      if (v68)
                                                      {
                                                        v69 = *((unsigned __int8 *)a2 + 25);
                                                        *((_BYTE *)v10 + 77) = v69;
                                                        if (v69)
                                                        {
                                                          v70 = *((unsigned __int8 *)a2 + 26);
                                                          *((_BYTE *)v10 + 78) = v70;
                                                          if (v70)
                                                          {
                                                            v71 = *((unsigned __int8 *)a2 + 27);
                                                            *((_BYTE *)v10 + 79) = v71;
                                                            if (v71)
                                                            {
                                                              v72 = *((unsigned __int8 *)a2 + 28);
                                                              *((_BYTE *)v10 + 80) = v72;
                                                              if (v72)
                                                              {
                                                                v73 = *((unsigned __int8 *)a2 + 29);
                                                                *((_BYTE *)v10 + 81) = v73;
                                                                if (v73)
                                                                {
                                                                  v74 = *((unsigned __int8 *)a2 + 30);
                                                                  *((_BYTE *)v10 + 82) = v74;
                                                                  if (v74)
                                                                    *((_BYTE *)v10 + 83) = 0;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (a3)
      {
        v75 = (char *)v10 + 84;
        v76 = 128;
        while (1)
        {
          v77 = *(unsigned __int8 *)a3;
          *v75 = v77;
          if (!v77)
            break;
          ++v75;
          ++a3;
          if ((unint64_t)--v76 <= 1)
          {
            *v75 = 0;
            break;
          }
        }
      }
      objc_storeStrong((id *)v10 + 27, a4);
      v78 = nw_fd_wrapper_create(v12);
      nw_fd_wrapper_guard(v78);
      objc_storeStrong((id *)v10 + 105, v78);
      v79 = dispatch_source_create(MEMORY[0x1E0C80DB8], v12, 0, v9);
      objc_initWeak((id *)location, v10);
      v80 = MEMORY[0x1E0C809B0];
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 3221225472;
      handler[2] = __nw_agent_create_block_invoke;
      handler[3] = &unk_1E14ACFD0;
      v138 = v78;
      v81 = v78;
      dispatch_source_set_cancel_handler(v79, handler);
      v134[0] = v80;
      v134[1] = 3221225472;
      v134[2] = __nw_agent_create_block_invoke_2;
      v134[3] = &unk_1E14AB250;
      objc_copyWeak(&v136, (id *)location);
      v82 = v79;
      v135 = v82;
      dispatch_source_set_event_handler(v82, v134);
      v83 = (void *)*((_QWORD *)v10 + 106);
      *((_QWORD *)v10 + 106) = v82;
      v84 = v82;

      dispatch_resume(v84);
      v85 = v10;

      objc_destroyWeak(&v136);
      objc_destroyWeak((id *)location);
      goto LABEL_80;
    }
    __nwlog_obj();
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(_QWORD *)&location[4] = "nw_agent_create";
    v100 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v139 = 0;
    if (__nwlog_fault(v100, &type, &v139))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v104 = type;
        if (os_log_type_enabled(v101, type))
        {
          *(_DWORD *)location = 136446210;
          *(_QWORD *)&location[4] = "nw_agent_create";
          _os_log_impl(&dword_182FBE000, v101, v104, "%{public}s called with null (fd >= 0)", location, 0xCu);
        }
LABEL_207:

        goto LABEL_208;
      }
      if (!v139)
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v132 = type;
        if (os_log_type_enabled(v101, type))
        {
          *(_DWORD *)location = 136446210;
          *(_QWORD *)&location[4] = "nw_agent_create";
          _os_log_impl(&dword_182FBE000, v101, v132, "%{public}s called with null (fd >= 0), backtrace limit exceeded", location, 0xCu);
        }
        goto LABEL_207;
      }
      v118 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v101 = objc_claimAutoreleasedReturnValue();
      v121 = type;
      v122 = os_log_type_enabled(v101, type);
      if (!v118)
      {
        if (v122)
        {
          *(_DWORD *)location = 136446210;
          *(_QWORD *)&location[4] = "nw_agent_create";
          _os_log_impl(&dword_182FBE000, v101, v121, "%{public}s called with null (fd >= 0), no backtrace", location, 0xCu);
        }
        goto LABEL_207;
      }
      if (v122)
      {
        *(_DWORD *)location = 136446466;
        *(_QWORD *)&location[4] = "nw_agent_create";
        v142 = 2082;
        v143 = v118;
        _os_log_impl(&dword_182FBE000, v101, v121, "%{public}s called with null (fd >= 0), dumping backtrace:%{public}s", location, 0x16u);
      }
      goto LABEL_157;
    }
  }
  else
  {
    __nwlog_obj();
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(_QWORD *)&location[4] = "nw_agent_create";
    v100 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v139 = 0;
    if (__nwlog_fault(v100, &type, &v139))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v102 = type;
        if (os_log_type_enabled(v101, type))
        {
          *(_DWORD *)location = 136446210;
          *(_QWORD *)&location[4] = "nw_agent_create";
          _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s called with null agent", location, 0xCu);
        }
        goto LABEL_207;
      }
      if (!v139)
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v131 = type;
        if (os_log_type_enabled(v101, type))
        {
          *(_DWORD *)location = 136446210;
          *(_QWORD *)&location[4] = "nw_agent_create";
          _os_log_impl(&dword_182FBE000, v101, v131, "%{public}s called with null agent, backtrace limit exceeded", location, 0xCu);
        }
        goto LABEL_207;
      }
      v118 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v101 = objc_claimAutoreleasedReturnValue();
      v119 = type;
      v120 = os_log_type_enabled(v101, type);
      if (!v118)
      {
        if (v120)
        {
          *(_DWORD *)location = 136446210;
          *(_QWORD *)&location[4] = "nw_agent_create";
          _os_log_impl(&dword_182FBE000, v101, v119, "%{public}s called with null agent, no backtrace", location, 0xCu);
        }
        goto LABEL_207;
      }
      if (v120)
      {
        *(_DWORD *)location = 136446466;
        *(_QWORD *)&location[4] = "nw_agent_create";
        v142 = 2082;
        v143 = v118;
        _os_log_impl(&dword_182FBE000, v101, v119, "%{public}s called with null agent, dumping backtrace:%{public}s", location, 0x16u);
      }
LABEL_157:

      free(v118);
    }
  }
LABEL_208:
  if (v100)
    free(v100);
  v85 = 0;
LABEL_80:

LABEL_81:
  return v85;
}

void sub_183AABC2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __nw_agent_create_block_invoke(uint64_t a1)
{
  nw_fd_wrapper_close(*(void **)(a1 + 32));
}

BOOL nw_agent_read_message_on_queue(NWConcrete_nw_agent *a1)
{
  NWConcrete_nw_agent *v1;
  void *v2;
  _BYTE *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  __int128 *v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  NWConcrete_nw_agent_client *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  NWConcrete_nw_agent_client *v19;
  const char *backtrace_string;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  nw_endpoint_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  NSObject *v33;
  os_log_type_t v34;
  id v35;
  void *v36;
  NSObject *v37;
  os_log_type_t v38;
  id v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  char *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  os_log_type_t v51;
  size_t v52;
  char *v53;
  os_log_type_t v54;
  os_log_type_t v55;
  id v57;
  void *v58;
  NSObject *v59;
  os_log_type_t v60;
  const char *v61;
  char *v62;
  NSObject *v63;
  os_log_type_t v64;
  os_log_type_t v65;
  os_log_type_t v66;
  nw_endpoint_t v67;
  NSObject *v68;
  void *v69;
  NSObject *v70;
  const char *v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  os_log_type_t v75;
  os_log_type_t v76;
  void *v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  os_log_type_t v81;
  void *v82;
  os_log_type_t v83;
  void *v84;
  char *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  os_log_type_t v88;
  void *v89;
  char *v90;
  NSObject *v91;
  os_log_type_t v92;
  void *v93;
  char *v94;
  NSObject *v95;
  os_log_type_t v96;
  char *v97;
  os_log_type_t v98;
  _BOOL4 v99;
  char *v100;
  os_log_type_t v101;
  _BOOL4 v102;
  void *v103;
  char *v104;
  NSObject *v105;
  os_log_type_t v106;
  os_log_type_t v107;
  void *v108;
  os_log_type_t v109;
  os_log_type_t v110;
  char *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  unsigned __int8 *v114;
  int v115;
  os_unfair_lock_s *v116;
  os_unfair_lock_s *v117;
  _QWORD *v118;
  uint64_t v119;
  id v120;
  char *v121;
  NSObject *v122;
  os_log_type_t v123;
  char *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  os_log_type_t v127;
  os_unfair_lock_s *v128;
  _QWORD *v129;
  uint64_t v130;
  id v131;
  char *v132;
  NSObject *v133;
  os_log_type_t v134;
  char *v135;
  os_log_type_t v136;
  _BOOL4 v137;
  os_log_type_t v138;
  os_unfair_lock_s *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  char *v145;
  NSObject *v146;
  os_log_type_t v147;
  char *v148;
  os_log_type_t v149;
  _BOOL4 v150;
  os_log_type_t v151;
  void *v152;
  char *v153;
  NSObject *v154;
  os_log_type_t v155;
  char *v156;
  NSObject *v157;
  os_log_type_t v158;
  _BOOL4 v159;
  char *v160;
  os_log_type_t v161;
  _BOOL4 v162;
  os_log_type_t v163;
  os_log_type_t v164;
  os_log_type_t v165;
  int v166;
  os_unfair_lock_s *v167;
  _QWORD *v168;
  uint64_t v169;
  id v170;
  char *v171;
  NSObject *v172;
  os_log_type_t v173;
  int v174;
  os_unfair_lock_s *v175;
  _QWORD *v176;
  uint64_t v177;
  char *v178;
  os_log_type_t v179;
  _BOOL4 v180;
  NSObject *v181;
  NSObject *v182;
  nw_endpoint_type_t v183;
  uint64_t v184;
  uint64_t v185;
  os_log_type_t v186;
  os_unfair_lock_s *v187;
  _QWORD *v188;
  uint64_t v189;
  id v190;
  char *v191;
  NSObject *v192;
  os_log_type_t v193;
  char *v194;
  os_log_type_t v195;
  _BOOL4 v196;
  os_log_type_t v197;
  int v198;
  os_unfair_lock_s *v199;
  _QWORD *v200;
  uint64_t v201;
  id v202;
  char *v203;
  NSObject *v204;
  os_log_type_t v205;
  char *v206;
  os_log_type_t v207;
  _BOOL4 v208;
  os_log_type_t v209;
  NWConcrete_nw_agent_client *v210;
  os_unfair_lock_s *v211;
  _QWORD *v212;
  os_unfair_lock_s *v213;
  _QWORD *v214;
  uint64_t v215;
  void *v216;
  char *v217;
  NSObject *v218;
  os_log_type_t v219;
  char *v220;
  os_log_type_t v221;
  _BOOL4 v222;
  os_log_type_t v223;
  int v224;
  os_unfair_lock_s *v225;
  _QWORD *v226;
  uint64_t v227;
  void *v228;
  char *v229;
  NSObject *v230;
  os_log_type_t v231;
  os_unfair_lock_s *v232;
  _QWORD *v233;
  uint64_t v234;
  id v235;
  char *v236;
  NSObject *v237;
  os_log_type_t v238;
  char *v239;
  os_log_type_t v240;
  _BOOL4 v241;
  os_log_type_t v242;
  os_unfair_lock_s *v243;
  _QWORD *v244;
  uint64_t v245;
  id v246;
  char *v247;
  NSObject *v248;
  os_log_type_t v249;
  char *v250;
  os_log_type_t v251;
  _BOOL4 v252;
  os_log_type_t v253;
  void *v254;
  char *v256;
  os_log_type_t v257;
  _BOOL4 v258;
  void *v259;
  char *v260;
  NSObject *v261;
  os_log_type_t v262;
  os_log_type_t v263;
  os_unfair_lock_s *v264;
  _QWORD *v265;
  uint64_t v266;
  void *v267;
  char *v268;
  NSObject *v269;
  os_log_type_t v270;
  char *v271;
  os_log_type_t v272;
  _BOOL4 v273;
  os_log_type_t v274;
  char *v275;
  os_log_type_t v276;
  _BOOL4 v277;
  os_log_type_t v278;
  os_unfair_lock_s *v279;
  _QWORD *v280;
  uint64_t v281;
  void *v282;
  char *v283;
  NSObject *v284;
  os_log_type_t v285;
  char *v286;
  os_log_type_t v287;
  _BOOL4 v288;
  os_log_type_t v289;
  NWConcrete_nw_agent *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _BOOL8 v294;
  os_unfair_lock_s *lock;
  NWConcrete_nw_agent_client *v296;
  _BOOL4 v297;
  os_unfair_lock_s *v298;
  _QWORD v299[4];
  os_unfair_lock_s *v300;
  NWConcrete_nw_agent_client *v301;
  _QWORD v302[2];
  void (*v303)(uint64_t);
  void *v304;
  os_unfair_lock_s *v305;
  _BYTE *v306;
  _QWORD v307[4];
  os_unfair_lock_s *v308;
  NWConcrete_nw_agent_client *v309;
  _QWORD v310[2];
  void (*v311)(uint64_t);
  void *v312;
  os_unfair_lock_s *v313;
  _BYTE *v314;
  _QWORD v315[2];
  void (*v316)(uint64_t);
  void *v317;
  os_unfair_lock_s *v318;
  _BYTE *v319;
  _QWORD v320[2];
  void (*v321)(uint64_t);
  void *v322;
  NWConcrete_nw_agent_client *v323;
  os_unfair_lock_s *v324;
  _QWORD v325[4];
  os_unfair_lock_s *v326;
  NWConcrete_nw_agent_client *v327;
  _QWORD v328[2];
  void (*v329)(uint64_t);
  void *v330;
  os_unfair_lock_s *v331;
  _BYTE *v332;
  _QWORD v333[2];
  void (*v334)(uint64_t);
  void *v335;
  os_unfair_lock_s *v336;
  _BYTE *v337;
  _QWORD v338[4];
  os_unfair_lock_s *v339;
  _QWORD v340[2];
  void (*v341)(uint64_t);
  void *v342;
  os_unfair_lock_s *v343;
  _BYTE *v344;
  _QWORD v345[2];
  void (*v346)(uint64_t);
  void *v347;
  os_unfair_lock_s *v348;
  _BYTE *v349;
  char v350;
  _QWORD v351[4];
  os_unfair_lock_s *v352;
  NWConcrete_nw_agent_client *v353;
  _QWORD v354[2];
  void (*v355)(uint64_t);
  void *v356;
  os_unfair_lock_s *v357;
  _BYTE *v358;
  char v359;
  _QWORD v360[2];
  void (*v361)(uint64_t);
  void *v362;
  os_unfair_lock_s *v363;
  _BYTE *v364;
  _QWORD v365[4];
  os_unfair_lock_s *v366;
  NWConcrete_nw_agent_client *v367;
  _QWORD v368[2];
  void (*v369)(uint64_t);
  void *v370;
  os_unfair_lock_s *v371;
  _BYTE *v372;
  _QWORD v373[2];
  void (*v374)(uint64_t);
  void *v375;
  os_unfair_lock_s *v376;
  _BYTE *v377;
  _QWORD v378[4];
  os_unfair_lock_s *v379;
  _QWORD v380[2];
  void (*v381)(uint64_t);
  void *v382;
  os_unfair_lock_s *v383;
  _BYTE *v384;
  _QWORD v385[4];
  os_unfair_lock_s *v386;
  _QWORD v387[2];
  void (*v388)(uint64_t);
  void *v389;
  os_unfair_lock_s *v390;
  _BYTE *v391;
  _QWORD v392[2];
  void (*v393)(uint64_t);
  void *v394;
  NWConcrete_nw_agent *v395;
  _BYTE *v396;
  _QWORD v397[4];
  os_unfair_lock_s *v398;
  _BYTE *v399;
  _QWORD v400[5];
  uint64_t v401;
  uint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  char v405;
  os_log_type_t type;
  __int128 uu;
  _BYTE buf[24];
  uint64_t (*v409)(uint64_t, uint64_t);
  void (*v410)(uint64_t);
  id v411;
  _BYTE out[48];
  uint8_t v413[4];
  const char *v414;
  __int16 v415;
  char *v416;
  uint64_t v417;

  v417 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v1 + 27));
  v401 = 0;
  v402 = &v401;
  v403 = 0x2020000000;
  v404 = 0;
  v2 = (void *)*((_QWORD *)v1 + 105);
  v400[0] = MEMORY[0x1E0C809B0];
  v400[1] = 3221225472;
  v400[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke;
  v400[3] = &unk_1E14AB578;
  v400[4] = &v401;
  nw_fd_wrapper_get_fd(v2, v400);
  v3 = (_BYTE *)v402[3];
  if (!v3)
  {
    v297 = 0;
    goto LABEL_508;
  }
  if (*v3 == 25)
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = out;
    *(_QWORD *)&out[16] = 0x3032000000;
    *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
    *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
    *(_QWORD *)&out[40] = 0;
    v397[0] = MEMORY[0x1E0C809B0];
    v397[1] = 3221225472;
    v397[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_153;
    v397[3] = &unk_1E14ACE40;
    v399 = out;
    v398 = v1;
    v4 = v398 + 2;
    os_unfair_lock_lock(v398 + 2);
    ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_153((uint64_t)v397);
    os_unfair_lock_unlock(v4);
    v5 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
    if (v5)
    {
      (*(void (**)(void))(v5 + 16))();
LABEL_170:
      v82 = (void *)v402[3];
      if (v82)
      {
        free(v82);
        v402[3] = 0;
      }

      _Block_object_dispose(out, 8);
      v297 = 1;
      goto LABEL_508;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue";
    v12 = (char *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    LOBYTE(uu) = 0;
    if (__nwlog_fault(v12, v413, &uu))
    {
      if (v413[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = v413[0];
        if (os_log_type_enabled(v13, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s No handler for TOKENS_NEEDED", buf, 0xCu);
        }
      }
      else if ((_BYTE)uu)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          v21 = (char *)backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v22 = (id)gLogObj;
          v23 = v413[0];
          if (os_log_type_enabled(v22, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v21;
            _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s No handler for TOKENS_NEEDED, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          if (!v12)
            goto LABEL_170;
          goto LABEL_169;
        }
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v81 = v413[0];
        if (os_log_type_enabled(v13, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v13, v81, "%{public}s No handler for TOKENS_NEEDED, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v75 = v413[0];
        if (os_log_type_enabled(v13, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v13, v75, "%{public}s No handler for TOKENS_NEEDED, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v12)
      goto LABEL_170;
LABEL_169:
    free(v12);
    goto LABEL_170;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v409 = __Block_byref_object_copy__154;
  v410 = __Block_byref_object_dispose__155;
  v411 = 0;
  v392[0] = MEMORY[0x1E0C809B0];
  v392[1] = 3221225472;
  v393 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_156;
  v394 = &unk_1E14ACE40;
  v396 = buf;
  v395 = v1;
  v6 = v395;
  v7 = v392;
  v298 = v6;
  v6 += 2;
  os_unfair_lock_lock(v6);
  v393((uint64_t)v7);
  lock = v6;
  os_unfair_lock_unlock(v6);

  if (!*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
  {
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    objc_storeStrong((id *)(*(_QWORD *)&buf[8] + 40), (id)nw_context_copy_implicit_context::implicit_context);
  }
  uu = 0uLL;
  v8 = (unsigned __int8 *)v402[3];
  if (!v8)
  {
    __nwlog_obj();
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_agent_get_uuid_for_message";
    v90 = (char *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v90, v413, &type))
    {
      if (v413[0] == 17)
      {
        __nwlog_obj();
        v91 = objc_claimAutoreleasedReturnValue();
        v92 = v413[0];
        if (os_log_type_enabled(v91, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_get_uuid_for_message";
          _os_log_impl(&dword_182FBE000, v91, v92, "%{public}s called with null message", out, 0xCu);
        }
      }
      else if (type)
      {
        v97 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v91 = objc_claimAutoreleasedReturnValue();
        v98 = v413[0];
        v99 = os_log_type_enabled(v91, (os_log_type_t)v413[0]);
        if (v97)
        {
          if (v99)
          {
            *(_DWORD *)out = 136446466;
            *(_QWORD *)&out[4] = "nw_agent_get_uuid_for_message";
            *(_WORD *)&out[12] = 2082;
            *(_QWORD *)&out[14] = v97;
            _os_log_impl(&dword_182FBE000, v91, v98, "%{public}s called with null message, dumping backtrace:%{public}s", out, 0x16u);
          }

          free(v97);
          goto LABEL_230;
        }
        if (v99)
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_get_uuid_for_message";
          _os_log_impl(&dword_182FBE000, v91, v98, "%{public}s called with null message, no backtrace", out, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v91 = objc_claimAutoreleasedReturnValue();
        v107 = v413[0];
        if (os_log_type_enabled(v91, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_get_uuid_for_message";
          _os_log_impl(&dword_182FBE000, v91, v107, "%{public}s called with null message, backtrace limit exceeded", out, 0xCu);
        }
      }

    }
LABEL_230:
    if (v90)
      free(v90);
    goto LABEL_14;
  }
  v9 = *v8;
  if (v9 > 0x1A || ((1 << v9) & 0x40CF400) == 0 || (v10 = (__int128 *)(v8 + 16), uuid_is_null(v8 + 16)))
  {
LABEL_14:
    v296 = nw_agent_client_create((unsigned __int8 *)v402[3], v298, *(void **)(*(_QWORD *)&buf[8] + 40));
    goto LABEL_36;
  }
  uu = *v10;
  memset(out, 0, 37);
  uuid_unparse((const unsigned __int8 *)&uu, out);
  v15 = (NWConcrete_nw_agent_client *)nw_dictionary_copy_value(*(_QWORD *)&v298[184]._os_unfair_lock_opaque, (uint64_t)out);
  v16 = (unsigned __int8 *)v402[3];
  v296 = v15;
  if (v15)
  {
    if (v16)
    {
      v17 = *v16;
      if (v17 == 15 || v17 == 12)
      {
        v18 = *(_QWORD *)&v298[184]._os_unfair_lock_opaque;
        v19 = 0;
LABEL_35:
        nw_dictionary_set_value(v18, out, v19);
        goto LABEL_36;
      }
      goto LABEL_36;
    }
    __nwlog_obj();
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_should_remove_client_for_message";
    v104 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (!__nwlog_fault(v104, &type, &v405))
      goto LABEL_590;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v106 = type;
      if (os_log_type_enabled(v105, type))
      {
        *(_DWORD *)v413 = 136446210;
        v414 = "nw_agent_should_remove_client_for_message";
        _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s called with null message", v413, 0xCu);
      }
    }
    else if (v405)
    {
      v111 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v112 = type;
      v113 = os_log_type_enabled(v105, type);
      if (v111)
      {
        if (v113)
        {
          *(_DWORD *)v413 = 136446466;
          v414 = "nw_agent_should_remove_client_for_message";
          v415 = 2082;
          v416 = v111;
          _os_log_impl(&dword_182FBE000, v105, v112, "%{public}s called with null message, dumping backtrace:%{public}s", v413, 0x16u);
        }

        free(v111);
        if (!v104)
          goto LABEL_36;
LABEL_591:
        free(v104);
        goto LABEL_36;
      }
      if (v113)
      {
        *(_DWORD *)v413 = 136446210;
        v414 = "nw_agent_should_remove_client_for_message";
        _os_log_impl(&dword_182FBE000, v105, v112, "%{public}s called with null message, no backtrace", v413, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v163 = type;
      if (os_log_type_enabled(v105, type))
      {
        *(_DWORD *)v413 = 136446210;
        v414 = "nw_agent_should_remove_client_for_message";
        _os_log_impl(&dword_182FBE000, v105, v163, "%{public}s called with null message, backtrace limit exceeded", v413, 0xCu);
      }
    }
    goto LABEL_589;
  }
  v296 = nw_agent_client_create(v16, v298, *(void **)(*(_QWORD *)&buf[8] + 40));
  v24 = (unsigned __int8 *)v402[3];
  if (!v24)
  {
    __nwlog_obj();
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_should_add_client_for_message";
    v104 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (!__nwlog_fault(v104, &type, &v405))
      goto LABEL_590;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v109 = type;
      if (os_log_type_enabled(v105, type))
      {
        *(_DWORD *)v413 = 136446210;
        v414 = "nw_agent_should_add_client_for_message";
        _os_log_impl(&dword_182FBE000, v105, v109, "%{public}s called with null message", v413, 0xCu);
      }
    }
    else if (v405)
    {
      v160 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v161 = type;
      v162 = os_log_type_enabled(v105, type);
      if (v160)
      {
        if (v162)
        {
          *(_DWORD *)v413 = 136446466;
          v414 = "nw_agent_should_add_client_for_message";
          v415 = 2082;
          v416 = v160;
          _os_log_impl(&dword_182FBE000, v105, v161, "%{public}s called with null message, dumping backtrace:%{public}s", v413, 0x16u);
        }

        free(v160);
LABEL_590:
        if (!v104)
          goto LABEL_36;
        goto LABEL_591;
      }
      if (v162)
      {
        *(_DWORD *)v413 = 136446210;
        v414 = "nw_agent_should_add_client_for_message";
        _os_log_impl(&dword_182FBE000, v105, v161, "%{public}s called with null message, no backtrace", v413, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v165 = type;
      if (os_log_type_enabled(v105, type))
      {
        *(_DWORD *)v413 = 136446210;
        v414 = "nw_agent_should_add_client_for_message";
        _os_log_impl(&dword_182FBE000, v105, v165, "%{public}s called with null message, backtrace limit exceeded", v413, 0xCu);
      }
    }
LABEL_589:

    goto LABEL_590;
  }
  v25 = *v24;
  if (v25 <= 0x12 && ((1 << v25) & 0x44400) != 0)
  {
    v18 = *(_QWORD *)&v298[184]._os_unfair_lock_opaque;
    v19 = v296;
    goto LABEL_35;
  }
LABEL_36:
  v297 = v296 != 0;
  if (!v296)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_agent_read_message_on_queue";
    v32 = (void *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault((const char *)v32, v413, &type))
    {
      if (v413[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        v34 = v413[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s Failed to create agent client", out, 0xCu);
        }
      }
      else if (type)
      {
        v71 = __nw_create_backtrace_string();
        if (v71)
        {
          v72 = (char *)v71;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v73 = (id)gLogObj;
          v74 = v413[0];
          if (os_log_type_enabled(v73, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446466;
            *(_QWORD *)&out[4] = "nw_agent_read_message_on_queue";
            *(_WORD *)&out[12] = 2082;
            *(_QWORD *)&out[14] = v72;
            _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s Failed to create agent client, dumping backtrace:%{public}s", out, 0x16u);
          }

          free(v72);
          if (!v32)
            goto LABEL_178;
LABEL_177:
          free(v32);
LABEL_178:
          v84 = (void *)v402[3];
          if (v84)
          {
            free(v84);
            v402[3] = 0;
          }
          goto LABEL_507;
        }
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v83 = v413[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v33, v83, "%{public}s Failed to create agent client, no backtrace", out, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        v76 = v413[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v33, v76, "%{public}s Failed to create agent client, backtrace limit exceeded", out, 0xCu);
        }
      }

    }
    if (!v32)
      goto LABEL_178;
    goto LABEL_177;
  }
  v26 = v402[3];
  if (!v26)
  {
    __nwlog_obj();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
    v94 = (char *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v94, v413, &type))
    {
      if (v413[0] == 17)
      {
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v96 = v413[0];
        if (os_log_type_enabled(v95, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_182FBE000, v95, v96, "%{public}s called with null message", out, 0xCu);
        }
      }
      else if (type)
      {
        v100 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v101 = v413[0];
        v102 = os_log_type_enabled(v95, (os_log_type_t)v413[0]);
        if (v100)
        {
          if (v102)
          {
            *(_DWORD *)out = 136446466;
            *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
            *(_WORD *)&out[12] = 2082;
            *(_QWORD *)&out[14] = v100;
            _os_log_impl(&dword_182FBE000, v95, v101, "%{public}s called with null message, dumping backtrace:%{public}s", out, 0x16u);
          }

          free(v100);
          goto LABEL_244;
        }
        if (v102)
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_182FBE000, v95, v101, "%{public}s called with null message, no backtrace", out, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v110 = v413[0];
        if (os_log_type_enabled(v95, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_182FBE000, v95, v110, "%{public}s called with null message, backtrace limit exceeded", out, 0xCu);
        }
      }

    }
LABEL_244:
    if (v94)
      free(v94);
    goto LABEL_246;
  }
  if (*(_DWORD *)(v26 + 12) < 0x13u || (*(_BYTE *)v26 & 0xFE) != 0x12)
  {
LABEL_246:
    v294 = 0;
    goto LABEL_247;
  }
  v294 = nw_array_create();
  v27 = (*(_DWORD *)(v26 + 12) - 18);
  v28 = v27 - 5;
  if (v27 == 5)
    goto LABEL_247;
  v29 = 0;
  v30 = 0;
  v292 = v26 + 34;
  v291 = v26 + 39;
  v293 = v26 + 35;
  while (1)
  {
    if (v27 < 5 || v28 < v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v39 = (id)gLogObj;
      *(_DWORD *)out = 136446722;
      *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
      *(_WORD *)&out[12] = 2048;
      *(_QWORD *)&out[14] = v30;
      *(_WORD *)&out[22] = 2048;
      *(_QWORD *)&out[24] = v27;
      v40 = (char *)_os_log_send_and_compose_impl();

      v413[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v40, v413, &type))
      {
        if (v413[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v41 = (id)gLogObj;
          v42 = v413[0];
          if (os_log_type_enabled(v41, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446722;
            *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(_QWORD *)&out[14] = v30;
            *(_WORD *)&out[22] = 2048;
            *(_QWORD *)&out[24] = v27;
            _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu", out, 0x20u);
          }
        }
        else if (type)
        {
          v44 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v41 = (id)gLogObj;
          v45 = v413[0];
          v46 = os_log_type_enabled(v41, (os_log_type_t)v413[0]);
          if (v44)
          {
            if (v46)
            {
              *(_DWORD *)out = 136446978;
              *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&out[12] = 2048;
              *(_QWORD *)&out[14] = v30;
              *(_WORD *)&out[22] = 2048;
              *(_QWORD *)&out[24] = v27;
              *(_WORD *)&out[32] = 2082;
              *(_QWORD *)&out[34] = v44;
              _os_log_impl(&dword_182FBE000, v41, v45, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, dumping backtrace:%{public}s", out, 0x2Au);
            }

            free(v44);
            if (!v40)
              goto LABEL_83;
            goto LABEL_82;
          }
          if (v46)
          {
            *(_DWORD *)out = 136446722;
            *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(_QWORD *)&out[14] = v30;
            *(_WORD *)&out[22] = 2048;
            *(_QWORD *)&out[24] = v27;
            _os_log_impl(&dword_182FBE000, v41, v45, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, no backtrace", out, 0x20u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v41 = (id)gLogObj;
          v51 = v413[0];
          if (os_log_type_enabled(v41, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446722;
            *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(_QWORD *)&out[14] = v30;
            *(_WORD *)&out[22] = 2048;
            *(_QWORD *)&out[24] = v27;
            _os_log_impl(&dword_182FBE000, v41, v51, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, backtrace limit exceeded", out, 0x20u);
          }
        }

      }
      if (!v40)
      {
LABEL_83:
        v43 = 0;
        v52 = 0;
        v53 = 0;
        goto LABEL_120;
      }
LABEL_82:
      free(v40);
      goto LABEL_83;
    }
    if (v27 - 1 >= v30)
    {
      v43 = *(unsigned __int8 *)(v292 + v30);
      goto LABEL_93;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v35 = (id)gLogObj;
    *(_DWORD *)out = 136446722;
    *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_type";
    *(_WORD *)&out[12] = 2048;
    *(_QWORD *)&out[14] = v30;
    *(_WORD *)&out[22] = 2048;
    *(_QWORD *)&out[24] = v27;
    v36 = (void *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault((const char *)v36, v413, &type))
    {
      if (v413[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (id)gLogObj;
        v38 = v413[0];
        if (os_log_type_enabled(v37, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446722;
          *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_type";
          *(_WORD *)&out[12] = 2048;
          *(_QWORD *)&out[14] = v30;
          *(_WORD *)&out[22] = 2048;
          *(_QWORD *)&out[24] = v27;
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu", out, 0x20u);
        }
      }
      else if (type)
      {
        v47 = __nw_create_backtrace_string();
        if (v47)
        {
          v48 = (char *)v47;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v49 = (id)gLogObj;
          v50 = v413[0];
          if (os_log_type_enabled(v49, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446978;
            *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_type";
            *(_WORD *)&out[12] = 2048;
            *(_QWORD *)&out[14] = v30;
            *(_WORD *)&out[22] = 2048;
            *(_QWORD *)&out[24] = v27;
            *(_WORD *)&out[32] = 2082;
            *(_QWORD *)&out[34] = v48;
            _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, dumping backtrace:%{public}s", out, 0x2Au);
          }

          free(v48);
          if (!v36)
            goto LABEL_92;
LABEL_91:
          free(v36);
          goto LABEL_92;
        }
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v55 = v413[0];
        if (os_log_type_enabled(v37, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446722;
          *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_type";
          *(_WORD *)&out[12] = 2048;
          *(_QWORD *)&out[14] = v30;
          *(_WORD *)&out[22] = 2048;
          *(_QWORD *)&out[24] = v27;
          _os_log_impl(&dword_182FBE000, v37, v55, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, no backtrace", out, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (id)gLogObj;
        v54 = v413[0];
        if (os_log_type_enabled(v37, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446722;
          *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_type";
          *(_WORD *)&out[12] = 2048;
          *(_QWORD *)&out[14] = v30;
          *(_WORD *)&out[22] = 2048;
          *(_QWORD *)&out[24] = v27;
          _os_log_impl(&dword_182FBE000, v37, v54, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, backtrace limit exceeded", out, 0x20u);
        }
      }

    }
    if (v36)
      goto LABEL_91;
LABEL_92:
    v43 = 0;
LABEL_93:
    v52 = *(unsigned int *)(v293 + v30);
    if ((_DWORD)v52)
    {
      if (v52 <= 0xFFFFFFF9 && v27 >= v52 + 5 && v27 - (v52 + 5) >= v30)
      {
        v53 = (char *)(v291 + v30);
        goto LABEL_120;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v57 = (id)gLogObj;
      *(_DWORD *)out = 136446978;
      *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
      *(_WORD *)&out[12] = 2048;
      *(_QWORD *)&out[14] = v30;
      *(_WORD *)&out[22] = 2048;
      *(_QWORD *)&out[24] = v27;
      *(_WORD *)&out[32] = 1024;
      *(_DWORD *)&out[34] = v52;
      v58 = (void *)_os_log_send_and_compose_impl();

      v413[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v58, v413, &type))
      {
        if (v413[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v59 = (id)gLogObj;
          v60 = v413[0];
          if (os_log_type_enabled(v59, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446978;
            *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(_QWORD *)&out[14] = v30;
            *(_WORD *)&out[22] = 2048;
            *(_QWORD *)&out[24] = v27;
            *(_WORD *)&out[32] = 1024;
            *(_DWORD *)&out[34] = v52;
            _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", out, 0x26u);
          }
        }
        else if (type)
        {
          v61 = __nw_create_backtrace_string();
          if (v61)
          {
            v62 = (char *)v61;
            v290 = v1;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v63 = (id)gLogObj;
            v64 = v413[0];
            if (os_log_type_enabled(v63, (os_log_type_t)v413[0]))
            {
              *(_DWORD *)out = 136447234;
              *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&out[12] = 2048;
              *(_QWORD *)&out[14] = v30;
              *(_WORD *)&out[22] = 2048;
              *(_QWORD *)&out[24] = v27;
              *(_WORD *)&out[32] = 1024;
              *(_DWORD *)&out[34] = v52;
              *(_WORD *)&out[38] = 2082;
              *(_QWORD *)&out[40] = v62;
              _os_log_impl(&dword_182FBE000, v63, v64, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", out, 0x30u);
            }

            v1 = v290;
            free(v62);
            if (!v58)
              goto LABEL_119;
LABEL_118:
            free(v58);
            goto LABEL_119;
          }
          __nwlog_obj();
          v59 = objc_claimAutoreleasedReturnValue();
          v66 = v413[0];
          if (os_log_type_enabled(v59, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446978;
            *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(_QWORD *)&out[14] = v30;
            *(_WORD *)&out[22] = 2048;
            *(_QWORD *)&out[24] = v27;
            *(_WORD *)&out[32] = 1024;
            *(_DWORD *)&out[34] = v52;
            _os_log_impl(&dword_182FBE000, v59, v66, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", out, 0x26u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v59 = (id)gLogObj;
          v65 = v413[0];
          if (os_log_type_enabled(v59, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446978;
            *(_QWORD *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(_QWORD *)&out[14] = v30;
            *(_WORD *)&out[22] = 2048;
            *(_QWORD *)&out[24] = v27;
            *(_WORD *)&out[32] = 1024;
            *(_DWORD *)&out[34] = v52;
            _os_log_impl(&dword_182FBE000, v59, v65, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", out, 0x26u);
          }
        }

      }
      if (v58)
        goto LABEL_118;
    }
LABEL_119:
    v53 = 0;
LABEL_120:
    v30 += v52 + 5;
    if (v30 > v27)
      break;
    if (v43 <= 158)
    {
      if (v43 == 156)
      {
        if (v29)
        {
          if ((_DWORD)v52 == 16)
          {
            v29 = v29;
            *(_OWORD *)((char *)&v29[3].isa + 4) = *(_OWORD *)v53;

          }
          goto LABEL_48;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v70 = (id)gLogObj;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint agent to", out, 0xCu);
        }
      }
      else
      {
        if (v43 != 158)
          goto LABEL_132;
        if (v29)
        {
          *(_QWORD *)out = 0;
          asprintf((char **)out, "%.*s", v52, v53);
          nw_endpoint_set_device_id(v29, *(const char **)out);
          if (*(_QWORD *)out)
            free(*(void **)out);
          goto LABEL_48;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v70 = (id)gLogObj;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint device id to", out, 0xCu);
        }
      }
      goto LABEL_147;
    }
    if (v43 != 159)
    {
      if (v43 == 213)
      {
        v67 = nw_path_copy_endpoint_from_tlv(213, v52, v53);

        v29 = v67;
        if (v29)
          nw_array_append(v294, v29);

        goto LABEL_48;
      }
LABEL_132:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v68 = (id)gLogObj;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)out = 136446466;
        *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v43;
        _os_log_impl(&dword_182FBE000, v68, OS_LOG_TYPE_ERROR, "%{public}s Received unknown type %u", out, 0x12u);
      }

      goto LABEL_48;
    }
    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v70 = (id)gLogObj;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
        _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply public key to", out, 0xCu);
      }
LABEL_147:

      v29 = 0;
      goto LABEL_48;
    }
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v53);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    nw_endpoint_append_public_key(v29, v69);

LABEL_48:
    if (v30 >= v28)
      goto LABEL_193;
  }
  __nwlog_obj();
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)out = 136446978;
  *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
  *(_WORD *)&out[12] = 1024;
  *(_DWORD *)&out[14] = v52;
  *(_WORD *)&out[18] = 2048;
  *(_QWORD *)&out[20] = v30;
  *(_WORD *)&out[28] = 1024;
  *(_DWORD *)&out[30] = v27;
  v78 = (char *)_os_log_send_and_compose_impl();

  v413[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v78, v413, &type))
  {
    if (v413[0] == 17)
    {
      __nwlog_obj();
      v79 = objc_claimAutoreleasedReturnValue();
      v80 = v413[0];
      if (os_log_type_enabled(v79, (os_log_type_t)v413[0]))
      {
        *(_DWORD *)out = 136446978;
        *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v52;
        *(_WORD *)&out[18] = 2048;
        *(_QWORD *)&out[20] = v30;
        *(_WORD *)&out[28] = 1024;
        *(_DWORD *)&out[30] = v27;
        _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%u)", out, 0x22u);
      }
      goto LABEL_190;
    }
    if (type)
    {
      v85 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v79 = objc_claimAutoreleasedReturnValue();
      v86 = v413[0];
      v87 = os_log_type_enabled(v79, (os_log_type_t)v413[0]);
      if (v85)
      {
        if (v87)
        {
          *(_DWORD *)out = 136447234;
          *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v52;
          *(_WORD *)&out[18] = 2048;
          *(_QWORD *)&out[20] = v30;
          *(_WORD *)&out[28] = 1024;
          *(_DWORD *)&out[30] = v27;
          *(_WORD *)&out[34] = 2082;
          *(_QWORD *)&out[36] = v85;
          _os_log_impl(&dword_182FBE000, v79, v86, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%u), dumping backtrace:%{public}s", out, 0x2Cu);
        }

        free(v85);
        goto LABEL_191;
      }
      if (v87)
      {
        *(_DWORD *)out = 136446978;
        *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v52;
        *(_WORD *)&out[18] = 2048;
        *(_QWORD *)&out[20] = v30;
        *(_WORD *)&out[28] = 1024;
        *(_DWORD *)&out[30] = v27;
        _os_log_impl(&dword_182FBE000, v79, v86, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%u), no backtrace", out, 0x22u);
      }
    }
    else
    {
      __nwlog_obj();
      v79 = objc_claimAutoreleasedReturnValue();
      v88 = v413[0];
      if (os_log_type_enabled(v79, (os_log_type_t)v413[0]))
      {
        *(_DWORD *)out = 136446978;
        *(_QWORD *)&out[4] = "nw_agent_copy_group_members_for_message";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v52;
        *(_WORD *)&out[18] = 2048;
        *(_QWORD *)&out[20] = v30;
        *(_WORD *)&out[28] = 1024;
        *(_DWORD *)&out[30] = v27;
        _os_log_impl(&dword_182FBE000, v79, v88, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%u), backtrace limit exceeded", out, 0x22u);
      }
    }
LABEL_190:

  }
LABEL_191:
  if (v78)
    free(v78);
LABEL_193:

LABEL_247:
  v114 = (unsigned __int8 *)v402[3];
  v115 = *v114;
  v116 = lock;
  if (v115 == 13)
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = out;
    *(_QWORD *)&out[16] = 0x3032000000;
    *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
    *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
    *(_QWORD *)&out[40] = 0;
    v387[0] = MEMORY[0x1E0C809B0];
    v387[1] = 3221225472;
    v388 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_157;
    v389 = &unk_1E14ACE40;
    v391 = out;
    v390 = v298;
    v117 = v390;
    v118 = v387;
    os_unfair_lock_lock(lock);
    v388((uint64_t)v118);
    os_unfair_lock_unlock(lock);

    v119 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
    if (v119)
    {
      v385[0] = MEMORY[0x1E0C809B0];
      v385[1] = 3221225472;
      v385[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2;
      v385[3] = &unk_1E14AB3E8;
      v386 = v117;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, _QWORD *))(v119 + 16))(v119, v296, v385);

      goto LABEL_268;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v120 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v121 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v121, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v122 = objc_claimAutoreleasedReturnValue();
        v123 = type;
        if (os_log_type_enabled(v122, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v122, v123, "%{public}s No handler for CLIENT_TRIGGER", v413, 0xCu);
        }
        goto LABEL_265;
      }
      if (v405)
      {
        v124 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v122 = objc_claimAutoreleasedReturnValue();
        v125 = type;
        v126 = os_log_type_enabled(v122, type);
        if (v124)
        {
          if (v126)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v124;
            _os_log_impl(&dword_182FBE000, v122, v125, "%{public}s No handler for CLIENT_TRIGGER, dumping backtrace:%{public}s", v413, 0x16u);
          }

          free(v124);
          goto LABEL_266;
        }
        if (v126)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v122, v125, "%{public}s No handler for CLIENT_TRIGGER, no backtrace", v413, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v122 = objc_claimAutoreleasedReturnValue();
        v127 = type;
        if (os_log_type_enabled(v122, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v122, v127, "%{public}s No handler for CLIENT_TRIGGER, backtrace limit exceeded", v413, 0xCu);
        }
      }
LABEL_265:

    }
LABEL_266:
    if (v121)
      free(v121);
LABEL_268:

    _Block_object_dispose(out, 8);
    v115 = *v114;
    v116 = lock;
  }
  if (v115 == 5)
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = out;
    *(_QWORD *)&out[16] = 0x3032000000;
    *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
    *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
    *(_QWORD *)&out[40] = 0;
    v380[0] = MEMORY[0x1E0C809B0];
    v380[1] = 3221225472;
    v381 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_159;
    v382 = &unk_1E14ACE40;
    v384 = out;
    v383 = v298;
    v128 = v383;
    v129 = v380;
    os_unfair_lock_lock(v116);
    v381((uint64_t)v129);
    os_unfair_lock_unlock(v116);

    v130 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
    if (v130)
    {
      v378[0] = MEMORY[0x1E0C809B0];
      v378[1] = 3221225472;
      v378[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_160;
      v378[3] = &unk_1E14AB3E8;
      v379 = v128;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, _QWORD *))(v130 + 16))(v130, v296, v378);

      goto LABEL_290;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v131 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v132 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v132, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v133 = objc_claimAutoreleasedReturnValue();
        v134 = type;
        if (os_log_type_enabled(v133, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v133, v134, "%{public}s No handler for TRIGGER", v413, 0xCu);
        }
        goto LABEL_287;
      }
      if (v405)
      {
        v135 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v133 = objc_claimAutoreleasedReturnValue();
        v136 = type;
        v137 = os_log_type_enabled(v133, type);
        if (v135)
        {
          if (v137)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v135;
            _os_log_impl(&dword_182FBE000, v133, v136, "%{public}s No handler for TRIGGER, dumping backtrace:%{public}s", v413, 0x16u);
          }

          free(v135);
          goto LABEL_288;
        }
        if (v137)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v133, v136, "%{public}s No handler for TRIGGER, no backtrace", v413, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v133 = objc_claimAutoreleasedReturnValue();
        v138 = type;
        if (os_log_type_enabled(v133, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v133, v138, "%{public}s No handler for TRIGGER, backtrace limit exceeded", v413, 0xCu);
        }
      }
LABEL_287:

    }
LABEL_288:
    if (v132)
      free(v132);
LABEL_290:

    _Block_object_dispose(out, 8);
    v115 = *v114;
    v116 = lock;
  }
  if (v115 != 26)
    goto LABEL_350;
  *(_QWORD *)out = 0;
  *(_QWORD *)&out[8] = out;
  *(_QWORD *)&out[16] = 0x3032000000;
  *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
  *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
  *(_QWORD *)&out[40] = 0;
  v373[0] = MEMORY[0x1E0C809B0];
  v373[1] = 3221225472;
  v374 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_161;
  v375 = &unk_1E14ACE40;
  v377 = out;
  v376 = v298;
  v139 = v376;
  v140 = v373;
  os_unfair_lock_lock(v116);
  v374((uint64_t)v140);
  os_unfair_lock_unlock(v116);

  v141 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
  if (!v141)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v144 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v145 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v145, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v146 = objc_claimAutoreleasedReturnValue();
        v147 = type;
        if (os_log_type_enabled(v146, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v146, v147, "%{public}s No handler for CLIENT_ERROR", v413, 0xCu);
        }
      }
      else if (v405)
      {
        v148 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v146 = objc_claimAutoreleasedReturnValue();
        v149 = type;
        v150 = os_log_type_enabled(v146, type);
        if (v148)
        {
          if (v150)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v148;
            _os_log_impl(&dword_182FBE000, v146, v149, "%{public}s No handler for CLIENT_ERROR, dumping backtrace:%{public}s", v413, 0x16u);
          }

          free(v148);
          goto LABEL_313;
        }
        if (v150)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v146, v149, "%{public}s No handler for CLIENT_ERROR, no backtrace", v413, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v146 = objc_claimAutoreleasedReturnValue();
        v151 = type;
        if (os_log_type_enabled(v146, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v146, v151, "%{public}s No handler for CLIENT_ERROR, backtrace limit exceeded", v413, 0xCu);
        }
      }

    }
LABEL_313:
    if (v145)
      free(v145);
    goto LABEL_349;
  }
  v142 = v402[3];
  if (!v142)
  {
    __nwlog_obj();
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_get_error_for_message";
    v153 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v153, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v154 = objc_claimAutoreleasedReturnValue();
        v155 = type;
        if (os_log_type_enabled(v154, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_get_error_for_message";
          _os_log_impl(&dword_182FBE000, v154, v155, "%{public}s called with null message", v413, 0xCu);
        }
      }
      else
      {
        if (v405)
        {
          v156 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v157 = objc_claimAutoreleasedReturnValue();
          v158 = type;
          v159 = os_log_type_enabled(v157, type);
          if (v156)
          {
            if (v159)
            {
              *(_DWORD *)v413 = 136446466;
              v414 = "nw_agent_get_error_for_message";
              v415 = 2082;
              v416 = v156;
              _os_log_impl(&dword_182FBE000, v157, v158, "%{public}s called with null message, dumping backtrace:%{public}s", v413, 0x16u);
            }

            free(v156);
          }
          else
          {
            if (v159)
            {
              *(_DWORD *)v413 = 136446210;
              v414 = "nw_agent_get_error_for_message";
              _os_log_impl(&dword_182FBE000, v157, v158, "%{public}s called with null message, no backtrace", v413, 0xCu);
            }

          }
          goto LABEL_345;
        }
        __nwlog_obj();
        v154 = objc_claimAutoreleasedReturnValue();
        v164 = type;
        if (os_log_type_enabled(v154, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_get_error_for_message";
          _os_log_impl(&dword_182FBE000, v154, v164, "%{public}s called with null message, backtrace limit exceeded", v413, 0xCu);
        }
      }

    }
LABEL_345:
    if (v153)
      free(v153);
    goto LABEL_347;
  }
  if (*(_DWORD *)(v142 + 12) >= 0x14u && *(_BYTE *)v142 == 26)
  {
    v143 = *(unsigned int *)(v142 + 32);
    goto LABEL_348;
  }
LABEL_347:
  v143 = 0;
LABEL_348:
  (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, uint64_t))(v141 + 16))(v141, v296, v143);
LABEL_349:

  _Block_object_dispose(out, 8);
  v116 = lock;
LABEL_350:
  if (!v296->browse_descriptor && !v296->advertise_descriptor)
  {
    if ((v298[214]._os_unfair_lock_opaque & 0x20) == 0)
    {
      v174 = *v114;
      if (v174 != 14)
        goto LABEL_528;
      *(_QWORD *)out = 0;
      *(_QWORD *)&out[8] = out;
      *(_QWORD *)&out[16] = 0x3032000000;
      *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
      *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
      *(_QWORD *)&out[40] = 0;
      v340[0] = MEMORY[0x1E0C809B0];
      v340[1] = 3221225472;
      v341 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_170;
      v342 = &unk_1E14ACE40;
      v344 = out;
      v343 = v298;
      v175 = v343;
      v176 = v340;
      os_unfair_lock_lock(v116);
      v341((uint64_t)v176);
      os_unfair_lock_unlock(v116);

      v177 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
      if (v177)
      {
        v338[0] = MEMORY[0x1E0C809B0];
        v338[1] = 3221225472;
        v338[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_171;
        v338[3] = &unk_1E14AB3E8;
        v339 = v175;
        (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, _QWORD *))(v177 + 16))(v177, v296, v338);

LABEL_527:
        _Block_object_dispose(out, 8);

        v174 = *v114;
        v116 = lock;
LABEL_528:
        if (v174 != 15)
          goto LABEL_407;
        *(_QWORD *)out = 0;
        *(_QWORD *)&out[8] = out;
        *(_QWORD *)&out[16] = 0x3032000000;
        *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
        *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
        *(_QWORD *)&out[40] = 0;
        v333[0] = MEMORY[0x1E0C809B0];
        v333[1] = 3221225472;
        v334 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_172;
        v335 = &unk_1E14ACE40;
        v337 = out;
        v336 = v298;
        v264 = v336;
        v265 = v333;
        os_unfair_lock_lock(v116);
        v334((uint64_t)v265);
        os_unfair_lock_unlock(v116);

        v266 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
        if (v266)
        {
          (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v266 + 16))(v266, v296);
LABEL_549:

          _Block_object_dispose(out, 8);
          goto LABEL_406;
        }
        __nwlog_obj();
        v267 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v413 = 136446210;
        v414 = "nw_agent_read_message_on_queue";
        v268 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v405 = 0;
        if (__nwlog_fault(v268, &type, &v405))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v269 = objc_claimAutoreleasedReturnValue();
            v270 = type;
            if (os_log_type_enabled(v269, type))
            {
              *(_DWORD *)v413 = 136446210;
              v414 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_182FBE000, v269, v270, "%{public}s No handler for CLIENT_UNASSERT", v413, 0xCu);
            }
          }
          else if (v405)
          {
            v271 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v269 = objc_claimAutoreleasedReturnValue();
            v272 = type;
            v273 = os_log_type_enabled(v269, type);
            if (v271)
            {
              if (v273)
              {
                *(_DWORD *)v413 = 136446466;
                v414 = "nw_agent_read_message_on_queue";
                v415 = 2082;
                v416 = v271;
                _os_log_impl(&dword_182FBE000, v269, v272, "%{public}s No handler for CLIENT_UNASSERT, dumping backtrace:%{public}s", v413, 0x16u);
              }

              free(v271);
              goto LABEL_547;
            }
            if (v273)
            {
              *(_DWORD *)v413 = 136446210;
              v414 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_182FBE000, v269, v272, "%{public}s No handler for CLIENT_UNASSERT, no backtrace", v413, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v269 = objc_claimAutoreleasedReturnValue();
            v274 = type;
            if (os_log_type_enabled(v269, type))
            {
              *(_DWORD *)v413 = 136446210;
              v414 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_182FBE000, v269, v274, "%{public}s No handler for CLIENT_UNASSERT, backtrace limit exceeded", v413, 0xCu);
            }
          }

        }
LABEL_547:
        if (v268)
          free(v268);
        goto LABEL_549;
      }
      __nwlog_obj();
      v228 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v413 = 136446210;
      v414 = "nw_agent_read_message_on_queue";
      v229 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v405 = 0;
      if (__nwlog_fault(v229, &type, &v405))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v230 = objc_claimAutoreleasedReturnValue();
          v231 = type;
          if (os_log_type_enabled(v230, type))
          {
            *(_DWORD *)v413 = 136446210;
            v414 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_182FBE000, v230, v231, "%{public}s No handler for CLIENT_ASSERT", v413, 0xCu);
          }
        }
        else if (v405)
        {
          v256 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v230 = objc_claimAutoreleasedReturnValue();
          v257 = type;
          v258 = os_log_type_enabled(v230, type);
          if (v256)
          {
            if (v258)
            {
              *(_DWORD *)v413 = 136446466;
              v414 = "nw_agent_read_message_on_queue";
              v415 = 2082;
              v416 = v256;
              _os_log_impl(&dword_182FBE000, v230, v257, "%{public}s No handler for CLIENT_ASSERT, dumping backtrace:%{public}s", v413, 0x16u);
            }

            free(v256);
            goto LABEL_525;
          }
          if (v258)
          {
            *(_DWORD *)v413 = 136446210;
            v414 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_182FBE000, v230, v257, "%{public}s No handler for CLIENT_ASSERT, no backtrace", v413, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v230 = objc_claimAutoreleasedReturnValue();
          v263 = type;
          if (os_log_type_enabled(v230, type))
          {
            *(_DWORD *)v413 = 136446210;
            v414 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_182FBE000, v230, v263, "%{public}s No handler for CLIENT_ASSERT, backtrace limit exceeded", v413, 0xCu);
          }
        }

      }
LABEL_525:
      if (v229)
        free(v229);
      goto LABEL_527;
    }
    v181 = nw_agent_client_copy_endpoint(v296);
    v182 = v181;
    if (!v181)
      goto LABEL_586;
    v183 = nw_endpoint_get_type(v181);
    if (!LOBYTE(v298[178]._os_unfair_lock_opaque))
      goto LABEL_586;
    v184 = 0;
    v185 = 88;
    while (v298[v185]._os_unfair_lock_opaque != v183)
    {
      ++v184;
      v185 += 6;
      if (LOBYTE(v298[178]._os_unfair_lock_opaque) == v184)
        goto LABEL_586;
    }
    v224 = *v114;
    if (v224 != 14)
    {
LABEL_564:
      if (v224 == 15)
      {
        *(_QWORD *)out = 0;
        *(_QWORD *)&out[8] = out;
        *(_QWORD *)&out[16] = 0x3032000000;
        *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
        *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
        *(_QWORD *)&out[40] = 0;
        v345[0] = MEMORY[0x1E0C809B0];
        v345[1] = 3221225472;
        v346 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_169;
        v347 = &unk_1E14AB438;
        v349 = out;
        v348 = v298;
        v350 = v184;
        v279 = v348;
        v280 = v345;
        os_unfair_lock_lock(lock);
        v346((uint64_t)v280);
        os_unfair_lock_unlock(lock);

        v281 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
        if (v281)
        {
          (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v281 + 16))(v281, v296);
LABEL_585:

          _Block_object_dispose(out, 8);
          goto LABEL_586;
        }
        __nwlog_obj();
        v282 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v413 = 136446210;
        v414 = "nw_agent_read_message_on_queue";
        v283 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v405 = 0;
        if (__nwlog_fault(v283, &type, &v405))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v284 = objc_claimAutoreleasedReturnValue();
            v285 = type;
            if (os_log_type_enabled(v284, type))
            {
              *(_DWORD *)v413 = 136446210;
              v414 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_182FBE000, v284, v285, "%{public}s No handler for CLIENT_UNASSERT", v413, 0xCu);
            }
          }
          else if (v405)
          {
            v286 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v284 = objc_claimAutoreleasedReturnValue();
            v287 = type;
            v288 = os_log_type_enabled(v284, type);
            if (v286)
            {
              if (v288)
              {
                *(_DWORD *)v413 = 136446466;
                v414 = "nw_agent_read_message_on_queue";
                v415 = 2082;
                v416 = v286;
                _os_log_impl(&dword_182FBE000, v284, v287, "%{public}s No handler for CLIENT_UNASSERT, dumping backtrace:%{public}s", v413, 0x16u);
              }

              free(v286);
              goto LABEL_583;
            }
            if (v288)
            {
              *(_DWORD *)v413 = 136446210;
              v414 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_182FBE000, v284, v287, "%{public}s No handler for CLIENT_UNASSERT, no backtrace", v413, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v284 = objc_claimAutoreleasedReturnValue();
            v289 = type;
            if (os_log_type_enabled(v284, type))
            {
              *(_DWORD *)v413 = 136446210;
              v414 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_182FBE000, v284, v289, "%{public}s No handler for CLIENT_UNASSERT, backtrace limit exceeded", v413, 0xCu);
            }
          }

        }
LABEL_583:
        if (v283)
          free(v283);
        goto LABEL_585;
      }
LABEL_586:

      goto LABEL_406;
    }
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = out;
    *(_QWORD *)&out[16] = 0x3032000000;
    *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
    *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
    *(_QWORD *)&out[40] = 0;
    v354[0] = MEMORY[0x1E0C809B0];
    v354[1] = 3221225472;
    v355 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_167;
    v356 = &unk_1E14AB438;
    v358 = out;
    v357 = v298;
    v359 = v184;
    v225 = v357;
    v226 = v354;
    os_unfair_lock_lock(lock);
    v355((uint64_t)v226);
    os_unfair_lock_unlock(lock);

    v227 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
    if (v227)
    {
      v351[0] = MEMORY[0x1E0C809B0];
      v351[1] = 3221225472;
      v351[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_168;
      v351[3] = &unk_1E14AB410;
      v352 = v225;
      v353 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, _QWORD *))(v227 + 16))(v227, v353, v351);

LABEL_563:
      _Block_object_dispose(out, 8);

      v224 = *v114;
      goto LABEL_564;
    }
    __nwlog_obj();
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v260 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v260, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v261 = objc_claimAutoreleasedReturnValue();
        v262 = type;
        if (os_log_type_enabled(v261, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v261, v262, "%{public}s No handler for CLIENT_ASSERT", v413, 0xCu);
        }
      }
      else if (v405)
      {
        v275 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v261 = objc_claimAutoreleasedReturnValue();
        v276 = type;
        v277 = os_log_type_enabled(v261, type);
        if (v275)
        {
          if (v277)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v275;
            _os_log_impl(&dword_182FBE000, v261, v276, "%{public}s No handler for CLIENT_ASSERT, dumping backtrace:%{public}s", v413, 0x16u);
          }

          free(v275);
          goto LABEL_561;
        }
        if (v277)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v261, v276, "%{public}s No handler for CLIENT_ASSERT, no backtrace", v413, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v261 = objc_claimAutoreleasedReturnValue();
        v278 = type;
        if (os_log_type_enabled(v261, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v261, v278, "%{public}s No handler for CLIENT_ASSERT, backtrace limit exceeded", v413, 0xCu);
        }
      }

    }
LABEL_561:
    if (v260)
      free(v260);
    goto LABEL_563;
  }
  v166 = *v114;
  if (v166 == 14)
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = out;
    *(_QWORD *)&out[16] = 0x3032000000;
    *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
    *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
    *(_QWORD *)&out[40] = 0;
    v368[0] = MEMORY[0x1E0C809B0];
    v368[1] = 3221225472;
    v369 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_162;
    v370 = &unk_1E14ACE40;
    v372 = out;
    v371 = v298;
    v167 = v371;
    v168 = v368;
    os_unfair_lock_lock(v116);
    v369((uint64_t)v168);
    os_unfair_lock_unlock(v116);

    v169 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
    if (v169)
    {
      v365[0] = MEMORY[0x1E0C809B0];
      v365[1] = 3221225472;
      v365[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_163;
      v365[3] = &unk_1E14AB410;
      v366 = v167;
      v367 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, _QWORD *))(v169 + 16))(v169, v367, v365);

      goto LABEL_383;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v170 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v171 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v171, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v172 = objc_claimAutoreleasedReturnValue();
        v173 = type;
        if (os_log_type_enabled(v172, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v172, v173, "%{public}s No handler for CLIENT_ASSERT", v413, 0xCu);
        }
        goto LABEL_380;
      }
      if (v405)
      {
        v178 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v172 = objc_claimAutoreleasedReturnValue();
        v179 = type;
        v180 = os_log_type_enabled(v172, type);
        if (v178)
        {
          if (v180)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v178;
            _os_log_impl(&dword_182FBE000, v172, v179, "%{public}s No handler for CLIENT_ASSERT, dumping backtrace:%{public}s", v413, 0x16u);
          }

          free(v178);
          goto LABEL_381;
        }
        if (v180)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v172, v179, "%{public}s No handler for CLIENT_ASSERT, no backtrace", v413, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v172 = objc_claimAutoreleasedReturnValue();
        v186 = type;
        if (os_log_type_enabled(v172, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v172, v186, "%{public}s No handler for CLIENT_ASSERT, backtrace limit exceeded", v413, 0xCu);
        }
      }
LABEL_380:

    }
LABEL_381:
    if (v171)
      free(v171);
LABEL_383:

    _Block_object_dispose(out, 8);
    v166 = *v114;
    v116 = lock;
  }
  if (v166 == 15)
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = out;
    *(_QWORD *)&out[16] = 0x3032000000;
    *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
    *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
    *(_QWORD *)&out[40] = 0;
    v360[0] = MEMORY[0x1E0C809B0];
    v360[1] = 3221225472;
    v361 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_166;
    v362 = &unk_1E14ACE40;
    v364 = out;
    v363 = v298;
    v187 = v363;
    v188 = v360;
    os_unfair_lock_lock(v116);
    v361((uint64_t)v188);
    os_unfair_lock_unlock(v116);

    v189 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
    if (v189)
    {
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v189 + 16))(v189, v296);
      goto LABEL_405;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v190 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v191 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v191, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v192 = objc_claimAutoreleasedReturnValue();
        v193 = type;
        if (os_log_type_enabled(v192, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v192, v193, "%{public}s No handler for CLIENT_UNASSERT", v413, 0xCu);
        }
        goto LABEL_402;
      }
      if (v405)
      {
        v194 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v192 = objc_claimAutoreleasedReturnValue();
        v195 = type;
        v196 = os_log_type_enabled(v192, type);
        if (v194)
        {
          if (v196)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v194;
            _os_log_impl(&dword_182FBE000, v192, v195, "%{public}s No handler for CLIENT_UNASSERT, dumping backtrace:%{public}s", v413, 0x16u);
          }

          free(v194);
          goto LABEL_403;
        }
        if (v196)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v192, v195, "%{public}s No handler for CLIENT_UNASSERT, no backtrace", v413, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v192 = objc_claimAutoreleasedReturnValue();
        v197 = type;
        if (os_log_type_enabled(v192, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v192, v197, "%{public}s No handler for CLIENT_UNASSERT, backtrace limit exceeded", v413, 0xCu);
        }
      }
LABEL_402:

    }
LABEL_403:
    if (v191)
      free(v191);
LABEL_405:

    _Block_object_dispose(out, 8);
LABEL_406:
    v116 = lock;
  }
LABEL_407:
  v198 = *v114;
  if (v198 == 10)
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = out;
    *(_QWORD *)&out[16] = 0x3032000000;
    *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
    *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
    *(_QWORD *)&out[40] = 0;
    v328[0] = MEMORY[0x1E0C809B0];
    v328[1] = 3221225472;
    v329 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_173;
    v330 = &unk_1E14ACE40;
    v332 = out;
    v331 = v298;
    v199 = v331;
    v200 = v328;
    os_unfair_lock_lock(v116);
    v329((uint64_t)v200);
    os_unfair_lock_unlock(v116);

    v201 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
    if (v201)
    {
      v325[0] = MEMORY[0x1E0C809B0];
      v325[1] = 3221225472;
      v325[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_174;
      v325[3] = &unk_1E14AB488;
      v326 = v199;
      v327 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, _QWORD *))(v201 + 16))(v201, v327, v325);

      goto LABEL_428;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v202 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v203 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v203, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v204 = objc_claimAutoreleasedReturnValue();
        v205 = type;
        if (os_log_type_enabled(v204, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v204, v205, "%{public}s No handler for REQUEST_NEXUS", v413, 0xCu);
        }
        goto LABEL_425;
      }
      if (v405)
      {
        v206 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v204 = objc_claimAutoreleasedReturnValue();
        v207 = type;
        v208 = os_log_type_enabled(v204, type);
        if (v206)
        {
          if (v208)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v206;
            _os_log_impl(&dword_182FBE000, v204, v207, "%{public}s No handler for REQUEST_NEXUS, dumping backtrace:%{public}s", v413, 0x16u);
          }

          free(v206);
          goto LABEL_426;
        }
        if (v208)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v204, v207, "%{public}s No handler for REQUEST_NEXUS, no backtrace", v413, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v204 = objc_claimAutoreleasedReturnValue();
        v209 = type;
        if (os_log_type_enabled(v204, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v204, v209, "%{public}s No handler for REQUEST_NEXUS, backtrace limit exceeded", v413, 0xCu);
        }
      }
LABEL_425:

    }
LABEL_426:
    if (v203)
      free(v203);
LABEL_428:

    _Block_object_dispose(out, 8);
    v198 = *v114;
    v116 = lock;
  }
  if (v198 == 12)
  {
    v320[0] = MEMORY[0x1E0C809B0];
    v320[1] = 3221225472;
    v321 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_177;
    v322 = &unk_1E14ACE68;
    v210 = v296;
    v323 = v210;
    v324 = v298;
    v211 = v324;
    v212 = v320;
    os_unfair_lock_lock(v116);
    v321((uint64_t)v212);
    os_unfair_lock_unlock(v116);

    v198 = *v114;
    v116 = lock;
    if (v198 == 12)
    {
      *(_QWORD *)out = 0;
      *(_QWORD *)&out[8] = out;
      *(_QWORD *)&out[16] = 0x3032000000;
      *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
      *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
      *(_QWORD *)&out[40] = 0;
      v315[0] = MEMORY[0x1E0C809B0];
      v315[1] = 3221225472;
      v316 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_180;
      v317 = &unk_1E14ACE40;
      v319 = out;
      v318 = v211;
      v213 = v318;
      v214 = v315;
      os_unfair_lock_lock(lock);
      v316((uint64_t)v214);
      os_unfair_lock_unlock(lock);

      v215 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
      if (v215)
      {
        (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v215 + 16))(v215, v210);
        goto LABEL_459;
      }
      __nwlog_obj();
      v216 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v413 = 136446210;
      v414 = "nw_agent_read_message_on_queue";
      v217 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v405 = 0;
      if (__nwlog_fault(v217, &type, &v405))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v218 = objc_claimAutoreleasedReturnValue();
          v219 = type;
          if (os_log_type_enabled(v218, type))
          {
            *(_DWORD *)v413 = 136446210;
            v414 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_182FBE000, v218, v219, "%{public}s No handler for CLOSE_NEXUS", v413, 0xCu);
          }
          goto LABEL_456;
        }
        if (v405)
        {
          v220 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v218 = objc_claimAutoreleasedReturnValue();
          v221 = type;
          v222 = os_log_type_enabled(v218, type);
          if (v220)
          {
            if (v222)
            {
              *(_DWORD *)v413 = 136446466;
              v414 = "nw_agent_read_message_on_queue";
              v415 = 2082;
              v416 = v220;
              _os_log_impl(&dword_182FBE000, v218, v221, "%{public}s No handler for CLOSE_NEXUS, dumping backtrace:%{public}s", v413, 0x16u);
            }

            free(v220);
            goto LABEL_457;
          }
          if (v222)
          {
            *(_DWORD *)v413 = 136446210;
            v414 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_182FBE000, v218, v221, "%{public}s No handler for CLOSE_NEXUS, no backtrace", v413, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v218 = objc_claimAutoreleasedReturnValue();
          v223 = type;
          if (os_log_type_enabled(v218, type))
          {
            *(_DWORD *)v413 = 136446210;
            v414 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_182FBE000, v218, v223, "%{public}s No handler for CLOSE_NEXUS, backtrace limit exceeded", v413, 0xCu);
          }
        }
LABEL_456:

      }
LABEL_457:
      if (v217)
        free(v217);
LABEL_459:

      _Block_object_dispose(out, 8);
      v198 = *v114;
      v116 = lock;
    }
  }
  if (v198 == 18)
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = out;
    *(_QWORD *)&out[16] = 0x3032000000;
    *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
    *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
    *(_QWORD *)&out[40] = 0;
    v310[0] = MEMORY[0x1E0C809B0];
    v310[1] = 3221225472;
    v311 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_181;
    v312 = &unk_1E14ACE40;
    v314 = out;
    v313 = v298;
    v232 = v313;
    v233 = v310;
    os_unfair_lock_lock(v116);
    v311((uint64_t)v233);
    os_unfair_lock_unlock(v116);

    v234 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
    if (v234)
    {
      v307[0] = MEMORY[0x1E0C809B0];
      v307[1] = 3221225472;
      v307[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_182;
      v307[3] = &unk_1E14AB410;
      v308 = v232;
      v309 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, _BOOL8, _QWORD *))(v234 + 16))(v234, v309, v294, v307);

      goto LABEL_481;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v235 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v236 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v236, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v237 = objc_claimAutoreleasedReturnValue();
        v238 = type;
        if (os_log_type_enabled(v237, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v237, v238, "%{public}s No handler for ADD_GROUP_MEMBERS", v413, 0xCu);
        }
        goto LABEL_478;
      }
      if (v405)
      {
        v239 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v237 = objc_claimAutoreleasedReturnValue();
        v240 = type;
        v241 = os_log_type_enabled(v237, type);
        if (v239)
        {
          if (v241)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v239;
            _os_log_impl(&dword_182FBE000, v237, v240, "%{public}s No handler for ADD_GROUP_MEMBERS, dumping backtrace:%{public}s", v413, 0x16u);
          }

          free(v239);
          goto LABEL_479;
        }
        if (v241)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v237, v240, "%{public}s No handler for ADD_GROUP_MEMBERS, no backtrace", v413, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v237 = objc_claimAutoreleasedReturnValue();
        v242 = type;
        if (os_log_type_enabled(v237, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v237, v242, "%{public}s No handler for ADD_GROUP_MEMBERS, backtrace limit exceeded", v413, 0xCu);
        }
      }
LABEL_478:

    }
LABEL_479:
    if (v236)
      free(v236);
LABEL_481:

    _Block_object_dispose(out, 8);
    v198 = *v114;
    v116 = lock;
  }
  if (v198 == 19)
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = out;
    *(_QWORD *)&out[16] = 0x3032000000;
    *(_QWORD *)&out[24] = __Block_byref_object_copy__79006;
    *(_QWORD *)&out[32] = __Block_byref_object_dispose__79007;
    *(_QWORD *)&out[40] = 0;
    v302[0] = MEMORY[0x1E0C809B0];
    v302[1] = 3221225472;
    v303 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_183;
    v304 = &unk_1E14ACE40;
    v306 = out;
    v305 = v298;
    v243 = v305;
    v244 = v302;
    os_unfair_lock_lock(v116);
    v303((uint64_t)v244);
    os_unfair_lock_unlock(v116);

    v245 = *(_QWORD *)(*(_QWORD *)&out[8] + 40);
    if (v245)
    {
      v299[0] = MEMORY[0x1E0C809B0];
      v299[1] = 3221225472;
      v299[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_184;
      v299[3] = &unk_1E14AB410;
      v300 = v243;
      v301 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, _BOOL8, _QWORD *))(v245 + 16))(v245, v301, v294, v299);

      goto LABEL_503;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v246 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v247 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v405 = 0;
    if (__nwlog_fault(v247, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v248 = objc_claimAutoreleasedReturnValue();
        v249 = type;
        if (os_log_type_enabled(v248, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v248, v249, "%{public}s No handler for REMOVE_GROUP_MEMBERS", v413, 0xCu);
        }
        goto LABEL_500;
      }
      if (v405)
      {
        v250 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v248 = objc_claimAutoreleasedReturnValue();
        v251 = type;
        v252 = os_log_type_enabled(v248, type);
        if (v250)
        {
          if (v252)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v250;
            _os_log_impl(&dword_182FBE000, v248, v251, "%{public}s No handler for REMOVE_GROUP_MEMBERS, dumping backtrace:%{public}s", v413, 0x16u);
          }

          free(v250);
          goto LABEL_501;
        }
        if (v252)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v248, v251, "%{public}s No handler for REMOVE_GROUP_MEMBERS, no backtrace", v413, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v248 = objc_claimAutoreleasedReturnValue();
        v253 = type;
        if (os_log_type_enabled(v248, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_182FBE000, v248, v253, "%{public}s No handler for REMOVE_GROUP_MEMBERS, backtrace limit exceeded", v413, 0xCu);
        }
      }
LABEL_500:

    }
LABEL_501:
    if (v247)
      free(v247);
LABEL_503:

    _Block_object_dispose(out, 8);
  }
  v254 = (void *)v402[3];
  if (v254)
  {
    free(v254);
    v402[3] = 0;
  }

LABEL_507:
  _Block_object_dispose(buf, 8);

LABEL_508:
  _Block_object_dispose(&v401, 8);

  return v297;
}

void sub_183AB0BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  uint64_t v32;

  _Block_object_dispose((const void *)(v32 - 192), 8);
  _Block_object_dispose((const void *)(v32 - 240), 8);

  _Block_object_dispose(&STACK[0x578], 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke(uint64_t a1, int a2)
{
  char v3;

  v3 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = nw_network_agent_ctl_copy_received_agent_message(a2, &v3);
  return 1;
}

void *__Block_byref_object_copy__79006(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__79007(uint64_t a1)
{

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_153(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 824));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t __Block_byref_object_copy__154(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__155(uint64_t a1)
{

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_156(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 240));
}

NWConcrete_nw_agent_client *nw_agent_client_create(unsigned __int8 *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NWConcrete_nw_agent_client *v7;
  unsigned int *v8;
  id v9;
  unsigned int v10;
  const unsigned __int8 *v11;
  _BOOL8 v12;
  OS_nw_path *path;
  NSObject *v14;
  nw_endpoint_t v15;
  OS_nw_endpoint *endpoint;
  OS_nw_parameters *v17;
  OS_nw_parameters *parameters;
  OS_nw_advertise_descriptor *v19;
  OS_nw_advertise_descriptor *advertise_descriptor;
  OS_nw_browse_descriptor *v21;
  OS_nw_browse_descriptor *browse_descriptor;
  OS_nw_group_descriptor *v23;
  OS_nw_group_descriptor *group_descriptor;
  nw_parameters_t v25;
  OS_nw_parameters *v26;
  unsigned int v27;
  int next_id;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t receiver;
  void *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  void *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  char *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  char *backtrace_string;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  void *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  char *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  os_log_type_t v61;
  char v62;
  objc_super v63;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  char *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = [NWConcrete_nw_agent_client alloc];
  v8 = (unsigned int *)v5;
  v9 = v6;
  if (v7)
  {
    if (a1)
    {
      v63.receiver = v7;
      v63.super_class = (Class)NWConcrete_nw_agent_client;
      v7 = (NWConcrete_nw_agent_client *)objc_msgSendSuper2(&v63, sel_init);
      if (v7)
      {
        v10 = *a1;
        if (v10 > 0x13)
          goto LABEL_13;
        if (((1 << v10) & 0xCF400) != 0)
        {
          if (*((_DWORD *)a1 + 3) > 0xFu)
          {
            v11 = a1 + 16;
            if (!uuid_is_null(v11))
            {
              *(_OWORD *)v7->client_uuid = *(_OWORD *)v11;
              v12 = nw_path_copy_path_for_client_with_context((uint64_t)v11);
              path = v7->path;
              v7->path = (OS_nw_path *)v12;

              v14 = v7->path;
              if (v14)
              {
                v15 = nw_path_copy_effective_remote_endpoint(v14);
                endpoint = v7->endpoint;
                v7->endpoint = (OS_nw_endpoint *)v15;

                v17 = (OS_nw_parameters *)nw_path_copy_parameters(v7->path);
                parameters = v7->parameters;
                v7->parameters = v17;

                v19 = (OS_nw_advertise_descriptor *)nw_path_copy_advertise_descriptor(v7->path);
                advertise_descriptor = v7->advertise_descriptor;
                v7->advertise_descriptor = v19;

                v21 = (OS_nw_browse_descriptor *)nw_path_copy_browse_descriptor(v7->path);
                browse_descriptor = v7->browse_descriptor;
                v7->browse_descriptor = v21;

                v23 = (OS_nw_group_descriptor *)nw_path_copy_group_descriptor(v7->path);
                group_descriptor = v7->group_descriptor;
                v7->group_descriptor = v23;

              }
            }
            goto LABEL_13;
          }
          __nwlog_obj();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
          v39 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v62 = 0;
          if (!__nwlog_fault(v39, &type, &v62))
            goto LABEL_73;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v40 = objc_claimAutoreleasedReturnValue();
            v41 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)buf = 136446210;
              v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_client_message))", buf, 0xCu);
            }
          }
          else if (v62)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v40 = objc_claimAutoreleasedReturnValue();
            v49 = type;
            v50 = os_log_type_enabled(v40, type);
            if (backtrace_string)
            {
              if (v50)
              {
                *(_DWORD *)buf = 136446466;
                v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
                v67 = 2082;
                v68 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v40, v49, "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_client_message)), dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_73;
            }
            if (v50)
            {
              *(_DWORD *)buf = 136446210;
              v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl(&dword_182FBE000, v40, v49, "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_client_message)), no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v40 = objc_claimAutoreleasedReturnValue();
            v53 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)buf = 136446210;
              v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl(&dword_182FBE000, v40, v53, "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_client_message)), backtrace limit exceeded", buf, 0xCu);
            }
          }

LABEL_73:
          if (v39)
            free(v39);
LABEL_75:

LABEL_76:
          v7 = 0;
          goto LABEL_14;
        }
        if (v10 != 5)
        {
LABEL_13:
          v27 = v8[3];
          next_id = nw_agent_client_get_next_id(v8 + 4);
          snprintf(v7->log_string, 8uLL, "%u.%u", v27, next_id);
          goto LABEL_14;
        }
        if (*((_DWORD *)a1 + 3) > 0x17u)
        {
          v25 = nw_parameters_create();
          v26 = v7->parameters;
          v7->parameters = (OS_nw_parameters *)v25;

          nw_parameters_set_pid(v7->parameters, *((_DWORD *)a1 + 5));
          nw_parameters_set_e_proc_uuid(v7->parameters, a1 + 24);
          goto LABEL_13;
        }
        __nwlog_obj();
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
        v55 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v62 = 0;
        if (__nwlog_fault(v55, &type, &v62))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v56 = objc_claimAutoreleasedReturnValue();
            v57 = type;
            if (os_log_type_enabled(v56, type))
            {
              *(_DWORD *)buf = 136446210;
              v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_trigger_message))", buf, 0xCu);
            }
          }
          else if (v62)
          {
            v58 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v56 = objc_claimAutoreleasedReturnValue();
            v59 = type;
            v60 = os_log_type_enabled(v56, type);
            if (v58)
            {
              if (v60)
              {
                *(_DWORD *)buf = 136446466;
                v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
                v67 = 2082;
                v68 = v58;
                _os_log_impl(&dword_182FBE000, v56, v59, "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_trigger_message)), dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v58);
              goto LABEL_88;
            }
            if (v60)
            {
              *(_DWORD *)buf = 136446210;
              v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl(&dword_182FBE000, v56, v59, "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_trigger_message)), no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v56 = objc_claimAutoreleasedReturnValue();
            v61 = type;
            if (os_log_type_enabled(v56, type))
            {
              *(_DWORD *)buf = 136446210;
              v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              _os_log_impl(&dword_182FBE000, v56, v61, "%{public}s called with null (header->message_payload_length >= sizeof(struct netagent_trigger_message)), backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_88:
        if (v55)
          free(v55);
        goto LABEL_75;
      }
      __nwlog_obj();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
      v35 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v62 = 0;
      if ((__nwlog_fault(v35, &type, &v62) & 1) != 0)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)buf = 136446210;
            v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
            _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s [super init] failed", buf, 0xCu);
          }
        }
        else if (v62)
        {
          v45 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v46 = type;
          v47 = os_log_type_enabled(v36, type);
          if (v45)
          {
            if (v47)
            {
              *(_DWORD *)buf = 136446466;
              v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
              v67 = 2082;
              v68 = v45;
              _os_log_impl(&dword_182FBE000, v36, v46, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v45);
            goto LABEL_63;
          }
          if (v47)
          {
            *(_DWORD *)buf = 136446210;
            v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
            _os_log_impl(&dword_182FBE000, v36, v46, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v52 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)buf = 136446210;
            v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
            _os_log_impl(&dword_182FBE000, v36, v52, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_63:
      if (v35)
        free(v35);
      goto LABEL_76;
    }
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
    v31 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v63.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v31, &v63, &type))
    {
      if (LOBYTE(v63.receiver) == 17)
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        receiver = (os_log_type_t)v63.receiver;
        if (os_log_type_enabled(v32, (os_log_type_t)v63.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
          _os_log_impl(&dword_182FBE000, v32, receiver, "%{public}s called with null message", buf, 0xCu);
        }
      }
      else if (type)
      {
        v42 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v43 = (os_log_type_t)v63.receiver;
        v44 = os_log_type_enabled(v32, (os_log_type_t)v63.receiver);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
            v67 = 2082;
            v68 = v42;
            _os_log_impl(&dword_182FBE000, v32, v43, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v42);
          goto LABEL_57;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
          _os_log_impl(&dword_182FBE000, v32, v43, "%{public}s called with null message, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v51 = (os_log_type_t)v63.receiver;
        if (os_log_type_enabled(v32, (os_log_type_t)v63.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v66 = "-[NWConcrete_nw_agent_client initWithMessage:agent:context:]";
          _os_log_impl(&dword_182FBE000, v32, v51, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_57:
    if (v31)
      free(v31);

    goto LABEL_76;
  }
LABEL_14:

  return v7;
}

void sub_183AB1AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_157(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 752));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2(uint64_t a1, int a2, int a3, void *a4)
{
  nw_agent_change_state(*(void **)(a1 + 32), a2, a3, a4);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_159(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 752));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_160(uint64_t a1, int a2, int a3, void *a4)
{
  nw_agent_change_state(*(void **)(a1 + 32), a2, a3, a4);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_161(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 832));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_162(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 792));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_163(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 endpoint_array_result;
  char *v5;
  void *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke_2";
    v7 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null discovered_endpoints", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null discovered_endpoints, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null discovered_endpoints, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null discovered_endpoints, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_22:
    if (!v7)
      goto LABEL_5;
    v5 = (char *)v7;
    goto LABEL_4;
  }
  *(_QWORD *)buf = 0;
  endpoint_array_result = nw_path_create_endpoint_array_result(buf, v3, 202);
  nw_agent_assign(*(NWConcrete_nw_agent **)(a1 + 32), (unsigned __int8 *)endpoint_array_result, *(size_t *)buf, (unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 8), 0);
  if (endpoint_array_result)
  {
    v5 = (char *)endpoint_array_result;
LABEL_4:
    free(v5);
  }
LABEL_5:

}

void sub_183AB1EEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_166(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 800));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_167(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 24 * *(unsigned __int8 *)(a1 + 48) + 360));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_168(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 endpoint_array_result;
  char *v5;
  void *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke_2";
    v7 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null resolved_endpoints", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null resolved_endpoints, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null resolved_endpoints, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_read_message_on_queue_block_invoke";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null resolved_endpoints, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_22:
    if (!v7)
      goto LABEL_5;
    v5 = (char *)v7;
    goto LABEL_4;
  }
  *(_QWORD *)buf = 0;
  endpoint_array_result = nw_path_create_endpoint_array_result(buf, v3, 203);
  nw_agent_assign(*(NWConcrete_nw_agent **)(a1 + 32), (unsigned __int8 *)endpoint_array_result, *(size_t *)buf, (unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 8), 0);
  if (endpoint_array_result)
  {
    v5 = (char *)endpoint_array_result;
LABEL_4:
    free(v5);
  }
LABEL_5:

}

void sub_183AB2250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_169(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 24 * *(unsigned __int8 *)(a1 + 48) + 368));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_170(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 760));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_171(uint64_t a1, int a2, int a3, void *a4)
{
  nw_agent_change_state(*(void **)(a1 + 32), a2, a3, a4);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_172(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 768));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_173(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 776));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_174(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  os_unfair_lock_s *v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  id v19;
  id v20;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 32);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_3;
  v16[3] = &unk_1E14AB460;
  v16[4] = v7;
  v17 = v10;
  v18 = v8;
  v11 = *(id *)(a1 + 40);
  v19 = v11;
  v20 = v9;
  v12 = (os_unfair_lock_s *)v17;
  v13 = v9;
  v14 = v8;
  v15 = v7;
  os_unfair_lock_lock(v12 + 2);
  ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_3((uint64_t)v16);
  os_unfair_lock_unlock(v12 + 2);

}

void sub_183AB2460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_177(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  int pid;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  char __str[16];
  __int128 v26;
  char v27[21];
  char out[40];
  __int128 uu;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
  if (v1)
  {
    v3 = v1;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 80);
    *(_QWORD *)(v4 + 80) = 0;

    v6 = *(_QWORD *)(a1 + 40);
    if (*(char *)(v6 + 856) < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s Closing channel on nexus", (uint8_t *)__str, 0xCu);
      }

      nw_channel_close((uint64_t)v3, v13);
    }
    else
    {
      v17 = 0;
      v18 = &v17;
      v19 = 0x2020000000;
      v20 = 1;
      v7 = *(_QWORD *)(v6 + 736);
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_178;
      v14[3] = &unk_1E14AB4B0;
      v8 = v3;
      v15 = v8;
      v16 = &v17;
      nw_dictionary_apply(v7, (uint64_t)v14);
      if (*((_BYTE *)v18 + 24))
      {
        uu = 0uLL;
        nw_parameters_get_proc_uuid(*(void **)(*(_QWORD *)(a1 + 32) + 40), &uu);
        memset(out, 0, 37);
        uuid_unparse((const unsigned __int8 *)&uu, out);
        pid = nw_parameters_get_pid(*(void **)(*(_QWORD *)(a1 + 32) + 40));
        v26 = 0u;
        memset(v27, 0, sizeof(v27));
        *(_OWORD *)__str = 0u;
        snprintf(__str, 0x35uLL, "%d-%s", pid, out);
        nw_dictionary_set_value(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 744), __str, 0);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_agent_read_message_on_queue_block_invoke";
          v23 = 2080;
          v24 = __str;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s Removing channel on nexus for %s", buf, 0x16u);
        }

        nw_channel_close((uint64_t)v8, v11);
      }

      _Block_object_dispose(&v17, 8);
    }

  }
}

void sub_183AB2730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_180(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 784));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_181(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 808));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_182(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    nw_agent_send_group_member_update(*(void **)(a1 + 32), *(void **)(a1 + 40), v3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_agent_read_message_on_queue_block_invoke_2";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null assign_members", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_agent_read_message_on_queue_block_invoke";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null assign_members, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null assign_members, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null assign_members, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183AB2A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_183(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 816));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_184(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    nw_agent_send_group_member_update(*(void **)(a1 + 32), *(void **)(a1 + 40), v3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_agent_read_message_on_queue_block_invoke_2";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null assign_members", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_agent_read_message_on_queue_block_invoke";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null assign_members, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null assign_members, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null assign_members, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183AB2D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 80) == *(_QWORD *)(a1 + 32))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL8 assign_message_internal;
  char *v7;
  int pid;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _BOOL8 channel_to_new_instance_and_context;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t key;
  NSObject *v29;
  const char *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void **v36;
  id v37;
  void *v38;
  id v39;
  _BOOL8 v40;
  char *v41;
  void *v42;
  const char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *backtrace_string;
  os_log_type_t v47;
  _BOOL4 v48;
  void *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  void *v53;
  const char *v54;
  NSObject *v55;
  os_log_type_t v56;
  void *v57;
  os_log_type_t v58;
  void *v59;
  os_log_type_t v60;
  char *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  char *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  char *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  os_log_type_t v70;
  _BOOL4 v71;
  os_log_type_t v72;
  void *v73;
  NSObject *v74;
  os_log_type_t v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  os_log_type_t v79;
  os_log_type_t v80;
  os_log_type_t v81;
  os_log_type_t v82;
  os_log_type_t v83;
  const void *v84;
  id v85;
  id v86;
  id v87;
  char v88;
  os_log_type_t type[8];
  unsigned int v90;
  int v91;
  os_log_type_t v92;
  __int128 v93;
  char __str[16];
  __int128 v95;
  char v96[21];
  size_t out[6];
  __int128 uu;
  _QWORD buf[5];
  void **v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32) || (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 856) & 2) == 0 && !*(_QWORD *)(a1 + 48))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80);
    out[0] = 0;
    memset(__str, 0, sizeof(__str));
    if (v4)
      v5 = 54;
    else
      v5 = 61;
    assign_message_internal = nw_path_create_assign_message_internal(out, __str, v5, 0, 0, 0, 0, 0);
    if (assign_message_internal)
    {
      nw_agent_assign(*(NWConcrete_nw_agent **)(a1 + 40), (unsigned __int8 *)assign_message_internal, out[0], (unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 8), 0);
      v7 = (char *)assign_message_internal;
LABEL_13:
      free(v7);
      return;
    }
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke_3";
    v43 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(uu) = 16;
    LOBYTE(v93) = 0;
    if (!__nwlog_fault(v43, &uu, &v93))
      goto LABEL_109;
    if (uu == 17)
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v45 = uu;
      if (os_log_type_enabled(v44, (os_log_type_t)uu))
      {
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null assign_message", (uint8_t *)buf, 0xCu);
      }
    }
    else if ((_BYTE)v93)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v47 = uu;
      v48 = os_log_type_enabled(v44, (os_log_type_t)uu);
      if (backtrace_string)
      {
        if (v48)
        {
          LODWORD(buf[0]) = 136446466;
          *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = backtrace_string;
          _os_log_impl(&dword_182FBE000, v44, v47, "%{public}s called with null assign_message, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }

        free(backtrace_string);
LABEL_109:
        if (!v43)
          return;
        goto LABEL_110;
      }
      if (v48)
      {
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v44, v47, "%{public}s called with null assign_message, no backtrace", (uint8_t *)buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v72 = uu;
      if (os_log_type_enabled(v44, (os_log_type_t)uu))
      {
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
        _os_log_impl(&dword_182FBE000, v44, v72, "%{public}s called with null assign_message, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
      }
    }

    goto LABEL_109;
  }
  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(v2 + 80))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s Client already assigned channel", (uint8_t *)buf, 0xCu);
    }

    return;
  }
  uu = 0uLL;
  nw_parameters_get_proc_uuid(*(void **)(v2 + 40), &uu);
  memset(out, 0, 37);
  uuid_unparse((const unsigned __int8 *)&uu, (char *)out);
  pid = nw_parameters_get_pid(*(void **)(*(_QWORD *)(a1 + 56) + 40));
  v95 = 0u;
  memset(v96, 0, sizeof(v96));
  *(_OWORD *)__str = 0u;
  snprintf(__str, 0x35uLL, "%d-%s", pid, (const char *)out);
  v9 = *(_QWORD *)(a1 + 40);
  if (!*(_QWORD *)(v9 + 744))
  {
    v10 = nw_dictionary_create();
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *(void **)(v11 + 744);
    *(_QWORD *)(v11 + 744) = v10;

    v9 = *(_QWORD *)(a1 + 40);
    if (*(char *)(v9 + 856) < 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  if ((*(char *)(v9 + 856) & 0x80000000) == 0)
  {
LABEL_18:
    v13 = nw_dictionary_copy_value(*(_QWORD *)(v9 + 744), (uint64_t)__str);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(void **)(v14 + 80);
    *(_QWORD *)(v14 + 80) = v13;

  }
LABEL_19:
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(v16 + 80);
  if (v17)
    goto LABEL_32;
  v18 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v18 + 240);
  v19 = *(_QWORD *)(v18 + 248);
  if (v20)
  {
    v21 = *(_DWORD **)(v18 + 240);
  }
  else
  {
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    v21 = (id)nw_context_copy_implicit_context::implicit_context;
  }
  channel_to_new_instance_and_context = nw_nexus_create_channel_to_new_instance_and_context(v19, v21);
  v23 = *(_QWORD *)(a1 + 56);
  v24 = *(void **)(v23 + 80);
  *(_QWORD *)(v23 + 80) = channel_to_new_instance_and_context;

  if (!v20)
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80);
  if (v25)
  {
    v26 = *(void **)(*(_QWORD *)(a1 + 40) + 248);
    if (v26)
      v26 = os_retain(v26);
    *(_QWORD *)(v25 + 160) = v26;
    nw_channel_set_close_automatically(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80), 1);
    nw_channel_set_no_close_delay(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80));
    v27 = *(_QWORD *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 56);
    if ((*(char *)(v27 + 856) & 0x80000000) == 0)
    {
      nw_dictionary_set_value(*(_QWORD *)(v27 + 744), __str, *(void **)(v16 + 80));
      v16 = *(_QWORD *)(a1 + 56);
    }
LABEL_32:
    v93 = 0uLL;
    v91 = 0;
    nw_channel_get_nexus_instance(*(_QWORD *)(v16 + 80), &v93, &v91);
    v90 = 0;
    key = nw_channel_get_key(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80), &v90);
    v84 = (const void *)key;
    if (v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v29 = (id)gLogObj;
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        goto LABEL_38;
      LODWORD(buf[0]) = 136446978;
      *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
      WORD2(buf[1]) = 1040;
      *(_DWORD *)((char *)&buf[1] + 6) = 16;
      WORD1(buf[2]) = 2096;
      *(_QWORD *)((char *)&buf[2] + 4) = &v93;
      WORD2(buf[3]) = 2080;
      *(_QWORD *)((char *)&buf[3] + 6) = __str;
      v30 = "%{public}s Reusing channel on nexus %{uuid_t}.16P for %s";
    }
    else
    {
      nw_nexus_bind_client_port(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 248), (uint64_t)&v93, 0, 0, key, v90);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v29 = (id)gLogObj;
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        goto LABEL_38;
      LODWORD(buf[0]) = 136446978;
      *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
      WORD2(buf[1]) = 1040;
      *(_DWORD *)((char *)&buf[1] + 6) = 16;
      WORD1(buf[2]) = 2096;
      *(_QWORD *)((char *)&buf[2] + 4) = &v93;
      WORD2(buf[3]) = 2080;
      *(_QWORD *)((char *)&buf[3] + 6) = __str;
      v30 = "%{public}s Creating channel on nexus %{uuid_t}.16P for %s";
    }
    _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, v30, (uint8_t *)buf, 0x26u);
LABEL_38:

    v87 = nw_framer_options_copy_peer_protocol_definition(*(void **)(a1 + 64));
    v31 = *(void **)(a1 + 32);
    v33 = *(void **)(a1 + 48);
    v32 = *(void **)(a1 + 56);
    v34 = *(void **)(a1 + 64);
    v35 = *(id *)(a1 + 40);
    v36 = v32;
    v85 = v31;
    v86 = v33;
    v37 = v34;
    v38 = v37;
    if (v35)
    {
      if (!v36)
      {
        __nwlog_obj();
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
        v50 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v92 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v50, type, &v92))
          goto LABEL_143;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v51 = objc_claimAutoreleasedReturnValue();
          v58 = type[0];
          if (os_log_type_enabled(v51, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
            _os_log_impl(&dword_182FBE000, v51, v58, "%{public}s called with null client", (uint8_t *)buf, 0xCu);
          }
          goto LABEL_142;
        }
        if (v92 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v51 = objc_claimAutoreleasedReturnValue();
          v81 = type[0];
          if (os_log_type_enabled(v51, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
            _os_log_impl(&dword_182FBE000, v51, v81, "%{public}s called with null client, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
          goto LABEL_142;
        }
        v67 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v68 = type[0];
        v69 = os_log_type_enabled(v51, type[0]);
        if (!v67)
        {
          if (v69)
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
            _os_log_impl(&dword_182FBE000, v51, v68, "%{public}s called with null client, no backtrace", (uint8_t *)buf, 0xCu);
          }
          goto LABEL_142;
        }
        if (v69)
        {
          LODWORD(buf[0]) = 136446466;
          *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v67;
          _os_log_impl(&dword_182FBE000, v51, v68, "%{public}s called with null client, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }
        goto LABEL_96;
      }
      if (v37)
      {
        v39 = nw_parameters_copy_context(v36[5]);
        buf[0] = MEMORY[0x1E0C809B0];
        buf[1] = 3221225472;
        buf[2] = ___ZL31nw_agent_client_attach_protocolP19NWConcrete_nw_agentP26NWConcrete_nw_agent_clientPU25objcproto14OS_nw_endpoint8NSObjectS5_PU33objcproto22OS_nw_protocol_optionsS3__block_invoke;
        buf[3] = &unk_1E14AB460;
        buf[4] = v35;
        v100 = v36;
        v101 = v38;
        v102 = v85;
        v103 = v86;
        nw_queue_context_async(v39, buf);

        goto LABEL_42;
      }
      __nwlog_obj();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
      v50 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v92 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v50, type, &v92))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v51 = objc_claimAutoreleasedReturnValue();
          v60 = type[0];
          if (os_log_type_enabled(v51, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
            _os_log_impl(&dword_182FBE000, v51, v60, "%{public}s called with null options", (uint8_t *)buf, 0xCu);
          }
LABEL_142:

          goto LABEL_143;
        }
        if (v92 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v51 = objc_claimAutoreleasedReturnValue();
          v82 = type[0];
          if (os_log_type_enabled(v51, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
            _os_log_impl(&dword_182FBE000, v51, v82, "%{public}s called with null options, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
          goto LABEL_142;
        }
        v67 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v70 = type[0];
        v71 = os_log_type_enabled(v51, type[0]);
        if (!v67)
        {
          if (v71)
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
            _os_log_impl(&dword_182FBE000, v51, v70, "%{public}s called with null options, no backtrace", (uint8_t *)buf, 0xCu);
          }
          goto LABEL_142;
        }
        if (v71)
        {
          LODWORD(buf[0]) = 136446466;
          *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v67;
          _os_log_impl(&dword_182FBE000, v51, v70, "%{public}s called with null options, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }
LABEL_96:

        free(v67);
        if (!v50)
        {
LABEL_42:

          *(_QWORD *)type = 0;
          v40 = nw_path_create_assign_message_internal((size_t *)type, &v93, 0, v84, v90, *(void **)(a1 + 32), *(void **)(a1 + 48), v87);
          if (v40)
          {
            nw_agent_assign(*(NWConcrete_nw_agent **)(a1 + 40), (unsigned __int8 *)v40, *(size_t *)type, (unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 8), 0);
            v41 = (char *)v40;
            goto LABEL_44;
          }
          __nwlog_obj();
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
          v54 = (const char *)_os_log_send_and_compose_impl();

          v92 = OS_LOG_TYPE_ERROR;
          v88 = 0;
          if (__nwlog_fault(v54, &v92, &v88))
          {
            if (v92 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v55 = objc_claimAutoreleasedReturnValue();
              v56 = v92;
              if (os_log_type_enabled(v55, v92))
              {
                LODWORD(buf[0]) = 136446210;
                *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
                _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s called with null assign_message", (uint8_t *)buf, 0xCu);
              }
            }
            else if (v88)
            {
              v64 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v55 = objc_claimAutoreleasedReturnValue();
              v65 = v92;
              v66 = os_log_type_enabled(v55, v92);
              if (v64)
              {
                if (v66)
                {
                  LODWORD(buf[0]) = 136446466;
                  *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
                  WORD2(buf[1]) = 2082;
                  *(_QWORD *)((char *)&buf[1] + 6) = v64;
                  _os_log_impl(&dword_182FBE000, v55, v65, "%{public}s called with null assign_message, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
                }

                free(v64);
                goto LABEL_135;
              }
              if (v66)
              {
                LODWORD(buf[0]) = 136446210;
                *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
                _os_log_impl(&dword_182FBE000, v55, v65, "%{public}s called with null assign_message, no backtrace", (uint8_t *)buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v55 = objc_claimAutoreleasedReturnValue();
              v80 = v92;
              if (os_log_type_enabled(v55, v92))
              {
                LODWORD(buf[0]) = 136446210;
                *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
                _os_log_impl(&dword_182FBE000, v55, v80, "%{public}s called with null assign_message, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
              }
            }

          }
LABEL_135:
          if (!v54)
            goto LABEL_45;
          v41 = (char *)v54;
LABEL_44:
          free(v41);
LABEL_45:

          return;
        }
LABEL_144:
        free(v50);
        goto LABEL_42;
      }
    }
    else
    {
      __nwlog_obj();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
      v50 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v92 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v50, type, &v92))
        goto LABEL_143;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v52 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
          _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s called with null agent", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_142;
      }
      if (v92 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v79 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
          _os_log_impl(&dword_182FBE000, v51, v79, "%{public}s called with null agent, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_142;
      }
      v61 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v51 = objc_claimAutoreleasedReturnValue();
      v62 = type[0];
      v63 = os_log_type_enabled(v51, type[0]);
      if (!v61)
      {
        if (v63)
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
          _os_log_impl(&dword_182FBE000, v51, v62, "%{public}s called with null agent, no backtrace", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_142;
      }
      if (v63)
      {
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "nw_agent_client_attach_protocol";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v61;
        _os_log_impl(&dword_182FBE000, v51, v62, "%{public}s called with null agent, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
      }

      free(v61);
    }
LABEL_143:
    if (!v50)
      goto LABEL_42;
    goto LABEL_144;
  }
  __nwlog_obj();
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(buf[0]) = 136446210;
  *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
  v43 = (const char *)_os_log_send_and_compose_impl();

  LOBYTE(v93) = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v43, &v93, type))
    goto LABEL_109;
  if (v93 == 17)
  {
    __nwlog_obj();
    v74 = objc_claimAutoreleasedReturnValue();
    v75 = v93;
    if (os_log_type_enabled(v74, (os_log_type_t)v93))
    {
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
      _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s called with null client->channel", (uint8_t *)buf, 0xCu);
    }
LABEL_150:

    goto LABEL_109;
  }
  if (type[0] == OS_LOG_TYPE_DEFAULT)
  {
    __nwlog_obj();
    v74 = objc_claimAutoreleasedReturnValue();
    v83 = v93;
    if (os_log_type_enabled(v74, (os_log_type_t)v93))
    {
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
      _os_log_impl(&dword_182FBE000, v74, v83, "%{public}s called with null client->channel, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_150;
  }
  v76 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v74 = objc_claimAutoreleasedReturnValue();
  v77 = v93;
  v78 = os_log_type_enabled(v74, (os_log_type_t)v93);
  if (!v76)
  {
    if (v78)
    {
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
      _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s called with null client->channel, no backtrace", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_150;
  }
  if (v78)
  {
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = "nw_agent_read_message_on_queue_block_invoke";
    WORD2(buf[1]) = 2082;
    *(_QWORD *)((char *)&buf[1] + 6) = v76;
    _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s called with null client->channel, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
  }

  free(v76);
  if (v43)
  {
LABEL_110:
    v7 = (char *)v43;
    goto LABEL_13;
  }
}

void sub_183AB3FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  id *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void ___ZL31nw_agent_client_attach_protocolP19NWConcrete_nw_agentP26NWConcrete_nw_agent_clientPU25objcproto14OS_nw_endpoint8NSObjectS5_PU33objcproto22OS_nw_protocol_optionsS3__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  os_unfair_lock_s *v7;
  _QWORD v8[8];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZL31nw_agent_client_attach_protocolP19NWConcrete_nw_agentP26NWConcrete_nw_agent_clientPU25objcproto14OS_nw_endpoint8NSObjectS5_PU33objcproto22OS_nw_protocol_optionsS3__block_invoke_2;
  v8[3] = &unk_1E14AB4D8;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v8[4] = v3;
  v4 = *(id *)(a1 + 48);
  v8[5] = v4;
  v5 = *(id *)(a1 + 56);
  v8[6] = v5;
  v6 = *(id *)(a1 + 64);
  v8[7] = v6;
  v7 = v2;
  os_unfair_lock_lock(v7 + 2);
  ___ZL31nw_agent_client_attach_protocolP19NWConcrete_nw_agentP26NWConcrete_nw_agent_clientPU25objcproto14OS_nw_endpoint8NSObjectS5_PU33objcproto22OS_nw_protocol_optionsS3__block_invoke_2((uint64_t)v8);
  os_unfair_lock_unlock(v7 + 2);

}

void sub_183AB4130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void ___ZL31nw_agent_client_attach_protocolP19NWConcrete_nw_agentP26NWConcrete_nw_agent_clientPU25objcproto14OS_nw_endpoint8NSObjectS5_PU33objcproto22OS_nw_protocol_optionsS3__block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  NWConcrete_nw_protocol_options *v3;
  uint64_t protocol_handler;
  nw_protocol_definition_t v5;
  nw_protocol_definition_t v6;
  NSObject *v7;
  char isa;
  uint64_t v9;
  uint64_t (*v10)(NSObject *, NSObject *, _QWORD, _QWORD);
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void (**v17)(uint64_t, _QWORD);
  void (*v18)(uint64_t, _QWORD);
  void (**v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD);
  NSObject *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  void *v39;
  os_log_type_t v40;
  void *v41;
  os_log_type_t v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  const char *v46;
  char *backtrace_string;
  os_log_type_t v48;
  _BOOL4 v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  char *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  const char *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  const char *v62;
  char *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  const char *v66;
  os_log_type_t v67;
  const char *v68;
  os_log_type_t v69;
  const char *v70;
  os_log_type_t v71;
  const char *v72;
  char *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  char *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  os_log_type_t v82;
  _BOOL4 v83;
  const char *v84;
  const char *v85;
  const char *v86;
  os_log_type_t v87;
  os_log_type_t v88;
  os_log_type_t v89;
  os_log_type_t v90;
  char v91;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v94;
  __int16 v95;
  _BYTE v96[18];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 80))
  {
    if (!*(_QWORD *)(v2 + 88))
    {
      v3 = nw_protocol_options_copy(*(void **)(a1 + 40));
      nw_protocol_options_set_log_id(v3, "A", (const char *)(*(_QWORD *)(a1 + 32) + 24), 1);
      protocol_handler = nw_channel_get_protocol_handler(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
      v5 = nw_protocol_options_copy_definition(&v3->super);
      v6 = v5;
      if (v5)
      {
        v7 = v5;
        isa = (char)v7[23].isa;

        if ((isa & 1) != 0)
        {
          v9 = nw_protocol_definition_get_framer_create(v7);
          if (v9)
          {
            v10 = (uint64_t (*)(NSObject *, NSObject *, _QWORD, _QWORD))v9;
            v11 = *(NSObject **)(a1 + 48);
            if (v11)
              nw_parameters_set_local_endpoint(*(nw_parameters_t *)(*(_QWORD *)(a1 + 32) + 40), v11);
            v12 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(*(_QWORD *)(a1 + 32) + 40));
            nw_protocol_stack_prepend_application_protocol(v12, &v3->super);
            v13 = v7;

            v14 = v10(v13 + 1, v13, *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
            nw_parameters_set_protocol_instance(v3, v15, v14);
            v16 = nw_agent_client_copy_path(*(void **)(a1 + 32));
            nw_path_get_client_id(v16, (_OWORD *)v14);

            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = v14;
            if (v14)
            {
              v17 = *(void (***)(uint64_t, _QWORD))(v14 + 24);
              if (v17)
              {
                v18 = *v17;
                if (v18)
                {
                  v18(v14, 0);
                  goto LABEL_12;
                }
              }
              __nwlog_obj();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = *(const char **)(v14 + 16);
              if (!v26)
                v26 = "invalid";
            }
            else
            {
              __nwlog_obj();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = "invalid";
            }
            *(_DWORD *)buf = 136446466;
            v94 = "nw_agent_client_attach_protocol_block_invoke";
            v95 = 2082;
            *(_QWORD *)v96 = v26;
            v43 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v91 = 0;
            if (__nwlog_fault(v43, &type, &v91))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v44 = objc_claimAutoreleasedReturnValue();
                v45 = type;
                if (os_log_type_enabled(v44, type))
                {
                  v46 = "invalid";
                  if (v14 && *(_QWORD *)(v14 + 16))
                    v46 = *(const char **)(v14 + 16);
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(_QWORD *)v96 = v46;
                  _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s protocol %{public}s has invalid add_input_handler callback", buf, 0x16u);
                }
              }
              else if (v91)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v44 = objc_claimAutoreleasedReturnValue();
                v48 = type;
                v49 = os_log_type_enabled(v44, type);
                if (backtrace_string)
                {
                  if (v49)
                  {
                    v50 = "invalid";
                    if (v14 && *(_QWORD *)(v14 + 16))
                      v50 = *(const char **)(v14 + 16);
                    *(_DWORD *)buf = 136446722;
                    v94 = "nw_agent_client_attach_protocol_block_invoke";
                    v95 = 2082;
                    *(_QWORD *)v96 = v50;
                    *(_WORD *)&v96[8] = 2082;
                    *(_QWORD *)&v96[10] = backtrace_string;
                    _os_log_impl(&dword_182FBE000, v44, v48, "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
                  }

                  free(backtrace_string);
                  goto LABEL_151;
                }
                if (v49)
                {
                  v84 = "invalid";
                  if (v14 && *(_QWORD *)(v14 + 16))
                    v84 = *(const char **)(v14 + 16);
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(_QWORD *)v96 = v84;
                  _os_log_impl(&dword_182FBE000, v44, v48, "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace", buf, 0x16u);
                }
              }
              else
              {
                __nwlog_obj();
                v44 = objc_claimAutoreleasedReturnValue();
                v67 = type;
                if (os_log_type_enabled(v44, type))
                {
                  v68 = "invalid";
                  if (v14 && *(_QWORD *)(v14 + 16))
                    v68 = *(const char **)(v14 + 16);
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(_QWORD *)v96 = v68;
                  _os_log_impl(&dword_182FBE000, v44, v67, "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded", buf, 0x16u);
                }
              }

            }
LABEL_151:
            if (v43)
              free(v43);
LABEL_12:
            if (protocol_handler)
            {
              v19 = *(void (***)(uint64_t, uint64_t))(protocol_handler + 24);
              if (v19)
              {
                v20 = *v19;
                if (v20)
                {
                  v20(protocol_handler, v14);
                  goto LABEL_16;
                }
              }
              __nwlog_obj();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = *(const char **)(protocol_handler + 16);
              if (!v28)
                v28 = "invalid";
            }
            else
            {
              __nwlog_obj();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = "invalid";
            }
            *(_DWORD *)buf = 136446466;
            v94 = "nw_agent_client_attach_protocol_block_invoke";
            v95 = 2082;
            *(_QWORD *)v96 = v28;
            v51 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v91 = 0;
            if (__nwlog_fault(v51, &type, &v91))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v52 = objc_claimAutoreleasedReturnValue();
                v53 = type;
                if (os_log_type_enabled(v52, type))
                {
                  v54 = "invalid";
                  if (protocol_handler && *(_QWORD *)(protocol_handler + 16))
                    v54 = *(const char **)(protocol_handler + 16);
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(_QWORD *)v96 = v54;
                  _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s protocol %{public}s has invalid add_input_handler callback", buf, 0x16u);
                }
              }
              else if (v91)
              {
                v55 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v52 = objc_claimAutoreleasedReturnValue();
                v56 = type;
                v57 = os_log_type_enabled(v52, type);
                if (v55)
                {
                  if (v57)
                  {
                    v58 = "invalid";
                    if (protocol_handler && *(_QWORD *)(protocol_handler + 16))
                      v58 = *(const char **)(protocol_handler + 16);
                    *(_DWORD *)buf = 136446722;
                    v94 = "nw_agent_client_attach_protocol_block_invoke";
                    v95 = 2082;
                    *(_QWORD *)v96 = v58;
                    *(_WORD *)&v96[8] = 2082;
                    *(_QWORD *)&v96[10] = v55;
                    _os_log_impl(&dword_182FBE000, v52, v56, "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
                  }

                  free(v55);
                  goto LABEL_159;
                }
                if (v57)
                {
                  v85 = "invalid";
                  if (protocol_handler && *(_QWORD *)(protocol_handler + 16))
                    v85 = *(const char **)(protocol_handler + 16);
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(_QWORD *)v96 = v85;
                  _os_log_impl(&dword_182FBE000, v52, v56, "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace", buf, 0x16u);
                }
              }
              else
              {
                __nwlog_obj();
                v52 = objc_claimAutoreleasedReturnValue();
                v69 = type;
                if (os_log_type_enabled(v52, type))
                {
                  v70 = "invalid";
                  if (protocol_handler && *(_QWORD *)(protocol_handler + 16))
                    v70 = *(const char **)(protocol_handler + 16);
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(_QWORD *)v96 = v70;
                  _os_log_impl(&dword_182FBE000, v52, v69, "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded", buf, 0x16u);
                }
              }

            }
LABEL_159:
            if (v51)
              free(v51);
LABEL_16:
            if (v14)
            {
              v21 = *(_QWORD *)(v14 + 24);
              if (v21)
              {
                v22 = *(void (**)(uint64_t, _QWORD))(v21 + 24);
                if (v22)
                {
                  v22(v14, 0);
LABEL_20:

LABEL_21:
                  return;
                }
              }
              __nwlog_obj();
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              v30 = *(const char **)(v14 + 16);
              if (!v30)
                v30 = "invalid";
            }
            else
            {
              __nwlog_obj();
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              v30 = "invalid";
            }
            *(_DWORD *)buf = 136446466;
            v94 = "nw_agent_client_attach_protocol_block_invoke";
            v95 = 2082;
            *(_QWORD *)v96 = v30;
            v59 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v91 = 0;
            if (__nwlog_fault(v59, &type, &v91))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v60 = objc_claimAutoreleasedReturnValue();
                v61 = type;
                if (os_log_type_enabled(v60, type))
                {
                  v62 = "invalid";
                  if (v14 && *(_QWORD *)(v14 + 16))
                    v62 = *(const char **)(v14 + 16);
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(_QWORD *)v96 = v62;
                  _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s protocol %{public}s has invalid connect callback", buf, 0x16u);
                }
              }
              else if (v91)
              {
                v63 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v60 = objc_claimAutoreleasedReturnValue();
                v64 = type;
                v65 = os_log_type_enabled(v60, type);
                if (v63)
                {
                  if (v65)
                  {
                    v66 = "invalid";
                    if (v14 && *(_QWORD *)(v14 + 16))
                      v66 = *(const char **)(v14 + 16);
                    *(_DWORD *)buf = 136446722;
                    v94 = "nw_agent_client_attach_protocol_block_invoke";
                    v95 = 2082;
                    *(_QWORD *)v96 = v66;
                    *(_WORD *)&v96[8] = 2082;
                    *(_QWORD *)&v96[10] = v63;
                    _os_log_impl(&dword_182FBE000, v60, v64, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
                  }

                  free(v63);
                  goto LABEL_167;
                }
                if (v65)
                {
                  v86 = "invalid";
                  if (v14 && *(_QWORD *)(v14 + 16))
                    v86 = *(const char **)(v14 + 16);
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(_QWORD *)v96 = v86;
                  _os_log_impl(&dword_182FBE000, v60, v64, "%{public}s protocol %{public}s has invalid connect callback, no backtrace", buf, 0x16u);
                }
              }
              else
              {
                __nwlog_obj();
                v60 = objc_claimAutoreleasedReturnValue();
                v71 = type;
                if (os_log_type_enabled(v60, type))
                {
                  v72 = "invalid";
                  if (v14 && *(_QWORD *)(v14 + 16))
                    v72 = *(const char **)(v14 + 16);
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(_QWORD *)v96 = v72;
                  _os_log_impl(&dword_182FBE000, v60, v71, "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded", buf, 0x16u);
                }
              }

            }
LABEL_167:
            if (v59)
              free(v59);
            goto LABEL_20;
          }
          __nwlog_obj();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v94 = "nw_agent_client_attach_protocol_block_invoke";
          v36 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v91 = 0;
          if (!__nwlog_fault(v36, &type, &v91))
            goto LABEL_195;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v37 = objc_claimAutoreleasedReturnValue();
            v42 = type;
            if (os_log_type_enabled(v37, type))
            {
              *(_DWORD *)buf = 136446210;
              v94 = "nw_agent_client_attach_protocol_block_invoke";
              _os_log_impl(&dword_182FBE000, v37, v42, "%{public}s called with null create_function", buf, 0xCu);
            }
            goto LABEL_194;
          }
          if (!v91)
          {
            __nwlog_obj();
            v37 = objc_claimAutoreleasedReturnValue();
            v90 = type;
            if (os_log_type_enabled(v37, type))
            {
              *(_DWORD *)buf = 136446210;
              v94 = "nw_agent_client_attach_protocol_block_invoke";
              _os_log_impl(&dword_182FBE000, v37, v90, "%{public}s called with null create_function, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_194;
          }
          v79 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v82 = type;
          v83 = os_log_type_enabled(v37, type);
          if (!v79)
          {
            if (v83)
            {
              *(_DWORD *)buf = 136446210;
              v94 = "nw_agent_client_attach_protocol_block_invoke";
              _os_log_impl(&dword_182FBE000, v37, v82, "%{public}s called with null create_function, no backtrace", buf, 0xCu);
            }
            goto LABEL_194;
          }
          if (v83)
          {
            *(_DWORD *)buf = 136446466;
            v94 = "nw_agent_client_attach_protocol_block_invoke";
            v95 = 2082;
            *(_QWORD *)v96 = v79;
            _os_log_impl(&dword_182FBE000, v37, v82, "%{public}s called with null create_function, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
        else
        {
          __nwlog_obj();
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v94 = "nw_agent_client_attach_protocol_block_invoke";
          v36 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v91 = 0;
          if (!__nwlog_fault(v36, &type, &v91))
            goto LABEL_195;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v37 = objc_claimAutoreleasedReturnValue();
            v40 = type;
            if (os_log_type_enabled(v37, type))
            {
              *(_DWORD *)buf = 136446210;
              v94 = "nw_agent_client_attach_protocol_block_invoke";
              _os_log_impl(&dword_182FBE000, v37, v40, "%{public}s called with null nw_protocol_definition_is_framer(framer_definition)", buf, 0xCu);
            }
            goto LABEL_194;
          }
          if (!v91)
          {
            __nwlog_obj();
            v37 = objc_claimAutoreleasedReturnValue();
            v89 = type;
            if (os_log_type_enabled(v37, type))
            {
              *(_DWORD *)buf = 136446210;
              v94 = "nw_agent_client_attach_protocol_block_invoke";
              _os_log_impl(&dword_182FBE000, v37, v89, "%{public}s called with null nw_protocol_definition_is_framer(framer_definition), backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_194;
          }
          v79 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v80 = type;
          v81 = os_log_type_enabled(v37, type);
          if (!v79)
          {
            if (v81)
            {
              *(_DWORD *)buf = 136446210;
              v94 = "nw_agent_client_attach_protocol_block_invoke";
              _os_log_impl(&dword_182FBE000, v37, v80, "%{public}s called with null nw_protocol_definition_is_framer(framer_definition), no backtrace", buf, 0xCu);
            }
            goto LABEL_194;
          }
          if (v81)
          {
            *(_DWORD *)buf = 136446466;
            v94 = "nw_agent_client_attach_protocol_block_invoke";
            v95 = 2082;
            *(_QWORD *)v96 = v79;
            _os_log_impl(&dword_182FBE000, v37, v80, "%{public}s called with null nw_protocol_definition_is_framer(framer_definition), dumping backtrace:%{public}s", buf, 0x16u);
          }
        }

        free(v79);
        if (!v36)
          goto LABEL_21;
        goto LABEL_196;
      }
      __nwlog_obj();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v94 = "nw_agent_client_attach_protocol_block_invoke";
      v36 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v91 = 0;
      if (!__nwlog_fault(v36, &type, &v91))
        goto LABEL_195;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_agent_client_attach_protocol_block_invoke";
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null framer_definition", buf, 0xCu);
        }
      }
      else if (v91)
      {
        v76 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v77 = type;
        v78 = os_log_type_enabled(v37, type);
        if (v76)
        {
          if (v78)
          {
            *(_DWORD *)buf = 136446466;
            v94 = "nw_agent_client_attach_protocol_block_invoke";
            v95 = 2082;
            *(_QWORD *)v96 = v76;
            _os_log_impl(&dword_182FBE000, v37, v77, "%{public}s called with null framer_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v76);
LABEL_195:
          if (!v36)
            goto LABEL_21;
LABEL_196:
          free(v36);
          goto LABEL_21;
        }
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_agent_client_attach_protocol_block_invoke";
          _os_log_impl(&dword_182FBE000, v37, v77, "%{public}s called with null framer_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v88 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_agent_client_attach_protocol_block_invoke";
          _os_log_impl(&dword_182FBE000, v37, v88, "%{public}s called with null framer_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_194:

      goto LABEL_195;
    }
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_agent_client_attach_protocol_block_invoke";
    v32 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v32, &type, &v91))
      goto LABEL_184;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_agent_client_attach_protocol_block_invoke";
        _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null (client->framer_protocol == NULL)", buf, 0xCu);
      }
    }
    else if (v91)
    {
      v73 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v74 = type;
      v75 = os_log_type_enabled(v33, type);
      if (v73)
      {
        if (v75)
        {
          *(_DWORD *)buf = 136446466;
          v94 = "nw_agent_client_attach_protocol_block_invoke";
          v95 = 2082;
          *(_QWORD *)v96 = v73;
          _os_log_impl(&dword_182FBE000, v33, v74, "%{public}s called with null (client->framer_protocol == NULL), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v73);
        goto LABEL_184;
      }
      if (v75)
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_agent_client_attach_protocol_block_invoke";
        _os_log_impl(&dword_182FBE000, v33, v74, "%{public}s called with null (client->framer_protocol == NULL), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v87 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_agent_client_attach_protocol_block_invoke";
        _os_log_impl(&dword_182FBE000, v33, v87, "%{public}s called with null (client->framer_protocol == NULL), backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_184:
    if (v32)
      free(v32);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v23 = (id)gLogObj;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    v24 = *(_QWORD *)(a1 + 32) + 8;
    *(_DWORD *)buf = 136446722;
    v94 = "nw_agent_client_attach_protocol_block_invoke_2";
    v95 = 1042;
    *(_DWORD *)v96 = 16;
    *(_WORD *)&v96[4] = 2098;
    *(_QWORD *)&v96[6] = v24;
    _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s Not attaching protocol to closed client %{public,uuid_t}.16P", buf, 0x1Cu);
  }

}

void sub_183AB5450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_agent_change_state(void *a1, int a2, int a3, void *a4)
{
  _QWORD *v7;
  id v8;
  NSObject *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _QWORD block[4];
  _QWORD *v19;
  id v20;
  int v21;
  int v22;
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  if (v7)
  {
    v9 = v7[27];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_agent_change_state_block_invoke;
    block[3] = &unk_1E14AB278;
    v19 = v7;
    v21 = a2;
    v22 = a3;
    v20 = v8;
    dispatch_async(v9, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_agent_change_state";
  v11 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v11, &v24, &v23))
  {
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v24;
      if (os_log_type_enabled(v12, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_change_state";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = v24;
      v16 = os_log_type_enabled(v12, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_agent_change_state";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_change_state";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = v24;
      if (os_log_type_enabled(v12, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_change_state";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v11)
    free(v11);
LABEL_3:

}

void __nw_agent_change_state_block_invoke(uint64_t a1)
{
  id *v2;
  id v3;
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  size_t count;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  void *v24;
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 232) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 236) = *(_DWORD *)(a1 + 52);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 224), *(id *)(a1 + 40));
  v3 = *v2;
  v4 = v3;
  if (v3)
  {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 27));
    v5 = (void *)v4[105];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke;
    v24 = &unk_1E14AB528;
    v25 = v4;
    nw_fd_wrapper_get_fd(v5, buf);

    goto LABEL_3;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_agent_sync_state";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_agent_sync_state";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_agent_sync_state";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_agent_sync_state";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_agent_sync_state";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v14)
    free(v14);
LABEL_3:

  if (!*(_DWORD *)(*(_QWORD *)(a1 + 32) + 232))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      count = nw_dictionary_get_count(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 736));
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_agent_change_state_block_invoke";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = count;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s changed state to inactive, removing %zu clients", buf, 0x16u);
    }

    v8 = nw_dictionary_create();
    v10 = *(_QWORD *)(a1 + 32);
    v9 = a1 + 32;
    v11 = *(void **)(v10 + 736);
    *(_QWORD *)(v10 + 736) = v8;

    v12 = *(void **)(*(_QWORD *)v9 + 744);
    *(_QWORD *)(*(_QWORD *)v9 + 744) = 0;

  }
}

void sub_183AB5B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

BOOL ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke(uint64_t a1, int a2)
{
  void *v3;
  os_unfair_lock_s *v4;
  _BOOL8 v5;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v14 = 0;
  v13 = 0x2020000000;
  v3 = *(void **)(a1 + 32);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke_2;
  v7[3] = &unk_1E14AB500;
  v8 = v3;
  v9 = &v11;
  v10 = a2;
  v4 = (os_unfair_lock_s *)v8;
  os_unfair_lock_lock(v4 + 2);
  ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke_2((uint64_t)v7);
  os_unfair_lock_unlock(v4 + 2);

  v5 = *((_DWORD *)v12 + 6) == 0;
  _Block_object_dispose(&v11, 8);
  return v5;
}

uint64_t ___ZL19nw_agent_sync_stateP19NWConcrete_nw_agent_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int32 *v18;
  unint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  int v35;
  char v36;
  const unsigned __int8 *v37;
  char v38;
  int v39;
  uint64_t result;
  BOOL v41;
  _QWORD applier[7];
  _QWORD v43[4];
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD v48[7];
  _BYTE v49[4076];
  float32x2x2_t v50;

  v1 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)&v49[4068] = *MEMORY[0x1E0C80C00];
  bzero(v48, 0x1000uLL);
  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_BYTE *)(v2 + 856);
  if ((v3 & 0x28) == 0)
  {
    v7 = 0;
    goto LABEL_22;
  }
  if ((*(_BYTE *)(v2 + 856) & 8) != 0)
  {
    v4 = *(_DWORD *)(v2 + 260);
    v48[0] = *(_DWORD *)(v2 + 256);
    v48[1] = v4;
    v48[2] = v4;
    v5 = *(unsigned __int8 *)(v2 + 348);
    if (*(_BYTE *)(v2 + 348))
    {
      if (v5 < 8)
      {
        v6 = 0;
        do
        {
LABEL_10:
          v12 = v6;
          v13 = *(_DWORD *)(v2 + 288 + 4 * v6++);
          v48[v12 + 3] = v13;
        }
        while (v6 < v5);
        goto LABEL_11;
      }
      v6 = v5 & 0xF8;
      v8 = v49;
      v9 = (__int128 *)(v2 + 304);
      v10 = v6;
      do
      {
        v11 = *v9;
        *(v8 - 1) = *(v9 - 1);
        *v8 = v11;
        v8 += 2;
        v9 += 2;
        v10 -= 8;
      }
      while (v10);
      if (v6 != v5)
        goto LABEL_10;
    }
  }
LABEL_11:
  if ((v3 & 0x20) != 0 && (v14 = *(unsigned __int8 *)(v2 + 712), *(_BYTE *)(v2 + 712)))
  {
    if (v14 >= 3)
    {
      v16 = 0;
      v17 = v14 & 1;
      if ((v14 & 1) == 0)
        v17 = 2;
      v15 = v14 - v17;
      v18 = (__int32 *)(v2 + 380);
      v19 = v15;
      do
      {
        v50.val[0].i32[0] = *(v18 - 7);
        v50.val[0].i32[1] = *(v18 - 1);
        v50.val[1].i32[0] = *(v18 - 6);
        v50.val[1].i32[1] = *v18;
        v20 = (float *)&v49[4 * (v16 & 0xFFFFFFFC) + 44];
        vst2_f32(v20, v50);
        v18 += 12;
        v16 += 4;
        v19 -= 2;
      }
      while (v19);
    }
    else
    {
      v15 = 0;
    }
    v21 = 2 * v15;
    v22 = (uint64_t *)(v2 + 24 * v15 + 352);
    v7 = 204;
    do
    {
      v23 = *v22;
      v22 += 3;
      *(_QWORD *)&v49[4 * (v21 & 0xFFFFFFFE) + 44] = v23;
      ++v15;
      v21 += 2;
    }
    while (v15 < v14);
  }
  else
  {
    v7 = 204;
  }
LABEL_22:
  v24 = *(NSObject **)(v2 + 224);
  if (v24)
  {
    v44 = 0;
    v45 = &v44;
    v46 = 0x2000000000;
    v47 = 0;
    v43[0] = 0;
    v43[1] = v43;
    v43[2] = 0x2000000000;
    v43[3] = (char *)v48 + v7;
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 0x40000000;
    applier[2] = __nw_dispatch_data_copyout_block_invoke;
    applier[3] = &unk_1E14A3448;
    applier[5] = v43;
    applier[6] = 4096 - v7;
    applier[4] = &v44;
    dispatch_data_apply(v24, applier);
    v25 = v45[3];
    _Block_object_dispose(v43, 8);
    _Block_object_dispose(&v44, 8);
    v7 += v25;
    v2 = *(_QWORD *)(v1 + 32);
    v3 = *(_BYTE *)(v2 + 856);
  }
  v26 = (unsigned __int8 *)(v2 + 720);
  v27 = (_BYTE *)(v2 + 20);
  v28 = (_BYTE *)(v2 + 52);
  v29 = v2 + 84;
  v31 = *(_DWORD *)(v2 + 232);
  v30 = *(_DWORD *)(v2 + 236);
  v32 = (v30 >> 1) & 1;
  v33 = v31 == 1;
  v34 = v31 == 3;
  v35 = (v30 >> 2) & 1;
  v36 = (v31 & 0xFFFFFFFE) == 2;
  v37 = (const unsigned __int8 *)v48;
  if (!v7)
    v37 = 0;
  v41 = (v30 & 8) != 0;
  v38 = v30 & 1;
  if ((v3 & 1) != 0)
    v39 = 3;
  else
    v39 = 1;
  result = nw_network_agent_ctl_setsockopt(*(_DWORD *)(v1 + 48), v39, v26, v27, v28, v29, v33, v34, v36, v38, v32, v35, (v3 & 8) != 0, (v3 & 2) != 0, (v3 & 0x10) != 0, (v3 & 0x20) != 0, (v3 & 0x40) != 0, (v3 & 4) != 0, v41,
             v37,
             v7);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = result;
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24))
    *(_BYTE *)(*(_QWORD *)(v1 + 32) + 856) |= 1u;
  if (*(_DWORD *)(*(_QWORD *)(v1 + 32) + 716))
  {
    LODWORD(applier[0]) = *(_DWORD *)(*(_QWORD *)(v1 + 32) + 716);
    result = nw_network_agent_ctl_setsockopt_inner(*(_DWORD *)(v1 + 48), 24, (const unsigned __int8 *)applier, 4u, 0, 0);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = result;
  }
  return result;
}

NWConcrete_nw_agent *nw_agent_create_with_path_override_info(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NWConcrete_nw_agent *v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    if (v6)
    {
      v8 = nw_agent_create("Network", "PathOverride", a2, v6);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_agent_create_with_path_override_info";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null queue", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v23)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_agent_create_with_path_override_info";
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_agent_create_with_path_override_info";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null override_info", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v23)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null override_info, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_agent_create_with_path_override_info";
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null override_info, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_4:

  return v8;
}

void sub_183AB6494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_agent_set_uuid(void *a1, _OWORD *a2)
{
  _QWORD *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  void *v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD block[4];
  _QWORD *v17;
  _BYTE *v18;
  char v19;
  _BYTE buf[24];
  void *v21;
  int v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_agent_set_uuid";
    v7 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v22) = 16;
    v19 = 0;
    if (__nwlog_fault(v7, &v22, &v19))
    {
      if (v22 == 17)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = v22;
        if (os_log_type_enabled(v8, (os_log_type_t)v22))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_set_uuid";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null agent", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = v22;
        v14 = os_log_type_enabled(v8, (os_log_type_t)v22);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_agent_set_uuid";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_set_uuid";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null agent, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v15 = v22;
        if (os_log_type_enabled(v8, (os_log_type_t)v22))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_agent_set_uuid";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v7)
      free(v7);
    goto LABEL_4;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v21 = 0;
  v4 = malloc_type_malloc(0x10uLL, 0xF2B69DE5uLL);
  if (v4)
  {
LABEL_3:
    v21 = v4;
    *(_OWORD *)*(_QWORD *)(*(_QWORD *)&buf[8] + 24) = *a2;
    v5 = v3[27];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_agent_set_uuid_block_invoke;
    block[3] = &unk_1E14ACE40;
    v17 = v3;
    v18 = buf;
    dispatch_async(v5, block);

    _Block_object_dispose(buf, 8);
LABEL_4:

    return;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v22 = 136446466;
  v23 = "strict_malloc";
  v24 = 2048;
  v25 = 16;
  v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_3;
  }
  __break(1u);
}

void sub_183AB6878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_agent_set_uuid_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 856) & 1) == 0)
  {
    *(_OWORD *)(v2 + 720) = *(_OWORD *)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    goto LABEL_14;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v17 = "nw_agent_set_uuid_block_invoke";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v4, &type, &v14))
  {
LABEL_12:
    if (!v4)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_21;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_agent_set_uuid_block_invoke";
    v7 = "%{public}s Cannot modify agent UUID after registration";
LABEL_19:
    v12 = v5;
    v13 = v6;
LABEL_20:
    _os_log_impl(&dword_182FBE000, v12, v13, v7, buf, 0xCu);
    goto LABEL_21;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_21;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_agent_set_uuid_block_invoke";
    v7 = "%{public}s Cannot modify agent UUID after registration, backtrace limit exceeded";
    goto LABEL_19;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  v9 = type;
  v10 = os_log_type_enabled(v5, type);
  if (backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_agent_set_uuid_block_invoke";
      v18 = 2082;
      v19 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s Cannot modify agent UUID after registration, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_12;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446210;
    v17 = "nw_agent_set_uuid_block_invoke";
    v7 = "%{public}s Cannot modify agent UUID after registration, no backtrace";
    v12 = v5;
    v13 = v9;
    goto LABEL_20;
  }
LABEL_21:

  if (v4)
LABEL_13:
    free(v4);
LABEL_14:
  v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v11)
  {
    free(v11);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void nw_agent_get_uuid(void *a1, _OWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *a2 = *((_OWORD *)v3 + 45);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_agent_get_uuid";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_get_uuid";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_agent_get_uuid";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_get_uuid";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_get_uuid";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_agent_set_activate_handler(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  os_unfair_lock_s *v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[6];
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_agent_set_activate_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    v24 = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &v24, &v23))
      goto LABEL_38;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_set_activate_handler";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v24;
      v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_agent_set_activate_handler";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9)
          goto LABEL_4;
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_set_activate_handler";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_set_activate_handler";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_agent_set_activate_handler_block_invoke;
    v22[3] = &unk_1E14ACE18;
    v6 = (os_unfair_lock_s *)v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v6 + 2);
    __nw_agent_set_activate_handler_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v6 + 2);

    goto LABEL_4;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_agent_set_activate_handler";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &v24, &v23))
    goto LABEL_38;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_activate_handler";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null activate_handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_activate_handler";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null activate_handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_activate_handler";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null activate_handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_agent_set_activate_handler";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null activate_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_39;
LABEL_4:

}

void __nw_agent_set_activate_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 752);
  *(_QWORD *)(v3 + 752) = v2;

}

void nw_agent_set_assert_handlers(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  os_unfair_lock_s *v9;
  id v10;
  id v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[7];
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_agent_set_assert_handlers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_agent_set_assert_handlers";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v13)
          goto LABEL_5;
LABEL_56:
        free(v13);
        goto LABEL_5;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_agent_set_assert_handlers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null assert_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null assert_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null assert_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_agent_set_assert_handlers";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null assert_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_agent_set_assert_handlers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null unassert_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null unassert_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_assert_handlers";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null unassert_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_agent_set_assert_handlers";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null unassert_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v23);
    if (!v13)
      goto LABEL_5;
    goto LABEL_56;
  }
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __nw_agent_set_assert_handlers_block_invoke;
  v31[3] = &unk_1E14AB2A0;
  v9 = (os_unfair_lock_s *)v5;
  v31[4] = v9;
  v10 = v6;
  v31[5] = v10;
  v11 = v8;
  v31[6] = v11;
  os_unfair_lock_lock(v9 + 2);
  __nw_agent_set_assert_handlers_block_invoke((uint64_t)v31);
  os_unfair_lock_unlock(v9 + 2);

LABEL_5:
}

void __nw_agent_set_assert_handlers_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 856) |= 4u;
  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 760);
  *(_QWORD *)(v3 + 760) = v2;

  v5 = _Block_copy(*(const void **)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 768);
  *(_QWORD *)(v6 + 768) = v5;

}

void nw_agent_set_error_handler(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  os_unfair_lock_s *v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[6];
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_agent_set_error_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    v24 = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &v24, &v23))
      goto LABEL_38;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_set_error_handler";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v24;
      v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_agent_set_error_handler";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9)
          goto LABEL_4;
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_set_error_handler";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_set_error_handler";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_agent_set_error_handler_block_invoke;
    v22[3] = &unk_1E14ACE18;
    v6 = (os_unfair_lock_s *)v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v6 + 2);
    __nw_agent_set_error_handler_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v6 + 2);

    goto LABEL_4;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_agent_set_error_handler";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &v24, &v23))
    goto LABEL_38;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_error_handler";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null error_handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_error_handler";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null error_handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_error_handler";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null error_handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_agent_set_error_handler";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null error_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_39;
LABEL_4:

}

void __nw_agent_set_error_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 856) |= 4u;
  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 832);
  *(_QWORD *)(v3 + 832) = v2;

}

void nw_agent_set_token_low_water_mark(void *a1, int a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  os_unfair_lock_s *v8;
  id v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[6];
  int v25;
  char v26;
  os_log_type_t v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_agent_set_token_low_water_mark";
    v11 = (char *)_os_log_send_and_compose_impl();

    v27 = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v11, &v27, &v26))
      goto LABEL_38;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v27;
      if (os_log_type_enabled(v12, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_agent_set_token_low_water_mark";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = v27;
      v18 = os_log_type_enabled(v12, v27);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_agent_set_token_low_water_mark";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v11)
          goto LABEL_4;
LABEL_39:
        free(v11);
        goto LABEL_4;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_agent_set_token_low_water_mark";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = v27;
      if (os_log_type_enabled(v12, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_agent_set_token_low_water_mark";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v6)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_agent_set_token_low_water_mark_block_invoke;
    v24[3] = &unk_1E14ACFF8;
    v8 = (os_unfair_lock_s *)v5;
    v24[4] = v8;
    v25 = a2;
    v9 = v7;
    v24[5] = v9;
    os_unfair_lock_lock(v8 + 2);
    __nw_agent_set_token_low_water_mark_block_invoke((uint64_t)v24);
    os_unfair_lock_unlock(v8 + 2);

    goto LABEL_4;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_agent_set_token_low_water_mark";
  v11 = (char *)_os_log_send_and_compose_impl();

  v27 = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (!__nwlog_fault(v11, &v27, &v26))
    goto LABEL_38;
  if (v27 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = v27;
    if (os_log_type_enabled(v12, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_agent_set_token_low_water_mark";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null tokens_needed_handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v26)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = v27;
    if (os_log_type_enabled(v12, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_agent_set_token_low_water_mark";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null tokens_needed_handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = v27;
  v21 = os_log_type_enabled(v12, v27);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_agent_set_token_low_water_mark";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null tokens_needed_handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_agent_set_token_low_water_mark";
    v30 = 2082;
    v31 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null tokens_needed_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_39;
LABEL_4:

}

void __nw_agent_set_token_low_water_mark_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 716) = *(_DWORD *)(a1 + 48);
  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 824);
  *(_QWORD *)(v3 + 824) = v2;

}

void nw_agent_add_token(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD block[4];
  _QWORD *v22;
  id v23;
  char v24;
  os_log_type_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_agent_add_token";
    v8 = (char *)_os_log_send_and_compose_impl();

    v25 = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v8, &v25, &v24))
      goto LABEL_38;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_agent_add_token";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v25;
      v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_agent_add_token";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_agent_add_token";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_agent_add_token";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v6 = v3[27];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_agent_add_token_block_invoke;
    block[3] = &unk_1E14ACE68;
    v22 = v3;
    v23 = v5;
    dispatch_async(v6, block);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_agent_add_token";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v8, &v25, &v24))
    goto LABEL_38;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_agent_add_token";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null token", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v24)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_agent_add_token";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null token, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_agent_add_token";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null token, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_agent_add_token";
    v28 = 2082;
    v29 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null token, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

void __nw_agent_add_token_block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 840);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __nw_agent_add_token_block_invoke_2;
  v3[3] = &unk_1E14AB528;
  v4 = v1;
  nw_fd_wrapper_get_fd(v2, v3);

}

void sub_183AB8B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_agent_add_token_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  unsigned int v6;
  _QWORD v8[7];
  _QWORD v9[4];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14[4096];
  uint64_t v15;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = v1;
  v15 = *MEMORY[0x1E0C80C00];
  bzero(v14, 0x1000uLL);
  v5 = *(NSObject **)(v4 + 32);
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = v14;
  if (v5)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __nw_dispatch_data_copyout_block_invoke;
    v8[3] = &unk_1E14A3448;
    v8[5] = v9;
    v8[6] = 4096;
    v8[4] = &v10;
    dispatch_data_apply(v5, v8);
    v6 = *((_DWORD *)v11 + 6);
  }
  else
  {
    v6 = 0;
  }
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(&v10, 8);
  nw_network_agent_ctl_setsockopt_inner(v3, 21, v14, v6, 0, 0);
  return 1;
}

void nw_agent_flush_tokens(void *a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD block[4];
  _QWORD *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[27];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_agent_flush_tokens_block_invoke;
    block[3] = &unk_1E14ACFD0;
    v13 = v1;
    dispatch_async(v3, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_agent_flush_tokens";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_agent_flush_tokens";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_agent_flush_tokens";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_agent_flush_tokens";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_agent_flush_tokens";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

uint64_t __nw_agent_flush_tokens_block_invoke(uint64_t a1)
{
  return nw_fd_wrapper_get_fd(*(void **)(*(_QWORD *)(a1 + 32) + 840), &__block_literal_global_79354);
}

uint64_t __nw_agent_flush_tokens_block_invoke_2(uint64_t a1, int a2)
{
  nw_network_agent_ctl_setsockopt_inner(a2, 22, 0, 0, 0, 0);
  return 1;
}

void nw_agent_reset_error(void *a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD block[4];
  _QWORD *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[27];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_agent_reset_error_block_invoke;
    block[3] = &unk_1E14ACFD0;
    v13 = v1;
    dispatch_async(v3, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_agent_reset_error";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_agent_reset_error";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_agent_reset_error";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_agent_reset_error";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_agent_reset_error";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

uint64_t __nw_agent_reset_error_block_invoke(uint64_t a1)
{
  return nw_fd_wrapper_get_fd(*(void **)(*(_QWORD *)(a1 + 32) + 840), &__block_literal_global_76_79360);
}

uint64_t __nw_agent_reset_error_block_invoke_2(uint64_t a1, int a2)
{
  nw_network_agent_ctl_setsockopt_inner(a2, 27, 0, 0, 0, 0);
  return 1;
}

BOOL nw_agent_add_to_interface(void *a1, void *a2)
{
  unsigned __int8 *v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = nw_network_agent_add_to_interface((uint64_t)v4 + 104, v3 + 720) == 0;
      goto LABEL_4;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_agent_add_to_interface";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null interface", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_agent_add_to_interface";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_agent_add_to_interface";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_agent_add_to_interface";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_4:

  return v6;
}

BOOL nw_agent_remove_from_interface(void *a1, void *a2)
{
  unsigned __int8 *v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = nw_network_agent_remove_from_interface((uint64_t)v4 + 104, v3 + 720) == 0;
      goto LABEL_4;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_agent_remove_from_interface";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null interface", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_agent_remove_from_interface";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_agent_remove_from_interface";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_agent_remove_from_interface";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_4:

  return v6;
}

void nw_agent_add_resolve_handlers(void *a1, int a2, int a3, void *a4, void *a5)
{
  _QWORD *v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  os_log_type_t v32;
  _QWORD block[4];
  _QWORD *v34;
  id v35;
  id v36;
  int v37;
  int v38;
  char v39;
  os_log_type_t v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a4;
  v11 = a5;
  v12 = v11;
  if (!v9)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_agent_add_resolve_handlers";
    v15 = (char *)_os_log_send_and_compose_impl();

    v40 = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v15, &v40, &v39))
      goto LABEL_55;
    if (v40 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = v40;
      if (os_log_type_enabled(v16, v40))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v23 = v40;
      v24 = os_log_type_enabled(v16, v40);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "nw_agent_add_resolve_handlers";
          v43 = 2082;
          v44 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v15)
          goto LABEL_5;
LABEL_56:
        free(v15);
        goto LABEL_5;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v30 = v40;
      if (os_log_type_enabled(v16, v40))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v10)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_agent_add_resolve_handlers";
    v15 = (char *)_os_log_send_and_compose_impl();

    v40 = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v15, &v40, &v39))
      goto LABEL_55;
    if (v40 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = v40;
      if (os_log_type_enabled(v16, v40))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null start_resolve_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v39)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v31 = v40;
      if (os_log_type_enabled(v16, v40))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_182FBE000, v16, v31, "%{public}s called with null start_resolve_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v25 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v26 = v40;
    v27 = os_log_type_enabled(v16, v40);
    if (!v25)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s called with null start_resolve_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_agent_add_resolve_handlers";
      v43 = 2082;
      v44 = v25;
      _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s called with null start_resolve_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v11)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_agent_add_resolve_handlers";
    v15 = (char *)_os_log_send_and_compose_impl();

    v40 = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v15, &v40, &v39))
      goto LABEL_55;
    if (v40 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = v40;
      if (os_log_type_enabled(v16, v40))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null stop_resolve_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v39)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v32 = v40;
      if (os_log_type_enabled(v16, v40))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_182FBE000, v16, v32, "%{public}s called with null stop_resolve_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v25 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v28 = v40;
    v29 = os_log_type_enabled(v16, v40);
    if (!v25)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_agent_add_resolve_handlers";
        _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null stop_resolve_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_agent_add_resolve_handlers";
      v43 = 2082;
      v44 = v25;
      _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null stop_resolve_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v25);
    if (!v15)
      goto LABEL_5;
    goto LABEL_56;
  }
  v13 = v9[27];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __nw_agent_add_resolve_handlers_block_invoke;
  block[3] = &unk_1E14AB328;
  v34 = v9;
  v37 = a2;
  v38 = a3;
  v35 = v10;
  v36 = v12;
  dispatch_async(v13, block);

LABEL_5:
}

void __nw_agent_add_resolve_handlers_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 856) |= 0x20u;
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 712);
  if (v2 < 0xF)
  {
    v5 = 24 * v2;
    *(_DWORD *)(v1 + 24 * v2 + 352) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24 * v2 + 356) = *(_DWORD *)(a1 + 60);
    v6 = _Block_copy(*(const void **)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 32) + v5;
    v8 = *(void **)(v7 + 360);
    *(_QWORD *)(v7 + 360) = v6;

    v9 = _Block_copy(*(const void **)(a1 + 48));
    v10 = *(_QWORD *)(a1 + 32) + v5;
    v11 = *(void **)(v10 + 368);
    *(_QWORD *)(v10 + 368) = v9;

    ++*(_BYTE *)(*(_QWORD *)(a1 + 32) + 712);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v12 = 136446210;
      v13 = "nw_agent_add_resolve_handlers_block_invoke";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s Maximum number of resolution pairs reached", (uint8_t *)&v12, 0xCu);
    }

  }
}

void nw_agent_set_browse_handlers(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  os_unfair_lock_s *v9;
  id v10;
  id v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[7];
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_agent_set_browse_handlers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_agent_set_browse_handlers";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v13)
          goto LABEL_5;
LABEL_56:
        free(v13);
        goto LABEL_5;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_agent_set_browse_handlers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null start_browse_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null start_browse_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null start_browse_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_agent_set_browse_handlers";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null start_browse_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_agent_set_browse_handlers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null stop_browse_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null stop_browse_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_browse_handlers";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null stop_browse_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_agent_set_browse_handlers";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null stop_browse_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v23);
    if (!v13)
      goto LABEL_5;
    goto LABEL_56;
  }
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __nw_agent_set_browse_handlers_block_invoke;
  v31[3] = &unk_1E14AB2A0;
  v9 = (os_unfair_lock_s *)v5;
  v31[4] = v9;
  v10 = v6;
  v31[5] = v10;
  v11 = v8;
  v31[6] = v11;
  os_unfair_lock_lock(v9 + 2);
  __nw_agent_set_browse_handlers_block_invoke((uint64_t)v31);
  os_unfair_lock_unlock(v9 + 2);

LABEL_5:
}

void __nw_agent_set_browse_handlers_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 856) |= 0x10u;
  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 792);
  *(_QWORD *)(v3 + 792) = v2;

  v5 = _Block_copy(*(const void **)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 800);
  *(_QWORD *)(v6 + 800) = v5;

}

void nw_agent_set_flow_handlers(void *a1, int a2, int a3, char a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  os_unfair_lock_s *v15;
  id v16;
  id v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  _QWORD v37[7];
  int v38;
  int v39;
  char v40;
  char v41;
  os_log_type_t v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a5;
  v13 = a6;
  v14 = v13;
  if (!v11)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_agent_set_flow_handlers";
    v19 = (char *)_os_log_send_and_compose_impl();

    v42 = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &v42, &v41))
      goto LABEL_55;
    if (v42 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v42;
      if (os_log_type_enabled(v20, v42))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v27 = v42;
      v28 = os_log_type_enabled(v20, v42);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v44 = "nw_agent_set_flow_handlers";
          v45 = 2082;
          v46 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v19)
          goto LABEL_5;
LABEL_56:
        free(v19);
        goto LABEL_5;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v34 = v42;
      if (os_log_type_enabled(v20, v42))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v12)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_agent_set_flow_handlers";
    v19 = (char *)_os_log_send_and_compose_impl();

    v42 = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &v42, &v41))
      goto LABEL_55;
    if (v42 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = v42;
      if (os_log_type_enabled(v20, v42))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null start_flow_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v41)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v35 = v42;
      if (os_log_type_enabled(v20, v42))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s called with null start_flow_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v30 = v42;
    v31 = os_log_type_enabled(v20, v42);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null start_flow_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v44 = "nw_agent_set_flow_handlers";
      v45 = 2082;
      v46 = v29;
      _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null start_flow_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v13)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_agent_set_flow_handlers";
    v19 = (char *)_os_log_send_and_compose_impl();

    v42 = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &v42, &v41))
      goto LABEL_55;
    if (v42 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = v42;
      if (os_log_type_enabled(v20, v42))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null stop_flow_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v41)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v36 = v42;
      if (os_log_type_enabled(v20, v42))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_182FBE000, v20, v36, "%{public}s called with null stop_flow_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v32 = v42;
    v33 = os_log_type_enabled(v20, v42);
    if (!v29)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_agent_set_flow_handlers";
        _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null stop_flow_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      v44 = "nw_agent_set_flow_handlers";
      v45 = 2082;
      v46 = v29;
      _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null stop_flow_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v29);
    if (!v19)
      goto LABEL_5;
    goto LABEL_56;
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = __nw_agent_set_flow_handlers_block_invoke;
  v37[3] = &unk_1E14AB350;
  v15 = (os_unfair_lock_s *)v11;
  v37[4] = v15;
  v38 = a2;
  v39 = a3;
  v40 = a4;
  v16 = v12;
  v37[5] = v16;
  v17 = v14;
  v37[6] = v17;
  os_unfair_lock_lock(v15 + 2);
  __nw_agent_set_flow_handlers_block_invoke((uint64_t)v37);
  os_unfair_lock_unlock(v15 + 2);

LABEL_5:
}

void __nw_agent_set_flow_handlers_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 248))
    goto LABEL_20;
  v3 = nw_nexus_create_with_options(v2 + 52, *(_QWORD *)(v2 + 264), *(_QWORD *)(v2 + 272), *(_QWORD *)(v2 + 280));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 248);
  *(_QWORD *)(v4 + 248) = v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 248))
    goto LABEL_20;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v25 = "nw_agent_set_flow_handlers_block_invoke";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v7, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_agent_set_flow_handlers_block_invoke";
        v10 = "%{public}s nw_nexus_create failed";
LABEL_14:
        v14 = v8;
        v15 = v9;
LABEL_15:
        _os_log_impl(&dword_182FBE000, v14, v15, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v12 = type;
        v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v25 = "nw_agent_set_flow_handlers_block_invoke";
            v26 = 2082;
            v27 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s nw_nexus_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_17;
        }
        if (!v13)
          goto LABEL_16;
        *(_DWORD *)buf = 136446210;
        v25 = "nw_agent_set_flow_handlers_block_invoke";
        v10 = "%{public}s nw_nexus_create failed, no backtrace";
        v14 = v8;
        v15 = v12;
        goto LABEL_15;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_agent_set_flow_handlers_block_invoke";
        v10 = "%{public}s nw_nexus_create failed, backtrace limit exceeded";
        goto LABEL_14;
      }
    }
LABEL_16:

  }
LABEL_17:
  if (v7)
    free(v7);
  v2 = *(_QWORD *)(a1 + 32);
LABEL_20:
  *(_BYTE *)(v2 + 856) |= 8u;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 256) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 260) = *(_DWORD *)(a1 + 60);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 856) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 856) & 0xFD | (2 * *(_BYTE *)(a1 + 64));
  v16 = _Block_copy(*(const void **)(a1 + 40));
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(void **)(v17 + 776);
  *(_QWORD *)(v17 + 776) = v16;

  v19 = _Block_copy(*(const void **)(a1 + 48));
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(void **)(v20 + 784);
  *(_QWORD *)(v20 + 784) = v19;

}

void nw_agent_add_flow_request_endpoint_type(void *a1, int a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  int v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_agent_add_flow_request_endpoint_type";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v7, &type, &v22))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_agent_add_flow_request_endpoint_type";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_agent_add_flow_request_endpoint_type";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7)
          goto LABEL_4;
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_agent_add_flow_request_endpoint_type";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_agent_add_flow_request_endpoint_type";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __nw_agent_add_flow_request_endpoint_type_block_invoke;
    v20[3] = &unk_1E14AB378;
    v5 = (os_unfair_lock_s *)v3;
    v20[4] = v5;
    v21 = a2;
    os_unfair_lock_lock(v5 + 2);
    __nw_agent_add_flow_request_endpoint_type_block_invoke((uint64_t)v20);
    os_unfair_lock_unlock(v5 + 2);

    goto LABEL_4;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_agent_add_flow_request_endpoint_type";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v7, &type, &v22))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_agent_add_flow_request_endpoint_type";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint_type", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v22)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_agent_add_flow_request_endpoint_type";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null endpoint_type, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_agent_add_flow_request_endpoint_type";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null endpoint_type, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_agent_add_flow_request_endpoint_type";
    v26 = 2082;
    v27 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null endpoint_type, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_39;
LABEL_4:

}

void __nw_agent_add_flow_request_endpoint_type_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 348);
  if (v2 < 0xF)
  {
    *(_DWORD *)(v1 + 4 * v2 + 288) = *(_DWORD *)(a1 + 40);
    ++*(_BYTE *)(*(_QWORD *)(a1 + 32) + 348);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = 136446210;
      v5 = "nw_agent_add_flow_request_endpoint_type_block_invoke";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s Maximum number of flow types", (uint8_t *)&v4, 0xCu);
    }

  }
}

void nw_agent_set_flow_sizes(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  os_unfair_lock_s *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _QWORD v18[8];
  char v19;
  os_log_type_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (v7)
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __nw_agent_set_flow_sizes_block_invoke;
    v18[3] = &unk_1E14AB3A0;
    v9 = (os_unfair_lock_s *)v7;
    v18[4] = v9;
    v18[5] = a2;
    v18[6] = a3;
    v18[7] = a4;
    os_unfair_lock_lock(v9 + 2);
    __nw_agent_set_flow_sizes_block_invoke(v18);
    os_unfair_lock_unlock(v9 + 2);

    goto LABEL_3;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_agent_set_flow_sizes";
  v11 = (char *)_os_log_send_and_compose_impl();

  v20 = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v11, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v20;
      if (os_log_type_enabled(v12, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_agent_set_flow_sizes";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = v20;
      v16 = os_log_type_enabled(v12, v20);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_agent_set_flow_sizes";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_agent_set_flow_sizes";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = v20;
      if (os_log_type_enabled(v12, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_agent_set_flow_sizes";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v11)
    free(v11);
LABEL_3:

}

void __nw_agent_set_flow_sizes_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = a1[4];
  if (*(_QWORD *)(v1 + 248))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = 136446210;
      v4 = "nw_agent_set_flow_sizes_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_ERROR, "%{public}s Cannot set flow sizes after setting flow handlers", (uint8_t *)&v3, 0xCu);
    }

  }
  else
  {
    *(_QWORD *)(v1 + 264) = a1[5];
    *(_QWORD *)(a1[4] + 272) = a1[6];
    *(_QWORD *)(a1[4] + 280) = a1[7];
  }
}

void nw_agent_set_flow_do_not_coalesce(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_agent_set_flow_do_not_coalesce_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 2);
    __nw_agent_set_flow_do_not_coalesce_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_agent_set_flow_do_not_coalesce";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_set_flow_do_not_coalesce";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_agent_set_flow_do_not_coalesce";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_set_flow_do_not_coalesce";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_agent_set_flow_do_not_coalesce";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void __nw_agent_set_flow_do_not_coalesce_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 248))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = 136446210;
      v4 = "nw_agent_set_flow_do_not_coalesce_block_invoke";
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_ERROR, "%{public}s Cannot set do not coalesce after setting flow handlers", (uint8_t *)&v3, 0xCu);
    }

  }
  else
  {
    *(_BYTE *)(v1 + 856) |= 0x80u;
  }
}

void nw_agent_set_flow_context(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  os_unfair_lock_s *v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[6];
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_agent_set_flow_context";
    v9 = (char *)_os_log_send_and_compose_impl();

    v24 = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &v24, &v23))
      goto LABEL_38;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_set_flow_context";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v24;
      v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_agent_set_flow_context";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9)
          goto LABEL_4;
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_set_flow_context";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_agent_set_flow_context";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_agent_set_flow_context_block_invoke;
    v22[3] = &unk_1E14ACE68;
    v6 = (os_unfair_lock_s *)v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v6 + 2);
    __nw_agent_set_flow_context_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v6 + 2);

    goto LABEL_4;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_agent_set_flow_context";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &v24, &v23))
    goto LABEL_38;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_flow_context";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null context", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_flow_context";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_agent_set_flow_context";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null context, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_agent_set_flow_context";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_39;
LABEL_4:

}

void __nw_agent_set_flow_context_block_invoke(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 240), *(id *)(a1 + 40));
}

void nw_agent_set_group_handlers(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  os_unfair_lock_s *v9;
  id v10;
  id v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[7];
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_agent_set_group_handlers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null agent", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_agent_set_group_handlers";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v13)
          goto LABEL_5;
LABEL_56:
        free(v13);
        goto LABEL_5;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null agent, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_agent_set_group_handlers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null add_members_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null add_members_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null add_members_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_agent_set_group_handlers";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null add_members_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_agent_set_group_handlers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null remove_members_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null remove_members_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_agent_set_group_handlers";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null remove_members_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_agent_set_group_handlers";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null remove_members_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v23);
    if (!v13)
      goto LABEL_5;
    goto LABEL_56;
  }
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __nw_agent_set_group_handlers_block_invoke;
  v31[3] = &unk_1E14AB2A0;
  v9 = (os_unfair_lock_s *)v5;
  v31[4] = v9;
  v10 = v6;
  v31[5] = v10;
  v11 = v8;
  v31[6] = v11;
  os_unfair_lock_lock(v9 + 2);
  __nw_agent_set_group_handlers_block_invoke((uint64_t)v31);
  os_unfair_lock_unlock(v9 + 2);

LABEL_5:
}

void __nw_agent_set_group_handlers_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 856) |= 0x40u;
  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 808);
  *(_QWORD *)(v3 + 808) = v2;

  v5 = _Block_copy(*(const void **)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 816);
  *(_QWORD *)(v6 + 816) = v5;

}

uint64_t nw_log_delta_to_ms(unsigned int a1)
{
  return (unsigned __int16)(a1 & 0x7FF) << (a1 >> 11);
}

void nw_log_ring_parse(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  NSObject *v8;
  int v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char *v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_log_ring_parse";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_log_ring_parse";
      v13 = "%{public}s called with null buffer";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_log_ring_parse";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v10)
          return;
LABEL_42:
        free(v10);
        return;
      }
      if (!v15)
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_log_ring_parse";
      v13 = "%{public}s called with null buffer, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_log_ring_parse";
      v13 = "%{public}s called with null buffer, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_41;
  }
  if (a2)
  {
    if (*a1 == 1)
    {
      v5 = a2 - 1;
      do
      {
        if (v5 < 2)
          break;
        v6 = a1[v5];
        v7 = v5 - 1 >= v6;
        v5 = v5 - 1 - v6;
        if (!v7)
          break;
      }
      while (((*(uint64_t (**)(uint64_t))(a3 + 16))(a3) & 1) != 0);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v9 = *a1;
        *(_DWORD *)buf = 136446466;
        v21 = "nw_log_ring_parse";
        v22 = 1024;
        LODWORD(v23) = v9;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s Unsupported log ring version: %u", buf, 0x12u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_log_ring_parse";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v10, &type, &v18))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_log_ring_parse";
    v13 = "%{public}s called with null length";
    goto LABEL_40;
  }
  if (!v18)
  {
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_log_ring_parse";
    v13 = "%{public}s called with null length, backtrace limit exceeded";
    goto LABEL_40;
  }
  v16 = (char *)__nw_create_backtrace_string();
  v11 = __nwlog_obj();
  v12 = type;
  v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17)
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_log_ring_parse";
    v13 = "%{public}s called with null length, no backtrace";
    goto LABEL_40;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v21 = "nw_log_ring_parse";
    v22 = 2082;
    v23 = v16;
    _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null length, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v10)
    goto LABEL_42;
}

void sub_183ABE4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_flow_setup_protocols(NWConcrete_nw_endpoint_handler *a1, nw_protocol *a2, nw_protocol *a3, int a4, int a5)
{
  NWConcrete_nw_endpoint_handler *v8;
  NWConcrete_nw_endpoint_handler *v9;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v11;
  NWConcrete_nw_endpoint_handler *v12;
  char v13;
  NSObject *v14;
  NWConcrete_nw_endpoint_handler *v15;
  NWConcrete_nw_endpoint_handler *v16;
  char v17;
  const char *v18;
  nw_endpoint_t v19;
  const char *v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  NWConcrete_nw_endpoint_handler *v26;
  NWConcrete_nw_endpoint_handler *v27;
  char v28;
  const char *v29;
  nw_endpoint_t v30;
  const char *logging_description;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  const char *v35;
  void **v36;
  void **v37;
  const char *v38;
  void **v39;
  void **v40;
  const char *v41;
  void **v42;
  id v43;
  id *v44;
  id v45;
  int upper_transport_protocol;
  id *v47;
  void **v48;
  NWConcrete_nw_path_flow_registration *v49;
  void *v50;
  NSObject *v51;
  const char *id_string;
  const char *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  id v57;
  _DWORD *posix_error;
  void *v59;
  _BOOL8 v60;
  NWConcrete_nw_endpoint_handler *v61;
  BOOL v62;
  NSObject *v63;
  NWConcrete_nw_endpoint_handler *v64;
  NWConcrete_nw_endpoint_handler *v65;
  _BOOL4 v66;
  const char *v67;
  nw_endpoint_t v68;
  const char *v69;
  unsigned int *v70;
  unsigned int *v71;
  uint64_t v72;
  const char *v73;
  void **v74;
  const char *v75;
  void *v76;
  unsigned __int8 *v77;
  NWConcrete_nw_endpoint_handler *v78;
  _BOOL4 v79;
  NSObject *v80;
  NWConcrete_nw_endpoint_handler *v81;
  NWConcrete_nw_endpoint_handler *v82;
  _BOOL4 v83;
  const char *v84;
  nw_endpoint_t v85;
  const char *v86;
  unsigned int *v87;
  unsigned int *v88;
  uint64_t v89;
  const char *v90;
  void **v91;
  void **v92;
  const char *v93;
  NWConcrete_nw_endpoint_handler *v94;
  nw_endpoint_t v95;
  const char *v96;
  const char *v97;
  nw_protocol *v98;
  void **v99;
  id v100;
  const char *v101;
  nw_endpoint_t v102;
  const char *v103;
  nw_protocol *v104;
  void **v105;
  id v106;
  const char *v107;
  void **v108;
  id v109;
  NWConcrete_nw_endpoint_handler *v110;
  _BOOL4 v111;
  const char *v112;
  const char *v113;
  nw_endpoint_t v114;
  const char *v115;
  const char *v116;
  const char *v117;
  id v118;
  char v119;
  NWConcrete_nw_endpoint_handler *v120;
  NWConcrete_nw_endpoint_handler *v121;
  OS_nw_endpoint *v122;
  void *v123;
  NWConcrete_nw_endpoint_handler *v124;
  _BOOL4 v125;
  NSObject *v126;
  char *v127;
  char *v128;
  _BOOL4 v129;
  const char *v130;
  nw_endpoint_t v131;
  const char *v132;
  unsigned int *v133;
  unsigned int *v134;
  uint64_t v135;
  const char *v136;
  int v137;
  BOOL v138;
  NSObject *v139;
  char *v140;
  char *v141;
  _BOOL4 v142;
  const char *v143;
  nw_endpoint_t v144;
  const char *v145;
  unsigned int *v146;
  unsigned int *v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  char logging_disabled;
  const char *v152;
  const char *v153;
  nw_endpoint_t v154;
  const char *v155;
  const char *v156;
  const char *v157;
  id v158;
  void **v159;
  const char *v160;
  const char *v161;
  const char *v162;
  nw_endpoint_t v163;
  const char *v164;
  const char *v165;
  const char *v166;
  id v167;
  void **v168;
  void **v169;
  const char *v170;
  void **v171;
  id v172;
  NSObject *v173;
  const char *v174;
  const char *v175;
  nw_endpoint_t v176;
  const char *v177;
  const char *v178;
  const char *v179;
  id v180;
  void **v181;
  id v182;
  void *handle;
  char v184;
  NWConcrete_nw_endpoint_handler *v185;
  _BOOL4 v186;
  NSObject *v187;
  char *v188;
  char *v189;
  _BOOL4 v190;
  const char *v191;
  nw_endpoint_t v192;
  const char *v193;
  unsigned int *v194;
  unsigned int *v195;
  uint64_t v196;
  const char *v197;
  nw_protocol_callbacks *callbacks;
  void *v199;
  char v200;
  uint64_t v201;
  nw_protocol_callbacks *v202;
  uint64_t (*connect)(void);
  char v204;
  void **v205;
  void **v206;
  const char *v207;
  void **v208;
  id v209;
  char v210;
  const char *v211;
  const char *v212;
  nw_endpoint_t v213;
  const char *v214;
  const char *v215;
  const char *v216;
  id v217;
  void *v218;
  char *v219;
  NSObject *v220;
  os_log_type_t v221;
  char *backtrace_string;
  os_log_type_t v223;
  _BOOL4 v224;
  os_log_type_t v225;
  nw_protocol *v226;
  const char *v227;
  const char *v228;
  nw_endpoint_t v229;
  const char *v230;
  const char *v231;
  const char *v232;
  id v233;
  id v234;
  const char *v235;
  char *v236;
  NSObject *v237;
  os_log_type_t v238;
  const char *v239;
  char *v240;
  os_log_type_t v241;
  _BOOL4 v242;
  const char *v243;
  os_log_type_t v244;
  const char *v245;
  const char *v246;
  void *v248;
  nw_protocol_identifier *identifier;
  char *v250;
  NSObject *v251;
  os_log_type_t v252;
  nw_protocol_identifier *v253;
  char *v254;
  NSObject *v255;
  os_log_type_t v256;
  _BOOL4 v257;
  nw_protocol_identifier *v258;
  nw_protocol *v259;
  NSObject *v260;
  const char *v261;
  const char *v262;
  nw_endpoint_t v263;
  const char *v264;
  const char *v265;
  const char *v266;
  id v267;
  os_log_type_t v268;
  nw_protocol_identifier *v269;
  nw_protocol_identifier *v270;
  os_log_t log;
  NSObject *loga;
  char *v273;
  const char *v274;
  const char *v275;
  const char *v276;
  nw_protocol *v277;
  const char *v278;
  nw_protocol *v279;
  NWConcrete_nw_endpoint_handler *v280;
  int v281;
  char *id_str;
  nw_endpoint_t v284;
  const char *v285;
  NWConcrete_nw_endpoint_mode_handler *v286;
  char v287;
  os_log_type_t type;
  uint64_t v289;
  char v290;
  uint8_t buf[4];
  const char *v292;
  __int16 v293;
  char *v294;
  __int16 v295;
  nw_protocol *v296;
  __int16 v297;
  void *v298;
  __int16 v299;
  void *v300;
  __int16 v301;
  const char *v302;
  __int16 v303;
  id v304;
  __int16 v305;
  _QWORD v306[2];
  __int128 v307;
  uint64_t v308;

  v308 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = v8;
  if (!v8)
  {
    __nwlog_obj();
    v218 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v292 = "nw_endpoint_handler_get_mode";
    v219 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v307) = 16;
    LOBYTE(v289) = 0;
    if (__nwlog_fault(v219, &v307, &v289))
    {
      if (v307 == 17)
      {
        __nwlog_obj();
        v220 = objc_claimAutoreleasedReturnValue();
        v221 = v307;
        if (os_log_type_enabled(v220, (os_log_type_t)v307))
        {
          *(_DWORD *)buf = 136446210;
          v292 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v220, v221, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if ((_BYTE)v289)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v220 = objc_claimAutoreleasedReturnValue();
        v223 = v307;
        v224 = os_log_type_enabled(v220, (os_log_type_t)v307);
        if (backtrace_string)
        {
          if (v224)
          {
            *(_DWORD *)buf = 136446466;
            v292 = "nw_endpoint_handler_get_mode";
            v293 = 2082;
            v294 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v220, v223, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_275;
        }
        if (v224)
        {
          *(_DWORD *)buf = 136446210;
          v292 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v220, v223, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v220 = objc_claimAutoreleasedReturnValue();
        v225 = v307;
        if (os_log_type_enabled(v220, (os_log_type_t)v307))
        {
          *(_DWORD *)buf = 136446210;
          v292 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v220, v225, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_275:
    if (v219)
      free(v219);
    mode = 0;
LABEL_278:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v234 = (id)gLogObj;
    if (mode > 5)
      v235 = "unknown-mode";
    else
      v235 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v292 = "nw_endpoint_flow_setup_protocols";
    v293 = 2082;
    v294 = (char *)v235;
    v295 = 2082;
    v296 = (nw_protocol *)"flow";
    v236 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v307) = 16;
    LOBYTE(v289) = 0;
    if (__nwlog_fault(v236, &v307, &v289))
    {
      if (v307 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v237 = (id)gLogObj;
        v238 = v307;
        if (os_log_type_enabled(v237, (os_log_type_t)v307))
        {
          if (mode > 5)
            v239 = "unknown-mode";
          else
            v239 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v292 = "nw_endpoint_flow_setup_protocols";
          v293 = 2082;
          v294 = (char *)v239;
          v295 = 2082;
          v296 = (nw_protocol *)"flow";
          _os_log_impl(&dword_182FBE000, v237, v238, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if ((_BYTE)v289)
      {
        v240 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v237 = (id)gLogObj;
        v241 = v307;
        v242 = os_log_type_enabled(v237, (os_log_type_t)v307);
        if (v240)
        {
          if (v242)
          {
            if (mode > 5)
              v243 = "unknown-mode";
            else
              v243 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            v292 = "nw_endpoint_flow_setup_protocols";
            v293 = 2082;
            v294 = (char *)v243;
            v295 = 2082;
            v296 = (nw_protocol *)"flow";
            v297 = 2082;
            v298 = v240;
            _os_log_impl(&dword_182FBE000, v237, v241, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v240);
          if (!v236)
            goto LABEL_312;
          goto LABEL_311;
        }
        if (v242)
        {
          if (mode > 5)
            v246 = "unknown-mode";
          else
            v246 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v292 = "nw_endpoint_flow_setup_protocols";
          v293 = 2082;
          v294 = (char *)v246;
          v295 = 2082;
          v296 = (nw_protocol *)"flow";
          _os_log_impl(&dword_182FBE000, v237, v241, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v237 = (id)gLogObj;
        v244 = v307;
        if (os_log_type_enabled(v237, (os_log_type_t)v307))
        {
          if (mode > 5)
            v245 = "unknown-mode";
          else
            v245 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v292 = "nw_endpoint_flow_setup_protocols";
          v293 = 2082;
          v294 = (char *)v245;
          v295 = 2082;
          v296 = (nw_protocol *)"flow";
          _os_log_impl(&dword_182FBE000, v237, v244, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v236)
    {
LABEL_312:
      v60 = 0;
      goto LABEL_313;
    }
LABEL_311:
    free(v236);
    goto LABEL_312;
  }
  mode = v8->mode;

  if (mode != 2)
    goto LABEL_278;
  v281 = a4;
  v11 = nw_endpoint_handler_copy_flow(v9);
  v286 = v11;
  if ((*((_BYTE *)v11 + 35) & 1) != 0)
  {
    v12 = v9;
    v13 = *((_BYTE *)v12 + 268);

    if (!a2)
    {
      if ((v13 & 0x20) != 0)
      {
        v60 = 1;
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v25 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          v26 = v12;

          v27 = v26;
          v28 = *((_BYTE *)v12 + 268);

          if ((v28 & 1) != 0)
            v29 = "dry-run ";
          else
            v29 = "";
          v30 = nw_endpoint_handler_copy_endpoint(v27);
          logging_description = nw_endpoint_get_logging_description(v30);
          id_str = v26->id_str;
          v32 = v27;
          v33 = v32;
          v34 = v32[30];
          if (v34 > 5)
            v35 = "unknown-state";
          else
            v35 = off_1E149FC48[v34];

          v39 = v33;
          v40 = v39;
          v41 = "path";
          switch(v9->mode)
          {
            case 0:
              break;
            case 1:
              v41 = "resolver";
              break;
            case 2:
              v41 = nw_endpoint_flow_mode_string(v39[31]);
              break;
            case 3:
              v41 = "proxy";
              break;
            case 4:
              v41 = "fallback";
              break;
            case 5:
              v41 = "transform";
              break;
            default:
              v41 = "unknown-mode";
              break;
          }

          v108 = v40;
          os_unfair_lock_lock((os_unfair_lock_t)v108 + 28);
          v109 = v108[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v108 + 28);

          *(_DWORD *)buf = 136447746;
          v292 = "nw_endpoint_flow_setup_protocols";
          v293 = 2082;
          v294 = id_str;
          v295 = 2082;
          v296 = (nw_protocol *)v29;
          v297 = 2082;
          v298 = (void *)logging_description;
          v299 = 2082;
          v300 = (void *)v35;
          v301 = 2082;
          v302 = v41;
          v303 = 2114;
          v304 = v109;
          _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already in setup protocols, skipping", buf, 0x48u);

        }
        v60 = 1;
        v11 = v286;
      }
      goto LABEL_247;
    }
    if ((v13 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v14 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v15 = v12;

        v16 = v15;
        v17 = *((_BYTE *)v12 + 268);

        if ((v17 & 1) != 0)
          v18 = "dry-run ";
        else
          v18 = "";
        v19 = nw_endpoint_handler_copy_endpoint(v16);
        v20 = nw_endpoint_get_logging_description(v19);
        v273 = v15->id_str;
        v21 = v16;
        v22 = v21;
        v23 = v21[30];
        if (v23 > 5)
          v24 = "unknown-state";
        else
          v24 = off_1E149FC48[v23];
        log = (os_log_t)v24;

        v36 = v22;
        v37 = v36;
        v277 = a3;
        v38 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            v38 = "resolver";
            break;
          case 2:
            v38 = nw_endpoint_flow_mode_string(v36[31]);
            break;
          case 3:
            v38 = "proxy";
            break;
          case 4:
            v38 = "fallback";
            break;
          case 5:
            v38 = "transform";
            break;
          default:
            v38 = "unknown-mode";
            break;
        }

        v42 = v37;
        os_unfair_lock_lock((os_unfair_lock_t)v42 + 28);
        v43 = v42[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v42 + 28);

        *(_DWORD *)buf = 136448002;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = v273;
        v295 = 2082;
        v296 = (nw_protocol *)v18;
        v297 = 2082;
        v298 = (void *)v20;
        v299 = 2082;
        v300 = log;
        v301 = 2082;
        v302 = v38;
        v303 = 2114;
        v304 = v43;
        v305 = 2048;
        v306[0] = a2;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] re-entered with attach_protocol %p, continuing", buf, 0x52u);

        a3 = v277;
      }

      v11 = v286;
    }
  }
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_79826);
  if (_nw_signposts_enabled && kdebug_is_enabled())
    kdebug_trace();
  *((_BYTE *)v11 + 35) |= 1u;
  if ((*((_BYTE *)v11 + 32) & 0x40) != 0)
  {
    v61 = v9;
    v62 = (*((_BYTE *)v61 + 268) & 0x20) == 0;

    v11 = v286;
    if (v62)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v63 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        v64 = v61;

        v65 = v64;
        v66 = (*((_BYTE *)v61 + 268) & 1) == 0;

        if (v66)
          v67 = "";
        else
          v67 = "dry-run ";
        v68 = nw_endpoint_handler_copy_endpoint(v65);
        v69 = nw_endpoint_get_logging_description(v68);
        v70 = v65;
        v71 = v70;
        v72 = v70[30];
        if (v72 > 5)
          v73 = "unknown-state";
        else
          v73 = off_1E149FC48[v72];

        v74 = v71;
        v75 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            v75 = "resolver";
            break;
          case 2:
            v75 = nw_endpoint_flow_mode_string(v74[31]);
            break;
          case 3:
            v75 = "proxy";
            break;
          case 4:
            v75 = "fallback";
            break;
          case 5:
            v75 = "transform";
            break;
          default:
            v75 = "unknown-mode";
            break;
        }
        v278 = v75;

        v94 = v9;
        v95 = v68;
        v96 = v73;
        v97 = v69;
        v98 = (nw_protocol *)v67;
        v99 = v74;
        os_unfair_lock_lock((os_unfair_lock_t)v99 + 28);
        v100 = v99[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v99 + 28);

        v101 = v97;
        v102 = v95;
        v9 = v94;
        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = v64->id_str;
        v295 = 2082;
        v296 = v98;
        v297 = 2082;
        v298 = (void *)v101;
        v299 = 2082;
        v300 = (void *)v96;
        v301 = 2082;
        v302 = v278;
        v303 = 2114;
        v304 = v100;
        _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already set up", buf, 0x48u);

      }
      v11 = v286;
    }
    if (!v281)
      goto LABEL_241;
    goto LABEL_130;
  }
  if ((*((_BYTE *)v11 + 32) & 4) == 0 && (a5 & 1) == 0 && !*((_QWORD *)v11 + 104))
  {
    v44 = v9;
    v45 = v44[4];

    upper_transport_protocol = nw_parameters_get_upper_transport_protocol(v45);
    v47 = v44;
    v48 = (void **)v47[7];

    LODWORD(v307) = 0;
    if (v48)
    {
      v49 = nw_path_evaluator_create_flow_inner(v48[3], upper_transport_protocol == 253, 0, 0, 0, 0, 0, 0, &v307);
      v50 = (void *)*((_QWORD *)v286 + 104);
      *((_QWORD *)v286 + 104) = v49;

    }
    if (!*((_QWORD *)v286 + 104) && (*((_BYTE *)v286 + 34) & 2) == 0)
    {
      if ((nw_endpoint_handler_get_logging_disabled(v47) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v51 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          id_string = nw_endpoint_handler_get_id_string(v47);
          v53 = nw_endpoint_handler_dry_run_string(v47);
          v284 = nw_endpoint_handler_copy_endpoint(v47);
          v54 = nw_endpoint_get_logging_description(v284);
          v55 = nw_endpoint_handler_state_string(v47);
          v56 = nw_endpoint_handler_mode_string(v47);
          v57 = nw_endpoint_handler_copy_current_path(v47);
          *(_DWORD *)buf = 136447746;
          v292 = "nw_endpoint_flow_setup_protocols";
          v293 = 2082;
          v294 = (char *)id_string;
          v295 = 2082;
          v296 = (nw_protocol *)v53;
          v297 = 2082;
          v298 = (void *)v54;
          v299 = 2082;
          v300 = (void *)v55;
          v301 = 2082;
          v302 = v56;
          v303 = 2114;
          v304 = v57;
          _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to request add flow", buf, 0x48u);

        }
      }
      if ((_DWORD)v307 && !*((_QWORD *)v286 + 109))
      {
        posix_error = nw_error_create_posix_error(v307);
        v59 = (void *)*((_QWORD *)v286 + 109);
        *((_QWORD *)v286 + 109) = posix_error;

      }
      nw_endpoint_flow_failed_with_error(v47, 1, 0);

      v60 = 0;
      v11 = v286;
      goto LABEL_242;
    }

    v11 = v286;
  }
  v76 = (void *)*((_QWORD *)v11 + 104);
  if (v76)
  {
    v307 = 0uLL;
    v77 = v76;
    if (!uuid_is_null(v77 + 32))
      v307 = *((_OWORD *)v77 + 2);

    *(_OWORD *)((char *)v286 + 376) = v307;
    if (a2)
      *(_OWORD *)a2->flow_id = v307;
    if (nw_endpoint_handler_get_minimize_logging(v9))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) != 0)
        goto LABEL_128;
      v226 = a3;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v80 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        v227 = nw_endpoint_handler_get_id_string(v9);
        v228 = nw_endpoint_handler_dry_run_string(v9);
        v229 = nw_endpoint_handler_copy_endpoint(v9);
        v230 = nw_endpoint_get_logging_description(v229);
        v231 = nw_endpoint_handler_state_string(v9);
        v232 = nw_endpoint_handler_mode_string(v9);
        v233 = nw_endpoint_handler_copy_current_path(v9);
        *(_DWORD *)buf = 136448258;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = (char *)v227;
        v295 = 2082;
        v296 = (nw_protocol *)v228;
        v297 = 2082;
        v298 = (void *)v230;
        v299 = 2082;
        v300 = (void *)v231;
        v301 = 2082;
        v302 = v232;
        v303 = 2114;
        v304 = v233;
        v305 = 1042;
        LODWORD(v306[0]) = 16;
        WORD2(v306[0]) = 2098;
        *(_QWORD *)((char *)v306 + 6) = (char *)v286 + 376;
        _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] setup flow id %{public,uuid_t}.16P", buf, 0x58u);

        a3 = v226;
      }
      goto LABEL_127;
    }
    v78 = v9;
    v79 = (*((_BYTE *)v78 + 268) & 0x20) == 0;

    if (v79)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v80 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
      {
        v81 = v78;

        v82 = v81;
        v83 = (*((_BYTE *)v78 + 268) & 1) == 0;

        if (v83)
          v84 = "";
        else
          v84 = "dry-run ";
        v85 = nw_endpoint_handler_copy_endpoint(v82);
        v86 = nw_endpoint_get_logging_description(v85);
        v87 = v82;
        v88 = v87;
        v89 = v87[30];
        if (v89 > 5)
          v90 = "unknown-state";
        else
          v90 = off_1E149FC48[v89];

        v91 = v88;
        v92 = v91;
        v274 = "path";
        switch(v9->mode)
        {
          case 0:
            goto LABEL_111;
          case 1:
            v93 = "resolver";
            goto LABEL_110;
          case 2:
            v274 = nw_endpoint_flow_mode_string(v91[31]);
            goto LABEL_111;
          case 3:
            v93 = "proxy";
            goto LABEL_110;
          case 4:
            v93 = "fallback";
            goto LABEL_110;
          case 5:
            v93 = "transform";
            goto LABEL_110;
          default:
            v93 = "unknown-mode";
LABEL_110:
            v274 = v93;
LABEL_111:

            loga = v80;
            v103 = v86;
            v104 = a3;
            v105 = v92;
            os_unfair_lock_lock((os_unfair_lock_t)v105 + 28);
            v106 = v105[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v105 + 28);

            v107 = v103;
            v80 = loga;
            a3 = v104;
            *(_DWORD *)buf = 136448258;
            v292 = "nw_endpoint_flow_setup_protocols";
            v293 = 2082;
            v294 = v81->id_str;
            v295 = 2082;
            v296 = (nw_protocol *)v84;
            v297 = 2082;
            v298 = (void *)v107;
            v299 = 2082;
            v300 = (void *)v90;
            v301 = 2082;
            v302 = v274;
            v303 = 2114;
            v304 = v106;
            v305 = 1042;
            LODWORD(v306[0]) = 16;
            WORD2(v306[0]) = 2098;
            *(_QWORD *)((char *)v306 + 6) = (char *)v286 + 376;
            _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] setup flow id %{public,uuid_t}.16P", buf, 0x58u);

            break;
        }
      }
LABEL_127:

      goto LABEL_128;
    }
    goto LABEL_128;
  }
  if (!a5)
    goto LABEL_128;
  os_unfair_lock_lock((os_unfair_lock_t)&nw_uuid_generate_insecure(unsigned char *)::uuid_lock);
  if (uuid_is_null((const unsigned __int8 *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid))
    goto LABEL_120;
  if ((_QWORD)nw_uuid_generate_insecure(unsigned char *)::last_used_uuid != -1)
  {
    *(_QWORD *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid = nw_uuid_generate_insecure(unsigned char *)::last_used_uuid
                                                                           + 1;
    goto LABEL_121;
  }
  if (*((_QWORD *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1) == -1)
  {
LABEL_120:
    uuid_generate_random((unsigned __int8 *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid);
    BYTE9(nw_uuid_generate_insecure(unsigned char *)::last_used_uuid) = -1;
  }
  else
  {
    ++*((_QWORD *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1);
  }
LABEL_121:
  *(_OWORD *)((char *)v286 + 376) = nw_uuid_generate_insecure(unsigned char *)::last_used_uuid;
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_uuid_generate_insecure(unsigned char *)::uuid_lock);
  if (nw_endpoint_handler_get_minimize_logging(v9))
  {
    if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
    {
      v259 = a3;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v260 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG))
      {
        v261 = nw_endpoint_handler_get_id_string(v9);
        v262 = nw_endpoint_handler_dry_run_string(v9);
        v263 = nw_endpoint_handler_copy_endpoint(v9);
        v264 = nw_endpoint_get_logging_description(v263);
        v265 = nw_endpoint_handler_state_string(v9);
        v266 = nw_endpoint_handler_mode_string(v9);
        v267 = nw_endpoint_handler_copy_current_path(v9);
        *(_DWORD *)buf = 136448258;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = (char *)v261;
        v295 = 2082;
        v296 = (nw_protocol *)v262;
        v297 = 2082;
        v298 = (void *)v264;
        v299 = 2082;
        v300 = (void *)v265;
        v301 = 2082;
        v302 = v266;
        v303 = 2114;
        v304 = v267;
        v305 = 1042;
        LODWORD(v306[0]) = 16;
        WORD2(v306[0]) = 2098;
        *(_QWORD *)((char *)v306 + 6) = (char *)v286 + 376;
        _os_log_impl(&dword_182FBE000, v260, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] generated flow id %{public,uuid_t}.16P", buf, 0x58u);

      }
      a3 = v259;
    }
    goto LABEL_128;
  }
  v110 = v9;
  v111 = (*((_BYTE *)v110 + 268) & 0x20) == 0;

  if (v111)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v80 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      v112 = nw_endpoint_handler_get_id_string(v110);
      v113 = nw_endpoint_handler_dry_run_string(v110);
      v114 = nw_endpoint_handler_copy_endpoint(v110);
      v279 = a3;
      v115 = nw_endpoint_get_logging_description(v114);
      v116 = nw_endpoint_handler_state_string(v110);
      v117 = nw_endpoint_handler_mode_string(v110);
      v118 = nw_endpoint_handler_copy_current_path(v110);
      *(_DWORD *)buf = 136448258;
      v292 = "nw_endpoint_flow_setup_protocols";
      v293 = 2082;
      v294 = (char *)v112;
      v295 = 2082;
      v296 = (nw_protocol *)v113;
      v297 = 2082;
      v298 = (void *)v115;
      v299 = 2082;
      v300 = (void *)v116;
      v301 = 2082;
      v302 = v117;
      v303 = 2114;
      v304 = v118;
      v305 = 1042;
      LODWORD(v306[0]) = 16;
      WORD2(v306[0]) = 2098;
      *(_QWORD *)((char *)v306 + 6) = (char *)v286 + 376;
      _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] generated flow id %{public,uuid_t}.16P", buf, 0x58u);

      a3 = v279;
    }
    goto LABEL_127;
  }
LABEL_128:
  v11 = v286;
  if (!nw_endpoint_flow_attach_protocols(v9, a2, a3))
  {
    v60 = 0;
    v137 = v281;
LABEL_238:
    if (!v60 && v137)
    {
      nw_endpoint_flow_failed_with_error(v9, 1, 0);
      v60 = 0;
    }
    goto LABEL_242;
  }
  *((_BYTE *)v286 + 32) |= 0x40u;
  if (!v281)
    goto LABEL_241;
LABEL_130:
  v119 = *((_BYTE *)v11 + 32);
  v120 = v9;
  v121 = v120;
  v280 = v120;
  if ((v119 & 2) != 0)
  {
    v138 = (*((_BYTE *)v120 + 268) & 0x20) == 0;

    v11 = v286;
    if (v138)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v139 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
      {
        v140 = v280;

        v141 = v140;
        v142 = (*((_BYTE *)v280 + 268) & 1) == 0;

        if (v142)
          v143 = "";
        else
          v143 = "dry-run ";
        v144 = nw_endpoint_handler_copy_endpoint(v141);
        v145 = nw_endpoint_get_logging_description(v144);
        v146 = v141;
        v147 = v146;
        v148 = v146[30];
        if (v148 > 5)
          v149 = "unknown-state";
        else
          v149 = off_1E149FC48[v148];

        v159 = v147;
        v160 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            v160 = "resolver";
            break;
          case 2:
            v160 = nw_endpoint_flow_mode_string(v159[31]);
            break;
          case 3:
            v160 = "proxy";
            break;
          case 4:
            v160 = "fallback";
            break;
          case 5:
            v160 = "transform";
            break;
          default:
            v160 = "unknown-mode";
            break;
        }
        v276 = v160;

        v171 = v159;
        os_unfair_lock_lock((os_unfair_lock_t)v171 + 28);
        v172 = v171[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v171 + 28);

        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = v140 + 168;
        v295 = 2082;
        v296 = (nw_protocol *)v143;
        v297 = 2082;
        v298 = (void *)v145;
        v299 = 2082;
        v300 = (void *)v149;
        v301 = 2082;
        v302 = v276;
        v303 = 2114;
        v304 = v172;
        _os_log_impl(&dword_182FBE000, v139, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] leaf flow starting", buf, 0x48u);

      }
      goto LABEL_193;
    }
    goto LABEL_194;
  }
  v122 = v120->endpoint;

  v123 = (void *)*((_QWORD *)v286 + 121);
  *((_QWORD *)v286 + 121) = v122;

  v11 = v286;
  if (*((_QWORD *)v286 + 117))
  {
    v124 = v280;
    v125 = (*((_BYTE *)v124 + 268) & 0x20) == 0;

    v11 = v286;
    if (v125)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v126 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        v127 = v124;

        v128 = v127;
        v129 = (*((_BYTE *)v124 + 268) & 1) == 0;

        if (v129)
          v130 = "";
        else
          v130 = "dry-run ";
        v131 = nw_endpoint_handler_copy_endpoint(v128);
        v132 = nw_endpoint_get_logging_description(v131);
        v133 = v128;
        v134 = v133;
        v135 = v133[30];
        if (v135 > 5)
          v136 = "unknown-state";
        else
          v136 = off_1E149FC48[v135];
        v275 = v136;

        v168 = v134;
        v169 = v168;
        v170 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            v170 = "resolver";
            break;
          case 2:
            v170 = nw_endpoint_flow_mode_string(v168[31]);
            break;
          case 3:
            v170 = "proxy";
            break;
          case 4:
            v170 = "fallback";
            break;
          case 5:
            v170 = "transform";
            break;
          default:
            v170 = "unknown-mode";
            break;
        }

        v181 = v169;
        os_unfair_lock_lock((os_unfair_lock_t)v181 + 28);
        v182 = v181[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v181 + 28);

        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = v127 + 168;
        v295 = 2082;
        v296 = (nw_protocol *)v130;
        v297 = 2082;
        v298 = (void *)v132;
        v299 = 2082;
        v300 = (void *)v275;
        v301 = 2082;
        v302 = v170;
        v303 = 2114;
        v304 = v182;
        _os_log_impl(&dword_182FBE000, v126, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child flow connected, starting", buf, 0x48u);

      }
LABEL_192:

LABEL_193:
      v11 = v286;
      goto LABEL_194;
    }
    goto LABEL_194;
  }
  if ((*((_BYTE *)v286 + 33) & 1) != 0)
  {
    if ((nw_endpoint_handler_get_logging_disabled(v280) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v126 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        v161 = nw_endpoint_handler_get_id_string(v280);
        v162 = nw_endpoint_handler_dry_run_string(v280);
        v163 = nw_endpoint_handler_copy_endpoint(v280);
        v164 = nw_endpoint_get_logging_description(v163);
        v165 = nw_endpoint_handler_state_string(v280);
        v166 = nw_endpoint_handler_mode_string(v280);
        v167 = nw_endpoint_handler_copy_current_path(v280);
        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = (char *)v161;
        v295 = 2082;
        v296 = (nw_protocol *)v162;
        v297 = 2082;
        v298 = (void *)v164;
        v299 = 2082;
        v300 = (void *)v165;
        v301 = 2082;
        v302 = v166;
        v303 = 2114;
        v304 = v167;
        _os_log_impl(&dword_182FBE000, v126, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] joined protocol stack, starting", buf, 0x48u);

      }
      goto LABEL_192;
    }
    goto LABEL_194;
  }
  if (!*((_QWORD *)v286 + 116))
  {
    if ((nw_endpoint_handler_get_logging_disabled(v280) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v173 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v173, OS_LOG_TYPE_DEBUG))
      {
        v174 = nw_endpoint_handler_get_id_string(v280);
        v175 = nw_endpoint_handler_dry_run_string(v280);
        v176 = nw_endpoint_handler_copy_endpoint(v280);
        v177 = nw_endpoint_get_logging_description(v176);
        v178 = nw_endpoint_handler_state_string(v280);
        v179 = nw_endpoint_handler_mode_string(v280);
        v180 = nw_endpoint_handler_copy_current_path(v280);
        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = (char *)v174;
        v295 = 2082;
        v296 = (nw_protocol *)v175;
        v297 = 2082;
        v298 = (void *)v177;
        v299 = 2082;
        v300 = (void *)v178;
        v301 = 2082;
        v302 = v179;
        v303 = 2114;
        v304 = v180;
        _os_log_impl(&dword_182FBE000, v173, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] persistent protocol stack, starting", buf, 0x48u);

      }
      v11 = v286;
    }
    *((_BYTE *)v11 + 35) |= 8u;
    goto LABEL_194;
  }
  v150 = *((_QWORD *)v286 + 118);
  logging_disabled = nw_endpoint_handler_get_logging_disabled(v280);
  if (v150)
  {
    if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v126 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        v152 = nw_endpoint_handler_get_id_string(v280);
        v153 = nw_endpoint_handler_dry_run_string(v280);
        v154 = nw_endpoint_handler_copy_endpoint(v280);
        v155 = nw_endpoint_get_logging_description(v154);
        v156 = nw_endpoint_handler_state_string(v280);
        v157 = nw_endpoint_handler_mode_string(v280);
        v158 = nw_endpoint_handler_copy_current_path(v280);
        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        v293 = 2082;
        v294 = (char *)v152;
        v295 = 2082;
        v296 = (nw_protocol *)v153;
        v297 = 2082;
        v298 = (void *)v155;
        v299 = 2082;
        v300 = (void *)v156;
        v301 = 2082;
        v302 = v157;
        v303 = 2114;
        v304 = v158;
        _os_log_impl(&dword_182FBE000, v126, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] has candidate children, starting", buf, 0x48u);

      }
      goto LABEL_192;
    }
LABEL_194:
    if ((*((char *)v11 + 32) & 0x80000000) == 0)
    {
      if (!a2)
      {
        v137 = v281;
        if (nw_endpoint_flow_connect(v280))
        {
LABEL_223:
          *((_BYTE *)v11 + 32) |= 0x80u;
          goto LABEL_236;
        }
        goto LABEL_208;
      }
      handle = a2->handle;
      v137 = v281;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        callbacks = a2[1].callbacks;
        if (callbacks)
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        *(_QWORD *)&v307 = a2;
        v184 = BYTE8(v307) | 1;
      }
      else
      {
        *(_QWORD *)&v307 = a2;
        v184 = BYTE8(v307) & 0xFE;
      }
      BYTE8(v307) = v184;
      v199 = (void *)*((_QWORD *)v11 + 52);
      if (v199 == &nw_protocol_ref_counted_handle)
      {
        v201 = *((_QWORD *)v11 + 58);
        if (v201)
          *((_QWORD *)v11 + 58) = v201 + 1;
        v289 = (uint64_t)v11 + 376;
        v200 = v290 | 1;
      }
      else
      {
        v289 = (uint64_t)v11 + 376;
        v200 = v290 & 0xFE;
      }
      v290 = v200;
      v202 = a2->callbacks;
      if (v202)
      {
        connect = (uint64_t (*)(void))v202->connect;
        if (connect)
        {
          v204 = connect();
          if (v199 != &nw_protocol_ref_counted_handle)
            goto LABEL_221;
          goto LABEL_220;
        }
      }
      __nwlog_obj();
      v248 = (void *)objc_claimAutoreleasedReturnValue();
      identifier = a2->identifier;
      *(_DWORD *)buf = 136446722;
      v292 = "__nw_protocol_connect";
      if (!identifier)
        identifier = (nw_protocol_identifier *)"invalid";
      v293 = 2082;
      v294 = (char *)identifier;
      v295 = 2048;
      v296 = a2;
      v250 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v287 = 0;
      if (__nwlog_fault(v250, &type, &v287))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v251 = objc_claimAutoreleasedReturnValue();
          v252 = type;
          if (os_log_type_enabled(v251, type))
          {
            v253 = a2->identifier;
            if (!v253)
              v253 = (nw_protocol_identifier *)"invalid";
            *(_DWORD *)buf = 136446722;
            v292 = "__nw_protocol_connect";
            v293 = 2082;
            v294 = (char *)v253;
            v295 = 2048;
            v296 = a2;
            _os_log_impl(&dword_182FBE000, v251, v252, "%{public}s protocol %{public}s (%p) has invalid connect callback", buf, 0x20u);
          }
LABEL_322:

          goto LABEL_349;
        }
        if (!v287)
        {
          __nwlog_obj();
          v251 = objc_claimAutoreleasedReturnValue();
          v268 = type;
          if (os_log_type_enabled(v251, type))
          {
            v269 = a2->identifier;
            if (!v269)
              v269 = (nw_protocol_identifier *)"invalid";
            *(_DWORD *)buf = 136446722;
            v292 = "__nw_protocol_connect";
            v293 = 2082;
            v294 = (char *)v269;
            v295 = 2048;
            v296 = a2;
            _os_log_impl(&dword_182FBE000, v251, v268, "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded", buf, 0x20u);
          }
          goto LABEL_322;
        }
        v254 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v255 = objc_claimAutoreleasedReturnValue();
        v256 = type;
        v257 = os_log_type_enabled(v255, type);
        if (v254)
        {
          if (v257)
          {
            v258 = a2->identifier;
            if (!v258)
              v258 = (nw_protocol_identifier *)"invalid";
            *(_DWORD *)buf = 136446978;
            v292 = "__nw_protocol_connect";
            v293 = 2082;
            v294 = (char *)v258;
            v295 = 2048;
            v296 = a2;
            v297 = 2082;
            v298 = v254;
            _os_log_impl(&dword_182FBE000, v255, v256, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v254);
        }
        else
        {
          if (v257)
          {
            v270 = a2->identifier;
            if (!v270)
              v270 = (nw_protocol_identifier *)"invalid";
            *(_DWORD *)buf = 136446722;
            v292 = "__nw_protocol_connect";
            v293 = 2082;
            v294 = (char *)v270;
            v295 = 2048;
            v296 = a2;
            _os_log_impl(&dword_182FBE000, v255, v256, "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace", buf, 0x20u);
          }

        }
      }
LABEL_349:
      if (v250)
        free(v250);
      v204 = 0;
      v11 = v286;
      v137 = v281;
      if (v199 != &nw_protocol_ref_counted_handle)
      {
LABEL_221:
        if (handle == &nw_protocol_ref_counted_handle)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v307);
          if ((v204 & 1) != 0)
            goto LABEL_223;
        }
        else if ((v204 & 1) != 0)
        {
          goto LABEL_223;
        }
LABEL_208:
        v60 = 0;
        goto LABEL_238;
      }
LABEL_220:
      nw::release_if_needed<nw_protocol *>(&v289);
      goto LABEL_221;
    }
    v185 = v280;
    v186 = (*((_BYTE *)v185 + 268) & 0x20) == 0;

    v11 = v286;
    if (!v186)
      goto LABEL_236;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v187 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
    {
      v188 = v185;

      v189 = v188;
      v190 = (*((_BYTE *)v185 + 268) & 1) == 0;

      if (v190)
        v191 = "";
      else
        v191 = "dry-run ";
      v192 = nw_endpoint_handler_copy_endpoint(v189);
      v193 = nw_endpoint_get_logging_description(v192);
      v194 = v189;
      v195 = v194;
      v196 = v194[30];
      if (v196 > 5)
        v197 = "unknown-state";
      else
        v197 = off_1E149FC48[v196];
      v285 = v197;

      v205 = v195;
      v206 = v205;
      v207 = "path";
      switch(v9->mode)
      {
        case 0:
          break;
        case 1:
          v207 = "resolver";
          break;
        case 2:
          v207 = nw_endpoint_flow_mode_string(v205[31]);
          break;
        case 3:
          v207 = "proxy";
          break;
        case 4:
          v207 = "fallback";
          break;
        case 5:
          v207 = "transform";
          break;
        default:
          v207 = "unknown-mode";
          break;
      }

      v208 = v206;
      os_unfair_lock_lock((os_unfair_lock_t)v208 + 28);
      v209 = v208[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v208 + 28);

      *(_DWORD *)buf = 136447746;
      v292 = "nw_endpoint_flow_setup_protocols";
      v293 = 2082;
      v294 = v188 + 168;
      v295 = 2082;
      v296 = (nw_protocol *)v191;
      v297 = 2082;
      v298 = (void *)v193;
      v299 = 2082;
      v300 = (void *)v285;
      v301 = 2082;
      v302 = v207;
      v303 = 2114;
      v304 = v209;
      _os_log_impl(&dword_182FBE000, v187, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already started", buf, 0x48u);

    }
    goto LABEL_235;
  }
  if ((logging_disabled & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v187 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
    {
      v211 = nw_endpoint_handler_get_id_string(v280);
      v212 = nw_endpoint_handler_dry_run_string(v280);
      v213 = nw_endpoint_handler_copy_endpoint(v280);
      v214 = nw_endpoint_get_logging_description(v213);
      v215 = nw_endpoint_handler_state_string(v280);
      v216 = nw_endpoint_handler_mode_string(v280);
      v217 = nw_endpoint_handler_copy_current_path(v280);
      *(_DWORD *)buf = 136447746;
      v292 = "nw_endpoint_flow_setup_protocols";
      v293 = 2082;
      v294 = (char *)v211;
      v295 = 2082;
      v296 = (nw_protocol *)v212;
      v297 = 2082;
      v298 = (void *)v214;
      v299 = 2082;
      v300 = (void *)v215;
      v301 = 2082;
      v302 = v216;
      v303 = 2114;
      v304 = v217;
      _os_log_impl(&dword_182FBE000, v187, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not doing anything yet, no connected endpoint handler", buf, 0x48u);

    }
LABEL_235:

    v11 = v286;
  }
LABEL_236:
  v210 = *((_BYTE *)v11 + 35);
  if ((v210 & 0x18) == 8)
  {
    *((_BYTE *)v11 + 35) = v210 & 0xF7;
    nw_endpoint_flow_start_child(v280);
    v137 = v281;
    v60 = *((_QWORD *)v11 + 116) != 0;
    goto LABEL_238;
  }
LABEL_241:
  v60 = 1;
LABEL_242:
  *((_BYTE *)v11 + 35) &= ~1u;
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_79826);
  if (_nw_signposts_enabled && kdebug_is_enabled())
    kdebug_trace();
LABEL_247:

LABEL_313:
  return v60;
}

void sub_183AC0D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__79983(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__79984(uint64_t a1)
{

}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_219(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  char *identifier;
  uint64_t registered_endpoint;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  const char *v28;
  NSObject *v29;
  const char *id_string;
  nw_endpoint_t v31;
  const char *v32;
  const char *v33;
  id v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  const char *v43;
  os_log_type_t v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  void *v52;
  os_log_type_t v53;
  void *v54;
  os_log_type_t v55;
  char *backtrace_string;
  os_log_type_t v57;
  _BOOL4 v58;
  void *v59;
  os_log_type_t v60;
  void *v61;
  os_log_type_t v62;
  os_log_type_t v63;
  _BOOL4 v64;
  os_log_type_t v65;
  _BOOL4 v66;
  os_log_type_t v67;
  _BOOL4 v68;
  os_log_type_t v69;
  os_log_type_t v70;
  os_log_type_t v71;
  os_log_type_t v72;
  NSObject *v73;
  nw_endpoint_t v74;
  const char *v75;
  id v76;
  void *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  const char *logging_description;
  const char *v83;
  const char *v84;
  const char *v85;
  void *v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  char v91;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v94;
  void *v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  void *v99;
  __int16 v100;
  const char *v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  id v105;
  __int16 v106;
  void *v107;
  __int16 v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  identifier = nw_protocol_definition_get_identifier(v7);
  registered_endpoint = *(_QWORD *)(a1 + 96);
  if (registered_endpoint)
    goto LABEL_74;
  v88 = v8;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  v12 = *(void **)(a1 + 40);
  v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v14 = *(void **)(a1 + 48);
  v15 = *(id *)(a1 + 32);
  v89 = v12;
  v16 = v13;
  v90 = v14;
  v86 = v15;
  v87 = v16;
  if (!v15)
  {
    __nwlog_obj();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v35, &type, &v91))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v53 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v53, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_161;
    }
    if (!v91)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v69 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v69, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_161;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v36 = objc_claimAutoreleasedReturnValue();
    v57 = type;
    v58 = os_log_type_enabled(v36, type);
    if (!backtrace_string)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v57, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_161;
    }
    if (v58)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v94 = 2082;
      v95 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v36, v57, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_128;
  }
  v17 = (unsigned int *)v15;
  v18 = v17[29];

  if ((_DWORD)v18 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = (id)gLogObj;
    if (v18 > 5)
      v28 = "unknown-mode";
    else
      v28 = off_1E149FC18[v18];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v94 = 2082;
    v95 = (void *)v28;
    v96 = 2082;
    v97 = "flow";
    v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (__nwlog_fault(v35, &type, &v91))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          if (v18 > 5)
            v38 = "unknown-mode";
          else
            v38 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          v94 = 2082;
          v95 = (void *)v38;
          v96 = 2082;
          v97 = "flow";
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
        goto LABEL_161;
      }
      if (!v91)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v44 = type;
        if (os_log_type_enabled(v36, type))
        {
          if (v18 > 5)
            v45 = "unknown-mode";
          else
            v45 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          v94 = 2082;
          v95 = (void *)v45;
          v96 = 2082;
          v97 = "flow";
          _os_log_impl(&dword_182FBE000, v36, v44, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_161;
      }
      v39 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v40 = (id)gLogObj;
      v41 = type;
      v42 = os_log_type_enabled(v40, type);
      if (v39)
      {
        if (v42)
        {
          if (v18 > 5)
            v43 = "unknown-mode";
          else
            v43 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          v94 = 2082;
          v95 = (void *)v43;
          v96 = 2082;
          v97 = "flow";
          v98 = 2082;
          v99 = v39;
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v39);
        if (!v35)
          goto LABEL_72;
        goto LABEL_71;
      }
      if (v42)
      {
        if (v18 > 5)
          v46 = "unknown-mode";
        else
          v46 = off_1E149FC18[v18];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v94 = 2082;
        v95 = (void *)v46;
        v96 = 2082;
        v97 = "flow";
        _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }

    }
LABEL_70:
    if (!v35)
    {
LABEL_72:
      registered_endpoint = 0;
      goto LABEL_73;
    }
LABEL_71:
    free(v35);
    goto LABEL_72;
  }
  if (!identifier)
  {
    __nwlog_obj();
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v35, &type, &v91))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v55 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v55, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_161;
    }
    if (!v91)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v70 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v70, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_161;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v36 = objc_claimAutoreleasedReturnValue();
    v63 = type;
    v64 = os_log_type_enabled(v36, type);
    if (!backtrace_string)
    {
      if (v64)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v63, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_161;
    }
    if (v64)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v94 = 2082;
      v95 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v36, v63, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_128;
  }
  if (!v16)
  {
    __nwlog_obj();
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v35, &type, &v91))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v60 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v60, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_161;
    }
    if (!v91)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v71 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v71, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_161;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v36 = objc_claimAutoreleasedReturnValue();
    v65 = type;
    v66 = os_log_type_enabled(v36, type);
    if (!backtrace_string)
    {
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v65, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_161;
    }
    if (v66)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v94 = 2082;
      v95 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v36, v65, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_128;
  }
  if (!v90)
  {
    __nwlog_obj();
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v35, &type, &v91))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v62 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v62, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_161:

      goto LABEL_70;
    }
    if (!v91)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v72 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v72, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_161;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v36 = objc_claimAutoreleasedReturnValue();
    v67 = type;
    v68 = os_log_type_enabled(v36, type);
    if (!backtrace_string)
    {
      if (v68)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v36, v67, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_161;
    }
    if (v68)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v94 = 2082;
      v95 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v36, v67, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_128:

    free(backtrace_string);
    if (!v35)
      goto LABEL_72;
    goto LABEL_71;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v19 = &g_registration_list;
  do
  {
    v19 = (uint64_t *)*v19;
    if (!v19)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_31;
    }
  }
  while (*(_QWORD *)identifier != v19[4]
       || *((_QWORD *)identifier + 1) != v19[5]
       || *((_QWORD *)identifier + 2) != v19[6]
       || *((_QWORD *)identifier + 3) != v19[7]
       || *((_QWORD *)identifier + 4) != v19[8]);
  v24 = v19[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v24)
  {
LABEL_31:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v17) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v29 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v17);
        v84 = nw_endpoint_handler_dry_run_string(v17);
        v31 = nw_endpoint_handler_copy_endpoint(v17);
        logging_description = nw_endpoint_get_logging_description(v31);
        v32 = nw_endpoint_handler_state_string(v17);
        v33 = nw_endpoint_handler_mode_string(v17);
        v34 = nw_endpoint_handler_copy_current_path(v17);
        *(_DWORD *)buf = 136448258;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v94 = 2082;
        v95 = (void *)id_string;
        v96 = 2082;
        v97 = v84;
        v98 = 2082;
        v99 = (void *)logging_description;
        v100 = 2082;
        v101 = v32;
        v102 = 2082;
        v103 = v33;
        v104 = 2114;
        v105 = v34;
        v106 = 2080;
        v107 = identifier;
        v108 = 2048;
        v109 = (uint64_t)identifier;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not have accept function, cannot search for protocol to join", buf, 0x5Cu);

      }
    }
    goto LABEL_72;
  }
  v25 = v16;
  v26 = v25;
  while (1)
  {
    registered_endpoint = nw_protocol_instance_registrar_search_for_instance_to_join((uint64_t)identifier, a2, v89, v26, v25, v90, v11 != 0);
    if (registered_endpoint)
      break;
    registered_endpoint = (uint64_t)nw_protocol_instance_registrar_copy_next_registered_endpoint(v26, v11 != 0);

    v26 = (void *)registered_endpoint;
    if (!registered_endpoint)
      goto LABEL_53;
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v17) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v73 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
    {
      v85 = nw_endpoint_handler_get_id_string(v17);
      v83 = nw_endpoint_handler_dry_run_string(v17);
      v74 = nw_endpoint_handler_copy_endpoint(v17);
      v81 = nw_endpoint_get_logging_description(v74);
      v80 = nw_endpoint_handler_state_string(v17);
      v75 = nw_endpoint_handler_mode_string(v17);
      v76 = nw_endpoint_handler_copy_current_path(v17);
      v77 = v76;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v78 = "invalid";
      v79 = *(const char **)(registered_endpoint + 16);
      *(_DWORD *)buf = 136448258;
      if (v79)
        v78 = v79;
      v94 = 2082;
      v95 = (void *)v85;
      v96 = 2082;
      v97 = v83;
      v98 = 2082;
      v99 = (void *)v81;
      v100 = 2082;
      v101 = v80;
      v102 = 2082;
      v103 = v75;
      v104 = 2114;
      v105 = v76;
      v106 = 2080;
      v107 = (void *)v78;
      v108 = 2048;
      v109 = registered_endpoint;
      _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)", buf, 0x5Cu);

    }
  }
LABEL_53:

LABEL_73:
  v8 = v88;
  if (registered_endpoint)
  {
LABEL_74:
    if (nw_endpoint_flow_join_protocol(*(void **)(a1 + 32), *(void **)(a1 + 48), v8, v7, identifier, a2, registered_endpoint, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24)))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 736) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)
                                                            + 32);
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 33) |= 1u;
      while (1)
      {
        registered_endpoint = *(_QWORD *)(registered_endpoint + 32);
        if (!registered_endpoint)
          break;
        if (*(_DWORD *)(*(_QWORD *)(registered_endpoint + 16) + 32) == 3)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 56) + 880));
          v47 = *(_QWORD *)(a1 + 56);
          if (!*(_QWORD *)(v47 + 720))
          {
            if (*(_UNKNOWN **)(registered_endpoint + 40) == &nw_protocol_ref_counted_handle)
            {
              v49 = *(_QWORD *)(registered_endpoint + 88);
              if (v49)
              {
                *(_QWORD *)(registered_endpoint + 88) = v49 + 1;
                v47 = *(_QWORD *)(a1 + 56);
              }
              *(_QWORD *)buf = registered_endpoint;
              v48 = buf[8] | 1;
            }
            else
            {
              *(_QWORD *)buf = registered_endpoint;
              v48 = buf[8] & 0xFE;
            }
            buf[8] = v48;
            v50 = *(_BYTE *)(v47 + 728);
            if ((v50 & 1) != 0)
            {
              nw::release_if_needed<nw_protocol *>((uint64_t *)(v47 + 720));
              v50 = *(_BYTE *)(v47 + 728);
              registered_endpoint = *(_QWORD *)buf;
              v48 = buf[8];
            }
            *(_QWORD *)(v47 + 720) = registered_endpoint;
            *(_BYTE *)(v47 + 728) = v50 & 0xFE | v48 & 1;
            v47 = *(_QWORD *)(a1 + 56);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 880));
          break;
        }
      }
    }
  }

  return 0;
}

void sub_183AC22D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_220(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  char *identifier;
  uint64_t registered_endpoint;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  const char *v26;
  NSObject *v27;
  const char *id_string;
  nw_endpoint_t v29;
  const char *v30;
  const char *v31;
  id v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  const char *v41;
  os_log_type_t v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  const char *v60;
  nw_endpoint_t v61;
  const char *v62;
  const char *v63;
  const char *v64;
  id v65;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, _QWORD);
  uint64_t v72;
  void *v73;
  char v74;
  uint64_t v75;
  char v76;
  NSObject *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  id v82;
  void *v83;
  const char *v84;
  const char *v85;
  void *v86;
  os_log_type_t v87;
  void *v88;
  os_log_type_t v89;
  char *backtrace_string;
  os_log_type_t v91;
  _BOOL4 v92;
  void *v93;
  os_log_type_t v94;
  void *v95;
  os_log_type_t v96;
  os_log_type_t v97;
  _BOOL4 v98;
  os_log_type_t v99;
  _BOOL4 v100;
  os_log_type_t v101;
  _BOOL4 v102;
  os_log_type_t v103;
  os_log_type_t v104;
  os_log_type_t v105;
  os_log_type_t v106;
  NSObject *v107;
  nw_endpoint_t v108;
  const char *v109;
  id v110;
  void *v111;
  const char *v112;
  const char *v113;
  const char *v114;
  const char *v115;
  const char *logging_description;
  const char *v117;
  const char *v118;
  const char *v119;
  void *v120;
  const char *v121;
  id v122;
  const char *v123;
  id v124;
  const char *v125;
  id v126;
  nw_endpoint_t v127;
  id v128;
  char v129;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v132;
  void *v133;
  __int16 v134;
  const char *v135;
  __int16 v136;
  void *v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  const char *v141;
  __int16 v142;
  id v143;
  __int16 v144;
  void *v145;
  __int16 v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v128 = a4;
  identifier = nw_protocol_definition_get_identifier(v7);
  registered_endpoint = *(_QWORD *)(a1 + 96);
  if (registered_endpoint)
    goto LABEL_74;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  v11 = *(void **)(a1 + 40);
  v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v13 = *(void **)(a1 + 48);
  v14 = *(id *)(a1 + 32);
  v122 = v11;
  v124 = v12;
  v126 = v13;
  v120 = v14;
  if (!v14)
  {
    __nwlog_obj();
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v129 = 0;
    if (!__nwlog_fault(v33, &type, &v129))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v87 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v87, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_205;
    }
    if (!v129)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v103 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v103, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_205;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    v91 = type;
    v92 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v91, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_205;
    }
    if (v92)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v132 = 2082;
      v133 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v34, v91, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_172;
  }
  v15 = (unsigned int *)v14;
  v16 = v15[29];

  if ((_DWORD)v16 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    if (v16 > 5)
      v26 = "unknown-mode";
    else
      v26 = off_1E149FC18[v16];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v132 = 2082;
    v133 = (void *)v26;
    v134 = 2082;
    v135 = "flow";
    v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v129 = 0;
    if (__nwlog_fault(v33, &type, &v129))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = (id)gLogObj;
        v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          if (v16 > 5)
            v36 = "unknown-mode";
          else
            v36 = off_1E149FC18[v16];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          v132 = 2082;
          v133 = (void *)v36;
          v134 = 2082;
          v135 = "flow";
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
        goto LABEL_205;
      }
      if (!v129)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = (id)gLogObj;
        v42 = type;
        if (os_log_type_enabled(v34, type))
        {
          if (v16 > 5)
            v43 = "unknown-mode";
          else
            v43 = off_1E149FC18[v16];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          v132 = 2082;
          v133 = (void *)v43;
          v134 = 2082;
          v135 = "flow";
          _os_log_impl(&dword_182FBE000, v34, v42, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_205;
      }
      v37 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      v39 = type;
      v40 = os_log_type_enabled(v38, type);
      if (v37)
      {
        if (v40)
        {
          if (v16 > 5)
            v41 = "unknown-mode";
          else
            v41 = off_1E149FC18[v16];
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          v132 = 2082;
          v133 = (void *)v41;
          v134 = 2082;
          v135 = "flow";
          v136 = 2082;
          v137 = v37;
          _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v37);
        if (!v33)
          goto LABEL_72;
        goto LABEL_71;
      }
      if (v40)
      {
        if (v16 > 5)
          v44 = "unknown-mode";
        else
          v44 = off_1E149FC18[v16];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v132 = 2082;
        v133 = (void *)v44;
        v134 = 2082;
        v135 = "flow";
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }

    }
LABEL_70:
    if (!v33)
    {
LABEL_72:
      registered_endpoint = 0;
      goto LABEL_73;
    }
LABEL_71:
    free(v33);
    goto LABEL_72;
  }
  if (!identifier)
  {
    __nwlog_obj();
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v129 = 0;
    if (!__nwlog_fault(v33, &type, &v129))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v89 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v89, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_205;
    }
    if (!v129)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v104 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v104, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_205;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    v97 = type;
    v98 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v98)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v97, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_205;
    }
    if (v98)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v132 = 2082;
      v133 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v34, v97, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_172;
  }
  if (!v124)
  {
    __nwlog_obj();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v129 = 0;
    if (!__nwlog_fault(v33, &type, &v129))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v94 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v94, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_205;
    }
    if (!v129)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v105 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v105, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_205;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    v99 = type;
    v100 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v100)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v99, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_205;
    }
    if (v100)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v132 = 2082;
      v133 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v34, v99, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_172;
  }
  if (!v126)
  {
    __nwlog_obj();
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v129 = 0;
    if (!__nwlog_fault(v33, &type, &v129))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v96 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v96, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_205:

      goto LABEL_70;
    }
    if (!v129)
    {
      __nwlog_obj();
      v34 = objc_claimAutoreleasedReturnValue();
      v106 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v106, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_205;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    v101 = type;
    v102 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v102)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v34, v101, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_205;
    }
    if (v102)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v132 = 2082;
      v133 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v34, v101, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_172:

    free(backtrace_string);
    if (!v33)
      goto LABEL_72;
    goto LABEL_71;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v17 = &g_registration_list;
  do
  {
    v17 = (uint64_t *)*v17;
    if (!v17)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_31;
    }
  }
  while (*(_QWORD *)identifier != v17[4]
       || *((_QWORD *)identifier + 1) != v17[5]
       || *((_QWORD *)identifier + 2) != v17[6]
       || *((_QWORD *)identifier + 3) != v17[7]
       || *((_QWORD *)identifier + 4) != v17[8]);
  v22 = v17[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v22)
  {
LABEL_31:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v15) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v27 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v15);
        v118 = nw_endpoint_handler_dry_run_string(v15);
        v29 = nw_endpoint_handler_copy_endpoint(v15);
        logging_description = nw_endpoint_get_logging_description(v29);
        v30 = nw_endpoint_handler_state_string(v15);
        v31 = nw_endpoint_handler_mode_string(v15);
        v32 = nw_endpoint_handler_copy_current_path(v15);
        *(_DWORD *)buf = 136448258;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v132 = 2082;
        v133 = (void *)id_string;
        v134 = 2082;
        v135 = v118;
        v136 = 2082;
        v137 = (void *)logging_description;
        v138 = 2082;
        v139 = v30;
        v140 = 2082;
        v141 = v31;
        v142 = 2114;
        v143 = v32;
        v144 = 2080;
        v145 = identifier;
        v146 = 2048;
        v147 = (uint64_t)identifier;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not have accept function, cannot search for protocol to join", buf, 0x5Cu);

      }
    }
    goto LABEL_72;
  }
  v23 = v124;
  v24 = v23;
  while (1)
  {
    registered_endpoint = nw_protocol_instance_registrar_search_for_instance_to_join((uint64_t)identifier, -1, v122, v24, v23, v126, v10 != 0);
    if (registered_endpoint)
      break;
    registered_endpoint = (uint64_t)nw_protocol_instance_registrar_copy_next_registered_endpoint(v24, v10 != 0);

    v24 = (void *)registered_endpoint;
    if (!registered_endpoint)
      goto LABEL_53;
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v15) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v107 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
    {
      v119 = nw_endpoint_handler_get_id_string(v15);
      v117 = nw_endpoint_handler_dry_run_string(v15);
      v108 = nw_endpoint_handler_copy_endpoint(v15);
      v115 = nw_endpoint_get_logging_description(v108);
      v114 = nw_endpoint_handler_state_string(v15);
      v109 = nw_endpoint_handler_mode_string(v15);
      v110 = nw_endpoint_handler_copy_current_path(v15);
      v111 = v110;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v112 = "invalid";
      v113 = *(const char **)(registered_endpoint + 16);
      *(_DWORD *)buf = 136448258;
      if (v113)
        v112 = v113;
      v132 = 2082;
      v133 = (void *)v119;
      v134 = 2082;
      v135 = v117;
      v136 = 2082;
      v137 = (void *)v115;
      v138 = 2082;
      v139 = v114;
      v140 = 2082;
      v141 = v109;
      v142 = 2114;
      v143 = v110;
      v144 = 2080;
      v145 = (void *)v112;
      v146 = 2048;
      v147 = registered_endpoint;
      _os_log_impl(&dword_182FBE000, v107, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)", buf, 0x5Cu);

    }
  }
LABEL_53:

LABEL_73:
  if (registered_endpoint)
  {
LABEL_74:
    if (nw_endpoint_flow_join_protocol(*(void **)(a1 + 32), *(void **)(a1 + 48), v128, v7, identifier, -1, registered_endpoint, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24)))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 736) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)
                                                            + 32);
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 33) |= 1u;
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 56) + 880));
      v45 = *(_QWORD *)(a1 + 56);
      if (!*(_QWORD *)(v45 + 720))
      {
        if (*(_UNKNOWN **)(registered_endpoint + 40) == &nw_protocol_ref_counted_handle)
        {
          v53 = *(_QWORD *)(registered_endpoint + 88);
          if (v53)
          {
            *(_QWORD *)(registered_endpoint + 88) = v53 + 1;
            v45 = *(_QWORD *)(a1 + 56);
          }
          *(_QWORD *)buf = registered_endpoint;
          v46 = buf[8] | 1;
        }
        else
        {
          *(_QWORD *)buf = registered_endpoint;
          v46 = buf[8] & 0xFE;
        }
        buf[8] = v46;
        v54 = *(_BYTE *)(v45 + 728);
        if ((v54 & 1) != 0)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)(v45 + 720));
          v54 = *(_BYTE *)(v45 + 728);
          registered_endpoint = *(_QWORD *)buf;
          v46 = buf[8];
        }
        *(_QWORD *)(v45 + 720) = registered_endpoint;
        *(_BYTE *)(v45 + 728) = v54 & 0xFE | v46 & 1;
        v45 = *(_QWORD *)(a1 + 56);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 880));
      v51 = 0;
      goto LABEL_107;
    }
  }
  v47 = nw_endpoint_flow_add_one_protocol(*(void **)(a1 + 32), (__int128 *)identifier, v128, v7, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), *(void **)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));
  if (v47)
  {
    if (nw_protocol_definition_get_message_is_stream(v7))
    {
      v48 = *(_QWORD *)(a1 + 56);
      if (!*(_QWORD *)(v48 + 768))
      {
        objc_storeStrong((id *)(v48 + 768), a3);
        if (*(_UNKNOWN **)(v47 + 40) == &nw_protocol_ref_counted_handle)
        {
          v67 = *(_QWORD *)(v47 + 88);
          if (v67)
            *(_QWORD *)(v47 + 88) = v67 + 1;
          *(_QWORD *)buf = v47;
          buf[8] |= 1u;
          v52 = 1;
        }
        else
        {
          v52 = 0;
          *(_QWORD *)buf = v47;
          buf[8] &= ~1u;
        }
        v68 = *(_QWORD *)(a1 + 56);
        v69 = *(_BYTE *)(v68 + 784);
        if ((v69 & 1) != 0)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)(v68 + 776));
          v69 = *(_BYTE *)(v68 + 784);
        }
        *(_QWORD *)(v68 + 776) = v47;
        *(_BYTE *)(v68 + 784) = v52 | v69 & 0xFE;
        v70 = *(_QWORD *)(v47 + 24);
        if (v70)
        {
          v71 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v70 + 232);
          if (v71)
          {
            v72 = *(_QWORD *)(a1 + 56) + 440;
            v73 = *(void **)(v47 + 40);
            if (v73 == &nw_protocol_ref_counted_handle)
            {
              v75 = *(_QWORD *)(v47 + 88);
              if (v75)
                *(_QWORD *)(v47 + 88) = v75 + 1;
              *(_QWORD *)buf = v47;
              v74 = buf[8] | 1;
            }
            else
            {
              *(_QWORD *)buf = v47;
              v74 = buf[8] & 0xFE;
            }
            buf[8] = v74;
            v76 = v71(v47, v72, 0);
            if (v73 == &nw_protocol_ref_counted_handle)
              nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
            if ((v76 & 1) == 0 && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v77 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
              {
                v78 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                v79 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                v127 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                v123 = nw_endpoint_get_logging_description(v127);
                v125 = v79;
                v80 = v78;
                v121 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                v81 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                v82 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                v83 = v82;
                v84 = "invalid";
                v85 = *(const char **)(*(_QWORD *)(a1 + 56) + 392);
                if (!v85)
                  v85 = "invalid";
                if (*(_QWORD *)(v47 + 16))
                  v84 = *(const char **)(v47 + 16);
                *(_DWORD *)buf = 136448258;
                *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                v132 = 2082;
                v133 = (void *)v80;
                v134 = 2082;
                v135 = v125;
                v136 = 2082;
                v137 = (void *)v123;
                v138 = 2082;
                v139 = v121;
                v140 = 2082;
                v141 = v81;
                v142 = 2114;
                v143 = v82;
                v144 = 2082;
                v145 = (void *)v85;
                v146 = 2082;
                v147 = (uint64_t)v84;
                _os_log_impl(&dword_182FBE000, v77, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add protocol %{public}s as a listener to %{public}s", buf, 0x5Cu);

              }
            }
          }
        }
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 56) + 880));
    v49 = *(_QWORD *)(a1 + 56);
    if (!*(_QWORD *)(v49 + 720))
    {
      if (*(_UNKNOWN **)(v47 + 40) == &nw_protocol_ref_counted_handle)
      {
        v55 = *(_QWORD *)(v47 + 88);
        if (v55)
        {
          *(_QWORD *)(v47 + 88) = v55 + 1;
          v49 = *(_QWORD *)(a1 + 56);
        }
        *(_QWORD *)buf = v47;
        v50 = buf[8] | 1;
      }
      else
      {
        *(_QWORD *)buf = v47;
        v50 = buf[8] & 0xFE;
      }
      buf[8] = v50;
      v56 = *(_BYTE *)(v49 + 728);
      v57 = v47;
      if ((v56 & 1) != 0)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)(v49 + 720));
        v56 = *(_BYTE *)(v49 + 728);
        v57 = *(_QWORD *)buf;
        v50 = buf[8];
      }
      *(_QWORD *)(v49 + 720) = v57;
      *(_BYTE *)(v49 + 728) = v56 & 0xFE | v50 & 1;
      v49 = *(_QWORD *)(a1 + 56);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v49 + 880));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v47;
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v58 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        v59 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v60 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v61 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v62 = nw_endpoint_get_logging_description(v61);
        v63 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v64 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v65 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        v132 = 2082;
        v133 = (void *)v59;
        v134 = 2082;
        v135 = v60;
        v136 = 2082;
        v137 = (void *)v62;
        v138 = 2082;
        v139 = v63;
        v140 = 2082;
        v141 = v64;
        v142 = 2114;
        v143 = v65;
        v144 = 2082;
        v145 = identifier;
        _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached transport protocol: %{public}s", buf, 0x52u);

      }
    }
    v51 = 1;
  }
  else
  {
    v51 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 1;
  }
LABEL_107:

  return v51;
}

void sub_183AC3974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_221(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  int minimize_logging;
  char logging_disabled;
  NSObject *v11;
  const char *v12;
  const char *v13;
  nw_endpoint_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  id v18;
  char *identifier;
  uint64_t v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v33;
  id v34;
  void *v35;
  _BYTE *registered_endpoint;
  id v37;
  const char *v38;
  NSObject *v39;
  const char *v40;
  nw_endpoint_t v41;
  const char *v42;
  const char *v43;
  id v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  const char *v53;
  os_log_type_t v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  NSObject *v70;
  const char *v71;
  const char *v72;
  nw_endpoint_t v73;
  const char *v74;
  const char *v75;
  const char *v76;
  id v77;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, _QWORD);
  uint64_t v84;
  void *v85;
  char v86;
  uint64_t v87;
  char v88;
  NSObject *v89;
  const char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  id v94;
  void *v95;
  const char *v96;
  const char *v97;
  const char *id_string;
  const char *v99;
  nw_endpoint_t v100;
  const char *logging_description;
  const char *v102;
  const char *v103;
  id v104;
  void *v105;
  NSObject *v106;
  os_log_type_t v107;
  void *v108;
  os_log_type_t v109;
  char *backtrace_string;
  os_log_type_t v111;
  _BOOL4 v112;
  void *v113;
  os_log_type_t v114;
  void *v115;
  os_log_type_t v116;
  os_log_type_t v117;
  _BOOL4 v118;
  os_log_type_t v119;
  _BOOL4 v120;
  os_log_type_t v121;
  _BOOL4 v122;
  os_log_type_t v123;
  os_log_type_t v124;
  os_log_type_t v125;
  os_log_type_t v126;
  NSObject *v127;
  nw_endpoint_t v128;
  const char *v129;
  const char *v130;
  id v131;
  void *v132;
  const char *v133;
  const char *v134;
  const char *v135;
  const char *v136;
  const char *v137;
  const char *v138;
  const char *v139;
  void *v140;
  id v141;
  nw_endpoint_t v142;
  id v143;
  const char *v144;
  id v145;
  const char *v146;
  void *v147;
  id v148;
  void *v149;
  char v150;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v153;
  void *v154;
  __int16 v155;
  const char *v156;
  __int16 v157;
  void *v158;
  __int16 v159;
  const char *v160;
  __int16 v161;
  const char *v162;
  __int16 v163;
  id v164;
  __int16 v165;
  void *v166;
  __int16 v167;
  uint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v149 = v7;
  if (nw_protocol_options_is_custom_ip(v8))
  {
    minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    v147 = v8;
    if (minimize_logging)
    {
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          v99 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          v100 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          logging_description = nw_endpoint_get_logging_description(v100);
          v102 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          v103 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          v104 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
          v153 = 2082;
          v154 = (void *)id_string;
          v155 = 2082;
          v156 = v99;
          v157 = 2082;
          v158 = (void *)logging_description;
          v159 = 2082;
          v160 = v102;
          v161 = 2082;
          v162 = v103;
          v163 = 2114;
          v164 = v104;
          v165 = 1024;
          LODWORD(v166) = nw_custom_ip_options_get_protocol(v147);
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u, not attaching any transport", buf, 0x4Eu);

        }
        goto LABEL_8;
      }
    }
    else if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v15 = nw_endpoint_get_logging_description(v14);
        v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        v153 = 2082;
        v154 = (void *)v12;
        v155 = 2082;
        v156 = v13;
        v157 = 2082;
        v158 = (void *)v15;
        v159 = 2082;
        v160 = v16;
        v161 = 2082;
        v162 = v17;
        v163 = 2114;
        v164 = v18;
        v165 = 1024;
        LODWORD(v166) = nw_custom_ip_options_get_protocol(v147);
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u, not attaching any transport", buf, 0x4Eu);

      }
LABEL_8:

LABEL_114:
      v63 = 1;
      v8 = v147;
      goto LABEL_115;
    }
LABEL_147:
    v63 = 1;
    goto LABEL_115;
  }
  identifier = nw_protocol_definition_get_identifier(v7);
  v20 = *(_QWORD *)(a1 + 96);
  if (v20)
    goto LABEL_82;
  v21 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  v22 = *(void **)(a1 + 40);
  v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v24 = *(void **)(a1 + 48);
  v25 = *(id *)(a1 + 32);
  v141 = v22;
  v143 = v23;
  v145 = v24;
  v148 = v8;
  v140 = v25;
  if (!v25)
  {
    __nwlog_obj();
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v150 = 0;
    if (!__nwlog_fault(v45, &type, &v150))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v107 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v106, v107, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_203;
    }
    if (!v150)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v123 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v106, v123, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v111 = type;
    v112 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (v112)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v46, v111, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_220;
    }
    if (v112)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v153 = 2082;
      v154 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v46, v111, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_187;
  }
  v26 = (unsigned int *)v25;
  v27 = v26[29];

  if ((_DWORD)v27 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v37 = (id)gLogObj;
    if (v27 > 5)
      v38 = "unknown-mode";
    else
      v38 = off_1E149FC18[v27];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v153 = 2082;
    v154 = (void *)v38;
    v155 = 2082;
    v156 = "flow";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v150 = 0;
    if (__nwlog_fault(v45, &type, &v150))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v46 = (id)gLogObj;
        v47 = type;
        if (os_log_type_enabled(v46, type))
        {
          if (v27 > 5)
            v48 = "unknown-mode";
          else
            v48 = off_1E149FC18[v27];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          v153 = 2082;
          v154 = (void *)v48;
          v155 = 2082;
          v156 = "flow";
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
        goto LABEL_220;
      }
      if (!v150)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v54 = type;
        if (os_log_type_enabled(v46, type))
        {
          if (v27 > 5)
            v55 = "unknown-mode";
          else
            v55 = off_1E149FC18[v27];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          v153 = 2082;
          v154 = (void *)v55;
          v155 = 2082;
          v156 = "flow";
          _os_log_impl(&dword_182FBE000, v46, v54, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_220;
      }
      v49 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      v52 = os_log_type_enabled(v50, type);
      if (v49)
      {
        if (v52)
        {
          if (v27 > 5)
            v53 = "unknown-mode";
          else
            v53 = off_1E149FC18[v27];
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          v153 = 2082;
          v154 = (void *)v53;
          v155 = 2082;
          v156 = "flow";
          v157 = 2082;
          v158 = v49;
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v49);
        if (!v45)
          goto LABEL_80;
        goto LABEL_79;
      }
      if (v52)
      {
        if (v27 > 5)
          v56 = "unknown-mode";
        else
          v56 = off_1E149FC18[v27];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v153 = 2082;
        v154 = (void *)v56;
        v155 = 2082;
        v156 = "flow";
        _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }

    }
LABEL_78:
    if (!v45)
    {
LABEL_80:
      v20 = 0;
      goto LABEL_81;
    }
LABEL_79:
    free(v45);
    goto LABEL_80;
  }
  if (!identifier)
  {
    __nwlog_obj();
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v150 = 0;
    if (!__nwlog_fault(v45, &type, &v150))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v109 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v106, v109, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_203;
    }
    if (!v150)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v124 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v106, v124, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v117 = type;
    v118 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (v118)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v46, v117, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_220;
    }
    if (v118)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v153 = 2082;
      v154 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v46, v117, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_187:

    free(backtrace_string);
    if (!v45)
      goto LABEL_80;
    goto LABEL_79;
  }
  if (!v143)
  {
    __nwlog_obj();
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v150 = 0;
    if (!__nwlog_fault(v45, &type, &v150))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v114 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v106, v114, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_203;
    }
    if (!v150)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v125 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v106, v125, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v119 = type;
    v120 = os_log_type_enabled(v46, type);
    if (backtrace_string)
    {
      if (v120)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v153 = 2082;
        v154 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v46, v119, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_187;
    }
    if (v120)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_182FBE000, v46, v119, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
LABEL_220:

    goto LABEL_78;
  }
  if (!v145)
  {
    __nwlog_obj();
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v150 = 0;
    if (!__nwlog_fault(v45, &type, &v150))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v116 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v106, v116, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_203:

      goto LABEL_78;
    }
    if (!v150)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v126 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v106, v126, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v121 = type;
    v122 = os_log_type_enabled(v46, type);
    if (backtrace_string)
    {
      if (v122)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v153 = 2082;
        v154 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v46, v121, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_187;
    }
    if (v122)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_182FBE000, v46, v121, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
    goto LABEL_220;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v28 = &g_registration_list;
  do
  {
    v28 = (uint64_t *)*v28;
    if (!v28)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_39;
    }
  }
  while (*(_QWORD *)identifier != v28[4]
       || *((_QWORD *)identifier + 1) != v28[5]
       || *((_QWORD *)identifier + 2) != v28[6]
       || *((_QWORD *)identifier + 3) != v28[7]
       || *((_QWORD *)identifier + 4) != v28[8]);
  v33 = v28[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v33)
  {
LABEL_39:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        v40 = nw_endpoint_handler_get_id_string(v26);
        v138 = nw_endpoint_handler_dry_run_string(v26);
        v41 = nw_endpoint_handler_copy_endpoint(v26);
        v136 = nw_endpoint_get_logging_description(v41);
        v42 = nw_endpoint_handler_state_string(v26);
        v43 = nw_endpoint_handler_mode_string(v26);
        v44 = nw_endpoint_handler_copy_current_path(v26);
        *(_DWORD *)buf = 136448258;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v153 = 2082;
        v154 = (void *)v40;
        v155 = 2082;
        v156 = v138;
        v157 = 2082;
        v158 = (void *)v136;
        v159 = 2082;
        v160 = v42;
        v161 = 2082;
        v162 = v43;
        v163 = 2114;
        v164 = v44;
        v165 = 2080;
        v166 = identifier;
        v167 = 2048;
        v168 = (uint64_t)identifier;
        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not have accept function, cannot search for protocol to join", buf, 0x5Cu);

      }
    }
    goto LABEL_80;
  }
  v34 = v143;
  v35 = v34;
  while (1)
  {
    v20 = nw_protocol_instance_registrar_search_for_instance_to_join((uint64_t)identifier, -1, v141, v35, v34, v145, v21 != 0);
    if (v20)
      break;
    registered_endpoint = nw_protocol_instance_registrar_copy_next_registered_endpoint(v35, v21 != 0);

    v35 = registered_endpoint;
    if (!registered_endpoint)
    {
      v20 = 0;
      goto LABEL_61;
    }
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v127 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
    {
      v139 = nw_endpoint_handler_get_id_string(v26);
      v137 = nw_endpoint_handler_dry_run_string(v26);
      v128 = nw_endpoint_handler_copy_endpoint(v26);
      v135 = nw_endpoint_get_logging_description(v128);
      v129 = nw_endpoint_handler_state_string(v26);
      v130 = nw_endpoint_handler_mode_string(v26);
      v131 = nw_endpoint_handler_copy_current_path(v26);
      v132 = v131;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v133 = "invalid";
      v134 = *(const char **)(v20 + 16);
      *(_DWORD *)buf = 136448258;
      if (v134)
        v133 = v134;
      v153 = 2082;
      v154 = (void *)v139;
      v155 = 2082;
      v156 = v137;
      v157 = 2082;
      v158 = (void *)v135;
      v159 = 2082;
      v160 = v129;
      v161 = 2082;
      v162 = v130;
      v163 = 2114;
      v164 = v131;
      v165 = 2080;
      v166 = (void *)v133;
      v167 = 2048;
      v168 = v20;
      _os_log_impl(&dword_182FBE000, v127, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)", buf, 0x5Cu);

    }
  }
LABEL_61:

LABEL_81:
  v8 = v148;
  v7 = v149;
  if (!v20)
  {
LABEL_86:
    v59 = nw_endpoint_flow_add_one_protocol(*(void **)(a1 + 32), (__int128 *)identifier, v8, v7, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), *(void **)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));
    if (!v59)
    {
      v63 = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 1;
      goto LABEL_115;
    }
    v147 = v8;
    if (nw_protocol_definition_get_message_is_stream(v7))
    {
      v60 = *(_QWORD *)(a1 + 56);
      if (!*(_QWORD *)(v60 + 768))
      {
        objc_storeStrong((id *)(v60 + 768), a3);
        if (*(_UNKNOWN **)(v59 + 40) == &nw_protocol_ref_counted_handle)
        {
          v79 = *(_QWORD *)(v59 + 88);
          if (v79)
            *(_QWORD *)(v59 + 88) = v79 + 1;
          *(_QWORD *)buf = v59;
          buf[8] |= 1u;
          v64 = 1;
        }
        else
        {
          v64 = 0;
          *(_QWORD *)buf = v59;
          buf[8] &= ~1u;
        }
        v80 = *(_QWORD *)(a1 + 56);
        v81 = *(_BYTE *)(v80 + 784);
        if ((v81 & 1) != 0)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)(v80 + 776));
          v81 = *(_BYTE *)(v80 + 784);
        }
        *(_QWORD *)(v80 + 776) = v59;
        *(_BYTE *)(v80 + 784) = v64 | v81 & 0xFE;
        v82 = *(_QWORD *)(v59 + 24);
        if (v82)
        {
          v83 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v82 + 232);
          if (v83)
          {
            v84 = *(_QWORD *)(a1 + 56) + 440;
            v85 = *(void **)(v59 + 40);
            if (v85 == &nw_protocol_ref_counted_handle)
            {
              v87 = *(_QWORD *)(v59 + 88);
              if (v87)
                *(_QWORD *)(v59 + 88) = v87 + 1;
              *(_QWORD *)buf = v59;
              v86 = buf[8] | 1;
            }
            else
            {
              *(_QWORD *)buf = v59;
              v86 = buf[8] & 0xFE;
            }
            buf[8] = v86;
            v88 = v83(v59, v84, 0);
            if (v85 == &nw_protocol_ref_counted_handle)
              nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
            if ((v88 & 1) == 0 && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v89 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
              {
                v90 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                v144 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                v146 = v90;
                v142 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                v91 = nw_endpoint_get_logging_description(v142);
                v92 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                v93 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                v94 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                v95 = v94;
                v96 = "invalid";
                v97 = *(const char **)(*(_QWORD *)(a1 + 56) + 392);
                if (!v97)
                  v97 = "invalid";
                if (*(_QWORD *)(v59 + 16))
                  v96 = *(const char **)(v59 + 16);
                *(_DWORD *)buf = 136448258;
                *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                v153 = 2082;
                v154 = (void *)v146;
                v155 = 2082;
                v156 = v144;
                v157 = 2082;
                v158 = (void *)v91;
                v159 = 2082;
                v160 = v92;
                v161 = 2082;
                v162 = v93;
                v163 = 2114;
                v164 = v94;
                v165 = 2082;
                v166 = (void *)v97;
                v167 = 2082;
                v168 = (uint64_t)v96;
                _os_log_impl(&dword_182FBE000, v89, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add protocol %{public}s as a listener to %{public}s", buf, 0x5Cu);

              }
              v8 = v147;
            }
          }
        }
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 56) + 880));
    v61 = *(_QWORD *)(a1 + 56);
    if (!*(_QWORD *)(v61 + 720))
    {
      if (*(_UNKNOWN **)(v59 + 40) == &nw_protocol_ref_counted_handle)
      {
        v67 = *(_QWORD *)(v59 + 88);
        if (v67)
        {
          *(_QWORD *)(v59 + 88) = v67 + 1;
          v61 = *(_QWORD *)(a1 + 56);
        }
        *(_QWORD *)buf = v59;
        v62 = buf[8] | 1;
      }
      else
      {
        *(_QWORD *)buf = v59;
        v62 = buf[8] & 0xFE;
      }
      buf[8] = v62;
      v68 = *(_BYTE *)(v61 + 728);
      v69 = v59;
      if ((v68 & 1) != 0)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)(v61 + 720));
        v68 = *(_BYTE *)(v61 + 728);
        v69 = *(_QWORD *)buf;
        v62 = buf[8];
      }
      *(_QWORD *)(v61 + 720) = v69;
      *(_BYTE *)(v61 + 728) = v68 & 0xFE | v62 & 1;
      v61 = *(_QWORD *)(a1 + 56);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v61 + 880));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v59;
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v70 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
      {
        v71 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v72 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v73 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v74 = nw_endpoint_get_logging_description(v73);
        v75 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v76 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v77 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        v153 = 2082;
        v154 = (void *)v71;
        v155 = 2082;
        v156 = v72;
        v157 = 2082;
        v158 = (void *)v74;
        v159 = 2082;
        v160 = v75;
        v161 = 2082;
        v162 = v76;
        v163 = 2114;
        v164 = v77;
        v165 = 2082;
        v166 = identifier;
        _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached transport protocol: %{public}s", buf, 0x52u);

      }
      goto LABEL_114;
    }
    goto LABEL_147;
  }
LABEL_82:
  if (!nw_endpoint_flow_join_protocol(*(void **)(a1 + 32), *(void **)(a1 + 48), v8, v7, identifier, -1, v20, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24)))goto LABEL_86;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 736) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)
                                                        + 32);
  *(_BYTE *)(*(_QWORD *)(a1 + 56) + 33) |= 1u;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 56) + 880));
  v57 = *(_QWORD *)(a1 + 56);
  if (!*(_QWORD *)(v57 + 720))
  {
    if (*(_UNKNOWN **)(v20 + 40) == &nw_protocol_ref_counted_handle)
    {
      v65 = *(_QWORD *)(v20 + 88);
      if (v65)
      {
        *(_QWORD *)(v20 + 88) = v65 + 1;
        v57 = *(_QWORD *)(a1 + 56);
      }
      *(_QWORD *)buf = v20;
      v58 = buf[8] | 1;
    }
    else
    {
      *(_QWORD *)buf = v20;
      v58 = buf[8] & 0xFE;
    }
    buf[8] = v58;
    v66 = *(_BYTE *)(v57 + 728);
    if ((v66 & 1) != 0)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)(v57 + 720));
      v66 = *(_BYTE *)(v57 + 728);
      v20 = *(_QWORD *)buf;
      v58 = buf[8];
    }
    *(_QWORD *)(v57 + 720) = v20;
    *(_BYTE *)(v57 + 728) = v66 & 0xFE | v58 & 1;
    v57 = *(_QWORD *)(a1 + 56);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v57 + 880));
  v63 = 0;
LABEL_115:

  return v63;
}

void sub_183AC52C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_222(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  char *identifier;
  uint64_t registered_endpoint;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  const char *v28;
  NSObject *v29;
  const char *id_string;
  nw_endpoint_t v31;
  const char *v32;
  const char *v33;
  id v34;
  const char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  const char *v42;
  os_log_type_t v43;
  const char *v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  const char *v51;
  nw_endpoint_t v52;
  const char *v53;
  const char *v54;
  const char *v55;
  id v56;
  void *v58;
  const char *v59;
  NSObject *v60;
  os_log_type_t v61;
  void *v62;
  os_log_type_t v63;
  char *backtrace_string;
  os_log_type_t v65;
  _BOOL4 v66;
  void *v67;
  os_log_type_t v68;
  void *v69;
  os_log_type_t v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  os_log_type_t v74;
  _BOOL4 v75;
  os_log_type_t v76;
  _BOOL4 v77;
  os_log_type_t v78;
  os_log_type_t v79;
  os_log_type_t v80;
  os_log_type_t v81;
  NSObject *v82;
  nw_endpoint_t v83;
  const char *v84;
  id v85;
  void *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *logging_description;
  const char *v92;
  const char *v93;
  const char *v94;
  void *v95;
  void *v96;
  id v97;
  id v98;
  id v99;
  char v100;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v103;
  __int16 v104;
  void *v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  void *v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  id v115;
  __int16 v116;
  void *v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  identifier = nw_protocol_definition_get_identifier(v6);
  registered_endpoint = *(_QWORD *)(a1 + 96);
  if (registered_endpoint)
    goto LABEL_75;
  v98 = v7;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  v11 = *(void **)(a1 + 40);
  v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v13 = *(void **)(a1 + 48);
  v14 = *(id *)(a1 + 32);
  v97 = v11;
  v15 = v12;
  v16 = v13;
  v95 = v14;
  v96 = v15;
  if (!v14)
  {
    __nwlog_obj();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v59 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (!__nwlog_fault(v59, &type, &v100))
      goto LABEL_160;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v61 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v100)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v65 = type;
      v66 = os_log_type_enabled(v60, type);
      if (backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          v103 = "nw_endpoint_flow_find_protocol_to_join";
          v104 = 2082;
          v105 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v60, v65, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_160:
        if (!v59)
          goto LABEL_73;
        goto LABEL_161;
      }
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v65, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v78 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v78, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_159:

    goto LABEL_160;
  }
  v17 = (unsigned int *)v14;
  v18 = v17[29];

  if ((_DWORD)v18 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = (id)gLogObj;
    if (v18 > 5)
      v28 = "unknown-mode";
    else
      v28 = off_1E149FC18[v18];
    *(_DWORD *)buf = 136446722;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v104 = 2082;
    v105 = (void *)v28;
    v106 = 2082;
    v107 = "flow";
    v35 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (__nwlog_fault(v35, &type, &v100))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          if (v18 > 5)
            v38 = "unknown-mode";
          else
            v38 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          v103 = "nw_endpoint_flow_find_protocol_to_join";
          v104 = 2082;
          v105 = (void *)v38;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v100)
      {
        v39 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v40 = type;
        v41 = os_log_type_enabled(v36, type);
        if (v39)
        {
          if (v41)
          {
            if (v18 > 5)
              v42 = "unknown-mode";
            else
              v42 = off_1E149FC18[v18];
            *(_DWORD *)buf = 136446978;
            v103 = "nw_endpoint_flow_find_protocol_to_join";
            v104 = 2082;
            v105 = (void *)v42;
            v106 = 2082;
            v107 = "flow";
            v108 = 2082;
            v109 = v39;
            _os_log_impl(&dword_182FBE000, v36, v40, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v39);
          if (!v35)
            goto LABEL_73;
LABEL_71:
          v46 = (char *)v35;
LABEL_72:
          free(v46);
          goto LABEL_73;
        }
        if (v41)
        {
          if (v18 > 5)
            v45 = "unknown-mode";
          else
            v45 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          v103 = "nw_endpoint_flow_find_protocol_to_join";
          v104 = 2082;
          v105 = (void *)v45;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl(&dword_182FBE000, v36, v40, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v43 = type;
        if (os_log_type_enabled(v36, type))
        {
          if (v18 > 5)
            v44 = "unknown-mode";
          else
            v44 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          v103 = "nw_endpoint_flow_find_protocol_to_join";
          v104 = 2082;
          v105 = (void *)v44;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl(&dword_182FBE000, v36, v43, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v35)
    {
LABEL_73:
      registered_endpoint = 0;
      goto LABEL_74;
    }
    goto LABEL_71;
  }
  if (!identifier)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v59 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (!__nwlog_fault(v59, &type, &v100))
      goto LABEL_160;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v63 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v63, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (!v100)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v79 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v79, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_159;
    }
    v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v60 = objc_claimAutoreleasedReturnValue();
    v72 = type;
    v73 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v72, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (v73)
    {
      *(_DWORD *)buf = 136446466;
      v103 = "nw_endpoint_flow_find_protocol_to_join";
      v104 = 2082;
      v105 = v71;
      _os_log_impl(&dword_182FBE000, v60, v72, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_126;
  }
  if (!v15)
  {
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v59 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (!__nwlog_fault(v59, &type, &v100))
      goto LABEL_160;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v68 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v68, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (!v100)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v80 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v80, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_159;
    }
    v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v60 = objc_claimAutoreleasedReturnValue();
    v74 = type;
    v75 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v75)
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v74, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (v75)
    {
      *(_DWORD *)buf = 136446466;
      v103 = "nw_endpoint_flow_find_protocol_to_join";
      v104 = 2082;
      v105 = v71;
      _os_log_impl(&dword_182FBE000, v60, v74, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_126;
  }
  if (!v16)
  {
    __nwlog_obj();
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v59 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (!__nwlog_fault(v59, &type, &v100))
      goto LABEL_160;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v70 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v70, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (!v100)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v81 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v81, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_159;
    }
    v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v60 = objc_claimAutoreleasedReturnValue();
    v76 = type;
    v77 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v77)
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v76, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (v77)
    {
      *(_DWORD *)buf = 136446466;
      v103 = "nw_endpoint_flow_find_protocol_to_join";
      v104 = 2082;
      v105 = v71;
      _os_log_impl(&dword_182FBE000, v60, v76, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_126:

    free(v71);
    if (!v59)
      goto LABEL_73;
LABEL_161:
    v46 = (char *)v59;
    goto LABEL_72;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v19 = &g_registration_list;
  do
  {
    v19 = (uint64_t *)*v19;
    if (!v19)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_31;
    }
  }
  while (*(_QWORD *)identifier != v19[4]
       || *((_QWORD *)identifier + 1) != v19[5]
       || *((_QWORD *)identifier + 2) != v19[6]
       || *((_QWORD *)identifier + 3) != v19[7]
       || *((_QWORD *)identifier + 4) != v19[8]);
  v24 = v19[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v24)
  {
LABEL_31:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v17) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v29 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v17);
        v93 = nw_endpoint_handler_dry_run_string(v17);
        v31 = nw_endpoint_handler_copy_endpoint(v17);
        logging_description = nw_endpoint_get_logging_description(v31);
        v32 = nw_endpoint_handler_state_string(v17);
        v33 = nw_endpoint_handler_mode_string(v17);
        v34 = nw_endpoint_handler_copy_current_path(v17);
        *(_DWORD *)buf = 136448258;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        v104 = 2082;
        v105 = (void *)id_string;
        v106 = 2082;
        v107 = v93;
        v108 = 2082;
        v109 = (void *)logging_description;
        v110 = 2082;
        v111 = v32;
        v112 = 2082;
        v113 = v33;
        v114 = 2114;
        v115 = v34;
        v116 = 2080;
        v117 = identifier;
        v118 = 2048;
        v119 = (uint64_t)identifier;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not have accept function, cannot search for protocol to join", buf, 0x5Cu);

      }
    }
    goto LABEL_73;
  }
  v25 = v15;
  v26 = v25;
  while (1)
  {
    registered_endpoint = nw_protocol_instance_registrar_search_for_instance_to_join((uint64_t)identifier, -1, v97, v26, v25, v16, v10 != 0);
    if (registered_endpoint)
      break;
    registered_endpoint = (uint64_t)nw_protocol_instance_registrar_copy_next_registered_endpoint(v26, v10 != 0);

    v26 = (void *)registered_endpoint;
    if (!registered_endpoint)
      goto LABEL_53;
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v17) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v82 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      v94 = nw_endpoint_handler_get_id_string(v17);
      v92 = nw_endpoint_handler_dry_run_string(v17);
      v83 = nw_endpoint_handler_copy_endpoint(v17);
      v90 = nw_endpoint_get_logging_description(v83);
      v89 = nw_endpoint_handler_state_string(v17);
      v84 = nw_endpoint_handler_mode_string(v17);
      v85 = nw_endpoint_handler_copy_current_path(v17);
      v86 = v85;
      v103 = "nw_endpoint_flow_find_protocol_to_join";
      v87 = "invalid";
      v88 = *(const char **)(registered_endpoint + 16);
      *(_DWORD *)buf = 136448258;
      if (v88)
        v87 = v88;
      v104 = 2082;
      v105 = (void *)v94;
      v106 = 2082;
      v107 = v92;
      v108 = 2082;
      v109 = (void *)v90;
      v110 = 2082;
      v111 = v89;
      v112 = 2082;
      v113 = v84;
      v114 = 2114;
      v115 = v85;
      v116 = 2080;
      v117 = (void *)v87;
      v118 = 2048;
      v119 = registered_endpoint;
      _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)", buf, 0x5Cu);

    }
  }
LABEL_53:

LABEL_74:
  v7 = v98;
  if (registered_endpoint)
  {
LABEL_75:
    if (nw_endpoint_flow_join_protocol(*(void **)(a1 + 32), *(void **)(a1 + 48), v7, v6, identifier, -1, registered_endpoint, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24)))
    {
      v47 = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 33) |= 1u;
      goto LABEL_85;
    }
  }
  v48 = nw_endpoint_flow_add_one_protocol(*(void **)(a1 + 32), (__int128 *)identifier, v7, v6, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), *(void **)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));
  if (v48)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v48;
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) != 0)
    {
      v47 = 1;
    }
    else
    {
      v99 = v7;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v49 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        v50 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v51 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v52 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v53 = nw_endpoint_get_logging_description(v52);
        v54 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v55 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v56 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        v103 = "nw_endpoint_flow_attach_protocols_block_invoke";
        v104 = 2082;
        v105 = (void *)v50;
        v106 = 2082;
        v107 = v51;
        v108 = 2082;
        v109 = (void *)v53;
        v110 = 2082;
        v111 = v54;
        v112 = 2082;
        v113 = v55;
        v114 = 2114;
        v115 = v56;
        v116 = 2082;
        v117 = identifier;
        _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached internet protocol: %{public}s", buf, 0x52u);

      }
      v47 = 1;
      v7 = v99;
    }
  }
  else
  {
    v47 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 1;
  }
LABEL_85:

  return v47;
}

void sub_183AC6634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_223(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  char *identifier;
  uint64_t registered_endpoint;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  const char *v28;
  NSObject *v29;
  const char *id_string;
  nw_endpoint_t v31;
  const char *v32;
  const char *v33;
  id v34;
  const char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  const char *v42;
  os_log_type_t v43;
  const char *v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  const char *v51;
  nw_endpoint_t v52;
  const char *v53;
  const char *v54;
  const char *v55;
  id v56;
  void *v58;
  const char *v59;
  NSObject *v60;
  os_log_type_t v61;
  void *v62;
  os_log_type_t v63;
  char *backtrace_string;
  os_log_type_t v65;
  _BOOL4 v66;
  void *v67;
  os_log_type_t v68;
  void *v69;
  os_log_type_t v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  os_log_type_t v74;
  _BOOL4 v75;
  os_log_type_t v76;
  _BOOL4 v77;
  os_log_type_t v78;
  os_log_type_t v79;
  os_log_type_t v80;
  os_log_type_t v81;
  NSObject *v82;
  nw_endpoint_t v83;
  const char *v84;
  id v85;
  void *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *logging_description;
  const char *v92;
  const char *v93;
  const char *v94;
  void *v95;
  void *v96;
  id v97;
  id v98;
  id v99;
  char v100;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v103;
  __int16 v104;
  void *v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  void *v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  id v115;
  __int16 v116;
  void *v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  identifier = nw_protocol_definition_get_identifier(v6);
  registered_endpoint = *(_QWORD *)(a1 + 96);
  if (registered_endpoint)
    goto LABEL_75;
  v98 = v7;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  v11 = *(void **)(a1 + 40);
  v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v13 = *(void **)(a1 + 48);
  v14 = *(id *)(a1 + 32);
  v97 = v11;
  v15 = v12;
  v16 = v13;
  v95 = v14;
  v96 = v15;
  if (!v14)
  {
    __nwlog_obj();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v59 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (!__nwlog_fault(v59, &type, &v100))
      goto LABEL_160;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v61 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v100)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v65 = type;
      v66 = os_log_type_enabled(v60, type);
      if (backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          v103 = "nw_endpoint_flow_find_protocol_to_join";
          v104 = 2082;
          v105 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v60, v65, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_160:
        if (!v59)
          goto LABEL_73;
        goto LABEL_161;
      }
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v65, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v78 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v78, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_159:

    goto LABEL_160;
  }
  v17 = (unsigned int *)v14;
  v18 = v17[29];

  if ((_DWORD)v18 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = (id)gLogObj;
    if (v18 > 5)
      v28 = "unknown-mode";
    else
      v28 = off_1E149FC18[v18];
    *(_DWORD *)buf = 136446722;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v104 = 2082;
    v105 = (void *)v28;
    v106 = 2082;
    v107 = "flow";
    v35 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (__nwlog_fault(v35, &type, &v100))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          if (v18 > 5)
            v38 = "unknown-mode";
          else
            v38 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          v103 = "nw_endpoint_flow_find_protocol_to_join";
          v104 = 2082;
          v105 = (void *)v38;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v100)
      {
        v39 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v40 = type;
        v41 = os_log_type_enabled(v36, type);
        if (v39)
        {
          if (v41)
          {
            if (v18 > 5)
              v42 = "unknown-mode";
            else
              v42 = off_1E149FC18[v18];
            *(_DWORD *)buf = 136446978;
            v103 = "nw_endpoint_flow_find_protocol_to_join";
            v104 = 2082;
            v105 = (void *)v42;
            v106 = 2082;
            v107 = "flow";
            v108 = 2082;
            v109 = v39;
            _os_log_impl(&dword_182FBE000, v36, v40, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v39);
          if (!v35)
            goto LABEL_73;
LABEL_71:
          v46 = (char *)v35;
LABEL_72:
          free(v46);
          goto LABEL_73;
        }
        if (v41)
        {
          if (v18 > 5)
            v45 = "unknown-mode";
          else
            v45 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          v103 = "nw_endpoint_flow_find_protocol_to_join";
          v104 = 2082;
          v105 = (void *)v45;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl(&dword_182FBE000, v36, v40, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v43 = type;
        if (os_log_type_enabled(v36, type))
        {
          if (v18 > 5)
            v44 = "unknown-mode";
          else
            v44 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          v103 = "nw_endpoint_flow_find_protocol_to_join";
          v104 = 2082;
          v105 = (void *)v44;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl(&dword_182FBE000, v36, v43, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v35)
    {
LABEL_73:
      registered_endpoint = 0;
      goto LABEL_74;
    }
    goto LABEL_71;
  }
  if (!identifier)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v59 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (!__nwlog_fault(v59, &type, &v100))
      goto LABEL_160;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v63 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v63, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (!v100)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v79 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v79, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_159;
    }
    v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v60 = objc_claimAutoreleasedReturnValue();
    v72 = type;
    v73 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v72, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (v73)
    {
      *(_DWORD *)buf = 136446466;
      v103 = "nw_endpoint_flow_find_protocol_to_join";
      v104 = 2082;
      v105 = v71;
      _os_log_impl(&dword_182FBE000, v60, v72, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_126;
  }
  if (!v15)
  {
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v59 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (!__nwlog_fault(v59, &type, &v100))
      goto LABEL_160;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v68 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v68, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (!v100)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v80 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v80, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_159;
    }
    v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v60 = objc_claimAutoreleasedReturnValue();
    v74 = type;
    v75 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v75)
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v74, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (v75)
    {
      *(_DWORD *)buf = 136446466;
      v103 = "nw_endpoint_flow_find_protocol_to_join";
      v104 = 2082;
      v105 = v71;
      _os_log_impl(&dword_182FBE000, v60, v74, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_126;
  }
  if (!v16)
  {
    __nwlog_obj();
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v103 = "nw_endpoint_flow_find_protocol_to_join";
    v59 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v100 = 0;
    if (!__nwlog_fault(v59, &type, &v100))
      goto LABEL_160;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v70 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v70, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (!v100)
    {
      __nwlog_obj();
      v60 = objc_claimAutoreleasedReturnValue();
      v81 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v81, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_159;
    }
    v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v60 = objc_claimAutoreleasedReturnValue();
    v76 = type;
    v77 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v77)
      {
        *(_DWORD *)buf = 136446210;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v60, v76, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_159;
    }
    if (v77)
    {
      *(_DWORD *)buf = 136446466;
      v103 = "nw_endpoint_flow_find_protocol_to_join";
      v104 = 2082;
      v105 = v71;
      _os_log_impl(&dword_182FBE000, v60, v76, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_126:

    free(v71);
    if (!v59)
      goto LABEL_73;
LABEL_161:
    v46 = (char *)v59;
    goto LABEL_72;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v19 = &g_registration_list;
  do
  {
    v19 = (uint64_t *)*v19;
    if (!v19)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_31;
    }
  }
  while (*(_QWORD *)identifier != v19[4]
       || *((_QWORD *)identifier + 1) != v19[5]
       || *((_QWORD *)identifier + 2) != v19[6]
       || *((_QWORD *)identifier + 3) != v19[7]
       || *((_QWORD *)identifier + 4) != v19[8]);
  v24 = v19[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v24)
  {
LABEL_31:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v17) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v29 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v17);
        v93 = nw_endpoint_handler_dry_run_string(v17);
        v31 = nw_endpoint_handler_copy_endpoint(v17);
        logging_description = nw_endpoint_get_logging_description(v31);
        v32 = nw_endpoint_handler_state_string(v17);
        v33 = nw_endpoint_handler_mode_string(v17);
        v34 = nw_endpoint_handler_copy_current_path(v17);
        *(_DWORD *)buf = 136448258;
        v103 = "nw_endpoint_flow_find_protocol_to_join";
        v104 = 2082;
        v105 = (void *)id_string;
        v106 = 2082;
        v107 = v93;
        v108 = 2082;
        v109 = (void *)logging_description;
        v110 = 2082;
        v111 = v32;
        v112 = 2082;
        v113 = v33;
        v114 = 2114;
        v115 = v34;
        v116 = 2080;
        v117 = identifier;
        v118 = 2048;
        v119 = (uint64_t)identifier;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not have accept function, cannot search for protocol to join", buf, 0x5Cu);

      }
    }
    goto LABEL_73;
  }
  v25 = v15;
  v26 = v25;
  while (1)
  {
    registered_endpoint = nw_protocol_instance_registrar_search_for_instance_to_join((uint64_t)identifier, -1, v97, v26, v25, v16, v10 != 0);
    if (registered_endpoint)
      break;
    registered_endpoint = (uint64_t)nw_protocol_instance_registrar_copy_next_registered_endpoint(v26, v10 != 0);

    v26 = (void *)registered_endpoint;
    if (!registered_endpoint)
      goto LABEL_53;
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v17) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v82 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      v94 = nw_endpoint_handler_get_id_string(v17);
      v92 = nw_endpoint_handler_dry_run_string(v17);
      v83 = nw_endpoint_handler_copy_endpoint(v17);
      v90 = nw_endpoint_get_logging_description(v83);
      v89 = nw_endpoint_handler_state_string(v17);
      v84 = nw_endpoint_handler_mode_string(v17);
      v85 = nw_endpoint_handler_copy_current_path(v17);
      v86 = v85;
      v103 = "nw_endpoint_flow_find_protocol_to_join";
      v87 = "invalid";
      v88 = *(const char **)(registered_endpoint + 16);
      *(_DWORD *)buf = 136448258;
      if (v88)
        v87 = v88;
      v104 = 2082;
      v105 = (void *)v94;
      v106 = 2082;
      v107 = v92;
      v108 = 2082;
      v109 = (void *)v90;
      v110 = 2082;
      v111 = v89;
      v112 = 2082;
      v113 = v84;
      v114 = 2114;
      v115 = v85;
      v116 = 2080;
      v117 = (void *)v87;
      v118 = 2048;
      v119 = registered_endpoint;
      _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)", buf, 0x5Cu);

    }
  }
LABEL_53:

LABEL_74:
  v7 = v98;
  if (registered_endpoint)
  {
LABEL_75:
    if (nw_endpoint_flow_join_protocol(*(void **)(a1 + 32), *(void **)(a1 + 48), v7, v6, identifier, -1, registered_endpoint, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24)))
    {
      v47 = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 33) |= 1u;
      goto LABEL_85;
    }
  }
  v48 = nw_endpoint_flow_add_one_protocol(*(void **)(a1 + 32), (__int128 *)identifier, v7, v6, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), *(void **)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));
  if (v48)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v48;
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) != 0)
    {
      v47 = 1;
    }
    else
    {
      v99 = v7;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v49 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        v50 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v51 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v52 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v53 = nw_endpoint_get_logging_description(v52);
        v54 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v55 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v56 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        v103 = "nw_endpoint_flow_attach_protocols_block_invoke";
        v104 = 2082;
        v105 = (void *)v50;
        v106 = 2082;
        v107 = v51;
        v108 = 2082;
        v109 = (void *)v53;
        v110 = 2082;
        v111 = v54;
        v112 = 2082;
        v113 = v55;
        v114 = 2114;
        v115 = v56;
        v116 = 2082;
        v117 = identifier;
        _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached link-layer protocol: %{public}s", buf, 0x52u);

      }
      v47 = 1;
      v7 = v99;
    }
  }
  else
  {
    v47 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 1;
  }
LABEL_85:

  return v47;
}

void sub_183AC7904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t nw::retained_ptr<nw_protocol *>::operator=(uint64_t a1, uint64_t a2)
{
  char v4;

  if (a1 != a2)
  {
    v4 = *(_BYTE *)(a1 + 8);
    if ((v4 & 1) != 0)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)a1);
      v4 = *(_BYTE *)(a1 + 8);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = v4 & 0xFE | *(_BYTE *)(a2 + 8) & 1;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) &= ~1u;
  }
  return a1;
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_80105()
{
  _BOOL8 result;

  result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

void nw_endpoint_handler_register_adaptive_read_handler(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v4;
  NWConcrete_nw_endpoint_mode_handler *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  void *v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v15;
  char v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  char v21;
  NWConcrete_nw_endpoint_handler *v22;
  _BOOL4 v23;
  NSObject *v24;
  NWConcrete_nw_endpoint_handler *v25;
  NWConcrete_nw_endpoint_handler *v26;
  _BOOL4 v27;
  const char *v28;
  nw_endpoint_t v29;
  const char *logging_description;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  const char *v34;
  void **v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  char v41;
  NWConcrete_nw_endpoint_handler *v42;
  _BOOL4 v43;
  NWConcrete_nw_endpoint_handler *v44;
  NWConcrete_nw_endpoint_handler *v45;
  _BOOL4 v46;
  const char *v47;
  nw_endpoint_t v48;
  const char *v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  const char *v53;
  void **v54;
  void **v55;
  const char *v56;
  void **v57;
  NWConcrete_nw_endpoint_handler *v58;
  id v59;
  id v60;
  void **v61;
  id v62;
  char *v63;
  id v64;
  void *v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  char *backtrace_string;
  os_log_type_t v70;
  _BOOL4 v71;
  os_log_type_t v72;
  id v73;
  const char *v74;
  void *v75;
  NSObject *v76;
  os_log_type_t v77;
  const char *v78;
  char *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  const char *v82;
  os_log_type_t v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  int v89;
  os_log_type_t type[8];
  char v91;
  _BYTE buf[12];
  __int16 v93;
  void *id_str;
  __int16 v95;
  const char *v96;
  __int16 v97;
  void *v98;
  __int16 v99;
  const char *v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  id v104;
  __int16 v105;
  const char *v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
    v66 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v89) = 0;
    if (__nwlog_fault(v66, type, &v89))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v67 = objc_claimAutoreleasedReturnValue();
        v68 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if ((_BYTE)v89)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v67 = objc_claimAutoreleasedReturnValue();
        v70 = type[0];
        v71 = os_log_type_enabled(v67, type[0]);
        if (backtrace_string)
        {
          if (v71)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
            v93 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_182FBE000, v67, v70, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_98;
        }
        if (v71)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v67, v70, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v67 = objc_claimAutoreleasedReturnValue();
        v72 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v67, v72, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_98:
    if (v66)
      free(v66);
    mode = 0;
    goto LABEL_101;
  }
  mode = v1->mode;

  if (mode == 2)
  {
    v4 = nw_endpoint_handler_copy_flow(v2);
    v5 = v4;
    if (*((_QWORD *)v4 + 127))
    {
      v6 = *((_DWORD *)v4 + 252);
      if (!v6)
        v6 = 5;
      v89 = v6;
      v7 = (_QWORD *)*((_QWORD *)v4 + 51);
      if (!v7)
        goto LABEL_30;
      v8 = v7[3];
      if (!v8)
        goto LABEL_30;
      v9 = *(uint64_t (**)(void))(v8 + 144);
      if (!v9)
        goto LABEL_30;
      v10 = (void *)v7[5];
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v17 = v7[11];
        if (v17)
          v7[11] = v17 + 1;
        v11 = -1;
      }
      else
      {
        v11 = 0;
      }
      *(_QWORD *)buf = v7;
      buf[8] = v11;
      v18 = (void *)*((_QWORD *)v5 + 52);
      if (v18 == &nw_protocol_ref_counted_handle)
      {
        v20 = *((_QWORD *)v5 + 58);
        if (v20)
          *((_QWORD *)v5 + 58) = v20 + 1;
        v19 = -1;
      }
      else
      {
        v19 = 0;
      }
      *(_QWORD *)type = (char *)v5 + 376;
      v91 = v19;
      v21 = v9();
      if (v18 == &nw_protocol_ref_counted_handle)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        if (v10 != &nw_protocol_ref_counted_handle)
        {
LABEL_26:
          if ((v21 & 1) != 0)
            goto LABEL_81;
LABEL_30:
          v22 = v2;
          v23 = (*((_BYTE *)v22 + 268) & 0x20) == 0;

          if (v23)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v24 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              v25 = v22;

              v26 = v25;
              v27 = (*((_BYTE *)v22 + 268) & 1) == 0;

              if (v27)
                v28 = "";
              else
                v28 = "dry-run ";
              v29 = nw_endpoint_handler_copy_endpoint(v26);
              logging_description = nw_endpoint_get_logging_description(v29);
              v31 = v26;
              v32 = v31;
              v33 = v31[30];
              if (v33 > 5)
                v34 = "unknown-state";
              else
                v34 = off_1E149FC48[v33];
              v87 = v34;

              v35 = v32;
              v36 = "path";
              switch(v2->mode)
              {
                case 0:
                  break;
                case 1:
                  v36 = "resolver";
                  break;
                case 2:
                  v36 = nw_endpoint_flow_mode_string(v35[31]);
                  break;
                case 3:
                  v36 = "proxy";
                  break;
                case 4:
                  v36 = "fallback";
                  break;
                case 5:
                  v36 = "transform";
                  break;
                default:
                  v36 = "unknown-mode";
                  break;
              }
              v86 = v36;

              v57 = v35;
              v58 = v25;
              os_unfair_lock_lock((os_unfair_lock_t)v57 + 28);
              v59 = v57[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v57 + 28);

              v60 = v59;
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
              v93 = 2082;
              id_str = v58->id_str;
              v95 = 2082;
              v96 = v28;
              v97 = 2082;
              v98 = (void *)logging_description;
              v99 = 2082;
              v100 = v87;
              v101 = 2082;
              v102 = v86;
              v103 = 2114;
              v104 = v60;
              v105 = 2082;
              v106 = "read_timeout";
              _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] register notification for %{public}s failed", buf, 0x52u);

            }
LABEL_80:

            goto LABEL_81;
          }
          goto LABEL_81;
        }
      }
      else if (v10 != &nw_protocol_ref_counted_handle)
      {
        goto LABEL_26;
      }
      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
      if ((v21 & 1) != 0)
        goto LABEL_81;
      goto LABEL_30;
    }
    v12 = (_QWORD *)*((_QWORD *)v4 + 51);
    if (!v12 || (v13 = v12[3]) == 0 || (v14 = *(uint64_t (**)(void))(v13 + 152)) == 0)
    {
LABEL_56:
      v42 = v2;
      v43 = (*((_BYTE *)v42 + 268) & 0x20) == 0;

      if (v43)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v24 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v44 = v42;

          v45 = v44;
          v46 = (*((_BYTE *)v42 + 268) & 1) == 0;

          if (v46)
            v47 = "";
          else
            v47 = "dry-run ";
          v48 = nw_endpoint_handler_copy_endpoint(v45);
          v49 = nw_endpoint_get_logging_description(v48);
          v50 = v45;
          v51 = v50;
          v52 = v50[30];
          if (v52 > 5)
            v53 = "unknown-state";
          else
            v53 = off_1E149FC48[v52];
          v88 = v53;

          v54 = v51;
          v55 = v54;
          v56 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              v56 = "resolver";
              break;
            case 2:
              v56 = nw_endpoint_flow_mode_string(v54[31]);
              break;
            case 3:
              v56 = "proxy";
              break;
            case 4:
              v56 = "fallback";
              break;
            case 5:
              v56 = "transform";
              break;
            default:
              v56 = "unknown-mode";
              break;
          }

          v61 = v55;
          os_unfair_lock_lock((os_unfair_lock_t)v61 + 28);
          v62 = v61[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v61 + 28);

          v63 = v44->id_str;
          v64 = v62;
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
          v93 = 2082;
          id_str = v63;
          v95 = 2082;
          v96 = v47;
          v97 = 2082;
          v98 = (void *)v49;
          v99 = 2082;
          v100 = v88;
          v101 = 2082;
          v102 = v56;
          v103 = 2114;
          v104 = v64;
          v105 = 2082;
          v106 = "read_timeout";
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unregister notification for %{public}s failed", buf, 0x52u);

        }
        goto LABEL_80;
      }
LABEL_81:

      goto LABEL_122;
    }
    v15 = (void *)v12[5];
    if (v15 == &nw_protocol_ref_counted_handle)
    {
      v37 = v12[11];
      if (v37)
        v12[11] = v37 + 1;
      v16 = -1;
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)buf = v12;
    buf[8] = v16;
    v38 = (void *)*((_QWORD *)v5 + 52);
    if (v38 == &nw_protocol_ref_counted_handle)
    {
      v40 = *((_QWORD *)v5 + 58);
      if (v40)
        *((_QWORD *)v5 + 58) = v40 + 1;
      v39 = -1;
    }
    else
    {
      v39 = 0;
    }
    *(_QWORD *)type = (char *)v5 + 376;
    v91 = v39;
    v41 = v14();
    if (v38 == &nw_protocol_ref_counted_handle)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      if (v15 != &nw_protocol_ref_counted_handle)
      {
LABEL_52:
        if ((v41 & 1) != 0)
          goto LABEL_81;
        goto LABEL_56;
      }
    }
    else if (v15 != &nw_protocol_ref_counted_handle)
    {
      goto LABEL_52;
    }
    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
    if ((v41 & 1) != 0)
      goto LABEL_81;
    goto LABEL_56;
  }
LABEL_101:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v73 = (id)gLogObj;
  if (mode > 5)
    v74 = "unknown-mode";
  else
    v74 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
  v93 = 2082;
  id_str = (void *)v74;
  v95 = 2082;
  v96 = "flow";
  v75 = (void *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v89) = 0;
  if (!__nwlog_fault((const char *)v75, type, &v89))
  {
LABEL_120:
    if (!v75)
      goto LABEL_122;
LABEL_121:
    free(v75);
    goto LABEL_122;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v76 = (id)gLogObj;
    v77 = type[0];
    if (os_log_type_enabled(v76, type[0]))
    {
      if (mode > 5)
        v78 = "unknown-mode";
      else
        v78 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
      v93 = 2082;
      id_str = (void *)v78;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_119:

    goto LABEL_120;
  }
  if (!(_BYTE)v89)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v76 = (id)gLogObj;
    v83 = type[0];
    if (os_log_type_enabled(v76, type[0]))
    {
      if (mode > 5)
        v84 = "unknown-mode";
      else
        v84 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
      v93 = 2082;
      id_str = (void *)v84;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl(&dword_182FBE000, v76, v83, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_119;
  }
  v79 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v76 = (id)gLogObj;
  v80 = type[0];
  v81 = os_log_type_enabled(v76, type[0]);
  if (!v79)
  {
    if (v81)
    {
      if (mode > 5)
        v85 = "unknown-mode";
      else
        v85 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
      v93 = 2082;
      id_str = (void *)v85;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl(&dword_182FBE000, v76, v80, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_119;
  }
  if (v81)
  {
    if (mode > 5)
      v82 = "unknown-mode";
    else
      v82 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
    v93 = 2082;
    id_str = (void *)v82;
    v95 = 2082;
    v96 = "flow";
    v97 = 2082;
    v98 = v79;
    _os_log_impl(&dword_182FBE000, v76, v80, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v79);
  if (v75)
    goto LABEL_121;
LABEL_122:

}

void sub_183AC8684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_register_adaptive_write_handler(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v4;
  NWConcrete_nw_endpoint_mode_handler *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  void *v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v15;
  char v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  char v21;
  NWConcrete_nw_endpoint_handler *v22;
  _BOOL4 v23;
  NSObject *v24;
  NWConcrete_nw_endpoint_handler *v25;
  NWConcrete_nw_endpoint_handler *v26;
  _BOOL4 v27;
  const char *v28;
  nw_endpoint_t v29;
  const char *logging_description;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  const char *v34;
  void **v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  char v41;
  NWConcrete_nw_endpoint_handler *v42;
  _BOOL4 v43;
  NWConcrete_nw_endpoint_handler *v44;
  NWConcrete_nw_endpoint_handler *v45;
  _BOOL4 v46;
  const char *v47;
  nw_endpoint_t v48;
  const char *v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  const char *v53;
  void **v54;
  void **v55;
  const char *v56;
  void **v57;
  NWConcrete_nw_endpoint_handler *v58;
  id v59;
  id v60;
  void **v61;
  id v62;
  char *v63;
  id v64;
  void *v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  char *backtrace_string;
  os_log_type_t v70;
  _BOOL4 v71;
  os_log_type_t v72;
  id v73;
  const char *v74;
  void *v75;
  NSObject *v76;
  os_log_type_t v77;
  const char *v78;
  char *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  const char *v82;
  os_log_type_t v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  int v89;
  os_log_type_t type[8];
  char v91;
  _BYTE buf[12];
  __int16 v93;
  void *id_str;
  __int16 v95;
  const char *v96;
  __int16 v97;
  void *v98;
  __int16 v99;
  const char *v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  id v104;
  __int16 v105;
  const char *v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
    v66 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v89) = 0;
    if (__nwlog_fault(v66, type, &v89))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v67 = objc_claimAutoreleasedReturnValue();
        v68 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if ((_BYTE)v89)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v67 = objc_claimAutoreleasedReturnValue();
        v70 = type[0];
        v71 = os_log_type_enabled(v67, type[0]);
        if (backtrace_string)
        {
          if (v71)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
            v93 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_182FBE000, v67, v70, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_98;
        }
        if (v71)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v67, v70, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v67 = objc_claimAutoreleasedReturnValue();
        v72 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v67, v72, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_98:
    if (v66)
      free(v66);
    mode = 0;
    goto LABEL_101;
  }
  mode = v1->mode;

  if (mode == 2)
  {
    v4 = nw_endpoint_handler_copy_flow(v2);
    v5 = v4;
    if (*((_QWORD *)v4 + 128))
    {
      v6 = *((_DWORD *)v4 + 253);
      if (!v6)
        v6 = 5;
      v89 = v6;
      v7 = (_QWORD *)*((_QWORD *)v4 + 51);
      if (!v7)
        goto LABEL_30;
      v8 = v7[3];
      if (!v8)
        goto LABEL_30;
      v9 = *(uint64_t (**)(void))(v8 + 144);
      if (!v9)
        goto LABEL_30;
      v10 = (void *)v7[5];
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        v17 = v7[11];
        if (v17)
          v7[11] = v17 + 1;
        v11 = -1;
      }
      else
      {
        v11 = 0;
      }
      *(_QWORD *)buf = v7;
      buf[8] = v11;
      v18 = (void *)*((_QWORD *)v5 + 52);
      if (v18 == &nw_protocol_ref_counted_handle)
      {
        v20 = *((_QWORD *)v5 + 58);
        if (v20)
          *((_QWORD *)v5 + 58) = v20 + 1;
        v19 = -1;
      }
      else
      {
        v19 = 0;
      }
      *(_QWORD *)type = (char *)v5 + 376;
      v91 = v19;
      v21 = v9();
      if (v18 == &nw_protocol_ref_counted_handle)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        if (v10 != &nw_protocol_ref_counted_handle)
        {
LABEL_26:
          if ((v21 & 1) != 0)
            goto LABEL_81;
LABEL_30:
          v22 = v2;
          v23 = (*((_BYTE *)v22 + 268) & 0x20) == 0;

          if (v23)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v24 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              v25 = v22;

              v26 = v25;
              v27 = (*((_BYTE *)v22 + 268) & 1) == 0;

              if (v27)
                v28 = "";
              else
                v28 = "dry-run ";
              v29 = nw_endpoint_handler_copy_endpoint(v26);
              logging_description = nw_endpoint_get_logging_description(v29);
              v31 = v26;
              v32 = v31;
              v33 = v31[30];
              if (v33 > 5)
                v34 = "unknown-state";
              else
                v34 = off_1E149FC48[v33];
              v87 = v34;

              v35 = v32;
              v36 = "path";
              switch(v2->mode)
              {
                case 0:
                  break;
                case 1:
                  v36 = "resolver";
                  break;
                case 2:
                  v36 = nw_endpoint_flow_mode_string(v35[31]);
                  break;
                case 3:
                  v36 = "proxy";
                  break;
                case 4:
                  v36 = "fallback";
                  break;
                case 5:
                  v36 = "transform";
                  break;
                default:
                  v36 = "unknown-mode";
                  break;
              }
              v86 = v36;

              v57 = v35;
              v58 = v25;
              os_unfair_lock_lock((os_unfair_lock_t)v57 + 28);
              v59 = v57[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v57 + 28);

              v60 = v59;
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
              v93 = 2082;
              id_str = v58->id_str;
              v95 = 2082;
              v96 = v28;
              v97 = 2082;
              v98 = (void *)logging_description;
              v99 = 2082;
              v100 = v87;
              v101 = 2082;
              v102 = v86;
              v103 = 2114;
              v104 = v60;
              v105 = 2082;
              v106 = "write_timeout";
              _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] register notification for %{public}s failed", buf, 0x52u);

            }
LABEL_80:

            goto LABEL_81;
          }
          goto LABEL_81;
        }
      }
      else if (v10 != &nw_protocol_ref_counted_handle)
      {
        goto LABEL_26;
      }
      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
      if ((v21 & 1) != 0)
        goto LABEL_81;
      goto LABEL_30;
    }
    v12 = (_QWORD *)*((_QWORD *)v4 + 51);
    if (!v12 || (v13 = v12[3]) == 0 || (v14 = *(uint64_t (**)(void))(v13 + 152)) == 0)
    {
LABEL_56:
      v42 = v2;
      v43 = (*((_BYTE *)v42 + 268) & 0x20) == 0;

      if (v43)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v24 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v44 = v42;

          v45 = v44;
          v46 = (*((_BYTE *)v42 + 268) & 1) == 0;

          if (v46)
            v47 = "";
          else
            v47 = "dry-run ";
          v48 = nw_endpoint_handler_copy_endpoint(v45);
          v49 = nw_endpoint_get_logging_description(v48);
          v50 = v45;
          v51 = v50;
          v52 = v50[30];
          if (v52 > 5)
            v53 = "unknown-state";
          else
            v53 = off_1E149FC48[v52];
          v88 = v53;

          v54 = v51;
          v55 = v54;
          v56 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              v56 = "resolver";
              break;
            case 2:
              v56 = nw_endpoint_flow_mode_string(v54[31]);
              break;
            case 3:
              v56 = "proxy";
              break;
            case 4:
              v56 = "fallback";
              break;
            case 5:
              v56 = "transform";
              break;
            default:
              v56 = "unknown-mode";
              break;
          }

          v61 = v55;
          os_unfair_lock_lock((os_unfair_lock_t)v61 + 28);
          v62 = v61[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v61 + 28);

          v63 = v44->id_str;
          v64 = v62;
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
          v93 = 2082;
          id_str = v63;
          v95 = 2082;
          v96 = v47;
          v97 = 2082;
          v98 = (void *)v49;
          v99 = 2082;
          v100 = v88;
          v101 = 2082;
          v102 = v56;
          v103 = 2114;
          v104 = v64;
          v105 = 2082;
          v106 = "write_timeout";
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unregister notification for %{public}s failed", buf, 0x52u);

        }
        goto LABEL_80;
      }
LABEL_81:

      goto LABEL_122;
    }
    v15 = (void *)v12[5];
    if (v15 == &nw_protocol_ref_counted_handle)
    {
      v37 = v12[11];
      if (v37)
        v12[11] = v37 + 1;
      v16 = -1;
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)buf = v12;
    buf[8] = v16;
    v38 = (void *)*((_QWORD *)v5 + 52);
    if (v38 == &nw_protocol_ref_counted_handle)
    {
      v40 = *((_QWORD *)v5 + 58);
      if (v40)
        *((_QWORD *)v5 + 58) = v40 + 1;
      v39 = -1;
    }
    else
    {
      v39 = 0;
    }
    *(_QWORD *)type = (char *)v5 + 376;
    v91 = v39;
    v41 = v14();
    if (v38 == &nw_protocol_ref_counted_handle)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      if (v15 != &nw_protocol_ref_counted_handle)
      {
LABEL_52:
        if ((v41 & 1) != 0)
          goto LABEL_81;
        goto LABEL_56;
      }
    }
    else if (v15 != &nw_protocol_ref_counted_handle)
    {
      goto LABEL_52;
    }
    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
    if ((v41 & 1) != 0)
      goto LABEL_81;
    goto LABEL_56;
  }
LABEL_101:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v73 = (id)gLogObj;
  if (mode > 5)
    v74 = "unknown-mode";
  else
    v74 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
  v93 = 2082;
  id_str = (void *)v74;
  v95 = 2082;
  v96 = "flow";
  v75 = (void *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v89) = 0;
  if (!__nwlog_fault((const char *)v75, type, &v89))
  {
LABEL_120:
    if (!v75)
      goto LABEL_122;
LABEL_121:
    free(v75);
    goto LABEL_122;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v76 = (id)gLogObj;
    v77 = type[0];
    if (os_log_type_enabled(v76, type[0]))
    {
      if (mode > 5)
        v78 = "unknown-mode";
      else
        v78 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
      v93 = 2082;
      id_str = (void *)v78;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_119:

    goto LABEL_120;
  }
  if (!(_BYTE)v89)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v76 = (id)gLogObj;
    v83 = type[0];
    if (os_log_type_enabled(v76, type[0]))
    {
      if (mode > 5)
        v84 = "unknown-mode";
      else
        v84 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
      v93 = 2082;
      id_str = (void *)v84;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl(&dword_182FBE000, v76, v83, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_119;
  }
  v79 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v76 = (id)gLogObj;
  v80 = type[0];
  v81 = os_log_type_enabled(v76, type[0]);
  if (!v79)
  {
    if (v81)
    {
      if (mode > 5)
        v85 = "unknown-mode";
      else
        v85 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
      v93 = 2082;
      id_str = (void *)v85;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl(&dword_182FBE000, v76, v80, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_119;
  }
  if (v81)
  {
    if (mode > 5)
      v82 = "unknown-mode";
    else
      v82 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
    v93 = 2082;
    id_str = (void *)v82;
    v95 = 2082;
    v96 = "flow";
    v97 = 2082;
    v98 = v79;
    _os_log_impl(&dword_182FBE000, v76, v80, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v79);
  if (v75)
    goto LABEL_121;
LABEL_122:

}

void sub_183AC9398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_register_keepalive_handler(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  char v18;
  NWConcrete_nw_endpoint_handler *v19;
  _BOOL4 v20;
  NSObject *v21;
  NWConcrete_nw_endpoint_handler *v22;
  NWConcrete_nw_endpoint_handler *v23;
  _BOOL4 v24;
  const char *v25;
  nw_endpoint_t v26;
  const char *logging_description;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  const char *v31;
  void **v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  char v38;
  NWConcrete_nw_endpoint_handler *v39;
  _BOOL4 v40;
  NWConcrete_nw_endpoint_handler *v41;
  NWConcrete_nw_endpoint_handler *v42;
  _BOOL4 v43;
  const char *v44;
  nw_endpoint_t v45;
  const char *v46;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t v49;
  const char *v50;
  void **v51;
  void **v52;
  const char *v53;
  void **v54;
  NWConcrete_nw_endpoint_handler *v55;
  id v56;
  id v57;
  void **v58;
  id v59;
  char *v60;
  id v61;
  void *v62;
  char *v63;
  NSObject *v64;
  os_log_type_t v65;
  char *backtrace_string;
  os_log_type_t v67;
  _BOOL4 v68;
  os_log_type_t v69;
  id v70;
  const char *v71;
  void *v72;
  NSObject *v73;
  os_log_type_t v74;
  const char *v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  const char *v79;
  os_log_type_t v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  os_log_type_t type[8];
  char v87;
  char v88;
  _BYTE buf[12];
  __int16 v90;
  void *id_str;
  __int16 v92;
  const char *v93;
  __int16 v94;
  void *v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  id v101;
  __int16 v102;
  const char *v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
    v63 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v88 = 0;
    if (__nwlog_fault(v63, type, &v88))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v64 = objc_claimAutoreleasedReturnValue();
        v65 = type[0];
        if (os_log_type_enabled(v64, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v64, v65, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v88)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v64 = objc_claimAutoreleasedReturnValue();
        v67 = type[0];
        v68 = os_log_type_enabled(v64, type[0]);
        if (backtrace_string)
        {
          if (v68)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
            v90 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_182FBE000, v64, v67, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_96;
        }
        if (v68)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v64, v67, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v64 = objc_claimAutoreleasedReturnValue();
        v69 = type[0];
        if (os_log_type_enabled(v64, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v64, v69, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_96:
    if (v63)
      free(v63);
    mode = 0;
    goto LABEL_99;
  }
  mode = v1->mode;

  if (mode == 2)
  {
    v4 = nw_endpoint_handler_copy_flow(v2);
    v5 = (_QWORD *)*((_QWORD *)v4 + 51);
    if (*((_QWORD *)v4 + 129))
    {
      if (!v5)
        goto LABEL_28;
      v6 = v5[3];
      if (!v6)
        goto LABEL_28;
      v7 = *(uint64_t (**)(void))(v6 + 144);
      if (!v7)
        goto LABEL_28;
      v8 = (void *)v5[5];
      if (v8 == &nw_protocol_ref_counted_handle)
      {
        v14 = v5[11];
        if (v14)
          v5[11] = v14 + 1;
        v9 = -1;
      }
      else
      {
        v9 = 0;
      }
      *(_QWORD *)buf = v5;
      buf[8] = v9;
      v15 = (void *)*((_QWORD *)v4 + 52);
      if (v15 == &nw_protocol_ref_counted_handle)
      {
        v17 = *((_QWORD *)v4 + 58);
        if (v17)
          *((_QWORD *)v4 + 58) = v17 + 1;
        v16 = -1;
      }
      else
      {
        v16 = 0;
      }
      *(_QWORD *)type = (char *)v4 + 376;
      v87 = v16;
      v18 = v7();
      if (v15 == &nw_protocol_ref_counted_handle)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        if (v8 != &nw_protocol_ref_counted_handle)
        {
LABEL_24:
          if ((v18 & 1) != 0)
            goto LABEL_79;
LABEL_28:
          v19 = v2;
          v20 = (*((_BYTE *)v19 + 268) & 0x20) == 0;

          if (v20)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v21 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              v22 = v19;

              v23 = v22;
              v24 = (*((_BYTE *)v19 + 268) & 1) == 0;

              if (v24)
                v25 = "";
              else
                v25 = "dry-run ";
              v26 = nw_endpoint_handler_copy_endpoint(v23);
              logging_description = nw_endpoint_get_logging_description(v26);
              v28 = v23;
              v29 = v28;
              v30 = v28[30];
              if (v30 > 5)
                v31 = "unknown-state";
              else
                v31 = off_1E149FC48[v30];
              v84 = v31;

              v32 = v29;
              v33 = "path";
              switch(v2->mode)
              {
                case 0:
                  break;
                case 1:
                  v33 = "resolver";
                  break;
                case 2:
                  v33 = nw_endpoint_flow_mode_string(v32[31]);
                  break;
                case 3:
                  v33 = "proxy";
                  break;
                case 4:
                  v33 = "fallback";
                  break;
                case 5:
                  v33 = "transform";
                  break;
                default:
                  v33 = "unknown-mode";
                  break;
              }
              v83 = v33;

              v54 = v32;
              v55 = v22;
              os_unfair_lock_lock((os_unfair_lock_t)v54 + 28);
              v56 = v54[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v54 + 28);

              v57 = v56;
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_keepalive_handler";
              v90 = 2082;
              id_str = v55->id_str;
              v92 = 2082;
              v93 = v25;
              v94 = 2082;
              v95 = (void *)logging_description;
              v96 = 2082;
              v97 = v84;
              v98 = 2082;
              v99 = v83;
              v100 = 2114;
              v101 = v57;
              v102 = 2082;
              v103 = "keepalive";
              _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] register notification for %{public}s failed", buf, 0x52u);

            }
LABEL_78:

            goto LABEL_79;
          }
          goto LABEL_79;
        }
      }
      else if (v8 != &nw_protocol_ref_counted_handle)
      {
        goto LABEL_24;
      }
      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
      if ((v18 & 1) != 0)
        goto LABEL_79;
      goto LABEL_28;
    }
    if (!v5 || (v10 = v5[3]) == 0 || (v11 = *(uint64_t (**)(void))(v10 + 152)) == 0)
    {
LABEL_54:
      v39 = v2;
      v40 = (*((_BYTE *)v39 + 268) & 0x20) == 0;

      if (v40)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v21 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          v41 = v39;

          v42 = v41;
          v43 = (*((_BYTE *)v39 + 268) & 1) == 0;

          if (v43)
            v44 = "";
          else
            v44 = "dry-run ";
          v45 = nw_endpoint_handler_copy_endpoint(v42);
          v46 = nw_endpoint_get_logging_description(v45);
          v47 = v42;
          v48 = v47;
          v49 = v47[30];
          if (v49 > 5)
            v50 = "unknown-state";
          else
            v50 = off_1E149FC48[v49];
          v85 = v50;

          v51 = v48;
          v52 = v51;
          v53 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              v53 = "resolver";
              break;
            case 2:
              v53 = nw_endpoint_flow_mode_string(v51[31]);
              break;
            case 3:
              v53 = "proxy";
              break;
            case 4:
              v53 = "fallback";
              break;
            case 5:
              v53 = "transform";
              break;
            default:
              v53 = "unknown-mode";
              break;
          }

          v58 = v52;
          os_unfair_lock_lock((os_unfair_lock_t)v58 + 28);
          v59 = v58[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v58 + 28);

          v60 = v41->id_str;
          v61 = v59;
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_keepalive_handler";
          v90 = 2082;
          id_str = v60;
          v92 = 2082;
          v93 = v44;
          v94 = 2082;
          v95 = (void *)v46;
          v96 = 2082;
          v97 = v85;
          v98 = 2082;
          v99 = v53;
          v100 = 2114;
          v101 = v61;
          v102 = 2082;
          v103 = "keepalive";
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unregister notification for %{public}s failed", buf, 0x52u);

        }
        goto LABEL_78;
      }
LABEL_79:

      goto LABEL_120;
    }
    v12 = (void *)v5[5];
    if (v12 == &nw_protocol_ref_counted_handle)
    {
      v34 = v5[11];
      if (v34)
        v5[11] = v34 + 1;
      v13 = -1;
    }
    else
    {
      v13 = 0;
    }
    *(_QWORD *)buf = v5;
    buf[8] = v13;
    v35 = (void *)*((_QWORD *)v4 + 52);
    if (v35 == &nw_protocol_ref_counted_handle)
    {
      v37 = *((_QWORD *)v4 + 58);
      if (v37)
        *((_QWORD *)v4 + 58) = v37 + 1;
      v36 = -1;
    }
    else
    {
      v36 = 0;
    }
    *(_QWORD *)type = (char *)v4 + 376;
    v87 = v36;
    v38 = v11();
    if (v35 == &nw_protocol_ref_counted_handle)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      if (v12 != &nw_protocol_ref_counted_handle)
      {
LABEL_50:
        if ((v38 & 1) != 0)
          goto LABEL_79;
        goto LABEL_54;
      }
    }
    else if (v12 != &nw_protocol_ref_counted_handle)
    {
      goto LABEL_50;
    }
    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
    if ((v38 & 1) != 0)
      goto LABEL_79;
    goto LABEL_54;
  }
LABEL_99:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v70 = (id)gLogObj;
  if (mode > 5)
    v71 = "unknown-mode";
  else
    v71 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_keepalive_handler";
  v90 = 2082;
  id_str = (void *)v71;
  v92 = 2082;
  v93 = "flow";
  v72 = (void *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v88 = 0;
  if (!__nwlog_fault((const char *)v72, type, &v88))
  {
LABEL_118:
    if (!v72)
      goto LABEL_120;
LABEL_119:
    free(v72);
    goto LABEL_120;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = (id)gLogObj;
    v74 = type[0];
    if (os_log_type_enabled(v73, type[0]))
    {
      if (mode > 5)
        v75 = "unknown-mode";
      else
        v75 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_keepalive_handler";
      v90 = 2082;
      id_str = (void *)v75;
      v92 = 2082;
      v93 = "flow";
      _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_117:

    goto LABEL_118;
  }
  if (!v88)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = (id)gLogObj;
    v80 = type[0];
    if (os_log_type_enabled(v73, type[0]))
    {
      if (mode > 5)
        v81 = "unknown-mode";
      else
        v81 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_keepalive_handler";
      v90 = 2082;
      id_str = (void *)v81;
      v92 = 2082;
      v93 = "flow";
      _os_log_impl(&dword_182FBE000, v73, v80, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_117;
  }
  v76 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v73 = (id)gLogObj;
  v77 = type[0];
  v78 = os_log_type_enabled(v73, type[0]);
  if (!v76)
  {
    if (v78)
    {
      if (mode > 5)
        v82 = "unknown-mode";
      else
        v82 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_keepalive_handler";
      v90 = 2082;
      id_str = (void *)v82;
      v92 = 2082;
      v93 = "flow";
      _os_log_impl(&dword_182FBE000, v73, v77, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_117;
  }
  if (v78)
  {
    if (mode > 5)
      v79 = "unknown-mode";
    else
      v79 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_keepalive_handler";
    v90 = 2082;
    id_str = (void *)v79;
    v92 = 2082;
    v93 = "flow";
    v94 = 2082;
    v95 = v76;
    _os_log_impl(&dword_182FBE000, v73, v77, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v76);
  if (v72)
    goto LABEL_119;
LABEL_120:

}

void sub_183ACA090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_register_metadata_changed_handler(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  char v18;
  NWConcrete_nw_endpoint_handler *v19;
  _BOOL4 v20;
  NSObject *v21;
  NWConcrete_nw_endpoint_handler *v22;
  NWConcrete_nw_endpoint_handler *v23;
  _BOOL4 v24;
  const char *v25;
  nw_endpoint_t v26;
  const char *logging_description;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  const char *v31;
  void **v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  char v38;
  NWConcrete_nw_endpoint_handler *v39;
  _BOOL4 v40;
  NWConcrete_nw_endpoint_handler *v41;
  NWConcrete_nw_endpoint_handler *v42;
  _BOOL4 v43;
  const char *v44;
  nw_endpoint_t v45;
  const char *v46;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t v49;
  const char *v50;
  void **v51;
  void **v52;
  const char *v53;
  void **v54;
  NWConcrete_nw_endpoint_handler *v55;
  id v56;
  id v57;
  void **v58;
  id v59;
  char *v60;
  id v61;
  void *v62;
  char *v63;
  NSObject *v64;
  os_log_type_t v65;
  char *backtrace_string;
  os_log_type_t v67;
  _BOOL4 v68;
  os_log_type_t v69;
  id v70;
  const char *v71;
  void *v72;
  NSObject *v73;
  os_log_type_t v74;
  const char *v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  const char *v79;
  os_log_type_t v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  os_log_type_t type[8];
  char v87;
  char v88;
  _BYTE buf[12];
  __int16 v90;
  void *id_str;
  __int16 v92;
  const char *v93;
  __int16 v94;
  void *v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  id v101;
  __int16 v102;
  const char *v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
    v63 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v88 = 0;
    if (__nwlog_fault(v63, type, &v88))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v64 = objc_claimAutoreleasedReturnValue();
        v65 = type[0];
        if (os_log_type_enabled(v64, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v64, v65, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v88)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v64 = objc_claimAutoreleasedReturnValue();
        v67 = type[0];
        v68 = os_log_type_enabled(v64, type[0]);
        if (backtrace_string)
        {
          if (v68)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
            v90 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_182FBE000, v64, v67, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_96;
        }
        if (v68)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v64, v67, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v64 = objc_claimAutoreleasedReturnValue();
        v69 = type[0];
        if (os_log_type_enabled(v64, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v64, v69, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_96:
    if (v63)
      free(v63);
    mode = 0;
    goto LABEL_99;
  }
  mode = v1->mode;

  if (mode == 2)
  {
    v4 = nw_endpoint_handler_copy_flow(v2);
    v5 = (_QWORD *)*((_QWORD *)v4 + 51);
    if (*((_QWORD *)v4 + 130))
    {
      if (!v5)
        goto LABEL_28;
      v6 = v5[3];
      if (!v6)
        goto LABEL_28;
      v7 = *(uint64_t (**)(void))(v6 + 144);
      if (!v7)
        goto LABEL_28;
      v8 = (void *)v5[5];
      if (v8 == &nw_protocol_ref_counted_handle)
      {
        v14 = v5[11];
        if (v14)
          v5[11] = v14 + 1;
        v9 = -1;
      }
      else
      {
        v9 = 0;
      }
      *(_QWORD *)buf = v5;
      buf[8] = v9;
      v15 = (void *)*((_QWORD *)v4 + 52);
      if (v15 == &nw_protocol_ref_counted_handle)
      {
        v17 = *((_QWORD *)v4 + 58);
        if (v17)
          *((_QWORD *)v4 + 58) = v17 + 1;
        v16 = -1;
      }
      else
      {
        v16 = 0;
      }
      *(_QWORD *)type = (char *)v4 + 376;
      v87 = v16;
      v18 = v7();
      if (v15 == &nw_protocol_ref_counted_handle)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        if (v8 != &nw_protocol_ref_counted_handle)
        {
LABEL_24:
          if ((v18 & 1) != 0)
            goto LABEL_79;
LABEL_28:
          v19 = v2;
          v20 = (*((_BYTE *)v19 + 268) & 0x20) == 0;

          if (v20)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v21 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              v22 = v19;

              v23 = v22;
              v24 = (*((_BYTE *)v19 + 268) & 1) == 0;

              if (v24)
                v25 = "";
              else
                v25 = "dry-run ";
              v26 = nw_endpoint_handler_copy_endpoint(v23);
              logging_description = nw_endpoint_get_logging_description(v26);
              v28 = v23;
              v29 = v28;
              v30 = v28[30];
              if (v30 > 5)
                v31 = "unknown-state";
              else
                v31 = off_1E149FC48[v30];
              v84 = v31;

              v32 = v29;
              v33 = "path";
              switch(v2->mode)
              {
                case 0:
                  break;
                case 1:
                  v33 = "resolver";
                  break;
                case 2:
                  v33 = nw_endpoint_flow_mode_string(v32[31]);
                  break;
                case 3:
                  v33 = "proxy";
                  break;
                case 4:
                  v33 = "fallback";
                  break;
                case 5:
                  v33 = "transform";
                  break;
                default:
                  v33 = "unknown-mode";
                  break;
              }
              v83 = v33;

              v54 = v32;
              v55 = v22;
              os_unfair_lock_lock((os_unfair_lock_t)v54 + 28);
              v56 = v54[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v54 + 28);

              v57 = v56;
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_metadata_changed_handler";
              v90 = 2082;
              id_str = v55->id_str;
              v92 = 2082;
              v93 = v25;
              v94 = 2082;
              v95 = (void *)logging_description;
              v96 = 2082;
              v97 = v84;
              v98 = 2082;
              v99 = v83;
              v100 = 2114;
              v101 = v57;
              v102 = 2082;
              v103 = "metadata_changed";
              _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] register notification for %{public}s failed", buf, 0x52u);

            }
LABEL_78:

            goto LABEL_79;
          }
          goto LABEL_79;
        }
      }
      else if (v8 != &nw_protocol_ref_counted_handle)
      {
        goto LABEL_24;
      }
      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
      if ((v18 & 1) != 0)
        goto LABEL_79;
      goto LABEL_28;
    }
    if (!v5 || (v10 = v5[3]) == 0 || (v11 = *(uint64_t (**)(void))(v10 + 152)) == 0)
    {
LABEL_54:
      v39 = v2;
      v40 = (*((_BYTE *)v39 + 268) & 0x20) == 0;

      if (v40)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v21 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          v41 = v39;

          v42 = v41;
          v43 = (*((_BYTE *)v39 + 268) & 1) == 0;

          if (v43)
            v44 = "";
          else
            v44 = "dry-run ";
          v45 = nw_endpoint_handler_copy_endpoint(v42);
          v46 = nw_endpoint_get_logging_description(v45);
          v47 = v42;
          v48 = v47;
          v49 = v47[30];
          if (v49 > 5)
            v50 = "unknown-state";
          else
            v50 = off_1E149FC48[v49];
          v85 = v50;

          v51 = v48;
          v52 = v51;
          v53 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              v53 = "resolver";
              break;
            case 2:
              v53 = nw_endpoint_flow_mode_string(v51[31]);
              break;
            case 3:
              v53 = "proxy";
              break;
            case 4:
              v53 = "fallback";
              break;
            case 5:
              v53 = "transform";
              break;
            default:
              v53 = "unknown-mode";
              break;
          }

          v58 = v52;
          os_unfair_lock_lock((os_unfair_lock_t)v58 + 28);
          v59 = v58[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v58 + 28);

          v60 = v41->id_str;
          v61 = v59;
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_metadata_changed_handler";
          v90 = 2082;
          id_str = v60;
          v92 = 2082;
          v93 = v44;
          v94 = 2082;
          v95 = (void *)v46;
          v96 = 2082;
          v97 = v85;
          v98 = 2082;
          v99 = v53;
          v100 = 2114;
          v101 = v61;
          v102 = 2082;
          v103 = "metadata_changed";
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unregister notification for %{public}s failed", buf, 0x52u);

        }
        goto LABEL_78;
      }
LABEL_79:

      goto LABEL_120;
    }
    v12 = (void *)v5[5];
    if (v12 == &nw_protocol_ref_counted_handle)
    {
      v34 = v5[11];
      if (v34)
        v5[11] = v34 + 1;
      v13 = -1;
    }
    else
    {
      v13 = 0;
    }
    *(_QWORD *)buf = v5;
    buf[8] = v13;
    v35 = (void *)*((_QWORD *)v4 + 52);
    if (v35 == &nw_protocol_ref_counted_handle)
    {
      v37 = *((_QWORD *)v4 + 58);
      if (v37)
        *((_QWORD *)v4 + 58) = v37 + 1;
      v36 = -1;
    }
    else
    {
      v36 = 0;
    }
    *(_QWORD *)type = (char *)v4 + 376;
    v87 = v36;
    v38 = v11();
    if (v35 == &nw_protocol_ref_counted_handle)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      if (v12 != &nw_protocol_ref_counted_handle)
      {
LABEL_50:
        if ((v38 & 1) != 0)
          goto LABEL_79;
        goto LABEL_54;
      }
    }
    else if (v12 != &nw_protocol_ref_counted_handle)
    {
      goto LABEL_50;
    }
    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
    if ((v38 & 1) != 0)
      goto LABEL_79;
    goto LABEL_54;
  }
LABEL_99:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v70 = (id)gLogObj;
  if (mode > 5)
    v71 = "unknown-mode";
  else
    v71 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_metadata_changed_handler";
  v90 = 2082;
  id_str = (void *)v71;
  v92 = 2082;
  v93 = "flow";
  v72 = (void *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v88 = 0;
  if (!__nwlog_fault((const char *)v72, type, &v88))
  {
LABEL_118:
    if (!v72)
      goto LABEL_120;
LABEL_119:
    free(v72);
    goto LABEL_120;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = (id)gLogObj;
    v74 = type[0];
    if (os_log_type_enabled(v73, type[0]))
    {
      if (mode > 5)
        v75 = "unknown-mode";
      else
        v75 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_metadata_changed_handler";
      v90 = 2082;
      id_str = (void *)v75;
      v92 = 2082;
      v93 = "flow";
      _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_117:

    goto LABEL_118;
  }
  if (!v88)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = (id)gLogObj;
    v80 = type[0];
    if (os_log_type_enabled(v73, type[0]))
    {
      if (mode > 5)
        v81 = "unknown-mode";
      else
        v81 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_metadata_changed_handler";
      v90 = 2082;
      id_str = (void *)v81;
      v92 = 2082;
      v93 = "flow";
      _os_log_impl(&dword_182FBE000, v73, v80, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_117;
  }
  v76 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v73 = (id)gLogObj;
  v77 = type[0];
  v78 = os_log_type_enabled(v73, type[0]);
  if (!v76)
  {
    if (v78)
    {
      if (mode > 5)
        v82 = "unknown-mode";
      else
        v82 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_metadata_changed_handler";
      v90 = 2082;
      id_str = (void *)v82;
      v92 = 2082;
      v93 = "flow";
      _os_log_impl(&dword_182FBE000, v73, v77, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_117;
  }
  if (v78)
  {
    if (mode > 5)
      v79 = "unknown-mode";
    else
      v79 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_register_metadata_changed_handler";
    v90 = 2082;
    id_str = (void *)v79;
    v92 = 2082;
    v93 = "flow";
    v94 = 2082;
    v95 = v76;
    _os_log_impl(&dword_182FBE000, v73, v77, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v76);
  if (v72)
    goto LABEL_119;
LABEL_120:

}

void sub_183ACAD88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_endpoint_flow_reset_expected_progress_target(void *a1, uint64_t a2, const unsigned __int8 *a3)
{
  NWConcrete_nw_endpoint_handler *v5;
  NWConcrete_nw_endpoint_handler *v6;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v8;
  NWConcrete_nw_endpoint_mode_handler *v9;
  void *v10;
  _DWORD *v11;
  void *v12;
  int v13;
  NWConcrete_nw_endpoint_handler *v14;
  char v15;
  NSObject *v16;
  NWConcrete_nw_endpoint_handler *v17;
  NWConcrete_nw_endpoint_handler *v18;
  char v19;
  const char *v20;
  nw_endpoint_t v21;
  const char *v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  const char *v26;
  void **v27;
  void **v28;
  const char *v29;
  const char *v30;
  void *v31;
  _DWORD *v32;
  void *v33;
  int v34;
  void **v35;
  id v36;
  void *v37;
  id *v38;
  id v39;
  id v40;
  NWConcrete_nw_endpoint_handler *v41;
  int state;
  void *v43;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  char *backtrace_string;
  os_log_type_t v49;
  _BOOL4 v50;
  nw_endpoint_t v51;
  const char *logging_description;
  const char *v53;
  const char *v54;
  id v55;
  os_log_type_t v56;
  id v57;
  const char *v58;
  void *v59;
  NSObject *v60;
  os_log_type_t v61;
  const char *v62;
  char *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  const char *v66;
  os_log_type_t v67;
  const char *v68;
  const char *v69;
  const char *v70;
  char *id_str;
  NSObject *log;
  const char *loga;
  const char *id_string;
  _QWORD v75[5];
  char v76;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v79;
  __int16 v80;
  void *v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  void *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  id v91;
  __int16 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v79 = "nw_endpoint_handler_get_mode";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v76 = 0;
    if (__nwlog_fault(v45, &type, &v76))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          v79 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v76)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v49 = type;
        v50 = os_log_type_enabled(v46, type);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            v79 = "nw_endpoint_handler_get_mode";
            v80 = 2082;
            v81 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_65;
        }
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          v79 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v56 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          v79 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v46, v56, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_65:
    if (v45)
      free(v45);
    mode = 0;
    goto LABEL_68;
  }
  mode = v5->mode;

  if (mode == 2)
  {
    v8 = nw_endpoint_handler_copy_flow(v6);
    v9 = v8;
    if ((*((_BYTE *)v8 + 32) & 2) == 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v8 + 220);
      v10 = (void *)*((_QWORD *)v9 + 117);
      if (v10)
      {
        v11 = v10;
        v12 = v11;
        v13 = v11[29];
        if (v13 == 4)
        {
          nw_endpoint_fallback_reset_expected_progress_target(v11, a2);
        }
        else if (v13 == 2)
        {
          nw_endpoint_flow_reset_expected_progress_target(v11, a2, a3);
        }

      }
      v31 = (void *)*((_QWORD *)v9 + 116);
      if (v31)
      {
        v32 = v31;
        v33 = v32;
        v34 = v32[29];
        if (v34 == 4)
        {
          nw_endpoint_fallback_reset_expected_progress_target(v32, a2);
        }
        else if (v34 == 2)
        {
          nw_endpoint_flow_reset_expected_progress_target(v32, a2, a3);
        }

      }
      os_unfair_lock_unlock((os_unfair_lock_t)v9 + 220);
LABEL_43:

      goto LABEL_102;
    }
    if (nw_endpoint_handler_get_minimize_logging(v6))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v6) & 1) != 0)
        goto LABEL_37;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v16 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v6);
        loga = nw_endpoint_handler_dry_run_string(v6);
        v51 = nw_endpoint_handler_copy_endpoint(v6);
        logging_description = nw_endpoint_get_logging_description(v51);
        v53 = nw_endpoint_handler_state_string(v6);
        v54 = nw_endpoint_handler_mode_string(v6);
        v55 = nw_endpoint_handler_copy_current_path(v6);
        *(_DWORD *)buf = 136448002;
        v79 = "nw_endpoint_flow_reset_expected_progress_target";
        v80 = 2082;
        v81 = (void *)id_string;
        v82 = 2082;
        v83 = loga;
        v84 = 2082;
        v85 = (void *)logging_description;
        v86 = 2082;
        v87 = v53;
        v88 = 2082;
        v89 = v54;
        v90 = 2114;
        v91 = v55;
        v92 = 2048;
        v93 = a2;
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Resetting progress target to %llu", buf, 0x52u);

      }
    }
    else
    {
      v14 = v6;
      v15 = *((_BYTE *)v14 + 268);

      if ((v15 & 0x20) != 0)
      {
LABEL_37:
        *((_BYTE *)v9 + 34) = *((_BYTE *)v9 + 34) & 0xEF | (16 * (a2 != 0));
        *(_OWORD *)((char *)v9 + 1080) = *(_OWORD *)a3;
        v37 = (void *)*((_QWORD *)v9 + 1);
        if (v37)
        {
          v38 = v37;
          v39 = v38[3];

          v40 = nw_path_copy_parameters(*((void **)v9 + 1));
          nw_connection_report_symptom_internal_on_nw_queue(421898, v39, v40, *((void **)v9 + 1), a2, a3, 0, 0, 0, 0);

        }
        if (*((_QWORD *)v9 + 111))
        {
          if (*((char *)v9 + 33) < 0)
          {
            v41 = v6;
            state = v41->state;

            if (state == 3)
            {
              v43 = (void *)*((_QWORD *)v9 + 111);
              v75[0] = MEMORY[0x1E0C809B0];
              v75[1] = 3221225472;
              v75[2] = __nw_endpoint_flow_reset_expected_progress_target_block_invoke;
              v75[3] = &__block_descriptor_40_e8_B12__0i8l;
              v75[4] = a2;
              nw_fd_wrapper_get_fd(v43, v75);
            }
          }
        }
        goto LABEL_43;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v16 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        v17 = v14;

        v18 = v17;
        v19 = *((_BYTE *)v14 + 268);

        if ((v19 & 1) != 0)
          v20 = "dry-run ";
        else
          v20 = "";
        v21 = nw_endpoint_handler_copy_endpoint(v18);
        v22 = nw_endpoint_get_logging_description(v21);
        id_str = v17->id_str;
        v23 = v18;
        v24 = v23;
        v25 = v23[30];
        if (v25 > 5)
          v26 = "unknown-state";
        else
          v26 = off_1E149FC48[v25];
        v70 = v26;
        log = v16;

        v27 = v24;
        v28 = v27;
        v29 = v22;
        v30 = "path";
        switch(v6->mode)
        {
          case 0:
            break;
          case 1:
            v30 = "resolver";
            break;
          case 2:
            v30 = nw_endpoint_flow_mode_string(v27[31]);
            break;
          case 3:
            v30 = "proxy";
            break;
          case 4:
            v30 = "fallback";
            break;
          case 5:
            v30 = "transform";
            break;
          default:
            v30 = "unknown-mode";
            break;
        }

        v35 = v28;
        os_unfair_lock_lock((os_unfair_lock_t)v35 + 28);
        v36 = v35[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v35 + 28);

        *(_DWORD *)buf = 136448002;
        v79 = "nw_endpoint_flow_reset_expected_progress_target";
        v80 = 2082;
        v81 = id_str;
        v82 = 2082;
        v83 = v20;
        v84 = 2082;
        v85 = (void *)v29;
        v86 = 2082;
        v87 = v70;
        v88 = 2082;
        v89 = v30;
        v90 = 2114;
        v91 = v36;
        v92 = 2048;
        v93 = a2;
        v16 = log;
        _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Resetting progress target to %llu", buf, 0x52u);

      }
    }

    goto LABEL_37;
  }
LABEL_68:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v57 = (id)gLogObj;
  if (mode > 5)
    v58 = "unknown-mode";
  else
    v58 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v79 = "nw_endpoint_flow_reset_expected_progress_target";
  v80 = 2082;
  v81 = (void *)v58;
  v82 = 2082;
  v83 = "flow";
  v59 = (void *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v76 = 0;
  if (!__nwlog_fault((const char *)v59, &type, &v76))
  {
LABEL_100:
    if (!v59)
      goto LABEL_102;
LABEL_101:
    free(v59);
    goto LABEL_102;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v60 = (id)gLogObj;
    v61 = type;
    if (os_log_type_enabled(v60, type))
    {
      if (mode > 5)
        v62 = "unknown-mode";
      else
        v62 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v79 = "nw_endpoint_flow_reset_expected_progress_target";
      v80 = 2082;
      v81 = (void *)v62;
      v82 = 2082;
      v83 = "flow";
      _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_99:

    goto LABEL_100;
  }
  if (!v76)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v60 = (id)gLogObj;
    v67 = type;
    if (os_log_type_enabled(v60, type))
    {
      if (mode > 5)
        v68 = "unknown-mode";
      else
        v68 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v79 = "nw_endpoint_flow_reset_expected_progress_target";
      v80 = 2082;
      v81 = (void *)v68;
      v82 = 2082;
      v83 = "flow";
      _os_log_impl(&dword_182FBE000, v60, v67, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_99;
  }
  v63 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v60 = (id)gLogObj;
  v64 = type;
  v65 = os_log_type_enabled(v60, type);
  if (!v63)
  {
    if (v65)
    {
      if (mode > 5)
        v69 = "unknown-mode";
      else
        v69 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v79 = "nw_endpoint_flow_reset_expected_progress_target";
      v80 = 2082;
      v81 = (void *)v69;
      v82 = 2082;
      v83 = "flow";
      _os_log_impl(&dword_182FBE000, v60, v64, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_99;
  }
  if (v65)
  {
    if (mode > 5)
      v66 = "unknown-mode";
    else
      v66 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    v79 = "nw_endpoint_flow_reset_expected_progress_target";
    v80 = 2082;
    v81 = (void *)v66;
    v82 = 2082;
    v83 = "flow";
    v84 = 2082;
    v85 = v63;
    _os_log_impl(&dword_182FBE000, v60, v64, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v63);
  if (v59)
    goto LABEL_101;
LABEL_102:

}

void sub_183ACB95C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_flow_reset_expected_progress_target_block_invoke(uint64_t a1, int a2)
{
  int v2;
  NSObject *v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!setsockopt(a2, 6, 537, (const void *)(a1 + 32), 8u))
    return 1;
  v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  v4 = v3;
  if (v2 != 22)
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
    v19 = 1024;
    v20 = v2;
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446466;
        v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
        v19 = 1024;
        v20 = v2;
        v8 = "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d";
LABEL_20:
        v13 = v6;
        v14 = v7;
        goto LABEL_21;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446466;
        v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
        v19 = 1024;
        v20 = v2;
        v8 = "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v10 = type;
      v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_22:

          if (!v5)
            return 1;
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446466;
        v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
        v19 = 1024;
        v20 = v2;
        v8 = "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d, no backtrace";
        v13 = v6;
        v14 = v10;
LABEL_21:
        _os_log_impl(&dword_182FBE000, v13, v14, v8, buf, 0x12u);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446722;
        v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
        v19 = 1024;
        v20 = v2;
        v21 = 2082;
        v22 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(backtrace_string);
    }
    if (!v5)
      return 1;
LABEL_16:
    free(v5);
    return 1;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_endpoint_flow_reset_expected_progress_target_block_invoke";
    v19 = 1024;
    v20 = 22;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s setsockopt MPTCP_EXPECTED_PROGRESS_TARGET failed %{darwin.errno}d", buf, 0x12u);
  }

  return 1;
}

uint64_t ___ZL36nw_endpoint_flow_validate_delegationP30NWConcrete_nw_endpoint_handler_block_invoke_215(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;
  size_t length;
  size_t v7;
  BOOL v8;
  size_t v9;
  int v10;
  char logging_disabled;
  NSObject *v12;
  const char *id_string;
  const char *v14;
  const char *v15;
  const char *logging_description;
  const char *v17;
  const char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  id v30;
  uint64_t v31;
  nw_endpoint_t v32;
  nw_endpoint_t v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  id v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  const char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (object_getClass(v4) != (Class)MEMORY[0x1E0C81390]
    || (string_ptr = xpc_string_get_string_ptr(v4),
        length = xpc_string_get_length(v4),
        v7 = *(_QWORD *)(a1 + 48),
        v8 = v7 >= length,
        v9 = v7 - length,
        !v8))
  {
LABEL_11:
    v21 = 1;
    goto LABEL_12;
  }
  v10 = strcmp(string_ptr, (const char *)(*(_QWORD *)(a1 + 56) + v9));
  logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
  if (v10)
  {
    if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v12 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v14 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v15 = id_string;
        v32 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v32);
        v17 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v18 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v19 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        v20 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)buf = 136448258;
        v35 = "nw_endpoint_flow_validate_delegation_block_invoke";
        v36 = 2082;
        v37 = v15;
        v38 = 2082;
        v39 = v14;
        v40 = 2082;
        v41 = logging_description;
        v42 = 2082;
        v43 = v17;
        v44 = 2082;
        v45 = v18;
        v46 = 2114;
        v47 = v19;
        v48 = 2082;
        v49 = v20;
        v50 = 2082;
        v51 = string_ptr;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Domain \"%{public}s\" does not match %{public}s", buf, 0x5Cu);

      }
    }
    goto LABEL_11;
  }
  if ((logging_disabled & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v23 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      v24 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v25 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v26 = v24;
      v33 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      v27 = nw_endpoint_get_logging_description(v33);
      v28 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v29 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v30 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      v31 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 136448258;
      v35 = "nw_endpoint_flow_validate_delegation_block_invoke";
      v36 = 2082;
      v37 = v26;
      v38 = 2082;
      v39 = v25;
      v40 = 2082;
      v41 = v27;
      v42 = 2082;
      v43 = v28;
      v44 = 2082;
      v45 = v29;
      v46 = 2114;
      v47 = v30;
      v48 = 2082;
      v49 = v31;
      v50 = 2082;
      v51 = string_ptr;
      _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Domain \"%{public}s\" matches %{public}s", buf, 0x5Cu);

    }
  }
  v21 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
LABEL_12:

  return v21;
}

void sub_183ACC130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_access_parent_flow_handler(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, _DWORD *);
  id *v5;
  id *v6;
  _DWORD *v7;
  int v8;
  id *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    v5 = (id *)v3;
    if (v5)
    {
      v6 = v5;
      v7 = v5[9];

      if (v7)
      {
        while (1)
        {
          v7 = v7;
          v8 = v7[29];

          if (v8 == 2)
            break;
          v9 = v7;
          v7 = v9[9];

          if (!v7)
            goto LABEL_8;
        }
        v4[2](v4, v7);
      }
      goto LABEL_8;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_endpoint_handler_copy_parent";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v15, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        v23 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "nw_endpoint_handler_copy_parent";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_182FBE000, v16, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_endpoint_handler_copy_parent";
          _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_44:
    if (v15)
      free(v15);
    v7 = 0;
LABEL_8:

    goto LABEL_9;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_endpoint_handler_access_parent_flow_handler";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v11, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_endpoint_handler_access_parent_flow_handler";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null accessor", buf, 0xCu);
      }
    }
    else if (v26)
    {
      v18 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_endpoint_handler_access_parent_flow_handler";
          v30 = 2082;
          v31 = v18;
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null accessor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
        goto LABEL_39;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_endpoint_handler_access_parent_flow_handler";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null accessor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_endpoint_handler_access_parent_flow_handler";
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null accessor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_39:
  if (v11)
    free(v11);
LABEL_9:

}

void sub_183ACC690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_flow_set_pre_connected_fd_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 900) = a2;
  return 1;
}

BOOL nw_endpoint_handler_has_connected_flow(void *a1)
{
  id v1;
  void *v2;
  NWConcrete_nw_endpoint_handler *v3;
  int mode;
  NWConcrete_nw_endpoint_mode_handler *v5;
  _BOOL8 v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_endpoint_handler_has_connected_flow";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_endpoint_handler_has_connected_flow";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_endpoint_handler_has_connected_flow";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_endpoint_handler_has_connected_flow";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_endpoint_handler_has_connected_flow";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v8)
      free(v8);
    goto LABEL_25;
  }
  v3 = (NWConcrete_nw_endpoint_handler *)v1;
  mode = v3->mode;

  if (mode != 2)
  {
LABEL_25:
    v6 = 0;
    goto LABEL_26;
  }
  v5 = nw_endpoint_handler_copy_flow(v3);
  v6 = (*((_DWORD *)v5 + 225) & 0x80000000) == 0 || *((_QWORD *)v5 + 113) != 0;

LABEL_26:
  return v6;
}

void sub_183ACC988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL __nw_endpoint_flow_fillout_tcp_connection_info_block_invoke(uint64_t a1, int a2)
{
  int v2;
  int v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  socklen_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v17 = 112;
  v2 = getsockopt(a2, 6, 262, *(void **)(a1 + 32), &v17);
  if (v2)
  {
    v3 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
    v20 = 1024;
    v21 = v3;
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_18;
        *(_DWORD *)buf = 136446466;
        v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
        v20 = 1024;
        v21 = v3;
        v8 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
LABEL_16:
        v13 = v6;
        v14 = v7;
        goto LABEL_17;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_18;
        *(_DWORD *)buf = 136446466;
        v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
        v20 = 1024;
        v21 = v3;
        v8 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_16;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v10 = type;
      v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_18:

          if (!v5)
            return v2 == 0;
          goto LABEL_12;
        }
        *(_DWORD *)buf = 136446466;
        v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
        v20 = 1024;
        v21 = v3;
        v8 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, no backtrace";
        v13 = v6;
        v14 = v10;
LABEL_17:
        _os_log_impl(&dword_182FBE000, v13, v14, v8, buf, 0x12u);
        goto LABEL_18;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446722;
        v19 = "nw_endpoint_flow_fillout_tcp_connection_info_block_invoke";
        v20 = 1024;
        v21 = v3;
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(backtrace_string);
    }
    if (v5)
LABEL_12:
      free(v5);
  }
  return v2 == 0;
}

void *nw_endpoint_handler_copy_connected_parameters_with_protocol(void *a1, void *a2)
{
  id v3;
  id v4;
  NWConcrete_nw_endpoint_handler *v5;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v7;
  char *identifier;
  void *v9;
  id *v10;
  id v11;
  id v12;
  id v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  const char *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  os_log_type_t v27;
  const char *v28;
  const char *v29;
  void *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v15, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
          _os_log_impl(&dword_182FBE000, v16, v32, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v37)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
            v41 = 2082;
            v42 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v34, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v15)
            goto LABEL_51;
          goto LABEL_50;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
          _os_log_impl(&dword_182FBE000, v16, v34, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
          _os_log_impl(&dword_182FBE000, v16, v36, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_48;
    }
LABEL_49:
    if (!v15)
    {
LABEL_51:
      v23 = 0;
      goto LABEL_52;
    }
LABEL_50:
    free(v15);
    goto LABEL_51;
  }
  v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    if (mode > 5)
      v14 = "unknown-mode";
    else
      v14 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
    v41 = 2082;
    v42 = (void *)v14;
    v43 = 2082;
    v44 = "flow";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v15, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          if (mode > 5)
            v18 = "unknown-mode";
          else
            v18 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
          v41 = 2082;
          v42 = (void *)v18;
          v43 = 2082;
          v44 = "flow";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v37)
      {
        v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v20 = type;
        v21 = os_log_type_enabled(v16, type);
        if (v19)
        {
          if (v21)
          {
            if (mode > 5)
              v22 = "unknown-mode";
            else
              v22 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
            v41 = 2082;
            v42 = (void *)v22;
            v43 = 2082;
            v44 = "flow";
            v45 = 2082;
            v46 = v19;
            _os_log_impl(&dword_182FBE000, v16, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v19);
          if (!v15)
            goto LABEL_51;
          goto LABEL_50;
        }
        if (v21)
        {
          if (mode > 5)
            v29 = "unknown-mode";
          else
            v29 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
          v41 = 2082;
          v42 = (void *)v29;
          v43 = 2082;
          v44 = "flow";
          _os_log_impl(&dword_182FBE000, v16, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v27 = type;
        if (os_log_type_enabled(v16, type))
        {
          if (mode > 5)
            v28 = "unknown-mode";
          else
            v28 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v40 = "nw_endpoint_handler_copy_connected_parameters_with_protocol";
          v41 = 2082;
          v42 = (void *)v28;
          v43 = 2082;
          v44 = "flow";
          _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
LABEL_48:

      goto LABEL_49;
    }
    goto LABEL_49;
  }
  v7 = nw_endpoint_handler_copy_flow(v5);
  os_unfair_lock_lock((os_unfair_lock_t)v7 + 220);
  identifier = nw_protocol_definition_get_identifier(v4);
  v9 = (void *)*((_QWORD *)v7 + 1);
  if (v9)
  {
    v10 = v9;
    v11 = v10[2];

    if (nw_parameters_has_protocol_in_stack(v11, identifier))
      v12 = v11;
    else
      v12 = 0;

    v23 = v12;
    v24 = (void *)*((_QWORD *)v7 + 69);
    if (v24)
    {
LABEL_23:
      if (nw_parameters_has_protocol_in_stack(v24, identifier))
      {
        v25 = *((id *)v7 + 69);

        v23 = v25;
      }
    }
  }
  else
  {
    v23 = 0;
    v24 = (void *)*((_QWORD *)v7 + 69);
    if (v24)
      goto LABEL_23;
  }
  if (!v23)
  {
    v26 = *((_QWORD *)v7 + 117);
    if (v26)
      v23 = (void *)nw_endpoint_handler_copy_connected_parameters_with_protocol(v26, v4);
    else
      v23 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v7 + 220);

LABEL_52:
  return v23;
}

void sub_183ACD3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_handler *nw_endpoint_handler_copy_top_protocol_flow_handler(void *a1)
{
  id v1;
  void *v2;
  NWConcrete_nw_endpoint_handler *v3;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v5;
  NWConcrete_nw_endpoint_handler *v6;
  NWConcrete_nw_endpoint_handler *v7;
  id v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  const char *v17;
  os_log_type_t v18;
  const char *v19;
  const char *v20;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_42;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v3 = (NWConcrete_nw_endpoint_handler *)v1;
  mode = v3->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (mode > 5)
      v9 = "unknown-mode";
    else
      v9 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
    v32 = 2082;
    v33 = (void *)v9;
    v34 = 2082;
    v35 = "flow";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v10, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          if (mode > 5)
            v13 = "unknown-mode";
          else
            v13 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
          v32 = 2082;
          v33 = (void *)v13;
          v34 = 2082;
          v35 = "flow";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v28)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v11, type);
        if (v14)
        {
          if (v16)
          {
            if (mode > 5)
              v17 = "unknown-mode";
            else
              v17 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
            v32 = 2082;
            v33 = (void *)v17;
            v34 = 2082;
            v35 = "flow";
            v36 = 2082;
            v37 = v14;
            _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v14);
          if (!v10)
            goto LABEL_44;
          goto LABEL_43;
        }
        if (v16)
        {
          if (mode > 5)
            v20 = "unknown-mode";
          else
            v20 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
          v32 = 2082;
          v33 = (void *)v20;
          v34 = 2082;
          v35 = "flow";
          _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          if (mode > 5)
            v19 = "unknown-mode";
          else
            v19 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v31 = "nw_endpoint_handler_copy_top_protocol_flow_handler";
          v32 = 2082;
          v33 = (void *)v19;
          v34 = 2082;
          v35 = "flow";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
      goto LABEL_41;
    }
LABEL_42:
    if (!v10)
    {
LABEL_44:
      v7 = 0;
      goto LABEL_45;
    }
LABEL_43:
    free(v10);
    goto LABEL_44;
  }
  v5 = nw_endpoint_handler_copy_flow(v3);
  os_unfair_lock_lock((os_unfair_lock_t)v5 + 220);
  if (*((_QWORD *)v5 + 117)
    && (*((_BYTE *)v5 + 32) & 2) == 0
    && (*((_BYTE *)v5 + 33) & 1) == 0
    && *((NWConcrete_nw_endpoint_mode_handler **)v5 + 94) == (NWConcrete_nw_endpoint_mode_handler *)((char *)v5 + 376))
  {
    v6 = (NWConcrete_nw_endpoint_handler *)nw_endpoint_handler_copy_top_protocol_flow_handler();
  }
  else
  {
    v6 = v3;
  }
  v7 = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)v5 + 220);

LABEL_45:
  return v7;
}

void sub_183ACDA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_modify_protocol_stack(void *a1, void *a2)
{
  id v3;
  unsigned int *v4;
  uint64_t v5;
  NWConcrete_nw_endpoint_handler *v6;
  int state;
  NWConcrete_nw_endpoint_mode_handler *v8;
  id *v9;
  uint64_t v10;
  char v11;
  _DWORD *v12;
  void *v13;
  void *v14;
  id *v15;
  id *v16;
  id v17;
  char *identifier;
  id *v19;
  id v20;
  uint64_t v21;
  nw_endpoint_t v22;
  _QWORD *v23;
  char v24;
  nw_endpoint_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  nw_endpoint_t v29;
  uint64_t protocol_for_definition;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  char v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  char v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  char v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (**v68)(_QWORD);
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  void (**v72)(_QWORD);
  const void *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  char v81;
  uint64_t v82;
  uint64_t v83;
  void (**v84)(_QWORD);
  const void *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  char v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (**v97)(_QWORD);
  const void *v98;
  void *v99;
  const char *v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  const char *v104;
  void *v105;
  const char *v106;
  char *v107;
  NSObject *v108;
  const char *v109;
  void *v110;
  const char *v111;
  char *v112;
  NSObject *v113;
  const char *v114;
  char *v115;
  NSObject *v116;
  _BOOL4 v117;
  const char *v118;
  char *v119;
  _BOOL4 v120;
  const char *v121;
  char *v122;
  _BOOL4 v123;
  const char *v124;
  void *v125;
  const char *v126;
  char *v127;
  NSObject *v128;
  os_log_type_t v129;
  const char *v130;
  os_log_type_t v131;
  const char *v132;
  void *v133;
  const char *v134;
  char *v135;
  NSObject *v136;
  os_log_type_t v137;
  const char *v138;
  void *v139;
  char *v140;
  NSObject *v141;
  os_log_type_t v142;
  char *v143;
  NSObject *v144;
  _BOOL4 v145;
  const char *v146;
  const char *v147;
  const char *v148;
  const char *v149;
  const char *v150;
  void *v151;
  char *v152;
  NSObject *v153;
  os_log_type_t v154;
  char *v155;
  NSObject *v156;
  _BOOL4 v157;
  const char *v158;
  const char *v159;
  char *v160;
  _BOOL4 v161;
  os_log_type_t v162;
  const char *v163;
  char *v164;
  _BOOL4 v165;
  const char *v166;
  os_log_type_t v167;
  const char *v168;
  os_log_type_t v169;
  const char *v170;
  os_log_type_t v171;
  id v172;
  const char *v173;
  char *v174;
  NSObject *v175;
  os_log_type_t v176;
  const char *v177;
  char *v178;
  os_log_type_t v179;
  _BOOL4 v180;
  const char *v181;
  os_log_type_t v182;
  const char *v183;
  const char *v184;
  NSObject *v185;
  const char *v186;
  const char *v187;
  nw_endpoint_t v188;
  const char *v189;
  const char *v190;
  const char *v191;
  id v192;
  id *v193;
  id v194;
  void *v195;
  uint64_t v196;
  id *v197;
  BOOL v198;
  NSObject *v199;
  char *v200;
  char *v201;
  _BOOL4 v202;
  const char *v203;
  nw_endpoint_t v204;
  const char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  const char *v209;
  void **v210;
  void **v211;
  unsigned int v212;
  const char *v213;
  NSObject *v214;
  const char *v215;
  const char *v216;
  nw_endpoint_t v217;
  const char *v218;
  const char *v219;
  const char *v220;
  id v221;
  const char *v222;
  const char *v223;
  nw_endpoint_t v224;
  const char *v225;
  const char *v226;
  const char *v227;
  id v228;
  const char *id_string;
  const char *v230;
  nw_endpoint_t v231;
  const char *logging_description;
  const char *v233;
  const char *v234;
  id v235;
  void *v236;
  char *v237;
  NSObject *v238;
  os_log_type_t v239;
  void *v240;
  char *v241;
  NSObject *v242;
  os_log_type_t v243;
  void **v244;
  id v245;
  NSObject *v246;
  NSObject *v247;
  const char *v248;
  const char *v249;
  const char *v250;
  const char *v251;
  const char *v252;
  id v253;
  void *v254;
  const char *v255;
  const char *v256;
  const char *v257;
  nw_endpoint_t v258;
  const char *v259;
  const char *v260;
  const char *v261;
  id v262;
  const char *v263;
  const char *v264;
  const char *v265;
  const char *v266;
  const char *v267;
  id v268;
  char *v269;
  os_log_type_t v270;
  _BOOL4 v271;
  char *v272;
  os_log_type_t v273;
  _BOOL4 v274;
  const char *v275;
  const char *v276;
  nw_endpoint_t v277;
  const char *v278;
  const char *v279;
  const char *v280;
  id v281;
  void *v282;
  const char *v283;
  os_log_type_t v284;
  os_log_type_t v285;
  const char *v286;
  const char *v287;
  nw_endpoint_t v288;
  const char *v289;
  const char *v290;
  const char *v291;
  id v292;
  id *v293;
  _BOOL4 v294;
  const char *v295;
  const char *v296;
  const char *v297;
  const char *v298;
  const char *v299;
  const char *v300;
  id v301;
  id *v302;
  _BOOL4 v303;
  const char *v304;
  const char *v305;
  nw_endpoint_t v306;
  const char *v307;
  const char *v308;
  const char *v309;
  id v310;
  void *v311;
  const char *v312;
  void *v314;
  os_log_type_t v315;
  void *v316;
  os_log_type_t v317;
  char *backtrace_string;
  os_log_type_t v319;
  _BOOL4 v320;
  void *v321;
  char *v322;
  NSObject *v323;
  os_log_type_t v324;
  os_log_type_t v325;
  _BOOL4 v326;
  os_log_type_t v327;
  void *v328;
  char *v329;
  NSObject *v330;
  os_log_type_t v331;
  char *v332;
  os_log_type_t v333;
  _BOOL4 v334;
  os_log_type_t v335;
  char *v336;
  os_log_type_t v337;
  _BOOL4 v338;
  os_log_type_t v339;
  os_log_type_t v340;
  os_log_type_t v341;
  os_log_type_t v342;
  os_log_type_t v343;
  os_log_type_t v344;
  NSObject *v345;
  NSObject *v346;
  os_log_type_t v347;
  os_log_type_t v348;
  os_log_type_t v349;
  os_log_type_t v350;
  const char *v351;
  const char *v352;
  os_log_type_t v353;
  os_log_type_t v354;
  os_log_type_t v355;
  nw_endpoint_t v356;
  NWConcrete_nw_endpoint_handler *v357;
  NWConcrete_nw_endpoint_mode_handler *v358;
  uint64_t v359;
  nw_endpoint_t v360;
  id v361;
  id *v362;
  nw_endpoint_t v363;
  void *v364;
  unsigned int log;
  NSObject *loga;
  id v367;
  int v368;
  char v369;
  os_log_type_t v370[8];
  char v371;
  os_log_type_t type;
  os_log_type_t v373[8];
  char v374;
  os_log_type_t v375[8];
  char v376;
  uint8_t buf[4];
  const char *v378;
  __int16 v379;
  char *v380;
  __int16 v381;
  const char *v382;
  __int16 v383;
  void *v384;
  __int16 v385;
  const char *v386;
  __int16 v387;
  const char *v388;
  __int16 v389;
  id v390;
  __int16 v391;
  void *v392;
  __int16 v393;
  void *v394;
  uint64_t v395;

  v395 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v367 = a2;
  v364 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v314 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v378 = "nw_endpoint_handler_modify_protocol_stack";
    v174 = (char *)_os_log_send_and_compose_impl();

    v375[0] = OS_LOG_TYPE_ERROR;
    v373[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v174, v375, v373))
    {
      if (v375[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v175 = objc_claimAutoreleasedReturnValue();
        v315 = v375[0];
        if (os_log_type_enabled(v175, v375[0]))
        {
          *(_DWORD *)buf = 136446210;
          v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl(&dword_182FBE000, v175, v315, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_477;
      }
      if (v373[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v175 = objc_claimAutoreleasedReturnValue();
        v327 = v375[0];
        if (os_log_type_enabled(v175, v375[0]))
        {
          *(_DWORD *)buf = 136446210;
          v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl(&dword_182FBE000, v175, v327, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_477;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v175 = objc_claimAutoreleasedReturnValue();
      v319 = v375[0];
      v320 = os_log_type_enabled(v175, v375[0]);
      if (!backtrace_string)
      {
        if (v320)
        {
          *(_DWORD *)buf = 136446210;
          v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl(&dword_182FBE000, v175, v319, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_477;
      }
      if (v320)
      {
        *(_DWORD *)buf = 136446466;
        v378 = "nw_endpoint_handler_modify_protocol_stack";
        v379 = 2082;
        v380 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v175, v319, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_628;
    }
LABEL_478:
    if (!v174)
      goto LABEL_480;
LABEL_479:
    free(v174);
    goto LABEL_480;
  }
  v4 = (unsigned int *)v3;
  v5 = v4[29];

  if ((_DWORD)v5 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v172 = (id)gLogObj;
    if (v5 > 5)
      v173 = "unknown-mode";
    else
      v173 = off_1E149FC18[v5];
    *(_DWORD *)buf = 136446722;
    v378 = "nw_endpoint_handler_modify_protocol_stack";
    v379 = 2082;
    v380 = (char *)v173;
    v381 = 2082;
    v382 = "flow";
    v174 = (char *)_os_log_send_and_compose_impl();

    v375[0] = OS_LOG_TYPE_ERROR;
    v373[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v174, v375, v373))
    {
      if (v375[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v175 = (id)gLogObj;
        v176 = v375[0];
        if (os_log_type_enabled(v175, v375[0]))
        {
          if (v5 > 5)
            v177 = "unknown-mode";
          else
            v177 = off_1E149FC18[v5];
          *(_DWORD *)buf = 136446722;
          v378 = "nw_endpoint_handler_modify_protocol_stack";
          v379 = 2082;
          v380 = (char *)v177;
          v381 = 2082;
          v382 = "flow";
          _os_log_impl(&dword_182FBE000, v175, v176, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v373[0])
      {
        v178 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v175 = (id)gLogObj;
        v179 = v375[0];
        v180 = os_log_type_enabled(v175, v375[0]);
        if (v178)
        {
          if (v180)
          {
            if (v5 > 5)
              v181 = "unknown-mode";
            else
              v181 = off_1E149FC18[v5];
            *(_DWORD *)buf = 136446978;
            v378 = "nw_endpoint_handler_modify_protocol_stack";
            v379 = 2082;
            v380 = (char *)v181;
            v381 = 2082;
            v382 = "flow";
            v383 = 2082;
            v384 = v178;
            _os_log_impl(&dword_182FBE000, v175, v179, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v178);
          if (!v174)
            goto LABEL_480;
          goto LABEL_479;
        }
        if (v180)
        {
          if (v5 > 5)
            v184 = "unknown-mode";
          else
            v184 = off_1E149FC18[v5];
          *(_DWORD *)buf = 136446722;
          v378 = "nw_endpoint_handler_modify_protocol_stack";
          v379 = 2082;
          v380 = (char *)v184;
          v381 = 2082;
          v382 = "flow";
          _os_log_impl(&dword_182FBE000, v175, v179, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v175 = (id)gLogObj;
        v182 = v375[0];
        if (os_log_type_enabled(v175, v375[0]))
        {
          if (v5 > 5)
            v183 = "unknown-mode";
          else
            v183 = off_1E149FC18[v5];
          *(_DWORD *)buf = 136446722;
          v378 = "nw_endpoint_handler_modify_protocol_stack";
          v379 = 2082;
          v380 = (char *)v183;
          v381 = 2082;
          v382 = "flow";
          _os_log_impl(&dword_182FBE000, v175, v182, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
      goto LABEL_477;
    }
    goto LABEL_478;
  }
  if (!v367)
  {
    __nwlog_obj();
    v316 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v378 = "nw_endpoint_handler_modify_protocol_stack";
    v174 = (char *)_os_log_send_and_compose_impl();

    v375[0] = OS_LOG_TYPE_ERROR;
    v373[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v174, v375, v373))
    {
      if (v375[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v175 = objc_claimAutoreleasedReturnValue();
        v317 = v375[0];
        if (os_log_type_enabled(v175, v375[0]))
        {
          *(_DWORD *)buf = 136446210;
          v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl(&dword_182FBE000, v175, v317, "%{public}s called with null modifier", buf, 0xCu);
        }
LABEL_477:

        goto LABEL_478;
      }
      if (v373[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v175 = objc_claimAutoreleasedReturnValue();
        v335 = v375[0];
        if (os_log_type_enabled(v175, v375[0]))
        {
          *(_DWORD *)buf = 136446210;
          v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl(&dword_182FBE000, v175, v335, "%{public}s called with null modifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_477;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v175 = objc_claimAutoreleasedReturnValue();
      v325 = v375[0];
      v326 = os_log_type_enabled(v175, v375[0]);
      if (!backtrace_string)
      {
        if (v326)
        {
          *(_DWORD *)buf = 136446210;
          v378 = "nw_endpoint_handler_modify_protocol_stack";
          _os_log_impl(&dword_182FBE000, v175, v325, "%{public}s called with null modifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_477;
      }
      if (v326)
      {
        *(_DWORD *)buf = 136446466;
        v378 = "nw_endpoint_handler_modify_protocol_stack";
        v379 = 2082;
        v380 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v175, v325, "%{public}s called with null modifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_628:

      free(backtrace_string);
      if (!v174)
        goto LABEL_480;
      goto LABEL_479;
    }
    goto LABEL_478;
  }
  v6 = v4;
  state = v6->state;

  if ((state & 0xFFFFFFFE) == 4)
  {
LABEL_480:
    v196 = 0;
    goto LABEL_603;
  }
  v357 = v6;
  v8 = nw_endpoint_handler_copy_flow(v6);
  v9 = v6;
  v361 = v9[4];
  v362 = v9;

  v10 = *((_QWORD *)v8 + 51);
  v358 = v8;
  if (!v10)
    goto LABEL_456;
  v11 = 0;
  log = 0;
  v359 = (uint64_t)v8 + 376;
  while (2)
  {
    v368 = 0;
    v12 = *(_DWORD **)(v10 + 16);
    (*((void (**)(id, _QWORD, _DWORD *, int *))v367 + 2))(v367, log, v12, &v368);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13)
    {
      v15 = v13;
      v16 = v15 + 1;
      v17 = v15[1];

      identifier = nw_protocol_definition_get_identifier(v17);
      v19 = v15;
      v20 = *v16;

    }
    else
    {
      v20 = 0;
      identifier = 0;
    }
    v21 = *(_QWORD *)(v10 + 32);
    switch(v368)
    {
      case 0:
        ++log;
        v359 = v10;
        goto LABEL_218;
      case 1:
        if ((v12[9] & 0xFFFFFFFE) == 2)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v214 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            {
              loga = v214;
              id_string = nw_endpoint_handler_get_id_string(v362);
              v230 = nw_endpoint_handler_dry_run_string(v362);
              v231 = nw_endpoint_handler_copy_endpoint(v362);
              logging_description = nw_endpoint_get_logging_description(v231);
              v233 = nw_endpoint_handler_state_string(v362);
              v234 = nw_endpoint_handler_mode_string(v362);
              v235 = nw_endpoint_handler_copy_current_path(v362);
              *(_DWORD *)buf = 136448002;
              v378 = "nw_endpoint_handler_modify_protocol_stack";
              v379 = 2082;
              v380 = (char *)id_string;
              v381 = 2082;
              v382 = v230;
              v383 = 2082;
              v384 = (void *)logging_description;
              v385 = 2082;
              v386 = v233;
              v387 = 2082;
              v388 = v234;
              v389 = 2114;
              v390 = v235;
              v391 = 2082;
              v392 = v12;
              _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Can only replace one-to-one protocols, (%{public}s is not one-to-one)", buf, 0x52u);

              goto LABEL_599;
            }
            goto LABEL_600;
          }
          goto LABEL_601;
        }
        if (identifier)
        {
          v29 = nw_endpoint_handler_copy_endpoint(v362);
          protocol_for_definition = nw_endpoint_handler_create_protocol_for_definition((uint64_t)identifier, v20, v29, v361);

          if (!protocol_for_definition)
          {
            if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) != 0)
              goto LABEL_601;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v214 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
              goto LABEL_600;
LABEL_541:
            loga = v214;
            v256 = nw_endpoint_handler_get_id_string(v362);
            v257 = nw_endpoint_handler_dry_run_string(v362);
            v258 = nw_endpoint_handler_copy_endpoint(v362);
            v259 = nw_endpoint_get_logging_description(v258);
            v260 = nw_endpoint_handler_state_string(v362);
            v261 = nw_endpoint_handler_mode_string(v362);
            v262 = nw_endpoint_handler_copy_current_path(v362);
            *(_DWORD *)buf = 136448002;
            v378 = "nw_endpoint_handler_modify_protocol_stack";
            v379 = 2082;
            v380 = (char *)v256;
            v381 = 2082;
            v382 = v257;
            v383 = 2082;
            v384 = (void *)v259;
            v385 = 2082;
            v386 = v260;
            v387 = 2082;
            v388 = v261;
            v389 = 2114;
            v390 = v262;
            v391 = 2082;
            v392 = identifier;
            _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to create protocol %{public}s", buf, 0x52u);

            goto LABEL_599;
          }
          nw_parameters_add_protocol_stack_member(v361, 4, 0xFFFFFFFF, v14);
          nw_endpoint_handler_set_protocol_instance(v362, v14, v20, protocol_for_definition);
          if (!v21)
          {
            __nwlog_obj();
            v328 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v378 = "__nw_protocol_replace_input_handler";
            v329 = (char *)_os_log_send_and_compose_impl();

            v375[0] = OS_LOG_TYPE_ERROR;
            v373[0] = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v329, v375, v373))
            {
              if (v375[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v330 = objc_claimAutoreleasedReturnValue();
                v331 = v375[0];
                if (os_log_type_enabled(v330, v375[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v378 = "__nw_protocol_replace_input_handler";
                  _os_log_impl(&dword_182FBE000, v330, v331, "%{public}s called with null protocol", buf, 0xCu);
                }
                goto LABEL_671;
              }
              if (v373[0])
              {
                v336 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v330 = objc_claimAutoreleasedReturnValue();
                v337 = v375[0];
                v338 = os_log_type_enabled(v330, v375[0]);
                if (v336)
                {
                  if (v338)
                  {
                    *(_DWORD *)buf = 136446466;
                    v378 = "__nw_protocol_replace_input_handler";
                    v379 = 2082;
                    v380 = v336;
                    _os_log_impl(&dword_182FBE000, v330, v337, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v336);
                  goto LABEL_672;
                }
                if (v338)
                {
                  *(_DWORD *)buf = 136446210;
                  v378 = "__nw_protocol_replace_input_handler";
                  _os_log_impl(&dword_182FBE000, v330, v337, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v330 = objc_claimAutoreleasedReturnValue();
                v340 = v375[0];
                if (os_log_type_enabled(v330, v375[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v378 = "__nw_protocol_replace_input_handler";
                  _os_log_impl(&dword_182FBE000, v330, v340, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                }
              }
LABEL_671:

            }
LABEL_672:
            if (v329)
              free(v329);
LABEL_674:
            if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) != 0)
              goto LABEL_601;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v214 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
              goto LABEL_600;
LABEL_546:
            loga = v214;
            v263 = nw_endpoint_handler_get_id_string(v362);
            v264 = nw_endpoint_handler_dry_run_string(v362);
            v360 = nw_endpoint_handler_copy_endpoint(v362);
            v265 = nw_endpoint_get_logging_description(v360);
            v266 = nw_endpoint_handler_state_string(v362);
            v267 = nw_endpoint_handler_mode_string(v362);
            v268 = nw_endpoint_handler_copy_current_path(v362);
            *(_DWORD *)buf = 136448258;
            v378 = "nw_endpoint_handler_modify_protocol_stack";
            v379 = 2082;
            v380 = (char *)v263;
            v381 = 2082;
            v382 = v264;
            v383 = 2082;
            v384 = (void *)v265;
            v385 = 2082;
            v386 = v266;
            v387 = 2082;
            v388 = v267;
            v389 = 2114;
            v390 = v268;
            v391 = 2082;
            v392 = v12;
            v393 = 2082;
            v394 = identifier;
            _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to replace protocol %{public}s with %{public}s", buf, 0x5Cu);

            goto LABEL_599;
          }
          if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
          {
            v43 = *(_QWORD *)(v21 + 88);
            if (v43)
              *(_QWORD *)(v21 + 88) = v43 + 1;
            *(_QWORD *)v375 = v21;
            v31 = v376 | 1;
          }
          else
          {
            *(_QWORD *)v375 = v21;
            v31 = v376 & 0xFE;
          }
          v376 = v31;
          if (*(_UNKNOWN **)(v10 + 40) == &nw_protocol_ref_counted_handle)
          {
            v45 = *(_QWORD *)(v10 + 88);
            if (v45)
              *(_QWORD *)(v10 + 88) = v45 + 1;
            *(_QWORD *)v373 = v10;
            v44 = v374 | 1;
          }
          else
          {
            *(_QWORD *)v373 = v10;
            v44 = v374 & 0xFE;
          }
          v374 = v44;
          if (*(_UNKNOWN **)(protocol_for_definition + 40) == &nw_protocol_ref_counted_handle)
          {
            v47 = *(_QWORD *)(protocol_for_definition + 88);
            if (v47)
              *(_QWORD *)(protocol_for_definition + 88) = v47 + 1;
            *(_QWORD *)v370 = protocol_for_definition;
            v46 = v371 | 1;
          }
          else
          {
            *(_QWORD *)v370 = protocol_for_definition;
            v46 = v371 & 0xFE;
          }
          v371 = v46;
          v48 = *(_QWORD *)(v21 + 24);
          if (v48)
          {
            v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
            if (v49)
            {
              v50 = v49(v21, v10, protocol_for_definition);
              if ((v371 & 1) == 0)
                goto LABEL_87;
              goto LABEL_86;
            }
          }
          __nwlog_obj();
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          v106 = *(const char **)(v21 + 16);
          if (!v106)
            v106 = "invalid";
          *(_DWORD *)buf = 136446722;
          v378 = "__nw_protocol_replace_input_handler";
          v379 = 2082;
          v380 = (char *)v106;
          v381 = 2048;
          v382 = (const char *)v21;
          v351 = (const char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v369 = 0;
          v107 = (char *)v351;
          if (!__nwlog_fault(v351, &type, &v369))
          {
LABEL_338:
            if (v107)
              free(v107);
            v50 = 0;
            if ((v46 & 1) == 0)
            {
LABEL_87:
              if ((v374 & 1) != 0)
              {
                nw::release_if_needed<nw_protocol *>((uint64_t *)v373);
                if ((v376 & 1) == 0)
                {
LABEL_89:
                  if ((v50 & 1) == 0)
                    goto LABEL_674;
LABEL_93:
                  v51 = *(_QWORD *)(v359 + 32);
                  v52 = v51 == v10 || v51 == 0;
                  v11 = 1;
                  if (!v52 || v51 == protocol_for_definition)
                    goto LABEL_102;
                  if (v51)
                  {
                    if (*(_UNKNOWN **)(v51 + 40) == &nw_protocol_ref_counted_handle)
                    {
                      v82 = *(_QWORD *)(v51 + 88);
                      if (v82)
                      {
                        v83 = v82 - 1;
                        *(_QWORD *)(v51 + 88) = v83;
                        if (!v83)
                        {
                          v84 = *(void (***)(_QWORD))(v51 + 64);
                          if (v84)
                          {
                            *(_QWORD *)(v51 + 64) = 0;
                            v84[2](v84);
                            _Block_release(v84);
                          }
                          if ((*(_BYTE *)(v51 + 72) & 1) != 0)
                          {
                            v85 = *(const void **)(v51 + 64);
                            if (v85)
                              _Block_release(v85);
                          }
                          free((void *)v51);
                        }
                      }
                    }
                  }
                  *(_QWORD *)(v359 + 32) = protocol_for_definition;
                  if (*(_UNKNOWN **)(protocol_for_definition + 40) == &nw_protocol_ref_counted_handle
                    && (v65 = *(_QWORD *)(protocol_for_definition + 88)) != 0)
                  {
                    *(_QWORD *)(protocol_for_definition + 88) = v65 + 1;
                    v10 = protocol_for_definition;
                  }
                  else
                  {
LABEL_102:
                    v10 = protocol_for_definition;
                  }
                  goto LABEL_219;
                }
              }
              else if ((v376 & 1) == 0)
              {
                goto LABEL_89;
              }
              nw::release_if_needed<nw_protocol *>((uint64_t *)v375);
              if ((v50 & 1) == 0)
                goto LABEL_674;
              goto LABEL_93;
            }
LABEL_86:
            nw::release_if_needed<nw_protocol *>((uint64_t *)v370);
            goto LABEL_87;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v108 = objc_claimAutoreleasedReturnValue();
            v343 = type;
            if (os_log_type_enabled(v108, type))
            {
              v109 = *(const char **)(v21 + 16);
              if (!v109)
                v109 = "invalid";
              *(_DWORD *)buf = 136446722;
              v378 = "__nw_protocol_replace_input_handler";
              v379 = 2082;
              v380 = (char *)v109;
              v381 = 2048;
              v382 = (const char *)v21;
              _os_log_impl(&dword_182FBE000, v108, v343, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback", buf, 0x20u);
            }
          }
          else
          {
            if (v369)
            {
              v119 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v345 = objc_claimAutoreleasedReturnValue();
              v341 = type;
              v120 = os_log_type_enabled(v345, type);
              if (v119)
              {
                if (v120)
                {
                  v121 = *(const char **)(v21 + 16);
                  if (!v121)
                    v121 = "invalid";
                  *(_DWORD *)buf = 136446978;
                  v378 = "__nw_protocol_replace_input_handler";
                  v379 = 2082;
                  v380 = (char *)v121;
                  v381 = 2048;
                  v382 = (const char *)v21;
                  v383 = 2082;
                  v384 = v119;
                  _os_log_impl(&dword_182FBE000, v345, v341, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                }

                free(v119);
              }
              else
              {
                if (v120)
                {
                  v150 = *(const char **)(v21 + 16);
                  if (!v150)
                    v150 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  v378 = "__nw_protocol_replace_input_handler";
                  v379 = 2082;
                  v380 = (char *)v150;
                  v381 = 2048;
                  v382 = (const char *)v21;
                  _os_log_impl(&dword_182FBE000, v345, v341, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace", buf, 0x20u);
                }

              }
              goto LABEL_337;
            }
            __nwlog_obj();
            v108 = objc_claimAutoreleasedReturnValue();
            v347 = type;
            if (os_log_type_enabled(v108, type))
            {
              v147 = *(const char **)(v21 + 16);
              if (!v147)
                v147 = "invalid";
              *(_DWORD *)buf = 136446722;
              v378 = "__nw_protocol_replace_input_handler";
              v379 = 2082;
              v380 = (char *)v147;
              v381 = 2048;
              v382 = (const char *)v21;
              _os_log_impl(&dword_182FBE000, v108, v347, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded", buf, 0x20u);
            }
          }

LABEL_337:
          v107 = (char *)v351;
          goto LABEL_338;
        }
        if (!v21)
        {
          if (*(_UNKNOWN **)(v10 + 40) == &nw_protocol_ref_counted_handle)
          {
            v86 = *(_QWORD *)(v10 + 88);
            if (v86)
              *(_QWORD *)(v10 + 88) = v86 + 1;
            *(_QWORD *)v375 = v10;
            v64 = v376 | 1;
          }
          else
          {
            *(_QWORD *)v375 = v10;
            v64 = v376 & 0xFE;
          }
          v376 = v64;
          if (v359)
          {
            if (*(_UNKNOWN **)(v359 + 40) == &nw_protocol_ref_counted_handle)
            {
              v88 = *(_QWORD *)(v359 + 88);
              if (v88)
                *(_QWORD *)(v359 + 88) = v88 + 1;
              *(_QWORD *)v373 = v359;
              v87 = v374 | 1;
            }
            else
            {
              *(_QWORD *)v373 = v359;
              v87 = v374 & 0xFE;
            }
            v374 = v87;
            v89 = *(_QWORD *)(v10 + 24);
            if (v89)
            {
              v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 8);
              if (v90)
              {
                v91 = v90(v10, v359, 1);
                if ((v374 & 1) != 0)
                  goto LABEL_202;
                goto LABEL_203;
              }
            }
            __nwlog_obj();
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            v134 = *(const char **)(v10 + 16);
            if (!v134)
              v134 = "invalid";
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_remove_input_handler";
            v379 = 2082;
            v380 = (char *)v134;
            v381 = 2048;
            v382 = (const char *)v10;
            v135 = (char *)_os_log_send_and_compose_impl();

            v370[0] = OS_LOG_TYPE_ERROR;
            type = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v135, v370, &type))
            {
              if (v370[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v136 = objc_claimAutoreleasedReturnValue();
                v137 = v370[0];
                if (os_log_type_enabled(v136, v370[0]))
                {
                  v138 = *(const char **)(v10 + 16);
                  if (!v138)
                    v138 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  v378 = "__nw_protocol_remove_input_handler";
                  v379 = 2082;
                  v380 = (char *)v138;
                  v381 = 2048;
                  v382 = (const char *)v10;
                  _os_log_impl(&dword_182FBE000, v136, v137, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
                }
                goto LABEL_300;
              }
              if (type)
              {
                v155 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v156 = objc_claimAutoreleasedReturnValue();
                v355 = v370[0];
                v157 = os_log_type_enabled(v156, v370[0]);
                if (v155)
                {
                  if (v157)
                  {
                    v158 = *(const char **)(v10 + 16);
                    if (!v158)
                      v158 = "invalid";
                    *(_DWORD *)buf = 136446978;
                    v378 = "__nw_protocol_remove_input_handler";
                    v379 = 2082;
                    v380 = (char *)v158;
                    v381 = 2048;
                    v382 = (const char *)v10;
                    v383 = 2082;
                    v384 = v155;
                    _os_log_impl(&dword_182FBE000, v156, v355, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                  }

                  free(v155);
                }
                else
                {
                  if (v157)
                  {
                    v170 = *(const char **)(v10 + 16);
                    if (!v170)
                      v170 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v378 = "__nw_protocol_remove_input_handler";
                    v379 = 2082;
                    v380 = (char *)v170;
                    v381 = 2048;
                    v382 = (const char *)v10;
                    _os_log_impl(&dword_182FBE000, v156, v355, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
                  }

                }
              }
              else
              {
                __nwlog_obj();
                v136 = objc_claimAutoreleasedReturnValue();
                v167 = v370[0];
                if (os_log_type_enabled(v136, v370[0]))
                {
                  v168 = *(const char **)(v10 + 16);
                  if (!v168)
                    v168 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  v378 = "__nw_protocol_remove_input_handler";
                  v379 = 2082;
                  v380 = (char *)v168;
                  v381 = 2048;
                  v382 = (const char *)v10;
                  _os_log_impl(&dword_182FBE000, v136, v167, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                }
LABEL_300:

              }
            }
            if (v135)
              free(v135);
            v91 = 0;
            if ((v87 & 1) != 0)
LABEL_202:
              nw::release_if_needed<nw_protocol *>((uint64_t *)v373);
LABEL_203:
            if ((v376 & 1) != 0)
LABEL_204:
              nw::release_if_needed<nw_protocol *>((uint64_t *)v375);
LABEL_205:
            if ((v91 & 1) == 0)
            {
              if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v214 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
                {
                  loga = v214;
                  v286 = nw_endpoint_handler_get_id_string(v362);
                  v287 = nw_endpoint_handler_dry_run_string(v362);
                  v288 = nw_endpoint_handler_copy_endpoint(v362);
                  v289 = nw_endpoint_get_logging_description(v288);
                  v290 = nw_endpoint_handler_state_string(v362);
                  v291 = nw_endpoint_handler_mode_string(v362);
                  v292 = nw_endpoint_handler_copy_current_path(v362);
                  *(_DWORD *)buf = 136448002;
                  v378 = "nw_endpoint_handler_modify_protocol_stack";
                  v379 = 2082;
                  v380 = (char *)v286;
                  v381 = 2082;
                  v382 = v287;
                  v383 = 2082;
                  v384 = (void *)v289;
                  v385 = 2082;
                  v386 = v290;
                  v387 = 2082;
                  v388 = v291;
                  v389 = 2114;
                  v390 = v292;
                  v391 = 2082;
                  v392 = v12;
                  _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to remove protocol %{public}s", buf, 0x52u);

                  goto LABEL_599;
                }
                goto LABEL_600;
              }
              goto LABEL_601;
            }
            goto LABEL_206;
          }
          __nwlog_obj();
          v151 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v378 = "__nw_protocol_remove_input_handler";
          v152 = (char *)_os_log_send_and_compose_impl();

          v373[0] = OS_LOG_TYPE_ERROR;
          v370[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v152, v373, v370))
          {
            if (v373[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v153 = objc_claimAutoreleasedReturnValue();
              v154 = v373[0];
              if (os_log_type_enabled(v153, v373[0]))
              {
                *(_DWORD *)buf = 136446210;
                v378 = "__nw_protocol_remove_input_handler";
                _os_log_impl(&dword_182FBE000, v153, v154, "%{public}s called with null input_protocol", buf, 0xCu);
              }
              goto LABEL_417;
            }
            if (v370[0])
            {
              v164 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v153 = objc_claimAutoreleasedReturnValue();
              v350 = v373[0];
              v165 = os_log_type_enabled(v153, v373[0]);
              if (v164)
              {
                if (v165)
                {
                  *(_DWORD *)buf = 136446466;
                  v378 = "__nw_protocol_remove_input_handler";
                  v379 = 2082;
                  v380 = v164;
                  _os_log_impl(&dword_182FBE000, v153, v350, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v164);
                goto LABEL_418;
              }
              if (v165)
              {
                *(_DWORD *)buf = 136446210;
                v378 = "__nw_protocol_remove_input_handler";
                _os_log_impl(&dword_182FBE000, v153, v350, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v153 = objc_claimAutoreleasedReturnValue();
              v171 = v373[0];
              if (os_log_type_enabled(v153, v373[0]))
              {
                *(_DWORD *)buf = 136446210;
                v378 = "__nw_protocol_remove_input_handler";
                _os_log_impl(&dword_182FBE000, v153, v171, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }
LABEL_417:

          }
LABEL_418:
          if (v152)
            free(v152);
          v91 = 0;
          if ((v64 & 1) != 0)
            goto LABEL_204;
          goto LABEL_205;
        }
        if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
        {
          v74 = *(_QWORD *)(v21 + 88);
          if (v74)
            *(_QWORD *)(v21 + 88) = v74 + 1;
          *(_QWORD *)v375 = v21;
          v32 = v376 | 1;
        }
        else
        {
          *(_QWORD *)v375 = *(_QWORD *)(v10 + 32);
          v32 = v376 & 0xFE;
        }
        v376 = v32;
        if (*(_UNKNOWN **)(v10 + 40) == &nw_protocol_ref_counted_handle)
        {
          v76 = *(_QWORD *)(v10 + 88);
          if (v76)
            *(_QWORD *)(v10 + 88) = v76 + 1;
          *(_QWORD *)v373 = v10;
          v75 = v374 | 1;
        }
        else
        {
          *(_QWORD *)v373 = v10;
          v75 = v374 & 0xFE;
        }
        v374 = v75;
        if (v359)
        {
          if (*(_UNKNOWN **)(v359 + 40) == &nw_protocol_ref_counted_handle)
          {
            v78 = *(_QWORD *)(v359 + 88);
            if (v78)
              *(_QWORD *)(v359 + 88) = v78 + 1;
            *(_QWORD *)v370 = v359;
            v77 = v371 | 1;
          }
          else
          {
            *(_QWORD *)v370 = v359;
            v77 = v371 & 0xFE;
          }
          v371 = v77;
          v79 = *(_QWORD *)(v21 + 24);
          if (v79)
          {
            v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 16);
            if (v80)
            {
              v81 = v80(v21, v10, v359);
              if ((v371 & 1) != 0)
                goto LABEL_174;
              goto LABEL_175;
            }
          }
          __nwlog_obj();
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          v126 = *(const char **)(v21 + 16);
          if (!v126)
            v126 = "invalid";
          *(_DWORD *)buf = 136446722;
          v378 = "__nw_protocol_replace_input_handler";
          v379 = 2082;
          v380 = (char *)v126;
          v381 = 2048;
          v382 = (const char *)v21;
          v127 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v369 = 0;
          if (__nwlog_fault(v127, &type, &v369))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v128 = objc_claimAutoreleasedReturnValue();
              v129 = type;
              if (os_log_type_enabled(v128, type))
              {
                v130 = *(const char **)(v21 + 16);
                if (!v130)
                  v130 = "invalid";
                *(_DWORD *)buf = 136446722;
                v378 = "__nw_protocol_replace_input_handler";
                v379 = 2082;
                v380 = (char *)v130;
                v381 = 2048;
                v382 = (const char *)v21;
                _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback", buf, 0x20u);
              }
              goto LABEL_286;
            }
            if (v369)
            {
              v143 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v144 = objc_claimAutoreleasedReturnValue();
              v354 = type;
              v145 = os_log_type_enabled(v144, type);
              if (v143)
              {
                if (v145)
                {
                  v146 = *(const char **)(v21 + 16);
                  if (!v146)
                    v146 = "invalid";
                  *(_DWORD *)buf = 136446978;
                  v378 = "__nw_protocol_replace_input_handler";
                  v379 = 2082;
                  v380 = (char *)v146;
                  v381 = 2048;
                  v382 = (const char *)v21;
                  v383 = 2082;
                  v384 = v143;
                  _os_log_impl(&dword_182FBE000, v144, v354, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                }

                free(v143);
              }
              else
              {
                if (v145)
                {
                  v166 = *(const char **)(v21 + 16);
                  if (!v166)
                    v166 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  v378 = "__nw_protocol_replace_input_handler";
                  v379 = 2082;
                  v380 = (char *)v166;
                  v381 = 2048;
                  v382 = (const char *)v21;
                  _os_log_impl(&dword_182FBE000, v144, v354, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace", buf, 0x20u);
                }

              }
            }
            else
            {
              __nwlog_obj();
              v128 = objc_claimAutoreleasedReturnValue();
              v162 = type;
              if (os_log_type_enabled(v128, type))
              {
                v163 = *(const char **)(v21 + 16);
                if (!v163)
                  v163 = "invalid";
                *(_DWORD *)buf = 136446722;
                v378 = "__nw_protocol_replace_input_handler";
                v379 = 2082;
                v380 = (char *)v163;
                v381 = 2048;
                v382 = (const char *)v21;
                _os_log_impl(&dword_182FBE000, v128, v162, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded", buf, 0x20u);
              }
LABEL_286:

            }
          }
          if (v127)
            free(v127);
          v81 = 0;
          if ((v77 & 1) != 0)
LABEL_174:
            nw::release_if_needed<nw_protocol *>((uint64_t *)v370);
LABEL_175:
          if ((v374 & 1) == 0)
            goto LABEL_177;
LABEL_176:
          nw::release_if_needed<nw_protocol *>((uint64_t *)v373);
          goto LABEL_177;
        }
        __nwlog_obj();
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v378 = "__nw_protocol_replace_input_handler";
        v140 = (char *)_os_log_send_and_compose_impl();

        v370[0] = OS_LOG_TYPE_ERROR;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v140, v370, &type))
          goto LABEL_408;
        if (v370[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v141 = objc_claimAutoreleasedReturnValue();
          v142 = v370[0];
          if (os_log_type_enabled(v141, v370[0]))
          {
            *(_DWORD *)buf = 136446210;
            v378 = "__nw_protocol_replace_input_handler";
            _os_log_impl(&dword_182FBE000, v141, v142, "%{public}s called with null new_input_protocol", buf, 0xCu);
          }
LABEL_407:

          goto LABEL_408;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v141 = objc_claimAutoreleasedReturnValue();
          v169 = v370[0];
          if (os_log_type_enabled(v141, v370[0]))
          {
            *(_DWORD *)buf = 136446210;
            v378 = "__nw_protocol_replace_input_handler";
            _os_log_impl(&dword_182FBE000, v141, v169, "%{public}s called with null new_input_protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_407;
        }
        v160 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v141 = objc_claimAutoreleasedReturnValue();
        v349 = v370[0];
        v161 = os_log_type_enabled(v141, v370[0]);
        if (!v160)
        {
          if (v161)
          {
            *(_DWORD *)buf = 136446210;
            v378 = "__nw_protocol_replace_input_handler";
            _os_log_impl(&dword_182FBE000, v141, v349, "%{public}s called with null new_input_protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_407;
        }
        if (v161)
        {
          *(_DWORD *)buf = 136446466;
          v378 = "__nw_protocol_replace_input_handler";
          v379 = 2082;
          v380 = v160;
          _os_log_impl(&dword_182FBE000, v141, v349, "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v160);
LABEL_408:
        if (v140)
          free(v140);
        v81 = 0;
        if ((v75 & 1) != 0)
          goto LABEL_176;
LABEL_177:
        if ((v376 & 1) != 0)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)v375);
          if ((v81 & 1) == 0)
          {
LABEL_557:
            if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v214 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
              {
                loga = v214;
                v275 = nw_endpoint_handler_get_id_string(v362);
                v276 = nw_endpoint_handler_dry_run_string(v362);
                v277 = nw_endpoint_handler_copy_endpoint(v362);
                v278 = nw_endpoint_get_logging_description(v277);
                v279 = nw_endpoint_handler_state_string(v362);
                v280 = nw_endpoint_handler_mode_string(v362);
                v281 = nw_endpoint_handler_copy_current_path(v362);
                v282 = v281;
                v283 = "invalid";
                if (v359 && *(_QWORD *)(v359 + 16))
                  v283 = *(const char **)(v359 + 16);
                *(_DWORD *)buf = 136448258;
                v378 = "nw_endpoint_handler_modify_protocol_stack";
                v379 = 2082;
                v380 = (char *)v275;
                v381 = 2082;
                v382 = v276;
                v383 = 2082;
                v384 = (void *)v278;
                v385 = 2082;
                v386 = v279;
                v387 = 2082;
                v388 = v280;
                v389 = 2114;
                v390 = v281;
                v391 = 2082;
                v392 = v12;
                v393 = 2082;
                v394 = (void *)v283;
                _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to replace protocol %{public}s with %{public}s", buf, 0x5Cu);

                goto LABEL_599;
              }
              goto LABEL_600;
            }
            goto LABEL_601;
          }
        }
        else if ((v81 & 1) == 0)
        {
          goto LABEL_557;
        }
LABEL_206:
        v92 = *(_QWORD *)(v359 + 32);
        v93 = v92 == v10 || v92 == 0;
        v11 = 1;
        if (!v93 || v92 == v21)
          goto LABEL_218;
        if (v92)
        {
          if (*(_UNKNOWN **)(v92 + 40) == &nw_protocol_ref_counted_handle)
          {
            v95 = *(_QWORD *)(v92 + 88);
            if (v95)
            {
              v96 = v95 - 1;
              *(_QWORD *)(v92 + 88) = v96;
              if (!v96)
              {
                v97 = *(void (***)(_QWORD))(v92 + 64);
                if (v97)
                {
                  *(_QWORD *)(v92 + 64) = 0;
                  v97[2](v97);
                  _Block_release(v97);
                }
                if ((*(_BYTE *)(v92 + 72) & 1) != 0)
                {
                  v98 = *(const void **)(v92 + 64);
                  if (v98)
                    _Block_release(v98);
                }
                free((void *)v92);
              }
            }
          }
        }
        *(_QWORD *)(v359 + 32) = v21;
        if (!v21)
        {
          v10 = 0;
          goto LABEL_219;
        }
        goto LABEL_215;
      case 2:
        if (!identifier)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v214 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            {
              loga = v214;
              v215 = nw_endpoint_handler_get_id_string(v362);
              v216 = nw_endpoint_handler_dry_run_string(v362);
              v217 = nw_endpoint_handler_copy_endpoint(v362);
              v218 = nw_endpoint_get_logging_description(v217);
              v219 = nw_endpoint_handler_state_string(v362);
              v220 = nw_endpoint_handler_mode_string(v362);
              v221 = nw_endpoint_handler_copy_current_path(v362);
              *(_DWORD *)buf = 136448002;
              v378 = "nw_endpoint_handler_modify_protocol_stack";
              v379 = 2082;
              v380 = (char *)v215;
              v381 = 2082;
              v382 = v216;
              v383 = 2082;
              v384 = (void *)v218;
              v385 = 2082;
              v386 = v219;
              v387 = 2082;
              v388 = v220;
              v389 = 2114;
              v390 = v221;
              v391 = 2082;
              v392 = v12;
              _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot insert NULL protocol before %{public}s", buf, 0x52u);

              goto LABEL_599;
            }
            goto LABEL_600;
          }
          goto LABEL_601;
        }
        v22 = nw_endpoint_handler_copy_endpoint(v362);
        v21 = nw_endpoint_handler_create_protocol_for_definition((uint64_t)identifier, v20, v22, v361);

        if (!v21)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) != 0)
            goto LABEL_601;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v214 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            goto LABEL_600;
          goto LABEL_541;
        }
        nw_parameters_add_protocol_stack_member(v361, 4, 0xFFFFFFFF, v14);
        nw_endpoint_handler_set_protocol_instance(v362, v14, v20, v21);
        if (!v359)
        {
          __nwlog_obj();
          v321 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v378 = "nw_protocol_utilities_add_input_handler";
          v322 = (char *)_os_log_send_and_compose_impl();

          v375[0] = OS_LOG_TYPE_ERROR;
          v373[0] = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v322, v375, v373))
            goto LABEL_663;
          if (v375[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v323 = objc_claimAutoreleasedReturnValue();
            v324 = v375[0];
            if (os_log_type_enabled(v323, v375[0]))
            {
              *(_DWORD *)buf = 136446210;
              v378 = "nw_protocol_utilities_add_input_handler";
              _os_log_impl(&dword_182FBE000, v323, v324, "%{public}s called with null input_protocol", buf, 0xCu);
            }
            goto LABEL_662;
          }
          if (v373[0])
          {
            v332 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v323 = objc_claimAutoreleasedReturnValue();
            v333 = v375[0];
            v334 = os_log_type_enabled(v323, v375[0]);
            if (v332)
            {
              if (v334)
              {
                *(_DWORD *)buf = 136446466;
                v378 = "nw_protocol_utilities_add_input_handler";
                v379 = 2082;
                v380 = v332;
                _os_log_impl(&dword_182FBE000, v323, v333, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v332);
LABEL_663:
              if (v322)
                free(v322);
              v359 = 0;
LABEL_591:
              v302 = v362;
              v303 = (*((_BYTE *)v302 + 268) & 0x20) == 0;

              if (!v303)
                goto LABEL_601;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v214 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
                goto LABEL_600;
              loga = v214;
              v304 = nw_endpoint_handler_get_id_string(v302);
              v305 = nw_endpoint_handler_dry_run_string(v302);
              v306 = nw_endpoint_handler_copy_endpoint(v302);
              v307 = nw_endpoint_get_logging_description(v306);
              v308 = nw_endpoint_handler_state_string(v302);
              v309 = nw_endpoint_handler_mode_string(v302);
              v310 = nw_endpoint_handler_copy_current_path(v302);
              v311 = v310;
              v312 = "invalid";
              if (v359 && *(_QWORD *)(v359 + 16))
                v312 = *(const char **)(v359 + 16);
              *(_DWORD *)buf = 136448258;
              v378 = "nw_endpoint_handler_modify_protocol_stack";
              v379 = 2082;
              v380 = (char *)v304;
              v381 = 2082;
              v382 = v305;
              v383 = 2082;
              v384 = (void *)v307;
              v385 = 2082;
              v386 = v308;
              v387 = 2082;
              v388 = v309;
              v389 = 2114;
              v390 = v310;
              v391 = 2082;
              v392 = identifier;
              v393 = 2082;
              v394 = (void *)v312;
              _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add protocol %{public}s below %{public}s", buf, 0x5Cu);

LABEL_599:
              v214 = loga;
              goto LABEL_600;
            }
            if (v334)
            {
              *(_DWORD *)buf = 136446210;
              v378 = "nw_protocol_utilities_add_input_handler";
              _os_log_impl(&dword_182FBE000, v323, v333, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v323 = objc_claimAutoreleasedReturnValue();
            v339 = v375[0];
            if (os_log_type_enabled(v323, v375[0]))
            {
              *(_DWORD *)buf = 136446210;
              v378 = "nw_protocol_utilities_add_input_handler";
              _os_log_impl(&dword_182FBE000, v323, v339, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
            }
          }
LABEL_662:

          goto LABEL_663;
        }
        if (v21 == v359)
        {
          __nwlog_obj();
          v240 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446466;
          v378 = "nw_protocol_utilities_add_input_handler";
          v379 = 2048;
          v380 = (char *)v359;
          v241 = (char *)_os_log_send_and_compose_impl();

          v375[0] = OS_LOG_TYPE_ERROR;
          v373[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v241, v375, v373))
          {
            if (v375[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v242 = objc_claimAutoreleasedReturnValue();
              v243 = v375[0];
              if (os_log_type_enabled(v242, v375[0]))
              {
                *(_DWORD *)buf = 136446466;
                v378 = "nw_protocol_utilities_add_input_handler";
                v379 = 2048;
                v380 = (char *)v359;
                _os_log_impl(&dword_182FBE000, v242, v243, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
              }
              goto LABEL_588;
            }
            if (v373[0])
            {
              v272 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v242 = objc_claimAutoreleasedReturnValue();
              v273 = v375[0];
              v274 = os_log_type_enabled(v242, v375[0]);
              if (v272)
              {
                if (v274)
                {
                  *(_DWORD *)buf = 136446722;
                  v378 = "nw_protocol_utilities_add_input_handler";
                  v379 = 2048;
                  v380 = (char *)v359;
                  v381 = 2082;
                  v382 = v272;
                  _os_log_impl(&dword_182FBE000, v242, v273, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
                }

                free(v272);
                goto LABEL_589;
              }
              if (v274)
              {
                *(_DWORD *)buf = 136446466;
                v378 = "nw_protocol_utilities_add_input_handler";
                v379 = 2048;
                v380 = (char *)v359;
                _os_log_impl(&dword_182FBE000, v242, v273, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
              }
            }
            else
            {
              __nwlog_obj();
              v242 = objc_claimAutoreleasedReturnValue();
              v285 = v375[0];
              if (os_log_type_enabled(v242, v375[0]))
              {
                *(_DWORD *)buf = 136446466;
                v378 = "nw_protocol_utilities_add_input_handler";
                v379 = 2048;
                v380 = (char *)v359;
                _os_log_impl(&dword_182FBE000, v242, v285, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
              }
            }
LABEL_588:

          }
LABEL_589:
          if (v241)
            free(v241);
          goto LABEL_591;
        }
        v23 = *(_QWORD **)(v21 + 24);
        if (!v23 || !*v23)
        {
          __nwlog_obj();
          v247 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v378 = "nw_protocol_utilities_add_input_handler";
            v379 = 2048;
            v380 = (char *)v21;
            _os_log_impl(&dword_182FBE000, v247, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
          }

          goto LABEL_591;
        }
        if ((nw_protocol_add_input_handler(v21, v359) & 1) == 0)
          goto LABEL_591;
        if (*(_UNKNOWN **)(v10 + 40) == &nw_protocol_ref_counted_handle)
        {
          v33 = *(_QWORD *)(v10 + 88);
          if (v33)
            *(_QWORD *)(v10 + 88) = v33 + 1;
          *(_QWORD *)v375 = v10;
          v24 = v376 | 1;
        }
        else
        {
          *(_QWORD *)v375 = v10;
          v24 = v376 & 0xFE;
        }
        v376 = v24;
        if (*(_UNKNOWN **)(v359 + 40) == &nw_protocol_ref_counted_handle)
        {
          v35 = *(_QWORD *)(v359 + 88);
          if (v35)
            *(_QWORD *)(v359 + 88) = v35 + 1;
          *(_QWORD *)v373 = v359;
          v34 = v374 | 1;
        }
        else
        {
          *(_QWORD *)v373 = v359;
          v34 = v374 & 0xFE;
        }
        v374 = v34;
        if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
        {
          v37 = *(_QWORD *)(v21 + 88);
          if (v37)
            *(_QWORD *)(v21 + 88) = v37 + 1;
          *(_QWORD *)v370 = v21;
          v36 = v371 | 1;
        }
        else
        {
          *(_QWORD *)v370 = v21;
          v36 = v371 & 0xFE;
        }
        v371 = v36;
        v38 = *(_QWORD *)(v10 + 24);
        if (v38)
        {
          v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
          if (v39)
          {
            v40 = v39(v10, v359, v21);
            if ((v371 & 1) == 0)
              goto LABEL_56;
LABEL_55:
            nw::release_if_needed<nw_protocol *>((uint64_t *)v370);
            goto LABEL_56;
          }
        }
        __nwlog_obj();
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        v100 = *(const char **)(v10 + 16);
        if (!v100)
          v100 = "invalid";
        *(_DWORD *)buf = 136446722;
        v378 = "__nw_protocol_replace_input_handler";
        v379 = 2082;
        v380 = (char *)v100;
        v381 = 2048;
        v382 = (const char *)v10;
        v101 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v369 = 0;
        if (!__nwlog_fault(v101, &type, &v369))
          goto LABEL_328;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v102 = objc_claimAutoreleasedReturnValue();
          v103 = type;
          if (os_log_type_enabled(v102, type))
          {
            v104 = *(const char **)(v10 + 16);
            if (!v104)
              v104 = "invalid";
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v104;
            v381 = 2048;
            v382 = (const char *)v10;
            _os_log_impl(&dword_182FBE000, v102, v103, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback", buf, 0x20u);
          }
LABEL_238:

          goto LABEL_328;
        }
        if (!v369)
        {
          __nwlog_obj();
          v102 = objc_claimAutoreleasedReturnValue();
          v131 = type;
          if (os_log_type_enabled(v102, type))
          {
            v132 = *(const char **)(v10 + 16);
            if (!v132)
              v132 = "invalid";
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v132;
            v381 = 2048;
            v382 = (const char *)v10;
            _os_log_impl(&dword_182FBE000, v102, v131, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded", buf, 0x20u);
          }
          goto LABEL_238;
        }
        v115 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v116 = objc_claimAutoreleasedReturnValue();
        v353 = type;
        v117 = os_log_type_enabled(v116, type);
        if (v115)
        {
          if (v117)
          {
            v118 = *(const char **)(v10 + 16);
            if (!v118)
              v118 = "invalid";
            *(_DWORD *)buf = 136446978;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v118;
            v381 = 2048;
            v382 = (const char *)v10;
            v383 = 2082;
            v384 = v115;
            _os_log_impl(&dword_182FBE000, v116, v353, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v115);
        }
        else
        {
          if (v117)
          {
            v149 = *(const char **)(v10 + 16);
            if (!v149)
              v149 = "invalid";
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v149;
            v381 = 2048;
            v382 = (const char *)v10;
            _os_log_impl(&dword_182FBE000, v116, v353, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace", buf, 0x20u);
          }

        }
LABEL_328:
        if (v101)
          free(v101);
        v40 = 0;
        if ((v36 & 1) != 0)
          goto LABEL_55;
LABEL_56:
        if ((v374 & 1) != 0)
          nw::release_if_needed<nw_protocol *>((uint64_t *)v373);
        if ((v376 & 1) != 0)
          nw::release_if_needed<nw_protocol *>((uint64_t *)v375);
        if ((v40 & 1) == 0)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v214 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            {
              loga = v214;
              v248 = nw_endpoint_handler_get_id_string(v362);
              v249 = nw_endpoint_handler_dry_run_string(v362);
              v356 = nw_endpoint_handler_copy_endpoint(v362);
              v250 = nw_endpoint_get_logging_description(v356);
              v251 = nw_endpoint_handler_state_string(v362);
              v252 = nw_endpoint_handler_mode_string(v362);
              v253 = nw_endpoint_handler_copy_current_path(v362);
              v254 = v253;
              v255 = *(const char **)(v359 + 16);
              if (!v255)
                v255 = "invalid";
              *(_DWORD *)buf = 136448258;
              v378 = "nw_endpoint_handler_modify_protocol_stack";
              v379 = 2082;
              v380 = (char *)v248;
              v381 = 2082;
              v382 = v249;
              v383 = 2082;
              v384 = (void *)v250;
              v385 = 2082;
              v386 = v251;
              v387 = 2082;
              v388 = v252;
              v389 = 2114;
              v390 = v253;
              v391 = 2082;
              v392 = (void *)v255;
              v393 = 2082;
              v394 = identifier;
              _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to replace protocol %{public}s with %{public}s", buf, 0x5Cu);

              goto LABEL_599;
            }
LABEL_600:

          }
LABEL_601:

          v196 = 0;
          goto LABEL_602;
        }
        v41 = *(_QWORD *)(v359 + 32);
        v42 = v41 == v10 || v41 == 0;
        v11 = 1;
        if (v42 && v41 != v21)
        {
          if (v41)
          {
            if (*(_UNKNOWN **)(v41 + 40) == &nw_protocol_ref_counted_handle)
            {
              v70 = *(_QWORD *)(v41 + 88);
              if (v70)
              {
                v71 = v70 - 1;
                *(_QWORD *)(v41 + 88) = v71;
                if (!v71)
                {
                  v72 = *(void (***)(_QWORD))(v41 + 64);
                  if (v72)
                  {
                    *(_QWORD *)(v41 + 64) = 0;
                    v72[2](v72);
                    _Block_release(v72);
                  }
                  if ((*(_BYTE *)(v41 + 72) & 1) != 0)
                  {
                    v73 = *(const void **)(v41 + 64);
                    if (v73)
                      _Block_release(v73);
                  }
                  free((void *)v41);
                }
              }
            }
          }
          *(_QWORD *)(v359 + 32) = v21;
LABEL_215:
          if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
          {
            v94 = *(_QWORD *)(v21 + 88);
            if (v94)
              *(_QWORD *)(v21 + 88) = v94 + 1;
          }
        }
LABEL_218:
        v10 = v21;
LABEL_219:

        if (v10)
          continue;
        if ((v11 & 1) != 0)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v185 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG))
            {
              v186 = nw_endpoint_handler_get_id_string(v362);
              v187 = nw_endpoint_handler_dry_run_string(v362);
              v188 = nw_endpoint_handler_copy_endpoint(v362);
              v189 = nw_endpoint_get_logging_description(v188);
              v190 = nw_endpoint_handler_state_string(v362);
              v191 = nw_endpoint_handler_mode_string(v362);
              v192 = nw_endpoint_handler_copy_current_path(v362);
              *(_DWORD *)buf = 136447746;
              v378 = "nw_endpoint_handler_modify_protocol_stack";
              v379 = 2082;
              v380 = (char *)v186;
              v381 = 2082;
              v382 = v187;
              v383 = 2082;
              v384 = (void *)v189;
              v385 = 2082;
              v386 = v190;
              v387 = 2082;
              v388 = v191;
              v389 = 2114;
              v390 = v192;
              _os_log_impl(&dword_182FBE000, v185, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Modified protocol stack", buf, 0x48u);

            }
          }
          v193 = v362;
          v357->state = 2;

          *((_DWORD *)v193 + 20) = 262147;
          nw_endpoint_handler_report(v193, 0, (_WORD *)v193 + 40, 0);
          if ((*((_BYTE *)v358 + 33) & 4) != 0)
          {
            v194 = nw_endpoint_handler_copy_association(v193, 0);
            v195 = v194;
            if (v194)
              nw_association_mark_flow_disconnected(v194, v193);
            *((_BYTE *)v358 + 33) &= ~4u;

          }
          v196 = nw_endpoint_flow_connect(v193);
          goto LABEL_602;
        }
LABEL_456:
        v197 = v362;
        v198 = (*((_BYTE *)v197 + 268) & 0x20) == 0;

        if (v198)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v199 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG))
          {
            v200 = v197;

            v201 = v200;
            v202 = (*((_BYTE *)v197 + 268) & 1) == 0;

            if (v202)
              v203 = "";
            else
              v203 = "dry-run ";
            v204 = nw_endpoint_handler_copy_endpoint(v201);
            v205 = nw_endpoint_get_logging_description(v204);
            v206 = v201;
            v207 = v206;
            v208 = v357->state;
            if (v208 > 5)
              v209 = "unknown-state";
            else
              v209 = off_1E149FC48[v208];

            v210 = v207;
            v211 = v210;
            v212 = v4[29];
            v213 = "path";
            switch(v212)
            {
              case 0u:
                break;
              case 1u:
                v213 = "resolver";
                break;
              case 2u:
                v213 = nw_endpoint_flow_mode_string(v210[31]);
                break;
              case 3u:
                v213 = "proxy";
                break;
              case 4u:
                v213 = "fallback";
                break;
              case 5u:
                v213 = "transform";
                break;
              default:
                v213 = "unknown-mode";
                break;
            }

            v244 = v211;
            os_unfair_lock_lock((os_unfair_lock_t)v244 + 28);
            v245 = v244[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v244 + 28);

            *(_DWORD *)buf = 136447746;
            v378 = "nw_endpoint_handler_modify_protocol_stack";
            v379 = 2082;
            v380 = v200 + 168;
            v381 = 2082;
            v382 = v203;
            v383 = 2082;
            v384 = (void *)v205;
            v385 = 2082;
            v386 = v209;
            v387 = 2082;
            v388 = v213;
            v389 = 2114;
            v390 = v245;
            _os_log_impl(&dword_182FBE000, v199, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No modifications made to protocol stack", buf, 0x48u);

          }
        }
        v196 = 1;
LABEL_602:

LABEL_603:
        return v196;
      case 3:
        if (!identifier)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v214 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            {
              loga = v214;
              v222 = nw_endpoint_handler_get_id_string(v362);
              v223 = nw_endpoint_handler_dry_run_string(v362);
              v224 = nw_endpoint_handler_copy_endpoint(v362);
              v225 = nw_endpoint_get_logging_description(v224);
              v226 = nw_endpoint_handler_state_string(v362);
              v227 = nw_endpoint_handler_mode_string(v362);
              v228 = nw_endpoint_handler_copy_current_path(v362);
              *(_DWORD *)buf = 136448002;
              v378 = "nw_endpoint_handler_modify_protocol_stack";
              v379 = 2082;
              v380 = (char *)v222;
              v381 = 2082;
              v382 = v223;
              v383 = 2082;
              v384 = (void *)v225;
              v385 = 2082;
              v386 = v226;
              v387 = 2082;
              v388 = v227;
              v389 = 2114;
              v390 = v228;
              v391 = 2082;
              v392 = v12;
              _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot insert NULL protocol after %{public}s", buf, 0x52u);

              goto LABEL_599;
            }
            goto LABEL_600;
          }
          goto LABEL_601;
        }
        v25 = nw_endpoint_handler_copy_endpoint(v362);
        v26 = nw_endpoint_handler_create_protocol_for_definition((uint64_t)identifier, v20, v25, v361);

        if (!v26)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) != 0)
            goto LABEL_601;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v214 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            goto LABEL_600;
          goto LABEL_541;
        }
        nw_parameters_add_protocol_stack_member(v361, 4, 0xFFFFFFFF, v14);
        nw_endpoint_handler_set_protocol_instance(v362, v14, v20, v26);
        if (v26 == v10)
        {
          __nwlog_obj();
          v236 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446466;
          v378 = "nw_protocol_utilities_add_input_handler";
          v379 = 2048;
          v380 = (char *)v10;
          v237 = (char *)_os_log_send_and_compose_impl();

          v375[0] = OS_LOG_TYPE_ERROR;
          v373[0] = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v237, v375, v373))
            goto LABEL_579;
          if (v375[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v238 = objc_claimAutoreleasedReturnValue();
            v239 = v375[0];
            if (os_log_type_enabled(v238, v375[0]))
            {
              *(_DWORD *)buf = 136446466;
              v378 = "nw_protocol_utilities_add_input_handler";
              v379 = 2048;
              v380 = (char *)v10;
              _os_log_impl(&dword_182FBE000, v238, v239, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
            }
            goto LABEL_578;
          }
          if (v373[0])
          {
            v269 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v238 = objc_claimAutoreleasedReturnValue();
            v270 = v375[0];
            v271 = os_log_type_enabled(v238, v375[0]);
            if (v269)
            {
              if (v271)
              {
                *(_DWORD *)buf = 136446722;
                v378 = "nw_protocol_utilities_add_input_handler";
                v379 = 2048;
                v380 = (char *)v10;
                v381 = 2082;
                v382 = v269;
                _os_log_impl(&dword_182FBE000, v238, v270, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v269);
LABEL_579:
              if (v237)
                free(v237);
LABEL_581:
              v293 = v362;
              v294 = (*((_BYTE *)v293 + 268) & 0x20) == 0;

              if (!v294)
                goto LABEL_601;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              loga = (id)gconnectionLogObj;
              if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
              {
                v295 = nw_endpoint_handler_get_id_string(v293);
                v296 = nw_endpoint_handler_dry_run_string(v293);
                v297 = v295;
                v363 = nw_endpoint_handler_copy_endpoint(v293);
                v298 = nw_endpoint_get_logging_description(v363);
                v299 = nw_endpoint_handler_state_string(v293);
                v300 = nw_endpoint_handler_mode_string(v293);
                v301 = nw_endpoint_handler_copy_current_path(v293);
                *(_DWORD *)buf = 136448258;
                v378 = "nw_endpoint_handler_modify_protocol_stack";
                v379 = 2082;
                v380 = (char *)v297;
                v381 = 2082;
                v382 = v296;
                v383 = 2082;
                v384 = (void *)v298;
                v385 = 2082;
                v386 = v299;
                v387 = 2082;
                v388 = v300;
                v389 = 2114;
                v390 = v301;
                v391 = 2082;
                v392 = identifier;
                v393 = 2082;
                v394 = v12;
                _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add protocol %{public}s above %{public}s", buf, 0x5Cu);

              }
              goto LABEL_599;
            }
            if (v271)
            {
              *(_DWORD *)buf = 136446466;
              v378 = "nw_protocol_utilities_add_input_handler";
              v379 = 2048;
              v380 = (char *)v10;
              _os_log_impl(&dword_182FBE000, v238, v270, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
            }
          }
          else
          {
            __nwlog_obj();
            v238 = objc_claimAutoreleasedReturnValue();
            v284 = v375[0];
            if (os_log_type_enabled(v238, v375[0]))
            {
              *(_DWORD *)buf = 136446466;
              v378 = "nw_protocol_utilities_add_input_handler";
              v379 = 2048;
              v380 = (char *)v10;
              _os_log_impl(&dword_182FBE000, v238, v284, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
            }
          }
LABEL_578:

          goto LABEL_579;
        }
        v27 = *(_QWORD **)(v26 + 24);
        if (!v27 || !*v27)
        {
          __nwlog_obj();
          v246 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v378 = "nw_protocol_utilities_add_input_handler";
            v379 = 2048;
            v380 = (char *)v26;
            _os_log_impl(&dword_182FBE000, v246, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
          }

          goto LABEL_581;
        }
        if ((nw_protocol_add_input_handler(v26, v10) & 1) == 0)
          goto LABEL_581;
        if (!v21)
          goto LABEL_126;
        if (*(_UNKNOWN **)(v21 + 40) == &nw_protocol_ref_counted_handle)
        {
          v53 = *(_QWORD *)(v21 + 88);
          if (v53)
            *(_QWORD *)(v21 + 88) = v53 + 1;
          *(_QWORD *)v375 = v21;
          v28 = v376 | 1;
        }
        else
        {
          *(_QWORD *)v375 = v21;
          v28 = v376 & 0xFE;
        }
        v376 = v28;
        if (*(_UNKNOWN **)(v10 + 40) == &nw_protocol_ref_counted_handle)
        {
          v55 = *(_QWORD *)(v10 + 88);
          if (v55)
            *(_QWORD *)(v10 + 88) = v55 + 1;
          *(_QWORD *)v373 = v10;
          v54 = v374 | 1;
        }
        else
        {
          *(_QWORD *)v373 = v10;
          v54 = v374 & 0xFE;
        }
        v374 = v54;
        if (*(_UNKNOWN **)(v26 + 40) == &nw_protocol_ref_counted_handle)
        {
          v57 = *(_QWORD *)(v26 + 88);
          if (v57)
            *(_QWORD *)(v26 + 88) = v57 + 1;
          *(_QWORD *)v370 = v26;
          v56 = v371 | 1;
        }
        else
        {
          *(_QWORD *)v370 = v26;
          v56 = v371 & 0xFE;
        }
        v371 = v56;
        v58 = *(_QWORD *)(v21 + 24);
        if (v58)
        {
          v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
          if (v59)
          {
            v60 = v59(v21, v10, v26);
            if ((v371 & 1) == 0)
              goto LABEL_120;
LABEL_119:
            nw::release_if_needed<nw_protocol *>((uint64_t *)v370);
            goto LABEL_120;
          }
        }
        __nwlog_obj();
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        v111 = *(const char **)(v21 + 16);
        if (!v111)
          v111 = "invalid";
        *(_DWORD *)buf = 136446722;
        v378 = "__nw_protocol_replace_input_handler";
        v379 = 2082;
        v380 = (char *)v111;
        v381 = 2048;
        v382 = (const char *)v21;
        v352 = (const char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v369 = 0;
        v112 = (char *)v352;
        if (!__nwlog_fault(v352, &type, &v369))
          goto LABEL_360;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v113 = objc_claimAutoreleasedReturnValue();
          v344 = type;
          if (os_log_type_enabled(v113, type))
          {
            v114 = *(const char **)(v21 + 16);
            if (!v114)
              v114 = "invalid";
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v114;
            v381 = 2048;
            v382 = (const char *)v21;
            _os_log_impl(&dword_182FBE000, v113, v344, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback", buf, 0x20u);
          }
LABEL_256:

          goto LABEL_359;
        }
        if (!v369)
        {
          __nwlog_obj();
          v113 = objc_claimAutoreleasedReturnValue();
          v348 = type;
          if (os_log_type_enabled(v113, type))
          {
            v148 = *(const char **)(v21 + 16);
            if (!v148)
              v148 = "invalid";
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v148;
            v381 = 2048;
            v382 = (const char *)v21;
            _os_log_impl(&dword_182FBE000, v113, v348, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded", buf, 0x20u);
          }
          goto LABEL_256;
        }
        v122 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v346 = objc_claimAutoreleasedReturnValue();
        v342 = type;
        v123 = os_log_type_enabled(v346, type);
        if (v122)
        {
          if (v123)
          {
            v124 = *(const char **)(v21 + 16);
            if (!v124)
              v124 = "invalid";
            *(_DWORD *)buf = 136446978;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v124;
            v381 = 2048;
            v382 = (const char *)v21;
            v383 = 2082;
            v384 = v122;
            _os_log_impl(&dword_182FBE000, v346, v342, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v122);
        }
        else
        {
          if (v123)
          {
            v159 = *(const char **)(v21 + 16);
            if (!v159)
              v159 = "invalid";
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v159;
            v381 = 2048;
            v382 = (const char *)v21;
            _os_log_impl(&dword_182FBE000, v346, v342, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace", buf, 0x20u);
          }

        }
LABEL_359:
        v112 = (char *)v352;
LABEL_360:
        if (v112)
          free(v112);
        v60 = 0;
        if ((v56 & 1) != 0)
          goto LABEL_119;
LABEL_120:
        if ((v374 & 1) != 0)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)v373);
          if ((v376 & 1) == 0)
          {
LABEL_122:
            if ((v60 & 1) == 0)
              goto LABEL_542;
            goto LABEL_126;
          }
        }
        else if ((v376 & 1) == 0)
        {
          goto LABEL_122;
        }
        nw::release_if_needed<nw_protocol *>((uint64_t *)v375);
        if ((v60 & 1) == 0)
        {
LABEL_542:
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) != 0)
            goto LABEL_601;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v214 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            goto LABEL_600;
          goto LABEL_546;
        }
LABEL_126:
        v61 = *(_QWORD *)(v10 + 32);
        v62 = v61 == v21 || v61 == 0;
        v11 = 1;
        if (v62 && v61 != v26)
        {
          if (v61)
          {
            if (*(_UNKNOWN **)(v61 + 40) == &nw_protocol_ref_counted_handle)
            {
              v66 = *(_QWORD *)(v61 + 88);
              if (v66)
              {
                v67 = v66 - 1;
                *(_QWORD *)(v61 + 88) = v67;
                if (!v67)
                {
                  v68 = *(void (***)(_QWORD))(v61 + 64);
                  if (v68)
                  {
                    *(_QWORD *)(v61 + 64) = 0;
                    v68[2](v68);
                    _Block_release(v68);
                  }
                  if ((*(_BYTE *)(v61 + 72) & 1) != 0)
                  {
                    v69 = *(const void **)(v61 + 64);
                    if (v69)
                      _Block_release(v69);
                  }
                  free((void *)v61);
                }
              }
            }
          }
          *(_QWORD *)(v10 + 32) = v26;
          if (*(_UNKNOWN **)(v26 + 40) == &nw_protocol_ref_counted_handle)
          {
            v63 = *(_QWORD *)(v26 + 88);
            if (v63)
              *(_QWORD *)(v26 + 88) = v63 + 1;
          }
        }
        goto LABEL_219;
      default:
        goto LABEL_219;
    }
  }
}

void sub_183AD223C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_append_and_start_application_protocol(void *a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  char v9;
  NSObject *v10;
  unsigned int *v11;
  unsigned int *v12;
  char v13;
  const char *v14;
  nw_endpoint_t v15;
  const char *v16;
  char *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  const char *v21;
  id v22;
  NSObject *v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  const char *v32;
  void **v33;
  void **v34;
  const char *v35;
  os_log_type_t v36;
  const char *v37;
  const char *v38;
  void **v39;
  id v40;
  id v41;
  NWConcrete_nw_endpoint_handler *v42;
  int state;
  uint64_t started;
  NWConcrete_nw_endpoint_mode_handler *v45;
  NWConcrete_nw_endpoint_mode_handler *v46;
  NWConcrete_nw_endpoint_handler *v47;
  NWConcrete_nw_endpoint_handler *v48;
  double v49;
  nw_protocol *output_handler;
  uint64_t v51;
  double v52;
  OS_nw_association *association;
  nw_protocol *v54;
  nw_protocol_identifier *identifier;
  _QWORD *v56;
  unsigned __int8 *v57;
  void *v58;
  id *v59;
  id v60;
  char *v61;
  BOOL v62;
  os_unfair_lock_s *v63;
  NSObject *v64;
  NWConcrete_nw_endpoint_handler *v65;
  _BOOL4 v66;
  NSObject *v67;
  char *v68;
  char *v69;
  _BOOL4 v70;
  const char *v71;
  nw_endpoint_t v72;
  const char *logging_description;
  char *v74;
  char *v75;
  uint64_t v76;
  const char *v77;
  void **v78;
  void **v79;
  unsigned int v80;
  const char *v81;
  char *v82;
  nw_endpoint_t v83;
  uint64_t protocol_for_definition;
  uint64_t v85;
  _QWORD *v86;
  char v87;
  NWConcrete_nw_endpoint_handler *v88;
  BOOL v89;
  NSObject *v90;
  const char *id_string;
  const char *v92;
  nw_endpoint_t v93;
  const char *v94;
  const char *v95;
  const char *v96;
  id v97;
  void *v98;
  char *v99;
  NSObject *v100;
  os_log_type_t v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  void (**v105)(_QWORD);
  const void *v106;
  char *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  nw_protocol_callbacks *callbacks;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  nw_protocol_callbacks *v115;
  uint64_t (*replace_input_handler)(nw_protocol *, uint64_t, uint64_t);
  char v117;
  char logging_disabled;
  NSObject *v119;
  const char *v120;
  const char *v121;
  const char *v122;
  const char *v123;
  id v124;
  NWConcrete_nw_endpoint_handler *v125;
  id v126;
  void *v127;
  NSObject *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  id v132;
  char v133;
  os_log_type_t v134;
  void **v135;
  id v136;
  NWConcrete_nw_endpoint_handler *v137;
  _BOOL4 v138;
  NSObject *v139;
  char *v140;
  char *v141;
  _BOOL4 v142;
  const char *v143;
  nw_endpoint_t v144;
  const char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  const char *v149;
  void **v150;
  void **v151;
  unsigned int v152;
  const char *v153;
  void **v154;
  id v155;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t, _QWORD);
  int v162;
  nw_protocol_callbacks *v163;
  int minimize_logging;
  char v165;
  NSObject *v166;
  const char *v167;
  const char *v168;
  nw_endpoint_t v169;
  const char *v170;
  NWConcrete_nw_endpoint_handler *v171;
  const char *v172;
  const char *v173;
  id v174;
  const char *v175;
  const char *v176;
  nw_endpoint_t v177;
  const char *v178;
  const char *v179;
  const char *v180;
  id v181;
  char *v182;
  NSObject *v183;
  os_log_type_t v184;
  const char *v185;
  const char *v186;
  nw_endpoint_t v187;
  const char *v188;
  NWConcrete_nw_endpoint_handler *v189;
  const char *v190;
  const char *v191;
  id v192;
  const char *v193;
  char *v194;
  NSObject *v195;
  os_log_type_t v196;
  const char *v197;
  const char *v198;
  NWConcrete_nw_endpoint_handler *v199;
  const char *v200;
  const char *v201;
  id v202;
  void *v203;
  char *v204;
  NSObject *v205;
  os_log_type_t v206;
  NSObject *v207;
  NSObject *v208;
  void *v209;
  NSObject *v210;
  os_log_type_t v211;
  char *v212;
  os_log_type_t v213;
  _BOOL4 v214;
  os_log_type_t v215;
  const char *v216;
  const char *v217;
  nw_endpoint_t v218;
  const char *v219;
  NWConcrete_nw_endpoint_handler *v220;
  const char *v221;
  const char *v222;
  id v223;
  os_log_type_t v224;
  const char *v225;
  const char *v226;
  nw_endpoint_t v227;
  const char *v228;
  NWConcrete_nw_endpoint_handler *v229;
  const char *v230;
  const char *v231;
  id v232;
  const char *v233;
  const char *v234;
  nw_endpoint_t v235;
  const char *v236;
  const char *v237;
  const char *v238;
  id v239;
  char *backtrace_string;
  os_log_type_t v241;
  _BOOL4 v242;
  os_log_type_t v243;
  const char *v244;
  const char *v245;
  nw_endpoint_t v246;
  const char *v247;
  const char *v248;
  const char *v249;
  id v250;
  os_log_type_t v251;
  const char *v252;
  const char *v253;
  nw_endpoint_t v254;
  const char *v255;
  NWConcrete_nw_endpoint_handler *v256;
  const char *v257;
  const char *v258;
  id v259;
  const char *v260;
  os_log_type_t v261;
  const char *v262;
  const char *v263;
  NWConcrete_nw_endpoint_handler *v264;
  const char *v265;
  const char *v266;
  id v267;
  os_log_type_t v268;
  const char *v269;
  const char *v270;
  nw_endpoint_t v271;
  const char *v272;
  NWConcrete_nw_endpoint_handler *v273;
  const char *v274;
  const char *v275;
  id v276;
  NSObject *v277;
  os_log_type_t v278;
  const char *v279;
  const char *v280;
  nw_endpoint_t v281;
  const char *v282;
  NWConcrete_nw_endpoint_handler *v283;
  const char *v284;
  const char *v285;
  id v286;
  os_log_type_t v287;
  void *v288;
  const char *name;
  NSObject *v290;
  os_log_type_t v291;
  const char *v292;
  void *v293;
  const char *v294;
  char *v295;
  NSObject *v296;
  os_log_type_t v297;
  const char *v298;
  char *v299;
  NSObject *v300;
  os_log_type_t v301;
  _BOOL4 v302;
  const char *v303;
  char *v304;
  NSObject *v305;
  os_log_type_t v306;
  _BOOL4 v307;
  const char *v308;
  os_log_type_t v309;
  const char *v310;
  const char *v311;
  os_log_type_t v312;
  const char *v313;
  const char *v314;
  const char *v315;
  const char *v316;
  nw_endpoint_t v317;
  const char *v318;
  NWConcrete_nw_endpoint_handler *v319;
  const char *v320;
  const char *v321;
  id v322;
  const char *v323;
  const char *v324;
  const char *v325;
  const char *v326;
  nw_endpoint_t v327;
  nw_endpoint_t v328;
  nw_endpoint_t loga;
  nw_endpoint_t logb;
  id logc;
  NSObject *logd;
  const char *loge;
  NSObject *logf;
  NSObject *logg;
  id logh;
  NSObject *logi;
  const char *logj;
  NSObject *logk;
  NSObject *logl;
  char *log;
  nw_protocol_stack_t v342;
  NSObject *parameters;
  nw_endpoint_t v344;
  NWConcrete_nw_endpoint_mode_handler *v345;
  NSObject *v346;
  nw_protocol_definition_t v347;
  void *v348;
  char v349;
  os_log_type_t v350[8];
  char v351;
  os_log_type_t v352;
  uint64_t v353;
  char v354;
  os_log_type_t type[8];
  char v356;
  uint8_t buf[4];
  const char *v358;
  __int16 v359;
  char *v360;
  __int16 v361;
  const char *v362;
  __int16 v363;
  void *v364;
  __int16 v365;
  const char *v366;
  __int16 v367;
  const char *v368;
  __int16 v369;
  id v370;
  __int16 v371;
  nw_protocol_definition_t v372;
  __int16 v373;
  char *v374;
  uint64_t v375;

  v375 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  v348 = v3;
  if (!v3)
  {
    v208 = v4;
    __nwlog_obj();
    v209 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v358 = "nw_endpoint_handler_append_and_start_application_protocol";
    v25 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v353) = 0;
    if (!__nwlog_fault(v25, type, &v353))
      goto LABEL_335;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v210 = objc_claimAutoreleasedReturnValue();
      v211 = type[0];
      if (os_log_type_enabled(v210, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        _os_log_impl(&dword_182FBE000, v210, v211, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if ((_BYTE)v353)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v210 = objc_claimAutoreleasedReturnValue();
      v241 = type[0];
      v242 = os_log_type_enabled(v210, type[0]);
      if (backtrace_string)
      {
        if (v242)
        {
          *(_DWORD *)buf = 136446466;
          v358 = "nw_endpoint_handler_append_and_start_application_protocol";
          v359 = 2082;
          v360 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v210, v241, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_335:
        v23 = v208;
        if (!v25)
          goto LABEL_87;
        goto LABEL_86;
      }
      if (v242)
      {
        *(_DWORD *)buf = 136446210;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        _os_log_impl(&dword_182FBE000, v210, v241, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v210 = objc_claimAutoreleasedReturnValue();
      v287 = type[0];
      if (os_log_type_enabled(v210, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        _os_log_impl(&dword_182FBE000, v210, v287, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_335;
  }
  v6 = (unsigned int *)v3;
  v7 = v6[29];

  if ((_DWORD)v7 == 2)
  {
    v347 = nw_protocol_options_copy_definition(v5);
    v346 = v5;
    if (nw_endpoint_handler_get_minimize_logging(v6))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v6) & 1) != 0)
      {
LABEL_45:
        v42 = v6;
        state = v42->state;

        if ((state & 0xFFFFFFFE) == 4)
        {
          started = 0;
LABEL_209:

          v23 = v346;
          goto LABEL_210;
        }
        v45 = nw_endpoint_handler_copy_flow(v42);
        v46 = v45;
        v345 = v45;
        if ((*((_BYTE *)v45 + 32) & 4) != 0)
        {
          v63 = (os_unfair_lock_s *)((char *)v45 + 880);
          os_unfair_lock_lock((os_unfair_lock_t)v45 + 220);
          v64 = *((id *)v46 + 117);
          os_unfair_lock_unlock(v63);
          if (v64)
            started = nw_endpoint_handler_append_and_start_application_protocol(v64, v346);
          else
            started = 0;
          goto LABEL_208;
        }
        v47 = v42;
        parameters = v47->parameters;
        v48 = v47;

        v342 = nw_parameters_copy_default_protocol_stack(parameters);
        nw_protocol_stack_append_application_protocol(v342, v346);
        output_handler = (nw_protocol *)*((_QWORD *)v345 + 51);
        if (!output_handler)
        {
          v65 = v47;
          v66 = (*((_BYTE *)v65 + 268) & 0x20) == 0;

          if (v66)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v67 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              v68 = v65;

              v69 = v68;
              v70 = (*((_BYTE *)v65 + 268) & 1) == 0;

              if (v70)
                v71 = "";
              else
                v71 = "dry-run ";
              v72 = nw_endpoint_handler_copy_endpoint(v69);
              logging_description = nw_endpoint_get_logging_description(v72);
              v74 = v69;
              v75 = v74;
              v76 = v42->state;
              if (v76 > 5)
                v77 = "unknown-state";
              else
                v77 = off_1E149FC48[v76];

              v78 = v75;
              v79 = v78;
              v80 = v6[29];
              v81 = "path";
              switch(v80)
              {
                case 0u:
                  break;
                case 1u:
                  v81 = "resolver";
                  break;
                case 2u:
                  v81 = nw_endpoint_flow_mode_string(v78[31]);
                  break;
                case 3u:
                  v81 = "proxy";
                  break;
                case 4u:
                  v81 = "fallback";
                  break;
                case 5u:
                  v81 = "transform";
                  break;
                default:
                  v81 = "unknown-mode";
                  break;
              }

              v135 = v79;
              os_unfair_lock_lock((os_unfair_lock_t)v135 + 28);
              v136 = v135[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v135 + 28);

              *(_DWORD *)buf = 136447746;
              v358 = "nw_endpoint_handler_append_and_start_application_protocol";
              v359 = 2082;
              v360 = v68 + 168;
              v361 = 2082;
              v362 = v71;
              v363 = 2082;
              v364 = (void *)logging_description;
              v365 = 2082;
              v366 = v77;
              v367 = 2082;
              v368 = v81;
              v369 = 2114;
              v370 = v136;
              _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No previous output handler on flow", buf, 0x48u);

            }
          }
          goto LABEL_206;
        }
        v51 = (uint64_t)v345 + 376;
        if (output_handler != *((nw_protocol **)v345 + 90))
        {
          gotLoadHelper_x19__ne_filter_protocol_identifier(v49);
          association = v47[7].association;
          while (1)
          {
            v54 = output_handler;
            identifier = output_handler->identifier;
            v56 = association ? (_QWORD *)ne_filter_protocol_identifier_delayInitStub(v52) : 0;
            if (nw_protocols_are_equal(identifier, v56))
              break;
            v57 = nw_parameters_copy_protocol_options_legacy(parameters, output_handler);
            v58 = v57;
            if (v57)
            {
              v59 = v57;
              v60 = v59[1];

              v61 = (char *)v60;
              if (v61)
              {
                v61 = v61;
                v62 = v61[184] < 0;

                if (v62)
                {
                  v58 = v59;
LABEL_91:

                  break;
                }
              }
            }
            else
            {
              v61 = 0;
            }
            output_handler = v54->output_handler;
            if (!output_handler)
              goto LABEL_91;

            v51 = (uint64_t)v54;
            if (output_handler == *((nw_protocol **)v345 + 90))
              goto LABEL_93;
          }
          output_handler = v54;
        }
LABEL_93:
        v82 = nw_protocol_definition_get_identifier(v347);
        v83 = nw_endpoint_handler_copy_endpoint(v48);
        protocol_for_definition = nw_endpoint_handler_create_protocol_for_definition((uint64_t)v82, v347, v83, parameters);

        if (!protocol_for_definition)
        {
          v88 = v48;
          v89 = (*((_BYTE *)v88 + 268) & 0x20) == 0;

          if (v89)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v90 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
            {
              id_string = nw_endpoint_handler_get_id_string(v88);
              v92 = nw_endpoint_handler_dry_run_string(v88);
              v93 = nw_endpoint_handler_copy_endpoint(v88);
              v94 = nw_endpoint_get_logging_description(v93);
              v95 = nw_endpoint_handler_state_string(v88);
              v96 = nw_endpoint_handler_mode_string(v88);
              v97 = nw_endpoint_handler_copy_current_path(v88);
              *(_DWORD *)buf = 136448002;
              v358 = "nw_endpoint_handler_append_and_start_application_protocol";
              v359 = 2082;
              v360 = (char *)id_string;
              v361 = 2082;
              v362 = v92;
              v363 = 2082;
              v364 = (void *)v94;
              v365 = 2082;
              v366 = v95;
              v367 = 2082;
              v368 = v96;
              v369 = 2114;
              v370 = v97;
              v371 = 2114;
              v372 = v347;
              _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to create protocol handler for %{public}@", buf, 0x52u);

            }
          }
          goto LABEL_206;
        }
        nw_endpoint_handler_set_protocol_instance(v48, v346, v347, protocol_for_definition);
        v85 = *(_QWORD *)(v51 + 32);
        if (v85)
        {
          if (*(_UNKNOWN **)(v85 + 40) == &nw_protocol_ref_counted_handle)
          {
            v103 = *(_QWORD *)(v85 + 88);
            if (v103)
            {
              v104 = v103 - 1;
              *(_QWORD *)(v85 + 88) = v104;
              if (!v104)
              {
                v105 = *(void (***)(_QWORD))(v85 + 64);
                if (v105)
                {
                  *(_QWORD *)(v85 + 64) = 0;
                  v105[2](v105);
                  _Block_release(v105);
                }
                if ((*(_BYTE *)(v85 + 72) & 1) != 0)
                {
                  v106 = *(const void **)(v85 + 64);
                  if (v106)
                    _Block_release(v106);
                }
                free((void *)v85);
              }
            }
          }
          *(_QWORD *)(v51 + 32) = 0;
        }
        if (protocol_for_definition != v51)
        {
          v86 = *(_QWORD **)(protocol_for_definition + 24);
          if (v86 && *v86)
          {
            if ((nw_protocol_add_input_handler(protocol_for_definition, v51) & 1) != 0)
            {
              if (output_handler->handle == &nw_protocol_ref_counted_handle)
              {
                callbacks = output_handler[1].callbacks;
                if (callbacks)
                  output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
                *(_QWORD *)type = output_handler;
                v87 = v356 | 1;
              }
              else
              {
                *(_QWORD *)type = output_handler;
                v87 = v356 & 0xFE;
              }
              v356 = v87;
              if (*(_UNKNOWN **)(v51 + 40) == &nw_protocol_ref_counted_handle)
              {
                v112 = *(_QWORD *)(v51 + 88);
                if (v112)
                  *(_QWORD *)(v51 + 88) = v112 + 1;
                v353 = v51;
                v111 = v354 | 1;
              }
              else
              {
                v353 = v51;
                v111 = v354 & 0xFE;
              }
              v354 = v111;
              if (*(_UNKNOWN **)(protocol_for_definition + 40) == &nw_protocol_ref_counted_handle)
              {
                v114 = *(_QWORD *)(protocol_for_definition + 88);
                if (v114)
                  *(_QWORD *)(protocol_for_definition + 88) = v114 + 1;
                *(_QWORD *)v350 = protocol_for_definition;
                v113 = v351 | 1;
              }
              else
              {
                *(_QWORD *)v350 = protocol_for_definition;
                v113 = v351 & 0xFE;
              }
              v351 = v113;
              v115 = output_handler->callbacks;
              if (v115)
              {
                replace_input_handler = (uint64_t (*)(nw_protocol *, uint64_t, uint64_t))v115->replace_input_handler;
                if (replace_input_handler)
                {
                  v117 = replace_input_handler(output_handler, v51, protocol_for_definition);
                  if ((v351 & 1) == 0)
                    goto LABEL_147;
                  goto LABEL_146;
                }
              }
              __nwlog_obj();
              v288 = (void *)objc_claimAutoreleasedReturnValue();
              name = output_handler->identifier->name;
              *(_DWORD *)buf = 136446722;
              v358 = "__nw_protocol_replace_input_handler";
              if (!name)
                name = "invalid";
              v359 = 2082;
              v360 = (char *)name;
              v361 = 2048;
              v362 = (const char *)output_handler;
              log = (char *)_os_log_send_and_compose_impl();

              v352 = OS_LOG_TYPE_ERROR;
              v349 = 0;
              if (__nwlog_fault(log, &v352, &v349))
              {
                if (v352 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v290 = objc_claimAutoreleasedReturnValue();
                  v291 = v352;
                  if (os_log_type_enabled(v290, v352))
                  {
                    v292 = output_handler->identifier->name;
                    if (!v292)
                      v292 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v358 = "__nw_protocol_replace_input_handler";
                    v359 = 2082;
                    v360 = (char *)v292;
                    v361 = 2048;
                    v362 = (const char *)output_handler;
                    _os_log_impl(&dword_182FBE000, v290, v291, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback", buf, 0x20u);
                  }
LABEL_345:

                  goto LABEL_379;
                }
                if (!v349)
                {
                  __nwlog_obj();
                  v290 = objc_claimAutoreleasedReturnValue();
                  v309 = v352;
                  if (os_log_type_enabled(v290, v352))
                  {
                    v310 = output_handler->identifier->name;
                    if (!v310)
                      v310 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v358 = "__nw_protocol_replace_input_handler";
                    v359 = 2082;
                    v360 = (char *)v310;
                    v361 = 2048;
                    v362 = (const char *)output_handler;
                    _os_log_impl(&dword_182FBE000, v290, v309, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                  }
                  goto LABEL_345;
                }
                v299 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v300 = objc_claimAutoreleasedReturnValue();
                v301 = v352;
                v302 = os_log_type_enabled(v300, v352);
                if (v299)
                {
                  if (v302)
                  {
                    v303 = output_handler->identifier->name;
                    if (!v303)
                      v303 = "invalid";
                    *(_DWORD *)buf = 136446978;
                    v358 = "__nw_protocol_replace_input_handler";
                    v359 = 2082;
                    v360 = (char *)v303;
                    v361 = 2048;
                    v362 = (const char *)output_handler;
                    v363 = 2082;
                    v364 = v299;
                    _os_log_impl(&dword_182FBE000, v300, v301, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                  }

                  free(v299);
                }
                else
                {
                  if (v302)
                  {
                    v311 = output_handler->identifier->name;
                    if (!v311)
                      v311 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v358 = "__nw_protocol_replace_input_handler";
                    v359 = 2082;
                    v360 = (char *)v311;
                    v361 = 2048;
                    v362 = (const char *)output_handler;
                    _os_log_impl(&dword_182FBE000, v300, v301, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace", buf, 0x20u);
                  }

                }
              }
LABEL_379:
              if (log)
                free(log);
              v117 = 0;
              if ((v113 & 1) == 0)
              {
LABEL_147:
                if ((v354 & 1) != 0)
                {
                  nw::release_if_needed<nw_protocol *>(&v353);
                  if ((v356 & 1) == 0)
                  {
LABEL_150:
                    logging_disabled = nw_endpoint_handler_get_logging_disabled(v48);
                    if ((v117 & 1) != 0)
                    {
                      if ((logging_disabled & 1) == 0)
                      {
                        if (__nwlog_connection_log::onceToken != -1)
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                        v119 = (id)gconnectionLogObj;
                        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
                        {
                          v120 = nw_endpoint_handler_get_id_string(v48);
                          v325 = nw_endpoint_handler_dry_run_string(v48);
                          loga = nw_endpoint_handler_copy_endpoint(v48);
                          v121 = nw_endpoint_get_logging_description(loga);
                          v122 = nw_endpoint_handler_state_string(v48);
                          v123 = nw_endpoint_handler_mode_string(v48);
                          v124 = nw_endpoint_handler_copy_current_path(v48);
                          *(_DWORD *)buf = 136448002;
                          v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                          v359 = 2082;
                          v360 = (char *)v120;
                          v361 = 2082;
                          v362 = v325;
                          v363 = 2082;
                          v364 = (void *)v121;
                          v365 = 2082;
                          v366 = v122;
                          v367 = 2082;
                          v368 = v123;
                          v369 = 2114;
                          v370 = v124;
                          v371 = 2114;
                          v372 = v347;
                          _os_log_impl(&dword_182FBE000, v119, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached protocol %{public}@ to connected flow", buf, 0x52u);

                        }
                      }
                      v125 = v48;
                      v42->state = 2;

                      v125->event = (nw_endpoint_handler_event_s)262147;
                      nw_endpoint_handler_report(v125, 0, &v125->event.domain, 0);
                      if ((*((_BYTE *)v345 + 33) & 4) != 0)
                      {
                        v126 = nw_endpoint_handler_copy_association(v125, 0);
                        v127 = v126;
                        if (v126)
                          nw_association_mark_flow_disconnected(v126, v125);
                        *((_BYTE *)v345 + 33) &= ~4u;

                      }
                      started = nw_endpoint_flow_connect(v125);
                      goto LABEL_207;
                    }
                    if ((logging_disabled & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v128 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
                      {
                        v129 = nw_endpoint_handler_get_id_string(v48);
                        v324 = nw_endpoint_handler_dry_run_string(v48);
                        v326 = v129;
                        logb = nw_endpoint_handler_copy_endpoint(v48);
                        v323 = nw_endpoint_get_logging_description(logb);
                        v130 = nw_endpoint_handler_state_string(v48);
                        v131 = nw_endpoint_handler_mode_string(v48);
                        v132 = nw_endpoint_handler_copy_current_path(v48);
                        *(_DWORD *)buf = 136448002;
                        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                        v359 = 2082;
                        v360 = (char *)v326;
                        v361 = 2082;
                        v362 = v324;
                        v363 = 2082;
                        v364 = (void *)v323;
                        v365 = 2082;
                        v366 = v130;
                        v367 = 2082;
                        v368 = v131;
                        v369 = 2114;
                        v370 = v132;
                        v371 = 2114;
                        v372 = v347;
                        _os_log_impl(&dword_182FBE000, v128, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to replace flow protocol with protocol %{public}@", buf, 0x52u);

                      }
                    }
                    if (*(_UNKNOWN **)(protocol_for_definition + 40) == &nw_protocol_ref_counted_handle)
                    {
                      v157 = *(_QWORD *)(protocol_for_definition + 88);
                      if (v157)
                        *(_QWORD *)(protocol_for_definition + 88) = v157 + 1;
                      *(_QWORD *)type = protocol_for_definition;
                      v133 = v356 | 1;
                    }
                    else
                    {
                      *(_QWORD *)type = protocol_for_definition;
                      v133 = v356 & 0xFE;
                    }
                    v356 = v133;
                    if (*(_UNKNOWN **)(v51 + 40) == &nw_protocol_ref_counted_handle)
                    {
                      v159 = *(_QWORD *)(v51 + 88);
                      if (v159)
                        *(_QWORD *)(v51 + 88) = v159 + 1;
                      v353 = v51;
                      v158 = v354 | 1;
                    }
                    else
                    {
                      v353 = v51;
                      v158 = v354 & 0xFE;
                    }
                    v354 = v158;
                    v160 = *(_QWORD *)(protocol_for_definition + 24);
                    if (v160)
                    {
                      v161 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v160 + 8);
                      if (v161)
                      {
                        v162 = v161(protocol_for_definition, v51, 0);
                        if ((v354 & 1) == 0)
                          goto LABEL_223;
                        goto LABEL_222;
                      }
                    }
                    __nwlog_obj();
                    v293 = (void *)objc_claimAutoreleasedReturnValue();
                    v294 = *(const char **)(protocol_for_definition + 16);
                    *(_DWORD *)buf = 136446722;
                    v358 = "__nw_protocol_remove_input_handler";
                    if (!v294)
                      v294 = "invalid";
                    v359 = 2082;
                    v360 = (char *)v294;
                    v361 = 2048;
                    v362 = (const char *)protocol_for_definition;
                    v295 = (char *)_os_log_send_and_compose_impl();

                    v350[0] = OS_LOG_TYPE_ERROR;
                    v352 = OS_LOG_TYPE_DEFAULT;
                    if (__nwlog_fault(v295, v350, &v352))
                    {
                      if (v350[0] == OS_LOG_TYPE_FAULT)
                      {
                        __nwlog_obj();
                        v296 = objc_claimAutoreleasedReturnValue();
                        v297 = v350[0];
                        if (os_log_type_enabled(v296, v350[0]))
                        {
                          v298 = *(const char **)(protocol_for_definition + 16);
                          if (!v298)
                            v298 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          v358 = "__nw_protocol_remove_input_handler";
                          v359 = 2082;
                          v360 = (char *)v298;
                          v361 = 2048;
                          v362 = (const char *)protocol_for_definition;
                          _os_log_impl(&dword_182FBE000, v296, v297, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
                        }
LABEL_354:

                        goto LABEL_393;
                      }
                      if (v352 == OS_LOG_TYPE_DEFAULT)
                      {
                        __nwlog_obj();
                        v296 = objc_claimAutoreleasedReturnValue();
                        v312 = v350[0];
                        if (os_log_type_enabled(v296, v350[0]))
                        {
                          v313 = *(const char **)(protocol_for_definition + 16);
                          if (!v313)
                            v313 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          v358 = "__nw_protocol_remove_input_handler";
                          v359 = 2082;
                          v360 = (char *)v313;
                          v361 = 2048;
                          v362 = (const char *)protocol_for_definition;
                          _os_log_impl(&dword_182FBE000, v296, v312, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                        }
                        goto LABEL_354;
                      }
                      v304 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v305 = objc_claimAutoreleasedReturnValue();
                      v306 = v350[0];
                      v307 = os_log_type_enabled(v305, v350[0]);
                      if (v304)
                      {
                        if (v307)
                        {
                          v308 = *(const char **)(protocol_for_definition + 16);
                          if (!v308)
                            v308 = "invalid";
                          *(_DWORD *)buf = 136446978;
                          v358 = "__nw_protocol_remove_input_handler";
                          v359 = 2082;
                          v360 = (char *)v308;
                          v361 = 2048;
                          v362 = (const char *)protocol_for_definition;
                          v363 = 2082;
                          v364 = v304;
                          _os_log_impl(&dword_182FBE000, v305, v306, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                        }

                        free(v304);
                      }
                      else
                      {
                        if (v307)
                        {
                          v314 = *(const char **)(protocol_for_definition + 16);
                          if (!v314)
                            v314 = "invalid";
                          *(_DWORD *)buf = 136446722;
                          v358 = "__nw_protocol_remove_input_handler";
                          v359 = 2082;
                          v360 = (char *)v314;
                          v361 = 2048;
                          v362 = (const char *)protocol_for_definition;
                          _os_log_impl(&dword_182FBE000, v305, v306, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
                        }

                      }
                    }
LABEL_393:
                    if (v295)
                      free(v295);
                    v162 = 0;
                    if ((v158 & 1) == 0)
                    {
LABEL_223:
                      if ((v356 & 1) != 0)
                      {
                        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                        if (v162)
                        {
LABEL_225:
                          if (output_handler != (nw_protocol *)v51)
                          {
                            v163 = output_handler->callbacks;
                            if (v163 && v163->add_input_handler)
                            {
                              if (nw_protocol_add_input_handler((uint64_t)output_handler, v51))
                              {
                                minimize_logging = nw_endpoint_handler_get_minimize_logging(v48);
                                v165 = nw_endpoint_handler_get_logging_disabled(v48);
                                if (minimize_logging)
                                {
                                  if ((v165 & 1) != 0)
                                    goto LABEL_206;
                                  if (__nwlog_connection_log::onceToken != -1)
                                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                  v166 = (id)gconnectionLogObj;
                                  if (os_log_type_enabled(v166, OS_LOG_TYPE_DEBUG))
                                  {
                                    v315 = nw_endpoint_handler_get_id_string(v48);
                                    v316 = nw_endpoint_handler_dry_run_string(v48);
                                    v317 = nw_endpoint_handler_copy_endpoint(v48);
                                    v318 = nw_endpoint_get_logging_description(v317);
                                    v319 = v48;
                                    v320 = nw_endpoint_handler_state_string(v48);
                                    v321 = nw_endpoint_handler_mode_string(v319);
                                    v322 = nw_endpoint_handler_copy_current_path(v319);
                                    *(_DWORD *)buf = 136448002;
                                    v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                                    v359 = 2082;
                                    v360 = (char *)v315;
                                    v361 = 2082;
                                    v362 = v316;
                                    v363 = 2082;
                                    v364 = (void *)v318;
                                    v365 = 2082;
                                    v366 = v320;
                                    v367 = 2082;
                                    v368 = v321;
                                    v369 = 2114;
                                    v370 = v322;
                                    v371 = 2114;
                                    v372 = v347;
                                    _os_log_impl(&dword_182FBE000, v166, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Successfully repaired protocol stack after failed %{public}@ insertion", buf, 0x52u);

                                  }
                                }
                                else
                                {
                                  if ((v165 & 1) != 0)
                                  {
LABEL_206:
                                    started = 0;
LABEL_207:

                                    v64 = parameters;
LABEL_208:

                                    goto LABEL_209;
                                  }
                                  if (__nwlog_connection_log::onceToken != -1)
                                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                  v166 = (id)gconnectionLogObj;
                                  if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
                                  {
                                    v167 = nw_endpoint_handler_get_id_string(v48);
                                    v168 = nw_endpoint_handler_dry_run_string(v48);
                                    v169 = nw_endpoint_handler_copy_endpoint(v48);
                                    v170 = nw_endpoint_get_logging_description(v169);
                                    v171 = v48;
                                    v172 = nw_endpoint_handler_state_string(v48);
                                    v173 = nw_endpoint_handler_mode_string(v171);
                                    v174 = nw_endpoint_handler_copy_current_path(v171);
                                    *(_DWORD *)buf = 136448002;
                                    v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                                    v359 = 2082;
                                    v360 = (char *)v167;
                                    v361 = 2082;
                                    v362 = v168;
                                    v363 = 2082;
                                    v364 = (void *)v170;
                                    v365 = 2082;
                                    v366 = v172;
                                    v367 = 2082;
                                    v368 = v173;
                                    v369 = 2114;
                                    v370 = v174;
                                    v371 = 2114;
                                    v372 = v347;
                                    _os_log_impl(&dword_182FBE000, v166, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Successfully repaired protocol stack after failed %{public}@ insertion", buf, 0x52u);

                                  }
                                }

                                goto LABEL_206;
                              }
                            }
                            else
                            {
                              __nwlog_obj();
                              v207 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)buf = 136446466;
                                v358 = "nw_protocol_utilities_add_input_handler";
                                v359 = 2048;
                                v360 = (char *)output_handler;
                                _os_log_impl(&dword_182FBE000, v207, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
                              }

                            }
LABEL_300:
                            if ((nw_endpoint_handler_get_logging_disabled(v48) & 1) != 0)
                              goto LABEL_206;
                            if (__nwlog_connection_log::onceToken != -1)
                              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                            logh = (id)gconnectionLogObj;
                            v244 = nw_endpoint_handler_get_id_string(v48);
                            v245 = nw_endpoint_handler_dry_run_string(v48);
                            v246 = nw_endpoint_handler_copy_endpoint(v48);
                            v247 = nw_endpoint_get_logging_description(v246);
                            v248 = nw_endpoint_handler_state_string(v48);
                            v249 = nw_endpoint_handler_mode_string(v48);
                            v250 = nw_endpoint_handler_copy_current_path(v48);
                            *(_DWORD *)buf = 136447746;
                            v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                            v359 = 2082;
                            v360 = (char *)v244;
                            v361 = 2082;
                            v362 = v245;
                            v363 = 2082;
                            v364 = (void *)v247;
                            v365 = 2082;
                            v366 = v248;
                            v367 = 2082;
                            v368 = v249;
                            v369 = 2114;
                            v370 = v250;
                            v182 = (char *)_os_log_send_and_compose_impl();

                            type[0] = OS_LOG_TYPE_ERROR;
                            LOBYTE(v353) = 0;
                            if ((__nwlog_fault(v182, type, &v353) & 1) != 0)
                            {
                              if (type[0] == OS_LOG_TYPE_FAULT)
                              {
                                if (__nwlog_connection_log::onceToken != -1)
                                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                v183 = (id)gconnectionLogObj;
                                v251 = type[0];
                                if (os_log_type_enabled(v183, type[0]))
                                {
                                  v252 = nw_endpoint_handler_get_id_string(v48);
                                  v253 = nw_endpoint_handler_dry_run_string(v48);
                                  logi = v183;
                                  v254 = nw_endpoint_handler_copy_endpoint(v48);
                                  v255 = nw_endpoint_get_logging_description(v254);
                                  v256 = v48;
                                  v257 = nw_endpoint_handler_state_string(v48);
                                  v258 = nw_endpoint_handler_mode_string(v256);
                                  v259 = nw_endpoint_handler_copy_current_path(v256);
                                  *(_DWORD *)buf = 136447746;
                                  v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                                  v359 = 2082;
                                  v360 = (char *)v252;
                                  v361 = 2082;
                                  v362 = v253;
                                  v363 = 2082;
                                  v364 = (void *)v255;
                                  v365 = 2082;
                                  v366 = v257;
                                  v367 = 2082;
                                  v368 = v258;
                                  v369 = 2114;
                                  v370 = v259;
                                  _os_log_impl(&dword_182FBE000, logi, v251, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not add old input_protocol", buf, 0x48u);

                                  v183 = logi;
                                }
LABEL_321:

                                goto LABEL_327;
                              }
                              if (!(_BYTE)v353)
                              {
                                if (__nwlog_connection_log::onceToken != -1)
                                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                v183 = (id)gconnectionLogObj;
                                v268 = type[0];
                                if (os_log_type_enabled(v183, type[0]))
                                {
                                  v269 = nw_endpoint_handler_get_id_string(v48);
                                  v270 = nw_endpoint_handler_dry_run_string(v48);
                                  logk = v183;
                                  v271 = nw_endpoint_handler_copy_endpoint(v48);
                                  v272 = nw_endpoint_get_logging_description(v271);
                                  v273 = v48;
                                  v274 = nw_endpoint_handler_state_string(v48);
                                  v275 = nw_endpoint_handler_mode_string(v273);
                                  v276 = nw_endpoint_handler_copy_current_path(v273);
                                  *(_DWORD *)buf = 136447746;
                                  v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                                  v359 = 2082;
                                  v360 = (char *)v269;
                                  v361 = 2082;
                                  v362 = v270;
                                  v363 = 2082;
                                  v364 = (void *)v272;
                                  v365 = 2082;
                                  v366 = v274;
                                  v367 = 2082;
                                  v368 = v275;
                                  v369 = 2114;
                                  v370 = v276;
                                  _os_log_impl(&dword_182FBE000, logk, v268, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not add old input_protocol, backtrace limit exceeded", buf, 0x48u);

                                  v183 = logk;
                                }
                                goto LABEL_321;
                              }
                              v260 = __nw_create_backtrace_string();
                              if (!v260)
                              {
                                if (__nwlog_connection_log::onceToken != -1)
                                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                v277 = (id)gconnectionLogObj;
                                v278 = type[0];
                                if (os_log_type_enabled(v277, type[0]))
                                {
                                  logl = v277;
                                  v279 = nw_endpoint_handler_get_id_string(v48);
                                  v280 = nw_endpoint_handler_dry_run_string(v48);
                                  v281 = nw_endpoint_handler_copy_endpoint(v48);
                                  v282 = nw_endpoint_get_logging_description(v281);
                                  v283 = v48;
                                  v284 = nw_endpoint_handler_state_string(v48);
                                  v285 = nw_endpoint_handler_mode_string(v283);
                                  v286 = nw_endpoint_handler_copy_current_path(v283);
                                  *(_DWORD *)buf = 136447746;
                                  v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                                  v359 = 2082;
                                  v360 = (char *)v279;
                                  v361 = 2082;
                                  v362 = v280;
                                  v363 = 2082;
                                  v364 = (void *)v282;
                                  v365 = 2082;
                                  v366 = v284;
                                  v367 = 2082;
                                  v368 = v285;
                                  v369 = 2114;
                                  v370 = v286;
                                  _os_log_impl(&dword_182FBE000, logl, v278, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not add old input_protocol, no backtrace", buf, 0x48u);

                                  v277 = logl;
                                }

                                goto LABEL_327;
                              }
                              v194 = (char *)v260;
                              if (__nwlog_connection_log::onceToken != -1)
                                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                              v195 = (id)gconnectionLogObj;
                              v261 = type[0];
                              if (os_log_type_enabled(v195, type[0]))
                              {
                                v262 = nw_endpoint_handler_get_id_string(v48);
                                logj = nw_endpoint_handler_dry_run_string(v48);
                                v328 = nw_endpoint_handler_copy_endpoint(v48);
                                v263 = nw_endpoint_get_logging_description(v328);
                                v264 = v48;
                                v265 = nw_endpoint_handler_state_string(v48);
                                v266 = nw_endpoint_handler_mode_string(v264);
                                v267 = nw_endpoint_handler_copy_current_path(v264);
                                *(_DWORD *)buf = 136448002;
                                v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                                v359 = 2082;
                                v360 = (char *)v262;
                                v361 = 2082;
                                v362 = logj;
                                v363 = 2082;
                                v364 = (void *)v263;
                                v365 = 2082;
                                v366 = v265;
                                v367 = 2082;
                                v368 = v266;
                                v369 = 2114;
                                v370 = v267;
                                v371 = 2082;
                                v372 = (nw_protocol_definition_t)v194;
                                _os_log_impl(&dword_182FBE000, v195, v261, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not add old input_protocol, dumping backtrace:%{public}s", buf, 0x52u);

                              }
LABEL_316:

                              free(v194);
                              goto LABEL_327;
                            }
                            goto LABEL_327;
                          }
                          __nwlog_obj();
                          v203 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 136446466;
                          v358 = "nw_protocol_utilities_add_input_handler";
                          v359 = 2048;
                          v360 = (char *)v51;
                          v204 = (char *)_os_log_send_and_compose_impl();

                          type[0] = OS_LOG_TYPE_ERROR;
                          LOBYTE(v353) = 0;
                          if (__nwlog_fault(v204, type, &v353))
                          {
                            if (type[0] == OS_LOG_TYPE_FAULT)
                            {
                              __nwlog_obj();
                              v205 = objc_claimAutoreleasedReturnValue();
                              v206 = type[0];
                              if (os_log_type_enabled(v205, type[0]))
                              {
                                *(_DWORD *)buf = 136446466;
                                v358 = "nw_protocol_utilities_add_input_handler";
                                v359 = 2048;
                                v360 = (char *)v51;
                                _os_log_impl(&dword_182FBE000, v205, v206, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
                              }
                            }
                            else if ((_BYTE)v353)
                            {
                              v212 = (char *)__nw_create_backtrace_string();
                              __nwlog_obj();
                              v205 = objc_claimAutoreleasedReturnValue();
                              v213 = type[0];
                              v214 = os_log_type_enabled(v205, type[0]);
                              if (v212)
                              {
                                if (v214)
                                {
                                  *(_DWORD *)buf = 136446722;
                                  v358 = "nw_protocol_utilities_add_input_handler";
                                  v359 = 2048;
                                  v360 = (char *)v51;
                                  v361 = 2082;
                                  v362 = v212;
                                  _os_log_impl(&dword_182FBE000, v205, v213, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
                                }

                                free(v212);
                                goto LABEL_298;
                              }
                              if (v214)
                              {
                                *(_DWORD *)buf = 136446466;
                                v358 = "nw_protocol_utilities_add_input_handler";
                                v359 = 2048;
                                v360 = (char *)v51;
                                _os_log_impl(&dword_182FBE000, v205, v213, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
                              }
                            }
                            else
                            {
                              __nwlog_obj();
                              v205 = objc_claimAutoreleasedReturnValue();
                              v243 = type[0];
                              if (os_log_type_enabled(v205, type[0]))
                              {
                                *(_DWORD *)buf = 136446466;
                                v358 = "nw_protocol_utilities_add_input_handler";
                                v359 = 2048;
                                v360 = (char *)v51;
                                _os_log_impl(&dword_182FBE000, v205, v243, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
                              }
                            }

                          }
LABEL_298:
                          if (v204)
                            free(v204);
                          goto LABEL_300;
                        }
                      }
                      else if (v162)
                      {
                        goto LABEL_225;
                      }
                      if ((nw_endpoint_handler_get_logging_disabled(v48) & 1) != 0)
                        goto LABEL_206;
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      logc = (id)gconnectionLogObj;
                      v175 = nw_endpoint_handler_get_id_string(v48);
                      v176 = nw_endpoint_handler_dry_run_string(v48);
                      v177 = nw_endpoint_handler_copy_endpoint(v48);
                      v178 = nw_endpoint_get_logging_description(v177);
                      v179 = nw_endpoint_handler_state_string(v48);
                      v180 = nw_endpoint_handler_mode_string(v48);
                      v181 = nw_endpoint_handler_copy_current_path(v48);
                      *(_DWORD *)buf = 136448002;
                      v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                      v359 = 2082;
                      v360 = (char *)v175;
                      v361 = 2082;
                      v362 = v176;
                      v363 = 2082;
                      v364 = (void *)v178;
                      v365 = 2082;
                      v366 = v179;
                      v367 = 2082;
                      v368 = v180;
                      v369 = 2114;
                      v370 = v181;
                      v371 = 2114;
                      v372 = v347;
                      v182 = (char *)_os_log_send_and_compose_impl();

                      type[0] = OS_LOG_TYPE_ERROR;
                      LOBYTE(v353) = 0;
                      if ((__nwlog_fault(v182, type, &v353) & 1) != 0)
                      {
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          if (__nwlog_connection_log::onceToken != -1)
                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                          v183 = (id)gconnectionLogObj;
                          v184 = type[0];
                          if (os_log_type_enabled(v183, type[0]))
                          {
                            v185 = nw_endpoint_handler_get_id_string(v48);
                            v186 = nw_endpoint_handler_dry_run_string(v48);
                            logd = v183;
                            v187 = nw_endpoint_handler_copy_endpoint(v48);
                            v188 = nw_endpoint_get_logging_description(v187);
                            v189 = v48;
                            v190 = nw_endpoint_handler_state_string(v48);
                            v191 = nw_endpoint_handler_mode_string(v189);
                            v192 = nw_endpoint_handler_copy_current_path(v189);
                            *(_DWORD *)buf = 136448002;
                            v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                            v359 = 2082;
                            v360 = (char *)v185;
                            v361 = 2082;
                            v362 = v186;
                            v363 = 2082;
                            v364 = (void *)v188;
                            v365 = 2082;
                            v366 = v190;
                            v367 = 2082;
                            v368 = v191;
                            v369 = 2114;
                            v370 = v192;
                            v371 = 2114;
                            v372 = v347;
                            _os_log_impl(&dword_182FBE000, logd, v184, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not undo new %{public}@ insertion", buf, 0x52u);

                            v183 = logd;
                          }
                          goto LABEL_321;
                        }
                        if (!(_BYTE)v353)
                        {
                          if (__nwlog_connection_log::onceToken != -1)
                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                          v183 = (id)gconnectionLogObj;
                          v215 = type[0];
                          if (os_log_type_enabled(v183, type[0]))
                          {
                            v216 = nw_endpoint_handler_get_id_string(v48);
                            v217 = nw_endpoint_handler_dry_run_string(v48);
                            logf = v183;
                            v218 = nw_endpoint_handler_copy_endpoint(v48);
                            v219 = nw_endpoint_get_logging_description(v218);
                            v220 = v48;
                            v221 = nw_endpoint_handler_state_string(v48);
                            v222 = nw_endpoint_handler_mode_string(v220);
                            v223 = nw_endpoint_handler_copy_current_path(v220);
                            *(_DWORD *)buf = 136448002;
                            v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                            v359 = 2082;
                            v360 = (char *)v216;
                            v361 = 2082;
                            v362 = v217;
                            v363 = 2082;
                            v364 = (void *)v219;
                            v365 = 2082;
                            v366 = v221;
                            v367 = 2082;
                            v368 = v222;
                            v369 = 2114;
                            v370 = v223;
                            v371 = 2114;
                            v372 = v347;
                            _os_log_impl(&dword_182FBE000, logf, v215, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not undo new %{public}@ insertion, backtrace limit exceeded", buf, 0x52u);

                            v183 = logf;
                          }
                          goto LABEL_321;
                        }
                        v193 = __nw_create_backtrace_string();
                        if (!v193)
                        {
                          if (__nwlog_connection_log::onceToken != -1)
                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                          v183 = (id)gconnectionLogObj;
                          v224 = type[0];
                          if (os_log_type_enabled(v183, type[0]))
                          {
                            v225 = nw_endpoint_handler_get_id_string(v48);
                            v226 = nw_endpoint_handler_dry_run_string(v48);
                            logg = v183;
                            v227 = nw_endpoint_handler_copy_endpoint(v48);
                            v228 = nw_endpoint_get_logging_description(v227);
                            v229 = v48;
                            v230 = nw_endpoint_handler_state_string(v48);
                            v231 = nw_endpoint_handler_mode_string(v229);
                            v232 = nw_endpoint_handler_copy_current_path(v229);
                            *(_DWORD *)buf = 136448002;
                            v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                            v359 = 2082;
                            v360 = (char *)v225;
                            v361 = 2082;
                            v362 = v226;
                            v363 = 2082;
                            v364 = (void *)v228;
                            v365 = 2082;
                            v366 = v230;
                            v367 = 2082;
                            v368 = v231;
                            v369 = 2114;
                            v370 = v232;
                            v371 = 2114;
                            v372 = v347;
                            _os_log_impl(&dword_182FBE000, logg, v224, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not undo new %{public}@ insertion, no backtrace", buf, 0x52u);

                            v183 = logg;
                          }
                          goto LABEL_321;
                        }
                        v194 = (char *)v193;
                        if (__nwlog_connection_log::onceToken != -1)
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                        v195 = (id)gconnectionLogObj;
                        v196 = type[0];
                        if (os_log_type_enabled(v195, type[0]))
                        {
                          v197 = nw_endpoint_handler_get_id_string(v48);
                          loge = nw_endpoint_handler_dry_run_string(v48);
                          v327 = nw_endpoint_handler_copy_endpoint(v48);
                          v198 = nw_endpoint_get_logging_description(v327);
                          v199 = v48;
                          v200 = nw_endpoint_handler_state_string(v48);
                          v201 = nw_endpoint_handler_mode_string(v199);
                          v202 = nw_endpoint_handler_copy_current_path(v199);
                          *(_DWORD *)buf = 136448258;
                          v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                          v359 = 2082;
                          v360 = (char *)v197;
                          v361 = 2082;
                          v362 = loge;
                          v363 = 2082;
                          v364 = (void *)v198;
                          v365 = 2082;
                          v366 = v200;
                          v367 = 2082;
                          v368 = v201;
                          v369 = 2114;
                          v370 = v202;
                          v371 = 2114;
                          v372 = v347;
                          v373 = 2082;
                          v374 = v194;
                          _os_log_impl(&dword_182FBE000, v195, v196, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not undo new %{public}@ insertion, dumping backtrace:%{public}s", buf, 0x5Cu);

                        }
                        goto LABEL_316;
                      }
LABEL_327:
                      if (v182)
                        free(v182);
                      goto LABEL_206;
                    }
LABEL_222:
                    nw::release_if_needed<nw_protocol *>(&v353);
                    goto LABEL_223;
                  }
                }
                else if ((v356 & 1) == 0)
                {
                  goto LABEL_150;
                }
                nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                goto LABEL_150;
              }
LABEL_146:
              nw::release_if_needed<nw_protocol *>((uint64_t *)v350);
              goto LABEL_147;
            }
          }
          else
          {
            __nwlog_obj();
            v102 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v358 = "nw_protocol_utilities_add_input_handler";
              v359 = 2048;
              v360 = (char *)protocol_for_definition;
              _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
            }

          }
LABEL_187:
          v137 = v48;
          v138 = (*((_BYTE *)v137 + 268) & 0x20) == 0;

          if (v138)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v139 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
            {
              v140 = v137;

              v141 = v140;
              v142 = (*((_BYTE *)v137 + 268) & 1) == 0;

              if (v142)
                v143 = "";
              else
                v143 = "dry-run ";
              v144 = nw_endpoint_handler_copy_endpoint(v141);
              v145 = nw_endpoint_get_logging_description(v144);
              v146 = v141;
              v147 = v146;
              v148 = v42->state;
              if (v148 > 5)
                v149 = "unknown-state";
              else
                v149 = off_1E149FC48[v148];

              v150 = v147;
              v151 = v150;
              v152 = v6[29];
              v153 = "path";
              switch(v152)
              {
                case 0u:
                  break;
                case 1u:
                  v153 = "resolver";
                  break;
                case 2u:
                  v153 = nw_endpoint_flow_mode_string(v150[31]);
                  break;
                case 3u:
                  v153 = "proxy";
                  break;
                case 4u:
                  v153 = "fallback";
                  break;
                case 5u:
                  v153 = "transform";
                  break;
                default:
                  v153 = "unknown-mode";
                  break;
              }

              v154 = v151;
              os_unfair_lock_lock((os_unfair_lock_t)v154 + 28);
              v155 = v154[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v154 + 28);

              *(_DWORD *)buf = 136448002;
              v358 = "nw_endpoint_handler_append_and_start_application_protocol";
              v359 = 2082;
              v360 = v140 + 168;
              v361 = 2082;
              v362 = v143;
              v363 = 2082;
              v364 = (void *)v145;
              v365 = 2082;
              v366 = v149;
              v367 = 2082;
              v368 = v153;
              v369 = 2114;
              v370 = v155;
              v371 = 2114;
              v372 = v347;
              _os_log_impl(&dword_182FBE000, v139, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach protocol %{public}@", buf, 0x52u);

            }
          }
          goto LABEL_206;
        }
        __nwlog_obj();
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446466;
        v358 = "nw_protocol_utilities_add_input_handler";
        v359 = 2048;
        v360 = (char *)v51;
        v99 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v353) = 0;
        if (__nwlog_fault(v99, type, &v353))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v100 = objc_claimAutoreleasedReturnValue();
            v101 = type[0];
            if (os_log_type_enabled(v100, type[0]))
            {
              *(_DWORD *)buf = 136446466;
              v358 = "nw_protocol_utilities_add_input_handler";
              v359 = 2048;
              v360 = (char *)v51;
              _os_log_impl(&dword_182FBE000, v100, v101, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
            }
          }
          else if ((_BYTE)v353)
          {
            v107 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v100 = objc_claimAutoreleasedReturnValue();
            v108 = type[0];
            v109 = os_log_type_enabled(v100, type[0]);
            if (v107)
            {
              if (v109)
              {
                *(_DWORD *)buf = 136446722;
                v358 = "nw_protocol_utilities_add_input_handler";
                v359 = 2048;
                v360 = (char *)v51;
                v361 = 2082;
                v362 = v107;
                _os_log_impl(&dword_182FBE000, v100, v108, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v107);
              goto LABEL_185;
            }
            if (v109)
            {
              *(_DWORD *)buf = 136446466;
              v358 = "nw_protocol_utilities_add_input_handler";
              v359 = 2048;
              v360 = (char *)v51;
              _os_log_impl(&dword_182FBE000, v100, v108, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
            }
          }
          else
          {
            __nwlog_obj();
            v100 = objc_claimAutoreleasedReturnValue();
            v134 = type[0];
            if (os_log_type_enabled(v100, type[0]))
            {
              *(_DWORD *)buf = 136446466;
              v358 = "nw_protocol_utilities_add_input_handler";
              v359 = 2048;
              v360 = (char *)v51;
              _os_log_impl(&dword_182FBE000, v100, v134, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
            }
          }

        }
LABEL_185:
        if (v99)
          free(v99);
        goto LABEL_187;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v233 = nw_endpoint_handler_get_id_string(v6);
        v234 = nw_endpoint_handler_dry_run_string(v6);
        v235 = nw_endpoint_handler_copy_endpoint(v6);
        v236 = nw_endpoint_get_logging_description(v235);
        v237 = nw_endpoint_handler_state_string(v6);
        v238 = nw_endpoint_handler_mode_string(v6);
        v239 = nw_endpoint_handler_copy_current_path(v6);
        *(_DWORD *)buf = 136448002;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        v359 = 2082;
        v360 = (char *)v233;
        v361 = 2082;
        v362 = v234;
        v363 = 2082;
        v364 = (void *)v236;
        v365 = 2082;
        v366 = v237;
        v367 = 2082;
        v368 = v238;
        v369 = 2114;
        v370 = v239;
        v371 = 2114;
        v372 = v347;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Starting protocol %{public}@", buf, 0x52u);

      }
    }
    else
    {
      v8 = v6;
      v9 = *((_BYTE *)v8 + 268);

      if ((v9 & 0x20) != 0)
        goto LABEL_45;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = v8;

        v12 = v11;
        v13 = *((_BYTE *)v8 + 268);

        if ((v13 & 1) != 0)
          v14 = "dry-run ";
        else
          v14 = "";
        v15 = nw_endpoint_handler_copy_endpoint(v12);
        v16 = nw_endpoint_get_logging_description(v15);
        v17 = (char *)(v11 + 42);
        v18 = v12;
        v19 = v18;
        v20 = v18[30];
        if (v20 > 5)
          v21 = "unknown-state";
        else
          v21 = off_1E149FC48[v20];

        v33 = v19;
        v34 = v33;
        v344 = v15;
        v35 = "path";
        switch(v6[29])
        {
          case 0u:
            break;
          case 1u:
            v35 = "resolver";
            break;
          case 2u:
            v35 = nw_endpoint_flow_mode_string(v33[31]);
            break;
          case 3u:
            v35 = "proxy";
            break;
          case 4u:
            v35 = "fallback";
            break;
          case 5u:
            v35 = "transform";
            break;
          default:
            v35 = "unknown-mode";
            break;
        }

        v39 = v34;
        os_unfair_lock_lock((os_unfair_lock_t)v39 + 28);
        v40 = v39[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v39 + 28);

        v41 = v40;
        *(_DWORD *)buf = 136448002;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        v359 = 2082;
        v360 = v17;
        v361 = 2082;
        v362 = v14;
        v363 = 2082;
        v364 = (void *)v16;
        v365 = 2082;
        v366 = v21;
        v367 = 2082;
        v368 = v35;
        v369 = 2114;
        v370 = v41;
        v371 = 2114;
        v372 = v347;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Starting protocol %{public}@", buf, 0x52u);

      }
    }

    goto LABEL_45;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v22 = (id)gLogObj;
  v23 = v5;
  if (v7 > 5)
    v24 = "unknown-mode";
  else
    v24 = off_1E149FC18[v7];
  *(_DWORD *)buf = 136446722;
  v358 = "nw_endpoint_handler_append_and_start_application_protocol";
  v359 = 2082;
  v360 = (char *)v24;
  v361 = 2082;
  v362 = "flow";
  v25 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v353) = 0;
  if (__nwlog_fault(v25, type, &v353))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      v27 = type[0];
      if (os_log_type_enabled(v26, type[0]))
      {
        if (v7 > 5)
          v28 = "unknown-mode";
        else
          v28 = off_1E149FC18[v7];
        *(_DWORD *)buf = 136446722;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        v359 = 2082;
        v360 = (char *)v28;
        v361 = 2082;
        v362 = "flow";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    else if ((_BYTE)v353)
    {
      v29 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      v30 = type[0];
      v31 = os_log_type_enabled(v26, type[0]);
      if (v29)
      {
        if (v31)
        {
          if (v7 > 5)
            v32 = "unknown-mode";
          else
            v32 = off_1E149FC18[v7];
          *(_DWORD *)buf = 136446978;
          v358 = "nw_endpoint_handler_append_and_start_application_protocol";
          v359 = 2082;
          v360 = (char *)v32;
          v361 = 2082;
          v362 = "flow";
          v363 = 2082;
          v364 = v29;
          _os_log_impl(&dword_182FBE000, v26, v30, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v29);
        if (!v25)
          goto LABEL_87;
        goto LABEL_86;
      }
      if (v31)
      {
        if (v7 > 5)
          v38 = "unknown-mode";
        else
          v38 = off_1E149FC18[v7];
        *(_DWORD *)buf = 136446722;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        v359 = 2082;
        v360 = (char *)v38;
        v361 = 2082;
        v362 = "flow";
        _os_log_impl(&dword_182FBE000, v26, v30, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      v36 = type[0];
      if (os_log_type_enabled(v26, type[0]))
      {
        if (v7 > 5)
          v37 = "unknown-mode";
        else
          v37 = off_1E149FC18[v7];
        *(_DWORD *)buf = 136446722;
        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
        v359 = 2082;
        v360 = (char *)v37;
        v361 = 2082;
        v362 = "flow";
        _os_log_impl(&dword_182FBE000, v26, v36, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

  }
  if (v25)
LABEL_86:
    free(v25);
LABEL_87:
  started = 0;
LABEL_210:

  return started;
}

void sub_183AD569C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_start_tls_while_connected(void *a1)
{
  id v1;
  id v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  char v6;
  NSObject *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  const char *v11;
  nw_endpoint_t v12;
  const char *v13;
  char *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  id v19;
  void *v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  const char *v29;
  void **v30;
  void **v31;
  const char *v32;
  os_log_type_t v33;
  const char *v34;
  const char *v35;
  void **v36;
  id v37;
  id v38;
  NWConcrete_nw_endpoint_handler *v39;
  int state;
  uint64_t started;
  NWConcrete_nw_endpoint_mode_handler *v42;
  NWConcrete_nw_endpoint_mode_handler *v43;
  id *v44;
  id *v45;
  _QWORD *v46;
  double v47;
  nw_protocol *output_handler;
  uint64_t v49;
  double v50;
  uint64_t v51;
  nw_protocol *v52;
  nw_protocol_identifier *identifier;
  _QWORD *v54;
  unsigned __int8 *v55;
  void *v56;
  id *v57;
  id v58;
  char *v59;
  BOOL v60;
  id *v61;
  BOOL v62;
  NSObject *v63;
  id *v64;
  id *v65;
  _BOOL4 v66;
  const char *v67;
  nw_endpoint_t v68;
  const char *v69;
  id *v70;
  id *v71;
  uint64_t v72;
  const char *v73;
  id *v74;
  _BOOL4 v75;
  const char *v76;
  const char *v77;
  nw_endpoint_t v78;
  const char *v79;
  const char *v80;
  const char *v81;
  id v82;
  void **v83;
  void **v84;
  const char *v85;
  uint64_t v86;
  nw_endpoint_t v87;
  uint64_t internal;
  _QWORD *v89;
  char v90;
  const char *v91;
  const char *v92;
  nw_endpoint_t v93;
  const char *v94;
  id *v95;
  const char *v96;
  const char *v97;
  id v98;
  const char *v99;
  const char *v100;
  nw_endpoint_t v101;
  const char *v102;
  id *v103;
  const char *v104;
  const char *v105;
  id v106;
  void *v107;
  char *v108;
  NSObject *v109;
  os_log_type_t v110;
  NSObject *v111;
  char *v112;
  NSObject *v113;
  os_log_type_t v114;
  _BOOL4 v115;
  void **v116;
  id v117;
  nw_protocol_callbacks *callbacks;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  nw_protocol_callbacks *v123;
  uint64_t (*replace_input_handler)(nw_protocol *, uint64_t, uint64_t);
  char v125;
  char logging_disabled;
  NSObject *v127;
  const char *id_string;
  const char *logging_description;
  const char *v130;
  const char *v131;
  id v132;
  id *v133;
  id v134;
  void *v135;
  NSObject *v136;
  const char *v137;
  const char *v138;
  const char *v139;
  id v140;
  char v141;
  os_log_type_t v142;
  NSObject *v143;
  const char *v144;
  const char *v145;
  nw_endpoint_t v146;
  const char *v147;
  id *v148;
  const char *v149;
  const char *v150;
  id v151;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(uint64_t, uint64_t, _QWORD);
  int v158;
  nw_protocol_callbacks *v159;
  int minimize_logging;
  char v161;
  NSObject *v162;
  const char *v163;
  const char *v164;
  nw_endpoint_t v165;
  const char *v166;
  id *v167;
  const char *v168;
  const char *v169;
  id v170;
  const char *v171;
  const char *v172;
  nw_endpoint_t v173;
  const char *v174;
  const char *v175;
  const char *v176;
  id v177;
  char *v178;
  NSObject *v179;
  os_log_type_t v180;
  const char *v181;
  const char *v182;
  nw_endpoint_t v183;
  const char *v184;
  id *v185;
  const char *v186;
  const char *v187;
  id v188;
  void *v189;
  NSObject *v190;
  os_log_type_t v191;
  const char *v192;
  char *v193;
  NSObject *v194;
  os_log_type_t v195;
  const char *v196;
  nw_endpoint_t v197;
  const char *v198;
  id *v199;
  const char *v200;
  const char *v201;
  id v202;
  void *v203;
  char *v204;
  NSObject *v205;
  os_log_type_t v206;
  const char *v207;
  const char *v208;
  nw_endpoint_t v209;
  const char *v210;
  const char *v211;
  const char *v212;
  id v213;
  char *backtrace_string;
  os_log_type_t v215;
  _BOOL4 v216;
  NSObject *v217;
  char *v218;
  NSObject *v219;
  os_log_type_t v220;
  _BOOL4 v221;
  NSObject *v222;
  os_log_type_t v223;
  const char *v224;
  const char *v225;
  nw_endpoint_t v226;
  const char *v227;
  id *v228;
  const char *v229;
  const char *v230;
  id v231;
  os_log_type_t v232;
  const char *v233;
  const char *v234;
  nw_endpoint_t v235;
  const char *v236;
  id *v237;
  const char *v238;
  const char *v239;
  id v240;
  os_log_type_t v241;
  os_log_type_t v242;
  const char *v243;
  const char *v244;
  nw_endpoint_t v245;
  const char *v246;
  const char *v247;
  const char *v248;
  id v249;
  os_log_type_t v250;
  const char *v251;
  const char *v252;
  nw_endpoint_t v253;
  const char *v254;
  id *v255;
  const char *v256;
  const char *v257;
  id v258;
  const char *v259;
  os_log_type_t v260;
  const char *v261;
  nw_endpoint_t v262;
  const char *v263;
  id *v264;
  const char *v265;
  const char *v266;
  id v267;
  os_log_type_t v268;
  const char *v269;
  const char *v270;
  nw_endpoint_t v271;
  const char *v272;
  id *v273;
  const char *v274;
  const char *v275;
  id v276;
  os_log_type_t v277;
  const char *v278;
  const char *v279;
  nw_endpoint_t v280;
  const char *v281;
  id *v282;
  const char *v283;
  const char *v284;
  id v285;
  void *v286;
  const char *name;
  NSObject *v288;
  os_log_type_t v289;
  const char *v290;
  void *v291;
  const char *v292;
  char *v293;
  NSObject *v294;
  os_log_type_t v295;
  const char *v296;
  char *v297;
  NSObject *v298;
  os_log_type_t v299;
  _BOOL4 v300;
  const char *v301;
  char *v302;
  NSObject *v303;
  os_log_type_t v304;
  _BOOL4 v305;
  const char *v306;
  os_log_type_t v307;
  const char *v308;
  const char *v309;
  os_log_type_t v310;
  const char *v311;
  const char *v312;
  const char *v313;
  const char *v314;
  nw_endpoint_t v315;
  const char *v316;
  id *v317;
  const char *v318;
  const char *v319;
  id v320;
  const char *v321;
  const char *v322;
  const char *v323;
  const char *v324;
  const char *v325;
  const char *v326;
  nw_endpoint_t loga;
  nw_endpoint_t logb;
  id logc;
  NSObject *logd;
  NSObject *loge;
  NSObject *logf;
  NSObject *logg;
  id logh;
  NSObject *logi;
  NSObject *logj;
  NSObject *logk;
  NSObject *logl;
  char *log;
  void *v340;
  unsigned __int8 *v341;
  NWConcrete_nw_endpoint_mode_handler *v342;
  nw_endpoint_t v343;
  id v344;
  void *v345;
  char v346;
  os_log_type_t v347[8];
  char v348;
  os_log_type_t v349;
  uint64_t v350;
  char v351;
  os_log_type_t type[8];
  char v353;
  uint8_t buf[4];
  const char *v355;
  __int16 v356;
  char *v357;
  __int16 v358;
  const char *v359;
  __int16 v360;
  void *v361;
  __int16 v362;
  const char *v363;
  __int16 v364;
  const char *v365;
  __int16 v366;
  id v367;
  __int16 v368;
  char *v369;
  uint64_t v370;

  v370 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v189 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v355 = "nw_endpoint_start_tls_while_connected";
    v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v350) = 0;
    if (!__nwlog_fault(v22, type, &v350))
      goto LABEL_292;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v190 = objc_claimAutoreleasedReturnValue();
      v191 = type[0];
      if (os_log_type_enabled(v190, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v355 = "nw_endpoint_start_tls_while_connected";
        _os_log_impl(&dword_182FBE000, v190, v191, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if ((_BYTE)v350)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v190 = objc_claimAutoreleasedReturnValue();
      v215 = type[0];
      v216 = os_log_type_enabled(v190, type[0]);
      if (backtrace_string)
      {
        if (v216)
        {
          *(_DWORD *)buf = 136446466;
          v355 = "nw_endpoint_start_tls_while_connected";
          v356 = 2082;
          v357 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v190, v215, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_292:
        v20 = 0;
        if (!v22)
          goto LABEL_95;
        goto LABEL_94;
      }
      if (v216)
      {
        *(_DWORD *)buf = 136446210;
        v355 = "nw_endpoint_start_tls_while_connected";
        _os_log_impl(&dword_182FBE000, v190, v215, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v190 = objc_claimAutoreleasedReturnValue();
      v241 = type[0];
      if (os_log_type_enabled(v190, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v355 = "nw_endpoint_start_tls_while_connected";
        _os_log_impl(&dword_182FBE000, v190, v241, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_292;
  }
  v3 = (unsigned int *)v1;
  v4 = v3[29];

  if ((_DWORD)v4 == 2)
  {
    v345 = v2;
    if (nw_endpoint_handler_get_minimize_logging(v3))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) != 0)
      {
LABEL_45:
        v39 = v3;
        state = v39->state;

        if ((state & 0xFFFFFFFE) == 4)
        {
          started = 0;
LABEL_200:
          v20 = v345;
          goto LABEL_201;
        }
        v42 = nw_endpoint_handler_copy_flow(v39);
        v43 = v42;
        v342 = v42;
        if ((*((_BYTE *)v42 + 32) & 4) != 0)
        {
          os_unfair_lock_lock((os_unfair_lock_t)v42 + 220);
          if (*((_QWORD *)v43 + 117))
            started = nw_endpoint_start_tls_while_connected();
          else
            started = 0;
          os_unfair_lock_unlock((os_unfair_lock_t)v43 + 220);
          goto LABEL_199;
        }
        v44 = v39;
        v344 = v44[4];
        v45 = v44;

        nw_parameters_set_tls(v344, 1);
        v46 = (_QWORD *)nw_protocol_boringssl_copy_definition();
        v340 = v46;
        v341 = nw_parameters_copy_protocol_options_for_definition(v344, v46);
        if (v341)
        {
          output_handler = (nw_protocol *)*((_QWORD *)v342 + 51);
          if (output_handler)
          {
            v49 = (uint64_t)v342 + 376;
            if (output_handler != *((nw_protocol **)v342 + 90))
            {
              gotLoadHelper_x20__ne_filter_protocol_identifier(v47);
              v51 = v46[245];
              while (1)
              {
                v52 = output_handler;
                identifier = output_handler->identifier;
                v54 = v51 ? (_QWORD *)ne_filter_protocol_identifier_delayInitStub(v50) : 0;
                if (nw_protocols_are_equal(identifier, v54))
                  break;
                v55 = nw_parameters_copy_protocol_options_legacy(v344, output_handler);
                v56 = v55;
                if (v55)
                {
                  v57 = v55;
                  v58 = v57[1];

                  v59 = (char *)v58;
                  if (v59)
                  {
                    v59 = v59;
                    v60 = v59[184] < 0;

                    if (v60)
                    {
                      v56 = v57;
LABEL_99:

                      break;
                    }
                  }
                }
                else
                {
                  v59 = 0;
                }
                output_handler = v52->output_handler;
                if (!output_handler)
                  goto LABEL_99;

                v49 = (uint64_t)v52;
                if (output_handler == *((nw_protocol **)v342 + 90))
                  goto LABEL_101;
              }
              output_handler = v52;
            }
LABEL_101:
            v86 = nw_protocol_boringssl_identifier();
            if (v86)
            {
              v87 = nw_endpoint_handler_copy_endpoint(v45);
              internal = nw_protocol_create_internal(v86, v87, (const char *)v344, 1);

              if (internal)
              {
                nw_endpoint_handler_set_protocol_instance(v45, v341, v340, internal);
                if (internal != v49)
                {
                  v89 = *(_QWORD **)(internal + 24);
                  if (v89 && *v89)
                  {
                    if ((nw_protocol_add_input_handler(internal, v49) & 1) != 0)
                    {
                      if (output_handler->handle == &nw_protocol_ref_counted_handle)
                      {
                        callbacks = output_handler[1].callbacks;
                        if (callbacks)
                          output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler
                                                                                + 1);
                        *(_QWORD *)type = output_handler;
                        v90 = v353 | 1;
                      }
                      else
                      {
                        *(_QWORD *)type = output_handler;
                        v90 = v353 & 0xFE;
                      }
                      v353 = v90;
                      if (*(_UNKNOWN **)(v49 + 40) == &nw_protocol_ref_counted_handle)
                      {
                        v120 = *(_QWORD *)(v49 + 88);
                        if (v120)
                          *(_QWORD *)(v49 + 88) = v120 + 1;
                        v350 = v49;
                        v119 = v351 | 1;
                      }
                      else
                      {
                        v350 = v49;
                        v119 = v351 & 0xFE;
                      }
                      v351 = v119;
                      if (*(_UNKNOWN **)(internal + 40) == &nw_protocol_ref_counted_handle)
                      {
                        v122 = *(_QWORD *)(internal + 88);
                        if (v122)
                          *(_QWORD *)(internal + 88) = v122 + 1;
                        *(_QWORD *)v347 = internal;
                        v121 = v348 | 1;
                      }
                      else
                      {
                        *(_QWORD *)v347 = internal;
                        v121 = v348 & 0xFE;
                      }
                      v348 = v121;
                      v123 = output_handler->callbacks;
                      if (v123)
                      {
                        replace_input_handler = (uint64_t (*)(nw_protocol *, uint64_t, uint64_t))v123->replace_input_handler;
                        if (replace_input_handler)
                        {
                          v125 = replace_input_handler(output_handler, v49, internal);
                          if ((v348 & 1) == 0)
                            goto LABEL_158;
                          goto LABEL_157;
                        }
                      }
                      __nwlog_obj();
                      v286 = (void *)objc_claimAutoreleasedReturnValue();
                      name = output_handler->identifier->name;
                      *(_DWORD *)buf = 136446722;
                      v355 = "__nw_protocol_replace_input_handler";
                      if (!name)
                        name = "invalid";
                      v356 = 2082;
                      v357 = (char *)name;
                      v358 = 2048;
                      v359 = (const char *)output_handler;
                      log = (char *)_os_log_send_and_compose_impl();

                      v349 = OS_LOG_TYPE_ERROR;
                      v346 = 0;
                      if (__nwlog_fault(log, &v349, &v346))
                      {
                        if (v349 == OS_LOG_TYPE_FAULT)
                        {
                          __nwlog_obj();
                          v288 = objc_claimAutoreleasedReturnValue();
                          v289 = v349;
                          if (os_log_type_enabled(v288, v349))
                          {
                            v290 = output_handler->identifier->name;
                            if (!v290)
                              v290 = "invalid";
                            *(_DWORD *)buf = 136446722;
                            v355 = "__nw_protocol_replace_input_handler";
                            v356 = 2082;
                            v357 = (char *)v290;
                            v358 = 2048;
                            v359 = (const char *)output_handler;
                            _os_log_impl(&dword_182FBE000, v288, v289, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback", buf, 0x20u);
                          }
LABEL_336:

                          goto LABEL_370;
                        }
                        if (!v346)
                        {
                          __nwlog_obj();
                          v288 = objc_claimAutoreleasedReturnValue();
                          v307 = v349;
                          if (os_log_type_enabled(v288, v349))
                          {
                            v308 = output_handler->identifier->name;
                            if (!v308)
                              v308 = "invalid";
                            *(_DWORD *)buf = 136446722;
                            v355 = "__nw_protocol_replace_input_handler";
                            v356 = 2082;
                            v357 = (char *)v308;
                            v358 = 2048;
                            v359 = (const char *)output_handler;
                            _os_log_impl(&dword_182FBE000, v288, v307, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                          }
                          goto LABEL_336;
                        }
                        v297 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        v298 = objc_claimAutoreleasedReturnValue();
                        v299 = v349;
                        v300 = os_log_type_enabled(v298, v349);
                        if (v297)
                        {
                          if (v300)
                          {
                            v301 = output_handler->identifier->name;
                            if (!v301)
                              v301 = "invalid";
                            *(_DWORD *)buf = 136446978;
                            v355 = "__nw_protocol_replace_input_handler";
                            v356 = 2082;
                            v357 = (char *)v301;
                            v358 = 2048;
                            v359 = (const char *)output_handler;
                            v360 = 2082;
                            v361 = v297;
                            _os_log_impl(&dword_182FBE000, v298, v299, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                          }

                          free(v297);
                        }
                        else
                        {
                          if (v300)
                          {
                            v309 = output_handler->identifier->name;
                            if (!v309)
                              v309 = "invalid";
                            *(_DWORD *)buf = 136446722;
                            v355 = "__nw_protocol_replace_input_handler";
                            v356 = 2082;
                            v357 = (char *)v309;
                            v358 = 2048;
                            v359 = (const char *)output_handler;
                            _os_log_impl(&dword_182FBE000, v298, v299, "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace", buf, 0x20u);
                          }

                        }
                      }
LABEL_370:
                      if (log)
                        free(log);
                      v125 = 0;
                      if ((v121 & 1) == 0)
                      {
LABEL_158:
                        if ((v351 & 1) != 0)
                        {
                          nw::release_if_needed<nw_protocol *>(&v350);
                          if ((v353 & 1) == 0)
                          {
LABEL_161:
                            logging_disabled = nw_endpoint_handler_get_logging_disabled(v45);
                            if ((v125 & 1) != 0)
                            {
                              if ((logging_disabled & 1) == 0)
                              {
                                if (__nwlog_connection_log::onceToken != -1)
                                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                v127 = (id)gconnectionLogObj;
                                if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
                                {
                                  id_string = nw_endpoint_handler_get_id_string(v45);
                                  v323 = nw_endpoint_handler_dry_run_string(v45);
                                  loga = nw_endpoint_handler_copy_endpoint(v45);
                                  logging_description = nw_endpoint_get_logging_description(loga);
                                  v130 = nw_endpoint_handler_state_string(v45);
                                  v131 = nw_endpoint_handler_mode_string(v45);
                                  v132 = nw_endpoint_handler_copy_current_path(v45);
                                  *(_DWORD *)buf = 136447746;
                                  v355 = "nw_endpoint_start_tls_while_connected";
                                  v356 = 2082;
                                  v357 = (char *)id_string;
                                  v358 = 2082;
                                  v359 = v323;
                                  v360 = 2082;
                                  v361 = (void *)logging_description;
                                  v362 = 2082;
                                  v363 = v130;
                                  v364 = 2082;
                                  v365 = v131;
                                  v366 = 2114;
                                  v367 = v132;
                                  _os_log_impl(&dword_182FBE000, v127, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached TLS protocol to connected flow", buf, 0x48u);

                                }
                              }
                              v133 = v45;
                              v39->state = 2;

                              *((_DWORD *)v133 + 20) = 262147;
                              nw_endpoint_handler_report(v133, 0, (_WORD *)v133 + 40, 0);
                              if ((*((_BYTE *)v342 + 33) & 4) != 0)
                              {
                                v134 = nw_endpoint_handler_copy_association(v133, 0);
                                v135 = v134;
                                if (v134)
                                  nw_association_mark_flow_disconnected(v134, v133);
                                *((_BYTE *)v342 + 33) &= ~4u;

                              }
                              started = nw_endpoint_flow_connect(v133);
                              goto LABEL_198;
                            }
                            if ((logging_disabled & 1) == 0)
                            {
                              if (__nwlog_connection_log::onceToken != -1)
                                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                              v136 = (id)gconnectionLogObj;
                              if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
                              {
                                v137 = nw_endpoint_handler_get_id_string(v45);
                                v322 = nw_endpoint_handler_dry_run_string(v45);
                                v324 = v137;
                                logb = nw_endpoint_handler_copy_endpoint(v45);
                                v321 = nw_endpoint_get_logging_description(logb);
                                v138 = nw_endpoint_handler_state_string(v45);
                                v139 = nw_endpoint_handler_mode_string(v45);
                                v140 = nw_endpoint_handler_copy_current_path(v45);
                                *(_DWORD *)buf = 136447746;
                                v355 = "nw_endpoint_start_tls_while_connected";
                                v356 = 2082;
                                v357 = (char *)v324;
                                v358 = 2082;
                                v359 = v322;
                                v360 = 2082;
                                v361 = (void *)v321;
                                v362 = 2082;
                                v363 = v138;
                                v364 = 2082;
                                v365 = v139;
                                v366 = 2114;
                                v367 = v140;
                                _os_log_impl(&dword_182FBE000, v136, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to replace flow protocol with TLS protocol", buf, 0x48u);

                              }
                            }
                            if (*(_UNKNOWN **)(internal + 40) == &nw_protocol_ref_counted_handle)
                            {
                              v153 = *(_QWORD *)(internal + 88);
                              if (v153)
                                *(_QWORD *)(internal + 88) = v153 + 1;
                              *(_QWORD *)type = internal;
                              v141 = v353 | 1;
                            }
                            else
                            {
                              *(_QWORD *)type = internal;
                              v141 = v353 & 0xFE;
                            }
                            v353 = v141;
                            if (*(_UNKNOWN **)(v49 + 40) == &nw_protocol_ref_counted_handle)
                            {
                              v155 = *(_QWORD *)(v49 + 88);
                              if (v155)
                                *(_QWORD *)(v49 + 88) = v155 + 1;
                              v350 = v49;
                              v154 = v351 | 1;
                            }
                            else
                            {
                              v350 = v49;
                              v154 = v351 & 0xFE;
                            }
                            v351 = v154;
                            v156 = *(_QWORD *)(internal + 24);
                            if (v156)
                            {
                              v157 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v156 + 8);
                              if (v157)
                              {
                                v158 = v157(internal, v49, 0);
                                if ((v351 & 1) == 0)
                                  goto LABEL_214;
                                goto LABEL_213;
                              }
                            }
                            __nwlog_obj();
                            v291 = (void *)objc_claimAutoreleasedReturnValue();
                            v292 = *(const char **)(internal + 16);
                            *(_DWORD *)buf = 136446722;
                            v355 = "__nw_protocol_remove_input_handler";
                            if (!v292)
                              v292 = "invalid";
                            v356 = 2082;
                            v357 = (char *)v292;
                            v358 = 2048;
                            v359 = (const char *)internal;
                            v293 = (char *)_os_log_send_and_compose_impl();

                            v347[0] = OS_LOG_TYPE_ERROR;
                            v349 = OS_LOG_TYPE_DEFAULT;
                            if (__nwlog_fault(v293, v347, &v349))
                            {
                              if (v347[0] == OS_LOG_TYPE_FAULT)
                              {
                                __nwlog_obj();
                                v294 = objc_claimAutoreleasedReturnValue();
                                v295 = v347[0];
                                if (os_log_type_enabled(v294, v347[0]))
                                {
                                  v296 = *(const char **)(internal + 16);
                                  if (!v296)
                                    v296 = "invalid";
                                  *(_DWORD *)buf = 136446722;
                                  v355 = "__nw_protocol_remove_input_handler";
                                  v356 = 2082;
                                  v357 = (char *)v296;
                                  v358 = 2048;
                                  v359 = (const char *)internal;
                                  _os_log_impl(&dword_182FBE000, v294, v295, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
                                }
LABEL_345:

                                goto LABEL_384;
                              }
                              if (v349 == OS_LOG_TYPE_DEFAULT)
                              {
                                __nwlog_obj();
                                v294 = objc_claimAutoreleasedReturnValue();
                                v310 = v347[0];
                                if (os_log_type_enabled(v294, v347[0]))
                                {
                                  v311 = *(const char **)(internal + 16);
                                  if (!v311)
                                    v311 = "invalid";
                                  *(_DWORD *)buf = 136446722;
                                  v355 = "__nw_protocol_remove_input_handler";
                                  v356 = 2082;
                                  v357 = (char *)v311;
                                  v358 = 2048;
                                  v359 = (const char *)internal;
                                  _os_log_impl(&dword_182FBE000, v294, v310, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                                }
                                goto LABEL_345;
                              }
                              v302 = (char *)__nw_create_backtrace_string();
                              __nwlog_obj();
                              v303 = objc_claimAutoreleasedReturnValue();
                              v304 = v347[0];
                              v305 = os_log_type_enabled(v303, v347[0]);
                              if (v302)
                              {
                                if (v305)
                                {
                                  v306 = *(const char **)(internal + 16);
                                  if (!v306)
                                    v306 = "invalid";
                                  *(_DWORD *)buf = 136446978;
                                  v355 = "__nw_protocol_remove_input_handler";
                                  v356 = 2082;
                                  v357 = (char *)v306;
                                  v358 = 2048;
                                  v359 = (const char *)internal;
                                  v360 = 2082;
                                  v361 = v302;
                                  _os_log_impl(&dword_182FBE000, v303, v304, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                                }

                                free(v302);
                              }
                              else
                              {
                                if (v305)
                                {
                                  v312 = *(const char **)(internal + 16);
                                  if (!v312)
                                    v312 = "invalid";
                                  *(_DWORD *)buf = 136446722;
                                  v355 = "__nw_protocol_remove_input_handler";
                                  v356 = 2082;
                                  v357 = (char *)v312;
                                  v358 = 2048;
                                  v359 = (const char *)internal;
                                  _os_log_impl(&dword_182FBE000, v303, v304, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
                                }

                              }
                            }
LABEL_384:
                            if (v293)
                              free(v293);
                            v158 = 0;
                            if ((v154 & 1) == 0)
                            {
LABEL_214:
                              if ((v353 & 1) != 0)
                              {
                                nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                                if (v158)
                                {
LABEL_216:
                                  if (output_handler != (nw_protocol *)v49)
                                  {
                                    v159 = output_handler->callbacks;
                                    if (v159 && v159->add_input_handler)
                                    {
                                      if (nw_protocol_add_input_handler((uint64_t)output_handler, v49))
                                      {
                                        minimize_logging = nw_endpoint_handler_get_minimize_logging(v45);
                                        v161 = nw_endpoint_handler_get_logging_disabled(v45);
                                        if (minimize_logging)
                                        {
                                          if ((v161 & 1) != 0)
                                            goto LABEL_197;
                                          if (__nwlog_connection_log::onceToken != -1)
                                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                          v162 = (id)gconnectionLogObj;
                                          if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
                                          {
                                            v313 = nw_endpoint_handler_get_id_string(v45);
                                            v314 = nw_endpoint_handler_dry_run_string(v45);
                                            v315 = nw_endpoint_handler_copy_endpoint(v45);
                                            v316 = nw_endpoint_get_logging_description(v315);
                                            v317 = v45;
                                            v318 = nw_endpoint_handler_state_string(v45);
                                            v319 = nw_endpoint_handler_mode_string(v317);
                                            v320 = nw_endpoint_handler_copy_current_path(v317);
                                            *(_DWORD *)buf = 136447746;
                                            v355 = "nw_endpoint_start_tls_while_connected";
                                            v356 = 2082;
                                            v357 = (char *)v313;
                                            v358 = 2082;
                                            v359 = v314;
                                            v360 = 2082;
                                            v361 = (void *)v316;
                                            v362 = 2082;
                                            v363 = v318;
                                            v364 = 2082;
                                            v365 = v319;
                                            v366 = 2114;
                                            v367 = v320;
                                            _os_log_impl(&dword_182FBE000, v162, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Successfully repaired protocol stack after failed TLS insertion", buf, 0x48u);

                                          }
                                          goto LABEL_226;
                                        }
                                        if ((v161 & 1) == 0)
                                        {
                                          if (__nwlog_connection_log::onceToken != -1)
                                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                          v162 = (id)gconnectionLogObj;
                                          if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
                                          {
                                            v163 = nw_endpoint_handler_get_id_string(v45);
                                            v164 = nw_endpoint_handler_dry_run_string(v45);
                                            v165 = nw_endpoint_handler_copy_endpoint(v45);
                                            v166 = nw_endpoint_get_logging_description(v165);
                                            v167 = v45;
                                            v168 = nw_endpoint_handler_state_string(v45);
                                            v169 = nw_endpoint_handler_mode_string(v167);
                                            v170 = nw_endpoint_handler_copy_current_path(v167);
                                            *(_DWORD *)buf = 136447746;
                                            v355 = "nw_endpoint_start_tls_while_connected";
                                            v356 = 2082;
                                            v357 = (char *)v163;
                                            v358 = 2082;
                                            v359 = v164;
                                            v360 = 2082;
                                            v361 = (void *)v166;
                                            v362 = 2082;
                                            v363 = v168;
                                            v364 = 2082;
                                            v365 = v169;
                                            v366 = 2114;
                                            v367 = v170;
                                            _os_log_impl(&dword_182FBE000, v162, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Successfully repaired protocol stack after failed TLS insertion", buf, 0x48u);

                                          }
LABEL_226:

                                        }
LABEL_197:
                                        started = 0;
LABEL_198:

                                        v43 = v342;
LABEL_199:

                                        goto LABEL_200;
                                      }
                                    }
                                    else
                                    {
                                      __nwlog_obj();
                                      v217 = objc_claimAutoreleasedReturnValue();
                                      if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR))
                                      {
                                        *(_DWORD *)buf = 136446466;
                                        v355 = "nw_protocol_utilities_add_input_handler";
                                        v356 = 2048;
                                        v357 = (char *)output_handler;
                                        _os_log_impl(&dword_182FBE000, v217, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
                                      }

                                    }
LABEL_299:
                                    if ((nw_endpoint_handler_get_logging_disabled(v45) & 1) != 0)
                                      goto LABEL_197;
                                    if (__nwlog_connection_log::onceToken != -1)
                                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                    logh = (id)gconnectionLogObj;
                                    v243 = nw_endpoint_handler_get_id_string(v45);
                                    v244 = nw_endpoint_handler_dry_run_string(v45);
                                    v245 = nw_endpoint_handler_copy_endpoint(v45);
                                    v246 = nw_endpoint_get_logging_description(v245);
                                    v247 = nw_endpoint_handler_state_string(v45);
                                    v248 = nw_endpoint_handler_mode_string(v45);
                                    v249 = nw_endpoint_handler_copy_current_path(v45);
                                    *(_DWORD *)buf = 136447746;
                                    v355 = "nw_endpoint_start_tls_while_connected";
                                    v356 = 2082;
                                    v357 = (char *)v243;
                                    v358 = 2082;
                                    v359 = v244;
                                    v360 = 2082;
                                    v361 = (void *)v246;
                                    v362 = 2082;
                                    v363 = v247;
                                    v364 = 2082;
                                    v365 = v248;
                                    v366 = 2114;
                                    v367 = v249;
                                    v178 = (char *)_os_log_send_and_compose_impl();

                                    type[0] = OS_LOG_TYPE_ERROR;
                                    LOBYTE(v350) = 0;
                                    if ((__nwlog_fault(v178, type, &v350) & 1) != 0)
                                    {
                                      if (type[0] == OS_LOG_TYPE_FAULT)
                                      {
                                        if (__nwlog_connection_log::onceToken != -1)
                                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                        v179 = (id)gconnectionLogObj;
                                        v250 = type[0];
                                        if (os_log_type_enabled(v179, type[0]))
                                        {
                                          v251 = nw_endpoint_handler_get_id_string(v45);
                                          v252 = nw_endpoint_handler_dry_run_string(v45);
                                          logi = v179;
                                          v253 = nw_endpoint_handler_copy_endpoint(v45);
                                          v254 = nw_endpoint_get_logging_description(v253);
                                          v255 = v45;
                                          v256 = nw_endpoint_handler_state_string(v45);
                                          v257 = nw_endpoint_handler_mode_string(v255);
                                          v258 = nw_endpoint_handler_copy_current_path(v255);
                                          *(_DWORD *)buf = 136447746;
                                          v355 = "nw_endpoint_start_tls_while_connected";
                                          v356 = 2082;
                                          v357 = (char *)v251;
                                          v358 = 2082;
                                          v359 = v252;
                                          v360 = 2082;
                                          v361 = (void *)v254;
                                          v362 = 2082;
                                          v363 = v256;
                                          v364 = 2082;
                                          v365 = v257;
                                          v366 = 2114;
                                          v367 = v258;
                                          _os_log_impl(&dword_182FBE000, logi, v250, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not add old input_protocol", buf, 0x48u);

                                          v179 = logi;
                                        }
LABEL_237:

                                        goto LABEL_326;
                                      }
                                      if ((_BYTE)v350)
                                      {
                                        v259 = __nw_create_backtrace_string();
                                        if (v259)
                                        {
                                          v193 = (char *)v259;
                                          if (__nwlog_connection_log::onceToken != -1)
                                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                          v194 = (id)gconnectionLogObj;
                                          v260 = type[0];
                                          if (os_log_type_enabled(v194, type[0]))
                                          {
                                            logj = v194;
                                            v261 = nw_endpoint_handler_get_id_string(v45);
                                            v326 = nw_endpoint_handler_dry_run_string(v45);
                                            v262 = nw_endpoint_handler_copy_endpoint(v45);
                                            v263 = nw_endpoint_get_logging_description(v262);
                                            v264 = v45;
                                            v265 = nw_endpoint_handler_state_string(v45);
                                            v266 = nw_endpoint_handler_mode_string(v45);
                                            v267 = nw_endpoint_handler_copy_current_path(v264);
                                            *(_DWORD *)buf = 136448002;
                                            v355 = "nw_endpoint_start_tls_while_connected";
                                            v356 = 2082;
                                            v357 = (char *)v261;
                                            v358 = 2082;
                                            v359 = v326;
                                            v360 = 2082;
                                            v361 = (void *)v263;
                                            v362 = 2082;
                                            v363 = v265;
                                            v364 = 2082;
                                            v365 = v266;
                                            v366 = 2114;
                                            v367 = v267;
                                            v368 = 2082;
                                            v369 = v193;
                                            _os_log_impl(&dword_182FBE000, logj, v260, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not add old input_protocol, dumping backtrace:%{public}s", buf, 0x52u);

                                            v194 = logj;
                                          }
LABEL_315:

                                          free(v193);
                                          goto LABEL_326;
                                        }
                                        if (__nwlog_connection_log::onceToken != -1)
                                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                        v222 = (id)gconnectionLogObj;
                                        v277 = type[0];
                                        if (os_log_type_enabled(v222, type[0]))
                                        {
                                          logl = v222;
                                          v278 = nw_endpoint_handler_get_id_string(v45);
                                          v279 = nw_endpoint_handler_dry_run_string(v45);
                                          v280 = nw_endpoint_handler_copy_endpoint(v45);
                                          v281 = nw_endpoint_get_logging_description(v280);
                                          v282 = v45;
                                          v283 = nw_endpoint_handler_state_string(v45);
                                          v284 = nw_endpoint_handler_mode_string(v282);
                                          v285 = nw_endpoint_handler_copy_current_path(v282);
                                          *(_DWORD *)buf = 136447746;
                                          v355 = "nw_endpoint_start_tls_while_connected";
                                          v356 = 2082;
                                          v357 = (char *)v278;
                                          v358 = 2082;
                                          v359 = v279;
                                          v360 = 2082;
                                          v361 = (void *)v281;
                                          v362 = 2082;
                                          v363 = v283;
                                          v364 = 2082;
                                          v365 = v284;
                                          v366 = 2114;
                                          v367 = v285;
                                          _os_log_impl(&dword_182FBE000, logl, v277, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not add old input_protocol, no backtrace", buf, 0x48u);

                                          v222 = logl;
                                        }
                                      }
                                      else
                                      {
                                        if (__nwlog_connection_log::onceToken != -1)
                                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                        v222 = (id)gconnectionLogObj;
                                        v268 = type[0];
                                        if (os_log_type_enabled(v222, type[0]))
                                        {
                                          logk = v222;
                                          v269 = nw_endpoint_handler_get_id_string(v45);
                                          v270 = nw_endpoint_handler_dry_run_string(v45);
                                          v271 = nw_endpoint_handler_copy_endpoint(v45);
                                          v272 = nw_endpoint_get_logging_description(v271);
                                          v273 = v45;
                                          v274 = nw_endpoint_handler_state_string(v45);
                                          v275 = nw_endpoint_handler_mode_string(v273);
                                          v276 = nw_endpoint_handler_copy_current_path(v273);
                                          *(_DWORD *)buf = 136447746;
                                          v355 = "nw_endpoint_start_tls_while_connected";
                                          v356 = 2082;
                                          v357 = (char *)v269;
                                          v358 = 2082;
                                          v359 = v270;
                                          v360 = 2082;
                                          v361 = (void *)v272;
                                          v362 = 2082;
                                          v363 = v274;
                                          v364 = 2082;
                                          v365 = v275;
                                          v366 = 2114;
                                          v367 = v276;
                                          _os_log_impl(&dword_182FBE000, logk, v268, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not add old input_protocol, backtrace limit exceeded", buf, 0x48u);

                                          v222 = logk;
                                        }
                                      }
LABEL_325:

                                      goto LABEL_326;
                                    }
                                    goto LABEL_326;
                                  }
                                  __nwlog_obj();
                                  v203 = (void *)objc_claimAutoreleasedReturnValue();
                                  *(_DWORD *)buf = 136446466;
                                  v355 = "nw_protocol_utilities_add_input_handler";
                                  v356 = 2048;
                                  v357 = (char *)v49;
                                  v204 = (char *)_os_log_send_and_compose_impl();

                                  type[0] = OS_LOG_TYPE_ERROR;
                                  LOBYTE(v350) = 0;
                                  if (__nwlog_fault(v204, type, &v350))
                                  {
                                    if (type[0] == OS_LOG_TYPE_FAULT)
                                    {
                                      __nwlog_obj();
                                      v205 = objc_claimAutoreleasedReturnValue();
                                      v206 = type[0];
                                      if (os_log_type_enabled(v205, type[0]))
                                      {
                                        *(_DWORD *)buf = 136446466;
                                        v355 = "nw_protocol_utilities_add_input_handler";
                                        v356 = 2048;
                                        v357 = (char *)v49;
                                        _os_log_impl(&dword_182FBE000, v205, v206, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
                                      }
                                    }
                                    else
                                    {
                                      if ((_BYTE)v350)
                                      {
                                        v218 = (char *)__nw_create_backtrace_string();
                                        __nwlog_obj();
                                        v219 = objc_claimAutoreleasedReturnValue();
                                        v220 = type[0];
                                        v221 = os_log_type_enabled(v219, type[0]);
                                        if (v218)
                                        {
                                          if (v221)
                                          {
                                            *(_DWORD *)buf = 136446722;
                                            v355 = "nw_protocol_utilities_add_input_handler";
                                            v356 = 2048;
                                            v357 = (char *)v49;
                                            v358 = 2082;
                                            v359 = v218;
                                            _os_log_impl(&dword_182FBE000, v219, v220, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
                                          }

                                          free(v218);
                                        }
                                        else
                                        {
                                          if (v221)
                                          {
                                            *(_DWORD *)buf = 136446466;
                                            v355 = "nw_protocol_utilities_add_input_handler";
                                            v356 = 2048;
                                            v357 = (char *)v49;
                                            _os_log_impl(&dword_182FBE000, v219, v220, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
                                          }

                                        }
                                        goto LABEL_297;
                                      }
                                      __nwlog_obj();
                                      v205 = objc_claimAutoreleasedReturnValue();
                                      v242 = type[0];
                                      if (os_log_type_enabled(v205, type[0]))
                                      {
                                        *(_DWORD *)buf = 136446466;
                                        v355 = "nw_protocol_utilities_add_input_handler";
                                        v356 = 2048;
                                        v357 = (char *)v49;
                                        _os_log_impl(&dword_182FBE000, v205, v242, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
                                      }
                                    }

                                  }
LABEL_297:
                                  if (v204)
                                    free(v204);
                                  goto LABEL_299;
                                }
                              }
                              else if (v158)
                              {
                                goto LABEL_216;
                              }
                              if ((nw_endpoint_handler_get_logging_disabled(v45) & 1) != 0)
                                goto LABEL_197;
                              if (__nwlog_connection_log::onceToken != -1)
                                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                              logc = (id)gconnectionLogObj;
                              v171 = nw_endpoint_handler_get_id_string(v45);
                              v172 = nw_endpoint_handler_dry_run_string(v45);
                              v173 = nw_endpoint_handler_copy_endpoint(v45);
                              v174 = nw_endpoint_get_logging_description(v173);
                              v175 = nw_endpoint_handler_state_string(v45);
                              v176 = nw_endpoint_handler_mode_string(v45);
                              v177 = nw_endpoint_handler_copy_current_path(v45);
                              *(_DWORD *)buf = 136447746;
                              v355 = "nw_endpoint_start_tls_while_connected";
                              v356 = 2082;
                              v357 = (char *)v171;
                              v358 = 2082;
                              v359 = v172;
                              v360 = 2082;
                              v361 = (void *)v174;
                              v362 = 2082;
                              v363 = v175;
                              v364 = 2082;
                              v365 = v176;
                              v366 = 2114;
                              v367 = v177;
                              v178 = (char *)_os_log_send_and_compose_impl();

                              type[0] = OS_LOG_TYPE_ERROR;
                              LOBYTE(v350) = 0;
                              if ((__nwlog_fault(v178, type, &v350) & 1) != 0)
                              {
                                if (type[0] == OS_LOG_TYPE_FAULT)
                                {
                                  if (__nwlog_connection_log::onceToken != -1)
                                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                  v179 = (id)gconnectionLogObj;
                                  v180 = type[0];
                                  if (os_log_type_enabled(v179, type[0]))
                                  {
                                    v181 = nw_endpoint_handler_get_id_string(v45);
                                    v182 = nw_endpoint_handler_dry_run_string(v45);
                                    logd = v179;
                                    v183 = nw_endpoint_handler_copy_endpoint(v45);
                                    v184 = nw_endpoint_get_logging_description(v183);
                                    v185 = v45;
                                    v186 = nw_endpoint_handler_state_string(v45);
                                    v187 = nw_endpoint_handler_mode_string(v185);
                                    v188 = nw_endpoint_handler_copy_current_path(v185);
                                    *(_DWORD *)buf = 136447746;
                                    v355 = "nw_endpoint_start_tls_while_connected";
                                    v356 = 2082;
                                    v357 = (char *)v181;
                                    v358 = 2082;
                                    v359 = v182;
                                    v360 = 2082;
                                    v361 = (void *)v184;
                                    v362 = 2082;
                                    v363 = v186;
                                    v364 = 2082;
                                    v365 = v187;
                                    v366 = 2114;
                                    v367 = v188;
                                    _os_log_impl(&dword_182FBE000, logd, v180, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not undo new TLS insertion", buf, 0x48u);

                                    v179 = logd;
                                  }
                                  goto LABEL_237;
                                }
                                if ((_BYTE)v350)
                                {
                                  v192 = __nw_create_backtrace_string();
                                  if (v192)
                                  {
                                    v193 = (char *)v192;
                                    if (__nwlog_connection_log::onceToken != -1)
                                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                    v194 = (id)gconnectionLogObj;
                                    v195 = type[0];
                                    if (os_log_type_enabled(v194, type[0]))
                                    {
                                      loge = v194;
                                      v196 = nw_endpoint_handler_get_id_string(v45);
                                      v325 = nw_endpoint_handler_dry_run_string(v45);
                                      v197 = nw_endpoint_handler_copy_endpoint(v45);
                                      v198 = nw_endpoint_get_logging_description(v197);
                                      v199 = v45;
                                      v200 = nw_endpoint_handler_state_string(v45);
                                      v201 = nw_endpoint_handler_mode_string(v45);
                                      v202 = nw_endpoint_handler_copy_current_path(v199);
                                      *(_DWORD *)buf = 136448002;
                                      v355 = "nw_endpoint_start_tls_while_connected";
                                      v356 = 2082;
                                      v357 = (char *)v196;
                                      v358 = 2082;
                                      v359 = v325;
                                      v360 = 2082;
                                      v361 = (void *)v198;
                                      v362 = 2082;
                                      v363 = v200;
                                      v364 = 2082;
                                      v365 = v201;
                                      v366 = 2114;
                                      v367 = v202;
                                      v368 = 2082;
                                      v369 = v193;
                                      _os_log_impl(&dword_182FBE000, loge, v195, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not undo new TLS insertion, dumping backtrace:%{public}s", buf, 0x52u);

                                      v194 = loge;
                                    }
                                    goto LABEL_315;
                                  }
                                  if (__nwlog_connection_log::onceToken != -1)
                                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                  v222 = (id)gconnectionLogObj;
                                  v232 = type[0];
                                  if (os_log_type_enabled(v222, type[0]))
                                  {
                                    logg = v222;
                                    v233 = nw_endpoint_handler_get_id_string(v45);
                                    v234 = nw_endpoint_handler_dry_run_string(v45);
                                    v235 = nw_endpoint_handler_copy_endpoint(v45);
                                    v236 = nw_endpoint_get_logging_description(v235);
                                    v237 = v45;
                                    v238 = nw_endpoint_handler_state_string(v45);
                                    v239 = nw_endpoint_handler_mode_string(v237);
                                    v240 = nw_endpoint_handler_copy_current_path(v237);
                                    *(_DWORD *)buf = 136447746;
                                    v355 = "nw_endpoint_start_tls_while_connected";
                                    v356 = 2082;
                                    v357 = (char *)v233;
                                    v358 = 2082;
                                    v359 = v234;
                                    v360 = 2082;
                                    v361 = (void *)v236;
                                    v362 = 2082;
                                    v363 = v238;
                                    v364 = 2082;
                                    v365 = v239;
                                    v366 = 2114;
                                    v367 = v240;
                                    _os_log_impl(&dword_182FBE000, logg, v232, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not undo new TLS insertion, no backtrace", buf, 0x48u);

                                    v222 = logg;
                                  }
                                }
                                else
                                {
                                  if (__nwlog_connection_log::onceToken != -1)
                                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                                  v222 = (id)gconnectionLogObj;
                                  v223 = type[0];
                                  if (os_log_type_enabled(v222, type[0]))
                                  {
                                    logf = v222;
                                    v224 = nw_endpoint_handler_get_id_string(v45);
                                    v225 = nw_endpoint_handler_dry_run_string(v45);
                                    v226 = nw_endpoint_handler_copy_endpoint(v45);
                                    v227 = nw_endpoint_get_logging_description(v226);
                                    v228 = v45;
                                    v229 = nw_endpoint_handler_state_string(v45);
                                    v230 = nw_endpoint_handler_mode_string(v228);
                                    v231 = nw_endpoint_handler_copy_current_path(v228);
                                    *(_DWORD *)buf = 136447746;
                                    v355 = "nw_endpoint_start_tls_while_connected";
                                    v356 = 2082;
                                    v357 = (char *)v224;
                                    v358 = 2082;
                                    v359 = v225;
                                    v360 = 2082;
                                    v361 = (void *)v227;
                                    v362 = 2082;
                                    v363 = v229;
                                    v364 = 2082;
                                    v365 = v230;
                                    v366 = 2114;
                                    v367 = v231;
                                    _os_log_impl(&dword_182FBE000, logf, v223, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to repair protocol stack: Could not undo new TLS insertion, backtrace limit exceeded", buf, 0x48u);

                                    v222 = logf;
                                  }
                                }
                                goto LABEL_325;
                              }
LABEL_326:
                              if (v178)
                                free(v178);
                              goto LABEL_197;
                            }
LABEL_213:
                            nw::release_if_needed<nw_protocol *>(&v350);
                            goto LABEL_214;
                          }
                        }
                        else if ((v353 & 1) == 0)
                        {
                          goto LABEL_161;
                        }
                        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                        goto LABEL_161;
                      }
LABEL_157:
                      nw::release_if_needed<nw_protocol *>((uint64_t *)v347);
                      goto LABEL_158;
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v111 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446466;
                      v355 = "nw_protocol_utilities_add_input_handler";
                      v356 = 2048;
                      v357 = (char *)internal;
                      _os_log_impl(&dword_182FBE000, v111, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
                    }

                  }
LABEL_191:
                  if ((nw_endpoint_handler_get_logging_disabled(v45) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v143 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
                    {
                      v144 = nw_endpoint_handler_get_id_string(v45);
                      v145 = nw_endpoint_handler_dry_run_string(v45);
                      v146 = nw_endpoint_handler_copy_endpoint(v45);
                      v147 = nw_endpoint_get_logging_description(v146);
                      v148 = v45;
                      v149 = nw_endpoint_handler_state_string(v45);
                      v150 = nw_endpoint_handler_mode_string(v148);
                      v151 = nw_endpoint_handler_copy_current_path(v148);
                      *(_DWORD *)buf = 136447746;
                      v355 = "nw_endpoint_start_tls_while_connected";
                      v356 = 2082;
                      v357 = (char *)v144;
                      v358 = 2082;
                      v359 = v145;
                      v360 = 2082;
                      v361 = (void *)v147;
                      v362 = 2082;
                      v363 = v149;
                      v364 = 2082;
                      v365 = v150;
                      v366 = 2114;
                      v367 = v151;
                      _os_log_impl(&dword_182FBE000, v143, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach TLS protocol", buf, 0x48u);

                    }
                  }
                  goto LABEL_197;
                }
                __nwlog_obj();
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136446466;
                v355 = "nw_protocol_utilities_add_input_handler";
                v356 = 2048;
                v357 = (char *)v49;
                v108 = (char *)_os_log_send_and_compose_impl();

                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(v350) = 0;
                if (__nwlog_fault(v108, type, &v350))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v109 = objc_claimAutoreleasedReturnValue();
                    v110 = type[0];
                    if (os_log_type_enabled(v109, type[0]))
                    {
                      *(_DWORD *)buf = 136446466;
                      v355 = "nw_protocol_utilities_add_input_handler";
                      v356 = 2048;
                      v357 = (char *)v49;
                      _os_log_impl(&dword_182FBE000, v109, v110, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
                    }
                  }
                  else
                  {
                    if ((_BYTE)v350)
                    {
                      v112 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v113 = objc_claimAutoreleasedReturnValue();
                      v114 = type[0];
                      v115 = os_log_type_enabled(v113, type[0]);
                      if (v112)
                      {
                        if (v115)
                        {
                          *(_DWORD *)buf = 136446722;
                          v355 = "nw_protocol_utilities_add_input_handler";
                          v356 = 2048;
                          v357 = (char *)v49;
                          v358 = 2082;
                          v359 = v112;
                          _os_log_impl(&dword_182FBE000, v113, v114, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
                        }

                        free(v112);
                      }
                      else
                      {
                        if (v115)
                        {
                          *(_DWORD *)buf = 136446466;
                          v355 = "nw_protocol_utilities_add_input_handler";
                          v356 = 2048;
                          v357 = (char *)v49;
                          _os_log_impl(&dword_182FBE000, v113, v114, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
                        }

                      }
                      goto LABEL_189;
                    }
                    __nwlog_obj();
                    v109 = objc_claimAutoreleasedReturnValue();
                    v142 = type[0];
                    if (os_log_type_enabled(v109, type[0]))
                    {
                      *(_DWORD *)buf = 136446466;
                      v355 = "nw_protocol_utilities_add_input_handler";
                      v356 = 2048;
                      v357 = (char *)v49;
                      _os_log_impl(&dword_182FBE000, v109, v142, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
                    }
                  }

                }
LABEL_189:
                if (v108)
                  free(v108);
                goto LABEL_191;
              }
              if ((nw_endpoint_handler_get_logging_disabled(v45) & 1) != 0)
                goto LABEL_197;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v63 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              {
                v99 = nw_endpoint_handler_get_id_string(v45);
                v100 = nw_endpoint_handler_dry_run_string(v45);
                v101 = nw_endpoint_handler_copy_endpoint(v45);
                v102 = nw_endpoint_get_logging_description(v101);
                v103 = v45;
                v104 = nw_endpoint_handler_state_string(v45);
                v105 = nw_endpoint_handler_mode_string(v103);
                v106 = nw_endpoint_handler_copy_current_path(v103);
                *(_DWORD *)buf = 136447746;
                v355 = "nw_endpoint_start_tls_while_connected";
                v356 = 2082;
                v357 = (char *)v99;
                v358 = 2082;
                v359 = v100;
                v360 = 2082;
                v361 = (void *)v102;
                v362 = 2082;
                v363 = v104;
                v364 = 2082;
                v365 = v105;
                v366 = 2114;
                v367 = v106;
                _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to find TLS protocol handler", buf, 0x48u);

              }
            }
            else
            {
              if ((nw_endpoint_handler_get_logging_disabled(v45) & 1) != 0)
                goto LABEL_197;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v63 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              {
                v91 = nw_endpoint_handler_get_id_string(v45);
                v92 = nw_endpoint_handler_dry_run_string(v45);
                v93 = nw_endpoint_handler_copy_endpoint(v45);
                v94 = nw_endpoint_get_logging_description(v93);
                v95 = v45;
                v96 = nw_endpoint_handler_state_string(v45);
                v97 = nw_endpoint_handler_mode_string(v45);
                v98 = nw_endpoint_handler_copy_current_path(v95);
                *(_DWORD *)buf = 136447746;
                v355 = "nw_endpoint_start_tls_while_connected";
                v356 = 2082;
                v357 = (char *)v91;
                v358 = 2082;
                v359 = v92;
                v360 = 2082;
                v361 = (void *)v94;
                v362 = 2082;
                v363 = v96;
                v364 = 2082;
                v365 = v97;
                v366 = 2114;
                v367 = v98;
                _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to find TLS protocol identifier", buf, 0x48u);

              }
            }
          }
          else
          {
            v74 = v44;
            v75 = (*((_BYTE *)v74 + 268) & 0x20) == 0;

            if (!v75)
              goto LABEL_197;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v63 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
            {
              v76 = nw_endpoint_handler_get_id_string(v74);
              v77 = nw_endpoint_handler_dry_run_string(v74);
              v78 = nw_endpoint_handler_copy_endpoint(v74);
              v79 = nw_endpoint_get_logging_description(v78);
              v80 = nw_endpoint_handler_state_string(v74);
              v81 = nw_endpoint_handler_mode_string(v74);
              v82 = nw_endpoint_handler_copy_current_path(v74);
              *(_DWORD *)buf = 136447746;
              v355 = "nw_endpoint_start_tls_while_connected";
              v356 = 2082;
              v357 = (char *)v76;
              v358 = 2082;
              v359 = v77;
              v360 = 2082;
              v361 = (void *)v79;
              v362 = 2082;
              v363 = v80;
              v364 = 2082;
              v365 = v81;
              v366 = 2114;
              v367 = v82;
              _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No previous output handler on flow", buf, 0x48u);

            }
          }
        }
        else
        {
          v61 = v44;
          v62 = (*((_BYTE *)v61 + 268) & 0x20) == 0;

          if (!v62)
            goto LABEL_197;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v63 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
          {
            v64 = v61;

            v65 = v64;
            v66 = (*((_BYTE *)v61 + 268) & 1) == 0;

            if (v66)
              v67 = "";
            else
              v67 = "dry-run ";
            v68 = nw_endpoint_handler_copy_endpoint(v65);
            v69 = nw_endpoint_get_logging_description(v68);
            v70 = v65;
            v71 = v70;
            v72 = v39->state;
            if (v72 > 5)
              v73 = "unknown-state";
            else
              v73 = off_1E149FC48[v72];

            v83 = v71;
            v84 = v83;
            v85 = "path";
            switch(v3[29])
            {
              case 0u:
                break;
              case 1u:
                v85 = "resolver";
                break;
              case 2u:
                v85 = nw_endpoint_flow_mode_string(v83[31]);
                break;
              case 3u:
                v85 = "proxy";
                break;
              case 4u:
                v85 = "fallback";
                break;
              case 5u:
                v85 = "transform";
                break;
              default:
                v85 = "unknown-mode";
                break;
            }

            v116 = v84;
            os_unfair_lock_lock((os_unfair_lock_t)v116 + 28);
            v117 = v116[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v116 + 28);

            *(_DWORD *)buf = 136447746;
            v355 = "nw_endpoint_start_tls_while_connected";
            v356 = 2082;
            v357 = (char *)(v64 + 21);
            v358 = 2082;
            v359 = v67;
            v360 = 2082;
            v361 = (void *)v69;
            v362 = 2082;
            v363 = v73;
            v364 = 2082;
            v365 = v85;
            v366 = 2114;
            v367 = v117;
            _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] TLS is not configured", buf, 0x48u);

          }
        }

        goto LABEL_197;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v7 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v207 = nw_endpoint_handler_get_id_string(v3);
        v208 = nw_endpoint_handler_dry_run_string(v3);
        v209 = nw_endpoint_handler_copy_endpoint(v3);
        v210 = nw_endpoint_get_logging_description(v209);
        v211 = nw_endpoint_handler_state_string(v3);
        v212 = nw_endpoint_handler_mode_string(v3);
        v213 = nw_endpoint_handler_copy_current_path(v3);
        *(_DWORD *)buf = 136447746;
        v355 = "nw_endpoint_start_tls_while_connected";
        v356 = 2082;
        v357 = (char *)v207;
        v358 = 2082;
        v359 = v208;
        v360 = 2082;
        v361 = (void *)v210;
        v362 = 2082;
        v363 = v211;
        v364 = 2082;
        v365 = v212;
        v366 = 2114;
        v367 = v213;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

      }
    }
    else
    {
      v5 = v3;
      v6 = *((_BYTE *)v5 + 268);

      if ((v6 & 0x20) != 0)
        goto LABEL_45;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v7 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = v5;

        v9 = v8;
        v10 = *((_BYTE *)v5 + 268);

        if ((v10 & 1) != 0)
          v11 = "dry-run ";
        else
          v11 = "";
        v12 = nw_endpoint_handler_copy_endpoint(v9);
        v13 = nw_endpoint_get_logging_description(v12);
        v14 = (char *)(v8 + 42);
        v15 = v9;
        v16 = v15;
        v17 = v15[30];
        if (v17 > 5)
          v18 = "unknown-state";
        else
          v18 = off_1E149FC48[v17];

        v30 = v16;
        v31 = v30;
        v343 = v12;
        v32 = "path";
        switch(v3[29])
        {
          case 0u:
            break;
          case 1u:
            v32 = "resolver";
            break;
          case 2u:
            v32 = nw_endpoint_flow_mode_string(v30[31]);
            break;
          case 3u:
            v32 = "proxy";
            break;
          case 4u:
            v32 = "fallback";
            break;
          case 5u:
            v32 = "transform";
            break;
          default:
            v32 = "unknown-mode";
            break;
        }

        v36 = v31;
        os_unfair_lock_lock((os_unfair_lock_t)v36 + 28);
        v37 = v36[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v36 + 28);

        v38 = v37;
        *(_DWORD *)buf = 136447746;
        v355 = "nw_endpoint_start_tls_while_connected";
        v356 = 2082;
        v357 = v14;
        v358 = 2082;
        v359 = v11;
        v360 = 2082;
        v361 = (void *)v13;
        v362 = 2082;
        v363 = v18;
        v364 = 2082;
        v365 = v32;
        v366 = 2114;
        v367 = v38;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

      }
    }

    goto LABEL_45;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v19 = (id)gLogObj;
  v20 = v2;
  if (v4 > 5)
    v21 = "unknown-mode";
  else
    v21 = off_1E149FC18[v4];
  *(_DWORD *)buf = 136446722;
  v355 = "nw_endpoint_start_tls_while_connected";
  v356 = 2082;
  v357 = (char *)v21;
  v358 = 2082;
  v359 = "flow";
  v22 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v350) = 0;
  if (__nwlog_fault(v22, type, &v350))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v24 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        if (v4 > 5)
          v25 = "unknown-mode";
        else
          v25 = off_1E149FC18[v4];
        *(_DWORD *)buf = 136446722;
        v355 = "nw_endpoint_start_tls_while_connected";
        v356 = 2082;
        v357 = (char *)v25;
        v358 = 2082;
        v359 = "flow";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    else if ((_BYTE)v350)
    {
      v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v27 = type[0];
      v28 = os_log_type_enabled(v23, type[0]);
      if (v26)
      {
        if (v28)
        {
          if (v4 > 5)
            v29 = "unknown-mode";
          else
            v29 = off_1E149FC18[v4];
          *(_DWORD *)buf = 136446978;
          v355 = "nw_endpoint_start_tls_while_connected";
          v356 = 2082;
          v357 = (char *)v29;
          v358 = 2082;
          v359 = "flow";
          v360 = 2082;
          v361 = v26;
          _os_log_impl(&dword_182FBE000, v23, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v26);
        if (!v22)
          goto LABEL_95;
        goto LABEL_94;
      }
      if (v28)
      {
        if (v4 > 5)
          v35 = "unknown-mode";
        else
          v35 = off_1E149FC18[v4];
        *(_DWORD *)buf = 136446722;
        v355 = "nw_endpoint_start_tls_while_connected";
        v356 = 2082;
        v357 = (char *)v35;
        v358 = 2082;
        v359 = "flow";
        _os_log_impl(&dword_182FBE000, v23, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v33 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        if (v4 > 5)
          v34 = "unknown-mode";
        else
          v34 = off_1E149FC18[v4];
        *(_DWORD *)buf = 136446722;
        v355 = "nw_endpoint_start_tls_while_connected";
        v356 = 2082;
        v357 = (char *)v34;
        v358 = 2082;
        v359 = "flow";
        _os_log_impl(&dword_182FBE000, v23, v33, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

  }
  if (v22)
LABEL_94:
    free(v22);
LABEL_95:
  started = 0;
LABEL_201:

  return started;
}

void sub_183AD8B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_channel(void *a1)
{
  id v1;
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  NWConcrete_nw_endpoint_handler *v5;
  OS_nw_parameters *v6;
  id v7;
  NWConcrete_nw_endpoint_mode_handler *v8;
  NWConcrete_nw_endpoint_mode_handler *v9;
  id v10;
  id v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  const char *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_endpoint_handler_copy_channel";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_handler_copy_channel";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v29 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_endpoint_handler_copy_channel";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_43;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_handler_copy_channel";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_handler_copy_channel";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  v3 = (unsigned int *)v1;
  v4 = v3[29];

  if ((_DWORD)v4 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (v4 > 5)
      v12 = "unknown-mode";
    else
      v12 = off_1E149FC18[v4];
    *(_DWORD *)buf = 136446722;
    v34 = "nw_endpoint_handler_copy_channel";
    v35 = 2082;
    v36 = (void *)v12;
    v37 = 2082;
    v38 = "flow";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v13, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          if (v4 > 5)
            v16 = "unknown-mode";
          else
            v16 = off_1E149FC18[v4];
          *(_DWORD *)buf = 136446722;
          v34 = "nw_endpoint_handler_copy_channel";
          v35 = 2082;
          v36 = (void *)v16;
          v37 = 2082;
          v38 = "flow";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v31)
      {
        v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v18 = type;
        v19 = os_log_type_enabled(v14, type);
        if (v17)
        {
          if (v19)
          {
            if (v4 > 5)
              v20 = "unknown-mode";
            else
              v20 = off_1E149FC18[v4];
            *(_DWORD *)buf = 136446978;
            v34 = "nw_endpoint_handler_copy_channel";
            v35 = 2082;
            v36 = (void *)v20;
            v37 = 2082;
            v38 = "flow";
            v39 = 2082;
            v40 = v17;
            _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v17);
          if (!v13)
            goto LABEL_45;
          goto LABEL_44;
        }
        if (v19)
        {
          if (v4 > 5)
            v23 = "unknown-mode";
          else
            v23 = off_1E149FC18[v4];
          *(_DWORD *)buf = 136446722;
          v34 = "nw_endpoint_handler_copy_channel";
          v35 = 2082;
          v36 = (void *)v23;
          v37 = 2082;
          v38 = "flow";
          _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v21 = type;
        if (os_log_type_enabled(v14, type))
        {
          if (v4 > 5)
            v22 = "unknown-mode";
          else
            v22 = off_1E149FC18[v4];
          *(_DWORD *)buf = 136446722;
          v34 = "nw_endpoint_handler_copy_channel";
          v35 = 2082;
          v36 = (void *)v22;
          v37 = 2082;
          v38 = "flow";
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
      goto LABEL_42;
    }
LABEL_43:
    if (!v13)
    {
LABEL_45:
      v10 = 0;
      goto LABEL_46;
    }
LABEL_44:
    free(v13);
    goto LABEL_45;
  }
  v5 = v3;
  v6 = v5->parameters;

  v7 = nw_parameters_copy_context(v6);
  nw_context_assert_queue(v7);

  v8 = nw_endpoint_handler_copy_flow(v5);
  v9 = v8;
  if ((*((_BYTE *)v8 + 32) & 2) != 0 || (*((_BYTE *)v8 + 33) & 1) != 0)
  {
    v10 = *((id *)v8 + 113);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)v8 + 220);
    if (*((_QWORD *)v9 + 117))
      v10 = (id)nw_endpoint_handler_copy_channel();
    else
      v10 = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)v9 + 220);
  }

LABEL_46:
  return v10;
}

void sub_183AD94AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_remove_all_interface_options(void *a1)
{
  id v1;
  id v2;
  NWConcrete_nw_endpoint_handler *v3;
  uint64_t mode;
  _QWORD *v5;
  NWConcrete_nw_endpoint_handler *v6;
  char v7;
  NSObject *v8;
  NWConcrete_nw_endpoint_handler *v9;
  NWConcrete_nw_endpoint_handler *v10;
  char v11;
  const char *v12;
  nw_endpoint_t v13;
  const char *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  id v19;
  void *v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  const char *v29;
  void **v30;
  void **v31;
  const char *v32;
  os_log_type_t v33;
  const char *v34;
  const char *v35;
  void **v36;
  id v37;
  NWConcrete_nw_endpoint_mode_handler *v38;
  void *v39;
  NSObject *v40;
  const char *v41;
  id v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  id v46;
  void *v47;
  void *v48;
  char v49;
  NWConcrete_nw_endpoint_handler *v50;
  _BOOL4 v51;
  NWConcrete_nw_endpoint_handler *v52;
  NWConcrete_nw_endpoint_handler *v53;
  _BOOL4 v54;
  const char *v55;
  nw_endpoint_t v56;
  const char *v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(const char *, char *, id);
  void **v68;
  const char *v69;
  NWConcrete_nw_endpoint_handler *v70;
  NSObject *v71;
  nw_endpoint_t v72;
  const char *v73;
  const char *v74;
  const char *v75;
  void **v76;
  id v77;
  const char *v78;
  nw_endpoint_t v79;
  void *v80;
  NSObject *v81;
  os_log_type_t v82;
  const char *v83;
  const char *v84;
  nw_endpoint_t v85;
  const char *v86;
  const char *v87;
  const char *v88;
  id v89;
  char *backtrace_string;
  os_log_type_t v91;
  _BOOL4 v92;
  void *v93;
  const char *v94;
  char *v95;
  char *v96;
  NSObject *v97;
  os_log_type_t v98;
  const char *v99;
  os_log_type_t v100;
  const char *id_string;
  const char *v102;
  nw_endpoint_t v103;
  const char *logging_description;
  const char *v105;
  const char *v106;
  id v107;
  void *v108;
  NSObject *v109;
  os_log_type_t v110;
  char *v111;
  NSObject *v112;
  _BOOL4 v113;
  const char *v114;
  char *v115;
  os_log_type_t v116;
  _BOOL4 v117;
  os_log_type_t v118;
  const char *v119;
  const char *v120;
  os_log_type_t v121;
  os_log_type_t v122;
  char *v123;
  const char *v124;
  void *v125;
  char v126;
  os_log_type_t v127;
  uint64_t v128;
  char v129;
  os_log_type_t type[8];
  char v131;
  uint8_t buf[4];
  const char *v133;
  __int16 v134;
  void *id_str;
  __int16 v136;
  const char *v137;
  __int16 v138;
  void *v139;
  __int16 v140;
  const char *v141;
  __int16 v142;
  const char *v143;
  __int16 v144;
  id v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v133 = "nw_endpoint_handler_remove_all_interface_options";
    v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v128) = 0;
    if (!__nwlog_fault(v22, type, &v128))
      goto LABEL_158;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v81 = objc_claimAutoreleasedReturnValue();
      v82 = type[0];
      if (os_log_type_enabled(v81, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_endpoint_handler_remove_all_interface_options";
        _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if ((_BYTE)v128)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v81 = objc_claimAutoreleasedReturnValue();
      v91 = type[0];
      v92 = os_log_type_enabled(v81, type[0]);
      if (backtrace_string)
      {
        if (v92)
        {
          *(_DWORD *)buf = 136446466;
          v133 = "nw_endpoint_handler_remove_all_interface_options";
          v134 = 2082;
          id_str = backtrace_string;
          _os_log_impl(&dword_182FBE000, v81, v91, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_158:
        v20 = 0;
        if (!v22)
          goto LABEL_109;
        goto LABEL_100;
      }
      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_endpoint_handler_remove_all_interface_options";
        _os_log_impl(&dword_182FBE000, v81, v91, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v81 = objc_claimAutoreleasedReturnValue();
      v100 = type[0];
      if (os_log_type_enabled(v81, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_endpoint_handler_remove_all_interface_options";
        _os_log_impl(&dword_182FBE000, v81, v100, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_158;
  }
  v3 = (NWConcrete_nw_endpoint_handler *)v1;
  mode = v3->mode;

  if ((_DWORD)mode == 2)
  {
    v125 = v2;
    v5 = &unk_1ECD84000;
    if (nw_endpoint_handler_get_minimize_logging(v3))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) != 0)
      {
LABEL_45:
        v38 = nw_endpoint_handler_copy_flow(v3);
        v39 = (void *)*((_QWORD *)v38 + 104);
        if (v39)
        {
          nw_path_flow_registration_remove_all_interface_options(v39);
          v40 = nw_path_flow_registration_copy_path(*((void **)v38 + 104));
          os_unfair_lock_lock((os_unfair_lock_t)v38 + 220);
          objc_storeStrong((id *)v38 + 2, v40);
          if ((*((_BYTE *)v38 + 33) & 4) != 0)
            objc_storeStrong((id *)v38 + 1, v40);
          os_unfair_lock_unlock((os_unfair_lock_t)v38 + 220);
          v41 = (const char *)*((_QWORD *)v38 + 51);
          v42 = *((id *)v38 + 2);
          if (v41 && (v43 = *((_QWORD *)v41 + 3)) != 0)
          {
            if (*(_QWORD *)(v43 + 168))
              v44 = v42 == 0;
            else
              v44 = 1;
            v45 = !v44;

            if (v45)
            {
              v46 = *((id *)v38 + 2);
              v47 = v46;
              v48 = (void *)*((_QWORD *)v41 + 5);
              if (v48 == &nw_protocol_ref_counted_handle)
              {
                v62 = *((_QWORD *)v41 + 11);
                if (v62)
                  *((_QWORD *)v41 + 11) = v62 + 1;
                v49 = -1;
              }
              else
              {
                v49 = 0;
              }
              *(_QWORD *)type = v41;
              v131 = v49;
              v63 = (void *)*((_QWORD *)v38 + 52);
              if (v63 == &nw_protocol_ref_counted_handle)
              {
                v65 = *((_QWORD *)v38 + 58);
                if (v65)
                  *((_QWORD *)v38 + 58) = v65 + 1;
                v64 = -1;
              }
              else
              {
                v64 = 0;
              }
              v128 = (uint64_t)v38 + 376;
              v129 = v64;
              if (v46)
              {
                v66 = *((_QWORD *)v41 + 3);
                if (v66)
                {
                  v67 = *(void (**)(const char *, char *, id))(v66 + 168);
                  if (v67)
                  {
                    v67(v41, (char *)v38 + 376, v46);
LABEL_81:
                    if (v63 == &nw_protocol_ref_counted_handle)
                      nw::release_if_needed<nw_protocol *>(&v128);
                    if (v48 == &nw_protocol_ref_counted_handle)
                      nw::release_if_needed<nw_protocol *>((uint64_t *)type);

                    goto LABEL_107;
                  }
                }
                __nwlog_obj();
                v93 = (void *)objc_claimAutoreleasedReturnValue();
                v94 = (const char *)*((_QWORD *)v41 + 2);
                *(_DWORD *)buf = 136446722;
                v133 = "__nw_protocol_updated_path";
                if (!v94)
                  v94 = "invalid";
                v134 = 2082;
                id_str = (void *)v94;
                v136 = 2048;
                v137 = v41;
                v95 = (char *)_os_log_send_and_compose_impl();

                v127 = OS_LOG_TYPE_ERROR;
                v126 = 0;
                if (!__nwlog_fault(v95, &v127, &v126))
                  goto LABEL_177;
                v96 = v95;
                if (v127 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v97 = objc_claimAutoreleasedReturnValue();
                  v98 = v127;
                  if (os_log_type_enabled(v97, v127))
                  {
                    v99 = (const char *)*((_QWORD *)v41 + 2);
                    if (!v99)
                      v99 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v133 = "__nw_protocol_updated_path";
                    v134 = 2082;
                    id_str = (void *)v99;
                    v136 = 2048;
                    v137 = v41;
                    _os_log_impl(&dword_182FBE000, v97, v98, "%{public}s protocol %{public}s (%p) has invalid updated_path callback", buf, 0x20u);
                  }
LABEL_134:

LABEL_176:
                  v95 = v96;
                  goto LABEL_177;
                }
                if (!v126)
                {
                  __nwlog_obj();
                  v97 = objc_claimAutoreleasedReturnValue();
                  v118 = v127;
                  if (os_log_type_enabled(v97, v127))
                  {
                    v119 = (const char *)*((_QWORD *)v41 + 2);
                    if (!v119)
                      v119 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v133 = "__nw_protocol_updated_path";
                    v134 = 2082;
                    id_str = (void *)v119;
                    v136 = 2048;
                    v137 = v41;
                    _os_log_impl(&dword_182FBE000, v97, v118, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded", buf, 0x20u);
                  }
                  goto LABEL_134;
                }
                v111 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v112 = objc_claimAutoreleasedReturnValue();
                v122 = v127;
                v113 = os_log_type_enabled(v112, v127);
                if (!v111)
                {
                  if (v113)
                  {
                    v120 = (const char *)*((_QWORD *)v41 + 2);
                    if (!v120)
                      v120 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    v133 = "__nw_protocol_updated_path";
                    v134 = 2082;
                    id_str = (void *)v120;
                    v136 = 2048;
                    v137 = v41;
                    _os_log_impl(&dword_182FBE000, v112, v122, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace", buf, 0x20u);
                  }

                  goto LABEL_176;
                }
                if (v113)
                {
                  v114 = (const char *)*((_QWORD *)v41 + 2);
                  if (!v114)
                    v114 = "invalid";
                  *(_DWORD *)buf = 136446978;
                  v133 = "__nw_protocol_updated_path";
                  v134 = 2082;
                  id_str = (void *)v114;
                  v136 = 2048;
                  v137 = v41;
                  v138 = 2082;
                  v139 = v111;
                  _os_log_impl(&dword_182FBE000, v112, v122, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
                }

                v95 = v96;
                free(v111);
              }
              else
              {
                __nwlog_obj();
                v108 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_updated_path";
                v95 = (char *)_os_log_send_and_compose_impl();

                v127 = OS_LOG_TYPE_ERROR;
                v126 = 0;
                if (__nwlog_fault(v95, &v127, &v126))
                {
                  if (v127 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v109 = objc_claimAutoreleasedReturnValue();
                    v110 = v127;
                    if (os_log_type_enabled(v109, v127))
                    {
                      *(_DWORD *)buf = 136446210;
                      v133 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_182FBE000, v109, v110, "%{public}s called with null path", buf, 0xCu);
                    }
                  }
                  else if (v126)
                  {
                    v115 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v109 = objc_claimAutoreleasedReturnValue();
                    v116 = v127;
                    v117 = os_log_type_enabled(v109, v127);
                    if (v115)
                    {
                      if (v117)
                      {
                        *(_DWORD *)buf = 136446466;
                        v133 = "__nw_protocol_updated_path";
                        v134 = 2082;
                        id_str = v115;
                        _os_log_impl(&dword_182FBE000, v109, v116, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(v115);
                      if (!v95)
                        goto LABEL_81;
                      goto LABEL_178;
                    }
                    if (v117)
                    {
                      *(_DWORD *)buf = 136446210;
                      v133 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_182FBE000, v109, v116, "%{public}s called with null path, no backtrace", buf, 0xCu);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v109 = objc_claimAutoreleasedReturnValue();
                    v121 = v127;
                    if (os_log_type_enabled(v109, v127))
                    {
                      *(_DWORD *)buf = 136446210;
                      v133 = "__nw_protocol_updated_path";
                      _os_log_impl(&dword_182FBE000, v109, v121, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
                    }
                  }

                }
              }
LABEL_177:
              if (!v95)
                goto LABEL_81;
LABEL_178:
              free(v95);
              goto LABEL_81;
            }
          }
          else
          {

          }
        }
        else if (nw_endpoint_handler_get_minimize_logging(v3))
        {
          if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) != 0)
            goto LABEL_108;
          if (v5[413] != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v40 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            id_string = nw_endpoint_handler_get_id_string(v3);
            v102 = nw_endpoint_handler_dry_run_string(v3);
            v103 = nw_endpoint_handler_copy_endpoint(v3);
            logging_description = nw_endpoint_get_logging_description(v103);
            v105 = nw_endpoint_handler_state_string(v3);
            v106 = nw_endpoint_handler_mode_string(v3);
            v107 = nw_endpoint_handler_copy_current_path(v3);
            *(_DWORD *)buf = 136447746;
            v133 = "nw_endpoint_handler_remove_all_interface_options";
            v134 = 2082;
            id_str = (void *)id_string;
            v136 = 2082;
            v137 = v102;
            v138 = 2082;
            v139 = (void *)logging_description;
            v140 = 2082;
            v141 = v105;
            v142 = 2082;
            v143 = v106;
            v144 = 2114;
            v145 = v107;
            _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping removing all interface option details, no active flow registration", buf, 0x48u);

          }
        }
        else
        {
          v50 = v3;
          v51 = (*((_BYTE *)v50 + 268) & 0x20) == 0;

          if (!v51)
          {
LABEL_108:

            v20 = v125;
            goto LABEL_109;
          }
          if (v5[413] != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v40 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            v52 = v50;

            v53 = v52;
            v54 = (*((_BYTE *)v50 + 268) & 1) == 0;

            if (v54)
              v55 = "";
            else
              v55 = "dry-run ";
            v56 = nw_endpoint_handler_copy_endpoint(v53);
            v57 = nw_endpoint_get_logging_description(v56);
            v58 = v53;
            v59 = v58;
            v60 = v58[30];
            if (v60 > 5)
              v61 = "unknown-state";
            else
              v61 = off_1E149FC48[v60];

            v68 = v59;
            v69 = "path";
            switch(v3->mode)
            {
              case 0:
                break;
              case 1:
                v69 = "resolver";
                break;
              case 2:
                v69 = nw_endpoint_flow_mode_string(v68[31]);
                break;
              case 3:
                v69 = "proxy";
                break;
              case 4:
                v69 = "fallback";
                break;
              case 5:
                v69 = "transform";
                break;
              default:
                v69 = "unknown-mode";
                break;
            }
            v124 = v69;

            v70 = v52;
            v71 = v40;
            v72 = v56;
            v73 = v61;
            v74 = v55;
            v75 = v57;
            v76 = v68;
            os_unfair_lock_lock((os_unfair_lock_t)v76 + 28);
            v77 = v76[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v76 + 28);

            v78 = v75;
            v79 = v72;
            v40 = v71;
            *(_DWORD *)buf = 136447746;
            v133 = "nw_endpoint_handler_remove_all_interface_options";
            v134 = 2082;
            id_str = v70->id_str;
            v136 = 2082;
            v137 = v74;
            v138 = 2082;
            v139 = (void *)v78;
            v140 = 2082;
            v141 = v73;
            v142 = 2082;
            v143 = v124;
            v144 = 2114;
            v145 = v77;
            _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping removing all interface option details, no active flow registration", buf, 0x48u);

          }
        }
LABEL_107:

        goto LABEL_108;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v83 = nw_endpoint_handler_get_id_string(v3);
        v84 = nw_endpoint_handler_dry_run_string(v3);
        v85 = nw_endpoint_handler_copy_endpoint(v3);
        v86 = nw_endpoint_get_logging_description(v85);
        v87 = nw_endpoint_handler_state_string(v3);
        v88 = nw_endpoint_handler_mode_string(v3);
        v89 = nw_endpoint_handler_copy_current_path(v3);
        *(_DWORD *)buf = 136447746;
        v133 = "nw_endpoint_handler_remove_all_interface_options";
        v134 = 2082;
        id_str = (void *)v83;
        v136 = 2082;
        v137 = v84;
        v138 = 2082;
        v139 = (void *)v86;
        v140 = 2082;
        v141 = v87;
        v142 = 2082;
        v143 = v88;
        v144 = 2114;
        v145 = v89;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Removing all interface option details", buf, 0x48u);

        v5 = (_QWORD *)&unk_1ECD84000;
      }
    }
    else
    {
      v6 = v3;
      v7 = *((_BYTE *)v6 + 268);

      if ((v7 & 0x20) != 0)
        goto LABEL_45;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = v6;

        v10 = v9;
        v11 = *((_BYTE *)v6 + 268);

        if ((v11 & 1) != 0)
          v12 = "dry-run ";
        else
          v12 = "";
        v13 = nw_endpoint_handler_copy_endpoint(v10);
        v14 = nw_endpoint_get_logging_description(v13);
        v123 = v9->id_str;
        v15 = v10;
        v16 = v15;
        v17 = v15[30];
        if (v17 > 5)
          v18 = "unknown-state";
        else
          v18 = off_1E149FC48[v17];

        v30 = v16;
        v31 = v30;
        v32 = "path";
        switch(v3->mode)
        {
          case 0:
            break;
          case 1:
            v32 = "resolver";
            break;
          case 2:
            v32 = nw_endpoint_flow_mode_string(v30[31]);
            break;
          case 3:
            v32 = "proxy";
            break;
          case 4:
            v32 = "fallback";
            break;
          case 5:
            v32 = "transform";
            break;
          default:
            v32 = "unknown-mode";
            break;
        }

        v36 = v31;
        os_unfair_lock_lock((os_unfair_lock_t)v36 + 28);
        v37 = v36[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v36 + 28);

        *(_DWORD *)buf = 136447746;
        v133 = "nw_endpoint_handler_remove_all_interface_options";
        v134 = 2082;
        id_str = v123;
        v136 = 2082;
        v137 = v12;
        v138 = 2082;
        v139 = (void *)v14;
        v140 = 2082;
        v141 = v18;
        v142 = 2082;
        v143 = v32;
        v144 = 2114;
        v145 = v37;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Removing all interface option details", buf, 0x48u);

        v5 = &unk_1ECD84000;
      }
    }

    goto LABEL_45;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v19 = (id)gLogObj;
  v20 = v2;
  if (mode > 5)
    v21 = "unknown-mode";
  else
    v21 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v133 = "nw_endpoint_handler_remove_all_interface_options";
  v134 = 2082;
  id_str = (void *)v21;
  v136 = 2082;
  v137 = "flow";
  v22 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v128) = 0;
  if (__nwlog_fault(v22, type, &v128))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v24 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        if (mode > 5)
          v25 = "unknown-mode";
        else
          v25 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v133 = "nw_endpoint_handler_remove_all_interface_options";
        v134 = 2082;
        id_str = (void *)v25;
        v136 = 2082;
        v137 = "flow";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    else if ((_BYTE)v128)
    {
      v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v27 = type[0];
      v28 = os_log_type_enabled(v23, type[0]);
      if (v26)
      {
        if (v28)
        {
          if (mode > 5)
            v29 = "unknown-mode";
          else
            v29 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446978;
          v133 = "nw_endpoint_handler_remove_all_interface_options";
          v134 = 2082;
          id_str = (void *)v29;
          v136 = 2082;
          v137 = "flow";
          v138 = 2082;
          v139 = v26;
          _os_log_impl(&dword_182FBE000, v23, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v26);
        if (v22)
          goto LABEL_100;
        goto LABEL_109;
      }
      if (v28)
      {
        if (mode > 5)
          v35 = "unknown-mode";
        else
          v35 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v133 = "nw_endpoint_handler_remove_all_interface_options";
        v134 = 2082;
        id_str = (void *)v35;
        v136 = 2082;
        v137 = "flow";
        _os_log_impl(&dword_182FBE000, v23, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v33 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        if (mode > 5)
          v34 = "unknown-mode";
        else
          v34 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v133 = "nw_endpoint_handler_remove_all_interface_options";
        v134 = 2082;
        id_str = (void *)v34;
        v136 = 2082;
        v137 = "flow";
        _os_log_impl(&dword_182FBE000, v23, v33, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

  }
  if (v22)
LABEL_100:
    free(v22);
LABEL_109:

}

void sub_183ADA80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_reset_traffic_class(void *a1, int a2)
{
  id v3;
  void *v4;
  NWConcrete_nw_endpoint_handler *v5;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v7;
  void *v8;
  _DWORD *v9;
  NSObject *v10;
  const char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  char v19;
  id v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  const char *v29;
  NWConcrete_nw_endpoint_handler *v30;
  char v31;
  NWConcrete_nw_endpoint_handler *v32;
  NWConcrete_nw_endpoint_handler *v33;
  char v34;
  const char *v35;
  nw_endpoint_t v36;
  const char *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  const char *v41;
  os_log_type_t v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(const char *, char *, id);
  void **v51;
  void **v52;
  int v53;
  const char *v54;
  void **v55;
  id v56;
  void *v57;
  os_log_type_t v58;
  char *backtrace_string;
  os_log_type_t v60;
  _BOOL4 v61;
  void *v62;
  const char *v63;
  char *v64;
  NSObject *v65;
  os_log_type_t v66;
  const char *v67;
  const char *id_string;
  const char *v69;
  nw_endpoint_t v70;
  const char *logging_description;
  const char *v72;
  const char *v73;
  id v74;
  os_log_type_t v75;
  void *v76;
  NSObject *v77;
  os_log_type_t v78;
  char *v79;
  NSObject *v80;
  _BOOL4 v81;
  const char *v82;
  char *v83;
  _BOOL4 v84;
  os_log_type_t v85;
  const char *v86;
  const char *v87;
  os_log_type_t v88;
  os_log_type_t v89;
  nw_endpoint_t v90;
  os_log_type_t v91;
  char *id_str;
  const char *v93;
  char v94;
  os_log_type_t v95;
  uint64_t v96;
  char v97;
  os_log_type_t type[8];
  char v99;
  uint8_t buf[4];
  const char *v101;
  __int16 v102;
  void *v103;
  __int16 v104;
  const char *v105;
  __int16 v106;
  void *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  id v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_endpoint_handler_reset_traffic_class";
    v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v22, type, &v96))
      goto LABEL_74;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v58 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_endpoint_handler_reset_traffic_class";
        _os_log_impl(&dword_182FBE000, v23, v58, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if ((_BYTE)v96)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v60 = type[0];
      v61 = os_log_type_enabled(v23, type[0]);
      if (backtrace_string)
      {
        if (v61)
        {
          *(_DWORD *)buf = 136446466;
          v101 = "nw_endpoint_handler_reset_traffic_class";
          v102 = 2082;
          v103 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v23, v60, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_74;
      }
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_endpoint_handler_reset_traffic_class";
        _os_log_impl(&dword_182FBE000, v23, v60, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v75 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_endpoint_handler_reset_traffic_class";
        _os_log_impl(&dword_182FBE000, v23, v75, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_73:

    goto LABEL_74;
  }
  v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode == 2)
  {
    v7 = nw_endpoint_handler_copy_flow(v5);
    v8 = (void *)*((_QWORD *)v7 + 104);
    if (v8)
    {
      v9 = v8;
      v9[36] = a2;

      v10 = nw_path_flow_registration_copy_path(*((void **)v7 + 104));
      os_unfair_lock_lock((os_unfair_lock_t)v7 + 220);
      objc_storeStrong((id *)v7 + 2, v10);
      if ((*((_BYTE *)v7 + 33) & 4) != 0)
        objc_storeStrong((id *)v7 + 1, v10);
      os_unfair_lock_unlock((os_unfair_lock_t)v7 + 220);
      v11 = (const char *)*((_QWORD *)v7 + 51);
      v12 = *((id *)v7 + 2);
      v13 = v12;
      if (v11 && (v14 = *((_QWORD *)v11 + 3)) != 0)
      {
        v15 = *(_QWORD *)(v14 + 168);

        if (v15 && v13)
        {
          v16 = *((id *)v7 + 2);
          v17 = v16;
          v18 = (void *)*((_QWORD *)v11 + 5);
          if (v18 == &nw_protocol_ref_counted_handle)
          {
            v45 = *((_QWORD *)v11 + 11);
            if (v45)
              *((_QWORD *)v11 + 11) = v45 + 1;
            v19 = -1;
          }
          else
          {
            v19 = 0;
          }
          *(_QWORD *)type = v11;
          v99 = v19;
          v46 = (void *)*((_QWORD *)v7 + 52);
          if (v46 == &nw_protocol_ref_counted_handle)
          {
            v48 = *((_QWORD *)v7 + 58);
            if (v48)
              *((_QWORD *)v7 + 58) = v48 + 1;
            v47 = -1;
          }
          else
          {
            v47 = 0;
          }
          v96 = (uint64_t)v7 + 376;
          v97 = v47;
          if (!v16)
          {
            __nwlog_obj();
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v101 = "__nw_protocol_updated_path";
            v64 = (char *)_os_log_send_and_compose_impl();

            v95 = OS_LOG_TYPE_ERROR;
            v94 = 0;
            if (__nwlog_fault(v64, &v95, &v94))
            {
              if (v95 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v77 = objc_claimAutoreleasedReturnValue();
                v78 = v95;
                if (os_log_type_enabled(v77, v95))
                {
                  *(_DWORD *)buf = 136446210;
                  v101 = "__nw_protocol_updated_path";
                  _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s called with null path", buf, 0xCu);
                }
              }
              else if (v94)
              {
                v83 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v77 = objc_claimAutoreleasedReturnValue();
                v91 = v95;
                v84 = os_log_type_enabled(v77, v95);
                if (v83)
                {
                  if (v84)
                  {
                    *(_DWORD *)buf = 136446466;
                    v101 = "__nw_protocol_updated_path";
                    v102 = 2082;
                    v103 = v83;
                    _os_log_impl(&dword_182FBE000, v77, v91, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v83);
                  if (!v64)
                    goto LABEL_56;
                  goto LABEL_146;
                }
                if (v84)
                {
                  *(_DWORD *)buf = 136446210;
                  v101 = "__nw_protocol_updated_path";
                  _os_log_impl(&dword_182FBE000, v77, v91, "%{public}s called with null path, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v77 = objc_claimAutoreleasedReturnValue();
                v88 = v95;
                if (os_log_type_enabled(v77, v95))
                {
                  *(_DWORD *)buf = 136446210;
                  v101 = "__nw_protocol_updated_path";
                  _os_log_impl(&dword_182FBE000, v77, v88, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
LABEL_145:
            if (!v64)
              goto LABEL_56;
LABEL_146:
            free(v64);
            goto LABEL_56;
          }
          v49 = *((_QWORD *)v11 + 3);
          if (v49)
          {
            v50 = *(void (**)(const char *, char *, id))(v49 + 168);
            if (v50)
            {
              v50(v11, (char *)v7 + 376, v16);
LABEL_56:
              if (v46 == &nw_protocol_ref_counted_handle)
                nw::release_if_needed<nw_protocol *>(&v96);
              if (v18 == &nw_protocol_ref_counted_handle)
                nw::release_if_needed<nw_protocol *>((uint64_t *)type);

              goto LABEL_82;
            }
          }
          __nwlog_obj();
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          v63 = (const char *)*((_QWORD *)v11 + 2);
          *(_DWORD *)buf = 136446722;
          v101 = "__nw_protocol_updated_path";
          if (!v63)
            v63 = "invalid";
          v102 = 2082;
          v103 = (void *)v63;
          v104 = 2048;
          v105 = v11;
          v93 = (const char *)_os_log_send_and_compose_impl();

          v95 = OS_LOG_TYPE_ERROR;
          v94 = 0;
          v64 = (char *)v93;
          if (!__nwlog_fault(v93, &v95, &v94))
            goto LABEL_145;
          if (v95 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v65 = objc_claimAutoreleasedReturnValue();
            v66 = v95;
            if (os_log_type_enabled(v65, v95))
            {
              v67 = (const char *)*((_QWORD *)v11 + 2);
              if (!v67)
                v67 = "invalid";
              *(_DWORD *)buf = 136446722;
              v101 = "__nw_protocol_updated_path";
              v102 = 2082;
              v103 = (void *)v67;
              v104 = 2048;
              v105 = v11;
              _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s protocol %{public}s (%p) has invalid updated_path callback", buf, 0x20u);
            }
          }
          else
          {
            if (v94)
            {
              v79 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v80 = objc_claimAutoreleasedReturnValue();
              v89 = v95;
              v81 = os_log_type_enabled(v80, v95);
              if (v79)
              {
                if (v81)
                {
                  v82 = (const char *)*((_QWORD *)v11 + 2);
                  if (!v82)
                    v82 = "invalid";
                  *(_DWORD *)buf = 136446978;
                  v101 = "__nw_protocol_updated_path";
                  v102 = 2082;
                  v103 = (void *)v82;
                  v104 = 2048;
                  v105 = v11;
                  v106 = 2082;
                  v107 = v79;
                  _os_log_impl(&dword_182FBE000, v80, v89, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
                }

                free(v79);
              }
              else
              {
                if (v81)
                {
                  v87 = (const char *)*((_QWORD *)v11 + 2);
                  if (!v87)
                    v87 = "invalid";
                  *(_DWORD *)buf = 136446722;
                  v101 = "__nw_protocol_updated_path";
                  v102 = 2082;
                  v103 = (void *)v87;
                  v104 = 2048;
                  v105 = v11;
                  _os_log_impl(&dword_182FBE000, v80, v89, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace", buf, 0x20u);
                }

              }
              goto LABEL_144;
            }
            __nwlog_obj();
            v65 = objc_claimAutoreleasedReturnValue();
            v85 = v95;
            if (os_log_type_enabled(v65, v95))
            {
              v86 = (const char *)*((_QWORD *)v11 + 2);
              if (!v86)
                v86 = "invalid";
              *(_DWORD *)buf = 136446722;
              v101 = "__nw_protocol_updated_path";
              v102 = 2082;
              v103 = (void *)v86;
              v104 = 2048;
              v105 = v11;
              _os_log_impl(&dword_182FBE000, v65, v85, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded", buf, 0x20u);
            }
          }

LABEL_144:
          v64 = (char *)v93;
          goto LABEL_145;
        }
      }
      else
      {

      }
    }
    else if (nw_endpoint_handler_get_minimize_logging(v5))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) != 0)
        goto LABEL_83;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v5);
        v69 = nw_endpoint_handler_dry_run_string(v5);
        v70 = nw_endpoint_handler_copy_endpoint(v5);
        logging_description = nw_endpoint_get_logging_description(v70);
        v72 = nw_endpoint_handler_state_string(v5);
        v73 = nw_endpoint_handler_mode_string(v5);
        v74 = nw_endpoint_handler_copy_current_path(v5);
        *(_DWORD *)buf = 136447746;
        v101 = "nw_endpoint_handler_reset_traffic_class";
        v102 = 2082;
        v103 = (void *)id_string;
        v104 = 2082;
        v105 = v69;
        v106 = 2082;
        v107 = (void *)logging_description;
        v108 = 2082;
        v109 = v72;
        v110 = 2082;
        v111 = v73;
        v112 = 2114;
        v113 = v74;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping reset of traffic class, no active flow registration", buf, 0x48u);

      }
    }
    else
    {
      v30 = v5;
      v31 = *((_BYTE *)v30 + 268);

      if ((v31 & 0x20) != 0)
      {
LABEL_83:

        goto LABEL_84;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v32 = v30;

        v33 = v32;
        v34 = *((_BYTE *)v30 + 268);

        if ((v34 & 1) != 0)
          v35 = "dry-run ";
        else
          v35 = "";
        v36 = nw_endpoint_handler_copy_endpoint(v33);
        v37 = nw_endpoint_get_logging_description(v36);
        v90 = v36;
        id_str = v32->id_str;
        v38 = v33;
        v39 = v38;
        v40 = v38[30];
        if (v40 > 5)
          v41 = "unknown-state";
        else
          v41 = off_1E149FC48[v40];

        v51 = v39;
        v52 = v51;
        v53 = v5->mode;
        v54 = "path";
        switch(v53)
        {
          case 0:
            break;
          case 1:
            v54 = "resolver";
            break;
          case 2:
            v54 = nw_endpoint_flow_mode_string(v51[31]);
            break;
          case 3:
            v54 = "proxy";
            break;
          case 4:
            v54 = "fallback";
            break;
          case 5:
            v54 = "transform";
            break;
          default:
            v54 = "unknown-mode";
            break;
        }

        v55 = v52;
        os_unfair_lock_lock((os_unfair_lock_t)v55 + 28);
        v56 = v55[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v55 + 28);

        *(_DWORD *)buf = 136447746;
        v101 = "nw_endpoint_handler_reset_traffic_class";
        v102 = 2082;
        v103 = id_str;
        v104 = 2082;
        v105 = v35;
        v106 = 2082;
        v107 = (void *)v37;
        v108 = 2082;
        v109 = v41;
        v110 = 2082;
        v111 = v54;
        v112 = 2114;
        v113 = v56;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping reset of traffic class, no active flow registration", buf, 0x48u);

      }
    }
LABEL_82:

    goto LABEL_83;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v20 = (id)gLogObj;
  if (mode > 5)
    v21 = "unknown-mode";
  else
    v21 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v101 = "nw_endpoint_handler_reset_traffic_class";
  v102 = 2082;
  v103 = (void *)v21;
  v104 = 2082;
  v105 = "flow";
  v22 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v96) = 0;
  if (__nwlog_fault(v22, type, &v96))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v24 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        if (mode > 5)
          v25 = "unknown-mode";
        else
          v25 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v101 = "nw_endpoint_handler_reset_traffic_class";
        v102 = 2082;
        v103 = (void *)v25;
        v104 = 2082;
        v105 = "flow";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    else if ((_BYTE)v96)
    {
      v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v27 = type[0];
      v28 = os_log_type_enabled(v23, type[0]);
      if (v26)
      {
        if (v28)
        {
          if (mode > 5)
            v29 = "unknown-mode";
          else
            v29 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446978;
          v101 = "nw_endpoint_handler_reset_traffic_class";
          v102 = 2082;
          v103 = (void *)v29;
          v104 = 2082;
          v105 = "flow";
          v106 = 2082;
          v107 = v26;
          _os_log_impl(&dword_182FBE000, v23, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v26);
        if (v22)
          goto LABEL_75;
        goto LABEL_84;
      }
      if (v28)
      {
        if (mode > 5)
          v44 = "unknown-mode";
        else
          v44 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v101 = "nw_endpoint_handler_reset_traffic_class";
        v102 = 2082;
        v103 = (void *)v44;
        v104 = 2082;
        v105 = "flow";
        _os_log_impl(&dword_182FBE000, v23, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v42 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        if (mode > 5)
          v43 = "unknown-mode";
        else
          v43 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v101 = "nw_endpoint_handler_reset_traffic_class";
        v102 = 2082;
        v103 = (void *)v43;
        v104 = 2082;
        v105 = "flow";
        _os_log_impl(&dword_182FBE000, v23, v42, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }
    goto LABEL_73;
  }
LABEL_74:
  if (v22)
LABEL_75:
    free(v22);
LABEL_84:

}

void sub_183ADB8B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_flow_get_unsent_byte_count_block_invoke(uint64_t a1, int a2)
{
  socklen_t v4;
  int v5;

  v4 = 4;
  v5 = 0;
  if (!getsockopt(a2, 0xFFFF, 4132, &v5, &v4))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5;
  return 1;
}

void nw_endpoint_flow_connected(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v4;
  NWConcrete_nw_endpoint_handler *v5;
  int state;
  id *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NWConcrete_nw_endpoint_handler *v17;
  uint64_t v18;
  NWConcrete_nw_endpoint_mode_handler *v19;
  id *v20;
  id v21;
  int sleep_keepalive_interval;
  void *v23;
  NSObject *v24;
  id v25;
  const char *v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  id *v36;
  _BOOL4 v37;
  const char *id_string;
  const char *logging_description;
  const char *v40;
  const char *v41;
  id v42;
  os_log_type_t v43;
  const char *v44;
  os_log_type_t v45;
  const char *v46;
  uint64_t v47;
  const unsigned __int8 *v48;
  id v49;
  id v50;
  int minimize_logging;
  char logging_disabled;
  NSObject *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  const char *v57;
  const char *v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  NWConcrete_nw_endpoint_handler *v63;
  void *v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  char *backtrace_string;
  os_log_type_t v69;
  _BOOL4 v70;
  os_log_type_t v71;
  const char *v72;
  nw_endpoint_t v73;
  const char *v74;
  const char *v75;
  const char *v76;
  id v77;
  const char *v78;
  const char *v79;
  nw_endpoint_t v80;
  const char *v81;
  const char *loga;
  NSObject *logb;
  NSObject *log;
  const char *v85;
  id v86;
  id v87;
  nw_endpoint_t v88;
  id v89;
  char v90;
  _BYTE buf[24];
  const char *v92;
  _BYTE v93[20];
  __int16 v94;
  const char *v95;
  __int16 v96;
  id v97;
  __int16 v98;
  int v99;
  __int16 v100;
  const unsigned __int8 *v101;
  __int128 uu1;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
    v65 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(uu1) = 16;
    v90 = 0;
    if (__nwlog_fault(v65, &uu1, &v90))
    {
      if (uu1 == 17)
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v67 = uu1;
        if (os_log_type_enabled(v66, (os_log_type_t)uu1))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v66, v67, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v90)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v69 = uu1;
        v70 = os_log_type_enabled(v66, (os_log_type_t)uu1);
        if (backtrace_string)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v66, v69, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_105;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v66, v69, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v71 = uu1;
        if (os_log_type_enabled(v66, (os_log_type_t)uu1))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v66, v71, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_105:
    if (v65)
      free(v65);
    mode = 0;
    goto LABEL_108;
  }
  mode = v1->mode;

  if (mode == 2)
  {
    v4 = nw_endpoint_handler_copy_flow(v2);
    v5 = v2;
    state = v5->state;

    if ((state & 0xFFFFFFFE) == 4)
      goto LABEL_113;
    if (*((_QWORD *)v4 + 114))
    {
      if ((*((char *)v4 + 32) & 0x80000000) == 0)
      {
        v7 = v5;
        v8 = v7[7];

        if (v8)
          nw_association_force_update(v8, *((void **)v4 + 104));

      }
      v9 = (_QWORD *)*((_QWORD *)v4 + 51);
      if (v9)
      {
        v10 = v9[3];
        if (v10)
        {
          v11 = *(uint64_t (**)(void))(v10 + 224);
          if (v11)
          {
            v12 = (void *)v9[5];
            if (v12 == &nw_protocol_ref_counted_handle)
            {
              v14 = v9[11];
              if (v14)
                v9[11] = v14 + 1;
              v13 = -1;
            }
            else
            {
              v13 = 0;
            }
            *(_QWORD *)buf = v9;
            buf[8] = v13;
            v15 = v11();
            if (v12 == &nw_protocol_ref_counted_handle)
              nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
            os_unfair_lock_lock((os_unfair_lock_t)v4 + 220);
            v16 = (void *)*((_QWORD *)v4 + 111);
            *((_QWORD *)v4 + 111) = v15;

            os_unfair_lock_unlock((os_unfair_lock_t)v4 + 220);
          }
        }
      }
    }
    v17 = v5;
    v18 = v2->mode;

    if ((_DWORD)v18 == 2)
    {
      v19 = nw_endpoint_handler_copy_flow(v17);
      v20 = v17;
      v21 = v20[4];

      sleep_keepalive_interval = nw_parameters_get_sleep_keepalive_interval(v21);
      if (sleep_keepalive_interval)
      {
        v23 = (void *)*((_QWORD *)v19 + 111);
        if (v23)
        {
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL45nw_endpoint_flow_enable_sleep_proxy_if_neededP30NWConcrete_nw_endpoint_handler_block_invoke;
          v92 = (const char *)&unk_1E14AB640;
          *(_QWORD *)v93 = v19;
          *(_DWORD *)&v93[16] = sleep_keepalive_interval;
          *(_QWORD *)&v93[8] = v20;
          nw_fd_wrapper_get_fd(v23, buf);

          v24 = *(NSObject **)v93;
LABEL_42:

          goto LABEL_43;
        }
        v36 = v20;
        v37 = (*((_BYTE *)v36 + 268) & 0x20) == 0;

        if (v37)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v24 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            id_string = nw_endpoint_handler_get_id_string(v36);
            loga = nw_endpoint_handler_dry_run_string(v36);
            v85 = id_string;
            v88 = nw_endpoint_handler_copy_endpoint(v36);
            logging_description = nw_endpoint_get_logging_description(v88);
            v40 = nw_endpoint_handler_state_string(v36);
            v41 = nw_endpoint_handler_mode_string(v36);
            v42 = nw_endpoint_handler_copy_current_path(v36);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v85;
            *(_WORD *)&buf[22] = 2082;
            v92 = loga;
            *(_WORD *)v93 = 2082;
            *(_QWORD *)&v93[2] = logging_description;
            *(_WORD *)&v93[10] = 2082;
            *(_QWORD *)&v93[12] = v40;
            v94 = 2082;
            v95 = v41;
            v96 = 2114;
            v97 = v42;
            _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Sleep proxy is only supported for socket flows", buf, 0x48u);

          }
          goto LABEL_42;
        }
      }
LABEL_43:

      goto LABEL_65;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    if (v18 > 5)
      v26 = "unknown-mode";
    else
      v26 = off_1E149FC18[v18];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v26;
    *(_WORD *)&buf[22] = 2082;
    v92 = "flow";
    v27 = (void *)_os_log_send_and_compose_impl();

    LOBYTE(uu1) = 16;
    v90 = 0;
    if (__nwlog_fault((const char *)v27, &uu1, &v90))
    {
      if (uu1 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v28 = (id)gLogObj;
        v29 = uu1;
        if (os_log_type_enabled(v28, (os_log_type_t)uu1))
        {
          if (v18 > 5)
            v30 = "unknown-mode";
          else
            v30 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v30;
          *(_WORD *)&buf[22] = 2082;
          v92 = "flow";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v90)
      {
        v31 = __nw_create_backtrace_string();
        if (v31)
        {
          v32 = (char *)v31;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v33 = (id)gLogObj;
          v34 = uu1;
          if (os_log_type_enabled(v33, (os_log_type_t)uu1))
          {
            if (v18 > 5)
              v35 = "unknown-mode";
            else
              v35 = off_1E149FC18[v18];
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v35;
            *(_WORD *)&buf[22] = 2082;
            v92 = "flow";
            *(_WORD *)v93 = 2082;
            *(_QWORD *)&v93[2] = v32;
            _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v32);
          if (!v27)
          {
LABEL_65:

            if ((*((_BYTE *)v4 + 33) & 1) == 0)
              goto LABEL_83;
            v47 = *((_QWORD *)v4 + 92);
            if (!v47 || !*((_QWORD *)v4 + 104))
              goto LABEL_83;
            v48 = 0;
            do
            {
              if (!uuid_is_null((const unsigned __int8 *)v47))
                v48 = (const unsigned __int8 *)v47;
              v47 = *(_QWORD *)(v47 + 32);
            }
            while (v47);
            if (!v48)
              goto LABEL_83;
            uu1 = 0uLL;
            nw_path_flow_registration_get_id(*((void **)v4 + 104), &uu1);
            if (!uuid_compare((const unsigned __int8 *)&uu1, v48))
              goto LABEL_83;
            v49 = nw_endpoint_handler_copy_context(v17);
            v50 = nw_path_copy_flow_registration(v49, (uint64_t)v48);
            if (v50)
            {
              v89 = v50;
              objc_storeStrong((id *)v4 + 104, v50);
              minimize_logging = nw_endpoint_handler_get_minimize_logging(v17);
              logging_disabled = nw_endpoint_handler_get_logging_disabled(v17);
              if (minimize_logging)
              {
                v50 = v89;
                if ((logging_disabled & 1) != 0)
                  goto LABEL_82;
                v87 = v49;
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                log = (id)gconnectionLogObj;
                if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
                {
                  v81 = nw_endpoint_handler_get_id_string(v17);
                  v79 = nw_endpoint_handler_dry_run_string(v17);
                  v73 = nw_endpoint_handler_copy_endpoint(v17);
                  v74 = nw_endpoint_get_logging_description(v73);
                  v75 = nw_endpoint_handler_state_string(v17);
                  v76 = nw_endpoint_handler_mode_string(v17);
                  v77 = nw_endpoint_handler_copy_current_path(v17);
                  *(_DWORD *)buf = 136448258;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_connected";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v81;
                  *(_WORD *)&buf[22] = 2082;
                  v92 = v79;
                  *(_WORD *)v93 = 2082;
                  *(_QWORD *)&v93[2] = v74;
                  *(_WORD *)&v93[10] = 2082;
                  *(_QWORD *)&v93[12] = v75;
                  v94 = 2082;
                  v95 = v76;
                  v96 = 2114;
                  v97 = v77;
                  v98 = 1042;
                  v99 = 16;
                  v100 = 2098;
                  v101 = v48;
                  v53 = log;
                  _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Joined protocol has updated flow id, using flow id %{public,uuid_t}.16P", buf, 0x58u);

                  v49 = v87;
                }
                else
                {
                  v53 = log;
                }
                goto LABEL_81;
              }
              v50 = v89;
              if ((logging_disabled & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v53 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
                {
                  v54 = nw_endpoint_handler_get_id_string(v17);
                  logb = v53;
                  v86 = v49;
                  v78 = nw_endpoint_handler_dry_run_string(v17);
                  v80 = nw_endpoint_handler_copy_endpoint(v17);
                  v55 = v54;
                  v56 = nw_endpoint_get_logging_description(v80);
                  v57 = nw_endpoint_handler_state_string(v17);
                  v58 = nw_endpoint_handler_mode_string(v17);
                  v59 = nw_endpoint_handler_copy_current_path(v17);
                  *(_DWORD *)buf = 136448258;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_connected";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v55;
                  *(_WORD *)&buf[22] = 2082;
                  v92 = v78;
                  *(_WORD *)v93 = 2082;
                  *(_QWORD *)&v93[2] = v56;
                  *(_WORD *)&v93[10] = 2082;
                  *(_QWORD *)&v93[12] = v57;
                  v94 = 2082;
                  v95 = v58;
                  v96 = 2114;
                  v97 = v59;
                  v98 = 1042;
                  v99 = 16;
                  v100 = 2098;
                  v101 = v48;
                  v53 = logb;
                  _os_log_impl(&dword_182FBE000, logb, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Joined protocol has updated flow id, using flow id %{public,uuid_t}.16P", buf, 0x58u);

                  v49 = v86;
                }
LABEL_81:

                v50 = v89;
              }
            }
LABEL_82:

LABEL_83:
            os_unfair_lock_lock((os_unfair_lock_t)v4 + 220);
            v60 = (void *)*((_QWORD *)v4 + 2);
            *((_QWORD *)v4 + 2) = 0;

            os_unfair_lock_unlock((os_unfair_lock_t)v4 + 220);
            v61 = nw_endpoint_flow_copy_path(v17);
            os_unfair_lock_lock((os_unfair_lock_t)v4 + 220);
            v62 = (void *)*((_QWORD *)v4 + 1);
            *((_QWORD *)v4 + 1) = v61;

            os_unfair_lock_unlock((os_unfair_lock_t)v4 + 220);
            v63 = v17;
            v5->state = 3;

            if (_nw_signposts_once != -1)
              dispatch_once(&_nw_signposts_once, &__block_literal_global_79826);
            if (_nw_signposts_enabled && kdebug_is_enabled())
              kdebug_trace();
            nw_endpoint_flow_update_connected_metadata(v63, 0);
            nw_endpoint_flow_update_connected_metadata(v63, 1);
            nw_endpoint_flow_connected_path_change(v63);
            goto LABEL_113;
          }
LABEL_64:
          free(v27);
          goto LABEL_65;
        }
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v45 = uu1;
        if (os_log_type_enabled(v28, (os_log_type_t)uu1))
        {
          if (v18 > 5)
            v46 = "unknown-mode";
          else
            v46 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v46;
          *(_WORD *)&buf[22] = 2082;
          v92 = "flow";
          _os_log_impl(&dword_182FBE000, v28, v45, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v28 = (id)gLogObj;
        v43 = uu1;
        if (os_log_type_enabled(v28, (os_log_type_t)uu1))
        {
          if (v18 > 5)
            v44 = "unknown-mode";
          else
            v44 = off_1E149FC18[v18];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v44;
          *(_WORD *)&buf[22] = 2082;
          v92 = "flow";
          _os_log_impl(&dword_182FBE000, v28, v43, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v27)
      goto LABEL_65;
    goto LABEL_64;
  }
LABEL_108:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (NWConcrete_nw_endpoint_mode_handler *)(id)gLogObj;
  if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5)
      v72 = "unknown-mode";
    else
      v72 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_connected";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v72;
    *(_WORD *)&buf[22] = 2082;
    v92 = "flow";
    _os_log_impl(&dword_182FBE000, (os_log_t)v4, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }
LABEL_113:

}

void sub_183ADC7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t ___ZL45nw_endpoint_flow_enable_sleep_proxy_if_neededP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, int a2)
{
  uint64_t v4;
  DNSServiceErrorType v5;
  int v6;
  NSObject *v7;
  const char *id_string;
  const char *v9;
  nw_endpoint_t v10;
  const char *logging_description;
  const char *v12;
  const char *v13;
  id v14;
  _DNSServiceRef_t *v15;
  _BOOL8 v16;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  const char *string_for_dns_service_error;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 880));
  v4 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v4 + 920))
  {
    v5 = DNSServiceSleepKeepalive((DNSServiceRef *)(v4 + 920), 0, a2, *(_DWORD *)(a1 + 48), (DNSServiceSleepKeepaliveReply)nw_endpoint_flow_sleep_proxy_callback, *(void **)(a1 + 40));
    if (v5)
    {
      v6 = v5;
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v7 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          v9 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          v10 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          logging_description = nw_endpoint_get_logging_description(v10);
          v12 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          v13 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          v14 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          v18 = 136448002;
          v19 = "nw_endpoint_flow_enable_sleep_proxy_if_needed_block_invoke";
          v20 = 2082;
          v21 = id_string;
          v22 = 2082;
          v23 = v9;
          v24 = 2082;
          v25 = logging_description;
          v26 = 2082;
          v27 = v12;
          v28 = 2082;
          v29 = v13;
          v30 = 2114;
          v31 = v14;
          v32 = 2082;
          string_for_dns_service_error = nwlog_get_string_for_dns_service_error(v6);
          _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] DNSServiceSleepKeepalive failed: %{public}s", (uint8_t *)&v18, 0x52u);

        }
      }
    }
    else
    {
      v15 = *(_DNSServiceRef_t **)(*(_QWORD *)(a1 + 32) + 920);
      v16 = nw_queue_copy_current_workloop();
      DNSServiceSetDispatchQueue(v15, (dispatch_queue_t)v16);

    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 880));
  return 1;
}

void sub_183ADCABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_endpoint_flow_sleep_proxy_callback(_DNSServiceRef_t *a1, int a2, void *a3)
{
  void *v4;
  void *v5;
  NWConcrete_nw_endpoint_handler *v6;
  uint64_t mode;
  NSObject *v8;
  NWConcrete_nw_endpoint_handler *v9;
  char v10;
  NSObject *v11;
  NWConcrete_nw_endpoint_handler *v12;
  NWConcrete_nw_endpoint_handler *v13;
  char v14;
  const char *v15;
  nw_endpoint_t v16;
  const char *logging_description;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  NSObject *v23;
  NWConcrete_nw_endpoint_handler *v24;
  NWConcrete_nw_endpoint_handler *v25;
  char v26;
  const char *v27;
  nw_endpoint_t v28;
  const char *v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  const char *v33;
  void **v34;
  void **v35;
  const char *v36;
  void **v37;
  void **v38;
  int v39;
  const char *v40;
  void **v41;
  id v42;
  id v43;
  _DNSServiceRef_t *isa;
  void **v45;
  id v46;
  void *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  char *backtrace_string;
  os_log_type_t v52;
  _BOOL4 v53;
  os_log_type_t v54;
  nw_endpoint_t v55;
  const char *v56;
  char *id_str;
  char *v58;
  const char *v59;
  char v60;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  id v75;
  __int16 v76;
  const char *string_for_dns_service_error;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v6 = v4;
    mode = v6->mode;

    if ((_DWORD)mode == 2)
    {
      v8 = nw_endpoint_handler_copy_flow(v6);
      v9 = v6;
      v10 = *((_BYTE *)v9 + 268);

      if (a2)
      {
        if ((v10 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v11 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            v12 = v9;

            v13 = v12;
            v14 = *((_BYTE *)v9 + 268);

            if ((v14 & 1) != 0)
              v15 = "dry-run ";
            else
              v15 = "";
            v16 = nw_endpoint_handler_copy_endpoint(v13);
            logging_description = nw_endpoint_get_logging_description(v16);
            id_str = v12->id_str;
            v18 = v13;
            v19 = v18;
            v20 = v18[30];
            if (v20 > 5)
              v21 = "unknown-state";
            else
              v21 = off_1E149FC48[v20];
            v56 = v21;

            v34 = v19;
            v35 = v34;
            v55 = v16;
            v36 = "path";
            switch(v6->mode)
            {
              case 0:
                break;
              case 1:
                v36 = "resolver";
                break;
              case 2:
                v36 = nw_endpoint_flow_mode_string(v34[31]);
                break;
              case 3:
                v36 = "proxy";
                break;
              case 4:
                v36 = "fallback";
                break;
              case 5:
                v36 = "transform";
                break;
              default:
                v36 = "unknown-mode";
                break;
            }

            v41 = v35;
            os_unfair_lock_lock((os_unfair_lock_t)v41 + 28);
            v42 = v41[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v41 + 28);

            v43 = v42;
            *(_DWORD *)buf = 136448002;
            v63 = "nw_endpoint_flow_sleep_proxy_callback";
            v64 = 2082;
            v65 = id_str;
            v66 = 2082;
            v67 = v15;
            v68 = 2082;
            v69 = logging_description;
            v70 = 2082;
            v71 = v56;
            v72 = 2082;
            v73 = v36;
            v74 = 2114;
            v75 = v43;
            v76 = 2082;
            string_for_dns_service_error = nwlog_get_string_for_dns_service_error(a2);
            _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Sleep proxy callback failed: %{public}s", buf, 0x52u);

          }
        }
        isa = v8[115].isa;
        if (isa)
        {
          DNSServiceRefDeallocate(isa);
          v8[115].isa = 0;
        }
      }
      else if ((v10 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v23 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          v24 = v9;

          v25 = v24;
          v26 = *((_BYTE *)v9 + 268);

          if ((v26 & 1) != 0)
            v27 = "dry-run ";
          else
            v27 = "";
          v28 = nw_endpoint_handler_copy_endpoint(v25);
          v29 = nw_endpoint_get_logging_description(v28);
          v58 = v24->id_str;
          v59 = v27;
          v30 = v25;
          v31 = v30;
          v32 = v30[30];
          if (v32 > 5)
            v33 = "unknown-state";
          else
            v33 = off_1E149FC48[v32];

          v37 = v31;
          v38 = v37;
          v39 = v6->mode;
          v40 = "path";
          switch(v39)
          {
            case 0:
              break;
            case 1:
              v40 = "resolver";
              break;
            case 2:
              v40 = nw_endpoint_flow_mode_string(v37[31]);
              break;
            case 3:
              v40 = "proxy";
              break;
            case 4:
              v40 = "fallback";
              break;
            case 5:
              v40 = "transform";
              break;
            default:
              v40 = "unknown-mode";
              break;
          }

          v45 = v38;
          os_unfair_lock_lock((os_unfair_lock_t)v45 + 28);
          v46 = v45[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v45 + 28);

          *(_DWORD *)buf = 136447746;
          v63 = "nw_endpoint_flow_sleep_proxy_callback";
          v64 = 2082;
          v65 = v58;
          v66 = 2082;
          v67 = v59;
          v68 = 2082;
          v69 = v29;
          v70 = 2082;
          v71 = v33;
          v72 = 2082;
          v73 = v40;
          v74 = 2114;
          v75 = v46;
          _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Sleep proxy callback, no error", buf, 0x48u);

        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if (mode > 5)
          v22 = "unknown-mode";
        else
          v22 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v63 = "nw_endpoint_flow_sleep_proxy_callback";
        v64 = 2082;
        v65 = (void *)v22;
        v66 = 2082;
        v67 = "flow";
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }

    goto LABEL_51;
  }
  __nwlog_obj();
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v63 = "nw_endpoint_flow_sleep_proxy_callback";
  v48 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v60 = 0;
  if (__nwlog_fault(v48, &type, &v60))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v50 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_endpoint_flow_sleep_proxy_callback";
        _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v52 = type;
      v53 = os_log_type_enabled(v49, type);
      if (backtrace_string)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446466;
          v63 = "nw_endpoint_flow_sleep_proxy_callback";
          v64 = 2082;
          v65 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v49, v52, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_68;
      }
      if (v53)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_endpoint_flow_sleep_proxy_callback";
        _os_log_impl(&dword_182FBE000, v49, v52, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_endpoint_flow_sleep_proxy_callback";
        _os_log_impl(&dword_182FBE000, v49, v54, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_68:
  if (v48)
    free(v48);
LABEL_51:

}

void sub_183ADD298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_endpoint_flow_rebuild_stack(NWConcrete_nw_endpoint_handler *a1, nw_protocol *a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_handler *v4;
  NWConcrete_nw_endpoint_mode_handler *v5;
  NWConcrete_nw_endpoint_handler *v6;
  NWConcrete_nw_endpoint_handler *v7;
  int state;
  NWConcrete_nw_endpoint_handler *v9;
  char v10;
  NSObject *v11;
  NWConcrete_nw_endpoint_handler *v12;
  NWConcrete_nw_endpoint_handler *v13;
  char v14;
  const char *v15;
  nw_endpoint_t v16;
  const char *logging_description;
  char *id_str;
  NWConcrete_nw_endpoint_handler *v19;
  NWConcrete_nw_endpoint_handler *v20;
  uint64_t v21;
  const char *v22;
  nw_protocol *output_handler;
  void *handle;
  char v25;
  NWConcrete_nw_endpoint_handler *v26;
  char v27;
  NWConcrete_nw_endpoint_handler *v28;
  NWConcrete_nw_endpoint_handler *v29;
  char v30;
  const char *v31;
  nw_endpoint_t v32;
  const char *v33;
  char *v34;
  NWConcrete_nw_endpoint_handler *v35;
  NWConcrete_nw_endpoint_handler *v36;
  uint64_t v37;
  const char *v38;
  void **v39;
  void **v40;
  const char *v41;
  void **v42;
  void **v43;
  const char *v44;
  nw_protocol_callbacks *callbacks;
  void *v46;
  char v47;
  nw_protocol_callbacks *v48;
  nw_protocol_callbacks *v49;
  uint64_t (*remove_input_handler)(nw_protocol *, nw_protocol *, uint64_t);
  char v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  char v58;
  NWConcrete_nw_endpoint_handler *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  NWConcrete_nw_endpoint_handler *v63;
  NWConcrete_nw_endpoint_handler *v64;
  BOOL v65;
  NSObject *v66;
  char *v67;
  char *v68;
  _BOOL4 v69;
  const char *v70;
  nw_endpoint_t v71;
  const char *v72;
  unsigned int *v73;
  unsigned int *v74;
  uint64_t v75;
  const char *v76;
  void **v77;
  id v78;
  NWConcrete_nw_endpoint_handler *v79;
  NWConcrete_nw_endpoint_handler *v80;
  _BOOL4 v81;
  NSObject *v82;
  const char *v83;
  const char *v84;
  nw_endpoint_t v85;
  const char *v86;
  const char *v87;
  const char *v88;
  id v89;
  void **v90;
  id v91;
  void **v92;
  const char *v93;
  NSObject *v94;
  const char *id_string;
  const char *v96;
  nw_endpoint_t v97;
  const char *v98;
  const char *v99;
  const char *v100;
  id v101;
  nw_endpoint_t v102;
  const char *v103;
  const char *v104;
  const char *v105;
  void **v106;
  id v107;
  NWConcrete_nw_endpoint_handler *v108;
  void *v109;
  char *v110;
  NSObject *v111;
  os_log_type_t v112;
  void *v113;
  char *v114;
  NSObject *v115;
  os_log_type_t v116;
  void *v117;
  char *v118;
  NSObject *v119;
  os_log_type_t v120;
  char *v121;
  os_log_type_t v122;
  _BOOL4 v123;
  char *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  char *v127;
  os_log_type_t v128;
  _BOOL4 v129;
  void *v130;
  const char *name;
  char *v132;
  NSObject *v133;
  os_log_type_t v134;
  const char *v135;
  os_log_type_t v136;
  os_log_type_t v137;
  os_log_type_t v138;
  char *v139;
  os_log_type_t v140;
  _BOOL4 v141;
  const char *v142;
  void *v143;
  char *v144;
  NSObject *v145;
  os_log_type_t v146;
  char *v147;
  os_log_type_t v148;
  _BOOL4 v149;
  os_log_type_t v150;
  void *v151;
  char *v152;
  NSObject *v153;
  os_log_type_t v154;
  os_log_type_t v155;
  const char *v156;
  const char *v157;
  NWConcrete_nw_endpoint_handler *v158;
  NWConcrete_nw_endpoint_handler *v159;
  _BOOL4 v160;
  NSObject *v161;
  char *v162;
  char *v163;
  _BOOL4 v164;
  const char *v165;
  nw_endpoint_t v166;
  const char *v167;
  unsigned int *v168;
  unsigned int *v169;
  uint64_t v170;
  const char *v171;
  void **v172;
  void **v173;
  const char *v174;
  void **v175;
  id v176;
  id v177;
  void *v178;
  const char *v179;
  nw_protocol_identifier *identifier;
  void *v181;
  char *v182;
  NSObject *v183;
  os_log_type_t v184;
  char *v185;
  os_log_type_t v186;
  _BOOL4 v187;
  char *backtrace_string;
  os_log_type_t v189;
  _BOOL4 v190;
  void *v191;
  char *v192;
  NSObject *v193;
  os_log_type_t v194;
  os_log_type_t v195;
  os_log_type_t v196;
  char *v197;
  os_log_type_t v198;
  _BOOL4 v199;
  os_log_type_t v200;
  const char *v201;
  NWConcrete_nw_endpoint_mode_handler *log;
  NWConcrete_nw_endpoint_mode_handler *loga;
  const char *logd;
  const char *logb;
  NSObject *logc;
  NWConcrete_nw_endpoint_handler *v207;
  _QWORD v208[2];
  uint64_t (*v209)(uint64_t, void *);
  void *v210;
  NWConcrete_nw_endpoint_handler *v211;
  char v212;
  os_log_type_t v213;
  nw_protocol *v214;
  char v215;
  os_log_type_t type[8];
  char v217;
  uint8_t buf[4];
  const char *v219;
  __int16 v220;
  char *v221;
  __int16 v222;
  nw_protocol *v223;
  __int16 v224;
  void *v225;
  __int16 v226;
  const char *v227;
  __int16 v228;
  const char *v229;
  __int16 v230;
  id v231;
  __int16 v232;
  const char *v233;
  __int16 v234;
  nw_protocol *v235;
  uint64_t v236;

  v236 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (a2)
  {
    v207 = v3;
    v5 = nw_endpoint_handler_copy_flow(v3);
    if (v5)
    {
      v6 = v4;
      v7 = v6;
      if (v6)
      {
        state = v6->state;

        if ((state & 0xFFFFFFFE) == 4)
        {
          v9 = v7;
          v10 = *((_BYTE *)v9 + 268);

          if ((v10 & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v11 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v12 = v9;

              v13 = v12;
              v14 = *((_BYTE *)v9 + 268);

              if ((v14 & 1) != 0)
                v15 = "dry-run ";
              else
                v15 = "";
              v16 = nw_endpoint_handler_copy_endpoint(v13);
              logging_description = nw_endpoint_get_logging_description(v16);
              log = v5;
              id_str = v12->id_str;
              v19 = v13;
              v20 = v19;
              v21 = v7->state;
              if (v21 > 5)
                v22 = "unknown-state";
              else
                v22 = off_1E149FC48[v21];

              v39 = v20;
              v40 = v39;
              v41 = "path";
              switch(*((_DWORD *)v39 + 29))
              {
                case 0:
                  break;
                case 1:
                  v41 = "resolver";
                  break;
                case 2:
                  v41 = nw_endpoint_flow_mode_string(v39[31]);
                  break;
                case 3:
                  v41 = "proxy";
                  break;
                case 4:
                  v41 = "fallback";
                  break;
                case 5:
                  v41 = "transform";
                  break;
                default:
                  v41 = "unknown-mode";
                  break;
              }

              v77 = v40;
              os_unfair_lock_lock((os_unfair_lock_t)v77 + 28);
              v78 = v77[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v77 + 28);

              *(_DWORD *)buf = 136447746;
              v219 = "nw_endpoint_flow_rebuild_stack";
              v220 = 2082;
              v221 = id_str;
              v222 = 2082;
              v223 = (nw_protocol *)v15;
              v224 = 2082;
              v225 = (void *)logging_description;
              v226 = 2082;
              v227 = v22;
              v228 = 2082;
              v229 = v41;
              v230 = 2114;
              v231 = v78;
              _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already cancelled, cannot rebuild stack", buf, 0x48u);

              v5 = log;
            }
LABEL_72:

            goto LABEL_237;
          }
          goto LABEL_237;
        }
        if ((*((_BYTE *)v5 + 36) & 4) != 0)
        {
          v26 = v7;
          v27 = *((_BYTE *)v26 + 268);

          if ((v27 & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v11 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v28 = v26;

              v29 = v28;
              v30 = *((_BYTE *)v26 + 268);

              if ((v30 & 1) != 0)
                v31 = "dry-run ";
              else
                v31 = "";
              v32 = nw_endpoint_handler_copy_endpoint(v29);
              v33 = nw_endpoint_get_logging_description(v32);
              loga = v5;
              v34 = v28->id_str;
              v35 = v29;
              v36 = v35;
              v37 = v7->state;
              if (v37 > 5)
                v38 = "unknown-state";
              else
                v38 = off_1E149FC48[v37];

              v42 = v36;
              v43 = v42;
              v44 = "path";
              switch(*((_DWORD *)v42 + 29))
              {
                case 0:
                  break;
                case 1:
                  v44 = "resolver";
                  break;
                case 2:
                  v44 = nw_endpoint_flow_mode_string(v42[31]);
                  break;
                case 3:
                  v44 = "proxy";
                  break;
                case 4:
                  v44 = "fallback";
                  break;
                case 5:
                  v44 = "transform";
                  break;
                default:
                  v44 = "unknown-mode";
                  break;
              }

              v90 = v43;
              os_unfair_lock_lock((os_unfair_lock_t)v90 + 28);
              v91 = v90[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v90 + 28);

              *(_DWORD *)buf = 136447746;
              v219 = "nw_endpoint_flow_rebuild_stack";
              v220 = 2082;
              v221 = v34;
              v222 = 2082;
              v223 = (nw_protocol *)v31;
              v224 = 2082;
              v225 = (void *)v33;
              v226 = 2082;
              v227 = v38;
              v228 = 2082;
              v229 = v44;
              v230 = 2114;
              v231 = v91;
              _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failing, cannot rebuild stack", buf, 0x48u);

              v5 = loga;
            }
            goto LABEL_72;
          }
LABEL_237:

          v108 = v207;
          goto LABEL_238;
        }
LABEL_15:
        output_handler = a2->output_handler;
        if (!output_handler)
          goto LABEL_46;
        handle = output_handler->handle;
        if (handle == &nw_protocol_ref_counted_handle)
        {
          callbacks = output_handler[1].callbacks;
          if (callbacks)
            output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          v25 = -1;
        }
        else
        {
          v25 = 0;
        }
        *(_QWORD *)type = output_handler;
        v217 = v25;
        v46 = a2->handle;
        if (v46 == &nw_protocol_ref_counted_handle)
        {
          v48 = a2[1].callbacks;
          if (v48)
            a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v48->add_input_handler + 1);
          v47 = -1;
        }
        else
        {
          v47 = 0;
        }
        v214 = a2;
        v215 = v47;
        v49 = output_handler->callbacks;
        if (v49)
        {
          remove_input_handler = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t))v49->remove_input_handler;
          if (remove_input_handler)
          {
            v51 = remove_input_handler(output_handler, a2, 1);
            if (v46 != &nw_protocol_ref_counted_handle)
              goto LABEL_44;
            goto LABEL_213;
          }
        }
        __nwlog_obj();
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        name = output_handler->identifier->name;
        *(_DWORD *)buf = 136446722;
        v219 = "__nw_protocol_remove_input_handler";
        if (!name)
          name = "invalid";
        v220 = 2082;
        v221 = (char *)name;
        v222 = 2048;
        v223 = output_handler;
        logb = (const char *)_os_log_send_and_compose_impl();

        v213 = OS_LOG_TYPE_ERROR;
        v212 = 0;
        v132 = (char *)logb;
        if (!__nwlog_fault(logb, &v213, &v212))
        {
LABEL_210:
          if (v132)
            free(v132);
          v51 = 0;
          if (v46 != &nw_protocol_ref_counted_handle)
          {
LABEL_44:
            if (handle != &nw_protocol_ref_counted_handle)
              goto LABEL_45;
            goto LABEL_214;
          }
LABEL_213:
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v214);
          if (handle != &nw_protocol_ref_counted_handle)
          {
LABEL_45:
            if ((v51 & 1) != 0)
              goto LABEL_46;
            goto LABEL_215;
          }
LABEL_214:
          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
          if ((v51 & 1) != 0)
          {
LABEL_46:
            v52 = (void *)*((_QWORD *)v5 + 116);
            if (v52)
            {
              nw_endpoint_handler_cancel(v52, 1, 0);
              v53 = (void *)*((_QWORD *)v5 + 116);
              *((_QWORD *)v5 + 116) = 0;

              v54 = (void *)*((_QWORD *)v5 + 117);
              *((_QWORD *)v5 + 117) = 0;

            }
            *((_QWORD *)v5 + 94) = a2;
            if ((*((_BYTE *)v5 + 32) & 2) == 0)
              goto LABEL_52;
            v55 = (void *)*((_QWORD *)v5 + 104);
            *((_QWORD *)v5 + 104) = 0;

            v56 = (void *)*((_QWORD *)v5 + 2);
            *((_QWORD *)v5 + 2) = 0;

            if ((*((_BYTE *)v5 + 33) & 0x40) == 0)
              goto LABEL_52;
            v57 = (void *)*((_QWORD *)v5 + 113);
            *((_QWORD *)v5 + 113) = 0;

            *((_BYTE *)v5 + 32) &= ~0x10u;
            if ((nw_endpoint_flow_setup_channel(v7) & 1) != 0)
            {
              if (!*((_QWORD *)v5 + 104))
              {
                if ((nw_endpoint_handler_get_logging_disabled(v7) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v94 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
                  {
                    id_string = nw_endpoint_handler_get_id_string(v7);
                    v96 = nw_endpoint_handler_dry_run_string(v7);
                    v97 = nw_endpoint_handler_copy_endpoint(v7);
                    v98 = nw_endpoint_get_logging_description(v97);
                    v99 = nw_endpoint_handler_state_string(v7);
                    v100 = nw_endpoint_handler_mode_string(v7);
                    v101 = nw_endpoint_handler_copy_current_path(v7);
                    *(_DWORD *)buf = 136447746;
                    v219 = "nw_endpoint_flow_rebuild_stack";
                    v220 = 2082;
                    v221 = (char *)id_string;
                    v222 = 2082;
                    v223 = (nw_protocol *)v96;
                    v224 = 2082;
                    v225 = (void *)v98;
                    v226 = 2082;
                    v227 = v99;
                    v228 = 2082;
                    v229 = v100;
                    v230 = 2114;
                    v231 = v101;
                    _os_log_impl(&dword_182FBE000, v94, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow_registration is NULL", buf, 0x48u);

                  }
                }
                goto LABEL_237;
              }
LABEL_52:
              v58 = *((_BYTE *)v5 + 32);
              *((_BYTE *)v5 + 35) &= ~0x10u;
              *((_BYTE *)v5 + 32) = v58 & 0x1F | 0x20;
              *((_BYTE *)v5 + 36) &= ~1u;
              *((_BYTE *)v5 + 33) &= ~4u;
              v208[0] = MEMORY[0x1E0C809B0];
              v208[1] = 3221225472;
              v209 = ___Z30nw_endpoint_flow_rebuild_stackP30NWConcrete_nw_endpoint_handlerP11nw_protocol_block_invoke;
              v210 = &unk_1E14AB5A0;
              v59 = v7;
              v211 = v59;
              v60 = *((_QWORD *)v5 + 84);
              do
              {
                if (!v60)
                  break;
                v61 = *(_QWORD *)(v60 + 16);
                v62 = ((uint64_t (*)(_QWORD *))v209)(v208);
                v60 = v61;
              }
              while ((v62 & 1) != 0);
              if ((nw_endpoint_flow_setup_protocols(v59, a2, 0, 1, 0) & 1) != 0)
                goto LABEL_103;
              v63 = v59;
              if (v7)
              {
                v64 = v63;
                v65 = (*((_BYTE *)v63 + 268) & 0x20) == 0;

                if (!v65)
                {
LABEL_103:
                  *((_BYTE *)v5 + 32) &= ~0x20u;

                  goto LABEL_237;
                }
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v66 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  v67 = v64;

                  v68 = v67;
                  v69 = (*((_BYTE *)v64 + 268) & 1) == 0;

                  if (v69)
                    v70 = "";
                  else
                    v70 = "dry-run ";
                  v71 = nw_endpoint_handler_copy_endpoint(v68);
                  v72 = nw_endpoint_get_logging_description(v71);
                  v73 = v68;
                  v74 = v73;
                  v75 = v73[30];
                  if (v75 > 5)
                    v76 = "unknown-state";
                  else
                    v76 = off_1E149FC48[v75];

                  v92 = v74;
                  v93 = "path";
                  switch(*((_DWORD *)v92 + 29))
                  {
                    case 0:
                      break;
                    case 1:
                      v93 = "resolver";
                      break;
                    case 2:
                      v93 = nw_endpoint_flow_mode_string(v92[31]);
                      break;
                    case 3:
                      v93 = "proxy";
                      break;
                    case 4:
                      v93 = "fallback";
                      break;
                    case 5:
                      v93 = "transform";
                      break;
                    default:
                      v93 = "unknown-mode";
                      break;
                  }
                  logd = v93;

                  v102 = v71;
                  v103 = v76;
                  v104 = v70;
                  v105 = v72;
                  v106 = v92;
                  os_unfair_lock_lock((os_unfair_lock_t)v106 + 28);
                  v107 = v106[8];
                  os_unfair_lock_unlock((os_unfair_lock_t)v106 + 28);

                  *(_DWORD *)buf = 136447746;
                  v219 = "nw_endpoint_flow_rebuild_stack";
                  v220 = 2082;
                  v221 = v67 + 168;
                  v222 = 2082;
                  v223 = (nw_protocol *)v104;
                  v224 = 2082;
                  v225 = (void *)v105;
                  v226 = 2082;
                  v227 = v103;
                  v228 = 2082;
                  v229 = logd;
                  v230 = 2114;
                  v231 = v107;
                  _os_log_impl(&dword_182FBE000, v66, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unable to setup protocols", buf, 0x48u);

                }
LABEL_102:

                goto LABEL_103;
              }
              __nwlog_obj();
              v151 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              v219 = "nw_endpoint_handler_get_logging_disabled";
              v152 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v214) = 0;
              if (__nwlog_fault(v152, type, &v214))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v153 = objc_claimAutoreleasedReturnValue();
                  v154 = type[0];
                  if (os_log_type_enabled(v153, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    v219 = "nw_endpoint_handler_get_logging_disabled";
                    _os_log_impl(&dword_182FBE000, v153, v154, "%{public}s called with null handler", buf, 0xCu);
                  }
                }
                else if ((_BYTE)v214)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v153 = objc_claimAutoreleasedReturnValue();
                  v189 = type[0];
                  v190 = os_log_type_enabled(v153, type[0]);
                  if (backtrace_string)
                  {
                    if (v190)
                    {
                      *(_DWORD *)buf = 136446466;
                      v219 = "nw_endpoint_handler_get_logging_disabled";
                      v220 = 2082;
                      v221 = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v153, v189, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(backtrace_string);
                    goto LABEL_279;
                  }
                  if (v190)
                  {
                    *(_DWORD *)buf = 136446210;
                    v219 = "nw_endpoint_handler_get_logging_disabled";
                    _os_log_impl(&dword_182FBE000, v153, v189, "%{public}s called with null handler, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v153 = objc_claimAutoreleasedReturnValue();
                  v196 = type[0];
                  if (os_log_type_enabled(v153, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    v219 = "nw_endpoint_handler_get_logging_disabled";
                    _os_log_impl(&dword_182FBE000, v153, v196, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
                  }
                }

              }
LABEL_279:
              if (v152)
                free(v152);
              v66 = 0;
              goto LABEL_102;
            }
            v79 = v7;
            if (v7)
            {
              v80 = v79;
              v81 = (*((_BYTE *)v79 + 268) & 0x20) == 0;

              if (v81)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v82 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
                {
                  v83 = nw_endpoint_handler_get_id_string(v80);
                  v84 = nw_endpoint_handler_dry_run_string(v80);
                  v85 = nw_endpoint_handler_copy_endpoint(v80);
                  v86 = nw_endpoint_get_logging_description(v85);
                  v87 = nw_endpoint_handler_state_string(v80);
                  v88 = nw_endpoint_handler_mode_string(v80);
                  v89 = nw_endpoint_handler_copy_current_path(v80);
                  *(_DWORD *)buf = 136447746;
                  v219 = "nw_endpoint_flow_rebuild_stack";
                  v220 = 2082;
                  v221 = (char *)v83;
                  v222 = 2082;
                  v223 = (nw_protocol *)v84;
                  v224 = 2082;
                  v225 = (void *)v86;
                  v226 = 2082;
                  v227 = v87;
                  v228 = 2082;
                  v229 = v88;
                  v230 = 2114;
                  v231 = v89;
                  _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unable to setup channel", buf, 0x48u);

                }
              }
              goto LABEL_237;
            }
            __nwlog_obj();
            v191 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_logging_disabled";
            v192 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v214) = 0;
            if (__nwlog_fault(v192, type, &v214))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v193 = objc_claimAutoreleasedReturnValue();
                v194 = type[0];
                if (os_log_type_enabled(v193, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v219 = "nw_endpoint_handler_get_logging_disabled";
                  _os_log_impl(&dword_182FBE000, v193, v194, "%{public}s called with null handler", buf, 0xCu);
                }
              }
              else if ((_BYTE)v214)
              {
                v197 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v193 = objc_claimAutoreleasedReturnValue();
                v198 = type[0];
                v199 = os_log_type_enabled(v193, type[0]);
                if (v197)
                {
                  if (v199)
                  {
                    *(_DWORD *)buf = 136446466;
                    v219 = "nw_endpoint_handler_get_logging_disabled";
                    v220 = 2082;
                    v221 = v197;
                    _os_log_impl(&dword_182FBE000, v193, v198, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v197);
                  goto LABEL_288;
                }
                if (v199)
                {
                  *(_DWORD *)buf = 136446210;
                  v219 = "nw_endpoint_handler_get_logging_disabled";
                  _os_log_impl(&dword_182FBE000, v193, v198, "%{public}s called with null handler, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v193 = objc_claimAutoreleasedReturnValue();
                v200 = type[0];
                if (os_log_type_enabled(v193, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v219 = "nw_endpoint_handler_get_logging_disabled";
                  _os_log_impl(&dword_182FBE000, v193, v200, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
LABEL_288:
            if (v192)
              free(v192);
            goto LABEL_237;
          }
LABEL_215:
          v158 = v7;
          if (v7)
          {
            v159 = v158;
            v160 = (*((_BYTE *)v158 + 268) & 0x20) == 0;

            if (v160)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v161 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
              {
                logc = v161;
                v162 = v159;

                v163 = v162;
                v164 = (*((_BYTE *)v159 + 268) & 1) == 0;

                if (v164)
                  v165 = "";
                else
                  v165 = "dry-run ";
                v166 = nw_endpoint_handler_copy_endpoint(v163);
                v167 = nw_endpoint_get_logging_description(v166);
                v168 = v163;
                v169 = v168;
                v170 = v168[30];
                if (v170 > 5)
                  v171 = "unknown-state";
                else
                  v171 = off_1E149FC48[v170];
                v201 = v171;

                v172 = v169;
                v173 = v172;
                v174 = "path";
                switch(*((_DWORD *)v172 + 29))
                {
                  case 0:
                    break;
                  case 1:
                    v174 = "resolver";
                    break;
                  case 2:
                    v174 = nw_endpoint_flow_mode_string(v172[31]);
                    break;
                  case 3:
                    v174 = "proxy";
                    break;
                  case 4:
                    v174 = "fallback";
                    break;
                  case 5:
                    v174 = "transform";
                    break;
                  default:
                    v174 = "unknown-mode";
                    break;
                }

                v175 = v173;
                os_unfair_lock_lock((os_unfair_lock_t)v175 + 28);
                v176 = v175[8];
                os_unfair_lock_unlock((os_unfair_lock_t)v175 + 28);

                v177 = v176;
                v178 = v177;
                v219 = "nw_endpoint_flow_rebuild_stack";
                v179 = "invalid";
                identifier = a2->identifier;
                *(_DWORD *)buf = 136448258;
                if (identifier)
                  v179 = (const char *)identifier;
                v220 = 2082;
                v221 = v162 + 168;
                v222 = 2082;
                v223 = (nw_protocol *)v165;
                v224 = 2082;
                v225 = (void *)v167;
                v226 = 2082;
                v227 = v201;
                v228 = 2082;
                v229 = v174;
                v230 = 2114;
                v231 = v177;
                v232 = 2080;
                v233 = v179;
                v234 = 2048;
                v235 = a2;
                _os_log_impl(&dword_182FBE000, logc, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unable to remove input handler for %s:%p", buf, 0x5Cu);

                v161 = logc;
              }

            }
            goto LABEL_237;
          }
          __nwlog_obj();
          v181 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v219 = "nw_endpoint_handler_get_logging_disabled";
          v182 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v214) = 0;
          if (__nwlog_fault(v182, type, &v214))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v183 = objc_claimAutoreleasedReturnValue();
              v184 = type[0];
              if (os_log_type_enabled(v183, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v219 = "nw_endpoint_handler_get_logging_disabled";
                _os_log_impl(&dword_182FBE000, v183, v184, "%{public}s called with null handler", buf, 0xCu);
              }
            }
            else if ((_BYTE)v214)
            {
              v185 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v183 = objc_claimAutoreleasedReturnValue();
              v186 = type[0];
              v187 = os_log_type_enabled(v183, type[0]);
              if (v185)
              {
                if (v187)
                {
                  *(_DWORD *)buf = 136446466;
                  v219 = "nw_endpoint_handler_get_logging_disabled";
                  v220 = 2082;
                  v221 = v185;
                  _os_log_impl(&dword_182FBE000, v183, v186, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v185);
                goto LABEL_273;
              }
              if (v187)
              {
                *(_DWORD *)buf = 136446210;
                v219 = "nw_endpoint_handler_get_logging_disabled";
                _os_log_impl(&dword_182FBE000, v183, v186, "%{public}s called with null handler, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v183 = objc_claimAutoreleasedReturnValue();
              v195 = type[0];
              if (os_log_type_enabled(v183, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v219 = "nw_endpoint_handler_get_logging_disabled";
                _os_log_impl(&dword_182FBE000, v183, v195, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_273:
          if (v182)
            free(v182);
          goto LABEL_237;
        }
        if (v213 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v133 = objc_claimAutoreleasedReturnValue();
          v134 = v213;
          if (os_log_type_enabled(v133, v213))
          {
            v135 = output_handler->identifier->name;
            if (!v135)
              v135 = "invalid";
            *(_DWORD *)buf = 136446722;
            v219 = "__nw_protocol_remove_input_handler";
            v220 = 2082;
            v221 = (char *)v135;
            v222 = 2048;
            v223 = output_handler;
            _os_log_impl(&dword_182FBE000, v133, v134, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
          }
        }
        else if (v212)
        {
          v139 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v133 = objc_claimAutoreleasedReturnValue();
          v140 = v213;
          v141 = os_log_type_enabled(v133, v213);
          if (v139)
          {
            if (v141)
            {
              v142 = output_handler->identifier->name;
              if (!v142)
                v142 = "invalid";
              *(_DWORD *)buf = 136446978;
              v219 = "__nw_protocol_remove_input_handler";
              v220 = 2082;
              v221 = (char *)v142;
              v222 = 2048;
              v223 = output_handler;
              v224 = 2082;
              v225 = v139;
              _os_log_impl(&dword_182FBE000, v133, v140, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v139);
            goto LABEL_209;
          }
          if (v141)
          {
            v157 = output_handler->identifier->name;
            if (!v157)
              v157 = "invalid";
            *(_DWORD *)buf = 136446722;
            v219 = "__nw_protocol_remove_input_handler";
            v220 = 2082;
            v221 = (char *)v157;
            v222 = 2048;
            v223 = output_handler;
            _os_log_impl(&dword_182FBE000, v133, v140, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v133 = objc_claimAutoreleasedReturnValue();
          v155 = v213;
          if (os_log_type_enabled(v133, v213))
          {
            v156 = output_handler->identifier->name;
            if (!v156)
              v156 = "invalid";
            *(_DWORD *)buf = 136446722;
            v219 = "__nw_protocol_remove_input_handler";
            v220 = 2082;
            v221 = (char *)v156;
            v222 = 2048;
            v223 = output_handler;
            _os_log_impl(&dword_182FBE000, v133, v155, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

LABEL_209:
        v132 = (char *)logb;
        goto LABEL_210;
      }
      __nwlog_obj();
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v219 = "nw_endpoint_handler_get_state";
      v118 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v214) = 0;
      if (__nwlog_fault(v118, type, &v214))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v119 = objc_claimAutoreleasedReturnValue();
          v120 = type[0];
          if (os_log_type_enabled(v119, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_state";
            _os_log_impl(&dword_182FBE000, v119, v120, "%{public}s called with null handler", buf, 0xCu);
          }
LABEL_171:

          goto LABEL_172;
        }
        if (!(_BYTE)v214)
        {
          __nwlog_obj();
          v119 = objc_claimAutoreleasedReturnValue();
          v138 = type[0];
          if (os_log_type_enabled(v119, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_state";
            _os_log_impl(&dword_182FBE000, v119, v138, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_171;
        }
        v127 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v119 = objc_claimAutoreleasedReturnValue();
        v128 = type[0];
        v129 = os_log_type_enabled(v119, type[0]);
        if (!v127)
        {
          if (v129)
          {
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_state";
            _os_log_impl(&dword_182FBE000, v119, v128, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }
          goto LABEL_171;
        }
        if (v129)
        {
          *(_DWORD *)buf = 136446466;
          v219 = "nw_endpoint_handler_get_state";
          v220 = 2082;
          v221 = v127;
          _os_log_impl(&dword_182FBE000, v119, v128, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v127);
      }
LABEL_172:
      if (v118)
        free(v118);
      if ((*((_BYTE *)v5 + 36) & 4) == 0)
        goto LABEL_15;
      __nwlog_obj();
      v143 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v219 = "nw_endpoint_handler_get_logging_disabled";
      v144 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v214) = 0;
      if (__nwlog_fault(v144, type, &v214))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v145 = objc_claimAutoreleasedReturnValue();
          v146 = type[0];
          if (os_log_type_enabled(v145, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_logging_disabled";
            _os_log_impl(&dword_182FBE000, v145, v146, "%{public}s called with null handler", buf, 0xCu);
          }
        }
        else if ((_BYTE)v214)
        {
          v147 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v145 = objc_claimAutoreleasedReturnValue();
          v148 = type[0];
          v149 = os_log_type_enabled(v145, type[0]);
          if (v147)
          {
            if (v149)
            {
              *(_DWORD *)buf = 136446466;
              v219 = "nw_endpoint_handler_get_logging_disabled";
              v220 = 2082;
              v221 = v147;
              _os_log_impl(&dword_182FBE000, v145, v148, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v147);
            goto LABEL_201;
          }
          if (v149)
          {
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_logging_disabled";
            _os_log_impl(&dword_182FBE000, v145, v148, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v145 = objc_claimAutoreleasedReturnValue();
          v150 = type[0];
          if (os_log_type_enabled(v145, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_logging_disabled";
            _os_log_impl(&dword_182FBE000, v145, v150, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_201:
      if (v144)
        free(v144);
      goto LABEL_237;
    }
    __nwlog_obj();
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v219 = "nw_endpoint_flow_rebuild_stack";
    v114 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v214) = 0;
    if (__nwlog_fault(v114, type, &v214))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v115 = objc_claimAutoreleasedReturnValue();
        v116 = type[0];
        if (os_log_type_enabled(v115, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v219 = "nw_endpoint_flow_rebuild_stack";
          _os_log_impl(&dword_182FBE000, v115, v116, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if ((_BYTE)v214)
      {
        v124 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v115 = objc_claimAutoreleasedReturnValue();
        v125 = type[0];
        v126 = os_log_type_enabled(v115, type[0]);
        if (v124)
        {
          if (v126)
          {
            *(_DWORD *)buf = 136446466;
            v219 = "nw_endpoint_flow_rebuild_stack";
            v220 = 2082;
            v221 = v124;
            _os_log_impl(&dword_182FBE000, v115, v125, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v124);
          goto LABEL_167;
        }
        if (v126)
        {
          *(_DWORD *)buf = 136446210;
          v219 = "nw_endpoint_flow_rebuild_stack";
          _os_log_impl(&dword_182FBE000, v115, v125, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v115 = objc_claimAutoreleasedReturnValue();
        v137 = type[0];
        if (os_log_type_enabled(v115, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v219 = "nw_endpoint_flow_rebuild_stack";
          _os_log_impl(&dword_182FBE000, v115, v137, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_167:
    if (v114)
      free(v114);
    goto LABEL_237;
  }
  v108 = v3;
  __nwlog_obj();
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v219 = "nw_endpoint_flow_rebuild_stack";
  v110 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v214) = 0;
  if (__nwlog_fault(v110, type, &v214))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v112 = type[0];
      if (os_log_type_enabled(v111, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v219 = "nw_endpoint_flow_rebuild_stack";
        _os_log_impl(&dword_182FBE000, v111, v112, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v214)
    {
      v121 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v122 = type[0];
      v123 = os_log_type_enabled(v111, type[0]);
      if (v121)
      {
        if (v123)
        {
          *(_DWORD *)buf = 136446466;
          v219 = "nw_endpoint_flow_rebuild_stack";
          v220 = 2082;
          v221 = v121;
          _os_log_impl(&dword_182FBE000, v111, v122, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v121);
        goto LABEL_162;
      }
      if (v123)
      {
        *(_DWORD *)buf = 136446210;
        v219 = "nw_endpoint_flow_rebuild_stack";
        _os_log_impl(&dword_182FBE000, v111, v122, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v111 = objc_claimAutoreleasedReturnValue();
      v136 = type[0];
      if (os_log_type_enabled(v111, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v219 = "nw_endpoint_flow_rebuild_stack";
        _os_log_impl(&dword_182FBE000, v111, v136, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_162:
  if (v110)
    free(v110);
LABEL_238:

}

void sub_183ADF274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t ___Z30nw_endpoint_flow_rebuild_stackP30NWConcrete_nw_endpoint_handlerP11nw_protocol_block_invoke(uint64_t a1, void *a2)
{
  _DWORD *v3;
  NSObject *v4;
  const char *id_string;
  const char *v6;
  nw_endpoint_t v7;
  const char *logging_description;
  const char *v9;
  const char *v10;
  id v11;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  id v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v6 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v7 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      logging_description = nw_endpoint_get_logging_description(v7);
      v9 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v10 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v11 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      v13 = 136448002;
      v14 = "nw_endpoint_flow_rebuild_stack_block_invoke";
      v15 = 2082;
      v16 = id_string;
      v17 = 2082;
      v18 = v6;
      v19 = 2082;
      v20 = logging_description;
      v21 = 2082;
      v22 = v9;
      v23 = 2082;
      v24 = v10;
      v25 = 2114;
      v26 = v11;
      v27 = 1024;
      v28 = nw_frame_unclaimed_length(v3);
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Finalizing frame of size: %u", (uint8_t *)&v13, 0x4Eu);

    }
  }
  nw_frame_finalize((uint64_t)v3);

  return 1;
}

void sub_183ADF584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_listener_protocol_on_nw_queue(void *a1, void *a2)
{
  id v3;
  NWConcrete_nw_endpoint_handler *v4;
  uint64_t mode;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL has_protocol_in_stack;
  NWConcrete_nw_endpoint_handler *v10;
  char v11;
  NSObject *v12;
  NWConcrete_nw_endpoint_handler *v13;
  NWConcrete_nw_endpoint_handler *v14;
  _BOOL4 v15;
  const char *v16;
  nw_endpoint_t v17;
  const char *v18;
  NWConcrete_nw_endpoint_handler *v19;
  NWConcrete_nw_endpoint_handler *v20;
  uint64_t v21;
  const char *v22;
  NWConcrete_nw_endpoint_handler *v23;
  const char *v24;
  NWConcrete_nw_endpoint_handler *v25;
  _BOOL4 v26;
  NWConcrete_nw_endpoint_handler *v27;
  NWConcrete_nw_endpoint_handler *v28;
  _BOOL4 v29;
  const char *v30;
  nw_endpoint_t v31;
  NWConcrete_nw_endpoint_handler *v32;
  NWConcrete_nw_endpoint_handler *v33;
  uint64_t state;
  const char *v35;
  NWConcrete_nw_endpoint_handler *v36;
  const char *v37;
  NSObject *v38;
  NWConcrete_nw_endpoint_handler *v39;
  OS_nw_path *v40;
  nw_endpoint_t v41;
  const char *v42;
  NSObject *v43;
  NWConcrete_nw_endpoint_handler *v44;
  OS_nw_path *v45;
  id v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  const char *v56;
  os_log_type_t v57;
  const char *v58;
  NSObject *v59;
  NWConcrete_nw_endpoint_handler *v60;
  NWConcrete_nw_endpoint_handler *v61;
  _BOOL4 v62;
  const char *v63;
  nw_endpoint_t v64;
  const char *v65;
  NWConcrete_nw_endpoint_handler *v66;
  NWConcrete_nw_endpoint_handler *v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  NWConcrete_nw_endpoint_handler *v71;
  const char *v72;
  NWConcrete_nw_endpoint_handler *v74;
  OS_nw_path *v75;
  void *v76;
  os_log_type_t v77;
  char *backtrace_string;
  os_log_type_t v79;
  _BOOL4 v80;
  os_log_type_t v81;
  NWConcrete_nw_endpoint_mode_handler *v82;
  void *v83;
  const char *v84;
  char *id_str;
  os_unfair_lock_s *lock;
  id v87;
  nw_endpoint_t v88;
  const char *logging_description;
  const char *v90;
  uint64_t v91;
  char v92;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v95;
  __int16 v96;
  char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  void *v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  const char *v105;
  __int16 v106;
  OS_nw_path *v107;
  __int16 v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v87 = a2;
  v83 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
    v48 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v92 = 0;
    if (!__nwlog_fault(v48, &type, &v92))
      goto LABEL_91;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v77 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)buf = 136446210;
        v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v49, v77, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_115;
    }
    if (!v92)
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      v81 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)buf = 136446210;
        v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        _os_log_impl(&dword_182FBE000, v49, v81, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_115;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v53 = objc_claimAutoreleasedReturnValue();
    v79 = type;
    v80 = os_log_type_enabled(v53, type);
    if (backtrace_string)
    {
      if (v80)
      {
        *(_DWORD *)buf = 136446466;
        v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        v96 = 2082;
        v97 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v53, v79, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
      if (!v48)
        goto LABEL_93;
      goto LABEL_92;
    }
    if (v80)
    {
      *(_DWORD *)buf = 136446210;
      v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
      _os_log_impl(&dword_182FBE000, v53, v79, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_90;
  }
  v4 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v4->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v46 = (id)gLogObj;
    if (mode > 5)
      v47 = "unknown-mode";
    else
      v47 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
    v96 = 2082;
    v97 = (char *)v47;
    v98 = 2082;
    v99 = "flow";
    v48 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v92 = 0;
    if (!__nwlog_fault(v48, &type, &v92))
    {
LABEL_91:
      if (!v48)
      {
LABEL_93:
        v91 = 0;
        goto LABEL_94;
      }
LABEL_92:
      free(v48);
      goto LABEL_93;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v49 = (id)gLogObj;
      v50 = type;
      if (os_log_type_enabled(v49, type))
      {
        if (mode > 5)
          v51 = "unknown-mode";
        else
          v51 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        v96 = 2082;
        v97 = (char *)v51;
        v98 = 2082;
        v99 = "flow";
        _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
LABEL_115:

      goto LABEL_91;
    }
    if (!v92)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v49 = (id)gLogObj;
      v57 = type;
      if (os_log_type_enabled(v49, type))
      {
        if (mode > 5)
          v58 = "unknown-mode";
        else
          v58 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        v96 = 2082;
        v97 = (char *)v58;
        v98 = 2082;
        v99 = "flow";
        _os_log_impl(&dword_182FBE000, v49, v57, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
      goto LABEL_115;
    }
    v52 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v53 = (id)gLogObj;
    v54 = type;
    v55 = os_log_type_enabled(v53, type);
    if (v52)
    {
      if (v55)
      {
        if (mode > 5)
          v56 = "unknown-mode";
        else
          v56 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446978;
        v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        v96 = 2082;
        v97 = (char *)v56;
        v98 = 2082;
        v99 = "flow";
        v100 = 2082;
        v101 = v52;
        _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v52);
      if (!v48)
        goto LABEL_93;
      goto LABEL_92;
    }
    if (v55)
    {
      if (mode > 5)
        v70 = "unknown-mode";
      else
        v70 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
      v96 = 2082;
      v97 = (char *)v70;
      v98 = 2082;
      v99 = "flow";
      _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
LABEL_90:

    goto LABEL_91;
  }
  v82 = nw_endpoint_handler_copy_flow(v4);
  v6 = *((_QWORD *)v82 + 51);
  if (!v6)
  {
LABEL_47:
    v91 = 0;
    goto LABEL_48;
  }
  id_str = v4->id_str;
  lock = &v4->lock;
  v7 = &unk_1ECD84000;
  while (1)
  {
    v8 = *(_QWORD *)(v6 + 16);
    v91 = v6;
    if (*(_DWORD *)(v8 + 36) == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 232))
        break;
    }
    v25 = v4;
    v26 = (*((_BYTE *)v4 + 268) & 0x20) == 0;

    if (v26)
    {
      if (v7[413] != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v12 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v27 = v25;

        v28 = v27;
        v29 = (*((_BYTE *)v4 + 268) & 1) == 0;

        if (v29)
          v30 = "";
        else
          v30 = "dry-run ";
        v31 = nw_endpoint_handler_copy_endpoint(v28);
        logging_description = nw_endpoint_get_logging_description(v31);
        v32 = v28;
        v33 = v32;
        state = v4->state;
        v35 = "unknown-state";
        if (state <= 5)
          v35 = off_1E149FC48[state];

        v36 = v33;
        v37 = "path";
        switch(v4->mode)
        {
          case 0:
            break;
          case 1:
            v37 = "resolver";
            break;
          case 2:
            v37 = nw_endpoint_flow_mode_string(v4->mode_handler);
            break;
          case 3:
            v37 = "proxy";
            break;
          case 4:
            v37 = "fallback";
            break;
          case 5:
            v37 = "transform";
            break;
          default:
            v37 = "unknown-mode";
            break;
        }

        v38 = v12;
        v39 = v36;
        os_unfair_lock_lock(lock);
        v40 = v4->current_path;
        v41 = v31;
        v7 = (_QWORD *)&unk_1ECD84000;
        os_unfair_lock_unlock(lock);

        v12 = v38;
        *(_DWORD *)buf = 136448002;
        v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        v96 = 2082;
        v97 = v4->id_str;
        v98 = 2082;
        v99 = v30;
        v100 = 2082;
        v101 = (void *)logging_description;
        v102 = 2082;
        v103 = v35;
        v104 = 2082;
        v105 = v37;
        v106 = 2114;
        v107 = v40;
        v108 = 2082;
        v109 = v8;
        _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No listener protocol for %{public}s", buf, 0x52u);

      }
      goto LABEL_42;
    }
LABEL_43:
    v6 = *(_QWORD *)(v91 + 32);
    if (!v6)
      goto LABEL_47;
  }
  has_protocol_in_stack = nw_parameters_has_protocol_in_stack(v87, (_QWORD *)v8);
  v10 = v4;
  v11 = *((_BYTE *)v4 + 268);

  if (!has_protocol_in_stack)
  {
    if ((v11 & 0x20) == 0)
    {
      if (v7[413] != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v12 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = v10;

        v14 = v13;
        v15 = (*((_BYTE *)v4 + 268) & 1) == 0;

        if (v15)
          v16 = "";
        else
          v16 = "dry-run ";
        v17 = nw_endpoint_handler_copy_endpoint(v14);
        v18 = nw_endpoint_get_logging_description(v17);
        v88 = v17;
        v19 = v14;
        v20 = v19;
        v21 = v4->state;
        v22 = "unknown-state";
        if (v21 <= 5)
          v22 = off_1E149FC48[v21];
        v84 = v22;

        v23 = v20;
        v24 = "path";
        switch(v4->mode)
        {
          case 0:
            break;
          case 1:
            v24 = "resolver";
            break;
          case 2:
            v24 = nw_endpoint_flow_mode_string(v4->mode_handler);
            break;
          case 3:
            v24 = "proxy";
            break;
          case 4:
            v24 = "fallback";
            break;
          case 5:
            v24 = "transform";
            break;
          default:
            v24 = "unknown-mode";
            break;
        }

        v42 = v18;
        v43 = v12;
        v44 = v23;
        os_unfair_lock_lock(lock);
        v45 = v4->current_path;
        v7 = (_QWORD *)&unk_1ECD84000;
        os_unfair_lock_unlock(lock);

        v12 = v43;
        *(_DWORD *)buf = 136448002;
        v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        v96 = 2082;
        v97 = v4->id_str;
        v98 = 2082;
        v99 = v16;
        v100 = 2082;
        v101 = (void *)v42;
        v102 = 2082;
        v103 = v84;
        v104 = 2082;
        v105 = v24;
        v106 = 2114;
        v107 = v45;
        v108 = 2082;
        v109 = v8;
        _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Protocol %{public}s is not listener eligible (not in request stack)", buf, 0x52u);

      }
LABEL_42:

      goto LABEL_43;
    }
    goto LABEL_43;
  }
  if ((v11 & 0x20) == 0)
  {
    if (v7[413] != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v59 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      v60 = v10;

      v61 = v60;
      v62 = (*((_BYTE *)v4 + 268) & 1) == 0;

      if (v62)
        v63 = "";
      else
        v63 = "dry-run ";
      v64 = nw_endpoint_handler_copy_endpoint(v61);
      v65 = nw_endpoint_get_logging_description(v64);
      v66 = v61;
      v67 = v66;
      v68 = v4->state;
      if (v68 > 5)
        v69 = "unknown-state";
      else
        v69 = off_1E149FC48[v68];
      v90 = v69;

      v71 = v67;
      v72 = "path";
      switch(v4->mode)
      {
        case 0:
          break;
        case 1:
          v72 = "resolver";
          break;
        case 2:
          v72 = nw_endpoint_flow_mode_string(v4->mode_handler);
          break;
        case 3:
          v72 = "proxy";
          break;
        case 4:
          v72 = "fallback";
          break;
        case 5:
          v72 = "transform";
          break;
        default:
          v72 = "unknown-mode";
          break;
      }

      v74 = v71;
      os_unfair_lock_lock(lock);
      v75 = v4->current_path;
      os_unfair_lock_unlock(lock);

      *(_DWORD *)buf = 136448002;
      v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
      v96 = 2082;
      v97 = id_str;
      v98 = 2082;
      v99 = v63;
      v100 = 2082;
      v101 = (void *)v65;
      v102 = 2082;
      v103 = v90;
      v104 = 2082;
      v105 = v72;
      v106 = 2114;
      v107 = v75;
      v108 = 2082;
      v109 = v8;
      _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Found listener protocol %{public}s", buf, 0x52u);

    }
  }
LABEL_48:

LABEL_94:
  return v91;
}

void sub_183AE02C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_handler *nw_endpoint_flow_copy_joinable_clone_handler(void *a1, void *a2)
{
  id v3;
  id v4;
  NWConcrete_nw_endpoint_handler *v5;
  NWConcrete_nw_endpoint_handler *v6;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v8;
  NWConcrete_nw_endpoint_mode_handler *v9;
  id *v10;
  id v11;
  id v12;
  id *v13;
  NWConcrete_nw_endpoint_handler *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  id v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  const char *v33;
  os_log_type_t v34;
  const char *v35;
  const char *v37;
  _QWORD v38[4];
  id v39;
  _BYTE *v40;
  char v41;
  os_log_type_t type;
  _BYTE buf[24];
  const char *v44;
  __int16 v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (NWConcrete_nw_endpoint_handler *)v3;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v17, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v41)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        v22 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_29:
    if (v17)
      free(v17);
    mode = 0;
LABEL_32:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = (id)gLogObj;
    if (mode > 5)
      v25 = "unknown-mode";
    else
      v25 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v25;
    *(_WORD *)&buf[22] = 2082;
    v44 = "flow";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v26, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (id)gLogObj;
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          if (mode > 5)
            v29 = "unknown-mode";
          else
            v29 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v29;
          *(_WORD *)&buf[22] = 2082;
          v44 = "flow";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v41)
      {
        v30 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (id)gLogObj;
        v31 = type;
        v32 = os_log_type_enabled(v27, type);
        if (v30)
        {
          if (v32)
          {
            if (mode > 5)
              v33 = "unknown-mode";
            else
              v33 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v33;
            *(_WORD *)&buf[22] = 2082;
            v44 = "flow";
            v45 = 2082;
            v46 = v30;
            _os_log_impl(&dword_182FBE000, v27, v31, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v30);
          if (!v26)
            goto LABEL_53;
          goto LABEL_52;
        }
        if (v32)
        {
          if (mode > 5)
            v37 = "unknown-mode";
          else
            v37 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v37;
          *(_WORD *)&buf[22] = 2082;
          v44 = "flow";
          _os_log_impl(&dword_182FBE000, v27, v31, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (id)gLogObj;
        v34 = type;
        if (os_log_type_enabled(v27, type))
        {
          if (mode > 5)
            v35 = "unknown-mode";
          else
            v35 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_joinable_clone_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2082;
          v44 = "flow";
          _os_log_impl(&dword_182FBE000, v27, v34, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v26)
    {
LABEL_53:
      v14 = 0;
      goto LABEL_54;
    }
LABEL_52:
    free(v26);
    goto LABEL_53;
  }
  mode = v5->mode;

  if (mode != 2)
    goto LABEL_32;
  v8 = nw_endpoint_handler_copy_flow(v6);
  v9 = v8;
  if ((*((_BYTE *)v8 + 32) & 2) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v8 + 220);
    v10 = v6;
    v11 = v10[4];

    os_unfair_lock_unlock((os_unfair_lock_t)v9 + 220);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    LOBYTE(v44) = 0;
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = __nw_endpoint_flow_copy_joinable_clone_handler_block_invoke;
    v38[3] = &unk_1E14AB5C8;
    v12 = v4;
    v39 = v12;
    v40 = buf;
    nw_parameters_internal_iterate_protocol_stack(v11, 5, 0, v38);
    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      v13 = v10;
    }
    else
    {
      v15 = *((_QWORD *)v9 + 117);
      if (!v15)
      {
        v14 = 0;
        goto LABEL_10;
      }
      v13 = (id *)nw_endpoint_flow_copy_joinable_clone_handler(v15, v12);
    }
    v14 = (NWConcrete_nw_endpoint_handler *)v13;
LABEL_10:

    _Block_object_dispose(buf, 8);
    goto LABEL_11;
  }
  v14 = v6;
LABEL_11:

LABEL_54:
  return v14;
}

void sub_183AE0AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_flow_copy_joinable_clone_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  char *identifier;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  identifier = nw_protocol_definition_get_identifier(v4);
  if (*((_DWORD *)identifier + 9) != 2)
  {
LABEL_7:
    v7 = 1;
    goto LABEL_8;
  }
  v6 = identifier;
  if (!nw_parameters_has_protocol_in_stack(*(void **)(a1 + 32), identifier))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v10 = 136446466;
      v11 = "nw_endpoint_flow_copy_joinable_clone_handler_block_invoke";
      v12 = 2082;
      v13 = v6;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s Cannot join protocol %{public}s (not in request stack)", (uint8_t *)&v10, 0x16u);
    }

    goto LABEL_7;
  }
  v7 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
LABEL_8:

  return v7;
}

void sub_183AE0C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_set_metadata_changed_handler(void *a1, void *a2)
{
  id v3;
  id v4;
  NWConcrete_nw_endpoint_handler *v5;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v7;
  void *v8;
  void *v9;
  id v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  const char *v19;
  os_log_type_t v20;
  const char *v21;
  const char *v22;
  void *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_handler_set_metadata_changed_handler";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v12, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_metadata_changed_handler";
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (!v29)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_metadata_changed_handler";
          _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      v27 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_set_metadata_changed_handler";
          _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_endpoint_handler_set_metadata_changed_handler";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_38:
    if (!v12)
      goto LABEL_40;
LABEL_39:
    free(v12);
    goto LABEL_40;
  }
  v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode == 2)
  {
    v7 = nw_endpoint_handler_copy_flow(v5);
    v8 = _Block_copy(v4);
    v9 = (void *)*((_QWORD *)v7 + 130);
    *((_QWORD *)v7 + 130) = v8;

    if ((*((_BYTE *)v7 + 33) & 4) != 0)
      nw_endpoint_handler_register_metadata_changed_handler(v5);

    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (mode > 5)
    v11 = "unknown-mode";
  else
    v11 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v32 = "nw_endpoint_handler_set_metadata_changed_handler";
  v33 = 2082;
  v34 = (void *)v11;
  v35 = 2082;
  v36 = "flow";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v12, &type, &v29))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5)
        v15 = "unknown-mode";
      else
        v15 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_metadata_changed_handler";
      v33 = 2082;
      v34 = (void *)v15;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_37:

    goto LABEL_38;
  }
  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5)
        v21 = "unknown-mode";
      else
        v21 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_metadata_changed_handler";
      v33 = 2082;
      v34 = (void *)v21;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      if (mode > 5)
        v22 = "unknown-mode";
      else
        v22 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v32 = "nw_endpoint_handler_set_metadata_changed_handler";
      v33 = 2082;
      v34 = (void *)v22;
      v35 = 2082;
      v36 = "flow";
      _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    if (mode > 5)
      v19 = "unknown-mode";
    else
      v19 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    v32 = "nw_endpoint_handler_set_metadata_changed_handler";
    v33 = 2082;
    v34 = (void *)v19;
    v35 = 2082;
    v36 = "flow";
    v37 = 2082;
    v38 = v16;
    _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v16);
  if (v12)
    goto LABEL_39;
LABEL_40:

}

void sub_183AE1274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_inject_disconnect_error(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  NWConcrete_nw_endpoint_handler *v7;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v9;
  NWConcrete_nw_endpoint_mode_handler *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  NWConcrete_nw_endpoint_handler *v24;
  char v25;
  NSObject *v26;
  NWConcrete_nw_endpoint_handler *v27;
  NWConcrete_nw_endpoint_handler *v28;
  char v29;
  const char *v30;
  nw_endpoint_t v31;
  const char *logging_description;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  const char *v36;
  id v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  const char *v46;
  id v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  os_log_type_t v51;
  const char *v52;
  char *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  const char *v56;
  os_log_type_t v57;
  void **v58;
  void **v59;
  int v60;
  const char *v61;
  void **v62;
  id v63;
  void *v64;
  os_log_type_t v65;
  char *backtrace_string;
  os_log_type_t v67;
  _BOOL4 v68;
  os_log_type_t v69;
  const char *v70;
  char *id_str;
  char v72;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v75;
  __int16 v76;
  void *v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  void *v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  id v87;
  __int16 v88;
  int v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v75 = "nw_endpoint_handler_inject_disconnect_error";
    v39 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v72 = 0;
    if (!__nwlog_fault(v39, &type, &v72))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v65 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v75 = "nw_endpoint_handler_inject_disconnect_error";
        _os_log_impl(&dword_182FBE000, v40, v65, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v72)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v67 = type;
      v68 = os_log_type_enabled(v40, type);
      if (backtrace_string)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446466;
          v75 = "nw_endpoint_handler_inject_disconnect_error";
          v76 = 2082;
          v77 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v40, v67, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_86;
      }
      if (v68)
      {
        *(_DWORD *)buf = 136446210;
        v75 = "nw_endpoint_handler_inject_disconnect_error";
        _os_log_impl(&dword_182FBE000, v40, v67, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v69 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v75 = "nw_endpoint_handler_inject_disconnect_error";
        _os_log_impl(&dword_182FBE000, v40, v69, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_85:

    goto LABEL_86;
  }
  v7 = (NWConcrete_nw_endpoint_handler *)v5;
  mode = v7->mode;

  if ((_DWORD)mode == 2)
  {
    v9 = nw_endpoint_handler_copy_flow(v7);
    v10 = v9;
    if (v9)
    {
      if ((*((_BYTE *)v9 + 33) & 4) != 0)
      {
        v11 = (char *)v9 + 376;
        if (a2)
        {
          v12 = (char *)*((_QWORD *)v9 + 51);
          if (!v12)
          {
LABEL_21:
            v24 = v7;
            v25 = *((_BYTE *)v24 + 268);

            if ((v25 & 0x20) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v26 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                v27 = v24;

                v28 = v27;
                v29 = *((_BYTE *)v24 + 268);

                if ((v29 & 1) != 0)
                  v30 = "dry-run ";
                else
                  v30 = "";
                v31 = nw_endpoint_handler_copy_endpoint(v28);
                logging_description = nw_endpoint_get_logging_description(v31);
                id_str = v27->id_str;
                v33 = v28;
                v34 = v33;
                v35 = v33[30];
                if (v35 > 5)
                  v36 = "unknown-state";
                else
                  v36 = off_1E149FC48[v35];
                v70 = v36;

                v58 = v34;
                v59 = v58;
                v60 = v7->mode;
                v61 = "path";
                switch(v60)
                {
                  case 0:
                    break;
                  case 1:
                    v61 = "resolver";
                    break;
                  case 2:
                    v61 = nw_endpoint_flow_mode_string(v58[31]);
                    break;
                  case 3:
                    v61 = "proxy";
                    break;
                  case 4:
                    v61 = "fallback";
                    break;
                  case 5:
                    v61 = "transform";
                    break;
                  default:
                    v61 = "unknown-mode";
                    break;
                }

                v62 = v59;
                os_unfair_lock_lock((os_unfair_lock_t)v62 + 28);
                v63 = v62[8];
                os_unfair_lock_unlock((os_unfair_lock_t)v62 + 28);

                *(_DWORD *)buf = 136448002;
                v75 = "nw_endpoint_handler_inject_disconnect_error";
                v76 = 2082;
                v77 = id_str;
                v78 = 2082;
                v79 = v30;
                v80 = 2082;
                v81 = (void *)logging_description;
                v82 = 2082;
                v83 = v70;
                v84 = 2082;
                v85 = v61;
                v86 = 2114;
                v87 = v63;
                v88 = 1024;
                v89 = a3;
                _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Inject disconnect error %d failed, could not locate protocol", buf, 0x4Eu);

              }
            }
            goto LABEL_95;
          }
          while (1)
          {
            v13 = v12;
            v14 = (uint64_t *)*((_QWORD *)v12 + 2);
            v15 = *v14;
            v16 = v14[1];
            v17 = v14[2];
            v18 = v14[3];
            v19 = v14[4];
            v20 = *a2 == v15 && a2[1] == v16;
            v21 = v20 && a2[2] == v17;
            v22 = v21 && a2[3] == v18;
            if (v22 && a2[4] == v19)
              break;
            v12 = (char *)*((_QWORD *)v13 + 4);
            v11 = v13;
            if (!v12)
              goto LABEL_21;
          }
        }
        else
        {
          v13 = 0;
        }
        (*(void (**)(char *, char *, uint64_t))(*((_QWORD *)v11 + 3) + 56))(v11, v13, a3);
        (*(void (**)(char *, char *))(*((_QWORD *)v11 + 3) + 48))(v11, v13);
        (*(void (**)(char *, char *))(*((_QWORD *)v11 + 3) + 184))(v11, v13);
      }
LABEL_95:

      goto LABEL_96;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v47 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v75 = "nw_endpoint_handler_inject_disconnect_error";
    v48 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v72 = 0;
    if (__nwlog_fault(v48, &type, &v72))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v49 = (id)gLogObj;
        v50 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "nw_endpoint_handler_inject_disconnect_error";
          _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s No endpoint flow", buf, 0xCu);
        }
      }
      else if (v72)
      {
        v53 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v49 = (id)gLogObj;
        v54 = type;
        v55 = os_log_type_enabled(v49, type);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)buf = 136446466;
            v75 = "nw_endpoint_handler_inject_disconnect_error";
            v76 = 2082;
            v77 = v53;
            _os_log_impl(&dword_182FBE000, v49, v54, "%{public}s No endpoint flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v53);
          if (!v48)
            goto LABEL_95;
          goto LABEL_79;
        }
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "nw_endpoint_handler_inject_disconnect_error";
          _os_log_impl(&dword_182FBE000, v49, v54, "%{public}s No endpoint flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v49 = (id)gLogObj;
        v57 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "nw_endpoint_handler_inject_disconnect_error";
          _os_log_impl(&dword_182FBE000, v49, v57, "%{public}s No endpoint flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v48)
      goto LABEL_95;
LABEL_79:
    free(v48);
    goto LABEL_95;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v37 = (id)gLogObj;
  if (mode > 5)
    v38 = "unknown-mode";
  else
    v38 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v75 = "nw_endpoint_handler_inject_disconnect_error";
  v76 = 2082;
  v77 = (void *)v38;
  v78 = 2082;
  v79 = "flow";
  v39 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v72 = 0;
  if (__nwlog_fault(v39, &type, &v72))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v40 = (id)gLogObj;
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        if (mode > 5)
          v42 = "unknown-mode";
        else
          v42 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v75 = "nw_endpoint_handler_inject_disconnect_error";
        v76 = 2082;
        v77 = (void *)v42;
        v78 = 2082;
        v79 = "flow";
        _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    else if (v72)
    {
      v43 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v40 = (id)gLogObj;
      v44 = type;
      v45 = os_log_type_enabled(v40, type);
      if (v43)
      {
        if (v45)
        {
          if (mode > 5)
            v46 = "unknown-mode";
          else
            v46 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446978;
          v75 = "nw_endpoint_handler_inject_disconnect_error";
          v76 = 2082;
          v77 = (void *)v46;
          v78 = 2082;
          v79 = "flow";
          v80 = 2082;
          v81 = v43;
          _os_log_impl(&dword_182FBE000, v40, v44, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v43);
        if (v39)
          goto LABEL_87;
        goto LABEL_96;
      }
      if (v45)
      {
        if (mode > 5)
          v56 = "unknown-mode";
        else
          v56 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v75 = "nw_endpoint_handler_inject_disconnect_error";
        v76 = 2082;
        v77 = (void *)v56;
        v78 = 2082;
        v79 = "flow";
        _os_log_impl(&dword_182FBE000, v40, v44, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v40 = (id)gLogObj;
      v51 = type;
      if (os_log_type_enabled(v40, type))
      {
        if (mode > 5)
          v52 = "unknown-mode";
        else
          v52 = off_1E149FC18[mode];
        *(_DWORD *)buf = 136446722;
        v75 = "nw_endpoint_handler_inject_disconnect_error";
        v76 = 2082;
        v77 = (void *)v52;
        v78 = 2082;
        v79 = "flow";
        _os_log_impl(&dword_182FBE000, v40, v51, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }
    goto LABEL_85;
  }
LABEL_86:
  if (v39)
LABEL_87:
    free(v39);
LABEL_96:

}

void sub_183AE1DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_http2_accept(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t int64_with_default;
  int64_t v7;
  uint64_t v8;
  _BOOL8 result;
  int v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  int64_t v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  int v28;
  char *backtrace_string;
  _BOOL4 v30;
  char *v31;
  _BOOL4 v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_protocol_http2_accept";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v23, &type, &v33))
      goto LABEL_79;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_79;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http2_accept";
      v26 = "%{public}s called with null protocol";
      goto LABEL_78;
    }
    if (!v33)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_79;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http2_accept";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_78;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type;
    v30 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (!v30)
        goto LABEL_79;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http2_accept";
      v26 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_78;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_protocol_http2_accept";
      v37 = 2082;
      v38 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_79:
    if (!v23)
      return 0;
LABEL_80:
    free(v23);
    return 0;
  }
  v1 = *(_QWORD *)(a1 + 40);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_protocol_http2_accept";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v23, &type, &v33))
      goto LABEL_79;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_79;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http2_accept";
      v26 = "%{public}s called with null http2";
      goto LABEL_78;
    }
    if (!v33)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_79;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http2_accept";
      v26 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_78;
    }
    v31 = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type;
    v32 = os_log_type_enabled(v24, type);
    if (v31)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_protocol_http2_accept";
        v37 = 2082;
        v38 = v31;
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null http2, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v31);
      if (!v23)
        return 0;
      goto LABEL_80;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http2_accept";
      v26 = "%{public}s called with null http2, no backtrace";
LABEL_78:
      _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
      goto LABEL_79;
    }
    goto LABEL_79;
  }
  if ((*(__int16 *)(v1 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v27 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v28 = *(_DWORD *)(v1 + 368);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_protocol_http2_accept";
      v37 = 2082;
      v38 = (char *)(v1 + 378);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v28;
      _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }
  if ((*(_WORD *)(v1 + 376) & 4) == 0)
  {
    v2 = *(_QWORD *)(v1 + 64);
    if (v2)
    {
      v3 = mach_continuous_time();
      v4 = v3 <= 1 ? 1 : v3;
      v5 = nw_delta_nanos(v2, v4);
      int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_setup_threshold_seconds, 5);
      if (v5 > 1000000000 * int64_with_default)
      {
        if ((*(__int16 *)(v1 + 376) & 0x80000000) == 0)
        {
          v7 = int64_with_default;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v8 = gconnectionLogObj;
          result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
          if (result)
          {
            v10 = *(_DWORD *)(v1 + 368);
            *(_DWORD *)buf = 136447234;
            v36 = "nw_protocol_http2_accept";
            v37 = 2082;
            v38 = (char *)(v1 + 378);
            v39 = 2080;
            v40 = " ";
            v41 = 1024;
            v42 = v10;
            v43 = 2048;
            v44 = v7;
            v11 = "%{public}s %{public}s%s<i%u> denying join attempt because http2 connection not ready within %lld seconds";
            v12 = v8;
            v13 = 48;
LABEL_44:
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, v11, buf, v13);
            return 0;
          }
          return result;
        }
        return 0;
      }
    }
  }
  if (!*(_WORD *)(v1 + 372))
  {
    v15 = *(_WORD *)(v1 + 376);
LABEL_24:
    if ((v15 & 2) != 0)
    {
      if (v15 < 0)
        return 0;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v19 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
      if (!result)
        return result;
      v20 = *(_DWORD *)(v1 + 368);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_protocol_http2_accept";
      v37 = 2082;
      v38 = (char *)(v1 + 378);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v20;
      v11 = "%{public}s %{public}s%s<i%u> cannot accept new streams after receiving a goaway";
    }
    else if ((v15 & 8) != 0)
    {
      if (v15 < 0)
        return 0;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v19 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
      if (!result)
        return result;
      v21 = *(_DWORD *)(v1 + 368);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_protocol_http2_accept";
      v37 = 2082;
      v38 = (char *)(v1 + 378);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v21;
      v11 = "%{public}s %{public}s%s<i%u> cannot accept new streams after the tunnel is closed";
    }
    else
    {
      if ((v15 & 0x40) == 0)
        return 1;
      if (v15 < 0)
        return 0;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v19 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
      if (!result)
        return result;
      v22 = *(_DWORD *)(v1 + 368);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_protocol_http2_accept";
      v37 = 2082;
      v38 = (char *)(v1 + 378);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v22;
      v11 = "%{public}s %{public}s%s<i%u> denying join attempt because http2 has a better alternate path";
    }
    v12 = v19;
    v13 = 38;
    goto LABEL_44;
  }
  v14 = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_maximum_stall_count, 5);
  v15 = *(_WORD *)(v1 + 376);
  if (v14 >= *(unsigned __int16 *)(v1 + 372))
    goto LABEL_24;
  if ((*(_WORD *)(v1 + 376) & 0x8000) != 0)
    return 0;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v16 = gconnectionLogObj;
  result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
  if (result)
  {
    v17 = *(_DWORD *)(v1 + 368);
    v18 = *(unsigned __int16 *)(v1 + 372);
    *(_DWORD *)buf = 136447234;
    v36 = "nw_protocol_http2_accept";
    v37 = 2082;
    v38 = (char *)(v1 + 378);
    v39 = 2080;
    v40 = " ";
    v41 = 1024;
    v42 = v17;
    v43 = 1024;
    LODWORD(v44) = v18;
    v11 = "%{public}s %{public}s%s<i%u> denying join attempt because http2 connection has hit %u stalls";
    v12 = v16;
    v13 = 44;
    goto LABEL_44;
  }
  return result;
}

BOOL nw_protocol_http2_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v6;
  __int16 v7;
  __int16 v8;
  id v9;
  char v10;
  void *v11;
  uint64_t v12;
  id *metadata;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  const char *v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  char *backtrace_string;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint32_t v35;
  _BOOL8 result;
  int v37;
  uint64_t v38;
  char *v39;
  _BOOL4 v40;
  _BOOL4 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  NSObject *v47;
  NSObject *v48;
  void *v49;
  int v50;
  char v51;
  os_log_type_t type[15];
  os_log_type_t v53;
  uint64_t v54;
  _QWORD aBlock[5];
  _QWORD v56[5];
  _QWORD v57[5];
  _QWORD buf[3];
  uint64_t v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v47 = __nwlog_obj();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
      _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)buf, 0xCu);
    }
  }
  v6 = (char *)malloc_type_calloc(1uLL, 0x1D0uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_3:
    *((_OWORD *)v6 + 27) = 0u;
    *((_OWORD *)v6 + 28) = 0u;
    *((_OWORD *)v6 + 25) = 0u;
    *((_OWORD *)v6 + 26) = 0u;
    *((_OWORD *)v6 + 23) = 0u;
    *((_OWORD *)v6 + 24) = 0u;
    *((_OWORD *)v6 + 21) = 0u;
    *((_OWORD *)v6 + 22) = 0u;
    *((_OWORD *)v6 + 19) = 0u;
    *((_OWORD *)v6 + 20) = 0u;
    *((_OWORD *)v6 + 17) = 0u;
    *((_OWORD *)v6 + 18) = 0u;
    *((_OWORD *)v6 + 15) = 0u;
    *((_OWORD *)v6 + 16) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)v6 = 0u;
    *((_DWORD *)v6 + 86) = 1065353216;
    *((_QWORD *)v6 + 2) = a1;
    if (nw_protocol_http2_get_callbacks(void)::onceToken != -1)
      dispatch_once(&nw_protocol_http2_get_callbacks(void)::onceToken, &__block_literal_global_33_81319);
    *((_QWORD *)v6 + 3) = &nw_protocol_http2_get_callbacks(void)::protocol_callbacks;
    *((_QWORD *)v6 + 5) = v6;
    *((_DWORD *)v6 + 91) = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_DWORD *)v6 + 93) = 0;
    *((_WORD *)v6 + 188) &= 0xFFE2u;
    *((_QWORD *)v6 + 10) = 240000;
    if (nw_parameters_get_logging_disabled((uint64_t)a4))
      v7 = 0x8000;
    else
      v7 = 0;
    *((_WORD *)v6 + 188) = v7 & 0x8000 | *((_WORD *)v6 + 188) & 0x7FFF;
    *((_DWORD *)v6 + 90) = -1;
    if (nw_parameters_get_server_mode(a4))
      v8 = 128;
    else
      v8 = 0;
    *((_WORD *)v6 + 188) = *((_WORD *)v6 + 188) & 0xFF7F | v8;
    nw_frame_cache_init((uint64_t)(v6 + 200), (uint64_t)v6, 20, 0x1000000, 24);
    *((_QWORD *)v6 + 21) = 0;
    *((_QWORD *)v6 + 23) = 0;
    *((_QWORD *)v6 + 22) = v6 + 168;
    *((_QWORD *)v6 + 24) = v6 + 184;
    *((_QWORD *)v6 + 30) = 0;
    *((_QWORD *)v6 + 31) = v6 + 240;
    v9 = nw_parameters_copy_context(a4);
    v10 = v6[136];
    if ((v10 & 1) != 0)
    {
      v11 = (void *)*((_QWORD *)v6 + 16);
      if (v11)
      {
        os_release(v11);
        v10 = v6[136];
      }
    }
    *((_QWORD *)v6 + 16) = v9;
    v6[136] = v10 | 1;
    v12 = MEMORY[0x1E0C809B0];
    v56[4] = v6;
    v57[0] = MEMORY[0x1E0C809B0];
    v57[1] = 0x40000000;
    v57[2] = __nw_protocol_http2_create_block_invoke;
    v57[3] = &__block_descriptor_tmp_81320;
    v57[4] = v6;
    v56[0] = MEMORY[0x1E0C809B0];
    v56[1] = 0x40000000;
    v56[2] = __nw_protocol_http2_create_block_invoke_2;
    v56[3] = &__block_descriptor_tmp_6_81321;
    metadata = nw_http_connection_create_metadata(v9, v57, v56);
    *((_QWORD *)v6 + 32) = metadata;
    nw_http_connection_metadata_set_version(metadata, 4);
    buf[0] = 0;
    buf[1] = buf;
    buf[2] = 0x2000000000;
    v59 = (uint64_t)v6;
    aBlock[0] = v12;
    aBlock[1] = 0x40000000;
    aBlock[2] = __nw_protocol_http2_create_block_invoke_3;
    aBlock[3] = &unk_1E14AB740;
    aBlock[4] = buf;
    *((_QWORD *)v6 + 44) = _Block_copy(aBlock);
    _Block_object_dispose(buf, 8);
    v54 = 0;
    if (nghttp2_session_callbacks_new())
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = nghttp2_strerror();
      LODWORD(buf[0]) = 136446466;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
      WORD2(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 6) = v14;
      v15 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v53 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v15, type, &v53))
        goto LABEL_49;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = gLogObj;
        v17 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
          goto LABEL_49;
        v18 = nghttp2_strerror();
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v18;
        v19 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed";
LABEL_47:
        v33 = v16;
        v34 = v17;
        v35 = 22;
LABEL_48:
        _os_log_impl(&dword_182FBE000, v33, v34, v19, (uint8_t *)buf, v35);
        goto LABEL_49;
      }
      if (v53 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = gLogObj;
        v17 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
          goto LABEL_49;
        v31 = nghttp2_strerror();
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v31;
        v19 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed, backtrace limit exceeded";
        goto LABEL_47;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = gLogObj;
      v17 = type[0];
      v29 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!backtrace_string)
      {
        if (!v29)
          goto LABEL_49;
        v32 = nghttp2_strerror();
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v32;
        v19 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed, no backtrace";
        goto LABEL_47;
      }
      if (v29)
      {
        v30 = nghttp2_strerror();
        LODWORD(buf[0]) = 136446722;
        *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v30;
        HIWORD(buf[2]) = 2082;
        v59 = (uint64_t)backtrace_string;
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s nghttp2_session_callbacks_new: %{public}s failed, dumping backtrace:%{public}s", (uint8_t *)buf, 0x20u);
      }
      free(backtrace_string);
LABEL_49:
      if (v15)
LABEL_50:
        free(v15);
LABEL_51:
      std::__destroy_at[abi:nn180100]<nw_protocol_http2,0>((uint64_t)v6);
      free(v6);
      return 0;
    }
    nghttp2_session_callbacks_set_before_frame_send_callback();
    nghttp2_session_callbacks_set_on_header_callback();
    nghttp2_session_callbacks_set_on_begin_headers_callback();
    nghttp2_session_callbacks_set_on_frame_recv_callback();
    nghttp2_session_callbacks_set_on_data_chunk_recv_callback();
    nghttp2_session_callbacks_set_on_stream_close_callback();
    nghttp2_session_callbacks_set_on_frame_send_callback();
    nghttp2_session_callbacks_set_send_callback();
    nghttp2_session_callbacks_set_send_data_callback();
    nghttp2_session_callbacks_set_on_frame_not_send_callback();
    nghttp2_session_callbacks_set_on_invalid_frame_recv_callback();
    nghttp2_session_callbacks_set_error_callback2();
    nghttp2_set_debug_vprintf_callback();
    *(_QWORD *)type = 0;
    nghttp2_option_new();
    nghttp2_option_set_no_auto_window_update();
    nghttp2_option_set_no_rfc9113_leading_and_trailing_ws_validation();
    nghttp2_option_set_peer_max_concurrent_streams();
    nghttp2_option_set_no_closed_streams();
    if ((*((_WORD *)v6 + 188) & 0x80) != 0)
    {
      if ((nghttp2_session_server_new2() & 0x80000000) != 0)
      {
        if (*((__int16 *)v6 + 188) < 0)
          goto LABEL_51;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        if (v6)
          v20 = " ";
        else
          v20 = "";
        if (v6)
          v21 = v6 + 378;
        else
          v21 = "";
        v37 = *((_DWORD *)v6 + 92);
        v38 = nghttp2_strerror();
        LODWORD(buf[0]) = 136447234;
        *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v21;
        HIWORD(buf[2]) = 2080;
        v59 = (uint64_t)v20;
        v60 = 1024;
        v61 = v37;
        v62 = 2082;
        v63 = v38;
        v15 = (char *)_os_log_send_and_compose_impl();
        v53 = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (!__nwlog_fault(v15, &v53, &v51))
          goto LABEL_49;
        if (v53 == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v24 = gconnectionLogObj;
          v25 = v53;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v53))
            goto LABEL_49;
          goto LABEL_35;
        }
        if (v51)
        {
          v39 = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v24 = gconnectionLogObj;
          v25 = v53;
          v41 = os_log_type_enabled((os_log_t)gconnectionLogObj, v53);
          if (v39)
          {
            if (!v41)
              goto LABEL_80;
            goto LABEL_79;
          }
          if (!v41)
            goto LABEL_49;
LABEL_93:
          v45 = *((_DWORD *)v6 + 92);
          v46 = nghttp2_strerror();
          LODWORD(buf[0]) = 136447234;
          *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v21;
          HIWORD(buf[2]) = 2080;
          v59 = (uint64_t)v20;
          v60 = 1024;
          v61 = v45;
          v62 = 2082;
          v63 = v46;
          v19 = "%{public}s %{public}s%s<i%u> nghttp2_session_server_new2 failed: %{public}s, no backtrace";
          goto LABEL_94;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v24 = gconnectionLogObj;
        v25 = v53;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v53))
          goto LABEL_49;
LABEL_85:
        v43 = *((_DWORD *)v6 + 92);
        v44 = nghttp2_strerror();
        LODWORD(buf[0]) = 136447234;
        *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v21;
        HIWORD(buf[2]) = 2080;
        v59 = (uint64_t)v20;
        v60 = 1024;
        v61 = v43;
        v62 = 2082;
        v63 = v44;
        v19 = "%{public}s %{public}s%s<i%u> nghttp2_session_server_new2 failed: %{public}s, backtrace limit exceeded";
        goto LABEL_94;
      }
    }
    else if ((nghttp2_session_client_new2() & 0x80000000) != 0)
    {
      if (*((__int16 *)v6 + 188) < 0)
        goto LABEL_51;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      if (v6)
        v20 = " ";
      else
        v20 = "";
      if (v6)
        v21 = v6 + 378;
      else
        v21 = "";
      v22 = *((_DWORD *)v6 + 92);
      v23 = nghttp2_strerror();
      LODWORD(buf[0]) = 136447234;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
      WORD2(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 6) = v21;
      HIWORD(buf[2]) = 2080;
      v59 = (uint64_t)v20;
      v60 = 1024;
      v61 = v22;
      v62 = 2082;
      v63 = v23;
      v15 = (char *)_os_log_send_and_compose_impl();
      v53 = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (!__nwlog_fault(v15, &v53, &v51))
        goto LABEL_49;
      if (v53 == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v24 = gconnectionLogObj;
        v25 = v53;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v53))
          goto LABEL_49;
LABEL_35:
        v26 = *((_DWORD *)v6 + 92);
        v27 = nghttp2_strerror();
        LODWORD(buf[0]) = 136447234;
        *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v21;
        HIWORD(buf[2]) = 2080;
        v59 = (uint64_t)v20;
        v60 = 1024;
        v61 = v26;
        v62 = 2082;
        v63 = v27;
        v19 = "%{public}s %{public}s%s<i%u> nghttp2_session_server_new2 failed: %{public}s";
LABEL_94:
        v33 = v24;
        v34 = v25;
        v35 = 48;
        goto LABEL_48;
      }
      if (v51)
      {
        v39 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v24 = gconnectionLogObj;
        v25 = v53;
        v40 = os_log_type_enabled((os_log_t)gconnectionLogObj, v53);
        if (v39)
        {
          if (!v40)
            goto LABEL_80;
LABEL_79:
          v50 = *((_DWORD *)v6 + 92);
          v42 = nghttp2_strerror();
          LODWORD(buf[0]) = 136447490;
          *(_QWORD *)((char *)buf + 4) = "nw_protocol_http2_create";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v21;
          HIWORD(buf[2]) = 2080;
          v59 = (uint64_t)v20;
          v60 = 1024;
          v61 = v50;
          v62 = 2082;
          v63 = v42;
          v64 = 2082;
          v65 = v39;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s %{public}s%s<i%u> nghttp2_session_server_new2 failed: %{public}s, dumping backtrace:%{public}s", (uint8_t *)buf, 0x3Au);
LABEL_80:
          free(v39);
          if (!v15)
            goto LABEL_51;
          goto LABEL_50;
        }
        if (!v40)
          goto LABEL_49;
        goto LABEL_93;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v24 = gconnectionLogObj;
      v25 = v53;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v53))
        goto LABEL_49;
      goto LABEL_85;
    }
    MEMORY[0x186DB4334](v54);
    MEMORY[0x186DB42C8](*(_QWORD *)type);
    return (BOOL)v6;
  }
  v48 = __nwlog_obj();
  os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
  LODWORD(buf[0]) = 136446722;
  *(_QWORD *)((char *)buf + 4) = "strict_calloc";
  WORD2(buf[1]) = 2048;
  *(_QWORD *)((char *)&buf[1] + 6) = 1;
  HIWORD(buf[2]) = 2048;
  v59 = 464;
  v49 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v49);
  if (!result)
  {
    free(v49);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void __nw_protocol_http2_create_block_invoke(uint64_t a1)
{
  nw_protocol *v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(nw_protocol **)(a1 + 32);
  if (v1)
  {
    nw_protocol_http2_error(*(nw_protocol **)(a1 + 32), v1, 89);
    nw_http2_connection_close((uint64_t)v1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_http2_cancel";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v11 = "nw_http2_cancel";
      v5 = "%{public}s called with null http2";
      goto LABEL_16;
    }
    if (!v8)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v11 = "nw_http2_cancel";
      v5 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_16;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v11 = "nw_http2_cancel";
        v12 = 2082;
        v13 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null http2, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_17;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "nw_http2_cancel";
      v5 = "%{public}s called with null http2, no backtrace";
LABEL_16:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_17:
  if (v2)
    free(v2);
}

void __nw_protocol_http2_create_block_invoke_2(uint64_t a1, void *aBlock)
{
  unint64_t v2;
  uint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  char *backtrace_string;
  _BOOL4 v52;
  char *v53;
  _BOOL4 v54;
  char v55;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v58;
  char *v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http2_send_ping";
    v44 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v44, &type, &v55))
      goto LABEL_129;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type;
      if (!os_log_type_enabled(v45, type))
        goto LABEL_129;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http2_send_ping";
      v47 = "%{public}s called with null http2";
      goto LABEL_128;
    }
    if (!v55)
    {
      v45 = __nwlog_obj();
      v46 = type;
      if (!os_log_type_enabled(v45, type))
        goto LABEL_129;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http2_send_ping";
      v47 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_128;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type;
    v52 = os_log_type_enabled(v45, type);
    if (!backtrace_string)
    {
      if (!v52)
        goto LABEL_129;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http2_send_ping";
      v47 = "%{public}s called with null http2, no backtrace";
      goto LABEL_128;
    }
    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http2_send_ping";
      v58 = 2082;
      v59 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s called with null http2, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_129:
    if (!v44)
      return;
    goto LABEL_130;
  }
  if (!aBlock)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http2_send_ping";
    v44 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v44, &type, &v55))
      goto LABEL_129;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type;
      if (!os_log_type_enabled(v45, type))
        goto LABEL_129;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http2_send_ping";
      v47 = "%{public}s called with null reply_handler";
      goto LABEL_128;
    }
    if (!v55)
    {
      v45 = __nwlog_obj();
      v46 = type;
      if (!os_log_type_enabled(v45, type))
        goto LABEL_129;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http2_send_ping";
      v47 = "%{public}s called with null reply_handler, backtrace limit exceeded";
      goto LABEL_128;
    }
    v53 = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type;
    v54 = os_log_type_enabled(v45, type);
    if (v53)
    {
      if (v54)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http2_send_ping";
        v58 = 2082;
        v59 = v53;
        _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s called with null reply_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v53);
      if (!v44)
        return;
LABEL_130:
      free(v44);
      return;
    }
    if (v54)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http2_send_ping";
      v47 = "%{public}s called with null reply_handler, no backtrace";
LABEL_128:
      _os_log_impl(&dword_182FBE000, v45, v46, v47, buf, 0xCu);
      goto LABEL_129;
    }
    goto LABEL_129;
  }
  if ((*(__int16 *)(v3 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v48 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v49 = *(_DWORD *)(v3 + 368);
      v50 = *(_QWORD *)(v3 + 72);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_http2_send_ping";
      v58 = 2082;
      v59 = (char *)(v3 + 378);
      v60 = 2080;
      v61 = " ";
      v62 = 1024;
      v63 = v49;
      v64 = 2048;
      v65 = v50;
      _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> seq %llu", buf, 0x30u);
    }
  }
  v5 = _Block_copy(aBlock);
  v6 = *(_QWORD *)(v3 + 72);
  v7 = *(_QWORD *)(v3 + 320);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v2 = *(_QWORD *)(v3 + 72);
      if (v6 >= v7)
        v2 = v6 % v7;
    }
    else
    {
      v2 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)(v3 + 312) + 8 * v2);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                goto LABEL_86;
            }
            else if ((v12 & (v7 - 1)) != v2)
            {
              goto LABEL_26;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_26;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              goto LABEL_86;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v2)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_26:
  v13 = operator new(0x30uLL);
  *v13 = 0;
  v13[1] = v6;
  v13[2] = v6;
  v13[3] = 0;
  v13[4] = v5;
  *((_BYTE *)v13 + 40) = -1;
  v14 = (float)(unint64_t)(*(_QWORD *)(v3 + 336) + 1);
  v15 = *(float *)(v3 + 344);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(v3 + 320);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_63;
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 336) / *(float *)(v3 + 344));
      if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v7)
      {
        v7 = *(_QWORD *)(v3 + 320);
LABEL_63:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v6 >= v7)
            v2 = v6 % v7;
          else
            v2 = v6;
        }
        else
        {
          v2 = (v7 - 1) & v6;
        }
        goto LABEL_76;
      }
      if (!prime)
      {
        v43 = *(void **)(v3 + 312);
        *(_QWORD *)(v3 + 312) = 0;
        if (v43)
          operator delete(v43);
        v7 = 0;
        *(_QWORD *)(v3 + 320) = 0;
        goto LABEL_63;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(void **)(v3 + 312);
    *(_QWORD *)(v3 + 312) = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *(_QWORD *)(v3 + 320) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v3 + 312) + 8 * v22++) = 0;
    while (prime != v22);
    v23 = *(_QWORD **)(v3 + 328);
    if (!v23)
    {
LABEL_62:
      v7 = prime;
      goto LABEL_63;
    }
    v24 = v3 + 328;
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)(v3 + 312) + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else
        {
          v30 = *(_QWORD *)(v3 + 312);
          if (*(_QWORD *)(v30 + 8 * v29))
          {
            *v23 = *i;
            v31 = 8 * v29;
            *i = **(_QWORD **)(*(_QWORD *)(v3 + 312) + v31);
            **(_QWORD **)(*(_QWORD *)(v3 + 312) + v31) = i;
          }
          else
          {
            *(_QWORD *)(v30 + 8 * v29) = v23;
            v23 = i;
            v27 = v29;
          }
        }
      }
      goto LABEL_62;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)(v3 + 312) + 8 * v25) = v24;
    v35 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_62;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v25)
      {
        v38 = *(_QWORD *)(v3 + 312);
        if (!*(_QWORD *)(v38 + 8 * v37))
        {
          *(_QWORD *)(v38 + 8 * v37) = v23;
          goto LABEL_67;
        }
        *v23 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)(v3 + 312) + v36);
        **(_QWORD **)(*(_QWORD *)(v3 + 312) + v36) = v35;
        v35 = v23;
      }
      v37 = v25;
LABEL_67:
      v23 = v35;
      v35 = (_QWORD *)*v35;
      v25 = v37;
      if (!v35)
        goto LABEL_62;
    }
  }
LABEL_76:
  v39 = *(_QWORD *)(v3 + 312);
  v40 = *(_QWORD **)(v39 + 8 * v2);
  if (v40)
  {
    *v13 = *v40;
  }
  else
  {
    v41 = *(_QWORD *)(v3 + 328);
    *v13 = v41;
    *(_QWORD *)(v3 + 328) = v13;
    *(_QWORD *)(v39 + 8 * v2) = v3 + 328;
    if (!v41)
      goto LABEL_85;
    v42 = *(_QWORD *)(v41 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v42 >= v7)
        v42 %= v7;
    }
    else
    {
      v42 &= v7 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)(v3 + 312) + 8 * v42);
  }
  *v40 = v13;
LABEL_85:
  ++*(_QWORD *)(v3 + 336);
  v6 = *(_QWORD *)(v3 + 72);
LABEL_86:
  *(_QWORD *)buf = v6;
  nghttp2_submit_ping();
  ++*(_QWORD *)(v3 + 72);
  nw_http2_session_send(v3);
}

uint64_t __nw_protocol_http2_create_block_invoke_3(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void std::__destroy_at[abi:nn180100]<nw_protocol_http2,0>(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  const void *v4;
  void *v5;
  _QWORD *v6;
  const void *v7;

  v2 = *(_QWORD **)(a1 + 328);
  while (v2)
  {
    v6 = v2;
    v2 = (_QWORD *)*v2;
    if ((v6[5] & 1) != 0)
    {
      v7 = (const void *)v6[4];
      if (v7)
        _Block_release(v7);
    }
    operator delete(v6);
  }
  v3 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v3)
    operator delete(v3);
  if ((*(_BYTE *)(a1 + 272) & 1) != 0)
  {
    v4 = *(const void **)(a1 + 264);
    if (v4)
      _Block_release(v4);
  }
  *(_QWORD *)(a1 + 264) = 0;
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v5 = *(void **)(a1 + 128);
    if (v5)
      os_release(v5);
  }
  *(_QWORD *)(a1 + 128) = 0;
}

uint64_t on_header_callback(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  unsigned int v15;
  uint64_t stream_from_id;
  uint64_t v17;
  uint64_t v19;
  int v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  int v32;
  const char *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  NSObject *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  char *backtrace_string;
  _BOOL4 v55;
  NSObject *v56;
  int v57;
  int v58;
  const char *v59;
  char v60;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  char *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  _BYTE v73[14];
  __int16 v74;
  char *v75;
  __int16 v76;
  char *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v49 = __nwlog_obj();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v63 = "on_header_callback";
      v64 = 2082;
      v65 = a3;
      v66 = 2082;
      v67 = a5;
      _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s called name %{public}s value %{public}s", buf, 0x20u);
    }
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "on_header_callback";
    v50 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v50, &type, &v60))
      goto LABEL_82;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v51 = __nwlog_obj();
      v52 = type;
      if (!os_log_type_enabled(v51, type))
        goto LABEL_82;
      *(_DWORD *)buf = 136446210;
      v63 = "on_header_callback";
      v53 = "%{public}s nghttp2 user data is NULL, not http2";
    }
    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v51 = __nwlog_obj();
      v52 = type;
      v55 = os_log_type_enabled(v51, type);
      if (backtrace_string)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          v63 = "on_header_callback";
          v64 = 2082;
          v65 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_82;
      }
      if (!v55)
      {
LABEL_82:
        if (v50)
          free(v50);
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      v63 = "on_header_callback";
      v53 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }
    else
    {
      v51 = __nwlog_obj();
      v52 = type;
      if (!os_log_type_enabled(v51, type))
        goto LABEL_82;
      *(_DWORD *)buf = 136446210;
      v63 = "on_header_callback";
      v53 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v51, v52, v53, buf, 0xCu);
    goto LABEL_82;
  }
  v14 = *(unsigned __int8 *)(a2 + 12);
  if (v14 == 5)
  {
    if (*(__int16 *)(a8 + 376) < 0)
      return 4294966775;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v19 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return 4294966775;
    v20 = *(_DWORD *)(a8 + 368);
    *(_DWORD *)buf = 136446978;
    v63 = "on_header_callback";
    v64 = 2082;
    v65 = (char *)(a8 + 378);
    v66 = 2080;
    v67 = " ";
    v68 = 1024;
    v69 = v20;
    v21 = "%{public}s %{public}s%s<i%u> push promise frames are currently not supported";
    v22 = v19;
    v23 = 38;
    goto LABEL_42;
  }
  if (v14 != 1)
  {
    if ((*(__int16 *)(a8 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v24 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v25 = *(_DWORD *)(a8 + 368);
        *(_DWORD *)buf = 136446978;
        v63 = "on_header_callback";
        v64 = 2082;
        v65 = (char *)(a8 + 378);
        v66 = 2080;
        v67 = " ";
        v68 = 1024;
        v69 = v25;
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> returning callback failure with unknown error", buf, 0x26u);
      }
    }
    return 4294966394;
  }
  v15 = *(_DWORD *)(a2 + 56);
  if (v15 > 3 || v15 == 2)
  {
    if (*(__int16 *)(a8 + 376) < 0)
      return 4294966775;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v34 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return 4294966775;
    v35 = *(_DWORD *)(a8 + 368);
    v36 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136447234;
    v63 = "on_header_callback";
    v64 = 2082;
    v65 = (char *)(a8 + 378);
    v66 = 2080;
    v67 = " ";
    v68 = 1024;
    v69 = v35;
    v70 = 1024;
    v71 = v36;
    v21 = "%{public}s %{public}s%s<i%u> ERROR: Got headers for stream %d, a stream that doesn't exist.";
    v22 = v34;
    v23 = 44;
    goto LABEL_42;
  }
  stream_from_id = nw_http2_get_stream_from_id(a8, *(_DWORD *)(a2 + 8), 0);
  if (stream_from_id)
  {
    v17 = stream_from_id;
    if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0
      && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v56 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v58 = *(_DWORD *)(v17 + 176);
        v57 = *(_DWORD *)(v17 + 180);
        v59 = "response";
        if (!*(_DWORD *)(a2 + 56))
          v59 = "request";
        *(_DWORD *)buf = 136448258;
        v63 = "on_header_callback";
        v64 = 2082;
        v65 = (char *)(v17 + 191);
        v66 = 2080;
        v67 = " ";
        v68 = 1024;
        v69 = v57;
        v70 = 1024;
        v71 = v58;
        v72 = 2080;
        *(_QWORD *)v73 = v59;
        *(_WORD *)&v73[8] = 1024;
        *(_DWORD *)&v73[10] = v58;
        v74 = 2082;
        v75 = a3;
        v76 = 2082;
        v77 = a5;
        _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> received header %s on stream %d: (%{public}s: %{public}s)", buf, 0x50u);
      }
    }
    if (nw_http_parsed_fields_add(*(void **)(v17 + 144), a3, a4, a5, a6))
      return 0;
    if (((*(unsigned __int16 *)(v17 + 188) | (*(unsigned __int8 *)(v17 + 190) << 16)) & 0x80000) != 0)
      return 4294966775;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v37 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return 4294966775;
    v39 = *(_DWORD *)(v17 + 176);
    v38 = *(_DWORD *)(v17 + 180);
    v40 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136448002;
    v63 = "on_header_callback";
    v64 = 2082;
    v65 = (char *)(v17 + 191);
    v66 = 2080;
    v67 = " ";
    v68 = 1024;
    v69 = v38;
    v70 = 1024;
    v71 = v39;
    v72 = 1040;
    *(_DWORD *)v73 = a4;
    *(_WORD *)&v73[4] = 2080;
    *(_QWORD *)&v73[6] = a3;
    v74 = 1024;
    LODWORD(v75) = v40;
    v21 = "%{public}s %{public}s%s<i%u:s%d> invalid header field %.*s received on stream %d";
    v22 = v37;
    v23 = 66;
LABEL_42:
    _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
    return 4294966775;
  }
  if ((*(__int16 *)(a8 + 376) & 0x80000000) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v26 = *(_DWORD *)(a8 + 368);
    v27 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136447234;
    v63 = "on_header_callback";
    v64 = 2082;
    v65 = (char *)(a8 + 378);
    v66 = 2080;
    v67 = " ";
    v68 = 1024;
    v69 = v26;
    v70 = 1024;
    v71 = v27;
    v28 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v28, &type, &v60))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v29 = gconnectionLogObj;
      v30 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        goto LABEL_58;
      v31 = *(_DWORD *)(a8 + 368);
      v32 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136447234;
      v63 = "on_header_callback";
      v64 = 2082;
      v65 = (char *)(a8 + 378);
      v66 = 2080;
      v67 = " ";
      v68 = 1024;
      v69 = v31;
      v70 = 1024;
      v71 = v32;
      v33 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
    }
    else if (v60)
    {
      v41 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v29 = gconnectionLogObj;
      v30 = type;
      v42 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v41)
      {
        if (v42)
        {
          v43 = *(_DWORD *)(a8 + 368);
          v44 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136447490;
          v63 = "on_header_callback";
          v64 = 2082;
          v65 = (char *)(a8 + 378);
          v66 = 2080;
          v67 = " ";
          v68 = 1024;
          v69 = v43;
          v70 = 1024;
          v71 = v44;
          v72 = 2082;
          *(_QWORD *)v73 = v41;
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s %{public}s%s<i%u> failed to find stream %d, dumping backtrace:%{public}s", buf, 0x36u);
        }
        free(v41);
        goto LABEL_58;
      }
      if (!v42)
      {
LABEL_58:
        if (v28)
          free(v28);
        return 4294966775;
      }
      v47 = *(_DWORD *)(a8 + 368);
      v48 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136447234;
      v63 = "on_header_callback";
      v64 = 2082;
      v65 = (char *)(a8 + 378);
      v66 = 2080;
      v67 = " ";
      v68 = 1024;
      v69 = v47;
      v70 = 1024;
      v71 = v48;
      v33 = "%{public}s %{public}s%s<i%u> failed to find stream %d, no backtrace";
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v29 = gconnectionLogObj;
      v30 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        goto LABEL_58;
      v45 = *(_DWORD *)(a8 + 368);
      v46 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136447234;
      v63 = "on_header_callback";
      v64 = 2082;
      v65 = (char *)(a8 + 378);
      v66 = 2080;
      v67 = " ";
      v68 = 1024;
      v69 = v45;
      v70 = 1024;
      v71 = v46;
      v33 = "%{public}s %{public}s%s<i%u> failed to find stream %d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v29, v30, v33, buf, 0x2Cu);
    goto LABEL_58;
  }
  return 4294966775;
}

void sub_183AE70BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t on_frame_recv_callback(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t stream_from_id;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint32_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  void *v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  int8x8_t v34;
  _QWORD *v35;
  uint8x8_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  const char *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint32_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  const char *v55;
  NSObject *v56;
  os_log_type_t v57;
  int v58;
  int v59;
  const char *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  _QWORD **v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  void *v79;
  _BOOL8 v80;
  void *v81;
  _BOOL4 v82;
  char *v83;
  _BOOL4 v84;
  int v85;
  int v86;
  NSObject *v87;
  int v88;
  uint64_t v89;
  NSObject *v90;
  int v91;
  int v92;
  int v93;
  const char *v94;
  _BOOL8 v95;
  int v96;
  uint64_t v97;
  void *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  void (**v104)(_QWORD, _QWORD, _QWORD);
  uint64_t v105;
  void *v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  char *v112;
  int v113;
  NSObject *v114;
  int v115;
  int v116;
  uint64_t v117;
  void (*v118)(void);
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  char *v128;
  NSObject *v129;
  os_log_type_t v130;
  const char *v131;
  NSObject *v132;
  int v133;
  int v134;
  int v135;
  char *backtrace_string;
  _BOOL4 v137;
  int v138;
  int v139;
  char *v140;
  NSObject *v141;
  os_log_type_t v142;
  int v143;
  int v144;
  const char *v145;
  NSObject *v146;
  int v147;
  NSObject *v148;
  int v149;
  int v150;
  NSObject *v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  const char *v159;
  NSObject *v160;
  os_log_type_t v161;
  int v162;
  int v163;
  int v164;
  const char *v165;
  NSObject *v166;
  int v167;
  NSObject *v168;
  int v169;
  int v170;
  int v171;
  char *v172;
  _BOOL4 v173;
  int v174;
  int v175;
  int v176;
  int v177;
  const char *v178;
  NSObject *v179;
  os_log_type_t v180;
  int v181;
  int v182;
  const char *v183;
  char *v184;
  _BOOL4 v185;
  int v186;
  int v187;
  int v188;
  const char *v189;
  char *v190;
  NSObject *v191;
  os_log_type_t v192;
  const char *v193;
  const char *v194;
  char *v195;
  _BOOL4 v196;
  int v197;
  int v198;
  int v199;
  int v200;
  NSObject *v201;
  int v202;
  int v203;
  char *v204;
  _BOOL4 v205;
  const char *v206;
  NSObject *v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  NSObject *v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  const char *v223;
  int v224;
  int v225;
  NSObject *v226;
  int v227;
  int v228;
  const char *v229;
  NSObject *v230;
  int v231;
  int v232;
  uint64_t v233;
  _QWORD v234[5];
  _QWORD v235[5];
  char v236;
  os_log_type_t type;
  os_log_type_t v238[8];
  _BYTE buf[12];
  __int16 v240;
  void *v241;
  __int16 v242;
  const char *v243;
  __int16 v244;
  int v245;
  __int16 v246;
  _BYTE v247[30];
  uint64_t v248;

  v248 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "on_frame_recv_callback";
    v128 = (char *)_os_log_send_and_compose_impl();
    v238[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v128, v238, &type))
    {
      if (v238[0] == OS_LOG_TYPE_FAULT)
      {
        v129 = __nwlog_obj();
        v130 = v238[0];
        if (os_log_type_enabled(v129, v238[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "on_frame_recv_callback";
          v131 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_260:
          _os_log_impl(&dword_182FBE000, v129, v130, v131, buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v129 = __nwlog_obj();
        v130 = v238[0];
        v137 = os_log_type_enabled(v129, v238[0]);
        if (backtrace_string)
        {
          if (v137)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v129, v130, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_261;
        }
        if (v137)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "on_frame_recv_callback";
          v131 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_260;
        }
      }
      else
      {
        v129 = __nwlog_obj();
        v130 = v238[0];
        if (os_log_type_enabled(v129, v238[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "on_frame_recv_callback";
          v131 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_260;
        }
      }
    }
LABEL_261:
    if (v128)
      free(v128);
    return 4294966394;
  }
  if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v132 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v133 = *(_DWORD *)(a3 + 368);
      v134 = *((unsigned __int8 *)a2 + 12);
      v135 = *((unsigned __int8 *)a2 + 13);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "on_frame_recv_callback";
      v240 = 2082;
      v241 = (void *)(a3 + 378);
      v242 = 2080;
      v243 = " ";
      v244 = 1024;
      v245 = v133;
      v246 = 1024;
      *(_DWORD *)v247 = v134;
      *(_WORD *)&v247[4] = 1024;
      *(_DWORD *)&v247[6] = v135;
      _os_log_impl(&dword_182FBE000, v132, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called with frame type %d flags %d", buf, 0x32u);
    }
  }
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      *(_QWORD *)v238 = 0;
      stream_from_id = nw_http2_get_stream_from_id(a3, *((_DWORD *)a2 + 2), v238);
      if (!stream_from_id)
      {
        if (*(__int16 *)(a3 + 376) < 0)
          return 0;
        if (gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v230 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v231 = *(_DWORD *)(a3 + 368);
            v232 = *((_DWORD *)a2 + 2);
            v233 = *a2;
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(a3 + 378);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v231;
            v246 = 1024;
            *(_DWORD *)v247 = v232;
            *(_WORD *)&v247[4] = 2048;
            *(_QWORD *)&v247[6] = v233;
            _os_log_impl(&dword_182FBE000, v230, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> received a complete DATA frame on stream %d, length %zu", buf, 0x36u);
          }
          if (*(__int16 *)(a3 + 376) < 0)
            return 0;
          if (__nwlog_connection_log::onceToken == -1)
          {
LABEL_267:
            v138 = *(_DWORD *)(a3 + 368);
            v139 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(a3 + 378);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v138;
            v246 = 1024;
            *(_DWORD *)v247 = v139;
            v140 = (char *)_os_log_send_and_compose_impl();
            type = OS_LOG_TYPE_ERROR;
            v236 = 0;
            if (!__nwlog_fault(v140, &type, &v236))
              goto LABEL_369;
            if (type == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v141 = gconnectionLogObj;
              v142 = type;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
                goto LABEL_369;
              v143 = *(_DWORD *)(a3 + 368);
              v144 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(a3 + 378);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v143;
              v246 = 1024;
              *(_DWORD *)v247 = v144;
              v145 = "%{public}s %{public}s%s<i%u> failed to find stream %d, dropping DATA";
            }
            else if (v236)
            {
              v172 = (char *)__nw_create_backtrace_string();
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v141 = gconnectionLogObj;
              v142 = type;
              v173 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
              if (v172)
              {
                if (v173)
                {
                  v174 = *(_DWORD *)(a3 + 368);
                  v175 = *((_DWORD *)a2 + 2);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "on_frame_recv_callback";
                  v240 = 2082;
                  v241 = (void *)(a3 + 378);
                  v242 = 2080;
                  v243 = " ";
                  v244 = 1024;
                  v245 = v174;
                  v246 = 1024;
                  *(_DWORD *)v247 = v175;
                  *(_WORD *)&v247[4] = 2082;
                  *(_QWORD *)&v247[6] = v172;
                  _os_log_impl(&dword_182FBE000, v141, v142, "%{public}s %{public}s%s<i%u> failed to find stream %d, dropping DATA, dumping backtrace:%{public}s", buf, 0x36u);
                }
                free(v172);
                goto LABEL_369;
              }
              if (!v173)
              {
LABEL_369:
                if (v140)
                  free(v140);
                return 0;
              }
              v213 = *(_DWORD *)(a3 + 368);
              v214 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(a3 + 378);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v213;
              v246 = 1024;
              *(_DWORD *)v247 = v214;
              v145 = "%{public}s %{public}s%s<i%u> failed to find stream %d, dropping DATA, no backtrace";
            }
            else
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v141 = gconnectionLogObj;
              v142 = type;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
                goto LABEL_369;
              v199 = *(_DWORD *)(a3 + 368);
              v200 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(a3 + 378);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v199;
              v246 = 1024;
              *(_DWORD *)v247 = v200;
              v145 = "%{public}s %{public}s%s<i%u> failed to find stream %d, dropping DATA, backtrace limit exceeded";
            }
            _os_log_impl(&dword_182FBE000, v141, v142, v145, buf, 0x2Cu);
            goto LABEL_369;
          }
        }
        else if (__nwlog_connection_log::onceToken == -1)
        {
          goto LABEL_267;
        }
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        goto LABEL_267;
      }
      v6 = stream_from_id;
      if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0
        && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v151 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v153 = *(_DWORD *)(v6 + 176);
          v152 = *(_DWORD *)(v6 + 180);
          v154 = *((_DWORD *)a2 + 2);
          v155 = *a2;
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          v241 = (void *)(v6 + 191);
          v242 = 2080;
          v243 = " ";
          v244 = 1024;
          v245 = v152;
          v246 = 1024;
          *(_DWORD *)v247 = v153;
          *(_WORD *)&v247[4] = 1024;
          *(_DWORD *)&v247[6] = v154;
          *(_WORD *)&v247[10] = 2048;
          *(_QWORD *)&v247[12] = v155;
          _os_log_impl(&dword_182FBE000, v151, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> received a complete DATA frame on stream %d, length %zu", buf, 0x3Cu);
        }
      }
      nw_http_transaction_metadata_increment_inbound_body_transfer_size(*(void **)(v6 + 96), *a2 + 9);
      if ((*((_BYTE *)a2 + 13) & 1) == 0)
        return 0;
      if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v168 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v170 = *(_DWORD *)(v6 + 176);
          v169 = *(_DWORD *)(v6 + 180);
          v171 = *((_DWORD *)a2 + 2);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          v241 = (void *)(v6 + 191);
          v242 = 2080;
          v243 = " ";
          v244 = 1024;
          v245 = v169;
          v246 = 1024;
          *(_DWORD *)v247 = v170;
          *(_WORD *)&v247[4] = 1024;
          *(_DWORD *)&v247[6] = v171;
          *(_WORD *)&v247[10] = 1024;
          *(_DWORD *)&v247[12] = v171;
          _os_log_impl(&dword_182FBE000, v168, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> stream id %d end stream flag detected, delivering input_finished for stream %d", buf, 0x38u);
        }
      }
      v7 = *(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16);
      if (*(_QWORD *)v238)
      {
        if ((*(_WORD *)(v6 + 188) & 0x1000) == 0)
        {
          if ((v7 & 0x80000) == 0 && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v201 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v203 = *(_DWORD *)(v6 + 176);
              v202 = *(_DWORD *)(v6 + 180);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(v6 + 191);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v202;
              v246 = 1024;
              *(_DWORD *)v247 = v203;
              *(_WORD *)&v247[4] = 1024;
              *(_DWORD *)&v247[6] = v203;
              _os_log_impl(&dword_182FBE000, v201, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> detected end stream on data frame for stream %d, stream newly complete", buf, 0x32u);
            }
          }
          *(_WORD *)(v6 + 188) |= 0x1000u;
        }
        nw_http_transaction_metadata_mark_inbound_message_end(*(void **)(v6 + 96));
        if (!*(_BYTE *)(v6 + 72) || *(_QWORD *)(v6 + 64) == *(_QWORD *)(v6 + 80))
        {
          if (*(_QWORD *)v238)
          {
            v8 = *(_QWORD *)(*(_QWORD *)v238 + 24);
            if (v8)
            {
              v9 = *(void (**)(void))(v8 + 184);
              if (v9)
              {
                v9();
                return 0;
              }
            }
          }
          if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) != 0)
            return 4294966775;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v157 = *(_DWORD *)(v6 + 176);
          v156 = *(_DWORD *)(v6 + 180);
          v158 = *((_DWORD *)a2 + 2);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          v241 = (void *)(v6 + 191);
          v242 = 2080;
          v243 = " ";
          v244 = 1024;
          v245 = v156;
          v246 = 1024;
          *(_DWORD *)v247 = v157;
          *(_WORD *)&v247[4] = 2048;
          *(_QWORD *)&v247[6] = *(_QWORD *)v238;
          *(_WORD *)&v247[14] = 1024;
          *(_DWORD *)&v247[16] = v158;
          v159 = (const char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v236 = 0;
          if (!__nwlog_fault(v159, &type, &v236))
            goto LABEL_382;
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v160 = gconnectionLogObj;
            v161 = type;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
              goto LABEL_382;
            v163 = *(_DWORD *)(v6 + 176);
            v162 = *(_DWORD *)(v6 + 180);
            v164 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(v6 + 191);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v162;
            v246 = 1024;
            *(_DWORD *)v247 = v163;
            *(_WORD *)&v247[4] = 2048;
            *(_QWORD *)&v247[6] = *(_QWORD *)v238;
            *(_WORD *)&v247[14] = 1024;
            *(_DWORD *)&v247[16] = v164;
            v165 = "%{public}s %{public}s%s<i%u:s%d> no input finished callback for protocol %p attached to stream %d";
          }
          else if (v236)
          {
            v184 = (char *)__nw_create_backtrace_string();
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v160 = gconnectionLogObj;
            v161 = type;
            v185 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
            if (v184)
            {
              if (v185)
              {
                v187 = *(_DWORD *)(v6 + 176);
                v186 = *(_DWORD *)(v6 + 180);
                v188 = *((_DWORD *)a2 + 2);
                *(_DWORD *)buf = 136448002;
                *(_QWORD *)&buf[4] = "on_frame_recv_callback";
                v240 = 2082;
                v241 = (void *)(v6 + 191);
                v242 = 2080;
                v243 = " ";
                v244 = 1024;
                v245 = v186;
                v246 = 1024;
                *(_DWORD *)v247 = v187;
                *(_WORD *)&v247[4] = 2048;
                *(_QWORD *)&v247[6] = *(_QWORD *)v238;
                *(_WORD *)&v247[14] = 1024;
                *(_DWORD *)&v247[16] = v188;
                *(_WORD *)&v247[20] = 2082;
                *(_QWORD *)&v247[22] = v184;
                _os_log_impl(&dword_182FBE000, v160, v161, "%{public}s %{public}s%s<i%u:s%d> no input finished callback for protocol %p attached to stream %d, dumping backtrace:%{public}s", buf, 0x46u);
              }
              free(v184);
              goto LABEL_382;
            }
            if (!v185)
            {
LABEL_382:
              if (!v159)
                return 4294966775;
              v112 = (char *)v159;
LABEL_197:
              free(v112);
              return 4294966775;
            }
            v221 = *(_DWORD *)(v6 + 176);
            v220 = *(_DWORD *)(v6 + 180);
            v222 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(v6 + 191);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v220;
            v246 = 1024;
            *(_DWORD *)v247 = v221;
            *(_WORD *)&v247[4] = 2048;
            *(_QWORD *)&v247[6] = *(_QWORD *)v238;
            *(_WORD *)&v247[14] = 1024;
            *(_DWORD *)&v247[16] = v222;
            v165 = "%{public}s %{public}s%s<i%u:s%d> no input finished callback for protocol %p attached to stream %d, no backtrace";
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v160 = gconnectionLogObj;
            v161 = type;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
              goto LABEL_382;
            v211 = *(_DWORD *)(v6 + 176);
            v210 = *(_DWORD *)(v6 + 180);
            v212 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(v6 + 191);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v210;
            v246 = 1024;
            *(_DWORD *)v247 = v211;
            *(_WORD *)&v247[4] = 2048;
            *(_QWORD *)&v247[6] = *(_QWORD *)v238;
            *(_WORD *)&v247[14] = 1024;
            *(_DWORD *)&v247[16] = v212;
            v165 = "%{public}s %{public}s%s<i%u:s%d> no input finished callback for protocol %p attached to stream %d, ba"
                   "cktrace limit exceeded";
          }
          _os_log_impl(&dword_182FBE000, v160, v161, v165, buf, 0x3Cu);
          goto LABEL_382;
        }
        if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v87 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            v88 = *(_DWORD *)(a3 + 368);
            if (*(_BYTE *)(v6 + 72))
              v89 = *(_QWORD *)(v6 + 64);
            else
              v89 = -1;
            goto LABEL_240;
          }
        }
        goto LABEL_241;
      }
      if ((v7 & 0x80000) != 0)
        return 0;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v61 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        v63 = *(_DWORD *)(v6 + 176);
        v62 = *(_DWORD *)(v6 + 180);
        v64 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "on_frame_recv_callback";
        v240 = 2082;
        v241 = (void *)(v6 + 191);
        v242 = 2080;
        v243 = " ";
        v244 = 1024;
        v245 = v62;
        v246 = 1024;
        *(_DWORD *)v247 = v63;
        *(_WORD *)&v247[4] = 1024;
        *(_DWORD *)&v247[6] = v64;
        v17 = "%{public}s %{public}s%s<i%u:s%d> no input handler found for stream %d, dropping DATA";
        v18 = v61;
        v19 = OS_LOG_TYPE_ERROR;
        goto LABEL_98;
      }
      return result;
    case 1:
      if ((*((_BYTE *)a2 + 13) & 5) == 0)
        goto LABEL_219;
      *(_QWORD *)v238 = 0;
      v27 = nw_http2_get_stream_from_id(a3, *((_DWORD *)a2 + 2), v238);
      if (v27)
      {
        v6 = v27;
        if (*(_QWORD *)(v27 + 112))
        {
          v28 = nw_http_parsed_fields_copy_trailer_fields(*(void **)(v27 + 144));
          if (v28)
          {
            v29 = (void *)v28;
            nw_http_metadata_set_trailer_fields(*(void **)(v6 + 112), (void *)v28);
            os_release(v29);
            goto LABEL_201;
          }
          if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) != 0)
            return 4294966775;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v90 = gconnectionLogObj;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
            return 4294966775;
          v92 = *(_DWORD *)(v6 + 176);
          v91 = *(_DWORD *)(v6 + 180);
          v93 = *((_DWORD *)a2 + 2);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          v241 = (void *)(v6 + 191);
          v242 = 2080;
          v243 = " ";
          v244 = 1024;
          v245 = v91;
          v246 = 1024;
          *(_DWORD *)v247 = v92;
          *(_WORD *)&v247[4] = 1024;
          *(_DWORD *)&v247[6] = v93;
          v94 = "%{public}s %{public}s%s<i%u:s%d> invalid trailer fields received on stream %d";
LABEL_237:
          _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_ERROR, v94, buf, 0x32u);
          return 4294966775;
        }
        *(_WORD *)(v27 + 188) |= 0x400u;
        v79 = *(void **)(v27 + 144);
        if (*((_DWORD *)a2 + 14))
        {
          v80 = nw_http_parsed_fields_copy_response(v79);
          if (!v80)
          {
            if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) != 0)
              return 4294966775;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v90 = gconnectionLogObj;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
              return 4294966775;
            v102 = *(_DWORD *)(v6 + 176);
            v101 = *(_DWORD *)(v6 + 180);
            v103 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(v6 + 191);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v101;
            v246 = 1024;
            *(_DWORD *)v247 = v102;
            *(_WORD *)&v247[4] = 1024;
            *(_DWORD *)&v247[6] = v103;
            v94 = "%{public}s %{public}s%s<i%u:s%d> invalid response received on stream %d";
            goto LABEL_237;
          }
          v81 = (void *)v80;
          *(_QWORD *)(v6 + 112) = nw_http_create_metadata_for_response((void *)v80);
          v82 = (nw_http_response_get_status_code(v81) - 100) < 0x64;
        }
        else
        {
          v95 = nw_http_parsed_fields_copy_request(v79);
          if (!v95)
          {
            if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) != 0)
              return 4294966775;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v90 = gconnectionLogObj;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
              return 4294966775;
            v123 = *(_DWORD *)(v6 + 176);
            v122 = *(_DWORD *)(v6 + 180);
            v124 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(v6 + 191);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v122;
            v246 = 1024;
            *(_DWORD *)v247 = v123;
            *(_WORD *)&v247[4] = 1024;
            *(_DWORD *)&v247[6] = v124;
            v94 = "%{public}s %{public}s%s<i%u:s%d> invalid request received on stream %d";
            goto LABEL_237;
          }
          v81 = (void *)v95;
          if (nw_http_request_has_method((void *)v95, (uint64_t)"CONNECT"))
          {
            v96 = *(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16);
            if ((v96 & 0x10000) == 0)
            {
              v97 = MEMORY[0x1E0C809B0];
              v235[0] = MEMORY[0x1E0C809B0];
              v235[1] = 0x40000000;
              v235[2] = ___ZL22on_frame_recv_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke;
              v235[3] = &__block_descriptor_tmp_89_82014;
              v235[4] = v6;
              nw_http_fields_access_value_by_name(v81, (unint64_t)"Capsule-Protocol", v235);
              v234[0] = v97;
              v234[1] = 0x40000000;
              v234[2] = ___ZL22on_frame_recv_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_2;
              v234[3] = &__block_descriptor_tmp_90_82015;
              v234[4] = v6;
              nw_http_request_access_extended_connect_protocol(v81, v234);
              v96 = *(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16);
            }
            *(_BYTE *)(v6 + 190) = BYTE2(v96);
            *(_WORD *)(v6 + 188) = v96 | 0x200;
          }
          v82 = 0;
          *(_QWORD *)(v6 + 112) = nw_http_create_metadata_for_request(v81);
        }
        os_release(v81);
        nw_http_metadata_set_version(*(void **)(v6 + 112), 4);
        if (*(_WORD *)(a3 + 372))
          *(_WORD *)(a3 + 372) = 0;
        if ((*((_BYTE *)a2 + 13) & 4) != 0)
        {
          if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v226 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v228 = *(_DWORD *)(v6 + 176);
              v227 = *(_DWORD *)(v6 + 180);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(v6 + 191);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v227;
              v246 = 1024;
              *(_DWORD *)v247 = v228;
              *(_WORD *)&v247[4] = 1024;
              *(_DWORD *)&v247[6] = v228;
              _os_log_impl(&dword_182FBE000, v226, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> detected end headers on header frame for stream %d", buf, 0x32u);
            }
          }
          nw_http_transaction_metadata_set_inbound_message(*(void **)(v6 + 96), *(void **)(v6 + 112));
          if (v82)
          {
            nw_array_append(*(_QWORD *)(v6 + 160), *(void **)(v6 + 112));
            v98 = *(void **)(v6 + 112);
            if (v98)
            {
              os_release(v98);
              *(_QWORD *)(v6 + 112) = 0;
            }
          }
          else
          {
            *(_WORD *)(v6 + 188) |= 0x800u;
            nw::http::content_length_manager::set_inbound_message((nw::http::content_length_manager *)(v6 + 40), *(nw_protocol_metadata **)(v6 + 112));
          }
        }
        nw_http_transaction_metadata_increment_inbound_header_size(*(void **)(v6 + 96), 9 * ((unint64_t)(*a2 + 0x3FFF) >> 14) + *a2);
LABEL_201:
        if ((*((_BYTE *)a2 + 13) & 1) != 0)
        {
          if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v207 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v209 = *(_DWORD *)(v6 + 176);
              v208 = *(_DWORD *)(v6 + 180);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(v6 + 191);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v208;
              v246 = 1024;
              *(_DWORD *)v247 = v209;
              *(_WORD *)&v247[4] = 1024;
              *(_DWORD *)&v247[6] = v209;
              _os_log_impl(&dword_182FBE000, v207, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> detected end stream on header frame for stream %d", buf, 0x32u);
            }
          }
          *(_WORD *)(v6 + 188) |= 0x1000u;
          nw_http_transaction_metadata_mark_inbound_message_end(*(void **)(v6 + 96));
          if (*(_BYTE *)(v6 + 72))
          {
            if (*(_QWORD *)(v6 + 64) != *(_QWORD *)(v6 + 80))
            {
              if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v87 = gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                {
                  v88 = *(_DWORD *)(a3 + 368);
                  if (*(_BYTE *)(v6 + 72))
                    v89 = *(_QWORD *)(v6 + 64);
                  else
                    v89 = -1;
LABEL_240:
                  v125 = *(_QWORD *)(v6 + 80);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "on_frame_recv_callback";
                  v240 = 2082;
                  v241 = (void *)(a3 + 378);
                  v242 = 2080;
                  v243 = " ";
                  v244 = 1024;
                  v245 = v88;
                  v246 = 2048;
                  *(_QWORD *)v247 = v89;
                  *(_WORD *)&v247[8] = 2048;
                  *(_QWORD *)&v247[10] = v125;
                  _os_log_impl(&dword_182FBE000, v87, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Content length header %llu does not equal body size %llu", buf, 0x3Au);
                }
              }
LABEL_241:
              v126 = *(unsigned __int16 *)(v6 + 188);
              v127 = v126 | (*(unsigned __int8 *)(v6 + 190) << 16);
              if ((v126 & 0x40) == 0)
              {
                *(_BYTE *)(v6 + 190) = BYTE2(v127);
                *(_WORD *)(v6 + 188) = v127 | 0x40;
                nw_protocol_error(*(_QWORD **)v238, a3);
                nw_protocol_disconnected(*(_QWORD **)v238, a3);
              }
              return 0;
            }
          }
        }
        v113 = (*(unsigned __int8 *)(v6 + 190) >> 3) & 1;
        if (!gLogDatapath)
          LOBYTE(v113) = 1;
        if ((*(_WORD *)(v6 + 188) & 1) == 0)
        {
          if ((v113 & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v114 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v116 = *(_DWORD *)(v6 + 176);
              v115 = *(_DWORD *)(v6 + 180);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(v6 + 191);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v115;
              v246 = 1024;
              *(_DWORD *)v247 = v116;
              *(_WORD *)&v247[4] = 2048;
              *(_QWORD *)&v247[6] = *(_QWORD *)v238;
              *(_WORD *)&v247[14] = 1024;
              *(_DWORD *)&v247[16] = v116;
              _os_log_impl(&dword_182FBE000, v114, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> suppressing input_available on protocol %p for stream %d that is not yet open", buf, 0x3Cu);
            }
          }
          goto LABEL_219;
        }
        if ((v113 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v215 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v217 = *(_DWORD *)(v6 + 176);
            v216 = *(_DWORD *)(v6 + 180);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(v6 + 191);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v216;
            v246 = 1024;
            *(_DWORD *)v247 = v217;
            *(_WORD *)&v247[4] = 2048;
            *(_QWORD *)&v247[6] = *(_QWORD *)v238;
            *(_WORD *)&v247[14] = 1024;
            *(_DWORD *)&v247[16] = v217;
            _os_log_impl(&dword_182FBE000, v215, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> calling input_available on protocol %p for stream %d", buf, 0x3Cu);
          }
        }
        if (*(_QWORD *)v238)
        {
          v117 = *(_QWORD *)(*(_QWORD *)v238 + 24);
          if (v117)
          {
            v118 = *(void (**)(void))(v117 + 64);
            if (v118)
            {
              v118();
              goto LABEL_219;
            }
          }
        }
        __nwlog_obj();
        v189 = "invalid";
        if (*(_QWORD *)v238 && *(_QWORD *)(*(_QWORD *)v238 + 16))
          v189 = *(const char **)(*(_QWORD *)v238 + 16);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "on_frame_recv_callback";
        v240 = 2082;
        v241 = (void *)v189;
        v190 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v236 = 0;
        if (__nwlog_fault(v190, &type, &v236))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v191 = __nwlog_obj();
            v192 = type;
            if (!os_log_type_enabled(v191, type))
              goto LABEL_404;
            v193 = "invalid";
            if (*(_QWORD *)v238 && *(_QWORD *)(*(_QWORD *)v238 + 16))
              v193 = *(const char **)(*(_QWORD *)v238 + 16);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)v193;
            v194 = "%{public}s protocol %{public}s has invalid input_available callback";
            goto LABEL_403;
          }
          if (!v236)
          {
            v191 = __nwlog_obj();
            v192 = type;
            if (!os_log_type_enabled(v191, type))
              goto LABEL_404;
            v223 = "invalid";
            if (*(_QWORD *)v238 && *(_QWORD *)(*(_QWORD *)v238 + 16))
              v223 = *(const char **)(*(_QWORD *)v238 + 16);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)v223;
            v194 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
            goto LABEL_403;
          }
          v204 = (char *)__nw_create_backtrace_string();
          v191 = __nwlog_obj();
          v192 = type;
          v205 = os_log_type_enabled(v191, type);
          if (v204)
          {
            if (v205)
            {
              v206 = "invalid";
              if (*(_QWORD *)v238 && *(_QWORD *)(*(_QWORD *)v238 + 16))
                v206 = *(const char **)(*(_QWORD *)v238 + 16);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)v206;
              v242 = 2082;
              v243 = v204;
              _os_log_impl(&dword_182FBE000, v191, v192, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v204);
            goto LABEL_404;
          }
          if (v205)
          {
            v229 = "invalid";
            if (*(_QWORD *)v238 && *(_QWORD *)(*(_QWORD *)v238 + 16))
              v229 = *(const char **)(*(_QWORD *)v238 + 16);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)v229;
            v194 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_403:
            _os_log_impl(&dword_182FBE000, v191, v192, v194, buf, 0x16u);
          }
        }
LABEL_404:
        if (v190)
          free(v190);
LABEL_219:
        result = 0;
        if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v119 = gconnectionLogObj;
          result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)result)
          {
            v120 = *(_DWORD *)(a3 + 368);
            v121 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(a3 + 378);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v120;
            v246 = 1024;
            *(_DWORD *)v247 = v121;
            v17 = "%{public}s %{public}s%s<i%u> received incoming HEADERS frame for stream %d";
            v18 = v119;
            goto LABEL_225;
          }
        }
        return result;
      }
      if (*(__int16 *)(a3 + 376) < 0)
        return 4294966775;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v53 = *(_DWORD *)(a3 + 368);
      v54 = *((_DWORD *)a2 + 2);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "on_frame_recv_callback";
      v240 = 2082;
      v241 = (void *)(a3 + 378);
      v242 = 2080;
      v243 = " ";
      v244 = 1024;
      v245 = v53;
      v246 = 1024;
      *(_DWORD *)v247 = v54;
      v55 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v236 = 0;
      if (!__nwlog_fault(v55, &type, &v236))
        goto LABEL_195;
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v56 = gconnectionLogObj;
        v57 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          goto LABEL_195;
        v58 = *(_DWORD *)(a3 + 368);
        v59 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "on_frame_recv_callback";
        v240 = 2082;
        v241 = (void *)(a3 + 378);
        v242 = 2080;
        v243 = " ";
        v244 = 1024;
        v245 = v58;
        v246 = 1024;
        *(_DWORD *)v247 = v59;
        v60 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
      }
      else if (v236)
      {
        v83 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v56 = gconnectionLogObj;
        v57 = type;
        v84 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v83)
        {
          if (v84)
          {
            v85 = *(_DWORD *)(a3 + 368);
            v86 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(a3 + 378);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v85;
            v246 = 1024;
            *(_DWORD *)v247 = v86;
            *(_WORD *)&v247[4] = 2082;
            *(_QWORD *)&v247[6] = v83;
            _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s %{public}s%s<i%u> failed to find stream %d, dumping backtrace:%{public}s", buf, 0x36u);
          }
          free(v83);
          goto LABEL_195;
        }
        if (!v84)
        {
LABEL_195:
          if (!v55)
            return 4294966775;
          v112 = (char *)v55;
          goto LABEL_197;
        }
        v110 = *(_DWORD *)(a3 + 368);
        v111 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "on_frame_recv_callback";
        v240 = 2082;
        v241 = (void *)(a3 + 378);
        v242 = 2080;
        v243 = " ";
        v244 = 1024;
        v245 = v110;
        v246 = 1024;
        *(_DWORD *)v247 = v111;
        v60 = "%{public}s %{public}s%s<i%u> failed to find stream %d, no backtrace";
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v56 = gconnectionLogObj;
        v57 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          goto LABEL_195;
        v99 = *(_DWORD *)(a3 + 368);
        v100 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "on_frame_recv_callback";
        v240 = 2082;
        v241 = (void *)(a3 + 378);
        v242 = 2080;
        v243 = " ";
        v244 = 1024;
        v245 = v99;
        v246 = 1024;
        *(_DWORD *)v247 = v100;
        v60 = "%{public}s %{public}s%s<i%u> failed to find stream %d, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v56, v57, v60, buf, 0x2Cu);
      goto LABEL_195;
    case 2:
      result = 0;
      if (*(__int16 *)(a3 + 376) < 0 || !gLogDatapath)
        return result;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v15 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      if (!(_DWORD)result)
        return result;
      v16 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "on_frame_recv_callback";
      v240 = 2082;
      v241 = (void *)(a3 + 378);
      v242 = 2080;
      v243 = " ";
      v244 = 1024;
      v245 = v16;
      v17 = "%{public}s %{public}s%s<i%u> received complete PRIORITY frame, ignoring";
      v18 = v15;
      v19 = OS_LOG_TYPE_DEBUG;
      v20 = 38;
      goto LABEL_133;
    case 3:
      if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v148 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v149 = *(_DWORD *)(a3 + 368);
          v150 = *((_DWORD *)a2 + 2);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          v241 = (void *)(a3 + 378);
          v242 = 2080;
          v243 = " ";
          v244 = 1024;
          v245 = v149;
          v246 = 1024;
          *(_DWORD *)v247 = v150;
          _os_log_impl(&dword_182FBE000, v148, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> stream %d received RST_STREAM frame, setting error to ECONNRESET", buf, 0x2Cu);
        }
      }
      v21 = *((_DWORD *)a2 + 2);
      if (v21 <= 0)
      {
        if (*(__int16 *)(a3 + 376) < 0)
          return 0;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v42 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_127;
        v43 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_http2_get_protocol_from_stream_id";
        v240 = 2082;
        v241 = (void *)(a3 + 378);
        v242 = 2080;
        v243 = " ";
        v244 = 1024;
        v245 = v43;
        v246 = 1024;
        *(_DWORD *)v247 = v21;
        v44 = "%{public}s %{public}s%s<i%u> requested stream id (%d) is not valid, returning NULL protocol";
        v45 = v42;
        v46 = OS_LOG_TYPE_ERROR;
        v47 = 44;
      }
      else
      {
        *(_QWORD *)v238 = 0;
        v22 = nw_http2_get_stream_from_id(a3, v21, v238);
        if (v22)
        {
          v23 = *(_QWORD *)v238;
          if (*(_QWORD *)v238)
          {
            v24 = *(_QWORD *)(*(_QWORD *)v238 + 24);
            if (v24)
            {
              v25 = *(void (**)(_QWORD, uint64_t, uint64_t))(v24 + 56);
              if (v25)
              {
                v26 = *((_DWORD *)a2 + 4);
                if (v26 == 7)
                {
                  v25(*(_QWORD *)v238, a3, 35);
                }
                else if (v26 == 13)
                {
                  v25(*(_QWORD *)v238, a3, 43);
                }
                else
                {
                  v25(*(_QWORD *)v238, a3, 54);
                }
                return 0;
              }
            }
            if (*(__int16 *)(a3 + 376) < 0)
              return 4294966775;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v176 = *(_DWORD *)(a3 + 368);
            v177 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(a3 + 378);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v176;
            v246 = 2048;
            *(_QWORD *)v247 = v23;
            *(_WORD *)&v247[8] = 1024;
            *(_DWORD *)&v247[10] = v177;
            v178 = (const char *)_os_log_send_and_compose_impl();
            v238[0] = OS_LOG_TYPE_ERROR;
            type = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v178, v238, &type))
              goto LABEL_392;
            if (v238[0] == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v179 = gconnectionLogObj;
              v180 = v238[0];
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v238[0]))
                goto LABEL_392;
              v181 = *(_DWORD *)(a3 + 368);
              v182 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(a3 + 378);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v181;
              v246 = 2048;
              *(_QWORD *)v247 = v23;
              *(_WORD *)&v247[8] = 1024;
              *(_DWORD *)&v247[10] = v182;
              v183 = "%{public}s %{public}s%s<i%u> no error callback for protocol %p attached to stream %d";
            }
            else if (type)
            {
              v195 = (char *)__nw_create_backtrace_string();
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v179 = gconnectionLogObj;
              v180 = v238[0];
              v196 = os_log_type_enabled((os_log_t)gconnectionLogObj, v238[0]);
              if (v195)
              {
                if (v196)
                {
                  v197 = *(_DWORD *)(a3 + 368);
                  v198 = *((_DWORD *)a2 + 2);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "on_frame_recv_callback";
                  v240 = 2082;
                  v241 = (void *)(a3 + 378);
                  v242 = 2080;
                  v243 = " ";
                  v244 = 1024;
                  v245 = v197;
                  v246 = 2048;
                  *(_QWORD *)v247 = v23;
                  *(_WORD *)&v247[8] = 1024;
                  *(_DWORD *)&v247[10] = v198;
                  *(_WORD *)&v247[14] = 2082;
                  *(_QWORD *)&v247[16] = v195;
                  _os_log_impl(&dword_182FBE000, v179, v180, "%{public}s %{public}s%s<i%u> no error callback for protocol %p attached to stream %d, dumping backtrace:%{public}s", buf, 0x40u);
                }
                free(v195);
                goto LABEL_392;
              }
              if (!v196)
              {
LABEL_392:
                if (!v178)
                  return 4294966775;
                v112 = (char *)v178;
                goto LABEL_197;
              }
              v224 = *(_DWORD *)(a3 + 368);
              v225 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(a3 + 378);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v224;
              v246 = 2048;
              *(_QWORD *)v247 = v23;
              *(_WORD *)&v247[8] = 1024;
              *(_DWORD *)&v247[10] = v225;
              v183 = "%{public}s %{public}s%s<i%u> no error callback for protocol %p attached to stream %d, no backtrace";
            }
            else
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v179 = gconnectionLogObj;
              v180 = v238[0];
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v238[0]))
                goto LABEL_392;
              v218 = *(_DWORD *)(a3 + 368);
              v219 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              v241 = (void *)(a3 + 378);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v218;
              v246 = 2048;
              *(_QWORD *)v247 = v23;
              *(_WORD *)&v247[8] = 1024;
              *(_DWORD *)&v247[10] = v219;
              v183 = "%{public}s %{public}s%s<i%u> no error callback for protocol %p attached to stream %d, backtrace limit exceeded";
            }
            _os_log_impl(&dword_182FBE000, v179, v180, v183, buf, 0x36u);
            goto LABEL_392;
          }
          v72 = v22;
          if (((*(unsigned __int16 *)(v22 + 188) | (*(unsigned __int8 *)(v22 + 190) << 16)) & 0x80000) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v73 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
            {
              v75 = *(_DWORD *)(v72 + 176);
              v74 = *(_DWORD *)(v72 + 180);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http2_get_protocol_from_stream_id";
              v240 = 2082;
              v241 = (void *)(v72 + 191);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v74;
              v246 = 1024;
              *(_DWORD *)v247 = v75;
              *(_WORD *)&v247[4] = 1024;
              *(_DWORD *)&v247[6] = v75;
              v44 = "%{public}s %{public}s%s<i%u:s%d> no input handler attached to stream %d";
              v45 = v73;
              v46 = OS_LOG_TYPE_INFO;
              v47 = 50;
              goto LABEL_126;
            }
          }
LABEL_127:
          if (*(__int16 *)(a3 + 376) < 0)
            return 0;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v76 = gconnectionLogObj;
          result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
          if ((_DWORD)result)
          {
            v77 = *(_DWORD *)(a3 + 368);
            v78 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(a3 + 378);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v77;
            v246 = 1024;
            *(_DWORD *)v247 = v78;
            v17 = "%{public}s %{public}s%s<i%u> no input handler found for stream %d, ignoring RST_STREAM";
            v18 = v76;
            v19 = OS_LOG_TYPE_INFO;
            goto LABEL_132;
          }
          return result;
        }
        if (*(__int16 *)(a3 + 376) < 0)
          goto LABEL_127;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v51 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
          goto LABEL_127;
        v52 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_http2_get_protocol_from_stream_id";
        v240 = 2082;
        v241 = (void *)(a3 + 378);
        v242 = 2080;
        v243 = " ";
        v244 = 1024;
        v245 = v52;
        v246 = 1024;
        *(_DWORD *)v247 = v21;
        v44 = "%{public}s %{public}s%s<i%u> could not find stream for stream %d";
        v45 = v51;
        v46 = OS_LOG_TYPE_INFO;
        v47 = 44;
      }
LABEL_126:
      _os_log_impl(&dword_182FBE000, v45, v46, v44, buf, v47);
      goto LABEL_127;
    case 4:
      if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v146 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v147 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          v241 = (void *)(a3 + 378);
          v242 = 2080;
          v243 = " ";
          v244 = 1024;
          v245 = v147;
          _os_log_impl(&dword_182FBE000, v146, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> received complete SETTINGS frame", buf, 0x26u);
        }
      }
      v10 = a2[2];
      if (!v10)
        return 0;
      v11 = 0;
      v12 = (int *)a2[3];
      while (1)
      {
        v13 = *v12;
        v12 += 2;
        if (v13 == 11104)
          break;
        if (v10 == ++v11)
          return 0;
      }
      result = 0;
      if (*(__int16 *)(a3 + 376) < 0 || !gLogDatapath)
        return result;
      v48 = *(_DWORD *)(a2[3] + 8 * v11 + 4);
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v49 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      if (!(_DWORD)result)
        return result;
      v50 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "on_frame_recv_callback";
      v240 = 2082;
      v241 = (void *)(a3 + 378);
      v242 = 2080;
      v243 = " ";
      v244 = 1024;
      v245 = v50;
      v246 = 1024;
      *(_DWORD *)v247 = v48;
      v17 = "%{public}s %{public}s%s<i%u> received remote max webtransport session update: %u, ignoring for now";
      v18 = v49;
LABEL_225:
      v19 = OS_LOG_TYPE_DEBUG;
LABEL_132:
      v20 = 44;
LABEL_133:
      _os_log_impl(&dword_182FBE000, v18, v19, v17, buf, v20);
      return 0;
    case 5:
      if (*(__int16 *)(a3 + 376) < 0)
        return 0;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v30 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      v31 = *(_DWORD *)(a3 + 368);
      v32 = *((_DWORD *)a2 + 2);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "on_frame_recv_callback";
      v240 = 2082;
      v241 = (void *)(a3 + 378);
      v242 = 2080;
      v243 = " ";
      v244 = 1024;
      v245 = v31;
      v246 = 1024;
      *(_DWORD *)v247 = v32;
      v17 = "%{public}s %{public}s%s<i%u> received a complete PUSH_PROMISE frame on stream %d -- currently not supported";
      v18 = v30;
      v19 = OS_LOG_TYPE_ERROR;
      goto LABEL_132;
    case 6:
      if ((*((_BYTE *)a2 + 13) & 1) == 0)
        return 0;
      v33 = a2[2];
      if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v166 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v167 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_http2_received_ping_ack";
          v240 = 2082;
          v241 = (void *)(a3 + 378);
          v242 = 2080;
          v243 = " ";
          v244 = 1024;
          v245 = v167;
          v246 = 2048;
          *(_QWORD *)v247 = v33;
          _os_log_impl(&dword_182FBE000, v166, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> seq %llu", buf, 0x30u);
        }
      }
      v34 = *(int8x8_t *)(a3 + 320);
      if (!*(_QWORD *)&v34)
        goto LABEL_116;
      v35 = (_QWORD *)(a3 + 312);
      v36 = (uint8x8_t)vcnt_s8(v34);
      v36.i16[0] = vaddlv_u8(v36);
      if (v36.u32[0] > 1uLL)
      {
        v37 = v33;
        if (*(_QWORD *)&v34 <= v33)
          v37 = v33 % *(_QWORD *)&v34;
      }
      else
      {
        v37 = (*(_QWORD *)&v34 - 1) & v33;
      }
      v65 = *(_QWORD ***)(*v35 + 8 * v37);
      if (!v65)
        goto LABEL_116;
      v66 = *v65;
      if (!*v65)
        goto LABEL_116;
      if (v36.u32[0] < 2uLL)
      {
        v67 = *(_QWORD *)&v34 - 1;
        while (1)
        {
          v69 = v66[1];
          if (v69 == v33)
          {
            if (v66[2] == v33)
              goto LABEL_182;
          }
          else if ((v69 & v67) != v37)
          {
            goto LABEL_116;
          }
          v66 = (_QWORD *)*v66;
          if (!v66)
            goto LABEL_116;
        }
      }
      while (2)
      {
        v68 = v66[1];
        if (v68 == v33)
        {
          if (v66[2] == v33)
          {
LABEL_182:
            v105 = v66[3];
            v104 = (void (**)(_QWORD, _QWORD, _QWORD))v66[4];
            v66[4] = 0;
            std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,nw::retained_ptr<void({block_pointer})(BOOL,unsigned long long)>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,nw::retained_ptr<void({block_pointer})(BOOL,unsigned long long)>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,nw::retained_ptr<void({block_pointer})(BOOL,unsigned long long)>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,nw::retained_ptr<void({block_pointer})(BOOL,unsigned long long)>>>>>::remove((uint64_t)buf, v35, v66);
            v106 = *(void **)buf;
            if (*(_QWORD *)buf)
            {
              if (BYTE2(v241))
              {
                if ((*(_BYTE *)(*(_QWORD *)buf + 40) & 1) != 0)
                {
                  v107 = *(const void **)(*(_QWORD *)buf + 32);
                  if (v107)
                    _Block_release(v107);
                }
              }
              operator delete(v106);
            }
            v108 = mach_continuous_time();
            if (v108 <= 1)
              v109 = 1;
            else
              v109 = v108;
            v104[2](v104, 1, v109 - v105);
            _Block_release(v104);
            return 0;
          }
        }
        else
        {
          if (v68 >= *(_QWORD *)&v34)
            v68 %= *(_QWORD *)&v34;
          if (v68 != v37)
          {
LABEL_116:
            if (*(__int16 *)(a3 + 376) < 0)
              return 0;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v70 = gconnectionLogObj;
            result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              v71 = *(_DWORD *)(a3 + 368);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http2_received_ping_ack";
              v240 = 2082;
              v241 = (void *)(a3 + 378);
              v242 = 2080;
              v243 = " ";
              v244 = 1024;
              v245 = v71;
              v246 = 2048;
              *(_QWORD *)v247 = v33;
              v17 = "%{public}s %{public}s%s<i%u> unrecognized ping ack data %llu";
              v18 = v70;
              v19 = OS_LOG_TYPE_ERROR;
              v20 = 48;
              goto LABEL_133;
            }
            return result;
          }
        }
        v66 = (_QWORD *)*v66;
        if (!v66)
          goto LABEL_116;
        continue;
      }
    case 7:
      nw_http2_connection_receive_goaway(a3, *((unsigned int *)a2 + 4));
      return 0;
    case 8:
      result = 0;
      if (*(__int16 *)(a3 + 376) < 0 || !gLogDatapath)
        return result;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v38 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      if (!(_DWORD)result)
        return result;
      v39 = *(_DWORD *)(a3 + 368);
      v40 = *((_DWORD *)a2 + 2);
      v41 = *((_DWORD *)a2 + 4);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "on_frame_recv_callback";
      v240 = 2082;
      v241 = (void *)(a3 + 378);
      v242 = 2080;
      v243 = " ";
      v244 = 1024;
      v245 = v39;
      v246 = 1024;
      *(_DWORD *)v247 = v40;
      *(_WORD *)&v247[4] = 1024;
      *(_DWORD *)&v247[6] = v41;
      v17 = "%{public}s %{public}s%s<i%u> received window update frame for stream %d, window size increment %d";
      v18 = v38;
      v19 = OS_LOG_TYPE_DEBUG;
LABEL_98:
      v20 = 50;
      goto LABEL_133;
    default:
      return 0;
  }
}

uint64_t send_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD *);
  uint64_t v20;
  int v21;
  int v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v31;
  const char *v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  const char *v36;
  char *v37;
  _BOOL4 v38;
  int v39;
  const char *v40;
  NSObject *v41;
  os_log_type_t v42;
  const char *v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  int v47;
  int v48;
  char *backtrace_string;
  _BOOL4 v50;
  const char *v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  const char *v55;
  const char *v56;
  int v57;
  char *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  NSObject *v63;
  char *v64;
  _BOOL4 v65;
  const char *v66;
  _BOOL4 v67;
  const char *v68;
  const char *v69;
  char v70;
  _QWORD v71[2];
  uint64_t (*v72)(uint64_t, uint64_t);
  void *v73;
  os_log_type_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  os_log_type_t type[8];
  os_log_type_t *v86;
  uint64_t v87;
  int v88;
  _QWORD v89[2];
  _QWORD v90[2];
  _QWORD buf[3];
  const char *v92;
  _QWORD *v93;
  _QWORD v94[3];
  int v95;
  const char *v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "send_callback";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v81) = 0;
    if (!__nwlog_fault(v40, type, &v81))
      goto LABEL_114;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v41 = __nwlog_obj();
      v42 = type[0];
      if (!os_log_type_enabled(v41, type[0]))
        goto LABEL_114;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      v43 = "%{public}s nghttp2 user data is NULL, not http2";
    }
    else if ((_BYTE)v81)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type[0];
      v50 = os_log_type_enabled(v41, type[0]);
      if (backtrace_string)
      {
        if (v50)
        {
          LODWORD(buf[0]) = 136446466;
          *(_QWORD *)((char *)buf + 4) = "send_callback";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = backtrace_string;
          _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }
        free(backtrace_string);
LABEL_114:
        if (v40)
        {
          v58 = (char *)v40;
          goto LABEL_116;
        }
        return -902;
      }
      if (!v50)
        goto LABEL_114;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      v43 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }
    else
    {
      v41 = __nwlog_obj();
      v42 = type[0];
      if (!os_log_type_enabled(v41, type[0]))
        goto LABEL_114;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      v43 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v41, v42, v43, (uint8_t *)buf, 0xCu);
    goto LABEL_114;
  }
  if ((*(__int16 *)(a5 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v44 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v45 = *(_DWORD *)(a5 + 368);
      LODWORD(buf[0]) = 136446978;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 6) = a5 + 378;
      HIWORD(buf[2]) = 2080;
      v92 = " ";
      LOWORD(v93) = 1024;
      *(_DWORD *)((char *)&v93 + 2) = v45;
      _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", (uint8_t *)buf, 0x26u);
    }
    if ((*(__int16 *)(a5 + 376) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v46 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v47 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136447234;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = a5 + 378;
        HIWORD(buf[2]) = 2080;
        v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v47;
        HIWORD(v93) = 2048;
        v94[0] = a3;
        _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> asked to write %lu bytes by nghttp2", (uint8_t *)buf, 0x30u);
      }
    }
  }
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81469);
  if (_nw_signposts_enabled && kdebug_is_enabled())
    kdebug_trace();
  v90[0] = 0;
  v90[1] = v90;
  v89[0] = 0;
  v89[1] = v89;
  v8 = *(_QWORD *)(a5 + 240);
  if (v8)
    v9 = 0;
  else
    v9 = (*(_WORD *)(a5 + 376) & 0x100) == 0;
  if (v9)
    v10 = v89;
  else
    v10 = (_QWORD *)(a5 + 240);
  v11 = *(_QWORD *)(a5 + 32);
  if (!v11
    || (v12 = *(_QWORD *)(v11 + 24)) == 0
    || (v13 = *(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(v12 + 88)) == 0)
  {
    if ((*(_WORD *)(a5 + 376) & 0x8000) != 0)
      return -902;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v31 = *(_DWORD *)(a5 + 368);
    LODWORD(buf[0]) = 136446978;
    *(_QWORD *)((char *)buf + 4) = "send_callback";
    WORD2(buf[1]) = 2082;
    *(_QWORD *)((char *)&buf[1] + 6) = a5 + 378;
    HIWORD(buf[2]) = 2080;
    v92 = " ";
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v31;
    v32 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v81) = 0;
    if (!__nwlog_fault(v32, type, &v81))
      goto LABEL_92;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v33 = gconnectionLogObj;
      v34 = type[0];
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
      {
        v35 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136446978;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = a5 + 378;
        HIWORD(buf[2]) = 2080;
        v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v35;
        v36 = "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback";
LABEL_91:
        _os_log_impl(&dword_182FBE000, v33, v34, v36, (uint8_t *)buf, 0x26u);
      }
    }
    else if ((_BYTE)v81)
    {
      v37 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v33 = gconnectionLogObj;
      v34 = type[0];
      v38 = os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]);
      if (!v37)
      {
        if (!v38)
          goto LABEL_92;
        v57 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136446978;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = a5 + 378;
        HIWORD(buf[2]) = 2080;
        v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v57;
        v36 = "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback, no backtrace";
        goto LABEL_91;
      }
      if (v38)
      {
        v39 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136447234;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = a5 + 378;
        HIWORD(buf[2]) = 2080;
        v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v39;
        HIWORD(v93) = 2082;
        v94[0] = v37;
        _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x30u);
      }
      free(v37);
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v33 = gconnectionLogObj;
      v34 = type[0];
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
      {
        v48 = *(_DWORD *)(a5 + 368);
        LODWORD(buf[0]) = 136446978;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = a5 + 378;
        HIWORD(buf[2]) = 2080;
        v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v48;
        v36 = "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback, backtrace limit exceeded";
        goto LABEL_91;
      }
    }
LABEL_92:
    if (v32)
    {
      v58 = (char *)v32;
LABEL_116:
      free(v58);
      return -902;
    }
    return -902;
  }
  if (!v13(*(_QWORD *)(a5 + 32), a5, 1, a3, 0xFFFFFFFFLL, v90) || (v14 = v90[0]) == 0)
  {
    *(_WORD *)(a5 + 376) |= 0x2000u;
    return -504;
  }
  *(_QWORD *)type = 0;
  v88 = 0;
  v86 = type;
  v87 = 0x2000000000;
  v81 = 0;
  v82 = &v81;
  v84 = 0;
  v83 = 0x2000000000;
  v15 = MEMORY[0x1E0C809B0];
  v71[0] = MEMORY[0x1E0C809B0];
  v71[1] = 0x40000000;
  v72 = ___ZL13send_callbackP15nghttp2_sessionPKhmiPv_block_invoke_81833;
  v73 = &unk_1E14ABC70;
  v76 = a3;
  v77 = a2;
  v78 = a5;
  v79 = v90;
  v80 = v10;
  v74 = type;
  v75 = &v81;
  do
  {
    if (!v14)
      break;
    v16 = *(_QWORD *)(v14 + 32);
    v17 = ((uint64_t (*)(_QWORD *))v72)(v71);
    v14 = v16;
  }
  while ((v17 & 1) != 0);
  if ((*(_WORD *)(a5 + 376) & 0x100) == 0 && !v8)
  {
    v18 = *(_QWORD *)(v11 + 24);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, _QWORD *))(v18 + 96);
      if (v19)
      {
        v19(v11, v10);
        goto LABEL_28;
      }
    }
    __nwlog_obj();
    v51 = *(const char **)(v11 + 16);
    if (!v51)
      v51 = "invalid";
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = "send_callback";
    WORD2(buf[1]) = 2082;
    *(_QWORD *)((char *)&buf[1] + 6) = v51;
    v52 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v95) = 16;
    v70 = 0;
    if (__nwlog_fault(v52, &v95, &v70))
    {
      if (v95 == 17)
      {
        v53 = __nwlog_obj();
        v54 = v95;
        if (!os_log_type_enabled(v53, (os_log_type_t)v95))
          goto LABEL_127;
        v55 = *(const char **)(v11 + 16);
        if (!v55)
          v55 = "invalid";
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v55;
        v56 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
        goto LABEL_126;
      }
      if (!v70)
      {
        v53 = __nwlog_obj();
        v54 = v95;
        v67 = os_log_type_enabled(v53, (os_log_type_t)v95);
        v68 = "invalid";
        if (!v67)
          goto LABEL_127;
        if (*(_QWORD *)(v11 + 16))
          v68 = *(const char **)(v11 + 16);
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v68;
        v56 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
        goto LABEL_126;
      }
      v64 = (char *)__nw_create_backtrace_string();
      v53 = __nwlog_obj();
      v54 = v95;
      v65 = os_log_type_enabled(v53, (os_log_type_t)v95);
      if (v64)
      {
        if (v65)
        {
          v66 = "invalid";
          if (*(_QWORD *)(v11 + 16))
            v66 = *(const char **)(v11 + 16);
          LODWORD(buf[0]) = 136446722;
          *(_QWORD *)((char *)buf + 4) = "send_callback";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v66;
          HIWORD(buf[2]) = 2082;
          v92 = v64;
          _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x20u);
        }
        free(v64);
        goto LABEL_127;
      }
      v69 = "invalid";
      if (v65)
      {
        if (*(_QWORD *)(v11 + 16))
          v69 = *(const char **)(v11 + 16);
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v69;
        v56 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
LABEL_126:
        _os_log_impl(&dword_182FBE000, v53, v54, v56, (uint8_t *)buf, 0x16u);
      }
    }
LABEL_127:
    if (v52)
      free(v52);
LABEL_28:
    if ((*(__int16 *)(a5 + 376) & 0x80000000) == 0)
    {
      if (gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v20 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          goto LABEL_99;
        v21 = *(_DWORD *)(a5 + 368);
        v22 = *((_DWORD *)v86 + 6);
        LODWORD(buf[0]) = 136447234;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = a5 + 378;
        HIWORD(buf[2]) = 2080;
        v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v21;
        HIWORD(v93) = 1024;
        LODWORD(v94[0]) = v22;
        v23 = "%{public}s %{public}s%s<i%u> wrote %u bytes";
        v24 = v20;
        v25 = 44;
        goto LABEL_98;
      }
      goto LABEL_37;
    }
LABEL_99:
    if (gLogDatapath)
    {
      v63 = __nwlog_obj();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        v95 = 136446210;
        v96 = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v95, 0xCu);
      }
    }
    goto LABEL_37;
  }
  if ((*(_WORD *)(a5 + 376) & 0x8000) != 0)
    goto LABEL_99;
  if (gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v59 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      goto LABEL_99;
    v60 = *(_DWORD *)(a5 + 368);
    v61 = *((_DWORD *)v86 + 6);
    v62 = *((_DWORD *)v82 + 6);
    LODWORD(buf[0]) = 136447490;
    *(_QWORD *)((char *)buf + 4) = "send_callback";
    WORD2(buf[1]) = 2082;
    *(_QWORD *)((char *)&buf[1] + 6) = a5 + 378;
    HIWORD(buf[2]) = 2080;
    v92 = " ";
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v60;
    HIWORD(v93) = 1024;
    LODWORD(v94[0]) = v61;
    WORD2(v94[0]) = 1024;
    *(_DWORD *)((char *)v94 + 6) = v62;
    v23 = "%{public}s %{public}s%s<i%u> wrote %u bytes (pending %u frames)";
    v24 = v59;
    v25 = 50;
LABEL_98:
    _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, v23, (uint8_t *)buf, v25);
    goto LABEL_99;
  }
LABEL_37:
  buf[0] = v15;
  buf[1] = 0x40000000;
  buf[2] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_81659;
  v92 = (const char *)&__block_descriptor_tmp_30_81660;
  v93 = v90;
  LOBYTE(v94[0]) = 0;
  v27 = v90[0];
  do
  {
    if (!v27)
      break;
    v28 = *(_QWORD *)(v27 + 32);
    v29 = ((uint64_t (*)(_QWORD *))buf[2])(buf);
    v27 = v28;
  }
  while ((v29 & 1) != 0);
  v26 = *((unsigned int *)v86 + 6);
  _Block_object_dispose(&v81, 8);
  _Block_object_dispose(type, 8);
  return v26;
}

uint64_t send_data_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5, uint64_t a6)
{
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  const char *v20;
  _DWORD *v21;
  int v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *);
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  char *v36;
  _BOOL4 v37;
  int v38;
  NSObject *v39;
  int v40;
  uint64_t v41;
  int v42;
  id v43;
  size_t size;
  void *v45;
  unint64_t capsule_type;
  BOOL v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  char *v52;
  uint64_t result;
  unint64_t v54;
  unint64_t v55;
  NSObject *v56;
  int v57;
  BOOL v58;
  void *v59;
  unint64_t v60;
  NSObject *v61;
  size_t v62;
  uint64_t v63;
  char v64;
  NSObject *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  void (*v69)(uint64_t, _QWORD *);
  unint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  int v73;
  int v74;
  const char *v75;
  NSObject *v76;
  uint32_t v77;
  int v78;
  int v79;
  int v80;
  char v81;
  int v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  int v86;
  const char *v87;
  char *v88;
  _BOOL4 v89;
  int v90;
  int v91;
  int v92;
  const char *v93;
  NSObject *v94;
  os_log_type_t v95;
  const char *v96;
  NSObject *v97;
  int v98;
  const char *v99;
  NSObject *v100;
  os_log_type_t v101;
  const char *v102;
  int v103;
  const char *v104;
  NSObject *v105;
  os_log_type_t v106;
  int v107;
  const char *v108;
  char *backtrace_string;
  _BOOL4 v110;
  char *v111;
  _BOOL4 v112;
  const char *v113;
  _BOOL4 v114;
  _BOOL4 v115;
  char *v116;
  _BOOL4 v117;
  int v118;
  int v119;
  NSObject *v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  char *v126;
  int v127;
  const char *v128;
  char *v129;
  NSObject *v130;
  os_log_type_t v131;
  const char *v132;
  const char *v133;
  NSObject *v134;
  int v135;
  int v136;
  uint64_t v137;
  _BOOL4 v138;
  int v139;
  int v140;
  int v141;
  char *v142;
  _BOOL4 v143;
  const char *v144;
  NSObject *v145;
  int v146;
  int v147;
  const char *v148;
  const char *v149;
  int v150;
  char v151;
  NSObject *v152;
  void *v153;
  BOOL v154;
  BOOL v155;
  size_t v156;
  size_t v157;
  BOOL v158;
  char v159;
  size_t v160;
  unint64_t v161;
  void *object;
  NSObject *objecta;
  uint64_t v164;
  _QWORD *v165;
  unsigned int v166;
  char v167;
  os_log_type_t type;
  _QWORD v169[2];
  uint64_t (*v170)(uint64_t, uint64_t);
  void *v171;
  uint64_t *v172;
  uint64_t *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t *v177;
  _QWORD *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  NSObject *v188;
  size_t v189;
  _DWORD *v190;
  uint64_t *v191;
  _QWORD *v192;
  unsigned int v193;
  char v194;
  char v195;
  BOOL v196;
  char v197;
  BOOL v198;
  _QWORD v199[3];
  char v200;
  _QWORD v201[3];
  char v202;
  _QWORD v203[3];
  char v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  int v212;
  _QWORD v213[3];
  int v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  int v222;
  _QWORD v223[2];
  uint64_t v224[2];
  int buf;
  const char *v226;
  __int16 v227;
  unint64_t v228;
  __int16 v229;
  const char *v230;
  __int16 v231;
  int v232;
  __int16 v233;
  _BYTE v234[10];
  int v235;
  __int16 v236;
  int v237;
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  if (!a6)
  {
    __nwlog_obj();
    buf = 136446210;
    v226 = "send_data_callback";
    v93 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v219) = 16;
    LOBYTE(v215) = 0;
    if (!__nwlog_fault(v93, &v219, &v215))
      goto LABEL_265;
    if (v219 == 17)
    {
      v94 = __nwlog_obj();
      v95 = v219;
      if (!os_log_type_enabled(v94, (os_log_type_t)v219))
        goto LABEL_265;
      buf = 136446210;
      v226 = "send_data_callback";
      v96 = "%{public}s nghttp2 user data is NULL, not http2";
    }
    else if ((_BYTE)v215)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v94 = __nwlog_obj();
      v95 = v219;
      v110 = os_log_type_enabled(v94, (os_log_type_t)v219);
      if (backtrace_string)
      {
        if (v110)
        {
          buf = 136446466;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = (unint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v94, v95, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(backtrace_string);
LABEL_265:
        if (v93)
        {
          v126 = (char *)v93;
LABEL_281:
          free(v126);
        }
        return 4294966394;
      }
      if (!v110)
        goto LABEL_265;
      buf = 136446210;
      v226 = "send_data_callback";
      v96 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }
    else
    {
      v94 = __nwlog_obj();
      v95 = v219;
      if (!os_log_type_enabled(v94, (os_log_type_t)v219))
        goto LABEL_265;
      buf = 136446210;
      v226 = "send_data_callback";
      v96 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v94, v95, v96, (uint8_t *)&buf, 0xCu);
    goto LABEL_265;
  }
  if ((*(__int16 *)(a6 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v97 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v98 = *(_DWORD *)(a6 + 368);
      buf = 136446978;
      v226 = "send_data_callback";
      v227 = 2082;
      v228 = a6 + 378;
      v229 = 2080;
      v230 = " ";
      v231 = 1024;
      v232 = v98;
      _os_log_impl(&dword_182FBE000, v97, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", (uint8_t *)&buf, 0x26u);
    }
  }
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81469);
  if (!_nw_signposts_enabled || !kdebug_is_enabled())
  {
    if (a3)
      goto LABEL_9;
LABEL_205:
    __nwlog_obj();
    buf = 136446210;
    v226 = "send_data_callback";
    v99 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v219) = 16;
    LOBYTE(v215) = 0;
    if (!__nwlog_fault(v99, &v219, &v215))
      goto LABEL_274;
    if (v219 == 17)
    {
      v100 = __nwlog_obj();
      v101 = v219;
      if (os_log_type_enabled(v100, (os_log_type_t)v219))
      {
        buf = 136446210;
        v226 = "send_data_callback";
        v102 = "%{public}s called with null framehd";
        goto LABEL_273;
      }
      goto LABEL_274;
    }
    if (!(_BYTE)v215)
    {
      v100 = __nwlog_obj();
      v101 = v219;
      if (os_log_type_enabled(v100, (os_log_type_t)v219))
      {
        buf = 136446210;
        v226 = "send_data_callback";
        v102 = "%{public}s called with null framehd, backtrace limit exceeded";
        goto LABEL_273;
      }
      goto LABEL_274;
    }
    v111 = (char *)__nw_create_backtrace_string();
    v100 = __nwlog_obj();
    v101 = v219;
    v112 = os_log_type_enabled(v100, (os_log_type_t)v219);
    if (!v111)
    {
      if (v112)
      {
        buf = 136446210;
        v226 = "send_data_callback";
        v102 = "%{public}s called with null framehd, no backtrace";
        goto LABEL_273;
      }
      goto LABEL_274;
    }
    if (!v112)
      goto LABEL_227;
    buf = 136446466;
    v226 = "send_data_callback";
    v227 = 2082;
    v228 = (unint64_t)v111;
    v113 = "%{public}s called with null framehd, dumping backtrace:%{public}s";
    goto LABEL_226;
  }
  kdebug_trace();
  if (!a3)
    goto LABEL_205;
LABEL_9:
  if (!a2)
  {
    __nwlog_obj();
    buf = 136446210;
    v226 = "send_data_callback";
    v99 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v219) = 16;
    LOBYTE(v215) = 0;
    if (!__nwlog_fault(v99, &v219, &v215))
      goto LABEL_274;
    if (v219 == 17)
    {
      v100 = __nwlog_obj();
      v101 = v219;
      if (os_log_type_enabled(v100, (os_log_type_t)v219))
      {
        buf = 136446210;
        v226 = "send_data_callback";
        v102 = "%{public}s called with null frame";
LABEL_273:
        _os_log_impl(&dword_182FBE000, v100, v101, v102, (uint8_t *)&buf, 0xCu);
      }
LABEL_274:
      if (!v99)
        return 4294966775;
      v52 = (char *)v99;
      goto LABEL_90;
    }
    if (!(_BYTE)v215)
    {
      v100 = __nwlog_obj();
      v101 = v219;
      if (os_log_type_enabled(v100, (os_log_type_t)v219))
      {
        buf = 136446210;
        v226 = "send_data_callback";
        v102 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_273;
      }
      goto LABEL_274;
    }
    v111 = (char *)__nw_create_backtrace_string();
    v100 = __nwlog_obj();
    v101 = v219;
    v114 = os_log_type_enabled(v100, (os_log_type_t)v219);
    if (!v111)
    {
      if (v114)
      {
        buf = 136446210;
        v226 = "send_data_callback";
        v102 = "%{public}s called with null frame, no backtrace";
        goto LABEL_273;
      }
      goto LABEL_274;
    }
    if (!v114)
      goto LABEL_227;
    buf = 136446466;
    v226 = "send_data_callback";
    v227 = 2082;
    v228 = (unint64_t)v111;
    v113 = "%{public}s called with null frame, dumping backtrace:%{public}s";
LABEL_226:
    _os_log_impl(&dword_182FBE000, v100, v101, v113, (uint8_t *)&buf, 0x16u);
    goto LABEL_227;
  }
  if (!a5)
  {
    __nwlog_obj();
    buf = 136446210;
    v226 = "send_data_callback";
    v99 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v219) = 16;
    LOBYTE(v215) = 0;
    if (!__nwlog_fault(v99, &v219, &v215))
      goto LABEL_274;
    if (v219 == 17)
    {
      v100 = __nwlog_obj();
      v101 = v219;
      if (os_log_type_enabled(v100, (os_log_type_t)v219))
      {
        buf = 136446210;
        v226 = "send_data_callback";
        v102 = "%{public}s called with null source";
        goto LABEL_273;
      }
      goto LABEL_274;
    }
    if (!(_BYTE)v215)
    {
      v100 = __nwlog_obj();
      v101 = v219;
      if (os_log_type_enabled(v100, (os_log_type_t)v219))
      {
        buf = 136446210;
        v226 = "send_data_callback";
        v102 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_273;
      }
      goto LABEL_274;
    }
    v111 = (char *)__nw_create_backtrace_string();
    v100 = __nwlog_obj();
    v101 = v219;
    v115 = os_log_type_enabled(v100, (os_log_type_t)v219);
    if (!v111)
    {
      if (v115)
      {
        buf = 136446210;
        v226 = "send_data_callback";
        v102 = "%{public}s called with null source, no backtrace";
        goto LABEL_273;
      }
      goto LABEL_274;
    }
    if (v115)
    {
      buf = 136446466;
      v226 = "send_data_callback";
      v227 = 2082;
      v228 = (unint64_t)v111;
      v113 = "%{public}s called with null source, dumping backtrace:%{public}s";
      goto LABEL_226;
    }
LABEL_227:
    free(v111);
    goto LABEL_274;
  }
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    v12 = 10;
  else
    v12 = 9;
  if (v11 <= 1)
    v13 = 0;
  else
    v13 = v11 - 1;
  v14 = (v13 + v12);
  if (0xFFFFFFFFLL - a4 < v14)
  {
    if (*(__int16 *)(a6 + 376) < 0)
      return 4294966775;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v15 = *(_DWORD *)(a6 + 368);
    buf = 136446978;
    v226 = "send_data_callback";
    v227 = 2082;
    v228 = a6 + 378;
    v229 = 2080;
    v230 = " ";
    v231 = 1024;
    v232 = v15;
    v16 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v219) = 16;
    LOBYTE(v215) = 0;
    if (__nwlog_fault(v16, &v219, &v215))
    {
      if (v219 == 17)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v17 = gconnectionLogObj;
        v18 = v219;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)v219))
        {
          v19 = *(_DWORD *)(a6 + 368);
          buf = 136446978;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = a6 + 378;
          v229 = 2080;
          v230 = " ";
          v231 = 1024;
          v232 = v19;
          v20 = "%{public}s %{public}s%s<i%u> bytes_to_send overflow";
LABEL_87:
          _os_log_impl(&dword_182FBE000, v17, v18, v20, (uint8_t *)&buf, 0x26u);
        }
      }
      else if ((_BYTE)v215)
      {
        v36 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v17 = gconnectionLogObj;
        v18 = v219;
        v37 = os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)v219);
        if (!v36)
        {
          if (!v37)
            goto LABEL_88;
          v51 = *(_DWORD *)(a6 + 368);
          buf = 136446978;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = a6 + 378;
          v229 = 2080;
          v230 = " ";
          v231 = 1024;
          v232 = v51;
          v20 = "%{public}s %{public}s%s<i%u> bytes_to_send overflow, no backtrace";
          goto LABEL_87;
        }
        if (v37)
        {
          v38 = *(_DWORD *)(a6 + 368);
          buf = 136447234;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = a6 + 378;
          v229 = 2080;
          v230 = " ";
          v231 = 1024;
          v232 = v38;
          v233 = 2082;
          *(_QWORD *)v234 = v36;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s %{public}s%s<i%u> bytes_to_send overflow, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x30u);
        }
        free(v36);
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v17 = gconnectionLogObj;
        v18 = v219;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)v219))
        {
          v42 = *(_DWORD *)(a6 + 368);
          buf = 136446978;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = a6 + 378;
          v229 = 2080;
          v230 = " ";
          v231 = 1024;
          v232 = v42;
          v20 = "%{public}s %{public}s%s<i%u> bytes_to_send overflow, backtrace limit exceeded";
          goto LABEL_87;
        }
      }
    }
LABEL_88:
    if (v16)
    {
      v52 = (char *)v16;
LABEL_90:
      free(v52);
    }
    return 4294966775;
  }
  v21 = *a5;
  if (!*a5)
  {
    if ((*(__int16 *)(a6 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v40 = *(_DWORD *)(a6 + 368);
        buf = 136446978;
        v226 = "send_data_callback";
        v227 = 2082;
        v228 = a6 + 378;
        v229 = 2080;
        v230 = " ";
        v231 = 1024;
        v232 = v40;
        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Received unexpected NULL frame from data source", (uint8_t *)&buf, 0x26u);
        return 4294966394;
      }
    }
    return 4294966394;
  }
  v22 = v21[13];
  if (v22)
    v22 -= v21[14] + v21[15];
  if (v22 != (_DWORD)a4 && (*(__int16 *)(a6 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v120 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v121 = *(_DWORD *)(a6 + 368);
      v122 = v21[13];
      if (v122)
        v122 -= v21[14] + v21[15];
      buf = 136447746;
      v226 = "send_data_callback";
      v227 = 2082;
      v228 = a6 + 378;
      v229 = 2080;
      v230 = " ";
      v231 = 1024;
      v232 = v121;
      v233 = 2048;
      *(_QWORD *)v234 = v21;
      *(_WORD *)&v234[8] = 1024;
      v235 = v122;
      v236 = 1024;
      v237 = a4;
      _os_log_impl(&dword_182FBE000, v120, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> source frame %p has length %u, asked to send %u", (uint8_t *)&buf, 0x3Cu);
    }
  }
  v224[0] = 0;
  v224[1] = (uint64_t)v224;
  v223[0] = 0;
  v223[1] = v223;
  if (*(_QWORD *)(a6 + 240))
    v23 = 0;
  else
    v23 = (*(_WORD *)(a6 + 376) & 0x100) == 0;
  if (v23)
    v24 = v223;
  else
    v24 = (_QWORD *)(a6 + 240);
  v25 = *(_QWORD *)(a6 + 32);
  if (!v25
    || (v26 = *(_QWORD *)(v25 + 24)) == 0
    || (v27 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *))(v26 + 88)) == 0)
  {
    if ((*(_WORD *)(a6 + 376) & 0x8000) != 0)
      return 4294966394;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v103 = *(_DWORD *)(a6 + 368);
    buf = 136446978;
    v226 = "send_data_callback";
    v227 = 2082;
    v228 = a6 + 378;
    v229 = 2080;
    v230 = " ";
    v231 = 1024;
    v232 = v103;
    v104 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v219) = 16;
    LOBYTE(v215) = 0;
    if (!__nwlog_fault(v104, &v219, &v215))
      goto LABEL_279;
    if (v219 == 17)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v105 = gconnectionLogObj;
      v106 = v219;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)v219))
      {
        v107 = *(_DWORD *)(a6 + 368);
        buf = 136446978;
        v226 = "send_data_callback";
        v227 = 2082;
        v228 = a6 + 378;
        v229 = 2080;
        v230 = " ";
        v231 = 1024;
        v232 = v107;
        v108 = "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback";
LABEL_278:
        _os_log_impl(&dword_182FBE000, v105, v106, v108, (uint8_t *)&buf, 0x26u);
      }
    }
    else if ((_BYTE)v215)
    {
      v116 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v105 = gconnectionLogObj;
      v106 = v219;
      v117 = os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)v219);
      if (!v116)
      {
        if (!v117)
          goto LABEL_279;
        v127 = *(_DWORD *)(a6 + 368);
        buf = 136446978;
        v226 = "send_data_callback";
        v227 = 2082;
        v228 = a6 + 378;
        v229 = 2080;
        v230 = " ";
        v231 = 1024;
        v232 = v127;
        v108 = "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback, no backtrace";
        goto LABEL_278;
      }
      if (v117)
      {
        v118 = *(_DWORD *)(a6 + 368);
        buf = 136447234;
        v226 = "send_data_callback";
        v227 = 2082;
        v228 = a6 + 378;
        v229 = 2080;
        v230 = " ";
        v231 = 1024;
        v232 = v118;
        v233 = 2082;
        *(_QWORD *)v234 = v116;
        _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x30u);
      }
      free(v116);
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v105 = gconnectionLogObj;
      v106 = v219;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)v219))
      {
        v119 = *(_DWORD *)(a6 + 368);
        buf = 136446978;
        v226 = "send_data_callback";
        v227 = 2082;
        v228 = a6 + 378;
        v229 = 2080;
        v230 = " ";
        v231 = 1024;
        v232 = v119;
        v108 = "%{public}s %{public}s%s<i%u> output handler has no get_output_frames callback, backtrace limit exceeded";
        goto LABEL_278;
      }
    }
LABEL_279:
    if (v104)
    {
      v126 = (char *)v104;
      goto LABEL_281;
    }
    return 4294966394;
  }
  v164 = *(_QWORD *)(a6 + 240);
  v165 = v24;
  v166 = v14 + a4;
  v28 = v27(v25, a6, (v14 + a4), (v14 + a4), 0xFFFFFFFFLL, v224);
  if (!v28 || !v224[0])
  {
    if (*(__int16 *)(a6 + 376) < 0 || !gLogDatapath)
      goto LABEL_67;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v124 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      goto LABEL_67;
    v125 = *(_DWORD *)(a6 + 368);
    buf = 136446978;
    v226 = "send_data_callback";
    v227 = 2082;
    v228 = a6 + 378;
    v229 = 2080;
    v230 = " ";
    v231 = 1024;
    v232 = v125;
    v33 = "%{public}s %{public}s%s<i%u> got back zero frames, cannot send data, returning NGHTTP2_ERR_WOULDBLOCK";
    v34 = v124;
    v35 = 38;
    goto LABEL_261;
  }
  v29 = v28;
  buf = 0;
  nw_frame_array_get_frame_count(v224, 1, &buf);
  v30 = buf;
  if ((*(__int16 *)(a6 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    objecta = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v123 = *(_DWORD *)(a6 + 368);
      buf = 136447490;
      v226 = "send_data_callback";
      v227 = 2082;
      v228 = a6 + 378;
      v229 = 2080;
      v230 = " ";
      v231 = 1024;
      v232 = v123;
      v233 = 1024;
      *(_DWORD *)v234 = v29;
      *(_WORD *)&v234[4] = 1024;
      *(_DWORD *)&v234[6] = v30;
      _os_log_impl(&dword_182FBE000, objecta, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> got back %u frames from output handler (%u bytes)", (uint8_t *)&buf, 0x32u);
    }
  }
  if (v30 < v166)
  {
    if (*(__int16 *)(a6 + 376) < 0 || !gLogDatapath)
      goto LABEL_67;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v31 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      goto LABEL_67;
    v32 = *(_DWORD *)(a6 + 368);
    buf = 136447490;
    v226 = "send_data_callback";
    v227 = 2082;
    v228 = a6 + 378;
    v229 = 2080;
    v230 = " ";
    v231 = 1024;
    v232 = v32;
    v233 = 1024;
    *(_DWORD *)v234 = v30;
    *(_WORD *)&v234[4] = 1024;
    *(_DWORD *)&v234[6] = v166;
    v33 = "%{public}s %{public}s%s<i%u> got back fewer bytes than necessary (%u / %u), returing E_WOULDBLOCK";
    v34 = v31;
    v35 = 50;
LABEL_261:
    _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, v33, (uint8_t *)&buf, v35);
LABEL_67:
    *(_WORD *)(a6 + 376) |= 0x2000u;
    return 4294966792;
  }
  v219 = 0;
  v220 = &v219;
  v222 = 0;
  v221 = 0x2000000000;
  v215 = 0;
  v216 = &v215;
  v218 = 0;
  v217 = 0x2000000000;
  v213[0] = 0;
  v213[1] = v213;
  v214 = 0;
  v213[2] = 0x2000000000;
  v212 = 0;
  v210 = &v209;
  v211 = 0x2000000000;
  v205 = 0;
  v206 = &v205;
  v207 = 0x2000000000;
  v208 = 0;
  v209 = 0;
  v203[0] = 0;
  v203[1] = v203;
  v203[2] = 0x2000000000;
  v204 = 0;
  v201[0] = 0;
  v201[1] = v201;
  v201[2] = 0x2000000000;
  v202 = 0;
  v199[0] = 0;
  v199[1] = v199;
  v199[2] = 0x2000000000;
  v200 = 0;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v43 = (id)nw_protocol_copy_http_definition_http_definition;
  size = (size_t)nw_frame_copy_metadata_for_protocol((uint64_t)v21, (uint64_t)v43);
  object = (void *)size;
  if (v43)
  {
    os_release(v43);
    size = (size_t)object;
  }
  if (!size)
  {
    capsule_type = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    LOBYTE(v49) = 0;
    LOBYTE(v57) = 0;
    v47 = 0;
    LOBYTE(v50) = 0;
    v58 = 0;
LABEL_117:
    v169[0] = MEMORY[0x1E0C809B0];
    v169[1] = 0x40000000;
    v170 = ___ZL18send_data_callbackP15nghttp2_sessionP13nghttp2_framePKhmP19nghttp2_data_sourcePv_block_invoke_81728;
    v171 = &unk_1E14ABCD8;
    v180 = a3;
    v181 = a6;
    v193 = v166;
    v182 = a2;
    v183 = a4;
    v172 = &v219;
    v173 = &v215;
    v194 = v49;
    v161 = v55;
    v184 = v55;
    v185 = capsule_type;
    v195 = v57;
    v174 = v203;
    v175 = v201;
    v196 = v47;
    v197 = v50;
    v186 = v54;
    v187 = 0;
    v198 = v58;
    v188 = v56;
    v189 = size;
    v62 = size;
    v176 = v199;
    v177 = &v205;
    v190 = v21;
    v191 = v224;
    v192 = v165;
    v178 = v213;
    v179 = &v209;
    v63 = v224[0];
    v64 = v58;
    v65 = v56;
    do
    {
      if (!v63)
        break;
      v66 = *(_QWORD *)(v63 + 32);
      v67 = ((uint64_t (*)(_QWORD *))v170)(v169);
      v63 = v66;
    }
    while ((v67 & 1) != 0);
    if (v65)
      dispatch_release(v65);
    if (object)
      os_release(object);
    if ((*(_WORD *)(a6 + 376) & 0x100) != 0 || v164)
    {
      v70 = v161;
      if ((*(_WORD *)(a6 + 376) & 0x8000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v137 = gconnectionLogObj;
        v138 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
        v70 = v161;
        if (v138)
        {
          v139 = *(_DWORD *)(a6 + 368);
          v140 = *((_DWORD *)v220 + 6);
          v141 = *((_DWORD *)v210 + 6);
          buf = 136447490;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = a6 + 378;
          v229 = 2080;
          v230 = " ";
          v231 = 1024;
          v232 = v139;
          v233 = 1024;
          *(_DWORD *)v234 = v140;
          *(_WORD *)&v234[4] = 1024;
          *(_DWORD *)&v234[6] = v141;
          v75 = "%{public}s %{public}s%s<i%u> wrote %u bytes (pending %u frames)";
          v76 = v137;
          v77 = 50;
          goto LABEL_299;
        }
      }
LABEL_137:
      v78 = v21[13];
      if (!v78 || (v79 = v21[14] + v21[15], v80 = v78 - v79, v78 == v79))
      {
        if (v70)
          v81 = v64;
        else
          v81 = 1;
        if ((v81 & 1) != 0 || v206[3] == v62)
        {
          if ((*(__int16 *)(a6 + 376) & 0x80000000) == 0 && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v145 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v146 = *(_DWORD *)(a6 + 368);
              v147 = *((_DWORD *)v216 + 6);
              buf = 136447490;
              v226 = "send_data_callback";
              v227 = 2082;
              v228 = a6 + 378;
              v229 = 2080;
              v230 = " ";
              v231 = 1024;
              v232 = v146;
              v233 = 2048;
              *(_QWORD *)v234 = v21;
              *(_WORD *)&v234[8] = 1024;
              v235 = v147;
              _os_log_impl(&dword_182FBE000, v145, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> finished writing complete frame %p, final length %u", (uint8_t *)&buf, 0x36u);
            }
          }
          http2_output_frame_metadata_reset((uint64_t)v21, 0, 0);
          nw_frame_cache_return_frame(a6 + 200, (uint64_t)v21);
          *a5 = 0;
          goto LABEL_150;
        }
        v80 = 0;
      }
      if ((*(__int16 *)(a6 + 376) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v134 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v135 = *(_DWORD *)(a6 + 368);
          v136 = *((_DWORD *)v216 + 6);
          buf = 136447490;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = a6 + 378;
          v229 = 2080;
          v230 = " ";
          v231 = 1024;
          v232 = v135;
          v233 = 1024;
          *(_DWORD *)v234 = v136;
          *(_WORD *)&v234[4] = 1024;
          *(_DWORD *)&v234[6] = v80;
          _os_log_impl(&dword_182FBE000, v134, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> wrote partial frame, %u bytes, %u remaining", (uint8_t *)&buf, 0x32u);
        }
      }
LABEL_150:
      if (*((_DWORD *)v220 + 6) == v166)
      {
        v41 = 0;
LABEL_178:
        _Block_object_dispose(v199, 8);
        _Block_object_dispose(v201, 8);
        _Block_object_dispose(v203, 8);
        _Block_object_dispose(&v205, 8);
        _Block_object_dispose(&v209, 8);
        _Block_object_dispose(v213, 8);
        _Block_object_dispose(&v215, 8);
        _Block_object_dispose(&v219, 8);
        return v41;
      }
      if (*(__int16 *)(a6 + 376) < 0)
      {
LABEL_177:
        v41 = 4294966394;
        goto LABEL_178;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v82 = *(_DWORD *)(a6 + 368);
      buf = 136446978;
      v226 = "send_data_callback";
      v227 = 2082;
      v228 = a6 + 378;
      v229 = 2080;
      v230 = " ";
      v231 = 1024;
      v232 = v82;
      v83 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v167 = 0;
      if (__nwlog_fault(v83, &type, &v167))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v84 = gconnectionLogObj;
          v85 = type;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            goto LABEL_175;
          v86 = *(_DWORD *)(a6 + 368);
          buf = 136446978;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = a6 + 378;
          v229 = 2080;
          v230 = " ";
          v231 = 1024;
          v232 = v86;
          v87 = "%{public}s %{public}s%s<i%u> did not write complete frame";
          goto LABEL_174;
        }
        if (!v167)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v84 = gconnectionLogObj;
          v85 = type;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            goto LABEL_175;
          v91 = *(_DWORD *)(a6 + 368);
          buf = 136446978;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = a6 + 378;
          v229 = 2080;
          v230 = " ";
          v231 = 1024;
          v232 = v91;
          v87 = "%{public}s %{public}s%s<i%u> did not write complete frame, backtrace limit exceeded";
          goto LABEL_174;
        }
        v88 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v84 = gconnectionLogObj;
        v85 = type;
        v89 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v88)
        {
          if (v89)
          {
            v90 = *(_DWORD *)(a6 + 368);
            buf = 136447234;
            v226 = "send_data_callback";
            v227 = 2082;
            v228 = a6 + 378;
            v229 = 2080;
            v230 = " ";
            v231 = 1024;
            v232 = v90;
            v233 = 2082;
            *(_QWORD *)v234 = v88;
            _os_log_impl(&dword_182FBE000, v84, v85, "%{public}s %{public}s%s<i%u> did not write complete frame, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x30u);
          }
          free(v88);
          goto LABEL_175;
        }
        if (v89)
        {
          v92 = *(_DWORD *)(a6 + 368);
          buf = 136446978;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = a6 + 378;
          v229 = 2080;
          v230 = " ";
          v231 = 1024;
          v232 = v92;
          v87 = "%{public}s %{public}s%s<i%u> did not write complete frame, no backtrace";
LABEL_174:
          _os_log_impl(&dword_182FBE000, v84, v85, v87, (uint8_t *)&buf, 0x26u);
        }
      }
LABEL_175:
      if (v83)
        free(v83);
      goto LABEL_177;
    }
    v68 = *(_QWORD *)(v25 + 24);
    if (v68)
    {
      v69 = *(void (**)(uint64_t, _QWORD *))(v68 + 96);
      if (v69)
      {
        v69(v25, v223);
        goto LABEL_129;
      }
    }
    v159 = v64;
    __nwlog_obj();
    v128 = *(const char **)(v25 + 16);
    if (!v128)
      v128 = "invalid";
    buf = 136446466;
    v226 = "send_data_callback";
    v227 = 2082;
    v228 = (unint64_t)v128;
    v129 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v167 = 0;
    if (__nwlog_fault(v129, &type, &v167))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v130 = __nwlog_obj();
        v131 = type;
        if (os_log_type_enabled(v130, type))
        {
          v132 = *(const char **)(v25 + 16);
          if (!v132)
            v132 = "invalid";
          buf = 136446466;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = (unint64_t)v132;
          v133 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
LABEL_319:
          _os_log_impl(&dword_182FBE000, v130, v131, v133, (uint8_t *)&buf, 0x16u);
        }
      }
      else if (v167)
      {
        v142 = (char *)__nw_create_backtrace_string();
        v130 = __nwlog_obj();
        v131 = type;
        v143 = os_log_type_enabled(v130, type);
        if (v142)
        {
          if (v143)
          {
            v144 = *(const char **)(v25 + 16);
            if (!v144)
              v144 = "invalid";
            buf = 136446722;
            v226 = "send_data_callback";
            v227 = 2082;
            v228 = (unint64_t)v144;
            v229 = 2082;
            v230 = v142;
            _os_log_impl(&dword_182FBE000, v130, v131, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x20u);
          }
          free(v142);
          goto LABEL_320;
        }
        if (v143)
        {
          v149 = *(const char **)(v25 + 16);
          if (!v149)
            v149 = "invalid";
          buf = 136446466;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = (unint64_t)v149;
          v133 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
          goto LABEL_319;
        }
      }
      else
      {
        v130 = __nwlog_obj();
        v131 = type;
        if (os_log_type_enabled(v130, type))
        {
          v148 = *(const char **)(v25 + 16);
          if (!v148)
            v148 = "invalid";
          buf = 136446466;
          v226 = "send_data_callback";
          v227 = 2082;
          v228 = (unint64_t)v148;
          v133 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
          goto LABEL_319;
        }
      }
    }
LABEL_320:
    if (v129)
      free(v129);
    v64 = v159;
LABEL_129:
    v70 = v161;
    if ((*(__int16 *)(a6 + 376) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v71 = gconnectionLogObj;
      v72 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      v70 = v161;
      if (v72)
      {
        v73 = *(_DWORD *)(a6 + 368);
        v74 = *((_DWORD *)v220 + 6);
        buf = 136447234;
        v226 = "send_data_callback";
        v227 = 2082;
        v228 = a6 + 378;
        v229 = 2080;
        v230 = " ";
        v231 = 1024;
        v232 = v73;
        v233 = 1024;
        *(_DWORD *)v234 = v74;
        v75 = "%{public}s %{public}s%s<i%u> wrote %u bytes";
        v76 = v71;
        v77 = 44;
LABEL_299:
        _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_DEBUG, v75, (uint8_t *)&buf, v77);
        v70 = v161;
        goto LABEL_137;
      }
    }
    goto LABEL_137;
  }
  v45 = (void *)size;
  if (!nw_http_metadata_is_capsule((void *)size))
  {
    capsule_type = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    size = 0;
    LOBYTE(v49) = 0;
    LOBYTE(v57) = 0;
    v47 = 0;
    LOBYTE(v50) = 0;
    v58 = 0;
    goto LABEL_117;
  }
  capsule_type = nw_http_metadata_get_capsule_type(v45);
  size = (size_t)nw_http_metadata_copy_capsule_data(v45);
  v160 = size;
  if (size)
    size = dispatch_data_get_size((dispatch_data_t)size);
  v47 = capsule_type == 0;
  v158 = (size | capsule_type) == 0;
  if (!(size | capsule_type))
  {
    v48 = v21[13];
    if (v48)
      v48 -= v21[14] + v21[15];
    size = v48;
LABEL_84:
    capsule_type = 0;
    v49 = 1;
    v50 = 1;
    goto LABEL_106;
  }
  if (capsule_type < 0x40)
  {
    if (capsule_type)
    {
      v50 = 0;
      v49 = 1;
      goto LABEL_106;
    }
    goto LABEL_84;
  }
  if (capsule_type >> 14)
  {
    if (capsule_type >> 30)
    {
      if (capsule_type >> 62)
      {
        v154 = capsule_type == 0;
        v156 = size;
        v152 = __nwlog_obj();
        os_log_type_enabled(v152, OS_LOG_TYPE_ERROR);
        buf = 136446466;
        v226 = "_http_vle_encode";
        v227 = 2048;
        v228 = capsule_type;
        v59 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v59);
        if ((_DWORD)result)
          goto LABEL_323;
        free(v59);
        v49 = 0;
        capsule_type = 0;
        v50 = 0;
        size = v156;
        v47 = v154;
      }
      else
      {
        v50 = 0;
        capsule_type = bswap64(capsule_type | 0xC000000000000000);
        v49 = 8;
      }
    }
    else
    {
      v50 = 0;
      capsule_type = bswap32(capsule_type | 0x80000000);
      v49 = 4;
    }
  }
  else
  {
    v50 = 0;
    capsule_type = bswap32(capsule_type | 0x4000) >> 16;
    v49 = 2;
  }
LABEL_106:
  v60 = size + v50;
  if (v60 < 0x40)
  {
    v57 = 1;
    v54 = size + v50;
LABEL_116:
    v55 = v60 + (v57 + v49);
    v58 = v158;
    v56 = v160;
    goto LABEL_117;
  }
  if (!(v60 >> 14))
  {
    v54 = bswap32(v60 | 0x4000) >> 16;
    v57 = 2;
    goto LABEL_116;
  }
  if (!(v60 >> 30))
  {
    v54 = bswap32(v60 | 0x80000000);
    v57 = 4;
    goto LABEL_116;
  }
  if (!(v60 >> 62))
  {
    v54 = bswap64(v60 | 0xC000000000000000);
    v57 = 8;
    goto LABEL_116;
  }
  v150 = v49;
  v151 = v50;
  v155 = v47;
  v157 = size;
  v61 = __nwlog_obj();
  os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
  buf = 136446466;
  v226 = "_http_vle_encode";
  v227 = 2048;
  v228 = v60;
  v153 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v153);
  if (!(_DWORD)result)
  {
    free(v153);
    v54 = 0;
    v57 = 0;
    size = v157;
    v47 = v155;
    v49 = v150;
    LOBYTE(v50) = v151;
    goto LABEL_116;
  }
LABEL_323:
  __break(1u);
  return result;
}

void nghttp2_debug_logging_callback(char *a1, va_list a2)
{
  char *v2;
  NSObject *v3;
  char *v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  vasprintf(&v4, a1, a2);
  v2 = v4;
  if (v4)
  {
    if (!gLogDatapath)
      goto LABEL_3;
    v3 = __nwlog_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v6 = "nghttp2_debug_logging_callback";
      v7 = 2082;
      v8 = v4;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s", buf, 0x16u);
    }
    v2 = v4;
    if (v4)
LABEL_3:
      free(v2);
  }
}

uint64_t nw_http2_get_stream_from_id(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t stream_node_from_id;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  const char *v22;
  char *backtrace_string;
  _BOOL4 v24;
  int v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BYTE v43[10];
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0)
  {
    if (*(__int16 *)(a1 + 376) < 0)
      return 0;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v10 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return 0;
    v11 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)buf = 136447234;
    v35 = "nw_http2_get_stream_from_id";
    v36 = 2082;
    v37 = a1 + 378;
    v38 = 2080;
    v39 = " ";
    v40 = 1024;
    v41 = v11;
    v42 = 1024;
    *(_DWORD *)v43 = a2;
    v12 = "%{public}s %{public}s%s<i%u> requested stream id (%d) is not valid, returning NULL stream";
    v13 = v10;
    v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_12;
  }
  stream_node_from_id = nw_http2_get_stream_node_from_id(a1, a2);
  if (!stream_node_from_id)
  {
    v8 = 0;
    if (*(__int16 *)(a1 + 376) < 0 || !gLogDatapath)
      return v8;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v15 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      return 0;
    v16 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)buf = 136447234;
    v35 = "nw_http2_get_stream_from_id";
    v36 = 2082;
    v37 = a1 + 378;
    v38 = 2080;
    v39 = " ";
    v40 = 1024;
    v41 = v16;
    v42 = 1024;
    *(_DWORD *)v43 = a2;
    v12 = "%{public}s %{public}s%s<i%u> stream %d not found in id based hash table";
    v13 = v15;
    v14 = OS_LOG_TYPE_DEBUG;
LABEL_12:
    _os_log_impl(&dword_182FBE000, v13, v14, v12, buf, 0x2Cu);
    return 0;
  }
  v7 = stream_node_from_id;
  v8 = *(_QWORD *)(stream_node_from_id + 16);
  if (!v8)
  {
    if ((*(__int16 *)(a1 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v17 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136447234;
      v35 = "nw_http2_get_stream_from_id";
      v36 = 2082;
      v37 = a1 + 378;
      v38 = 2080;
      v39 = " ";
      v40 = 1024;
      v41 = v17;
      v42 = 2048;
      *(_QWORD *)v43 = v7;
      v18 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v32 = 0;
      if (!__nwlog_fault(v18, &type, &v32))
        goto LABEL_48;
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = gconnectionLogObj;
        v20 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          goto LABEL_48;
        v21 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136447234;
        v35 = "nw_http2_get_stream_from_id";
        v36 = 2082;
        v37 = a1 + 378;
        v38 = 2080;
        v39 = " ";
        v40 = 1024;
        v41 = v21;
        v42 = 2048;
        *(_QWORD *)v43 = v7;
        v22 = "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra";
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = gconnectionLogObj;
        v20 = type;
        v24 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (backtrace_string)
        {
          if (v24)
          {
            v25 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136447490;
            v35 = "nw_http2_get_stream_from_id";
            v36 = 2082;
            v37 = a1 + 378;
            v38 = 2080;
            v39 = " ";
            v40 = 1024;
            v41 = v25;
            v42 = 2048;
            *(_QWORD *)v43 = v7;
            *(_WORD *)&v43[8] = 2082;
            v44 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra, dumping backtrace:%{public}s", buf, 0x3Au);
          }
          free(backtrace_string);
          goto LABEL_48;
        }
        if (!v24)
        {
LABEL_48:
          if (v18)
            free(v18);
          return 0;
        }
        v30 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136447234;
        v35 = "nw_http2_get_stream_from_id";
        v36 = 2082;
        v37 = a1 + 378;
        v38 = 2080;
        v39 = " ";
        v40 = 1024;
        v41 = v30;
        v42 = 2048;
        *(_QWORD *)v43 = v7;
        v22 = "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra, no backtrace";
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = gconnectionLogObj;
        v20 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          goto LABEL_48;
        v29 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136447234;
        v35 = "nw_http2_get_stream_from_id";
        v36 = 2082;
        v37 = a1 + 378;
        v38 = 2080;
        v39 = " ";
        v40 = 1024;
        v41 = v29;
        v42 = 2048;
        *(_QWORD *)v43 = v7;
        v22 = "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v19, v20, v22, buf, 0x30u);
      goto LABEL_48;
    }
    return 0;
  }
  if (a3)
  {
    v9 = *(_QWORD *)(stream_node_from_id + 32);
    if (v9)
    {
      *a3 = v9;
    }
    else if (((*(unsigned __int16 *)(v8 + 188) | (*(unsigned __int8 *)(v8 + 190) << 16)) & 0x80000) == 0
           && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v26 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v28 = *(_DWORD *)(v8 + 176);
        v27 = *(_DWORD *)(v8 + 180);
        *(_DWORD *)buf = 136447490;
        v35 = "nw_http2_get_stream_from_id";
        v36 = 2082;
        v37 = v8 + 191;
        v38 = 2080;
        v39 = " ";
        v40 = 1024;
        v41 = v27;
        v42 = 1024;
        *(_DWORD *)v43 = v28;
        *(_WORD *)&v43[4] = 1024;
        *(_DWORD *)&v43[6] = v28;
        _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> no input handler attached to stream %d, ignoring", buf, 0x32u);
      }
    }
  }
  return v8;
}

void nw_http2_connection_close(uint64_t a1)
{
  __int16 v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  const char *v13;
  char *v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  NSObject *v19;
  const char *v20;
  int v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  int v28;
  char *backtrace_string;
  _BOOL4 v30;
  _QWORD v31[5];
  _QWORD v32[5];
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1 || (*(__int16 *)(a1 + 376) & 0x80000000) == 0)
  {
    if (gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v19 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v20 = " ";
        v21 = *(_DWORD *)(a1 + 368);
        v36 = "nw_http2_connection_close";
        v37 = 2082;
        v22 = (const char *)(a1 + 378);
        *(_DWORD *)buf = 136446978;
        if (!a1)
          v22 = "";
        v38 = (void *)v22;
        if (!a1)
          v20 = "";
        v39 = 2080;
        v40 = v20;
        v41 = 1024;
        v42 = v21;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        v2 = *(_WORD *)(a1 + 376);
        if ((v2 & 8) != 0)
          goto LABEL_48;
        goto LABEL_6;
      }
    }
    if (!a1)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v36 = "nw_http2_connection_close";
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v33 = 0;
      if (!__nwlog_fault(v23, &type, &v33))
        goto LABEL_69;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (!os_log_type_enabled(v24, type))
          goto LABEL_69;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http2_connection_close";
        v26 = "%{public}s called with null http2";
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v24 = __nwlog_obj();
        v25 = type;
        v30 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_http2_connection_close";
            v37 = 2082;
            v38 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null http2, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_69;
        }
        if (!v30)
        {
LABEL_69:
          if (v23)
            free(v23);
          return;
        }
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http2_connection_close";
        v26 = "%{public}s called with null http2, no backtrace";
      }
      else
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (!os_log_type_enabled(v24, type))
          goto LABEL_69;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http2_connection_close";
        v26 = "%{public}s called with null http2, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
      goto LABEL_69;
    }
  }
  v2 = *(_WORD *)(a1 + 376);
  if ((v2 & 8) != 0)
  {
LABEL_48:
    if ((v2 & 0x8000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v27 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v28 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136446978;
        v36 = "nw_http2_connection_close";
        v37 = 2082;
        v38 = (void *)(a1 + 378);
        v39 = 2080;
        v40 = " ";
        v41 = 1024;
        v42 = v28;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> tunnel is closed, returning", buf, 0x26u);
      }
    }
    return;
  }
LABEL_6:
  *(_WORD *)(a1 + 376) = v2 & 0xFFF3 | 8;
  nw_protocol_remove_instance(a1);
  v3 = *(char **)(a1 + 160);
  v4 = MEMORY[0x1E0C809B0];
  if (v3)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 0x40000000;
    v32[2] = ___ZL25nw_http2_connection_closeP17nw_protocol_http2_block_invoke;
    v32[3] = &__block_descriptor_tmp_19_81580;
    v32[4] = a1;
    nw_hash_table_apply(v3, (uint64_t)v32);
  }
  else if ((*(__int16 *)(a1 + 376) & 0x80000000) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v5 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_http2_connection_close";
      v37 = 2082;
      v38 = (void *)(a1 + 378);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v6;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> id table is NULL, cannot close streams", buf, 0x26u);
    }
  }
  nw_http2_send_goaway(a1);
  v7 = *(char **)(a1 + 152);
  if (v7)
  {
    v31[0] = v4;
    v31[1] = 0x40000000;
    v31[2] = ___ZL25nw_http2_connection_closeP17nw_protocol_http2_block_invoke_20;
    v31[3] = &__block_descriptor_tmp_21_81586;
    v31[4] = a1;
    nw_hash_table_apply(v7, (uint64_t)v31);
    return;
  }
  if ((*(__int16 *)(a1 + 376) & 0x80000000) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v8 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)buf = 136446978;
    v36 = "nw_http2_connection_close";
    v37 = 2082;
    v38 = (void *)(a1 + 378);
    v39 = 2080;
    v40 = " ";
    v41 = 1024;
    v42 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v9, &type, &v33))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = gconnectionLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        goto LABEL_38;
      v12 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_http2_connection_close";
      v37 = 2082;
      v38 = (void *)(a1 + 378);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v12;
      v13 = "%{public}s %{public}s%s<i%u> protocol table is NULL, cannot notify input handlers";
    }
    else if (v33)
    {
      v14 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = gconnectionLogObj;
      v11 = type;
      v15 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v14)
      {
        if (v15)
        {
          v16 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136447234;
          v36 = "nw_http2_connection_close";
          v37 = 2082;
          v38 = (void *)(a1 + 378);
          v39 = 2080;
          v40 = " ";
          v41 = 1024;
          v42 = v16;
          v43 = 2082;
          v44 = v14;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s %{public}s%s<i%u> protocol table is NULL, cannot notify input handlers, dumping backtrace:%{public}s", buf, 0x30u);
        }
        free(v14);
        goto LABEL_38;
      }
      if (!v15)
      {
LABEL_38:
        if (v9)
          free(v9);
        return;
      }
      v18 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_http2_connection_close";
      v37 = 2082;
      v38 = (void *)(a1 + 378);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v18;
      v13 = "%{public}s %{public}s%s<i%u> protocol table is NULL, cannot notify input handlers, no backtrace";
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = gconnectionLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        goto LABEL_38;
      v17 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_http2_connection_close";
      v37 = 2082;
      v38 = (void *)(a1 + 378);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v17;
      v13 = "%{public}s %{public}s%s<i%u> protocol table is NULL, cannot notify input handlers, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v10, v11, v13, buf, 0x26u);
    goto LABEL_38;
  }
}

void nw_http2_stream_close(uint64_t a1, uint64_t a2)
{
  int *v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint32_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  _BOOL8 node;
  BOOL v39;
  int v40;
  NSObject *v41;
  int v42;
  int v43;
  const char *v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  const char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  int v62;
  const char *v63;
  char *v64;
  _BOOL4 v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  NSObject *v74;
  const char *v75;
  int v76;
  const char *v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  const char *v81;
  NSObject *v82;
  int v83;
  int v84;
  char *backtrace_string;
  _BOOL4 v86;
  char *v87;
  _BOOL4 v88;
  NSObject *v89;
  int v90;
  int v91;
  NSObject *v92;
  int v93;
  int v94;
  NSObject *v95;
  _BOOL4 v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  NSObject *v102;
  uint64_t v103;
  char v104;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  _BYTE v113[10];
  __int16 v114;
  int v115;
  __int16 v116;
  uint64_t v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v82 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v84 = *(_DWORD *)(a2 + 176);
        v83 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)buf = 136447234;
        v107 = "nw_http2_stream_close";
        v108 = 2082;
        v109 = (const char *)(a2 + 191);
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        *(_DWORD *)v113 = v83;
        *(_WORD *)&v113[4] = 1024;
        *(_DWORD *)&v113[6] = v84;
        _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called", buf, 0x2Cu);
      }
    }
  }
  else
  {
    if (a1 && *(__int16 *)(a1 + 376) < 0)
      goto LABEL_129;
    if (gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v74 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v75 = (const char *)(a1 + 378);
        v76 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "nw_http2_stream_close";
        v108 = 2082;
        if (!a1)
          v75 = "";
        v109 = v75;
        if (a1)
          v77 = " ";
        else
          v77 = "";
        v110 = 2080;
        v111 = (uint64_t)v77;
        v112 = 1024;
        *(_DWORD *)v113 = v76;
        _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        goto LABEL_129;
      }
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v107 = "nw_http2_stream_close";
    v78 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v104 = 0;
    if (!__nwlog_fault(v78, &type, &v104))
      goto LABEL_180;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v79 = __nwlog_obj();
      v80 = type;
      if (!os_log_type_enabled(v79, type))
        goto LABEL_180;
      *(_DWORD *)buf = 136446210;
      v107 = "nw_http2_stream_close";
      v81 = "%{public}s called with null http2";
      goto LABEL_179;
    }
    if (!v104)
    {
      v79 = __nwlog_obj();
      v80 = type;
      if (!os_log_type_enabled(v79, type))
        goto LABEL_180;
      *(_DWORD *)buf = 136446210;
      v107 = "nw_http2_stream_close";
      v81 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_179;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v79 = __nwlog_obj();
    v80 = type;
    v86 = os_log_type_enabled(v79, type);
    if (!backtrace_string)
    {
      if (!v86)
        goto LABEL_180;
      *(_DWORD *)buf = 136446210;
      v107 = "nw_http2_stream_close";
      v81 = "%{public}s called with null http2, no backtrace";
      goto LABEL_179;
    }
    if (v86)
    {
      *(_DWORD *)buf = 136446466;
      v107 = "nw_http2_stream_close";
      v108 = 2082;
      v109 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s called with null http2, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
    goto LABEL_180;
  }
  if (!a2)
  {
LABEL_129:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v107 = "nw_http2_stream_close";
    v78 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v104 = 0;
    if (!__nwlog_fault(v78, &type, &v104))
      goto LABEL_180;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v79 = __nwlog_obj();
      v80 = type;
      if (!os_log_type_enabled(v79, type))
        goto LABEL_180;
      *(_DWORD *)buf = 136446210;
      v107 = "nw_http2_stream_close";
      v81 = "%{public}s called with null stream";
      goto LABEL_179;
    }
    if (!v104)
    {
      v79 = __nwlog_obj();
      v80 = type;
      if (!os_log_type_enabled(v79, type))
        goto LABEL_180;
      *(_DWORD *)buf = 136446210;
      v107 = "nw_http2_stream_close";
      v81 = "%{public}s called with null stream, backtrace limit exceeded";
      goto LABEL_179;
    }
    v87 = (char *)__nw_create_backtrace_string();
    v79 = __nwlog_obj();
    v80 = type;
    v88 = os_log_type_enabled(v79, type);
    if (v87)
    {
      if (v88)
      {
        *(_DWORD *)buf = 136446466;
        v107 = "nw_http2_stream_close";
        v108 = 2082;
        v109 = v87;
        _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s called with null stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v87);
      if (!v78)
        return;
LABEL_181:
      free(v78);
      return;
    }
    if (v88)
    {
      *(_DWORD *)buf = 136446210;
      v107 = "nw_http2_stream_close";
      v81 = "%{public}s called with null stream, no backtrace";
LABEL_179:
      _os_log_impl(&dword_182FBE000, v79, v80, v81, buf, 0xCu);
    }
LABEL_180:
    if (!v78)
      return;
    goto LABEL_181;
  }
  v4 = (int *)(a2 + 176);
  v5 = *(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16);
  if (*(_DWORD *)(a2 + 176) != -1)
  {
    if ((*(_WORD *)(a2 + 188) & 1) == 0)
    {
      if ((v5 & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v6 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v8 = *(_DWORD *)(a2 + 176);
          v7 = *(_DWORD *)(a2 + 180);
          *(_DWORD *)buf = 136447234;
          v107 = "nw_http2_stream_close";
          v108 = 2082;
          v109 = (const char *)(a2 + 191);
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          *(_DWORD *)v113 = v7;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v8;
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> not sending RST_STREAM, since we are already closed from nghttp2's perspective", buf, 0x2Cu);
        }
      }
LABEL_38:
      if ((*(_WORD *)(a2 + 188) & 0x400) == 0)
      {
        v27 = *(_QWORD *)(a2 + 32);
        if (v27)
        {
          v28 = mach_continuous_approximate_time();
          v29 = v28 <= 1 ? 1 : v28;
          v30 = nw_delta_nanos(v27, v29);
          if (v30 > 1000000000
                   * networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_setup_threshold_seconds, 5))
          {
            v31 = (unsigned __int16)(*(_WORD *)(a1 + 372))++ + 1;
            if ((v31 & 0x10000) != 0)
            {
              if (gLogDatapath)
              {
                v102 = __nwlog_obj();
                if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
                {
                  v103 = *(unsigned __int16 *)(a1 + 372);
                  *(_DWORD *)buf = 136446978;
                  v107 = "nw_http2_stream_close";
                  v108 = 2082;
                  v109 = "http2->stream_stall_count";
                  v110 = 2048;
                  v111 = 1;
                  v112 = 2048;
                  *(_QWORD *)v113 = v103;
                  _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
                }
              }
              *(_WORD *)(a1 + 372) = -1;
            }
            if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v32 = gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
              {
                v34 = *(_DWORD *)(a2 + 176);
                v33 = *(_DWORD *)(a2 + 180);
                v35 = *(unsigned __int16 *)(a1 + 372);
                *(_DWORD *)buf = 136447490;
                v107 = "nw_http2_stream_close";
                v108 = 2082;
                v109 = (const char *)(a2 + 191);
                v110 = 2080;
                v111 = (uint64_t)" ";
                v112 = 1024;
                *(_DWORD *)v113 = v33;
                *(_WORD *)&v113[4] = 1024;
                *(_DWORD *)&v113[6] = v34;
                v114 = 1024;
                v115 = v35;
                _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%d> stream setup stalls incremented to %u", buf, 0x32u);
              }
            }
          }
        }
      }
      v36 = (*(unsigned __int8 *)(a2 + 190) >> 3) & 1;
      if (!gLogDatapath)
        LOBYTE(v36) = 1;
      if (*(_DWORD *)(a2 + 176) != -1)
      {
        if ((v36 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v92 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v94 = *(_DWORD *)(a2 + 176);
            v93 = *(_DWORD *)(a2 + 180);
            *(_DWORD *)buf = 136447746;
            v107 = "nw_http2_remove_from_id_table";
            v108 = 2082;
            v109 = (const char *)(a2 + 191);
            v110 = 2080;
            v111 = (uint64_t)" ";
            v112 = 1024;
            *(_DWORD *)v113 = v93;
            *(_WORD *)&v113[4] = 1024;
            *(_DWORD *)&v113[6] = v94;
            v114 = 1024;
            v115 = v94;
            v116 = 2048;
            v117 = a2;
            _os_log_impl(&dword_182FBE000, v92, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called for stream %d (%p)", buf, 0x3Cu);
          }
        }
        v37 = *(_QWORD *)(a1 + 160);
        if (v37)
        {
          node = nw_hash_table_get_node(v37, a2 + 176, 4);
          if (node)
          {
            v39 = nw_hash_table_remove_node(*(_QWORD *)(a1 + 160), node);
            v40 = *(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16);
            if (v39)
            {
              if ((v40 & 0x80000) != 0 || !gLogDatapath)
                goto LABEL_113;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v41 = gconnectionLogObj;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                goto LABEL_113;
              v43 = *(_DWORD *)(a2 + 176);
              v42 = *(_DWORD *)(a2 + 180);
              *(_DWORD *)buf = 136447490;
              v107 = "nw_http2_remove_from_id_table";
              v108 = 2082;
              v109 = (const char *)(a2 + 191);
              v110 = 2080;
              v111 = (uint64_t)" ";
              v112 = 1024;
              *(_DWORD *)v113 = v42;
              *(_WORD *)&v113[4] = 1024;
              *(_DWORD *)&v113[6] = v43;
              v114 = 1024;
              v115 = v43;
              v44 = "%{public}s %{public}s%s<i%u:s%d> removed stream %d from id based table";
LABEL_112:
              _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, v44, buf, 0x32u);
LABEL_113:
              if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0
                && gLogDatapath)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v89 = gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                {
                  v91 = *(_DWORD *)(a2 + 176);
                  v90 = *(_DWORD *)(a2 + 180);
                  *(_DWORD *)buf = 136447490;
                  v107 = "nw_http2_stream_close";
                  v108 = 2082;
                  v109 = (const char *)(a2 + 191);
                  v110 = 2080;
                  v111 = (uint64_t)" ";
                  v112 = 1024;
                  *(_DWORD *)v113 = v90;
                  *(_WORD *)&v113[4] = 1024;
                  *(_DWORD *)&v113[6] = v91;
                  v114 = 1024;
                  v115 = v91;
                  _os_log_impl(&dword_182FBE000, v89, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> removed stream %d from id based table", buf, 0x32u);
                }
              }
              *v4 = -1;
              return;
            }
            if ((v40 & 0x80000) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v57 = *(_DWORD *)(a2 + 176);
              v56 = *(_DWORD *)(a2 + 180);
              *(_DWORD *)buf = 136447490;
              v107 = "nw_http2_remove_from_id_table";
              v108 = 2082;
              v109 = (const char *)(a2 + 191);
              v110 = 2080;
              v111 = (uint64_t)" ";
              v112 = 1024;
              *(_DWORD *)v113 = v56;
              *(_WORD *)&v113[4] = 1024;
              *(_DWORD *)&v113[6] = v57;
              v114 = 1024;
              v115 = v57;
              v58 = (char *)_os_log_send_and_compose_impl();
              type = OS_LOG_TYPE_ERROR;
              v104 = 0;
              if (!__nwlog_fault(v58, &type, &v104))
                goto LABEL_105;
              if (type == OS_LOG_TYPE_FAULT)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v59 = gconnectionLogObj;
                v60 = type;
                if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
                  goto LABEL_105;
                v62 = *(_DWORD *)(a2 + 176);
                v61 = *(_DWORD *)(a2 + 180);
                *(_DWORD *)buf = 136447490;
                v107 = "nw_http2_remove_from_id_table";
                v108 = 2082;
                v109 = (const char *)(a2 + 191);
                v110 = 2080;
                v111 = (uint64_t)" ";
                v112 = 1024;
                *(_DWORD *)v113 = v61;
                *(_WORD *)&v113[4] = 1024;
                *(_DWORD *)&v113[6] = v62;
                v114 = 1024;
                v115 = v62;
                v63 = "%{public}s %{public}s%s<i%u:s%d> failed to remove id node for stream %d from table";
              }
              else if (v104)
              {
                v64 = (char *)__nw_create_backtrace_string();
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v59 = gconnectionLogObj;
                v60 = type;
                v65 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
                if (v64)
                {
                  if (v65)
                  {
                    v67 = *(_DWORD *)(a2 + 176);
                    v66 = *(_DWORD *)(a2 + 180);
                    *(_DWORD *)buf = 136447746;
                    v107 = "nw_http2_remove_from_id_table";
                    v108 = 2082;
                    v109 = (const char *)(a2 + 191);
                    v110 = 2080;
                    v111 = (uint64_t)" ";
                    v112 = 1024;
                    *(_DWORD *)v113 = v66;
                    *(_WORD *)&v113[4] = 1024;
                    *(_DWORD *)&v113[6] = v67;
                    v114 = 1024;
                    v115 = v67;
                    v116 = 2082;
                    v117 = (uint64_t)v64;
                    _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s %{public}s%s<i%u:s%d> failed to remove id node for stream %d from table, dumping backtrace:%{public}s", buf, 0x3Cu);
                  }
                  free(v64);
                  goto LABEL_105;
                }
                if (!v65)
                {
LABEL_105:
                  if (v58)
                    free(v58);
                  goto LABEL_107;
                }
                v71 = *(_DWORD *)(a2 + 176);
                v70 = *(_DWORD *)(a2 + 180);
                *(_DWORD *)buf = 136447490;
                v107 = "nw_http2_remove_from_id_table";
                v108 = 2082;
                v109 = (const char *)(a2 + 191);
                v110 = 2080;
                v111 = (uint64_t)" ";
                v112 = 1024;
                *(_DWORD *)v113 = v70;
                *(_WORD *)&v113[4] = 1024;
                *(_DWORD *)&v113[6] = v71;
                v114 = 1024;
                v115 = v71;
                v63 = "%{public}s %{public}s%s<i%u:s%d> failed to remove id node for stream %d from table, no backtrace";
              }
              else
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v59 = gconnectionLogObj;
                v60 = type;
                if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
                  goto LABEL_105;
                v69 = *(_DWORD *)(a2 + 176);
                v68 = *(_DWORD *)(a2 + 180);
                *(_DWORD *)buf = 136447490;
                v107 = "nw_http2_remove_from_id_table";
                v108 = 2082;
                v109 = (const char *)(a2 + 191);
                v110 = 2080;
                v111 = (uint64_t)" ";
                v112 = 1024;
                *(_DWORD *)v113 = v68;
                *(_WORD *)&v113[4] = 1024;
                *(_DWORD *)&v113[6] = v69;
                v114 = 1024;
                v115 = v69;
                v63 = "%{public}s %{public}s%s<i%u:s%d> failed to remove id node for stream %d from table, backtrace limit exceeded";
              }
              _os_log_impl(&dword_182FBE000, v59, v60, v63, buf, 0x32u);
              goto LABEL_105;
            }
LABEL_107:
            if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) != 0)
              goto LABEL_113;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v41 = gconnectionLogObj;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
              goto LABEL_113;
            v73 = *(_DWORD *)(a2 + 176);
            v72 = *(_DWORD *)(a2 + 180);
            *(_DWORD *)buf = 136447490;
            v107 = "nw_http2_stream_close";
            v108 = 2082;
            v109 = (const char *)(a2 + 191);
            v110 = 2080;
            v111 = (uint64_t)" ";
            v112 = 1024;
            *(_DWORD *)v113 = v72;
            *(_WORD *)&v113[4] = 1024;
            *(_DWORD *)&v113[6] = v73;
            v114 = 1024;
            v115 = v73;
            v44 = "%{public}s %{public}s%s<i%u:s%d> did not remove stream %d from id table";
            goto LABEL_112;
          }
          if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) != 0)
            goto LABEL_107;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v53 = gconnectionLogObj;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
            goto LABEL_107;
          v55 = *(_DWORD *)(a2 + 176);
          v54 = *(_DWORD *)(a2 + 180);
          *(_DWORD *)buf = 136447490;
          v107 = "nw_http2_remove_from_id_table";
          v108 = 2082;
          v109 = (const char *)(a2 + 191);
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          *(_DWORD *)v113 = v54;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v55;
          v114 = 1024;
          v115 = v55;
          v50 = "%{public}s %{public}s%s<i%u:s%d> stream %d is not present in id based table, will not remove";
          v51 = v53;
          v52 = OS_LOG_TYPE_INFO;
        }
        else
        {
          if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) != 0)
            goto LABEL_107;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v47 = gconnectionLogObj;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
            goto LABEL_107;
          v49 = *(_DWORD *)(a2 + 176);
          v48 = *(_DWORD *)(a2 + 180);
          *(_DWORD *)buf = 136447490;
          v107 = "nw_http2_remove_from_id_table";
          v108 = 2082;
          v109 = (const char *)(a2 + 191);
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          *(_DWORD *)v113 = v48;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v49;
          v114 = 1024;
          v115 = v49;
          v50 = "%{public}s %{public}s%s<i%u:s%d> id based table is NULL, cannot remove stream %d";
          v51 = v47;
          v52 = OS_LOG_TYPE_ERROR;
        }
        _os_log_impl(&dword_182FBE000, v51, v52, v50, buf, 0x32u);
        goto LABEL_107;
      }
      if ((v36 & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v9 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v46 = *(_DWORD *)(a2 + 176);
          v45 = *(_DWORD *)(a2 + 180);
          *(_DWORD *)buf = 136447234;
          v107 = "nw_http2_stream_close";
          v108 = 2082;
          v109 = (const char *)(a2 + 191);
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          *(_DWORD *)v113 = v45;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v46;
          v12 = "%{public}s %{public}s%s<i%u:s%d> stream id is -1, skipping removal from id based table";
          goto LABEL_70;
        }
      }
      return;
    }
    *(_BYTE *)(a2 + 190) = BYTE2(v5);
    *(_WORD *)(a2 + 188) = v5 & 0xFFFE;
    if ((v5 & 0x80000) != 0 || !gLogDatapath)
      goto LABEL_22;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v95 = gconnectionLogObj;
    v96 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
    v97 = *v4;
    if (v96)
    {
      v98 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)buf = 136447234;
      v107 = "nw_http2_stream_send_rst_stream";
      v108 = 2082;
      v109 = (const char *)(a2 + 191);
      v110 = 2080;
      v111 = (uint64_t)" ";
      v112 = 1024;
      *(_DWORD *)v113 = v98;
      *(_WORD *)&v113[4] = 1024;
      *(_DWORD *)&v113[6] = v97;
      _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called", buf, 0x2Cu);
      v97 = *(_DWORD *)(a2 + 176);
    }
    if (v97 == -1)
    {
      if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) != 0)
        goto LABEL_37;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v99 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_37;
      v101 = *(_DWORD *)(a2 + 176);
      v100 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)buf = 136447490;
      v107 = "nw_http2_stream_send_rst_stream";
      v108 = 2082;
      v109 = (const char *)(a2 + 191);
      v110 = 2080;
      v111 = (uint64_t)" ";
      v112 = 1024;
      *(_DWORD *)v113 = v100;
      *(_WORD *)&v113[4] = 1024;
      *(_DWORD *)&v113[6] = v101;
      v114 = 1024;
      v115 = v101;
      v20 = "%{public}s %{public}s%s<i%u:s%d> cannot send RST_STREAM for stream with invalid stream id %d";
      v21 = v99;
      v22 = OS_LOG_TYPE_ERROR;
    }
    else
    {
LABEL_22:
      v13 = *(_QWORD *)(a1 + 264);
      if (v13)
        (*(void (**)(void))(v13 + 16))();
      v14 = nghttp2_submit_rst_stream();
      v15 = *(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16);
      if (v14)
      {
        if ((v15 & 0x80000) != 0)
          goto LABEL_37;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v16 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_37;
        v18 = *(_DWORD *)(a2 + 176);
        v17 = *(_DWORD *)(a2 + 180);
        v19 = nghttp2_strerror();
        *(_DWORD *)buf = 136447746;
        v107 = "nw_http2_stream_send_rst_stream";
        v108 = 2082;
        v109 = (const char *)(a2 + 191);
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        *(_DWORD *)v113 = v17;
        *(_WORD *)&v113[4] = 1024;
        *(_DWORD *)&v113[6] = v18;
        v114 = 1024;
        v115 = v18;
        v116 = 2082;
        v117 = v19;
        v20 = "%{public}s %{public}s%s<i%u:s%d> Failed to submit RST_STREAM on stream %d: %{public}s";
        v21 = v16;
        v22 = OS_LOG_TYPE_ERROR;
        v23 = 60;
LABEL_36:
        _os_log_impl(&dword_182FBE000, v21, v22, v20, buf, v23);
LABEL_37:
        nw_http2_session_send(a1);
        goto LABEL_38;
      }
      if ((v15 & 0x80000) != 0)
        goto LABEL_37;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v24 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_37;
      v26 = *(_DWORD *)(a2 + 176);
      v25 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)buf = 136447490;
      v107 = "nw_http2_stream_send_rst_stream";
      v108 = 2082;
      v109 = (const char *)(a2 + 191);
      v110 = 2080;
      v111 = (uint64_t)" ";
      v112 = 1024;
      *(_DWORD *)v113 = v25;
      *(_WORD *)&v113[4] = 1024;
      *(_DWORD *)&v113[6] = v26;
      v114 = 1024;
      v115 = v26;
      v20 = "%{public}s %{public}s%s<i%u:s%d> Submitted RST_STREAM on stream %d";
      v21 = v24;
      v22 = OS_LOG_TYPE_INFO;
    }
    v23 = 50;
    goto LABEL_36;
  }
  *(_BYTE *)(a2 + 190) = BYTE2(v5);
  *(_WORD *)(a2 + 188) = v5 & 0xFFFE;
  *(_DWORD *)(a2 + 176) = -1;
  if ((v5 & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v9 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_DWORD *)(a2 + 176);
      v10 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)buf = 136447234;
      v107 = "nw_http2_stream_close";
      v108 = 2082;
      v109 = (const char *)(a2 + 191);
      v110 = 2080;
      v111 = (uint64_t)" ";
      v112 = 1024;
      *(_DWORD *)v113 = v10;
      *(_WORD *)&v113[4] = 1024;
      *(_DWORD *)&v113[6] = v11;
      v12 = "%{public}s %{public}s%s<i%u:s%d> stream id is -1, skipping rst_stream and removal from id based table";
LABEL_70:
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, v12, buf, 0x2Cu);
    }
  }
}

void nw_http2_session_send(uint64_t a1)
{
  __int16 v2;
  char v3;
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  NSObject *v19;
  int v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  NSObject *v33;
  int v34;
  NSObject *v35;
  int v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  int v40;
  const char *v41;
  NSObject *v42;
  const char *v43;
  int v44;
  const char *v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  const char *v49;
  int v50;
  char *backtrace_string;
  _BOOL4 v52;
  NSObject *v53;
  int v54;
  _QWORD v55[5];
  char v56;
  os_log_type_t type;
  _BYTE buf[40];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a1 && *(__int16 *)(a1 + 376) < 0)
  {
LABEL_5:
    v2 = *(_WORD *)(a1 + 376);
    if ((v2 & 0x100) != 0)
      goto LABEL_83;
    goto LABEL_6;
  }
  if (!gLogDatapath)
    goto LABEL_4;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v42 = gconnectionLogObj;
  if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    if (a1)
      goto LABEL_5;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http2_session_send";
    v46 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v56 = 0;
    if (__nwlog_fault(v46, &type, &v56))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v47 = __nwlog_obj();
        v48 = type;
        if (!os_log_type_enabled(v47, type))
          goto LABEL_109;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_session_send";
        v49 = "%{public}s called with null http2";
        goto LABEL_108;
      }
      if (!v56)
      {
        v47 = __nwlog_obj();
        v48 = type;
        if (!os_log_type_enabled(v47, type))
          goto LABEL_109;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_session_send";
        v49 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_108;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = type;
      v52 = os_log_type_enabled(v47, type);
      if (backtrace_string)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http2_session_send";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s called with null http2, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_109;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_session_send";
        v49 = "%{public}s called with null http2, no backtrace";
LABEL_108:
        _os_log_impl(&dword_182FBE000, v47, v48, v49, buf, 0xCu);
      }
    }
LABEL_109:
    if (v46)
      free(v46);
    return;
  }
  v43 = " ";
  v44 = *(_DWORD *)(a1 + 368);
  *(_QWORD *)&buf[4] = "nw_http2_session_send";
  *(_WORD *)&buf[12] = 2082;
  v45 = (const char *)(a1 + 378);
  *(_DWORD *)buf = 136446978;
  if (!a1)
    v45 = "";
  *(_QWORD *)&buf[14] = v45;
  if (!a1)
    v43 = "";
  *(_WORD *)&buf[22] = 2080;
  *(_QWORD *)&buf[24] = v43;
  *(_WORD *)&buf[32] = 1024;
  *(_DWORD *)&buf[34] = v44;
  _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
  v2 = *(_WORD *)(a1 + 376);
  if ((v2 & 0x100) != 0)
  {
LABEL_83:
    if ((v2 & 0x8000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v50 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http2_session_send";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 378;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v50;
        v41 = "%{public}s %{public}s%s<i%u> already in session send, skipping";
        goto LABEL_94;
      }
    }
    return;
  }
LABEL_6:
  if ((v2 & 0x200) == 0)
  {
    v3 = 0;
    *(_WORD *)(a1 + 376) = v2 | 0x100;
    v4 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v6 = nghttp2_session_want_write();
      v7 = *(__int16 *)(a1 + 376);
      if (!v6)
      {
LABEL_73:
        *(_WORD *)(a1 + 376) = v7 & 0xFEFF;
        if ((v3 & 1) != 0)
          nw_http2_connection_close(a1);
        return;
      }
      if ((v7 & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v35 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v36 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http2_session_send";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = a1 + 378;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v36;
          _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> nghttp2 wants to write", buf, 0x26u);
        }
      }
      *(_WORD *)(a1 + 376) &= ~0x2000u;
      v8 = nghttp2_session_send();
      if (!v8)
        goto LABEL_40;
      v9 = v8;
      if (v8 != -902 || (*(_WORD *)(a1 + 376) & 0x10) == 0)
        break;
      if ((*(_WORD *)(a1 + 376) & 0x8000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
        {
          v20 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http2_session_send";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = a1 + 378;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v20;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u> tunnel error, send failed, closing", buf, 0x26u);
        }
      }
LABEL_39:
      v3 = 1;
LABEL_40:
      if ((*(_WORD *)(a1 + 376) & 0x2000) != 0)
      {
        if ((*(_WORD *)(a1 + 376) & 0x8000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v53 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v54 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http2_session_send";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 378;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v54;
            _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> cannot send any more, returning", buf, 0x26u);
          }
        }
        LOWORD(v7) = *(_WORD *)(a1 + 376);
        goto LABEL_73;
      }
      if (*(unsigned __int16 *)(a1 + 374) < 6u)
      {
        if ((*(_WORD *)(a1 + 376) & 0x4000) == 0)
        {
          *(_WORD *)(a1 + 376) |= 0x4000u;
          v30 = *(_QWORD *)(a1 + 352);
          v31 = *(void **)(a1 + 128);
          v55[0] = v4;
          v55[1] = 0x40000000;
          v55[2] = ___ZL21nw_http2_session_sendP17nw_protocol_http2_block_invoke;
          v55[3] = &unk_1E14AB808;
          v55[4] = v30;
          nw_queue_context_async(v31, v55);
        }
      }
      else
      {
        nw_http2_finalize_written_output_frames(a1);
      }
      nw_http2_drain_output_frames(a1);
      v32 = *(__int16 *)(a1 + 376);
      if (v32 < 0)
      {
        if ((v32 & 0x800) == 0)
          goto LABEL_48;
LABEL_8:
        *(_WORD *)(a1 + 376) = v32 & 0xF7FF;
        v5 = *(char **)(a1 + 152);
        *(_QWORD *)buf = v4;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL41nw_http2_deliver_pending_output_availableP17nw_protocol_http2_block_invoke;
        *(_QWORD *)&buf[24] = &__block_descriptor_tmp_28_81425;
        *(_QWORD *)&buf[32] = a1;
        nw_hash_table_apply(v5, (uint64_t)buf);
      }
      else
      {
        if (gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v37 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v38 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http2_deliver_pending_output_available";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 378;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v38;
            _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
          }
        }
        LOWORD(v32) = *(_WORD *)(a1 + 376);
        if ((v32 & 0x800) != 0)
          goto LABEL_8;
LABEL_48:
        if ((v32 & 0x8000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v33 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v34 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http2_deliver_pending_output_available";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 378;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v34;
            _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> no streams have output available pending, nothing to do", buf, 0x26u);
          }
        }
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = nghttp2_strerror();
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_http2_session_send";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v9;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v11;
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v56 = 0;
    if (__nwlog_fault(v12, &type, &v56))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = gLogObj;
        v14 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_37;
        v15 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http2_session_send";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v15;
        v16 = v13;
        v17 = v14;
        v18 = "%{public}s nghttp2_session_send failed: %d (%{public}s) failed";
        goto LABEL_36;
      }
      if (!v56)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v26 = gLogObj;
        v27 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_37;
        v28 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http2_session_send";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v28;
        v16 = v26;
        v17 = v27;
        v18 = "%{public}s nghttp2_session_send failed: %d (%{public}s) failed, backtrace limit exceeded";
        goto LABEL_36;
      }
      v21 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = gLogObj;
      v23 = type;
      v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v21)
      {
        if (v24)
        {
          v25 = nghttp2_strerror();
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http2_session_send";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v9;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v25;
          *(_WORD *)&buf[28] = 2082;
          *(_QWORD *)&buf[30] = v21;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s nghttp2_session_send failed: %d (%{public}s) failed, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v21);
        goto LABEL_37;
      }
      if (v24)
      {
        v29 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http2_session_send";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v29;
        v16 = v22;
        v17 = v23;
        v18 = "%{public}s nghttp2_session_send failed: %d (%{public}s) failed, no backtrace";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0x1Cu);
      }
    }
LABEL_37:
    if (v12)
      free(v12);
    goto LABEL_39;
  }
  if ((v2 & 0x8000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v39 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v40 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http2_session_send";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 378;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v40;
      v41 = "%{public}s %{public}s%s<i%u> in mem recv, skipping";
LABEL_94:
      _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, v41, buf, 0x26u);
    }
  }
}

void nw_http2_finalize_written_output_frames(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, os_log_type_t *);
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  int v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  NSObject *v23;
  int v24;
  char *v25;
  _BOOL4 v26;
  const char *v27;
  char *backtrace_string;
  _BOOL4 v29;
  NSObject *v30;
  int v31;
  char *v32;
  _BOOL4 v33;
  const char *v34;
  const char *v35;
  char v36;
  os_log_type_t v37[8];
  os_log_type_t *v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!a1 || (*(__int16 *)(a1 + 376) & 0x80000000) == 0)
  {
    if (!gLogDatapath)
      goto LABEL_4;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v15 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v16 = " ";
      v17 = *(_DWORD *)(a1 + 368);
      v41 = "nw_http2_finalize_written_output_frames";
      v42 = 2082;
      v18 = (const char *)(a1 + 378);
      *(_DWORD *)buf = 136446978;
      if (!a1)
        v18 = "";
      v43 = (void *)v18;
      if (!a1)
        v16 = "";
      v44 = 2080;
      v45 = v16;
      v46 = 1024;
      v47 = v17;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
    else
    {
LABEL_4:
      if (!a1)
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v41 = "nw_http2_finalize_written_output_frames";
        v19 = (char *)_os_log_send_and_compose_impl();
        v37[0] = OS_LOG_TYPE_ERROR;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v19, v37, &type))
          goto LABEL_98;
        if (v37[0] == OS_LOG_TYPE_FAULT)
        {
          v20 = __nwlog_obj();
          v21 = v37[0];
          if (!os_log_type_enabled(v20, v37[0]))
            goto LABEL_98;
          *(_DWORD *)buf = 136446210;
          v41 = "nw_http2_finalize_written_output_frames";
          v22 = "%{public}s called with null http2";
          goto LABEL_97;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          v20 = __nwlog_obj();
          v21 = v37[0];
          if (!os_log_type_enabled(v20, v37[0]))
            goto LABEL_98;
          *(_DWORD *)buf = 136446210;
          v41 = "nw_http2_finalize_written_output_frames";
          v22 = "%{public}s called with null http2, backtrace limit exceeded";
          goto LABEL_97;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v20 = __nwlog_obj();
        v21 = v37[0];
        v29 = os_log_type_enabled(v20, v37[0]);
        if (!backtrace_string)
        {
          if (!v29)
            goto LABEL_98;
          *(_DWORD *)buf = 136446210;
          v41 = "nw_http2_finalize_written_output_frames";
          v22 = "%{public}s called with null http2, no backtrace";
          goto LABEL_97;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v41 = "nw_http2_finalize_written_output_frames";
          v42 = 2082;
          v43 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null http2, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_98:
        if (!v19)
          return;
        goto LABEL_99;
      }
    }
  }
  v3 = (uint64_t *)(a1 + 240);
  v2 = *(_QWORD *)(a1 + 240);
  *(_WORD *)(a1 + 374) = 0;
  if (!v2)
  {
    if ((*(__int16 *)(a1 + 376) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v30 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v31 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136446978;
        v41 = "nw_http2_finalize_written_output_frames";
        v42 = 2082;
        v43 = (void *)(a1 + 378);
        v44 = 2080;
        v45 = " ";
        v46 = 1024;
        v47 = v31;
        _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> no written output frames, nothing to finalize", buf, 0x26u);
      }
    }
    return;
  }
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81469);
  if (!_nw_signposts_enabled || !kdebug_is_enabled())
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      goto LABEL_11;
LABEL_64:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_http2_finalize_written_output_frames";
    v19 = (char *)_os_log_send_and_compose_impl();
    v37[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v19, v37, &type))
      goto LABEL_98;
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = v37[0];
      if (!os_log_type_enabled(v20, v37[0]))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_http2_finalize_written_output_frames";
      v22 = "%{public}s called with null output_handler";
      goto LABEL_97;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v20 = __nwlog_obj();
      v21 = v37[0];
      if (!os_log_type_enabled(v20, v37[0]))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_http2_finalize_written_output_frames";
      v22 = "%{public}s called with null output_handler, backtrace limit exceeded";
      goto LABEL_97;
    }
    v32 = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = v37[0];
    v33 = os_log_type_enabled(v20, v37[0]);
    if (v32)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        v41 = "nw_http2_finalize_written_output_frames";
        v42 = 2082;
        v43 = v32;
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v32);
      if (!v19)
        return;
LABEL_99:
      free(v19);
      return;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446210;
      v41 = "nw_http2_finalize_written_output_frames";
      v22 = "%{public}s called with null output_handler, no backtrace";
LABEL_97:
      _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      goto LABEL_98;
    }
    goto LABEL_98;
  }
  kdebug_trace();
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_64;
LABEL_11:
  *(_QWORD *)v37 = 0;
  v38 = v37;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v5 + 40) = v37;
    v6 = *(os_log_type_t **)(a1 + 248);
    *(_QWORD *)v37 = v5;
    v38 = v6;
  }
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = v3;
  v7 = *(_QWORD *)(v4 + 24);
  if (!v7 || (v8 = *(void (**)(uint64_t, os_log_type_t *))(v7 + 96)) == 0)
  {
    __nwlog_obj();
    v9 = *(const char **)(v4 + 16);
    if (!v9)
      v9 = "invalid";
    *(_DWORD *)buf = 136446466;
    v41 = "nw_http2_finalize_written_output_frames";
    v42 = 2082;
    v43 = (void *)v9;
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v10, &type, &v36))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_89;
      v13 = *(const char **)(v4 + 16);
      if (!v13)
        v13 = "invalid";
      *(_DWORD *)buf = 136446466;
      v41 = "nw_http2_finalize_written_output_frames";
      v42 = 2082;
      v43 = (void *)v13;
      v14 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
    }
    else if (v36)
    {
      v25 = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v26 = os_log_type_enabled(v11, type);
      if (v25)
      {
        if (v26)
        {
          v27 = *(const char **)(v4 + 16);
          if (!v27)
            v27 = "invalid";
          *(_DWORD *)buf = 136446722;
          v41 = "nw_http2_finalize_written_output_frames";
          v42 = 2082;
          v43 = (void *)v27;
          v44 = 2082;
          v45 = v25;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v25);
        goto LABEL_89;
      }
      if (!v26)
      {
LABEL_89:
        if (v10)
          free(v10);
        goto LABEL_16;
      }
      v35 = *(const char **)(v4 + 16);
      if (!v35)
        v35 = "invalid";
      *(_DWORD *)buf = 136446466;
      v41 = "nw_http2_finalize_written_output_frames";
      v42 = 2082;
      v43 = (void *)v35;
      v14 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_89;
      v34 = *(const char **)(v4 + 16);
      if (!v34)
        v34 = "invalid";
      *(_DWORD *)buf = 136446466;
      v41 = "nw_http2_finalize_written_output_frames";
      v42 = 2082;
      v43 = (void *)v34;
      v14 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v11, v12, v14, buf, 0x16u);
    goto LABEL_89;
  }
  v8(v4, v37);
LABEL_16:
  if ((*(__int16 *)(a1 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v23 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136446978;
      v41 = "nw_http2_finalize_written_output_frames";
      v42 = 2082;
      v43 = (void *)(a1 + 378);
      v44 = 2080;
      v45 = " ";
      v46 = 1024;
      v47 = v24;
      _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> finalized written output frames", buf, 0x26u);
    }
  }
  if (_nw_signposts_once == -1)
  {
    if (!_nw_signposts_enabled)
      return;
  }
  else
  {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81469);
    if (!_nw_signposts_enabled)
      return;
  }
  if (kdebug_is_enabled())
    kdebug_trace();
}

void ___ZL21nw_http2_session_sendP17nw_protocol_http2_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v1)
  {
    *(_WORD *)(v1 + 376) &= ~0x4000u;
    nw_http2_finalize_written_output_frames(v1);
  }
}

void nw_http2_drain_output_frames(uint64_t a1)
{
  __int16 v2;
  char *v3;
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  int v15;
  char *backtrace_string;
  _BOOL4 v17;
  _QWORD v18[5];
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a1 && *(__int16 *)(a1 + 376) < 0)
    goto LABEL_5;
  if (gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v5 = " ";
      v6 = *(_DWORD *)(a1 + 368);
      v22 = "nw_http2_drain_output_frames";
      v23 = 2082;
      v7 = (const char *)(a1 + 378);
      *(_DWORD *)buf = 136446978;
      if (!a1)
        v7 = "";
      v24 = (void *)v7;
      if (!a1)
        v5 = "";
      v25 = 2080;
      v26 = v5;
      v27 = 1024;
      v28 = v6;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      v2 = *(_WORD *)(a1 + 376);
      if ((v2 & 0x400) != 0)
        goto LABEL_17;
      goto LABEL_6;
    }
  }
  if (a1)
  {
LABEL_5:
    v2 = *(_WORD *)(a1 + 376);
    if ((v2 & 0x400) != 0)
    {
LABEL_17:
      if ((v2 & 0x8000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v14 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136446978;
          v22 = "nw_http2_drain_output_frames";
          v23 = 2082;
          v24 = (void *)(a1 + 378);
          v25 = 2080;
          v26 = " ";
          v27 = 1024;
          v28 = v15;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> already draining output frames, skipping", buf, 0x26u);
        }
      }
      return;
    }
LABEL_6:
    *(_WORD *)(a1 + 376) = v2 | 0x400;
    if ((v2 & 0x8000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v12 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v13 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136446978;
        v22 = "nw_http2_drain_output_frames";
        v23 = 2082;
        v24 = (void *)(a1 + 378);
        v25 = 2080;
        v26 = " ";
        v27 = 1024;
        v28 = v13;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> draining output frames", buf, 0x26u);
      }
    }
    v3 = *(char **)(a1 + 152);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = ___ZL28nw_http2_drain_output_framesP17nw_protocol_http2_block_invoke;
    v18[3] = &__block_descriptor_tmp_26_81447;
    v18[4] = a1;
    nw_hash_table_apply(v3, (uint64_t)v18);
    *(_WORD *)(a1 + 376) &= ~0x400u;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_http2_drain_output_frames";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v8, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_http2_drain_output_frames";
      v11 = "%{public}s called with null http2";
      goto LABEL_41;
    }
    if (!v19)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_http2_drain_output_frames";
      v11 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v17 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_http2_drain_output_frames";
        v23 = 2082;
        v24 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null http2, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_42;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_http2_drain_output_frames";
      v11 = "%{public}s called with null http2, no backtrace";
LABEL_41:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    }
  }
LABEL_42:
  if (v8)
    free(v8);
}

uint64_t ___ZL41nw_http2_deliver_pending_output_availableP17nw_protocol_http2_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  BOOL v14;
  int v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  const char *v21;
  BOOL v22;
  int v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  BOOL v31;
  int v32;
  char *backtrace_string;
  _BOOL4 v34;
  uint64_t v35;
  const char *v36;
  BOOL v37;
  int v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  BOOL v42;
  int v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  BOOL v47;
  int v48;
  const char *v49;
  char *v50;
  const char *v52;
  const char *v53;
  NSObject *v54;
  os_log_type_t v55;
  const char *v56;
  const char *v57;
  NSObject *v58;
  int v59;
  int v60;
  char *v61;
  _BOOL4 v62;
  const char *v63;
  const char *v64;
  const char *v65;
  char v66;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  _BYTE v77[20];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (!object)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v11 && *(__int16 *)(v11 + 376) < 0)
      return 1;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (const char *)(v12 + 378);
    v14 = v12 == 0;
    v15 = *(_DWORD *)(v12 + 368);
    if (v14)
      v13 = "";
    *(_DWORD *)buf = 136447234;
    v69 = "nw_http2_deliver_pending_output_available_block_invoke";
    if (v14)
      v16 = "";
    else
      v16 = " ";
    v70 = 2082;
    v71 = v13;
    v72 = 2080;
    v73 = v16;
    v74 = 1024;
    v75 = v15;
    v76 = 2048;
    *(_QWORD *)v77 = a2;
    v17 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v66 = 0;
    if (__nwlog_fault(v17, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v18 = gconnectionLogObj;
        v19 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          goto LABEL_68;
        v20 = *(_QWORD *)(a1 + 32);
        v21 = (const char *)(v20 + 378);
        v22 = v20 == 0;
        if (!v20)
          v21 = "";
        v23 = *(_DWORD *)(v20 + 368);
        if (v22)
          v24 = "";
        else
          v24 = " ";
        *(_DWORD *)buf = 136447234;
        v69 = "nw_http2_deliver_pending_output_available_block_invoke";
        v70 = 2082;
        v71 = v21;
        v72 = 2080;
        v73 = v24;
        v74 = 1024;
        v75 = v23;
        v76 = 2048;
        *(_QWORD *)v77 = a2;
        v25 = "%{public}s %{public}s%s<i%u> no object for hash node %p, not triggering output_available";
        goto LABEL_67;
      }
      if (!v66)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v18 = gconnectionLogObj;
        v19 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          goto LABEL_68;
        v40 = *(_QWORD *)(a1 + 32);
        v41 = (const char *)(v40 + 378);
        v42 = v40 == 0;
        if (!v40)
          v41 = "";
        v43 = *(_DWORD *)(v40 + 368);
        if (v42)
          v44 = "";
        else
          v44 = " ";
        *(_DWORD *)buf = 136447234;
        v69 = "nw_http2_deliver_pending_output_available_block_invoke";
        v70 = 2082;
        v71 = v41;
        v72 = 2080;
        v73 = v44;
        v74 = 1024;
        v75 = v43;
        v76 = 2048;
        *(_QWORD *)v77 = a2;
        v25 = "%{public}s %{public}s%s<i%u> no object for hash node %p, not triggering output_available, backtrace limit exceeded";
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v18 = gconnectionLogObj;
      v19 = type;
      v34 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (backtrace_string)
      {
        if (v34)
        {
          v35 = *(_QWORD *)(a1 + 32);
          v36 = (const char *)(v35 + 378);
          v37 = v35 == 0;
          if (!v35)
            v36 = "";
          v38 = *(_DWORD *)(v35 + 368);
          if (v37)
            v39 = "";
          else
            v39 = " ";
          *(_DWORD *)buf = 136447490;
          v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          v70 = 2082;
          v71 = v36;
          v72 = 2080;
          v73 = v39;
          v74 = 1024;
          v75 = v38;
          v76 = 2048;
          *(_QWORD *)v77 = a2;
          *(_WORD *)&v77[8] = 2082;
          *(_QWORD *)&v77[10] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s %{public}s%s<i%u> no object for hash node %p, not triggering output_available, dumping backtrace:%{public}s", buf, 0x3Au);
        }
        free(backtrace_string);
        goto LABEL_68;
      }
      if (v34)
      {
        v45 = *(_QWORD *)(a1 + 32);
        v46 = (const char *)(v45 + 378);
        v47 = v45 == 0;
        if (!v45)
          v46 = "";
        v48 = *(_DWORD *)(v45 + 368);
        if (v47)
          v49 = "";
        else
          v49 = " ";
        *(_DWORD *)buf = 136447234;
        v69 = "nw_http2_deliver_pending_output_available_block_invoke";
        v70 = 2082;
        v71 = v46;
        v72 = 2080;
        v73 = v49;
        v74 = 1024;
        v75 = v48;
        v76 = 2048;
        *(_QWORD *)v77 = a2;
        v25 = "%{public}s %{public}s%s<i%u> no object for hash node %p, not triggering output_available, no backtrace";
LABEL_67:
        _os_log_impl(&dword_182FBE000, v18, v19, v25, buf, 0x30u);
      }
    }
LABEL_68:
    if (!v17)
      return 1;
    v50 = (char *)v17;
LABEL_70:
    free(v50);
    return 1;
  }
  v5 = object;
  v6 = *(_QWORD *)nw_hash_node_get_extra(a2);
  if (v6)
  {
    v7 = *(unsigned __int16 *)(v6 + 188);
    v8 = v7 | (*(unsigned __int8 *)(v6 + 190) << 16);
    if ((v7 & 0x20) != 0)
    {
      *(_WORD *)(v6 + 188) = v7 & 0xFFDF;
      *(_BYTE *)(v6 + 190) = (v8 & 0xFFFFFFDF) >> 16;
      if ((v8 & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v58 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v60 = *(_DWORD *)(v6 + 176);
          v59 = *(_DWORD *)(v6 + 180);
          *(_DWORD *)buf = 136447746;
          v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          v70 = 2082;
          v71 = (const char *)(v6 + 191);
          v72 = 2080;
          v73 = " ";
          v74 = 1024;
          v75 = v59;
          v76 = 1024;
          *(_DWORD *)v77 = v60;
          *(_WORD *)&v77[4] = 2048;
          *(_QWORD *)&v77[6] = v5;
          *(_WORD *)&v77[14] = 1024;
          *(_DWORD *)&v77[16] = v60;
          _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> delivering output_available to protocol %p for stream %d", buf, 0x3Cu);
        }
      }
      v9 = *(_QWORD *)(v5 + 24);
      if (v9)
      {
        v10 = *(void (**)(uint64_t, _QWORD))(v9 + 72);
        if (v10)
        {
          v10(v5, *(_QWORD *)(a1 + 32));
          return 1;
        }
      }
      __nwlog_obj();
      v52 = *(const char **)(v5 + 16);
      if (!v52)
        v52 = "invalid";
      *(_DWORD *)buf = 136446466;
      v69 = "nw_http2_deliver_pending_output_available_block_invoke";
      v70 = 2082;
      v71 = v52;
      v53 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v66 = 0;
      if (!__nwlog_fault(v53, &type, &v66))
        goto LABEL_100;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v54 = __nwlog_obj();
        v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          v56 = *(const char **)(v5 + 16);
          if (!v56)
            v56 = "invalid";
          *(_DWORD *)buf = 136446466;
          v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          v70 = 2082;
          v71 = v56;
          v57 = "%{public}s protocol %{public}s has invalid output_available callback";
LABEL_99:
          _os_log_impl(&dword_182FBE000, v54, v55, v57, buf, 0x16u);
        }
      }
      else if (v66)
      {
        v61 = (char *)__nw_create_backtrace_string();
        v54 = __nwlog_obj();
        v55 = type;
        v62 = os_log_type_enabled(v54, type);
        if (v61)
        {
          if (v62)
          {
            v63 = *(const char **)(v5 + 16);
            if (!v63)
              v63 = "invalid";
            *(_DWORD *)buf = 136446722;
            v69 = "nw_http2_deliver_pending_output_available_block_invoke";
            v70 = 2082;
            v71 = v63;
            v72 = 2082;
            v73 = v61;
            _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v61);
          goto LABEL_100;
        }
        if (v62)
        {
          v65 = *(const char **)(v5 + 16);
          if (!v65)
            v65 = "invalid";
          *(_DWORD *)buf = 136446466;
          v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          v70 = 2082;
          v71 = v65;
          v57 = "%{public}s protocol %{public}s has invalid output_available callback, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        v54 = __nwlog_obj();
        v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          v64 = *(const char **)(v5 + 16);
          if (!v64)
            v64 = "invalid";
          *(_DWORD *)buf = 136446466;
          v69 = "nw_http2_deliver_pending_output_available_block_invoke";
          v70 = 2082;
          v71 = v64;
          v57 = "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
LABEL_100:
      if (!v53)
        return 1;
      v50 = (char *)v53;
      goto LABEL_70;
    }
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 32);
    if (!v26 || (*(__int16 *)(v26 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v27 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        v28 = *(_QWORD *)(a1 + 32);
        v29 = (const char *)(v28 + 378);
        v30 = "";
        v31 = v28 == 0;
        v32 = *(_DWORD *)(v28 + 368);
        if (v31)
          v29 = "";
        v69 = "nw_http2_deliver_pending_output_available_block_invoke";
        v70 = 2082;
        *(_DWORD *)buf = 136446978;
        if (!v31)
          v30 = " ";
        v71 = v29;
        v72 = 2080;
        v73 = v30;
        v74 = 1024;
        v75 = v32;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> input protocol has no stream, not triggering output_available", buf, 0x26u);
      }
    }
  }
  return 1;
}

uint64_t ___ZL28nw_http2_drain_output_framesP17nw_protocol_http2_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  BOOL v12;
  int v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  BOOL v22;
  int v23;
  int v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v5 = object;
    v6 = *(_QWORD *)nw_hash_node_get_extra(a2);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 188) & 2) != 0)
      {
        while ((nw_http2_drain_next_frame_for_stream(*(_QWORD *)(a1 + 32), v5, v6, 1) & 1) != 0)
          ;
      }
      return 1;
    }
    v17 = *(_QWORD *)(a1 + 32);
    if (!v17 || (*(__int16 *)(v17 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v18 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        v19 = *(_QWORD *)(a1 + 32);
        v20 = (const char *)(v19 + 378);
        v21 = "";
        v22 = v19 == 0;
        v23 = *(_DWORD *)(v19 + 368);
        v26 = "nw_http2_drain_output_frames_block_invoke";
        if (v22)
          v20 = "";
        v27 = 2082;
        v25 = 136447234;
        if (!v22)
          v21 = " ";
        v28 = v20;
        v29 = 2080;
        v30 = v21;
        v31 = 1024;
        v32 = v23;
        v33 = 2048;
        v34 = v5;
        v14 = "%{public}s %{public}s%s<i%u> stream not found for input protocol %p, not draining output frames";
        v15 = v18;
        v16 = OS_LOG_TYPE_INFO;
LABEL_26:
        _os_log_impl(&dword_182FBE000, v15, v16, v14, (uint8_t *)&v25, 0x30u);
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7 || (*(__int16 *)(v7 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_QWORD *)(a1 + 32);
        v10 = (const char *)(v9 + 378);
        v11 = "";
        v12 = v9 == 0;
        v13 = *(_DWORD *)(v9 + 368);
        v26 = "nw_http2_drain_output_frames_block_invoke";
        if (v12)
          v10 = "";
        v27 = 2082;
        v25 = 136447234;
        if (!v12)
          v11 = " ";
        v28 = v10;
        v29 = 2080;
        v30 = v11;
        v31 = 1024;
        v32 = v13;
        v33 = 2048;
        v34 = a2;
        v14 = "%{public}s %{public}s%s<i%u> input protocol in node %p in protocol table is NULL, skipping";
        v15 = v8;
        v16 = OS_LOG_TYPE_ERROR;
        goto LABEL_26;
      }
    }
  }
  return 1;
}

uint64_t nw_http2_drain_next_frame_for_stream(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  unsigned __int16 *v24;
  unsigned int v25;
  int v26;
  NSObject *v27;
  int v28;
  int v29;
  const char *v30;
  int v31;
  int v32;
  NSObject *v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  BOOL v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  const char *v57;
  NSObject *v58;
  int v59;
  int v60;
  NSObject *v61;
  int v62;
  int v63;
  NSObject *v64;
  int v65;
  int v66;
  int v67;
  char *backtrace_string;
  _BOOL4 v69;
  const char *v70;
  _BOOL4 v71;
  uint64_t v72;
  int v73;
  int v74;
  const char *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint32_t v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  const char *v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  const char *v86;
  _BOOL4 v87;
  NSObject *v88;
  int v89;
  int v90;
  char *v91;
  _BOOL4 v92;
  const char *v93;
  _BOOL4 v94;
  _BOOL4 v95;
  char *v96;
  _BOOL4 v97;
  NSObject *v98;
  int v99;
  int v100;
  int v101;
  NSObject *v102;
  int v103;
  int v104;
  int v105;
  NSObject *v106;
  int v107;
  int v108;
  int v109;
  int v110;
  NSObject *v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  int v122;
  NSObject *v124;
  int v125;
  _BYTE *v126;
  int v127;
  int v128;
  int v129;
  NSObject *v130;
  int v131;
  int v132;
  NSObject *v133;
  int v134;
  int v135;
  NSObject *v136;
  int v137;
  int v138;
  NSObject *v139;
  int v140;
  int v141;
  NSObject *v142;
  int v143;
  int v144;
  NSObject *log;
  uint64_t v146;
  int v147;
  char v148;
  os_log_type_t v149[8];
  uint64_t (*v150)(uint64_t, int, uint64_t, unsigned int, _DWORD *, uint64_t *, uint64_t);
  os_log_type_t type;
  uint8_t buf[4];
  const char *v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  _BYTE v157[14];
  __int16 v158;
  int v159;
  __int16 v160;
  _BYTE v161[10];
  int v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  v8 = &unk_1ECD84000;
  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v58 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v60 = *(_DWORD *)(a3 + 176);
      v59 = *(_DWORD *)(a3 + 180);
      *(_DWORD *)buf = 136447234;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v154 = 2082;
      v155 = a3 + 191;
      v156 = 2080;
      *(_QWORD *)v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v59;
      v158 = 1024;
      v159 = v60;
      _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called", buf, 0x2Cu);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v153 = "nw_http2_drain_next_frame_for_stream";
    v54 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v54, v149, &type))
      goto LABEL_201;
    if (v149[0] == OS_LOG_TYPE_FAULT)
    {
      v55 = __nwlog_obj();
      v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0]))
        goto LABEL_201;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v57 = "%{public}s called with null http2";
      goto LABEL_200;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v55 = __nwlog_obj();
      v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0]))
        goto LABEL_201;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v57 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v55 = __nwlog_obj();
    v56 = v149[0];
    v69 = os_log_type_enabled(v55, v149[0]);
    if (!backtrace_string)
    {
      if (!v69)
        goto LABEL_201;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v57 = "%{public}s called with null http2, no backtrace";
      goto LABEL_200;
    }
    if (!v69)
      goto LABEL_152;
    *(_DWORD *)buf = 136446466;
    v153 = "nw_http2_drain_next_frame_for_stream";
    v154 = 2082;
    v155 = (uint64_t)backtrace_string;
    v70 = "%{public}s called with null http2, dumping backtrace:%{public}s";
LABEL_151:
    _os_log_impl(&dword_182FBE000, v55, v56, v70, buf, 0x16u);
    goto LABEL_152;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v153 = "nw_http2_drain_next_frame_for_stream";
    v54 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v54, v149, &type))
      goto LABEL_201;
    if (v149[0] == OS_LOG_TYPE_FAULT)
    {
      v55 = __nwlog_obj();
      v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0]))
        goto LABEL_201;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v57 = "%{public}s called with null input_handler";
      goto LABEL_200;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v55 = __nwlog_obj();
      v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0]))
        goto LABEL_201;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v57 = "%{public}s called with null input_handler, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v55 = __nwlog_obj();
    v56 = v149[0];
    v71 = os_log_type_enabled(v55, v149[0]);
    if (!backtrace_string)
    {
      if (!v71)
        goto LABEL_201;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v57 = "%{public}s called with null input_handler, no backtrace";
      goto LABEL_200;
    }
    if (!v71)
      goto LABEL_152;
    *(_DWORD *)buf = 136446466;
    v153 = "nw_http2_drain_next_frame_for_stream";
    v154 = 2082;
    v155 = (uint64_t)backtrace_string;
    v70 = "%{public}s called with null input_handler, dumping backtrace:%{public}s";
    goto LABEL_151;
  }
  v9 = (uint64_t *)(a3 + 16);
  v10 = (*(unsigned __int8 *)(a3 + 190) >> 3) & 1;
  if (!gLogDatapath)
    LOBYTE(v10) = 1;
  if (!*(_QWORD *)(a3 + 16))
  {
    if ((v10 & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v72 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v74 = *(_DWORD *)(a3 + 176);
        v73 = *(_DWORD *)(a3 + 180);
        *(_DWORD *)buf = 136447490;
        v153 = "nw_http2_drain_next_frame_for_stream";
        v154 = 2082;
        v155 = a3 + 191;
        v156 = 2080;
        *(_QWORD *)v157 = " ";
        *(_WORD *)&v157[8] = 1024;
        *(_DWORD *)&v157[10] = v73;
        v158 = 1024;
        v159 = v74;
        v160 = 1024;
        *(_DWORD *)v161 = v74;
        v75 = "%{public}s %{public}s%s<i%u:s%d> no next frame to drain for stream %d";
        v76 = v72;
        v77 = OS_LOG_TYPE_DEBUG;
        v78 = 50;
LABEL_246:
        _os_log_impl(&dword_182FBE000, v76, v77, v75, buf, v78);
        return 0;
      }
    }
    return 0;
  }
  if ((v10 & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v61 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v63 = *(_DWORD *)(a3 + 176);
      v62 = *(_DWORD *)(a3 + 180);
      *(_DWORD *)buf = 136447490;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v154 = 2082;
      v155 = a3 + 191;
      v156 = 2080;
      *(_QWORD *)v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v62;
      v158 = 1024;
      v159 = v63;
      v160 = 1024;
      *(_DWORD *)v161 = v63;
      _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> draining next frame for stream %d", buf, 0x32u);
    }
  }
  v11 = *v9;
  if (!*v9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v153 = "nw_http2_drain_next_frame_for_stream";
    v54 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v54, v149, &type))
      goto LABEL_201;
    if (v149[0] == OS_LOG_TYPE_FAULT)
    {
      v55 = __nwlog_obj();
      v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0]))
        goto LABEL_201;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v57 = "%{public}s called with null frame";
      goto LABEL_200;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v55 = __nwlog_obj();
      v56 = v149[0];
      if (!os_log_type_enabled(v55, v149[0]))
        goto LABEL_201;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v57 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v55 = __nwlog_obj();
    v56 = v149[0];
    v87 = os_log_type_enabled(v55, v149[0]);
    if (backtrace_string)
    {
      if (v87)
      {
        *(_DWORD *)buf = 136446466;
        v153 = "nw_http2_drain_next_frame_for_stream";
        v154 = 2082;
        v155 = (uint64_t)backtrace_string;
        v70 = "%{public}s called with null frame, dumping backtrace:%{public}s";
        goto LABEL_151;
      }
LABEL_152:
      free(backtrace_string);
      goto LABEL_201;
    }
    if (!v87)
      goto LABEL_201;
    *(_DWORD *)buf = 136446210;
    v153 = "nw_http2_drain_next_frame_for_stream";
    v57 = "%{public}s called with null frame, no backtrace";
LABEL_200:
    _os_log_impl(&dword_182FBE000, v55, v56, v57, buf, 0xCu);
LABEL_201:
    if (v54)
      free(v54);
    return 0;
  }
  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v64 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v65 = *(_DWORD *)(a3 + 176);
      v66 = *(_DWORD *)(a3 + 180);
      v67 = *(_DWORD *)(v11 + 52);
      if (v67)
        v67 -= *(_DWORD *)(v11 + 56) + *(_DWORD *)(v11 + 60);
      *(_DWORD *)buf = 136447490;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v154 = 2082;
      v155 = a3 + 191;
      v156 = 2080;
      *(_QWORD *)v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v66;
      v158 = 1024;
      v159 = v65;
      v160 = 1024;
      *(_DWORD *)v161 = v67;
      _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> draining output frame of %u bytes", buf, 0x32u);
    }
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD **)(v11 + 24);
  v14 = (_QWORD *)(v11 + 16);
  if (v12)
  {
    *(_QWORD *)(v12 + 24) = v13;
    v13 = *(_QWORD **)(v11 + 24);
  }
  else
  {
    *(_QWORD *)(a3 + 24) = v13;
  }
  *v13 = v12;
  *v14 = 0;
  *(_QWORD *)(v11 + 24) = 0;
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_25_81469);
  if (_nw_signposts_enabled && kdebug_is_enabled())
    kdebug_trace();
  v16 = *(_DWORD *)(v11 + 52);
  v146 = a2;
  if (!v16 || v16 == *(_DWORD *)(v11 + 56) + *(_DWORD *)(v11 + 60))
  {
    v17 = *(_QWORD *)(v11 + 64);
    if (!v17 || (*(_BYTE *)(v17 + 66) & 0x40) == 0)
    {
      if ((*(__int16 *)(a1 + 376) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v88 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v89 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136446978;
          v153 = "nw_http2_submit_data";
          v154 = 2082;
          v155 = a1 + 378;
          v156 = 2080;
          *(_QWORD *)v157 = " ";
          *(_WORD *)&v157[8] = 1024;
          *(_DWORD *)&v157[10] = v89;
          _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> skipping empty frame body", buf, 0x26u);
        }
      }
      nw_frame_cache_return_frame(a1 + 200, v11);
      v15 = 1;
      goto LABEL_248;
    }
  }
  if ((*(_WORD *)(v11 + 204) & 4) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v153 = "nw_http2_submit_data";
    v79 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v79, v149, &type))
      goto LABEL_226;
    if (v149[0] == OS_LOG_TYPE_FAULT)
    {
      v80 = __nwlog_obj();
      v81 = v149[0];
      if (!os_log_type_enabled(v80, v149[0]))
        goto LABEL_226;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_submit_data";
      v82 = "%{public}s called with null output_context";
LABEL_225:
      _os_log_impl(&dword_182FBE000, v80, v81, v82, buf, 0xCu);
      goto LABEL_226;
    }
    v90 = a4;
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v80 = __nwlog_obj();
      v81 = v149[0];
      if (os_log_type_enabled(v80, v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        v153 = "nw_http2_submit_data";
        v82 = "%{public}s called with null output_context, backtrace limit exceeded";
        goto LABEL_225;
      }
      goto LABEL_226;
    }
    v91 = (char *)__nw_create_backtrace_string();
    v80 = __nwlog_obj();
    v81 = v149[0];
    v92 = os_log_type_enabled(v80, v149[0]);
    if (!v91)
    {
      a4 = v90;
      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        v153 = "nw_http2_submit_data";
        v82 = "%{public}s called with null output_context, no backtrace";
        goto LABEL_225;
      }
      goto LABEL_226;
    }
    if (!v92)
      goto LABEL_174;
    *(_DWORD *)buf = 136446466;
    v153 = "nw_http2_submit_data";
    v154 = 2082;
    v155 = (uint64_t)v91;
    v93 = "%{public}s called with null output_context, dumping backtrace:%{public}s";
LABEL_173:
    _os_log_impl(&dword_182FBE000, v80, v81, v93, buf, 0x16u);
    goto LABEL_174;
  }
  v18 = *(_QWORD *)(v11 + 216);
  if (!v18)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v153 = "nw_http2_submit_data";
    v79 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v79, v149, &type))
      goto LABEL_226;
    if (v149[0] == OS_LOG_TYPE_FAULT)
    {
      v80 = __nwlog_obj();
      v81 = v149[0];
      if (!os_log_type_enabled(v80, v149[0]))
        goto LABEL_226;
      *(_DWORD *)buf = 136446210;
      v153 = "nw_http2_submit_data";
      v82 = "%{public}s called with null input_protocol";
      goto LABEL_225;
    }
    v90 = a4;
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v80 = __nwlog_obj();
      v81 = v149[0];
      if (os_log_type_enabled(v80, v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        v153 = "nw_http2_submit_data";
        v82 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_225;
      }
      goto LABEL_226;
    }
    v91 = (char *)__nw_create_backtrace_string();
    v80 = __nwlog_obj();
    v81 = v149[0];
    v94 = os_log_type_enabled(v80, v149[0]);
    if (!v91)
    {
      a4 = v90;
      if (v94)
      {
        *(_DWORD *)buf = 136446210;
        v153 = "nw_http2_submit_data";
        v82 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_225;
      }
      goto LABEL_226;
    }
    if (!v94)
      goto LABEL_174;
    *(_DWORD *)buf = 136446466;
    v153 = "nw_http2_submit_data";
    v154 = 2082;
    v155 = (uint64_t)v91;
    v93 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_173;
  }
  v19 = *(_QWORD *)(v18 + 56);
  if (!v19)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v153 = "nw_http2_submit_data";
    v79 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v79, v149, &type))
      goto LABEL_226;
    if (v149[0] == OS_LOG_TYPE_FAULT)
    {
      v80 = __nwlog_obj();
      v81 = v149[0];
      if (os_log_type_enabled(v80, v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        v153 = "nw_http2_submit_data";
        v82 = "%{public}s called with null node";
        goto LABEL_225;
      }
LABEL_226:
      if (v79)
        free(v79);
      v8 = (_BYTE *)&unk_1ECD84000;
LABEL_235:
      if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v111 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v113 = *(_DWORD *)(a3 + 176);
          v112 = *(_DWORD *)(a3 + 180);
          *(_DWORD *)buf = 136447490;
          v153 = "nw_http2_drain_next_frame_for_stream";
          v154 = 2082;
          v155 = a3 + 191;
          v156 = 2080;
          *(_QWORD *)v157 = " ";
          *(_WORD *)&v157[8] = 1024;
          *(_DWORD *)&v157[10] = v112;
          v158 = 1024;
          v159 = v113;
          v160 = 2048;
          *(_QWORD *)v161 = v11;
          _os_log_impl(&dword_182FBE000, v111, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> couldn't send frame %p, unknown error, dropping", buf, 0x36u);
        }
      }
      nw_frame_cache_return_frame(a1 + 200, v11);
      if ((*(_WORD *)(a1 + 376) & 4) != 0)
      {
        v15 = 0;
        goto LABEL_248;
      }
      if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v114 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          v116 = *(_DWORD *)(a3 + 176);
          v115 = *(_DWORD *)(a3 + 180);
          *(_DWORD *)buf = 136447234;
          v153 = "nw_http2_drain_next_frame_for_stream";
          v154 = 2082;
          v155 = a3 + 191;
          v156 = 2080;
          *(_QWORD *)v157 = " ";
          *(_WORD *)&v157[8] = 1024;
          *(_DWORD *)&v157[10] = v115;
          v158 = 1024;
          v159 = v116;
          v75 = "%{public}s %{public}s%s<i%u:s%d> tunnel is no longer connected";
          v76 = v114;
          v77 = OS_LOG_TYPE_ERROR;
          v78 = 44;
          goto LABEL_246;
        }
      }
      return 0;
    }
    v90 = a4;
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v80 = __nwlog_obj();
      v81 = v149[0];
      if (os_log_type_enabled(v80, v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        v153 = "nw_http2_submit_data";
        v82 = "%{public}s called with null node, backtrace limit exceeded";
        goto LABEL_225;
      }
      goto LABEL_226;
    }
    v91 = (char *)__nw_create_backtrace_string();
    v80 = __nwlog_obj();
    v81 = v149[0];
    v95 = os_log_type_enabled(v80, v149[0]);
    if (!v91)
    {
      a4 = v90;
      if (v95)
      {
        *(_DWORD *)buf = 136446210;
        v153 = "nw_http2_submit_data";
        v82 = "%{public}s called with null node, no backtrace";
        goto LABEL_225;
      }
      goto LABEL_226;
    }
    if (v95)
    {
      *(_DWORD *)buf = 136446466;
      v153 = "nw_http2_submit_data";
      v154 = 2082;
      v155 = (uint64_t)v91;
      v93 = "%{public}s called with null node, dumping backtrace:%{public}s";
      goto LABEL_173;
    }
LABEL_174:
    free(v91);
    a4 = v90;
    goto LABEL_226;
  }
  v147 = a4;
  v20 = *(_QWORD *)(v19 + 32);
  if (!v20)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v153 = "nw_http2_submit_data";
    v83 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    a4 = v147;
    if (__nwlog_fault(v83, v149, &type))
    {
      if (v149[0] == OS_LOG_TYPE_FAULT)
      {
        v84 = __nwlog_obj();
        v85 = v149[0];
        if (os_log_type_enabled(v84, v149[0]))
        {
          *(_DWORD *)buf = 136446210;
          v153 = "nw_http2_submit_data";
          v86 = "%{public}s called with null stream";
LABEL_231:
          _os_log_impl(&dword_182FBE000, v84, v85, v86, buf, 0xCu);
        }
      }
      else if (type)
      {
        v96 = (char *)__nw_create_backtrace_string();
        v84 = __nwlog_obj();
        v85 = v149[0];
        v97 = os_log_type_enabled(v84, v149[0]);
        if (v96)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446466;
            v153 = "nw_http2_submit_data";
            v154 = 2082;
            v155 = (uint64_t)v96;
            _os_log_impl(&dword_182FBE000, v84, v85, "%{public}s called with null stream, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v96);
          a4 = v147;
          goto LABEL_232;
        }
        a4 = v147;
        if (v97)
        {
          *(_DWORD *)buf = 136446210;
          v153 = "nw_http2_submit_data";
          v86 = "%{public}s called with null stream, no backtrace";
          goto LABEL_231;
        }
      }
      else
      {
        v84 = __nwlog_obj();
        v85 = v149[0];
        a4 = v147;
        if (os_log_type_enabled(v84, v149[0]))
        {
          *(_DWORD *)buf = 136446210;
          v153 = "nw_http2_submit_data";
          v86 = "%{public}s called with null stream, backtrace limit exceeded";
          goto LABEL_231;
        }
      }
    }
LABEL_232:
    if (v83)
      free(v83);
    v8 = &unk_1ECD84000;
    goto LABEL_235;
  }
  v21 = *(_DWORD *)(v20 + 176);
  *(_QWORD *)v149 = v11;
  v150 = data_source_read_callback;
  v22 = *(_QWORD *)(v11 + 64);
  if (v22)
  {
    v23 = *(_BYTE *)(v22 + 66);
    v24 = (unsigned __int16 *)(v20 + 188);
    v25 = *(unsigned __int16 *)(v20 + 188) | (*(unsigned __int8 *)(v20 + 190) << 16);
    if ((v23 & 0x40) != 0)
    {
      v26 = (v25 >> 19) & 1;
      if (!gLogDatapath)
        LOBYTE(v26) = 1;
      if ((*(_WORD *)(v20 + 188) & 0x200) == 0)
      {
        if ((v26 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v106 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v108 = *(_DWORD *)(v20 + 176);
            v107 = *(_DWORD *)(v20 + 180);
            *(_DWORD *)buf = 136447234;
            v153 = "nw_http2_submit_data";
            v154 = 2082;
            v155 = v20 + 191;
            v156 = 2080;
            *(_QWORD *)v157 = " ";
            *(_WORD *)&v157[8] = 1024;
            *(_DWORD *)&v157[10] = v107;
            v158 = 1024;
            v159 = v108;
            _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> frame is complete, marking end stream", buf, 0x2Cu);
          }
        }
        goto LABEL_49;
      }
      if ((v26 & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v27 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v110 = *(_DWORD *)(v20 + 176);
          v109 = *(_DWORD *)(v20 + 180);
          *(_DWORD *)buf = 136447234;
          v153 = "nw_http2_submit_data";
          v154 = 2082;
          v155 = v20 + 191;
          v156 = 2080;
          *(_QWORD *)v157 = " ";
          *(_WORD *)&v157[8] = 1024;
          *(_DWORD *)&v157[10] = v109;
          v158 = 1024;
          v159 = v110;
          v30 = "%{public}s %{public}s%s<i%u:s%d> stream is in CONNECT mode, not marking end stream";
          goto LABEL_47;
        }
      }
      goto LABEL_49;
    }
  }
  else
  {
    v24 = (unsigned __int16 *)(v20 + 188);
    v25 = *(unsigned __int16 *)(v20 + 188) | (*(unsigned __int8 *)(v20 + 190) << 16);
  }
  if ((v25 & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v27 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v29 = *(_DWORD *)(v20 + 176);
      v28 = *(_DWORD *)(v20 + 180);
      *(_DWORD *)buf = 136447234;
      v153 = "nw_http2_submit_data";
      v154 = 2082;
      v155 = v20 + 191;
      v156 = 2080;
      *(_QWORD *)v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v28;
      v158 = 1024;
      v159 = v29;
      v30 = "%{public}s %{public}s%s<i%u:s%d> frame is not complete, not marking end stream";
LABEL_47:
      _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, v30, buf, 0x2Cu);
    }
  }
LABEL_49:
  v31 = nghttp2_submit_data();
  if (!v31)
  {
    if (((*v24 | (*((unsigned __int8 *)v24 + 2) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v102 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v103 = *(_DWORD *)(v20 + 176);
        v104 = *(_DWORD *)(v20 + 180);
        v105 = *(_DWORD *)(v11 + 52);
        if (v105)
          v105 -= *(_DWORD *)(v11 + 56) + *(_DWORD *)(v11 + 60);
        *(_DWORD *)buf = 136447746;
        v153 = "nw_http2_submit_data";
        v154 = 2082;
        v155 = v20 + 191;
        v156 = 2080;
        *(_QWORD *)v157 = " ";
        *(_WORD *)&v157[8] = 1024;
        *(_DWORD *)&v157[10] = v104;
        v158 = 1024;
        v159 = v103;
        v160 = 1024;
        *(_DWORD *)v161 = v105;
        *(_WORD *)&v161[4] = 1024;
        *(_DWORD *)&v161[6] = v21;
        _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> submitted %u bytes on stream %d", buf, 0x38u);
        v8 = &unk_1ECD84000;
      }
    }
    v15 = 1;
    goto LABEL_90;
  }
  v32 = v31;
  if (v31 == -510)
  {
    v8 = (_BYTE *)&unk_1ECD84000;
    if (((*v24 | (*((unsigned __int8 *)v24 + 2) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v33 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        v35 = *(_DWORD *)(v20 + 176);
        v34 = *(_DWORD *)(v20 + 180);
        *(_DWORD *)buf = 136447490;
        v153 = "nw_http2_submit_data";
        v154 = 2082;
        v155 = v20 + 191;
        v156 = 2080;
        *(_QWORD *)v157 = " ";
        *(_WORD *)&v157[8] = 1024;
        *(_DWORD *)&v157[10] = v34;
        v158 = 1024;
        v159 = v35;
        v160 = 1024;
        *(_DWORD *)v161 = v21;
        _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%d> stream %d is closed, cannot send frames", buf, 0x32u);
      }
    }
    a4 = v147;
    goto LABEL_235;
  }
  if (v31 == -529)
  {
    v8 = &unk_1ECD84000;
    if (((*v24 | (*((unsigned __int8 *)v24 + 2) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v98 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v99 = *(_DWORD *)(v20 + 176);
        v100 = *(_DWORD *)(v20 + 180);
        v101 = *(_DWORD *)(v11 + 52);
        if (v101)
          v101 -= *(_DWORD *)(v11 + 56) + *(_DWORD *)(v11 + 60);
        *(_DWORD *)buf = 136447746;
        v153 = "nw_http2_submit_data";
        v154 = 2082;
        v155 = v20 + 191;
        v156 = 2080;
        *(_QWORD *)v157 = " ";
        *(_WORD *)&v157[8] = 1024;
        *(_DWORD *)&v157[10] = v100;
        v158 = 1024;
        v159 = v99;
        v160 = 1024;
        *(_DWORD *)v161 = v21;
        *(_WORD *)&v161[4] = 1024;
        *(_DWORD *)&v161[6] = v101;
        _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> already have data outgoing on stream %d, cannot send %u bytes", buf, 0x38u);
        v8 = &unk_1ECD84000;
      }
    }
    a4 = v147;
    goto LABEL_81;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v36 = nghttp2_strerror();
  *(_DWORD *)buf = 136446722;
  v153 = "nw_http2_submit_data";
  v154 = 2082;
  v155 = v36;
  v156 = 1024;
  *(_DWORD *)v157 = v21;
  v37 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v148 = 0;
  if (__nwlog_fault(v37, &type, &v148))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = gLogObj;
      v39 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_77;
      v40 = nghttp2_strerror();
      *(_DWORD *)buf = 136446722;
      v153 = "nw_http2_submit_data";
      v154 = 2082;
      v155 = v40;
      v156 = 1024;
      *(_DWORD *)v157 = v21;
      v41 = "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed";
LABEL_75:
      v46 = v38;
LABEL_76:
      _os_log_impl(&dword_182FBE000, v46, v39, v41, buf, 0x1Cu);
      goto LABEL_77;
    }
    if (!v148)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_77;
      v45 = nghttp2_strerror();
      *(_DWORD *)buf = 136446722;
      v153 = "nw_http2_submit_data";
      v154 = 2082;
      v155 = v45;
      v156 = 1024;
      *(_DWORD *)v157 = v21;
      v41 = "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed, backtrace limit exceeded";
      goto LABEL_75;
    }
    v42 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v39 = type;
    log = gLogObj;
    v43 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v42)
    {
      if (v43)
      {
        v44 = nghttp2_strerror();
        *(_DWORD *)buf = 136446978;
        v153 = "nw_http2_submit_data";
        v154 = 2082;
        v155 = v44;
        v156 = 1024;
        *(_DWORD *)v157 = v21;
        *(_WORD *)&v157[4] = 2082;
        *(_QWORD *)&v157[6] = v42;
        _os_log_impl(&dword_182FBE000, log, v39, "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed, dumping backtrace:%{public}s", buf, 0x26u);
      }
      free(v42);
    }
    else if (v43)
    {
      v53 = nghttp2_strerror();
      *(_DWORD *)buf = 136446722;
      v153 = "nw_http2_submit_data";
      v154 = 2082;
      v155 = v53;
      v156 = 1024;
      *(_DWORD *)v157 = v21;
      v41 = "%{public}s nghttp2_submit_data: %{public}s, stream id %d failed, no backtrace";
      v46 = log;
      goto LABEL_76;
    }
  }
LABEL_77:
  if (v37)
    free(v37);
  v47 = v32 == -529;
  v8 = &unk_1ECD84000;
  a4 = v147;
  if (!v47)
    goto LABEL_235;
LABEL_81:
  v15 = 0;
  v48 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(v11 + 16) = v48;
  if (!v48)
    v48 = a3;
  *(_QWORD *)(v48 + 24) = v14;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(v11 + 24) = v9;
  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v49 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v51 = *(_DWORD *)(a3 + 176);
      v50 = *(_DWORD *)(a3 + 180);
      *(_DWORD *)buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)(a3 + 16), 0, buf);
      v52 = *(_DWORD *)buf;
      *(_DWORD *)buf = 136447746;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v154 = 2082;
      v155 = a3 + 191;
      v156 = 2080;
      *(_QWORD *)v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v50;
      v158 = 1024;
      v159 = v51;
      v160 = 2048;
      *(_QWORD *)v161 = v11;
      *(_WORD *)&v161[8] = 1024;
      v162 = v52;
      _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> couldn't send frame, prepending frame %p to waiting_output_frames, stream now has %u bytes pending", buf, 0x3Cu);
    }
    v15 = 0;
    v8 = &unk_1ECD84000;
LABEL_90:
    a4 = v147;
  }
LABEL_248:
  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0 && v8[1345])
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v124 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v125 = a4;
      v126 = v8;
      v128 = *(_DWORD *)(a3 + 176);
      v127 = *(_DWORD *)(a3 + 180);
      *(_DWORD *)buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)(a3 + 16), 0, buf);
      v129 = *(_DWORD *)buf;
      *(_DWORD *)buf = 136447490;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v154 = 2082;
      v155 = a3 + 191;
      v156 = 2080;
      *(_QWORD *)v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v127;
      v158 = 1024;
      v159 = v128;
      v8 = v126;
      a4 = v125;
      v160 = 1024;
      *(_DWORD *)v161 = v129;
      _os_log_impl(&dword_182FBE000, v124, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> stream now has %u bytes pending", buf, 0x32u);
    }
  }
  if (a4)
    nw_http2_session_send(a1);
  v117 = *v9;
  if ((_DWORD)v15)
  {
    v118 = *(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16);
    if (v117)
    {
      if ((v118 & 0x80000) != 0)
      {
LABEL_265:
        if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0 && v8[1345])
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v133 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v135 = *(_DWORD *)(a3 + 176);
            v134 = *(_DWORD *)(a3 + 180);
            *(_DWORD *)buf = 136447746;
            v153 = "nw_http2_set_stream_output_available_pending";
            v154 = 2082;
            v155 = a3 + 191;
            v156 = 2080;
            *(_QWORD *)v157 = " ";
            *(_WORD *)&v157[8] = 1024;
            *(_DWORD *)&v157[10] = v134;
            v158 = 1024;
            v159 = v135;
            v160 = 1024;
            *(_DWORD *)v161 = v135;
            *(_WORD *)&v161[4] = 1024;
            *(_DWORD *)&v161[6] = 0;
            _os_log_impl(&dword_182FBE000, v133, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called for stream %d, needs output available: %{BOOL}d", buf, 0x38u);
          }
        }
        v121 = *(unsigned __int16 *)(a3 + 188);
        v120 = a3 + 188;
        v122 = *(unsigned __int8 *)(v120 + 2);
        *(_WORD *)v120 = v121 & 0xFFDF;
        *(_BYTE *)(v120 + 2) = (v121 & 0xFFFFFFDF | (v122 << 16)) >> 16;
        return v15;
      }
LABEL_264:
      if (v8[1345])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v130 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v132 = *(_DWORD *)(a3 + 176);
          v131 = *(_DWORD *)(a3 + 180);
          *(_DWORD *)buf = 136447746;
          v153 = "nw_http2_drain_next_frame_for_stream";
          v154 = 2082;
          v155 = a3 + 191;
          v156 = 2080;
          *(_QWORD *)v157 = " ";
          *(_WORD *)&v157[8] = 1024;
          *(_DWORD *)&v157[10] = v131;
          v158 = 1024;
          v159 = v132;
          v160 = 2048;
          *(_QWORD *)v161 = v146;
          *(_WORD *)&v161[8] = 1024;
          v162 = v132;
          _os_log_impl(&dword_182FBE000, v130, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> clearing output available from protocol %p for stream %d", buf, 0x3Cu);
        }
      }
      goto LABEL_265;
    }
    if ((*(_WORD *)(a3 + 188) & 0x10) == 0)
    {
      if (((*(unsigned __int8 *)(a3 + 190) >> 3) & 1) != 0)
        goto LABEL_270;
LABEL_269:
      if (v8[1345])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v136 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v138 = *(_DWORD *)(a3 + 176);
          v137 = *(_DWORD *)(a3 + 180);
          *(_DWORD *)buf = 136447746;
          v153 = "nw_http2_drain_next_frame_for_stream";
          v154 = 2082;
          v155 = a3 + 191;
          v156 = 2080;
          *(_QWORD *)v157 = " ";
          *(_WORD *)&v157[8] = 1024;
          *(_DWORD *)&v157[10] = v137;
          v158 = 1024;
          v159 = v138;
          v160 = 2048;
          *(_QWORD *)v161 = v146;
          *(_WORD *)&v161[8] = 1024;
          v162 = v138;
          _os_log_impl(&dword_182FBE000, v136, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> enqueueing output available to protocol %p for stream %d", buf, 0x3Cu);
        }
      }
      goto LABEL_270;
    }
    if ((v118 & 0x80000) == 0 && v8[1345])
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v142 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v144 = *(_DWORD *)(a3 + 176);
        v143 = *(_DWORD *)(a3 + 180);
        *(_DWORD *)buf = 136447234;
        v153 = "nw_http2_drain_next_frame_for_stream";
        v154 = 2082;
        v155 = a3 + 191;
        v156 = 2080;
        *(_QWORD *)v157 = " ";
        *(_WORD *)&v157[8] = 1024;
        *(_DWORD *)&v157[10] = v143;
        v158 = 1024;
        v159 = v144;
        _os_log_impl(&dword_182FBE000, v142, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> sending deferred end stream", buf, 0x2Cu);
      }
    }
    nw_http2_send_end_stream(a1, a3);
    v117 = *(_QWORD *)(a3 + 16);
  }
  v119 = *(unsigned __int8 *)(a3 + 190);
  if (v117)
  {
    if (((*(unsigned __int16 *)(a3 + 188) | (v119 << 16)) & 0x80000) != 0)
      goto LABEL_265;
    goto LABEL_264;
  }
  if (((v119 >> 3) & 1) == 0)
    goto LABEL_269;
LABEL_270:
  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0 && v8[1345])
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v139 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v141 = *(_DWORD *)(a3 + 176);
      v140 = *(_DWORD *)(a3 + 180);
      *(_DWORD *)buf = 136447746;
      v153 = "nw_http2_set_stream_output_available_pending";
      v154 = 2082;
      v155 = a3 + 191;
      v156 = 2080;
      *(_QWORD *)v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v140;
      v158 = 1024;
      v159 = v141;
      v160 = 1024;
      *(_DWORD *)v161 = v141;
      *(_WORD *)&v161[4] = 1024;
      *(_DWORD *)&v161[6] = 1;
      _os_log_impl(&dword_182FBE000, v139, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called for stream %d, needs output available: %{BOOL}d", buf, 0x38u);
    }
  }
  *(_WORD *)(a3 + 188) |= 0x20u;
  *(_WORD *)(a1 + 376) |= 0x800u;
  return v15;
}

uint64_t data_source_read_callback(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _DWORD *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t stream_from_id;
  int v14;
  id v15;
  void *v16;
  unint64_t capsule_type;
  NSObject *v18;
  NSObject *v19;
  size_t size;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  NSObject *metadata_for_capsule;
  int v29;
  unsigned int v30;
  NSObject *v31;
  void *v32;
  uint64_t result;
  void *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  int v42;
  NSObject *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  const char *v49;
  NSObject *v50;
  uint32_t v51;
  int v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  const char *v56;
  NSObject *v57;
  int v58;
  NSObject *v59;
  int v60;
  int v61;
  char *backtrace_string;
  _BOOL4 v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  NSObject *v68;
  os_log_type_t type[15];
  char v70;
  uint8_t buf[4];
  const char *v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v72 = "data_source_read_callback";
    v53 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v70 = 0;
    if (__nwlog_fault(v53, type, &v70))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v54 = __nwlog_obj();
        v55 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v72 = "data_source_read_callback";
          v56 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_119:
          _os_log_impl(&dword_182FBE000, v54, v55, v56, buf, 0xCu);
        }
      }
      else if (v70)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v54 = __nwlog_obj();
        v55 = type[0];
        v63 = os_log_type_enabled(v54, type[0]);
        if (backtrace_string)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446466;
            v72 = "data_source_read_callback";
            v73 = 2082;
            v74 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_120;
        }
        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          v72 = "data_source_read_callback";
          v56 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_119;
        }
      }
      else
      {
        v54 = __nwlog_obj();
        v55 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v72 = "data_source_read_callback";
          v56 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_119;
        }
      }
    }
LABEL_120:
    if (v53)
      free(v53);
    return -902;
  }
  if ((*(__int16 *)(a7 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v57 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v58 = *(_DWORD *)(a7 + 368);
      *(_DWORD *)buf = 136446978;
      v72 = "data_source_read_callback";
      v73 = 2082;
      v74 = a7 + 378;
      v75 = 2080;
      v76 = " ";
      v77 = 1024;
      v78 = v58;
      _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }
  v12 = *a6;
  if (!v12)
  {
    if ((*(__int16 *)(a7 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v25 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v26 = *(_DWORD *)(a7 + 368);
        *(_DWORD *)buf = 136446978;
        v72 = "data_source_read_callback";
        v73 = 2082;
        v74 = a7 + 378;
        v75 = 2080;
        v76 = " ";
        v77 = 1024;
        v78 = v26;
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> received unexpected NULL frame in data source", buf, 0x26u);
      }
    }
    v27 = 0;
    *a5 |= 1u;
    return v27;
  }
  *(_QWORD *)type = 0;
  stream_from_id = nw_http2_get_stream_from_id(a7, a2, type);
  v14 = 0;
  if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x20000) == 0)
    goto LABEL_64;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v15 = (id)nw_protocol_copy_http_definition_http_definition;
  v16 = nw_frame_copy_metadata_for_protocol(v12, (uint64_t)v15);
  if (v15)
    os_release(v15);
  if (!v16 || !nw_http_metadata_is_capsule(v16))
  {
    if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x40000) != 0)
    {
      metadata_for_capsule = nw_http_create_metadata_for_capsule(0, MEMORY[0x1E0C80D00]);
      nw_frame_set_metadata(v12, metadata_for_capsule, 0, 1);
      if (metadata_for_capsule)
        os_release(metadata_for_capsule);
      v29 = *(_DWORD *)(v12 + 52);
      if (v29 && (v30 = v29 - (*(_DWORD *)(v12 + 56) + *(_DWORD *)(v12 + 60)), v30 >= 0x40))
      {
        if (v30 >= 0x4000)
        {
          if (v30 >> 30)
            v14 = 10;
          else
            v14 = 6;
        }
        else
        {
          v14 = 4;
        }
      }
      else
      {
        v14 = 3;
      }
    }
    else
    {
      v14 = 0;
    }
    if (v16)
      goto LABEL_63;
LABEL_64:
    v36 = *(_DWORD *)(v12 + 52);
    if (v36)
      v36 -= *(_DWORD *)(v12 + 56) + *(_DWORD *)(v12 + 60);
    v37 = v36 + v14;
    if (v36 + v14 >= a4)
      v38 = a4;
    else
      v38 = v36 + v14;
    if (v38 >= 0x3FF6)
      v27 = 16374;
    else
      v27 = v38;
    v39 = *(_QWORD *)(v12 + 64);
    if (v39)
    {
      v40 = *(_BYTE *)(v39 + 66);
      v41 = *(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16);
      if ((v40 & 0x40) != 0)
      {
        v42 = (v41 >> 19) & 1;
        if (!gLogDatapath)
          LOBYTE(v42) = 1;
        if ((*(_WORD *)(stream_from_id + 188) & 0x200) == 0)
        {
          if ((v42 & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v43 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v45 = *(_DWORD *)(stream_from_id + 176);
              v44 = *(_DWORD *)(stream_from_id + 180);
              *(_DWORD *)buf = 136447490;
              v72 = "data_source_read_callback";
              v73 = 2082;
              v74 = stream_from_id + 191;
              v75 = 2080;
              v76 = " ";
              v77 = 1024;
              v78 = v44;
              v79 = 1024;
              v80 = v45;
              v81 = 2048;
              v82 = v12;
              _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> omitting no_end_stream flag and allowing end stream to be set because frame %p is complete", buf, 0x36u);
            }
          }
          goto LABEL_92;
        }
        if ((v42 & 1) != 0)
          goto LABEL_91;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v64 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
LABEL_91:
          *a5 |= 2u;
LABEL_92:
          if ((_DWORD)v27 == v37)
            v52 = 5;
          else
            v52 = 4;
          *a5 |= v52;
          if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v59 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v61 = *(_DWORD *)(stream_from_id + 176);
              v60 = *(_DWORD *)(stream_from_id + 180);
              *(_DWORD *)buf = 136447490;
              v72 = "data_source_read_callback";
              v73 = 2082;
              v74 = stream_from_id + 191;
              v75 = 2080;
              v76 = " ";
              v77 = 1024;
              v78 = v60;
              v79 = 1024;
              v80 = v61;
              v81 = 1024;
              LODWORD(v82) = v27;
              _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> skipped copying %u bytes in data_source_read_callback", buf, 0x32u);
            }
          }
          return v27;
        }
        v66 = *(_DWORD *)(stream_from_id + 176);
        v65 = *(_DWORD *)(stream_from_id + 180);
        *(_DWORD *)buf = 136447234;
        v72 = "data_source_read_callback";
        v73 = 2082;
        v74 = stream_from_id + 191;
        v75 = 2080;
        v76 = " ";
        v77 = 1024;
        v78 = v65;
        v79 = 1024;
        v80 = v66;
        v49 = "%{public}s %{public}s%s<i%u:s%d> setting no_end_stream flag because stream is in CONNECT mode";
        v50 = v64;
        v51 = 44;
LABEL_89:
        _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, v49, buf, v51);
        goto LABEL_91;
      }
    }
    else
    {
      v41 = *(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16);
    }
    if ((v41 & 0x80000) != 0 || !gLogDatapath)
      goto LABEL_91;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v46 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      goto LABEL_91;
    v48 = *(_DWORD *)(stream_from_id + 176);
    v47 = *(_DWORD *)(stream_from_id + 180);
    *(_DWORD *)buf = 136447490;
    v72 = "data_source_read_callback";
    v73 = 2082;
    v74 = stream_from_id + 191;
    v75 = 2080;
    v76 = " ";
    v77 = 1024;
    v78 = v47;
    v79 = 1024;
    v80 = v48;
    v81 = 2048;
    v82 = v12;
    v49 = "%{public}s %{public}s%s<i%u:s%d> setting no_end_stream flag because frame %p is not complete";
    v50 = v46;
    v51 = 54;
    goto LABEL_89;
  }
  capsule_type = nw_http_metadata_get_capsule_type(v16);
  v18 = nw_http_metadata_copy_capsule_data(v16);
  v19 = v18;
  if (v18)
  {
    size = dispatch_data_get_size(v18);
    if (!(size | capsule_type))
      goto LABEL_14;
  }
  else
  {
    size = 0;
    if (!capsule_type)
    {
LABEL_14:
      v21 = *(_DWORD *)(v12 + 52);
      if (v21)
        v21 -= *(_DWORD *)(v12 + 56) + *(_DWORD *)(v12 + 60);
      v22 = v21;
      v23 = 1;
      if (v21 < 0x40uLL)
        goto LABEL_17;
      goto LABEL_50;
    }
  }
  if (capsule_type >= 0x40)
  {
    if (capsule_type >= 0x4000)
    {
      if (capsule_type >> 30)
      {
        if (capsule_type >> 62)
        {
          v31 = __nwlog_obj();
          os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          v72 = "_http_vle_length";
          v73 = 2048;
          v74 = capsule_type;
          v32 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v32);
          if ((_DWORD)result)
            goto LABEL_127;
          free(v32);
          v23 = 0;
        }
        else
        {
          v23 = 8;
        }
      }
      else
      {
        v23 = 4;
      }
    }
    else
    {
      v23 = 2;
    }
  }
  else
  {
    v23 = 1;
  }
  v22 = size;
  if (size < 0x40)
  {
LABEL_17:
    v24 = 1;
    goto LABEL_58;
  }
LABEL_50:
  if (v22 < 0x4000)
  {
    v24 = 2;
    goto LABEL_58;
  }
  if (!(v22 >> 30))
  {
    v24 = 4;
    goto LABEL_58;
  }
  if (!(v22 >> 62))
  {
    v24 = 8;
    goto LABEL_58;
  }
  v67 = v23;
  v68 = __nwlog_obj();
  os_log_type_enabled(v68, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v72 = "_http_vle_length";
  v73 = 2048;
  v74 = v22;
  v34 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v34);
  if (!(_DWORD)result)
  {
    free(v34);
    v24 = 0;
    v23 = v67;
LABEL_58:
    if (capsule_type)
      v35 = size;
    else
      v35 = size + 1;
    v14 = v35 + v23 + v24;
    if (v19)
      dispatch_release(v19);
LABEL_63:
    os_release(v16);
    goto LABEL_64;
  }
LABEL_127:
  __break(1u);
  return result;
}

void nw_http2_send_end_stream(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  const char *v25;
  char *backtrace_string;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  NSObject *v38;
  int v39;
  int v40;
  NSObject *v41;
  int v42;
  int v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v31 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v33 = *(_DWORD *)(a2 + 176);
      v32 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)buf = 136447234;
      v47 = "nw_http2_send_end_stream";
      v48 = 2082;
      v49 = a2 + 191;
      v50 = 2080;
      v51 = " ";
      v52 = 1024;
      v53 = v32;
      v54 = 1024;
      v55 = v33;
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called", buf, 0x2Cu);
    }
  }
  v4 = *(unsigned __int16 *)(a2 + 188);
  v5 = v4 | (*(unsigned __int8 *)(a2 + 190) << 16);
  if ((v4 & 1) == 0)
  {
    if ((v5 & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v6 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v8 = *(_DWORD *)(a2 + 176);
        v7 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)buf = 136447234;
        v47 = "nw_http2_send_end_stream";
        v48 = 2082;
        v49 = a2 + 191;
        v50 = 2080;
        v51 = " ";
        v52 = 1024;
        v53 = v7;
        v54 = 1024;
        v55 = v8;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> ERROR: Cannot send end stream on a closed stream", buf, 0x2Cu);
      }
    }
    return;
  }
  v9 = (v5 >> 19) & 1;
  if (!gLogDatapath)
    LOBYTE(v9) = 1;
  if (*(_QWORD *)(a2 + 16))
  {
    if ((v9 & 1) != 0)
      goto LABEL_13;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v34 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      goto LABEL_13;
    v36 = *(_DWORD *)(a2 + 176);
    v35 = *(_DWORD *)(a2 + 180);
    *(_DWORD *)buf = 0;
    nw_frame_array_get_frame_count((uint64_t *)(a2 + 16), 0, buf);
    v37 = *(_DWORD *)buf;
    *(_DWORD *)buf = 136447490;
    v47 = "nw_http2_send_end_stream";
    v48 = 2082;
    v49 = a2 + 191;
    v50 = 2080;
    v51 = " ";
    v52 = 1024;
    v53 = v35;
    v54 = 1024;
    v55 = v36;
    v56 = 1024;
    v57 = v37;
    v17 = "%{public}s %{public}s%s<i%u:s%d> deferring end stream until all pending bytes (%u) are sent";
    v18 = v34;
    v19 = 50;
LABEL_51:
    _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, v17, buf, v19);
LABEL_13:
    *(_WORD *)(a2 + 188) |= 0x10u;
    return;
  }
  if ((v9 & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v38 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v40 = *(_DWORD *)(a2 + 176);
      v39 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)buf = 136447490;
      v47 = "nw_http2_send_end_stream";
      v48 = 2082;
      v49 = a2 + 191;
      v50 = 2080;
      v51 = " ";
      v52 = 1024;
      v53 = v39;
      v54 = 1024;
      v55 = v40;
      v56 = 1024;
      v57 = v40;
      _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> writing end stream on stream %d", buf, 0x32u);
    }
  }
  v10 = nghttp2_submit_data();
  if ((v10 & 0x80000000) == 0)
  {
    if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v41 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v43 = *(_DWORD *)(a2 + 176);
        v42 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)buf = 136447490;
        v47 = "nw_http2_send_end_stream";
        v48 = 2082;
        v49 = a2 + 191;
        v50 = 2080;
        v51 = " ";
        v52 = 1024;
        v53 = v42;
        v54 = 1024;
        v55 = v43;
        v56 = 1024;
        v57 = v43;
        _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> submitted end stream for stream %d", buf, 0x32u);
      }
    }
    v12 = *(unsigned __int16 *)(a2 + 188);
    v11 = a2 + 188;
    v13 = v12 & 0xFFFFFFEF | (*(unsigned __int8 *)(v11 + 2) << 16);
    *(_WORD *)v11 = v12 & 0xBFEF | 0x4000;
    *(_BYTE *)(v11 + 2) = BYTE2(v13);
    nw_http2_session_send(a1);
    return;
  }
  if (v10 == -529)
  {
    if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) != 0 || !gLogDatapath)
      goto LABEL_13;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      goto LABEL_13;
    v16 = *(_DWORD *)(a2 + 176);
    v15 = *(_DWORD *)(a2 + 180);
    *(_DWORD *)buf = 136447234;
    v47 = "nw_http2_send_end_stream";
    v48 = 2082;
    v49 = a2 + 191;
    v50 = 2080;
    v51 = " ";
    v52 = 1024;
    v53 = v15;
    v54 = 1024;
    v55 = v16;
    v17 = "%{public}s %{public}s%s<i%u:s%d> continuing (or starting) to defer end stream until all pending bytes are sent";
    v18 = v14;
    v19 = 44;
    goto LABEL_51;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v20 = nghttp2_strerror();
  *(_DWORD *)buf = 136446466;
  v47 = "nw_http2_send_end_stream";
  v48 = 2082;
  v49 = v20;
  v21 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (__nwlog_fault(v21, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = gLogObj;
      v23 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_41;
      v24 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v47 = "nw_http2_send_end_stream";
      v48 = 2082;
      v49 = v24;
      v25 = "%{public}s nghttp2_submit_data: %{public}s failed";
      goto LABEL_40;
    }
    if (!v44)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_41;
      v29 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v47 = "nw_http2_send_end_stream";
      v48 = 2082;
      v49 = v29;
      v25 = "%{public}s nghttp2_submit_data: %{public}s failed, backtrace limit exceeded";
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v27 = os_log_type_enabled(v22, type);
    if (backtrace_string)
    {
      if (v27)
      {
        v28 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        v47 = "nw_http2_send_end_stream";
        v48 = 2082;
        v49 = v28;
        v50 = 2082;
        v51 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s nghttp2_submit_data: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_41;
    }
    if (v27)
    {
      v30 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v47 = "nw_http2_send_end_stream";
      v48 = 2082;
      v49 = v30;
      v25 = "%{public}s nghttp2_submit_data: %{public}s failed, no backtrace";
LABEL_40:
      _os_log_impl(&dword_182FBE000, v22, v23, v25, buf, 0x16u);
    }
  }
LABEL_41:
  if (v21)
    free(v21);
}

void nw_http2_set_stream_output_available_pending(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v7 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_DWORD *)(a2 + 176);
      v8 = *(_DWORD *)(a2 + 180);
      v10 = 136447746;
      v11 = "nw_http2_set_stream_output_available_pending";
      v12 = 2082;
      v13 = a2 + 191;
      v14 = 2080;
      v15 = " ";
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v9;
      v20 = 1024;
      v21 = v9;
      v22 = 1024;
      v23 = a3;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called for stream %d, needs output available: %{BOOL}d", (uint8_t *)&v10, 0x38u);
    }
  }
  v6 = *(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16);
  *(_BYTE *)(a2 + 190) = BYTE2(v6);
  if (a3)
  {
    *(_WORD *)(a2 + 188) = v6 | 0x20;
    *(_WORD *)(a1 + 376) |= 0x800u;
  }
  else
  {
    *(_WORD *)(a2 + 188) = v6 & 0xFFDF;
  }
}

uint64_t nw_http2_empty_frame_data_source_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    *a5 = 1;
    return 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http2_empty_frame_data_source_callback";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_http2_empty_frame_data_source_callback";
      v9 = "%{public}s called with null data_flags";
      goto LABEL_17;
    }
    if (!v12)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_http2_empty_frame_data_source_callback";
      v9 = "%{public}s called with null data_flags, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v15 = "nw_http2_empty_frame_data_source_callback";
        v16 = 2082;
        v17 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null data_flags, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_http2_empty_frame_data_source_callback";
      v9 = "%{public}s called with null data_flags, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_18:
  if (v6)
    free(v6);
  return 0;
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_81551()
{
  _BOOL8 result;

  result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

uint64_t ___ZL25nw_http2_connection_closeP17nw_protocol_http2_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  BOOL v21;
  int v22;
  NSObject *v24;
  int v25;
  int v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[10];
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v5 = object;
    v6 = *(_QWORD *)nw_hash_node_get_extra(a2);
    v7 = *(_DWORD *)(v5 + 176);
    if (((*(unsigned __int16 *)(v5 + 188) | (*(unsigned __int8 *)(v5 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v24 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v26 = *(_DWORD *)(v5 + 176);
        v25 = *(_DWORD *)(v5 + 180);
        v30 = 136447490;
        v31 = "nw_http2_connection_close_block_invoke";
        v32 = 2082;
        v33 = (const char *)(v5 + 191);
        v34 = 2080;
        v35 = " ";
        v36 = 1024;
        v37 = v25;
        v38 = 1024;
        *(_DWORD *)v39 = v26;
        *(_WORD *)&v39[4] = 1024;
        *(_DWORD *)&v39[6] = v26;
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> closing stream %d", (uint8_t *)&v30, 0x32u);
      }
    }
    nw_http2_stream_close(*(_QWORD *)(a1 + 32), v5);
    v8 = (*(unsigned __int8 *)(v5 + 190) >> 3) & 1;
    if (!gLogDatapath)
      LOBYTE(v8) = 1;
    if (v6)
    {
      if ((v8 & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v9 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v11 = *(_DWORD *)(v5 + 176);
          v10 = *(_DWORD *)(v5 + 180);
          v30 = 136447746;
          v31 = "nw_http2_connection_close_block_invoke";
          v32 = 2082;
          v33 = (const char *)(v5 + 191);
          v34 = 2080;
          v35 = " ";
          v36 = 1024;
          v37 = v10;
          v38 = 1024;
          *(_DWORD *)v39 = v11;
          *(_WORD *)&v39[4] = 1024;
          *(_DWORD *)&v39[6] = v7;
          v40 = 2048;
          v41 = v5;
          v12 = "%{public}s %{public}s%s<i%u:s%d> deferring release of stream %d (%p), has associated input handler";
          v13 = v9;
          v14 = OS_LOG_TYPE_DEBUG;
          v15 = 60;
LABEL_22:
          _os_log_impl(&dword_182FBE000, v13, v14, v12, (uint8_t *)&v30, v15);
        }
      }
    }
    else
    {
      if ((v8 & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v27 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v29 = *(_DWORD *)(v5 + 176);
          v28 = *(_DWORD *)(v5 + 180);
          v30 = 136447746;
          v31 = "nw_http2_connection_close_block_invoke";
          v32 = 2082;
          v33 = (const char *)(v5 + 191);
          v34 = 2080;
          v35 = " ";
          v36 = 1024;
          v37 = v28;
          v38 = 1024;
          *(_DWORD *)v39 = v29;
          *(_WORD *)&v39[4] = 1024;
          *(_DWORD *)&v39[6] = v7;
          v40 = 2048;
          v41 = v5;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> destroying stream %d (%p) immediately, no associated input handler", (uint8_t *)&v30, 0x3Cu);
        }
      }
      nw_http2_stream_destroy((void **)v5);
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 32);
    if (!v16 || (*(__int16 *)(v16 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v17 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v18 = *(_QWORD *)(a1 + 32);
        v19 = (const char *)(v18 + 378);
        v20 = "";
        v21 = v18 == 0;
        v22 = *(_DWORD *)(v18 + 368);
        v31 = "nw_http2_connection_close_block_invoke";
        if (v21)
          v19 = "";
        v32 = 2082;
        v30 = 136447234;
        if (!v21)
          v20 = " ";
        v33 = v19;
        v34 = 2080;
        v35 = v20;
        v36 = 1024;
        v37 = v22;
        v38 = 2048;
        *(_QWORD *)v39 = a2;
        v12 = "%{public}s %{public}s%s<i%u> stream in node %p in id table is NULL, skipping rst stream";
        v13 = v17;
        v14 = OS_LOG_TYPE_ERROR;
        v15 = 48;
        goto LABEL_22;
      }
    }
  }
  return 1;
}

void nw_http2_send_goaway(uint64_t a1)
{
  __int16 v2;
  int v3;
  int v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  const char *v27;
  int v28;
  char *v29;
  _BOOL4 v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  _BOOL4 v39;
  int v40;
  char *backtrace_string;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  _WORD v61[17];

  *(_QWORD *)&v61[13] = *MEMORY[0x1E0C80C00];
  if (a1 && *(__int16 *)(a1 + 376) < 0)
    goto LABEL_5;
  if (gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v25 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      if (a1)
        v26 = " ";
      else
        v26 = "";
      if (a1)
        v27 = (const char *)(a1 + 378);
      else
        v27 = "";
      v28 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136447490;
      v51 = "nw_http2_send_goaway";
      v52 = 2082;
      v53 = (uint64_t)v27;
      v54 = 2080;
      v55 = v26;
      v56 = 1024;
      v57 = v28;
      v58 = 1024;
      v59 = 0;
      v60 = 2082;
      *(_QWORD *)v61 = nghttp2_http2_strerror();
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called with error %u (%{public}s)", buf, 0x36u);
      v2 = *(_WORD *)(a1 + 376);
      if ((v2 & 1) != 0)
      {
LABEL_53:
        if ((v2 & 0x8000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v34 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v35 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136446978;
            v51 = "nw_http2_send_goaway";
            v52 = 2082;
            v53 = a1 + 378;
            v54 = 2080;
            v55 = " ";
            v56 = 1024;
            v57 = v35;
            _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> already sent goaway, skipping", buf, 0x26u);
          }
        }
        return;
      }
LABEL_6:
      v3 = *(_DWORD *)(a1 + 364);
      if (!v3)
        goto LABEL_19;
      if ((v2 & 0x80) != 0)
      {
        if ((v3 & 1) == 0 && (v2 & 0x8000) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v36 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136447234;
          v51 = "nw_http2_send_goaway";
          v52 = 2082;
          v53 = a1 + 378;
          v54 = 2080;
          v55 = " ";
          v56 = 1024;
          v57 = v36;
          v58 = 1024;
          v59 = v3;
          type = OS_LOG_TYPE_ERROR;
          v48 = 0;
          v5 = (char *)_os_log_send_and_compose_impl();
          if (!__nwlog_fault(v5, &type, &v48))
            goto LABEL_113;
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v6 = gconnectionLogObj;
            v7 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              v37 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447234;
              v51 = "nw_http2_send_goaway";
              v52 = 2082;
              v53 = a1 + 378;
              v54 = 2080;
              v55 = " ";
              v56 = 1024;
              v57 = v37;
              v58 = 1024;
              v59 = v3;
              v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is even, but we are the server";
              goto LABEL_112;
            }
LABEL_113:
            if (!v5)
              goto LABEL_19;
            goto LABEL_114;
          }
          if (!v48)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v6 = gconnectionLogObj;
            v7 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              v45 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447234;
              v51 = "nw_http2_send_goaway";
              v52 = 2082;
              v53 = a1 + 378;
              v54 = 2080;
              v55 = " ";
              v56 = 1024;
              v57 = v45;
              v58 = 1024;
              v59 = v3;
              v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is even, but we are the server, backtrace limit exceeded";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v6 = gconnectionLogObj;
          v7 = type;
          v42 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
          if (!backtrace_string)
          {
            if (!v42)
              goto LABEL_113;
            v47 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136447234;
            v51 = "nw_http2_send_goaway";
            v52 = 2082;
            v53 = a1 + 378;
            v54 = 2080;
            v55 = " ";
            v56 = 1024;
            v57 = v47;
            v58 = 1024;
            v59 = v3;
            v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is even, but we are the server, no backtrace";
            goto LABEL_112;
          }
          if (v42)
          {
            v43 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136447490;
            v51 = "nw_http2_send_goaway";
            v52 = 2082;
            v53 = a1 + 378;
            v54 = 2080;
            v55 = " ";
            v56 = 1024;
            v57 = v43;
            v58 = 1024;
            v59 = v3;
            v60 = 2082;
            *(_QWORD *)v61 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s %{public}s%s<i%u> Last stream value %d is even, but we are the server, dumping backtrace:%{public}s", buf, 0x36u);
          }
          free(backtrace_string);
          if (v5)
LABEL_114:
            free(v5);
        }
      }
      else if ((v3 & 1) != 0 && (v2 & 0x8000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v4 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136447234;
        v51 = "nw_http2_send_goaway";
        v52 = 2082;
        v53 = a1 + 378;
        v54 = 2080;
        v55 = " ";
        v56 = 1024;
        v57 = v4;
        v58 = 1024;
        v59 = v3;
        type = OS_LOG_TYPE_ERROR;
        v48 = 0;
        v5 = (char *)_os_log_send_and_compose_impl();
        if (__nwlog_fault(v5, &type, &v48))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v6 = gconnectionLogObj;
            v7 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              v8 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447234;
              v51 = "nw_http2_send_goaway";
              v52 = 2082;
              v53 = a1 + 378;
              v54 = 2080;
              v55 = " ";
              v56 = 1024;
              v57 = v8;
              v58 = 1024;
              v59 = v3;
              v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is odd, but we are the client";
LABEL_112:
              _os_log_impl(&dword_182FBE000, v6, v7, v9, buf, 0x2Cu);
              goto LABEL_113;
            }
          }
          else if (v48)
          {
            v38 = (char *)__nw_create_backtrace_string();
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v6 = gconnectionLogObj;
            v7 = type;
            v39 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
            if (!v38)
            {
              if (!v39)
                goto LABEL_113;
              v46 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447234;
              v51 = "nw_http2_send_goaway";
              v52 = 2082;
              v53 = a1 + 378;
              v54 = 2080;
              v55 = " ";
              v56 = 1024;
              v57 = v46;
              v58 = 1024;
              v59 = v3;
              v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is odd, but we are the client, no backtrace";
              goto LABEL_112;
            }
            if (v39)
            {
              v40 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447490;
              v51 = "nw_http2_send_goaway";
              v52 = 2082;
              v53 = a1 + 378;
              v54 = 2080;
              v55 = " ";
              v56 = 1024;
              v57 = v40;
              v58 = 1024;
              v59 = v3;
              v60 = 2082;
              *(_QWORD *)v61 = v38;
              _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s %{public}s%s<i%u> Last stream value %d is odd, but we are the client, dumping backtrace:%{public}s", buf, 0x36u);
            }
            free(v38);
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v6 = gconnectionLogObj;
            v7 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              v44 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447234;
              v51 = "nw_http2_send_goaway";
              v52 = 2082;
              v53 = a1 + 378;
              v54 = 2080;
              v55 = " ";
              v56 = 1024;
              v57 = v44;
              v58 = 1024;
              v59 = v3;
              v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is odd, but we are the client, backtrace limit exceeded";
              goto LABEL_112;
            }
          }
        }
        goto LABEL_113;
      }
LABEL_19:
      *(_WORD *)(a1 + 376) |= 1u;
      if (!nghttp2_submit_goaway())
      {
LABEL_36:
        if ((*(__int16 *)(a1 + 376) & 0x80000000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v31 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v32 = *(_DWORD *)(a1 + 368);
            v33 = nghttp2_http2_strerror();
            *(_DWORD *)buf = 136447746;
            v51 = "nw_http2_send_goaway";
            v52 = 2082;
            v53 = a1 + 378;
            v54 = 2080;
            v55 = " ";
            v56 = 1024;
            v57 = v32;
            v58 = 1024;
            v59 = v3;
            v60 = 1024;
            *(_DWORD *)v61 = 0;
            v61[2] = 2082;
            *(_QWORD *)&v61[3] = v33;
            _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> submitted GOAWAY frame with last_stream %d and error %u (%{public}s)", buf, 0x3Cu);
          }
        }
        nw_http2_session_send(a1);
        return;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v51 = "nw_http2_send_goaway";
      v52 = 2082;
      v53 = v10;
      v11 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (__nwlog_fault(v11, &type, &v48))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          v13 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_34;
          v14 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http2_send_goaway";
          v52 = 2082;
          v53 = v14;
          v15 = "%{public}s nghttp2_submit_goaway: %{public}s failed";
          goto LABEL_33;
        }
        if (!v48)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          v13 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_34;
          v19 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http2_send_goaway";
          v52 = 2082;
          v53 = v19;
          v15 = "%{public}s nghttp2_submit_goaway: %{public}s failed, backtrace limit exceeded";
          goto LABEL_33;
        }
        v16 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = gLogObj;
        v13 = type;
        v17 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v16)
        {
          if (v17)
          {
            v18 = nghttp2_strerror();
            *(_DWORD *)buf = 136446722;
            v51 = "nw_http2_send_goaway";
            v52 = 2082;
            v53 = v18;
            v54 = 2082;
            v55 = v16;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s nghttp2_submit_goaway: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v16);
          goto LABEL_34;
        }
        if (v17)
        {
          v20 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http2_send_goaway";
          v52 = 2082;
          v53 = v20;
          v15 = "%{public}s nghttp2_submit_goaway: %{public}s failed, no backtrace";
LABEL_33:
          _os_log_impl(&dword_182FBE000, v12, v13, v15, buf, 0x16u);
        }
      }
LABEL_34:
      if (v11)
        free(v11);
      goto LABEL_36;
    }
  }
  if (a1)
  {
LABEL_5:
    v2 = *(_WORD *)(a1 + 376);
    if ((v2 & 1) != 0)
      goto LABEL_53;
    goto LABEL_6;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_http2_send_goaway";
  v21 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v48 = 0;
  if (__nwlog_fault(v21, &type, &v48))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http2_send_goaway";
      v24 = "%{public}s called with null http2";
      goto LABEL_82;
    }
    if (!v48)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http2_send_goaway";
      v24 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_82;
    }
    v29 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v30 = os_log_type_enabled(v22, type);
    if (v29)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "nw_http2_send_goaway";
        v52 = 2082;
        v53 = (uint64_t)v29;
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null http2, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v29);
      goto LABEL_83;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http2_send_goaway";
      v24 = "%{public}s called with null http2, no backtrace";
LABEL_82:
      _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
    }
  }
LABEL_83:
  if (v21)
    free(v21);
}

uint64_t ___ZL25nw_http2_connection_closeP17nw_protocol_http2_block_invoke_20(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t stream_from_protocol;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  BOOL v11;
  int v12;
  int v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  v5 = *(_QWORD *)(a1 + 32);
  if (object)
  {
    stream_from_protocol = nw_http2_get_stream_from_protocol(v5, object);
    nw_http2_protocol_close(*(_QWORD *)(a1 + 32), stream_from_protocol, object);
  }
  else if (!v5 || (*(__int16 *)(v5 + 376) & 0x80000000) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v7 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = (const char *)(v8 + 378);
      v10 = "";
      v11 = v8 == 0;
      v12 = *(_DWORD *)(v8 + 368);
      v15 = "nw_http2_connection_close_block_invoke";
      if (v11)
        v9 = "";
      v16 = 2082;
      v14 = 136447234;
      if (!v11)
        v10 = " ";
      v17 = v9;
      v18 = 2080;
      v19 = v10;
      v20 = 1024;
      v21 = v12;
      v22 = 2048;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> input protocol in node %p in protocol table is NULL, skipping", (uint8_t *)&v14, 0x30u);
    }
  }
  return 1;
}

